/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as FernOpenapiIr from "../../../../api/index";
import * as core from "../../../../core";

export const OneOfSchema: core.serialization.Schema<serializers.OneOfSchema.Raw, FernOpenapiIr.OneOfSchema> =
    core.serialization
        .union("type", {
            discriminated: core.serialization.lazyObject(() => serializers.DiscriminatedOneOfSchema),
            undisciminated: core.serialization.lazyObject(() => serializers.UnDiscriminatedOneOfSchema)
        })
        .transform<FernOpenapiIr.OneOfSchema>({
            transform: (value) => {
                switch (value.type) {
                    case "discriminated":
                        return FernOpenapiIr.OneOfSchema.discriminated(value);
                    case "undisciminated":
                        return FernOpenapiIr.OneOfSchema.undisciminated(value);
                    default:
                        return value as FernOpenapiIr.OneOfSchema;
                }
            },
            untransform: ({ _visit, ...value }) => value as any
        });

export declare namespace OneOfSchema {
    type Raw = OneOfSchema.Discriminated | OneOfSchema.Undisciminated;

    interface Discriminated extends serializers.DiscriminatedOneOfSchema.Raw {
        type: "discriminated";
    }

    interface Undisciminated extends serializers.UnDiscriminatedOneOfSchema.Raw {
        type: "undisciminated";
    }
}
