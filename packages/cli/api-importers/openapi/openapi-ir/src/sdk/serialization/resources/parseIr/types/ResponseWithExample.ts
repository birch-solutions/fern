/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as FernOpenapiIr from "../../../../api/index";
import * as core from "../../../../core";
import { FileResponse } from "../../finalIr/types/FileResponse";
import { JsonResponseWithExample } from "./JsonResponseWithExample";
import { TextResponse } from "../../finalIr/types/TextResponse";
import { JsonResponse } from "../../finalIr/types/JsonResponse";

export const ResponseWithExample: core.serialization.Schema<
    serializers.ResponseWithExample.Raw,
    FernOpenapiIr.ResponseWithExample
> = core.serialization
    .union("type", {
        file: FileResponse,
        json: JsonResponseWithExample,
        text: TextResponse,
        streamingSse: JsonResponse,
        streamingText: TextResponse,
        streamingJson: JsonResponseWithExample,
    })
    .transform<FernOpenapiIr.ResponseWithExample>({
        transform: (value) => {
            switch (value.type) {
                case "file":
                    return FernOpenapiIr.ResponseWithExample.file(value);
                case "json":
                    return FernOpenapiIr.ResponseWithExample.json(value);
                case "text":
                    return FernOpenapiIr.ResponseWithExample.text(value);
                case "streamingSse":
                    return FernOpenapiIr.ResponseWithExample.streamingSse(value);
                case "streamingText":
                    return FernOpenapiIr.ResponseWithExample.streamingText(value);
                case "streamingJson":
                    return FernOpenapiIr.ResponseWithExample.streamingJson(value);
                default:
                    return value as FernOpenapiIr.ResponseWithExample;
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace ResponseWithExample {
    type Raw =
        | ResponseWithExample.File
        | ResponseWithExample.Json
        | ResponseWithExample.Text
        | ResponseWithExample.StreamingSse
        | ResponseWithExample.StreamingText
        | ResponseWithExample.StreamingJson;

    interface File extends FileResponse.Raw {
        type: "file";
    }

    interface Json extends JsonResponseWithExample.Raw {
        type: "json";
    }

    interface Text extends TextResponse.Raw {
        type: "text";
    }

    interface StreamingSse extends JsonResponse.Raw {
        type: "streamingSse";
    }

    interface StreamingText extends TextResponse.Raw {
        type: "streamingText";
    }

    interface StreamingJson extends JsonResponseWithExample.Raw {
        type: "streamingJson";
    }
}
