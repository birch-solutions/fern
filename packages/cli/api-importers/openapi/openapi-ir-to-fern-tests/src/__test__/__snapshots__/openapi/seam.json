{
  "absoluteFilePath": "/DUMMY_PATH",
  "importedDefinitions": {},
  "namedDefinitionFiles": {
    "__package__.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "errors": {
          "BadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "unknown",
          },
          "UnauthorizedError": {
            "docs": "Unauthorized",
            "status-code": 401,
            "type": "unknown",
          },
        },
        "types": {
          "AccessCode": {
            "docs": undefined,
            "properties": {
              "access_code_id": {
                "docs": "Unique identifier for the access code.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "code": {
                "docs": "Code used for access. Typically, a numeric or alphanumeric string.",
                "type": "optional<string>",
              },
              "common_code_key": {
                "docs": "Unique identifier for a group of access codes that share the same code.",
                "type": "optional<string>",
              },
              "created_at": {
                "docs": "Date and time at which the access code was created.",
                "type": "datetime",
              },
              "device_id": {
                "docs": "Unique identifier for the device associated with the access code.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "ends_at": {
                "docs": "Date and time after which the time-bound access code becomes inactive.",
                "type": "optional<datetime>",
              },
              "errors": "optional<unknown>",
              "is_backup": {
                "docs": "Indicates whether the access code is a backup code.",
                "type": "optional<boolean>",
              },
              "is_backup_access_code_available": {
                "docs": "Indicates whether a backup access code is available for use if the primary access code is lost or compromised.",
                "type": "boolean",
              },
              "is_external_modification_allowed": {
                "docs": "Indicates whether changes to the access code from external sources are permitted.",
                "type": "boolean",
              },
              "is_managed": {
                "docs": "Indicates whether Seam manages the access code.",
                "type": "boolean",
              },
              "is_offline_access_code": {
                "docs": "Indicates whether the access code is intended for use in offline scenarios. If "true," this code can be created on a device without a network connection.",
                "type": "boolean",
              },
              "is_one_time_use": {
                "docs": "Indicates whether the access code can only be used once. If "true," the code becomes invalid after the first use.",
                "type": "boolean",
              },
              "is_scheduled_on_device": {
                "docs": "Indicates whether the code is set on the device according to a preconfigured schedule.",
                "type": "optional<boolean>",
              },
              "is_waiting_for_code_assignment": {
                "docs": "Indicates whether the access code is waiting for a code assignment.",
                "type": "optional<boolean>",
              },
              "name": {
                "docs": "Name of the access code. Enables administrators and users to identify the access code easily, especially when there are numerous access codes.",
                "type": "optional<string>",
              },
              "pulled_backup_access_code_id": {
                "docs": "Identifier of the pulled backup access code. Used to associate the pulled backup access code with the original access code.",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "starts_at": {
                "docs": "Date and time at which the time-bound access code becomes active.",
                "type": "optional<datetime>",
              },
              "status": {
                "docs": "
    Current status of the access code within the operational lifecycle. Values are "setting," a transitional phase that indicates that the code is being configured or activated; "set", which indicates that the code is active and operational; "unset," which indicates a deactivated or unused state, either before activation or after deliberate deactivation; "removing," which indicates a transitional period in which the code is being deleted or made inactive; and "unknown," which indicates an indeterminate state, due to reasons such as system errors or incomplete data, that highlights a potential need for system review or troubleshooting.
  ",
                "type": "AccessCodeStatus",
              },
              "type": {
                "docs": "Nature of the access code. Values are "ongoing" for access codes that are active continuously until deactivated manually or "time_bound" for access codes that have a specific duration.",
                "type": "AccessCodeType",
              },
              "warnings": "optional<unknown>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AccessCodeStatus": {
            "docs": "
    Current status of the access code within the operational lifecycle. Values are "setting," a transitional phase that indicates that the code is being configured or activated; "set", which indicates that the code is active and operational; "unset," which indicates a deactivated or unused state, either before activation or after deliberate deactivation; "removing," which indicates a transitional period in which the code is being deleted or made inactive; and "unknown," which indicates an indeterminate state, due to reasons such as system errors or incomplete data, that highlights a potential need for system review or troubleshooting.
  ",
            "enum": [
              "setting",
              "set",
              "unset",
              "removing",
              "unknown",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AccessCodeType": {
            "docs": "Nature of the access code. Values are "ongoing" for access codes that are active continuously until deactivated manually or "time_bound" for access codes that have a specific duration.",
            "enum": [
              "time_bound",
              "ongoing",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsAccessGroup": {
            "docs": undefined,
            "properties": {
              "access_group_type": {
                "docs": "
    ---
    deprecated: use external_type
    ---
  ",
                "type": "AcsAccessGroupAccessGroupType",
              },
              "access_group_type_display_name": {
                "docs": "
    ---
    deprecated: use external_type_display_name
    ---
    ",
                "type": "string",
              },
              "acs_access_group_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "acs_system_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "created_at": "datetime",
              "display_name": "string",
              "external_type": "AcsAccessGroupExternalType",
              "external_type_display_name": "string",
              "name": "string",
              "workspace_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsAccessGroupAccessGroupType": {
            "docs": "
    ---
    deprecated: use external_type
    ---
  ",
            "enum": [
              "pti_unit",
              "pti_access_level",
              "salto_access_group",
              "brivo_group",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsAccessGroupExternalType": {
            "enum": [
              "pti_unit",
              "pti_access_level",
              "salto_access_group",
              "brivo_group",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsCredential": {
            "docs": undefined,
            "properties": {
              "access_method": "AcsCredentialAccessMethod",
              "acs_credential_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "acs_credential_pool_id": {
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "acs_system_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "acs_user_id": {
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "code": "optional<string>",
              "created_at": "datetime",
              "display_name": {
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "ends_at": "optional<string>",
              "errors": "list<AcsCredentialErrorsItem>",
              "external_type": "optional<AcsCredentialExternalType>",
              "external_type_display_name": "optional<string>",
              "is_latest_desired_state_synced_with_provider": "optional<boolean>",
              "is_multi_phone_sync_credential": "optional<boolean>",
              "latest_desired_state_synced_with_provider_at": "optional<datetime>",
              "parent_acs_credential_id": {
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "starts_at": "optional<string>",
              "visionline_metadata": {
                "inline": true,
                "type": "optional<AcsCredentialVisionlineMetadata>",
              },
              "warnings": "list<AcsCredentialWarningsItem>",
              "workspace_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsCredentialAccessMethod": {
            "enum": [
              "code",
              "card",
              "mobile_key",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsCredentialErrorsItem": {
            "docs": undefined,
            "properties": {
              "error_code": "string",
              "message": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsCredentialExternalType": {
            "enum": [
              "pti_card",
              "brivo_credential",
              "hid_credential",
              "visionline_card",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsCredentialPool": {
            "docs": undefined,
            "properties": {
              "acs_credential_pool_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "acs_system_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "created_at": "datetime",
              "display_name": {
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "external_type": "literal<"hid_part_number">",
              "external_type_display_name": "string",
              "workspace_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsCredentialProvisioningAutomation": {
            "docs": undefined,
            "properties": {
              "acs_credential_provisioning_automation_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "created_at": "datetime",
              "credential_manager_acs_system_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "user_identity_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "workspace_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsCredentialVisionlineMetadata": {
            "docs": undefined,
            "properties": {
              "card_function_type": "AcsCredentialVisionlineMetadataCardFunctionType",
              "common_acs_entrance_ids": "optional<list<string>>",
              "guest_acs_entrance_ids": "optional<list<string>>",
              "joiner_acs_credential_ids": "optional<list<string>>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsCredentialVisionlineMetadataCardFunctionType": {
            "enum": [
              "guest",
              "staff",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsCredentialWarningsItem": {
            "docs": undefined,
            "properties": {
              "message": "string",
              "warning_code": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsEntrance": {
            "docs": undefined,
            "properties": {
              "acs_entrance_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "acs_system_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "created_at": "datetime",
              "display_name": "string",
              "errors": "list<AcsEntranceErrorsItem>",
              "latch_metadata": {
                "inline": true,
                "type": "optional<AcsEntranceLatchMetadata>",
              },
              "visionline_metadata": {
                "inline": true,
                "type": "optional<AcsEntranceVisionlineMetadata>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsEntranceErrorsItem": {
            "docs": undefined,
            "properties": {
              "error_code": "string",
              "message": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsEntranceLatchMetadata": {
            "docs": undefined,
            "properties": {
              "accessibility_type": "string",
              "door_name": "string",
              "door_type": "string",
              "is_connected": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsEntranceVisionlineMetadata": {
            "docs": undefined,
            "properties": {
              "door_category": "AcsEntranceVisionlineMetadataDoorCategory",
              "door_name": "string",
              "profiles": "optional<list<AcsEntranceVisionlineMetadataProfilesItem>>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsEntranceVisionlineMetadataDoorCategory": {
            "enum": [
              "entrance",
              "guest",
              {
                "name": "ElevatorReader",
                "value": "elevator reader",
              },
              "common",
              {
                "name": "CommonPms",
                "value": "common (PMS)",
              },
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsEntranceVisionlineMetadataProfilesItem": {
            "docs": undefined,
            "properties": {
              "visionline_door_profile_id": "string",
              "visionline_door_profile_type": "AcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileType",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileType": {
            "enum": [
              "BLE",
              "commonDoor",
              "touch",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsSystem": {
            "docs": undefined,
            "properties": {
              "acs_system_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "can_add_acs_users_to_acs_access_groups": "optional<boolean>",
              "can_automate_enrollment": "optional<boolean>",
              "can_create_acs_access_groups": "optional<boolean>",
              "can_remove_acs_users_from_acs_access_groups": "optional<boolean>",
              "connected_account_ids": "list<string>",
              "created_at": "datetime",
              "errors": "list<AcsSystemErrorsItem>",
              "external_type": "optional<AcsSystemExternalType>",
              "external_type_display_name": "optional<string>",
              "image_alt_text": "string",
              "image_url": "string",
              "name": "string",
              "system_type": {
                "docs": "
      ---
      deprecated: use external_type
      ---
      ",
                "type": "optional<AcsSystemSystemType>",
              },
              "system_type_display_name": {
                "docs": "
      ---
      deprecated: use external_type_display_name
      ---
      ",
                "type": "optional<string>",
              },
              "warnings": "list<AcsSystemWarningsItem>",
              "workspace_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsSystemErrorsItem": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "error_code",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
            "union": {
              "seam_bridge_disconnected": "AcsSystemErrorsItemSeamBridgeDisconnected",
              "visionline_instance_unreachable": "AcsSystemErrorsItemVisionlineInstanceUnreachable",
            },
          },
          "AcsSystemErrorsItemSeamBridgeDisconnected": {
            "docs": undefined,
            "properties": {
              "created_at": "datetime",
              "message": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsSystemErrorsItemVisionlineInstanceUnreachable": {
            "docs": undefined,
            "properties": {
              "created_at": "datetime",
              "message": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsSystemExternalType": {
            "enum": [
              "pti_site",
              "alta_org",
              "salto_site",
              "brivo_account",
              "hid_credential_manager_organization",
              "visionline_system",
              "assa_abloy_credential_service",
              "latch_building",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsSystemSystemType": {
            "docs": "
      ---
      deprecated: use external_type
      ---
      ",
            "enum": [
              "pti_site",
              "alta_org",
              "salto_site",
              "brivo_account",
              "hid_credential_manager_organization",
              "visionline_system",
              "assa_abloy_credential_service",
              "latch_building",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsSystemWarningsItem": {
            "docs": undefined,
            "properties": {},
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsUser": {
            "docs": undefined,
            "properties": {
              "access_schedule": {
                "inline": true,
                "type": "optional<AcsUserAccessSchedule>",
              },
              "acs_system_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "acs_user_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "created_at": "datetime",
              "display_name": "string",
              "email": {
                "docs": "
    ---
    deprecated: use email_address.
    ---
    ",
                "type": "optional<string>",
                "validation": {
                  "format": "email",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "email_address": {
                "type": "optional<string>",
                "validation": {
                  "format": "email",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "external_type": "optional<AcsUserExternalType>",
              "external_type_display_name": "optional<string>",
              "full_name": "optional<string>",
              "hid_acs_system_id": {
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "is_suspended": "boolean",
              "phone_number": "optional<string>",
              "user_identity_email_address": "optional<string>",
              "user_identity_full_name": "optional<string>",
              "user_identity_id": "optional<string>",
              "user_identity_phone_number": "optional<string>",
              "workspace_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsUserAccessSchedule": {
            "docs": undefined,
            "properties": {
              "ends_at": "datetime",
              "starts_at": "datetime",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AcsUserExternalType": {
            "enum": [
              "pti_user",
              "brivo_user",
              "hid_credential_manager_user",
              "salto_site_user",
              "latch_user",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttempt": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
            "union": [
              {
                "docs": "Locking door.",
                "type": "ActionAttemptZero",
              },
              {
                "docs": "Locking door succeeded.",
                "type": "ActionAttemptOne",
              },
              {
                "docs": "Locking door failed.",
                "type": "ActionAttemptTwo",
              },
              {
                "docs": "Unlocking door.",
                "type": "ActionAttemptThree",
              },
              {
                "docs": "Unlocking door succeeded.",
                "type": "ActionAttemptFour",
              },
              {
                "docs": "Unlocking door failed.",
                "type": "ActionAttemptFive",
              },
              {
                "docs": "Resetting sandbox workspace.",
                "type": "ActionAttemptSix",
              },
              {
                "docs": "Resetting sandbox workspace succeeded.",
                "type": "ActionAttemptSeven",
              },
              {
                "docs": "Resetting sandbox workspace failed.",
                "type": "ActionAttemptEight",
              },
              {
                "docs": "Setting HVAC to cool.",
                "type": "ActionAttemptNine",
              },
              {
                "docs": "Setting HVAC to cool succeeded.",
                "type": "ActionAttemptTen",
              },
              {
                "docs": "Setting HVAC to cool failed.",
                "type": "ActionAttemptEleven",
              },
              {
                "docs": "Setting HVAC to heat mode.",
                "type": "ActionAttemptTwelve",
              },
              {
                "docs": "Setting HVAC to heat mode succeeded.",
                "type": "ActionAttemptThirteen",
              },
              {
                "docs": "Setting HVAC to heat mode failed.",
                "type": "ActionAttemptFourteen",
              },
              {
                "docs": "Setting HVAC to heat-cool mode.",
                "type": "ActionAttemptFifteen",
              },
              {
                "docs": "Setting HVAC to heat-cool mode succeeded.",
                "type": "ActionAttemptSixteen",
              },
              {
                "docs": "Setting heat-cool mode failed.",
                "type": "ActionAttemptSeventeen",
              },
              {
                "docs": "Setting fan mode.",
                "type": "ActionAttemptEighteen",
              },
              {
                "docs": "Setting fan mode succeeded.",
                "type": "ActionAttemptNineteen",
              },
              {
                "docs": "Setting fan mode failed.",
                "type": "ActionAttemptTwenty",
              },
              {
                "docs": "Turning HVAC off.",
                "type": "ActionAttemptTwentyOne",
              },
              {
                "docs": "Turning HVAC off succeeded.",
                "type": "ActionAttemptTwentyTwo",
              },
              {
                "docs": "Turning HVAC off failed.",
                "type": "ActionAttemptTwentyThree",
              },
              "ActionAttemptTwentyFour",
              "ActionAttemptTwentyFive",
              "ActionAttemptTwentySix",
              "ActionAttemptTwentySeven",
              "ActionAttemptTwentyEight",
              "ActionAttemptTwentyNine",
              "ActionAttemptThirty",
              "ActionAttemptThirtyOne",
              "ActionAttemptThirtyTwo",
              "ActionAttemptThirtyThree",
              "ActionAttemptThirtyFour",
              "ActionAttemptThirtyFive",
              "ActionAttemptThirtySix",
              "ActionAttemptThirtySeven",
              "ActionAttemptThirtyEight",
              "ActionAttemptThirtyNine",
              "ActionAttemptForty",
              "ActionAttemptFortyOne",
              "ActionAttemptFortyTwo",
              "ActionAttemptFortyThree",
              "ActionAttemptActionAttemptId",
            ],
          },
          "ActionAttemptActionAttemptId": {
            "docs": undefined,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"UPDATE_NOISE_THRESHOLD">",
              "error": {
                "inline": true,
                "type": "ActionAttemptActionAttemptIdError",
              },
              "result": "optional<string>",
              "status": "literal<"error">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptActionAttemptIdError": {
            "docs": undefined,
            "properties": {
              "message": "string",
              "type": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptEight": {
            "docs": "Resetting sandbox workspace failed.",
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"RESET_SANDBOX_WORKSPACE">",
              "error": {
                "inline": true,
                "type": "ActionAttemptEightError",
              },
              "result": "optional<string>",
              "status": "literal<"error">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptEightError": {
            "docs": undefined,
            "properties": {
              "message": "string",
              "type": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptEighteen": {
            "docs": "Setting fan mode.",
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"SET_FAN_MODE">",
              "error": "optional<string>",
              "result": "optional<string>",
              "status": "literal<"pending">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptEleven": {
            "docs": "Setting HVAC to cool failed.",
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"SET_COOL">",
              "error": {
                "inline": true,
                "type": "ActionAttemptElevenError",
              },
              "result": "optional<string>",
              "status": "literal<"error">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptElevenError": {
            "docs": undefined,
            "properties": {
              "message": "string",
              "type": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptFifteen": {
            "docs": "Setting HVAC to heat-cool mode.",
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"SET_HEAT_COOL">",
              "error": "optional<string>",
              "result": "optional<string>",
              "status": "literal<"pending">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptFive": {
            "docs": "Unlocking door failed.",
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"UNLOCK_DOOR">",
              "error": {
                "inline": true,
                "type": "ActionAttemptFiveError",
              },
              "result": "optional<string>",
              "status": "literal<"error">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptFiveError": {
            "docs": undefined,
            "properties": {
              "message": "string",
              "type": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptForty": {
            "docs": undefined,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"DELETE_NOISE_THRESHOLD">",
              "error": "optional<string>",
              "result": "optional<unknown>",
              "status": "literal<"success">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptFortyOne": {
            "docs": undefined,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"DELETE_NOISE_THRESHOLD">",
              "error": {
                "inline": true,
                "type": "ActionAttemptFortyOneError",
              },
              "result": "optional<string>",
              "status": "literal<"error">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptFortyOneError": {
            "docs": undefined,
            "properties": {
              "message": "string",
              "type": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptFortyThree": {
            "docs": undefined,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"UPDATE_NOISE_THRESHOLD">",
              "error": "optional<string>",
              "result": "optional<unknown>",
              "status": "literal<"success">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptFortyTwo": {
            "docs": undefined,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"UPDATE_NOISE_THRESHOLD">",
              "error": "optional<string>",
              "result": "optional<string>",
              "status": "literal<"pending">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptFour": {
            "docs": "Unlocking door succeeded.",
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"UNLOCK_DOOR">",
              "error": "optional<string>",
              "result": {
                "inline": true,
                "type": "ActionAttemptFourResult",
              },
              "status": "literal<"success">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptFourResult": {
            "docs": undefined,
            "properties": {},
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptFourteen": {
            "docs": "Setting HVAC to heat mode failed.",
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"SET_HEAT">",
              "error": {
                "inline": true,
                "type": "ActionAttemptFourteenError",
              },
              "result": "optional<string>",
              "status": "literal<"error">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptFourteenError": {
            "docs": undefined,
            "properties": {
              "message": "string",
              "type": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptNine": {
            "docs": "Setting HVAC to cool.",
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"SET_COOL">",
              "error": "optional<string>",
              "result": "optional<string>",
              "status": "literal<"pending">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptNineteen": {
            "docs": "Setting fan mode succeeded.",
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"SET_FAN_MODE">",
              "error": "optional<string>",
              "result": {
                "inline": true,
                "type": "ActionAttemptNineteenResult",
              },
              "status": "literal<"success">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptNineteenResult": {
            "docs": undefined,
            "properties": {},
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptOne": {
            "docs": "Locking door succeeded.",
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"LOCK_DOOR">",
              "error": "optional<string>",
              "result": {
                "inline": true,
                "type": "ActionAttemptOneResult",
              },
              "status": "literal<"success">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptOneResult": {
            "docs": undefined,
            "properties": {},
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptSeven": {
            "docs": "Resetting sandbox workspace succeeded.",
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"RESET_SANDBOX_WORKSPACE">",
              "error": "optional<string>",
              "result": {
                "inline": true,
                "type": "ActionAttemptSevenResult",
              },
              "status": "literal<"success">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptSevenResult": {
            "docs": undefined,
            "properties": {},
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptSeventeen": {
            "docs": "Setting heat-cool mode failed.",
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"SET_HEAT_COOL">",
              "error": {
                "inline": true,
                "type": "ActionAttemptSeventeenError",
              },
              "result": "optional<string>",
              "status": "literal<"error">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptSeventeenError": {
            "docs": undefined,
            "properties": {
              "message": "string",
              "type": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptSix": {
            "docs": "Resetting sandbox workspace.",
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"RESET_SANDBOX_WORKSPACE">",
              "error": "optional<string>",
              "result": "optional<string>",
              "status": "literal<"pending">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptSixteen": {
            "docs": "Setting HVAC to heat-cool mode succeeded.",
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"SET_HEAT_COOL">",
              "error": "optional<string>",
              "result": {
                "inline": true,
                "type": "ActionAttemptSixteenResult",
              },
              "status": "literal<"success">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptSixteenResult": {
            "docs": undefined,
            "properties": {},
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptTen": {
            "docs": "Setting HVAC to cool succeeded.",
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"SET_COOL">",
              "error": "optional<string>",
              "result": {
                "inline": true,
                "type": "ActionAttemptTenResult",
              },
              "status": "literal<"success">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptTenResult": {
            "docs": undefined,
            "properties": {},
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptThirteen": {
            "docs": "Setting HVAC to heat mode succeeded.",
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"SET_HEAT">",
              "error": "optional<string>",
              "result": {
                "inline": true,
                "type": "ActionAttemptThirteenResult",
              },
              "status": "literal<"success">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptThirteenResult": {
            "docs": undefined,
            "properties": {},
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptThirty": {
            "docs": undefined,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"DELETE_ACCESS_CODE">",
              "error": "optional<string>",
              "result": "optional<string>",
              "status": "literal<"pending">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptThirtyEight": {
            "docs": undefined,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"CREATE_NOISE_THRESHOLD">",
              "error": {
                "inline": true,
                "type": "ActionAttemptThirtyEightError",
              },
              "result": "optional<string>",
              "status": "literal<"error">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptThirtyEightError": {
            "docs": undefined,
            "properties": {
              "message": "string",
              "type": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptThirtyFive": {
            "docs": undefined,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"UPDATE_ACCESS_CODE">",
              "error": {
                "inline": true,
                "type": "ActionAttemptThirtyFiveError",
              },
              "result": "optional<string>",
              "status": "literal<"error">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptThirtyFiveError": {
            "docs": undefined,
            "properties": {
              "message": "string",
              "type": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptThirtyFour": {
            "docs": undefined,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"UPDATE_ACCESS_CODE">",
              "error": "optional<string>",
              "result": "optional<unknown>",
              "status": "literal<"success">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptThirtyNine": {
            "docs": undefined,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"DELETE_NOISE_THRESHOLD">",
              "error": "optional<string>",
              "result": "optional<string>",
              "status": "literal<"pending">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptThirtyOne": {
            "docs": undefined,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"DELETE_ACCESS_CODE">",
              "error": "optional<string>",
              "result": "optional<unknown>",
              "status": "literal<"success">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptThirtySeven": {
            "docs": undefined,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"CREATE_NOISE_THRESHOLD">",
              "error": "optional<string>",
              "result": "optional<unknown>",
              "status": "literal<"success">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptThirtySix": {
            "docs": undefined,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"CREATE_NOISE_THRESHOLD">",
              "error": "optional<string>",
              "result": "optional<string>",
              "status": "literal<"pending">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptThirtyThree": {
            "docs": undefined,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"UPDATE_ACCESS_CODE">",
              "error": "optional<string>",
              "result": "optional<string>",
              "status": "literal<"pending">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptThirtyTwo": {
            "docs": undefined,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"DELETE_ACCESS_CODE">",
              "error": {
                "inline": true,
                "type": "ActionAttemptThirtyTwoError",
              },
              "result": "optional<string>",
              "status": "literal<"error">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptThirtyTwoError": {
            "docs": undefined,
            "properties": {
              "message": "string",
              "type": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptThree": {
            "docs": "Unlocking door.",
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"UNLOCK_DOOR">",
              "error": "optional<string>",
              "result": "optional<string>",
              "status": "literal<"pending">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptTwelve": {
            "docs": "Setting HVAC to heat mode.",
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"SET_HEAT">",
              "error": "optional<string>",
              "result": "optional<string>",
              "status": "literal<"pending">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptTwenty": {
            "docs": "Setting fan mode failed.",
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"SET_FAN_MODE">",
              "error": {
                "inline": true,
                "type": "ActionAttemptTwentyError",
              },
              "result": "optional<string>",
              "status": "literal<"error">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptTwentyEight": {
            "docs": undefined,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"CREATE_ACCESS_CODE">",
              "error": "optional<string>",
              "result": "optional<unknown>",
              "status": "literal<"success">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptTwentyError": {
            "docs": undefined,
            "properties": {
              "message": "string",
              "type": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptTwentyFive": {
            "docs": undefined,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"SYNC_ACCESS_CODES">",
              "error": "optional<string>",
              "result": "optional<unknown>",
              "status": "literal<"success">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptTwentyFour": {
            "docs": undefined,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"SYNC_ACCESS_CODES">",
              "error": "optional<string>",
              "result": "optional<string>",
              "status": "literal<"pending">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptTwentyNine": {
            "docs": undefined,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"CREATE_ACCESS_CODE">",
              "error": {
                "inline": true,
                "type": "ActionAttemptTwentyNineError",
              },
              "result": "optional<string>",
              "status": "literal<"error">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptTwentyNineError": {
            "docs": undefined,
            "properties": {
              "message": "string",
              "type": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptTwentyOne": {
            "docs": "Turning HVAC off.",
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"SET_THERMOSTAT_OFF">",
              "error": "optional<string>",
              "result": "optional<string>",
              "status": "literal<"pending">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptTwentySeven": {
            "docs": undefined,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"CREATE_ACCESS_CODE">",
              "error": "optional<string>",
              "result": "optional<string>",
              "status": "literal<"pending">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptTwentySix": {
            "docs": undefined,
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"SYNC_ACCESS_CODES">",
              "error": {
                "inline": true,
                "type": "ActionAttemptTwentySixError",
              },
              "result": "optional<string>",
              "status": "literal<"error">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptTwentySixError": {
            "docs": undefined,
            "properties": {
              "message": "string",
              "type": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptTwentyThree": {
            "docs": "Turning HVAC off failed.",
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"SET_THERMOSTAT_OFF">",
              "error": {
                "inline": true,
                "type": "ActionAttemptTwentyThreeError",
              },
              "result": "optional<string>",
              "status": "literal<"error">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptTwentyThreeError": {
            "docs": undefined,
            "properties": {
              "message": "string",
              "type": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptTwentyTwo": {
            "docs": "Turning HVAC off succeeded.",
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"SET_THERMOSTAT_OFF">",
              "error": "optional<string>",
              "result": {
                "inline": true,
                "type": "ActionAttemptTwentyTwoResult",
              },
              "status": "literal<"success">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptTwentyTwoResult": {
            "docs": undefined,
            "properties": {},
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptTwo": {
            "docs": "Locking door failed.",
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"LOCK_DOOR">",
              "error": {
                "inline": true,
                "type": "ActionAttemptTwoError",
              },
              "result": "optional<string>",
              "status": "literal<"error">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptTwoError": {
            "docs": undefined,
            "properties": {
              "message": "string",
              "type": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptZero": {
            "docs": "Locking door.",
            "properties": {
              "action_attempt_id": {
                "docs": "
    ---
    title: Action Attempt ID
    ---
    The ID of the action attempt.
  ",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_type": "literal<"LOCK_DOOR">",
              "error": "optional<string>",
              "result": "optional<string>",
              "status": "literal<"pending">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ClientSession": {
            "docs": undefined,
            "properties": {
              "client_session_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "connect_webview_ids": "list<string>",
              "connected_account_ids": "list<string>",
              "created_at": "datetime",
              "device_count": "double",
              "token": "string",
              "user_identifier_key": "optional<string>",
              "user_identity_ids": "list<string>",
              "workspace_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ClimateSettingSchedule": {
            "docs": undefined,
            "properties": {
              "automatic_cooling_enabled": "optional<boolean>",
              "automatic_heating_enabled": "optional<boolean>",
              "climate_setting_schedule_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "cooling_set_point_celsius": "optional<double>",
              "cooling_set_point_fahrenheit": "optional<double>",
              "created_at": "datetime",
              "device_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "errors": "optional<unknown>",
              "heating_set_point_celsius": "optional<double>",
              "heating_set_point_fahrenheit": "optional<double>",
              "hvac_mode_setting": "optional<ClimateSettingScheduleHvacModeSetting>",
              "manual_override_allowed": "optional<boolean>",
              "name": "optional<string>",
              "schedule_ends_at": "string",
              "schedule_starts_at": "string",
              "schedule_type": "literal<"time_bound">",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ClimateSettingScheduleHvacModeSetting": {
            "enum": [
              "off",
              "heat",
              "cool",
              "heat_cool",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ConnectWebview": {
            "docs": undefined,
            "properties": {
              "accepted_devices": {
                "docs": "
      ---
      deprecated: Unused. Will be removed.
      ---
      ",
                "type": "list<string>",
              },
              "accepted_providers": "list<string>",
              "any_device_allowed": {
                "docs": "
      ---
      deprecated: Unused. Will be removed.
      ---
      ",
                "type": "boolean",
              },
              "any_provider_allowed": "boolean",
              "authorized_at": "optional<datetime>",
              "automatically_manage_new_devices": "boolean",
              "connect_webview_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "connected_account_id": {
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "created_at": "datetime",
              "custom_metadata": "map<string, ConnectWebviewCustomMetadataValue>",
              "custom_redirect_failure_url": {
                "type": "optional<string>",
                "validation": {
                  "format": "uri",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "custom_redirect_url": {
                "type": "optional<string>",
                "validation": {
                  "format": "uri",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "device_selection_mode": "ConnectWebviewDeviceSelectionMode",
              "login_successful": "boolean",
              "selected_provider": "optional<string>",
              "status": "ConnectWebviewStatus",
              "url": {
                "type": "string",
                "validation": {
                  "format": "uri",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "wait_for_device_creation": "boolean",
              "workspace_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ConnectWebviewCustomMetadataValue": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
            "union": [
              "string",
              "boolean",
            ],
          },
          "ConnectWebviewDeviceSelectionMode": {
            "enum": [
              "none",
              "single",
              "multiple",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ConnectWebviewStatus": {
            "enum": [
              "pending",
              "failed",
              "authorized",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ConnectedAccount": {
            "docs": undefined,
            "properties": {
              "account_type": "optional<string>",
              "account_type_display_name": "string",
              "automatically_manage_new_devices": "boolean",
              "connected_account_id": {
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "created_at": "optional<datetime>",
              "custom_metadata": "map<string, ConnectedAccountCustomMetadataValue>",
              "errors": "optional<unknown>",
              "user_identifier": {
                "inline": true,
                "type": "optional<ConnectedAccountUserIdentifier>",
              },
              "warnings": "optional<unknown>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ConnectedAccountCustomMetadataValue": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
            "union": [
              "string",
              "boolean",
            ],
          },
          "ConnectedAccountUserIdentifier": {
            "docs": undefined,
            "properties": {
              "api_url": "optional<string>",
              "email": "optional<string>",
              "exclusive": "optional<boolean>",
              "phone": "optional<string>",
              "username": "optional<string>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "Device": {
            "docs": undefined,
            "properties": {
              "can_program_offline_access_codes": "optional<boolean>",
              "can_program_online_access_codes": "optional<boolean>",
              "can_remotely_lock": "optional<boolean>",
              "can_remotely_unlock": "optional<boolean>",
              "can_simulate_connection": "optional<boolean>",
              "can_simulate_disconnection": "optional<boolean>",
              "can_simulate_removal": "optional<boolean>",
              "capabilities_supported": {
                "docs": "Collection of capabilities that the device supports when connected to Seam. Values are "access_code," which indicates that the device can manage and utilize digital PIN codes for secure access; "lock," which indicates that the device controls a door locking mechanism, enabling the remote opening and closing of doors and other entry points; "noise_detection," which indicates that the device supports monitoring and responding to ambient noise levels; "thermostat," which indicates that the device can regulate and adjust indoor temperatures; and "battery," which indicates that the device can manage battery life and health.",
                "type": "list<DeviceCapabilitiesSupportedItem>",
              },
              "connected_account_id": {
                "docs": "Unique identifier for the account associated with the device.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "created_at": {
                "docs": "Date and time at which the device object was created.",
                "type": "datetime",
              },
              "custom_metadata": "map<string, DeviceCustomMetadataValue>",
              "device_id": {
                "docs": "Unique identifier for the device.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "device_type": {
                "docs": "Type of the device.",
                "type": "DeviceDeviceType",
              },
              "display_name": {
                "docs": "Display name of the device, defaults to nickname (if it is set) or properties.appearance.name otherwise. Enables administrators and users to identify the device easily, especially when there are numerous devices.",
                "type": "string",
              },
              "errors": {
                "docs": "Array of errors associated with the device. Each error object within the array contains two fields: "error_code" and "message." "error_code" is a string that uniquely identifies the type of error, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the error, offering insights into the issue and potentially how to rectify it.",
                "type": "list<DeviceErrorsItem>",
              },
              "is_managed": {
                "docs": "Indicates whether Seam manages the device.",
                "type": "boolean",
              },
              "location": {
                "docs": "Location information for the device.",
                "inline": true,
                "type": "optional<DeviceLocation>",
              },
              "nickname": {
                "docs": "Optional nickname to describe the device, settable through Seam",
                "type": "optional<string>",
              },
              "properties": {
                "docs": "Properties of the device.",
                "type": "DeviceProperties",
              },
              "warnings": {
                "docs": "Array of warnings associated with the device. Each warning object within the array contains two fields: "warning_code" and "message." "warning_code" is a string that uniquely identifies the type of warning, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the warning, offering insights into the issue and potentially how to rectify it.",
                "type": "list<DeviceWarningsItem>",
              },
              "workspace_id": {
                "docs": "Unique identifier for the Seam workspace associated with the device.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DeviceCapabilitiesSupportedItem": {
            "enum": [
              "access_code",
              "lock",
              "noise_detection",
              "thermostat",
              "battery",
              "phone",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DeviceCustomMetadataValue": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
            "union": [
              "string",
              "boolean",
            ],
          },
          "DeviceDeviceType": {
            "docs": "Type of the device.",
            "enum": [
              "akuvox_lock",
              "august_lock",
              "brivo_access_point",
              "butterflymx_panel",
              "avigilon_alta_entry",
              "doorking_lock",
              "genie_door",
              "igloo_lock",
              "linear_lock",
              "lockly_lock",
              "kwikset_lock",
              "nuki_lock",
              "salto_lock",
              "schlage_lock",
              "seam_relay",
              "smartthings_lock",
              "wyze_lock",
              "yale_lock",
              "two_n_intercom",
              "controlbyweb_device",
              "ttlock_lock",
              "igloohome_lock",
              "hubitat_lock",
              "four_suites_door",
              "dormakaba_oracode_door",
              "tedee_lock",
              "noiseaware_activity_zone",
              "minut_sensor",
              "ecobee_thermostat",
              "nest_thermostat",
              "honeywell_resideo_thermostat",
              "ios_phone",
              "android_phone",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DeviceErrorsItem": {
            "docs": undefined,
            "properties": {
              "error_code": "string",
              "message": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DeviceLocation": {
            "docs": "Location information for the device.",
            "properties": {
              "location_name": {
                "docs": "Name of the device location.",
                "type": "optional<string>",
              },
              "timezone": {
                "docs": "Time zone of the device location.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DeviceProperties": {
            "docs": "Properties of the device.",
            "properties": {
              "_experimental_supported_code_from_access_codes_lengths": "optional<list<double>>",
              "accessory_keypad": {
                "docs": "Represents the accessory keypad state.",
                "inline": true,
                "type": "optional<DevicePropertiesAccessoryKeypad>",
              },
              "appearance": {
                "inline": true,
                "type": "DevicePropertiesAppearance",
              },
              "assa_abloy_credential_service_metadata": {
                "inline": true,
                "type": "optional<DevicePropertiesAssaAbloyCredentialServiceMetadata>",
              },
              "august_metadata": {
                "inline": true,
                "type": "optional<DevicePropertiesAugustMetadata>",
              },
              "avigilon_alta_metadata": {
                "inline": true,
                "type": "optional<DevicePropertiesAvigilonAltaMetadata>",
              },
              "battery": {
                "docs": "Represents the current status of the battery charge level. Values are "critical," which indicates an extremely low level, suggesting imminent shutdown or an urgent need for charging; "low," which signifies that the battery is under the preferred threshold and should be charged soon; "good," which denotes a satisfactory charge level, adequate for normal use without the immediate need for recharging; and "full," which represents a battery that is fully charged, providing the maximum duration of usage.",
                "inline": true,
                "type": "optional<DevicePropertiesBattery>",
              },
              "battery_level": {
                "docs": "Indicates the battery level of the device as a decimal value between 0 and 1, inclusive.",
                "type": "optional<double>",
                "validation": {
                  "exclusiveMax": undefined,
                  "exclusiveMin": undefined,
                  "max": 1,
                  "min": 0,
                  "multipleOf": undefined,
                },
              },
              "brivo_metadata": {
                "inline": true,
                "type": "optional<DevicePropertiesBrivoMetadata>",
              },
              "code_constraints": "optional<list<DevicePropertiesCodeConstraintsItem>>",
              "controlbyweb_metadata": {
                "inline": true,
                "type": "optional<DevicePropertiesControlbywebMetadata>",
              },
              "currently_triggering_noise_threshold_ids": {
                "docs": "Array of noise threshold IDs that are currently triggering.",
                "type": "optional<list<string>>",
              },
              "door_open": "optional<boolean>",
              "dormakaba_oracode_metadata": {
                "inline": true,
                "type": "optional<DevicePropertiesDormakabaOracodeMetadata>",
              },
              "ecobee_metadata": {
                "inline": true,
                "type": "optional<DevicePropertiesEcobeeMetadata>",
              },
              "four_suites_metadata": {
                "inline": true,
                "type": "optional<DevicePropertiesFourSuitesMetadata>",
              },
              "genie_metadata": {
                "inline": true,
                "type": "optional<DevicePropertiesGenieMetadata>",
              },
              "has_direct_power": {
                "docs": "Indicates whether the device has direct power.",
                "type": "optional<boolean>",
              },
              "has_native_entry_events": "optional<boolean>",
              "honeywell_resideo_metadata": {
                "inline": true,
                "type": "optional<DevicePropertiesHoneywellResideoMetadata>",
              },
              "hubitat_metadata": {
                "inline": true,
                "type": "optional<DevicePropertiesHubitatMetadata>",
              },
              "igloo_metadata": {
                "inline": true,
                "type": "optional<DevicePropertiesIglooMetadata>",
              },
              "igloohome_metadata": {
                "inline": true,
                "type": "optional<DevicePropertiesIgloohomeMetadata>",
              },
              "image_alt_text": {
                "docs": "Alt text for the device image.",
                "type": "optional<string>",
              },
              "image_url": {
                "docs": "Image URL for the device.",
                "type": "optional<string>",
                "validation": {
                  "format": "uri",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "keypad_battery": {
                "inline": true,
                "type": "optional<DevicePropertiesKeypadBattery>",
              },
              "kwikset_metadata": {
                "inline": true,
                "type": "optional<DevicePropertiesKwiksetMetadata>",
              },
              "locked": "optional<boolean>",
              "lockly_metadata": {
                "inline": true,
                "type": "optional<DevicePropertiesLocklyMetadata>",
              },
              "manufacturer": {
                "docs": "Manufacturer of the device.",
                "type": "optional<string>",
              },
              "max_active_codes_supported": "optional<double>",
              "minut_metadata": {
                "inline": true,
                "type": "optional<DevicePropertiesMinutMetadata>",
              },
              "model": {
                "inline": true,
                "type": "DevicePropertiesModel",
              },
              "name": {
                "docs": "
      ---
      deprecated: use device.display_name instead
      ---
      Name of the device.
      ",
                "type": "string",
              },
              "nest_metadata": {
                "inline": true,
                "type": "optional<DevicePropertiesNestMetadata>",
              },
              "noise_level_decibels": {
                "docs": "Indicates current noise level in decibels, if the device supports noise detection.",
                "type": "optional<double>",
              },
              "noiseaware_metadata": {
                "inline": true,
                "type": "optional<DevicePropertiesNoiseawareMetadata>",
              },
              "nuki_metadata": {
                "inline": true,
                "type": "optional<DevicePropertiesNukiMetadata>",
              },
              "offline_access_codes_enabled": {
                "docs": "Indicates whether it is currently possible to use offline access codes for the device.",
                "type": "optional<boolean>",
              },
              "online": {
                "docs": "Indicates whether the device is online.",
                "type": "boolean",
              },
              "online_access_codes_enabled": {
                "docs": "Indicates whether it is currently possible to use online access codes for the device.",
                "type": "optional<boolean>",
              },
              "salto_metadata": {
                "inline": true,
                "type": "optional<DevicePropertiesSaltoMetadata>",
              },
              "schlage_metadata": {
                "inline": true,
                "type": "optional<DevicePropertiesSchlageMetadata>",
              },
              "seam_bridge_metadata": {
                "inline": true,
                "type": "optional<DevicePropertiesSeamBridgeMetadata>",
              },
              "serial_number": {
                "docs": "Serial number of the device.",
                "type": "optional<string>",
              },
              "smartthings_metadata": {
                "inline": true,
                "type": "optional<DevicePropertiesSmartthingsMetadata>",
              },
              "supported_code_lengths": "optional<list<double>>",
              "supports_accessory_keypad": {
                "docs": "
      ---
      deprecated: use device.properties.model.can_connect_accessory_keypad
      ---
      ",
                "type": "optional<boolean>",
              },
              "supports_backup_access_code_pool": "optional<boolean>",
              "supports_offline_access_codes": {
                "docs": "
      ---
      deprecated: use offline_access_codes_enabled
      ---
      ",
                "type": "optional<boolean>",
              },
              "tedee_metadata": {
                "inline": true,
                "type": "optional<DevicePropertiesTedeeMetadata>",
              },
              "ttlock_metadata": {
                "inline": true,
                "type": "optional<DevicePropertiesTtlockMetadata>",
              },
              "two_n_metadata": {
                "inline": true,
                "type": "optional<DevicePropertiesTwoNMetadata>",
              },
              "wyze_metadata": {
                "inline": true,
                "type": "optional<DevicePropertiesWyzeMetadata>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesAccessoryKeypad": {
            "docs": "Represents the accessory keypad state.",
            "properties": {
              "battery": {
                "docs": "Indicates if the keypad battery properties.",
                "inline": true,
                "type": "optional<DevicePropertiesAccessoryKeypadBattery>",
              },
              "is_connected": {
                "docs": "Indicates if the accessory_keypad is connected to the device.",
                "type": "boolean",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesAccessoryKeypadBattery": {
            "docs": "Indicates if the keypad battery properties.",
            "properties": {
              "level": {
                "type": "double",
                "validation": {
                  "exclusiveMax": undefined,
                  "exclusiveMin": undefined,
                  "max": 1,
                  "min": 0,
                  "multipleOf": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesAppearance": {
            "docs": undefined,
            "properties": {
              "name": {
                "docs": "Name of the device as seen from the provider API and application, not settable through Seam.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesAssaAbloyCredentialServiceMetadata": {
            "docs": undefined,
            "properties": {
              "endpoints": "list<DevicePropertiesAssaAbloyCredentialServiceMetadataEndpointsItem>",
              "has_active_endpoint": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesAssaAbloyCredentialServiceMetadataEndpointsItem": {
            "docs": undefined,
            "properties": {
              "endpoint_id": "string",
              "is_active": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesAugustMetadata": {
            "docs": undefined,
            "properties": {
              "has_keypad": "boolean",
              "house_id": "optional<string>",
              "house_name": "string",
              "keypad_battery_level": "optional<string>",
              "lock_id": "string",
              "lock_name": "string",
              "model": "optional<string>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesAvigilonAltaMetadata": {
            "docs": undefined,
            "properties": {
              "entry_name": "string",
              "entry_relays_total_count": "double",
              "org_name": "string",
              "site_id": "double",
              "site_name": "string",
              "zone_id": "double",
              "zone_name": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesBattery": {
            "docs": "Represents the current status of the battery charge level. Values are "critical," which indicates an extremely low level, suggesting imminent shutdown or an urgent need for charging; "low," which signifies that the battery is under the preferred threshold and should be charged soon; "good," which denotes a satisfactory charge level, adequate for normal use without the immediate need for recharging; and "full," which represents a battery that is fully charged, providing the maximum duration of usage.",
            "properties": {
              "level": {
                "type": "double",
                "validation": {
                  "exclusiveMax": undefined,
                  "exclusiveMin": undefined,
                  "max": 1,
                  "min": 0,
                  "multipleOf": undefined,
                },
              },
              "status": "DevicePropertiesBatteryStatus",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesBatteryStatus": {
            "enum": [
              "critical",
              "low",
              "good",
              "full",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesBrivoMetadata": {
            "docs": undefined,
            "properties": {
              "device_name": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesCodeConstraintsItem": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
            "union": [
              "DevicePropertiesCodeConstraintsItemZero",
              "DevicePropertiesCodeConstraintsItemMaxLength",
            ],
          },
          "DevicePropertiesCodeConstraintsItemMaxLength": {
            "docs": undefined,
            "properties": {
              "constraint_type": "DevicePropertiesCodeConstraintsItemMaxLengthConstraintType",
              "max_length": "optional<double>",
              "min_length": "optional<double>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesCodeConstraintsItemMaxLengthConstraintType": {
            "enum": [
              "name_length",
              "name_must_be_unique",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesCodeConstraintsItemZero": {
            "docs": undefined,
            "properties": {
              "constraint_type": "DevicePropertiesCodeConstraintsItemZeroConstraintType",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesCodeConstraintsItemZeroConstraintType": {
            "enum": [
              "no_zeros",
              "cannot_start_with_12",
              "no_triple_consecutive_ints",
              "cannot_specify_pin_code",
              "pin_code_matches_existing_set",
              "start_date_in_future",
              "no_ascending_or_descending_sequence",
              "at_least_three_unique_digits",
              "cannot_contain_089",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesControlbywebMetadata": {
            "docs": undefined,
            "properties": {
              "device_id": "string",
              "device_name": "string",
              "relay_name": "optional<string>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesDormakabaOracodeMetadata": {
            "docs": undefined,
            "properties": {
              "device_id": "optional<double>",
              "door_id": "double",
              "door_is_wireless": "boolean",
              "door_name": "string",
              "iana_timezone": "optional<string>",
              "predefined_time_slots": "optional<list<DevicePropertiesDormakabaOracodeMetadataPredefinedTimeSlotsItem>>",
              "site_id": "double",
              "site_name": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesDormakabaOracodeMetadataPredefinedTimeSlotsItem": {
            "docs": undefined,
            "properties": {
              "check_in_time": "string",
              "check_out_time": "string",
              "dormakaba_oracode_user_level_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "ext_dormakaba_oracode_user_level_prefix": "double",
              "is_24_hour": "boolean",
              "is_biweekly_mode": "boolean",
              "is_master": "boolean",
              "is_one_shot": "boolean",
              "name": "string",
              "prefix": "double",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesEcobeeMetadata": {
            "docs": undefined,
            "properties": {
              "device_name": "string",
              "ecobee_device_id": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesFourSuitesMetadata": {
            "docs": undefined,
            "properties": {
              "device_id": "double",
              "device_name": "string",
              "reclose_delay_in_seconds": "double",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesGenieMetadata": {
            "docs": undefined,
            "properties": {
              "device_name": "string",
              "door_name": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesHoneywellResideoMetadata": {
            "docs": undefined,
            "properties": {
              "device_name": "string",
              "honeywell_resideo_device_id": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesHubitatMetadata": {
            "docs": undefined,
            "properties": {
              "device_id": "string",
              "device_label": "string",
              "device_name": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesIglooMetadata": {
            "docs": undefined,
            "properties": {
              "bridge_id": "string",
              "device_id": "string",
              "model": "optional<string>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesIgloohomeMetadata": {
            "docs": undefined,
            "properties": {
              "bridge_id": "optional<string>",
              "bridge_name": "optional<string>",
              "device_id": "string",
              "device_name": "string",
              "keypad_id": "optional<string>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesKeypadBattery": {
            "docs": undefined,
            "properties": {
              "level": "double",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesKwiksetMetadata": {
            "docs": undefined,
            "properties": {
              "device_id": "string",
              "device_name": "string",
              "model_number": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesLocklyMetadata": {
            "docs": undefined,
            "properties": {
              "device_id": "string",
              "device_name": "string",
              "model": "optional<string>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesMinutMetadata": {
            "docs": undefined,
            "properties": {
              "device_id": "string",
              "device_name": "string",
              "latest_sensor_values": {
                "inline": true,
                "type": "DevicePropertiesMinutMetadataLatestSensorValues",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesMinutMetadataLatestSensorValues": {
            "docs": undefined,
            "properties": {
              "accelerometer_z": {
                "inline": true,
                "type": "DevicePropertiesMinutMetadataLatestSensorValuesAccelerometerZ",
              },
              "humidity": {
                "inline": true,
                "type": "DevicePropertiesMinutMetadataLatestSensorValuesHumidity",
              },
              "pressure": {
                "inline": true,
                "type": "DevicePropertiesMinutMetadataLatestSensorValuesPressure",
              },
              "sound": {
                "inline": true,
                "type": "DevicePropertiesMinutMetadataLatestSensorValuesSound",
              },
              "temperature": {
                "inline": true,
                "type": "DevicePropertiesMinutMetadataLatestSensorValuesTemperature",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesMinutMetadataLatestSensorValuesAccelerometerZ": {
            "docs": undefined,
            "properties": {
              "time": "string",
              "value": "double",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesMinutMetadataLatestSensorValuesHumidity": {
            "docs": undefined,
            "properties": {
              "time": "string",
              "value": "double",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesMinutMetadataLatestSensorValuesPressure": {
            "docs": undefined,
            "properties": {
              "time": "string",
              "value": "double",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesMinutMetadataLatestSensorValuesSound": {
            "docs": undefined,
            "properties": {
              "time": "string",
              "value": "double",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesMinutMetadataLatestSensorValuesTemperature": {
            "docs": undefined,
            "properties": {
              "time": "string",
              "value": "double",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesModel": {
            "docs": undefined,
            "properties": {
              "accessory_keypad_supported": {
                "docs": "
      ---
      deprecated: use device.properties.model.can_connect_accessory_keypad
      ---
      ",
                "type": "optional<boolean>",
              },
              "can_connect_accessory_keypad": {
                "docs": "Indicates whether the device can connect a accessory keypad.",
                "type": "optional<boolean>",
              },
              "display_name": {
                "docs": "Display name of the device model.",
                "type": "string",
              },
              "has_built_in_keypad": {
                "docs": "Indicates whether the device has a built in accessory keypad.",
                "type": "optional<boolean>",
              },
              "manufacturer_display_name": {
                "docs": "Display name that corresponds to the manufacturer-specific terminology for the device.",
                "type": "string",
              },
              "offline_access_codes_supported": {
                "docs": "Indicates whether the device supports offline access codes.",
                "type": "optional<boolean>",
              },
              "online_access_codes_supported": {
                "docs": "Indicates whether the device supports online access codes.",
                "type": "optional<boolean>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesNestMetadata": {
            "docs": undefined,
            "properties": {
              "custom_name": "string",
              "device_name": "string",
              "nest_device_id": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesNoiseawareMetadata": {
            "docs": undefined,
            "properties": {
              "device_id": "string",
              "device_model": "DevicePropertiesNoiseawareMetadataDeviceModel",
              "device_name": "string",
              "noise_level_decibel": "double",
              "noise_level_nrs": "double",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesNoiseawareMetadataDeviceModel": {
            "enum": [
              "indoor",
              "outdoor",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesNukiMetadata": {
            "docs": undefined,
            "properties": {
              "device_id": "string",
              "device_name": "string",
              "keypad_2_paired": "optional<boolean>",
              "keypad_battery_critical": "optional<boolean>",
              "keypad_paired": "optional<boolean>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesSaltoMetadata": {
            "docs": undefined,
            "properties": {
              "battery_level": "string",
              "customer_reference": "string",
              "lock_id": "string",
              "lock_type": "string",
              "locked_state": "string",
              "model": "optional<string>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesSchlageMetadata": {
            "docs": undefined,
            "properties": {
              "access_code_length": "optional<double>",
              "device_id": "string",
              "device_name": "string",
              "model": "optional<string>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesSeamBridgeMetadata": {
            "docs": undefined,
            "properties": {
              "device_num": "double",
              "name": "string",
              "unlock_method": "optional<DevicePropertiesSeamBridgeMetadataUnlockMethod>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesSeamBridgeMetadataUnlockMethod": {
            "enum": [
              "bridge",
              "doorking",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesSmartthingsMetadata": {
            "docs": undefined,
            "properties": {
              "device_id": "string",
              "device_name": "string",
              "location_id": "optional<string>",
              "model": "optional<string>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesTedeeMetadata": {
            "docs": undefined,
            "properties": {
              "bridge_id": "double",
              "bridge_name": "string",
              "device_id": "double",
              "device_model": "string",
              "device_name": "string",
              "keypad_id": "optional<double>",
              "serial_number": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesTtlockMetadata": {
            "docs": undefined,
            "properties": {
              "feature_value": "string",
              "lock_alias": "string",
              "lock_id": "double",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesTwoNMetadata": {
            "docs": undefined,
            "properties": {
              "device_id": "double",
              "device_name": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicePropertiesWyzeMetadata": {
            "docs": undefined,
            "properties": {
              "device_id": "string",
              "device_info_model": "string",
              "device_name": "string",
              "keypad_uuid": "optional<string>",
              "locker_status_hardlock": "optional<double>",
              "product_model": "string",
              "product_name": "string",
              "product_type": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DeviceProvider": {
            "docs": undefined,
            "properties": {
              "device_provider_name": "DeviceProviderDeviceProviderName",
              "display_name": "string",
              "image_url": "string",
              "provider_categories": "list<DeviceProviderProviderCategoriesItem>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DeviceProviderDeviceProviderName": {
            "enum": [
              "akuvox",
              "august",
              "avigilon_alta",
              "brivo",
              "butterflymx",
              "schlage",
              "smartthings",
              "yale",
              "genie",
              "doorking",
              "salto",
              "lockly",
              "ttlock",
              "linear",
              "noiseaware",
              "nuki",
              "seam_relay_admin",
              "igloo",
              "kwikset",
              "minut",
              "my_2n",
              "controlbyweb",
              "nest",
              "igloohome",
              "ecobee",
              "hubitat",
              "four_suites",
              "dormakaba_oracode",
              "pti",
              "wyze",
              "seam_passport",
              "visionline",
              "assa_abloy_credential_service",
              "seam_bridge",
              "tedee",
              "honeywell_resideo",
              "latch",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DeviceProviderProviderCategoriesItem": {
            "enum": [
              "stable",
              "consumer_smartlocks",
              "thermostats",
              "noise_sensors",
              "access_control_systems",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DeviceWarningsItem": {
            "docs": undefined,
            "properties": {
              "message": "string",
              "warning_code": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "EnrollmentAutomation": {
            "docs": undefined,
            "properties": {
              "created_at": "datetime",
              "credential_manager_acs_system_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "enrollment_automation_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "user_identity_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "workspace_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "Event": {
            "docs": undefined,
            "properties": {
              "acs_credential_id": {
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "acs_system_id": {
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "acs_user_id": {
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "action_attempt_id": {
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "client_session_id": {
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "created_at": "datetime",
              "device_id": {
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "enrollment_automation_id": {
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "event_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "event_type": "string",
              "occurred_at": "datetime",
              "workspace_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "Network": {
            "docs": undefined,
            "properties": {
              "created_at": "datetime",
              "display_name": "string",
              "network_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "workspace_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "NoiseThreshold": {
            "docs": undefined,
            "properties": {
              "device_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "ends_daily_at": "string",
              "name": "string",
              "noise_threshold_decibels": "double",
              "noise_threshold_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "noise_threshold_nrs": "optional<double>",
              "starts_daily_at": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "Phone": {
            "docs": undefined,
            "properties": {
              "can_program_offline_access_codes": "optional<boolean>",
              "can_program_online_access_codes": "optional<boolean>",
              "can_remotely_lock": "optional<boolean>",
              "can_remotely_unlock": "optional<boolean>",
              "can_simulate_connection": "optional<boolean>",
              "can_simulate_disconnection": "optional<boolean>",
              "can_simulate_removal": "optional<boolean>",
              "capabilities_supported": {
                "docs": "Collection of capabilities that the device supports when connected to Seam. Values are "access_code," which indicates that the device can manage and utilize digital PIN codes for secure access; "lock," which indicates that the device controls a door locking mechanism, enabling the remote opening and closing of doors and other entry points; "noise_detection," which indicates that the device supports monitoring and responding to ambient noise levels; "thermostat," which indicates that the device can regulate and adjust indoor temperatures; and "battery," which indicates that the device can manage battery life and health.",
                "type": "list<PhoneCapabilitiesSupportedItem>",
              },
              "created_at": {
                "docs": "Date and time at which the device object was created.",
                "type": "datetime",
              },
              "custom_metadata": "map<string, PhoneCustomMetadataValue>",
              "device_id": {
                "docs": "Unique identifier for the device.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "device_type": "PhoneDeviceType",
              "display_name": {
                "docs": "Display name of the device, defaults to nickname (if it is set) or properties.appearance.name otherwise. Enables administrators and users to identify the device easily, especially when there are numerous devices.",
                "type": "string",
              },
              "errors": {
                "docs": "Array of errors associated with the device. Each error object within the array contains two fields: "error_code" and "message." "error_code" is a string that uniquely identifies the type of error, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the error, offering insights into the issue and potentially how to rectify it.",
                "type": "list<PhoneErrorsItem>",
              },
              "is_managed": {
                "docs": "Indicates whether Seam manages the device.",
                "type": "boolean",
              },
              "location": {
                "docs": "Location information for the device.",
                "inline": true,
                "type": "optional<PhoneLocation>",
              },
              "nickname": {
                "docs": "Optional nickname to describe the device, settable through Seam",
                "type": "optional<string>",
              },
              "properties": {
                "inline": true,
                "type": "PhoneProperties",
              },
              "warnings": {
                "docs": "Array of warnings associated with the device. Each warning object within the array contains two fields: "warning_code" and "message." "warning_code" is a string that uniquely identifies the type of warning, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the warning, offering insights into the issue and potentially how to rectify it.",
                "type": "list<PhoneWarningsItem>",
              },
              "workspace_id": {
                "docs": "Unique identifier for the Seam workspace associated with the device.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "PhoneCapabilitiesSupportedItem": {
            "enum": [
              "access_code",
              "lock",
              "noise_detection",
              "thermostat",
              "battery",
              "phone",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "PhoneCustomMetadataValue": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
            "union": [
              "string",
              "boolean",
            ],
          },
          "PhoneDeviceType": {
            "enum": [
              "android_phone",
              "ios_phone",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "PhoneErrorsItem": {
            "docs": undefined,
            "properties": {
              "error_code": "string",
              "message": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "PhoneLocation": {
            "docs": "Location information for the device.",
            "properties": {
              "location_name": {
                "docs": "Name of the device location.",
                "type": "optional<string>",
              },
              "timezone": {
                "docs": "Time zone of the device location.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "PhoneProperties": {
            "docs": undefined,
            "properties": {
              "assa_abloy_credential_service_metadata": {
                "inline": true,
                "type": "optional<PhonePropertiesAssaAbloyCredentialServiceMetadata>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "PhonePropertiesAssaAbloyCredentialServiceMetadata": {
            "docs": undefined,
            "properties": {
              "endpoints": "list<PhonePropertiesAssaAbloyCredentialServiceMetadataEndpointsItem>",
              "has_active_endpoint": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "PhonePropertiesAssaAbloyCredentialServiceMetadataEndpointsItem": {
            "docs": undefined,
            "properties": {
              "endpoint_id": "string",
              "is_active": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "PhoneWarningsItem": {
            "docs": undefined,
            "properties": {
              "message": "string",
              "warning_code": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ServiceHealth": {
            "docs": undefined,
            "properties": {
              "description": "string",
              "service": "string",
              "status": "ServiceHealthStatus",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ServiceHealthStatus": {
            "enum": [
              "healthy",
              "degraded",
              "down",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UnmanagedAccessCode": {
            "docs": undefined,
            "properties": {
              "access_code_id": {
                "docs": "Unique identifier for the access code.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "code": {
                "docs": "Code used for access. Typically, a numeric or alphanumeric string.",
                "type": "optional<string>",
              },
              "created_at": {
                "docs": "Date and time at which the access code was created.",
                "type": "datetime",
              },
              "device_id": {
                "docs": "Unique identifier for the device associated with the access code.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "ends_at": {
                "docs": "Date and time after which the time-bound access code becomes inactive.",
                "type": "optional<datetime>",
              },
              "errors": "optional<unknown>",
              "is_managed": "boolean",
              "name": {
                "docs": "Name of the access code. Enables administrators and users to identify the access code easily, especially when there are numerous access codes.",
                "type": "optional<string>",
              },
              "starts_at": {
                "docs": "Date and time at which the time-bound access code becomes active.",
                "type": "optional<datetime>",
              },
              "status": "literal<"set">",
              "type": {
                "docs": "Nature of the access code. Values are "ongoing" for access codes that are active continuously until deactivated manually or "time_bound" for access codes that have a specific duration.",
                "type": "UnmanagedAccessCodeType",
              },
              "warnings": "optional<unknown>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UnmanagedAccessCodeType": {
            "docs": "Nature of the access code. Values are "ongoing" for access codes that are active continuously until deactivated manually or "time_bound" for access codes that have a specific duration.",
            "enum": [
              "time_bound",
              "ongoing",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UnmanagedDevice": {
            "docs": undefined,
            "properties": {
              "can_program_offline_access_codes": "optional<boolean>",
              "can_program_online_access_codes": "optional<boolean>",
              "can_remotely_lock": "optional<boolean>",
              "can_remotely_unlock": "optional<boolean>",
              "can_simulate_connection": "optional<boolean>",
              "can_simulate_disconnection": "optional<boolean>",
              "can_simulate_removal": "optional<boolean>",
              "capabilities_supported": {
                "docs": "Collection of capabilities that the device supports when connected to Seam. Values are "access_code," which indicates that the device can manage and utilize digital PIN codes for secure access; "lock," which indicates that the device controls a door locking mechanism, enabling the remote opening and closing of doors and other entry points; "noise_detection," which indicates that the device supports monitoring and responding to ambient noise levels; "thermostat," which indicates that the device can regulate and adjust indoor temperatures; and "battery," which indicates that the device can manage battery life and health.",
                "type": "list<UnmanagedDeviceCapabilitiesSupportedItem>",
              },
              "connected_account_id": {
                "docs": "Unique identifier for the account associated with the device.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "created_at": {
                "docs": "Date and time at which the device object was created.",
                "type": "datetime",
              },
              "device_id": {
                "docs": "Unique identifier for the device.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "device_type": {
                "docs": "Type of the device.",
                "type": "UnmanagedDeviceDeviceType",
              },
              "errors": {
                "docs": "Array of errors associated with the device. Each error object within the array contains two fields: "error_code" and "message." "error_code" is a string that uniquely identifies the type of error, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the error, offering insights into the issue and potentially how to rectify it.",
                "type": "list<UnmanagedDeviceErrorsItem>",
              },
              "is_managed": "boolean",
              "properties": {
                "inline": true,
                "type": "UnmanagedDeviceProperties",
              },
              "warnings": {
                "docs": "Array of warnings associated with the device. Each warning object within the array contains two fields: "warning_code" and "message." "warning_code" is a string that uniquely identifies the type of warning, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the warning, offering insights into the issue and potentially how to rectify it.",
                "type": "list<UnmanagedDeviceWarningsItem>",
              },
              "workspace_id": {
                "docs": "Unique identifier for the Seam workspace associated with the device.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UnmanagedDeviceCapabilitiesSupportedItem": {
            "enum": [
              "access_code",
              "lock",
              "noise_detection",
              "thermostat",
              "battery",
              "phone",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UnmanagedDeviceDeviceType": {
            "docs": "Type of the device.",
            "enum": [
              "akuvox_lock",
              "august_lock",
              "brivo_access_point",
              "butterflymx_panel",
              "avigilon_alta_entry",
              "doorking_lock",
              "genie_door",
              "igloo_lock",
              "linear_lock",
              "lockly_lock",
              "kwikset_lock",
              "nuki_lock",
              "salto_lock",
              "schlage_lock",
              "seam_relay",
              "smartthings_lock",
              "wyze_lock",
              "yale_lock",
              "two_n_intercom",
              "controlbyweb_device",
              "ttlock_lock",
              "igloohome_lock",
              "hubitat_lock",
              "four_suites_door",
              "dormakaba_oracode_door",
              "tedee_lock",
              "noiseaware_activity_zone",
              "minut_sensor",
              "ecobee_thermostat",
              "nest_thermostat",
              "honeywell_resideo_thermostat",
              "ios_phone",
              "android_phone",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UnmanagedDeviceErrorsItem": {
            "docs": undefined,
            "properties": {
              "error_code": "string",
              "message": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UnmanagedDeviceProperties": {
            "docs": undefined,
            "properties": {
              "accessory_keypad": {
                "docs": "Represents the accessory keypad state.",
                "inline": true,
                "type": "optional<UnmanagedDevicePropertiesAccessoryKeypad>",
              },
              "battery": {
                "docs": "Represents the current status of the battery charge level. Values are "critical," which indicates an extremely low level, suggesting imminent shutdown or an urgent need for charging; "low," which signifies that the battery is under the preferred threshold and should be charged soon; "good," which denotes a satisfactory charge level, adequate for normal use without the immediate need for recharging; and "full," which represents a battery that is fully charged, providing the maximum duration of usage.",
                "inline": true,
                "type": "optional<UnmanagedDevicePropertiesBattery>",
              },
              "battery_level": {
                "docs": "Indicates the battery level of the device as a decimal value between 0 and 1, inclusive.",
                "type": "optional<double>",
                "validation": {
                  "exclusiveMax": undefined,
                  "exclusiveMin": undefined,
                  "max": 1,
                  "min": 0,
                  "multipleOf": undefined,
                },
              },
              "image_alt_text": {
                "docs": "Alt text for the device image.",
                "type": "optional<string>",
              },
              "image_url": {
                "docs": "Image URL for the device.",
                "type": "optional<string>",
                "validation": {
                  "format": "uri",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "manufacturer": {
                "docs": "Manufacturer of the device.",
                "type": "optional<string>",
              },
              "model": {
                "inline": true,
                "type": "UnmanagedDevicePropertiesModel",
              },
              "name": {
                "docs": "
      ---
      deprecated: use device.display_name instead
      ---
      Name of the device.
      ",
                "type": "string",
              },
              "offline_access_codes_enabled": {
                "docs": "Indicates whether it is currently possible to use offline access codes for the device.",
                "type": "optional<boolean>",
              },
              "online": {
                "docs": "Indicates whether the device is online.",
                "type": "boolean",
              },
              "online_access_codes_enabled": {
                "docs": "Indicates whether it is currently possible to use online access codes for the device.",
                "type": "optional<boolean>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UnmanagedDevicePropertiesAccessoryKeypad": {
            "docs": "Represents the accessory keypad state.",
            "properties": {
              "battery": {
                "docs": "Indicates if the keypad battery properties.",
                "inline": true,
                "type": "optional<UnmanagedDevicePropertiesAccessoryKeypadBattery>",
              },
              "is_connected": {
                "docs": "Indicates if the accessory_keypad is connected to the device.",
                "type": "boolean",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UnmanagedDevicePropertiesAccessoryKeypadBattery": {
            "docs": "Indicates if the keypad battery properties.",
            "properties": {
              "level": {
                "type": "double",
                "validation": {
                  "exclusiveMax": undefined,
                  "exclusiveMin": undefined,
                  "max": 1,
                  "min": 0,
                  "multipleOf": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UnmanagedDevicePropertiesBattery": {
            "docs": "Represents the current status of the battery charge level. Values are "critical," which indicates an extremely low level, suggesting imminent shutdown or an urgent need for charging; "low," which signifies that the battery is under the preferred threshold and should be charged soon; "good," which denotes a satisfactory charge level, adequate for normal use without the immediate need for recharging; and "full," which represents a battery that is fully charged, providing the maximum duration of usage.",
            "properties": {
              "level": {
                "type": "double",
                "validation": {
                  "exclusiveMax": undefined,
                  "exclusiveMin": undefined,
                  "max": 1,
                  "min": 0,
                  "multipleOf": undefined,
                },
              },
              "status": "UnmanagedDevicePropertiesBatteryStatus",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UnmanagedDevicePropertiesBatteryStatus": {
            "enum": [
              "critical",
              "low",
              "good",
              "full",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UnmanagedDevicePropertiesModel": {
            "docs": undefined,
            "properties": {
              "accessory_keypad_supported": {
                "docs": "
      ---
      deprecated: use device.properties.model.can_connect_accessory_keypad
      ---
      ",
                "type": "optional<boolean>",
              },
              "can_connect_accessory_keypad": {
                "docs": "Indicates whether the device can connect a accessory keypad.",
                "type": "optional<boolean>",
              },
              "display_name": {
                "docs": "Display name of the device model.",
                "type": "string",
              },
              "has_built_in_keypad": {
                "docs": "Indicates whether the device has a built in accessory keypad.",
                "type": "optional<boolean>",
              },
              "manufacturer_display_name": {
                "docs": "Display name that corresponds to the manufacturer-specific terminology for the device.",
                "type": "string",
              },
              "offline_access_codes_supported": {
                "docs": "Indicates whether the device supports offline access codes.",
                "type": "optional<boolean>",
              },
              "online_access_codes_supported": {
                "docs": "Indicates whether the device supports online access codes.",
                "type": "optional<boolean>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UnmanagedDeviceWarningsItem": {
            "docs": undefined,
            "properties": {
              "message": "string",
              "warning_code": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UserIdentity": {
            "docs": undefined,
            "properties": {
              "created_at": "datetime",
              "display_name": {
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "email_address": {
                "type": "optional<string>",
                "validation": {
                  "format": "email",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "full_name": {
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "phone_number": "optional<string>",
              "user_identity_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "user_identity_key": {
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "workspace_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "Webhook": {
            "docs": undefined,
            "properties": {
              "event_types": "optional<list<string>>",
              "secret": "optional<string>",
              "url": "string",
              "webhook_id": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "Workspace": {
            "docs": undefined,
            "properties": {
              "company_name": "string",
              "connect_partner_name": {
                "docs": "
    ---
    deprecated: use company_name
    ---
  ",
                "type": "optional<string>",
              },
              "is_sandbox": "boolean",
              "name": "string",
              "workspace_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "errors:
  BadRequestError:
    status-code: 400
    type: unknown
    docs: Bad Request
  UnauthorizedError:
    status-code: 401
    type: unknown
    docs: Unauthorized
types:
  AccessCodeType:
    enum:
      - time_bound
      - ongoing
    docs: >-
      Nature of the access code. Values are "ongoing" for access codes that are
      active continuously until deactivated manually or "time_bound" for access
      codes that have a specific duration.
    source:
      openapi: ../openapi.json
  AccessCodeStatus:
    enum:
      - setting
      - set
      - unset
      - removing
      - unknown
    docs: |2-

          Current status of the access code within the operational lifecycle. Values are "setting," a transitional phase that indicates that the code is being configured or activated; "set", which indicates that the code is active and operational; "unset," which indicates a deactivated or unused state, either before activation or after deliberate deactivation; "removing," which indicates a transitional period in which the code is being deleted or made inactive; and "unknown," which indicates an indeterminate state, due to reasons such as system errors or incomplete data, that highlights a potential need for system review or troubleshooting.
        
    source:
      openapi: ../openapi.json
  AccessCode:
    properties:
      common_code_key:
        type: optional<string>
        docs: >-
          Unique identifier for a group of access codes that share the same
          code.
      is_scheduled_on_device:
        type: optional<boolean>
        docs: >-
          Indicates whether the code is set on the device according to a
          preconfigured schedule.
      type:
        type: AccessCodeType
        docs: >-
          Nature of the access code. Values are "ongoing" for access codes that
          are active continuously until deactivated manually or "time_bound" for
          access codes that have a specific duration.
      is_waiting_for_code_assignment:
        type: optional<boolean>
        docs: Indicates whether the access code is waiting for a code assignment.
      access_code_id:
        type: string
        docs: Unique identifier for the access code.
        validation:
          format: uuid
      device_id:
        type: string
        docs: Unique identifier for the device associated with the access code.
        validation:
          format: uuid
      name:
        type: optional<string>
        docs: >-
          Name of the access code. Enables administrators and users to identify
          the access code easily, especially when there are numerous access
          codes.
      code:
        type: optional<string>
        docs: Code used for access. Typically, a numeric or alphanumeric string.
      created_at:
        type: datetime
        docs: Date and time at which the access code was created.
      errors: optional<unknown>
      warnings: optional<unknown>
      is_managed:
        type: boolean
        docs: Indicates whether Seam manages the access code.
      starts_at:
        type: optional<datetime>
        docs: Date and time at which the time-bound access code becomes active.
      ends_at:
        type: optional<datetime>
        docs: Date and time after which the time-bound access code becomes inactive.
      status:
        type: AccessCodeStatus
        docs: |2-

              Current status of the access code within the operational lifecycle. Values are "setting," a transitional phase that indicates that the code is being configured or activated; "set", which indicates that the code is active and operational; "unset," which indicates a deactivated or unused state, either before activation or after deliberate deactivation; "removing," which indicates a transitional period in which the code is being deleted or made inactive; and "unknown," which indicates an indeterminate state, due to reasons such as system errors or incomplete data, that highlights a potential need for system review or troubleshooting.
            
      is_backup_access_code_available:
        type: boolean
        docs: >-
          Indicates whether a backup access code is available for use if the
          primary access code is lost or compromised.
      is_backup:
        type: optional<boolean>
        docs: Indicates whether the access code is a backup code.
      pulled_backup_access_code_id:
        type: optional<string>
        docs: >-
          Identifier of the pulled backup access code. Used to associate the
          pulled backup access code with the original access code.
        validation:
          format: uuid
      is_external_modification_allowed:
        type: boolean
        docs: >-
          Indicates whether changes to the access code from external sources are
          permitted.
      is_one_time_use:
        type: boolean
        docs: >-
          Indicates whether the access code can only be used once. If "true,"
          the code becomes invalid after the first use.
      is_offline_access_code:
        type: boolean
        docs: >-
          Indicates whether the access code is intended for use in offline
          scenarios. If "true," this code can be created on a device without a
          network connection.
    source:
      openapi: ../openapi.json
  UnmanagedAccessCodeType:
    enum:
      - time_bound
      - ongoing
    docs: >-
      Nature of the access code. Values are "ongoing" for access codes that are
      active continuously until deactivated manually or "time_bound" for access
      codes that have a specific duration.
    source:
      openapi: ../openapi.json
  UnmanagedAccessCode:
    properties:
      type:
        type: UnmanagedAccessCodeType
        docs: >-
          Nature of the access code. Values are "ongoing" for access codes that
          are active continuously until deactivated manually or "time_bound" for
          access codes that have a specific duration.
      access_code_id:
        type: string
        docs: Unique identifier for the access code.
        validation:
          format: uuid
      device_id:
        type: string
        docs: Unique identifier for the device associated with the access code.
        validation:
          format: uuid
      name:
        type: optional<string>
        docs: >-
          Name of the access code. Enables administrators and users to identify
          the access code easily, especially when there are numerous access
          codes.
      code:
        type: optional<string>
        docs: Code used for access. Typically, a numeric or alphanumeric string.
      created_at:
        type: datetime
        docs: Date and time at which the access code was created.
      errors: optional<unknown>
      warnings: optional<unknown>
      is_managed: boolean
      starts_at:
        type: optional<datetime>
        docs: Date and time at which the time-bound access code becomes active.
      ends_at:
        type: optional<datetime>
        docs: Date and time after which the time-bound access code becomes inactive.
      status: literal<"set">
    source:
      openapi: ../openapi.json
  ActionAttemptZero:
    docs: Locking door.
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"pending">
      result: optional<string>
      error: optional<string>
      action_type: literal<"LOCK_DOOR">
    source:
      openapi: ../openapi.json
  ActionAttemptOneResult:
    properties: {}
    source:
      openapi: ../openapi.json
  ActionAttemptOne:
    docs: Locking door succeeded.
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"success">
      error: optional<string>
      action_type: literal<"LOCK_DOOR">
      result:
        type: ActionAttemptOneResult
        inline: true
    source:
      openapi: ../openapi.json
  ActionAttemptTwoError:
    properties:
      type: string
      message: string
    source:
      openapi: ../openapi.json
  ActionAttemptTwo:
    docs: Locking door failed.
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"error">
      result: optional<string>
      action_type: literal<"LOCK_DOOR">
      error:
        type: ActionAttemptTwoError
        inline: true
    source:
      openapi: ../openapi.json
  ActionAttemptThree:
    docs: Unlocking door.
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"pending">
      result: optional<string>
      error: optional<string>
      action_type: literal<"UNLOCK_DOOR">
    source:
      openapi: ../openapi.json
  ActionAttemptFourResult:
    properties: {}
    source:
      openapi: ../openapi.json
  ActionAttemptFour:
    docs: Unlocking door succeeded.
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"success">
      error: optional<string>
      action_type: literal<"UNLOCK_DOOR">
      result:
        type: ActionAttemptFourResult
        inline: true
    source:
      openapi: ../openapi.json
  ActionAttemptFiveError:
    properties:
      type: string
      message: string
    source:
      openapi: ../openapi.json
  ActionAttemptFive:
    docs: Unlocking door failed.
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"error">
      result: optional<string>
      action_type: literal<"UNLOCK_DOOR">
      error:
        type: ActionAttemptFiveError
        inline: true
    source:
      openapi: ../openapi.json
  ActionAttemptSix:
    docs: Resetting sandbox workspace.
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"pending">
      result: optional<string>
      error: optional<string>
      action_type: literal<"RESET_SANDBOX_WORKSPACE">
    source:
      openapi: ../openapi.json
  ActionAttemptSevenResult:
    properties: {}
    source:
      openapi: ../openapi.json
  ActionAttemptSeven:
    docs: Resetting sandbox workspace succeeded.
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"success">
      error: optional<string>
      action_type: literal<"RESET_SANDBOX_WORKSPACE">
      result:
        type: ActionAttemptSevenResult
        inline: true
    source:
      openapi: ../openapi.json
  ActionAttemptEightError:
    properties:
      type: string
      message: string
    source:
      openapi: ../openapi.json
  ActionAttemptEight:
    docs: Resetting sandbox workspace failed.
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"error">
      result: optional<string>
      action_type: literal<"RESET_SANDBOX_WORKSPACE">
      error:
        type: ActionAttemptEightError
        inline: true
    source:
      openapi: ../openapi.json
  ActionAttemptNine:
    docs: Setting HVAC to cool.
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"pending">
      result: optional<string>
      error: optional<string>
      action_type: literal<"SET_COOL">
    source:
      openapi: ../openapi.json
  ActionAttemptTenResult:
    properties: {}
    source:
      openapi: ../openapi.json
  ActionAttemptTen:
    docs: Setting HVAC to cool succeeded.
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"success">
      error: optional<string>
      action_type: literal<"SET_COOL">
      result:
        type: ActionAttemptTenResult
        inline: true
    source:
      openapi: ../openapi.json
  ActionAttemptElevenError:
    properties:
      type: string
      message: string
    source:
      openapi: ../openapi.json
  ActionAttemptEleven:
    docs: Setting HVAC to cool failed.
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"error">
      result: optional<string>
      action_type: literal<"SET_COOL">
      error:
        type: ActionAttemptElevenError
        inline: true
    source:
      openapi: ../openapi.json
  ActionAttemptTwelve:
    docs: Setting HVAC to heat mode.
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"pending">
      result: optional<string>
      error: optional<string>
      action_type: literal<"SET_HEAT">
    source:
      openapi: ../openapi.json
  ActionAttemptThirteenResult:
    properties: {}
    source:
      openapi: ../openapi.json
  ActionAttemptThirteen:
    docs: Setting HVAC to heat mode succeeded.
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"success">
      error: optional<string>
      action_type: literal<"SET_HEAT">
      result:
        type: ActionAttemptThirteenResult
        inline: true
    source:
      openapi: ../openapi.json
  ActionAttemptFourteenError:
    properties:
      type: string
      message: string
    source:
      openapi: ../openapi.json
  ActionAttemptFourteen:
    docs: Setting HVAC to heat mode failed.
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"error">
      result: optional<string>
      action_type: literal<"SET_HEAT">
      error:
        type: ActionAttemptFourteenError
        inline: true
    source:
      openapi: ../openapi.json
  ActionAttemptFifteen:
    docs: Setting HVAC to heat-cool mode.
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"pending">
      result: optional<string>
      error: optional<string>
      action_type: literal<"SET_HEAT_COOL">
    source:
      openapi: ../openapi.json
  ActionAttemptSixteenResult:
    properties: {}
    source:
      openapi: ../openapi.json
  ActionAttemptSixteen:
    docs: Setting HVAC to heat-cool mode succeeded.
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"success">
      error: optional<string>
      action_type: literal<"SET_HEAT_COOL">
      result:
        type: ActionAttemptSixteenResult
        inline: true
    source:
      openapi: ../openapi.json
  ActionAttemptSeventeenError:
    properties:
      type: string
      message: string
    source:
      openapi: ../openapi.json
  ActionAttemptSeventeen:
    docs: Setting heat-cool mode failed.
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"error">
      result: optional<string>
      action_type: literal<"SET_HEAT_COOL">
      error:
        type: ActionAttemptSeventeenError
        inline: true
    source:
      openapi: ../openapi.json
  ActionAttemptEighteen:
    docs: Setting fan mode.
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"pending">
      result: optional<string>
      error: optional<string>
      action_type: literal<"SET_FAN_MODE">
    source:
      openapi: ../openapi.json
  ActionAttemptNineteenResult:
    properties: {}
    source:
      openapi: ../openapi.json
  ActionAttemptNineteen:
    docs: Setting fan mode succeeded.
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"success">
      error: optional<string>
      action_type: literal<"SET_FAN_MODE">
      result:
        type: ActionAttemptNineteenResult
        inline: true
    source:
      openapi: ../openapi.json
  ActionAttemptTwentyError:
    properties:
      type: string
      message: string
    source:
      openapi: ../openapi.json
  ActionAttemptTwenty:
    docs: Setting fan mode failed.
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"error">
      result: optional<string>
      action_type: literal<"SET_FAN_MODE">
      error:
        type: ActionAttemptTwentyError
        inline: true
    source:
      openapi: ../openapi.json
  ActionAttemptTwentyOne:
    docs: Turning HVAC off.
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"pending">
      result: optional<string>
      error: optional<string>
      action_type: literal<"SET_THERMOSTAT_OFF">
    source:
      openapi: ../openapi.json
  ActionAttemptTwentyTwoResult:
    properties: {}
    source:
      openapi: ../openapi.json
  ActionAttemptTwentyTwo:
    docs: Turning HVAC off succeeded.
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"success">
      error: optional<string>
      action_type: literal<"SET_THERMOSTAT_OFF">
      result:
        type: ActionAttemptTwentyTwoResult
        inline: true
    source:
      openapi: ../openapi.json
  ActionAttemptTwentyThreeError:
    properties:
      type: string
      message: string
    source:
      openapi: ../openapi.json
  ActionAttemptTwentyThree:
    docs: Turning HVAC off failed.
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"error">
      result: optional<string>
      action_type: literal<"SET_THERMOSTAT_OFF">
      error:
        type: ActionAttemptTwentyThreeError
        inline: true
    source:
      openapi: ../openapi.json
  ActionAttemptTwentyFour:
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"pending">
      result: optional<string>
      error: optional<string>
      action_type: literal<"SYNC_ACCESS_CODES">
    source:
      openapi: ../openapi.json
  ActionAttemptTwentyFive:
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"success">
      error: optional<string>
      action_type: literal<"SYNC_ACCESS_CODES">
      result: optional<unknown>
    source:
      openapi: ../openapi.json
  ActionAttemptTwentySixError:
    properties:
      type: string
      message: string
    source:
      openapi: ../openapi.json
  ActionAttemptTwentySix:
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"error">
      result: optional<string>
      action_type: literal<"SYNC_ACCESS_CODES">
      error:
        type: ActionAttemptTwentySixError
        inline: true
    source:
      openapi: ../openapi.json
  ActionAttemptTwentySeven:
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"pending">
      result: optional<string>
      error: optional<string>
      action_type: literal<"CREATE_ACCESS_CODE">
    source:
      openapi: ../openapi.json
  ActionAttemptTwentyEight:
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"success">
      error: optional<string>
      action_type: literal<"CREATE_ACCESS_CODE">
      result: optional<unknown>
    source:
      openapi: ../openapi.json
  ActionAttemptTwentyNineError:
    properties:
      type: string
      message: string
    source:
      openapi: ../openapi.json
  ActionAttemptTwentyNine:
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"error">
      result: optional<string>
      action_type: literal<"CREATE_ACCESS_CODE">
      error:
        type: ActionAttemptTwentyNineError
        inline: true
    source:
      openapi: ../openapi.json
  ActionAttemptThirty:
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"pending">
      result: optional<string>
      error: optional<string>
      action_type: literal<"DELETE_ACCESS_CODE">
    source:
      openapi: ../openapi.json
  ActionAttemptThirtyOne:
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"success">
      error: optional<string>
      action_type: literal<"DELETE_ACCESS_CODE">
      result: optional<unknown>
    source:
      openapi: ../openapi.json
  ActionAttemptThirtyTwoError:
    properties:
      type: string
      message: string
    source:
      openapi: ../openapi.json
  ActionAttemptThirtyTwo:
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"error">
      result: optional<string>
      action_type: literal<"DELETE_ACCESS_CODE">
      error:
        type: ActionAttemptThirtyTwoError
        inline: true
    source:
      openapi: ../openapi.json
  ActionAttemptThirtyThree:
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"pending">
      result: optional<string>
      error: optional<string>
      action_type: literal<"UPDATE_ACCESS_CODE">
    source:
      openapi: ../openapi.json
  ActionAttemptThirtyFour:
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"success">
      error: optional<string>
      action_type: literal<"UPDATE_ACCESS_CODE">
      result: optional<unknown>
    source:
      openapi: ../openapi.json
  ActionAttemptThirtyFiveError:
    properties:
      type: string
      message: string
    source:
      openapi: ../openapi.json
  ActionAttemptThirtyFive:
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"error">
      result: optional<string>
      action_type: literal<"UPDATE_ACCESS_CODE">
      error:
        type: ActionAttemptThirtyFiveError
        inline: true
    source:
      openapi: ../openapi.json
  ActionAttemptThirtySix:
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"pending">
      result: optional<string>
      error: optional<string>
      action_type: literal<"CREATE_NOISE_THRESHOLD">
    source:
      openapi: ../openapi.json
  ActionAttemptThirtySeven:
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"success">
      error: optional<string>
      action_type: literal<"CREATE_NOISE_THRESHOLD">
      result: optional<unknown>
    source:
      openapi: ../openapi.json
  ActionAttemptThirtyEightError:
    properties:
      type: string
      message: string
    source:
      openapi: ../openapi.json
  ActionAttemptThirtyEight:
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"error">
      result: optional<string>
      action_type: literal<"CREATE_NOISE_THRESHOLD">
      error:
        type: ActionAttemptThirtyEightError
        inline: true
    source:
      openapi: ../openapi.json
  ActionAttemptThirtyNine:
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"pending">
      result: optional<string>
      error: optional<string>
      action_type: literal<"DELETE_NOISE_THRESHOLD">
    source:
      openapi: ../openapi.json
  ActionAttemptForty:
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"success">
      error: optional<string>
      action_type: literal<"DELETE_NOISE_THRESHOLD">
      result: optional<unknown>
    source:
      openapi: ../openapi.json
  ActionAttemptFortyOneError:
    properties:
      type: string
      message: string
    source:
      openapi: ../openapi.json
  ActionAttemptFortyOne:
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"error">
      result: optional<string>
      action_type: literal<"DELETE_NOISE_THRESHOLD">
      error:
        type: ActionAttemptFortyOneError
        inline: true
    source:
      openapi: ../openapi.json
  ActionAttemptFortyTwo:
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"pending">
      result: optional<string>
      error: optional<string>
      action_type: literal<"UPDATE_NOISE_THRESHOLD">
    source:
      openapi: ../openapi.json
  ActionAttemptFortyThree:
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"success">
      error: optional<string>
      action_type: literal<"UPDATE_NOISE_THRESHOLD">
      result: optional<unknown>
    source:
      openapi: ../openapi.json
  ActionAttemptActionAttemptIdError:
    properties:
      type: string
      message: string
    source:
      openapi: ../openapi.json
  ActionAttemptActionAttemptId:
    properties:
      action_attempt_id:
        type: string
        docs: |2-

              ---
              title: Action Attempt ID
              ---
              The ID of the action attempt.
            
        validation:
          format: uuid
      status: literal<"error">
      result: optional<string>
      action_type: literal<"UPDATE_NOISE_THRESHOLD">
      error:
        type: ActionAttemptActionAttemptIdError
        inline: true
    source:
      openapi: ../openapi.json
  ActionAttempt:
    discriminated: false
    union:
      - type: ActionAttemptZero
        docs: Locking door.
      - type: ActionAttemptOne
        docs: Locking door succeeded.
      - type: ActionAttemptTwo
        docs: Locking door failed.
      - type: ActionAttemptThree
        docs: Unlocking door.
      - type: ActionAttemptFour
        docs: Unlocking door succeeded.
      - type: ActionAttemptFive
        docs: Unlocking door failed.
      - type: ActionAttemptSix
        docs: Resetting sandbox workspace.
      - type: ActionAttemptSeven
        docs: Resetting sandbox workspace succeeded.
      - type: ActionAttemptEight
        docs: Resetting sandbox workspace failed.
      - type: ActionAttemptNine
        docs: Setting HVAC to cool.
      - type: ActionAttemptTen
        docs: Setting HVAC to cool succeeded.
      - type: ActionAttemptEleven
        docs: Setting HVAC to cool failed.
      - type: ActionAttemptTwelve
        docs: Setting HVAC to heat mode.
      - type: ActionAttemptThirteen
        docs: Setting HVAC to heat mode succeeded.
      - type: ActionAttemptFourteen
        docs: Setting HVAC to heat mode failed.
      - type: ActionAttemptFifteen
        docs: Setting HVAC to heat-cool mode.
      - type: ActionAttemptSixteen
        docs: Setting HVAC to heat-cool mode succeeded.
      - type: ActionAttemptSeventeen
        docs: Setting heat-cool mode failed.
      - type: ActionAttemptEighteen
        docs: Setting fan mode.
      - type: ActionAttemptNineteen
        docs: Setting fan mode succeeded.
      - type: ActionAttemptTwenty
        docs: Setting fan mode failed.
      - type: ActionAttemptTwentyOne
        docs: Turning HVAC off.
      - type: ActionAttemptTwentyTwo
        docs: Turning HVAC off succeeded.
      - type: ActionAttemptTwentyThree
        docs: Turning HVAC off failed.
      - ActionAttemptTwentyFour
      - ActionAttemptTwentyFive
      - ActionAttemptTwentySix
      - ActionAttemptTwentySeven
      - ActionAttemptTwentyEight
      - ActionAttemptTwentyNine
      - ActionAttemptThirty
      - ActionAttemptThirtyOne
      - ActionAttemptThirtyTwo
      - ActionAttemptThirtyThree
      - ActionAttemptThirtyFour
      - ActionAttemptThirtyFive
      - ActionAttemptThirtySix
      - ActionAttemptThirtySeven
      - ActionAttemptThirtyEight
      - ActionAttemptThirtyNine
      - ActionAttemptForty
      - ActionAttemptFortyOne
      - ActionAttemptFortyTwo
      - ActionAttemptFortyThree
      - ActionAttemptActionAttemptId
    source:
      openapi: ../openapi.json
  ClientSession:
    properties:
      client_session_id:
        type: string
        validation:
          format: uuid
      workspace_id:
        type: string
        validation:
          format: uuid
      created_at: datetime
      token: string
      user_identifier_key: optional<string>
      device_count: double
      connected_account_ids: list<string>
      connect_webview_ids: list<string>
      user_identity_ids: list<string>
    source:
      openapi: ../openapi.json
  ClimateSettingScheduleHvacModeSetting:
    enum:
      - 'off'
      - heat
      - cool
      - heat_cool
    source:
      openapi: ../openapi.json
  ClimateSettingSchedule:
    properties:
      climate_setting_schedule_id:
        type: string
        validation:
          format: uuid
      schedule_type: literal<"time_bound">
      device_id:
        type: string
        validation:
          format: uuid
      name: optional<string>
      schedule_starts_at: string
      schedule_ends_at: string
      created_at: datetime
      errors: optional<unknown>
      automatic_heating_enabled: optional<boolean>
      automatic_cooling_enabled: optional<boolean>
      hvac_mode_setting: optional<ClimateSettingScheduleHvacModeSetting>
      cooling_set_point_celsius: optional<double>
      heating_set_point_celsius: optional<double>
      cooling_set_point_fahrenheit: optional<double>
      heating_set_point_fahrenheit: optional<double>
      manual_override_allowed: optional<boolean>
    source:
      openapi: ../openapi.json
  ConnectWebviewDeviceSelectionMode:
    enum:
      - none
      - single
      - multiple
    source:
      openapi: ../openapi.json
  ConnectWebviewStatus:
    enum:
      - pending
      - failed
      - authorized
    source:
      openapi: ../openapi.json
  ConnectWebviewCustomMetadataValue:
    discriminated: false
    union:
      - string
      - boolean
    source:
      openapi: ../openapi.json
  ConnectWebview:
    properties:
      connect_webview_id:
        type: string
        validation:
          format: uuid
      workspace_id:
        type: string
        validation:
          format: uuid
      created_at: datetime
      connected_account_id:
        type: optional<string>
        validation:
          format: uuid
      url:
        type: string
        validation:
          format: uri
      device_selection_mode: ConnectWebviewDeviceSelectionMode
      accepted_providers: list<string>
      accepted_devices:
        docs: |2-

                ---
                deprecated: Unused. Will be removed.
                ---
                
        type: list<string>
      any_device_allowed:
        type: boolean
        docs: |2-

                ---
                deprecated: Unused. Will be removed.
                ---
                
      any_provider_allowed: boolean
      login_successful: boolean
      status: ConnectWebviewStatus
      custom_redirect_url:
        type: optional<string>
        validation:
          format: uri
      custom_redirect_failure_url:
        type: optional<string>
        validation:
          format: uri
      custom_metadata: map<string, ConnectWebviewCustomMetadataValue>
      automatically_manage_new_devices: boolean
      wait_for_device_creation: boolean
      authorized_at: optional<datetime>
      selected_provider: optional<string>
    source:
      openapi: ../openapi.json
  ConnectedAccountUserIdentifier:
    properties:
      username: optional<string>
      api_url: optional<string>
      email: optional<string>
      phone: optional<string>
      exclusive: optional<boolean>
    source:
      openapi: ../openapi.json
  ConnectedAccountCustomMetadataValue:
    discriminated: false
    union:
      - string
      - boolean
    source:
      openapi: ../openapi.json
  ConnectedAccount:
    properties:
      connected_account_id:
        type: optional<string>
        validation:
          format: uuid
      created_at: optional<datetime>
      user_identifier:
        type: optional<ConnectedAccountUserIdentifier>
        inline: true
      account_type: optional<string>
      account_type_display_name: string
      errors: optional<unknown>
      warnings: optional<unknown>
      custom_metadata: map<string, ConnectedAccountCustomMetadataValue>
      automatically_manage_new_devices: boolean
    source:
      openapi: ../openapi.json
  DeviceDeviceType:
    enum:
      - akuvox_lock
      - august_lock
      - brivo_access_point
      - butterflymx_panel
      - avigilon_alta_entry
      - doorking_lock
      - genie_door
      - igloo_lock
      - linear_lock
      - lockly_lock
      - kwikset_lock
      - nuki_lock
      - salto_lock
      - schlage_lock
      - seam_relay
      - smartthings_lock
      - wyze_lock
      - yale_lock
      - two_n_intercom
      - controlbyweb_device
      - ttlock_lock
      - igloohome_lock
      - hubitat_lock
      - four_suites_door
      - dormakaba_oracode_door
      - tedee_lock
      - noiseaware_activity_zone
      - minut_sensor
      - ecobee_thermostat
      - nest_thermostat
      - honeywell_resideo_thermostat
      - ios_phone
      - android_phone
    docs: Type of the device.
    source:
      openapi: ../openapi.json
  DeviceCapabilitiesSupportedItem:
    enum:
      - access_code
      - lock
      - noise_detection
      - thermostat
      - battery
      - phone
    source:
      openapi: ../openapi.json
  DevicePropertiesAccessoryKeypadBattery:
    docs: Indicates if the keypad battery properties.
    properties:
      level:
        type: double
        validation:
          min: 0
          max: 1
    source:
      openapi: ../openapi.json
  DevicePropertiesAccessoryKeypad:
    docs: Represents the accessory keypad state.
    properties:
      is_connected:
        type: boolean
        docs: Indicates if the accessory_keypad is connected to the device.
      battery:
        type: optional<DevicePropertiesAccessoryKeypadBattery>
        docs: Indicates if the keypad battery properties.
        inline: true
    source:
      openapi: ../openapi.json
  DevicePropertiesAppearance:
    properties:
      name:
        type: string
        docs: >-
          Name of the device as seen from the provider API and application, not
          settable through Seam.
    source:
      openapi: ../openapi.json
  DevicePropertiesModel:
    properties:
      can_connect_accessory_keypad:
        type: optional<boolean>
        docs: Indicates whether the device can connect a accessory keypad.
      display_name:
        type: string
        docs: Display name of the device model.
      manufacturer_display_name:
        type: string
        docs: >-
          Display name that corresponds to the manufacturer-specific terminology
          for the device.
      has_built_in_keypad:
        type: optional<boolean>
        docs: Indicates whether the device has a built in accessory keypad.
      offline_access_codes_supported:
        type: optional<boolean>
        docs: Indicates whether the device supports offline access codes.
      online_access_codes_supported:
        type: optional<boolean>
        docs: Indicates whether the device supports online access codes.
      accessory_keypad_supported:
        type: optional<boolean>
        docs: |2-

                ---
                deprecated: use device.properties.model.can_connect_accessory_keypad
                ---
                
    source:
      openapi: ../openapi.json
  DevicePropertiesBatteryStatus:
    enum:
      - critical
      - low
      - good
      - full
    source:
      openapi: ../openapi.json
  DevicePropertiesBattery:
    docs: >-
      Represents the current status of the battery charge level. Values are
      "critical," which indicates an extremely low level, suggesting imminent
      shutdown or an urgent need for charging; "low," which signifies that the
      battery is under the preferred threshold and should be charged soon;
      "good," which denotes a satisfactory charge level, adequate for normal use
      without the immediate need for recharging; and "full," which represents a
      battery that is fully charged, providing the maximum duration of usage.
    properties:
      level:
        type: double
        validation:
          min: 0
          max: 1
      status: DevicePropertiesBatteryStatus
    source:
      openapi: ../openapi.json
  DevicePropertiesAssaAbloyCredentialServiceMetadataEndpointsItem:
    properties:
      endpoint_id: string
      is_active: boolean
    source:
      openapi: ../openapi.json
  DevicePropertiesAssaAbloyCredentialServiceMetadata:
    properties:
      has_active_endpoint: boolean
      endpoints: list<DevicePropertiesAssaAbloyCredentialServiceMetadataEndpointsItem>
    source:
      openapi: ../openapi.json
  DevicePropertiesAugustMetadata:
    properties:
      lock_id: string
      lock_name: string
      house_name: string
      has_keypad: boolean
      keypad_battery_level: optional<string>
      model: optional<string>
      house_id: optional<string>
    source:
      openapi: ../openapi.json
  DevicePropertiesAvigilonAltaMetadata:
    properties:
      entry_name: string
      org_name: string
      zone_id: double
      zone_name: string
      site_id: double
      site_name: string
      entry_relays_total_count: double
    source:
      openapi: ../openapi.json
  DevicePropertiesSchlageMetadata:
    properties:
      device_id: string
      device_name: string
      access_code_length: optional<double>
      model: optional<string>
    source:
      openapi: ../openapi.json
  DevicePropertiesSmartthingsMetadata:
    properties:
      device_id: string
      device_name: string
      model: optional<string>
      location_id: optional<string>
    source:
      openapi: ../openapi.json
  DevicePropertiesLocklyMetadata:
    properties:
      device_id: string
      device_name: string
      model: optional<string>
    source:
      openapi: ../openapi.json
  DevicePropertiesNukiMetadata:
    properties:
      device_id: string
      device_name: string
      keypad_battery_critical: optional<boolean>
      keypad_paired: optional<boolean>
      keypad_2_paired: optional<boolean>
    source:
      openapi: ../openapi.json
  DevicePropertiesKwiksetMetadata:
    properties:
      device_id: string
      device_name: string
      model_number: string
    source:
      openapi: ../openapi.json
  DevicePropertiesSaltoMetadata:
    properties:
      lock_id: string
      customer_reference: string
      lock_type: string
      battery_level: string
      locked_state: string
      model: optional<string>
    source:
      openapi: ../openapi.json
  DevicePropertiesGenieMetadata:
    properties:
      device_name: string
      door_name: string
    source:
      openapi: ../openapi.json
  DevicePropertiesBrivoMetadata:
    properties:
      device_name: string
    source:
      openapi: ../openapi.json
  DevicePropertiesIglooMetadata:
    properties:
      device_id: string
      bridge_id: string
      model: optional<string>
    source:
      openapi: ../openapi.json
  DevicePropertiesNoiseawareMetadataDeviceModel:
    enum:
      - indoor
      - outdoor
    source:
      openapi: ../openapi.json
  DevicePropertiesNoiseawareMetadata:
    properties:
      device_model: DevicePropertiesNoiseawareMetadataDeviceModel
      noise_level_nrs: double
      noise_level_decibel: double
      device_name: string
      device_id: string
    source:
      openapi: ../openapi.json
  DevicePropertiesMinutMetadataLatestSensorValuesTemperature:
    properties:
      time: string
      value: double
    source:
      openapi: ../openapi.json
  DevicePropertiesMinutMetadataLatestSensorValuesSound:
    properties:
      time: string
      value: double
    source:
      openapi: ../openapi.json
  DevicePropertiesMinutMetadataLatestSensorValuesHumidity:
    properties:
      time: string
      value: double
    source:
      openapi: ../openapi.json
  DevicePropertiesMinutMetadataLatestSensorValuesPressure:
    properties:
      time: string
      value: double
    source:
      openapi: ../openapi.json
  DevicePropertiesMinutMetadataLatestSensorValuesAccelerometerZ:
    properties:
      time: string
      value: double
    source:
      openapi: ../openapi.json
  DevicePropertiesMinutMetadataLatestSensorValues:
    properties:
      temperature:
        type: DevicePropertiesMinutMetadataLatestSensorValuesTemperature
        inline: true
      sound:
        type: DevicePropertiesMinutMetadataLatestSensorValuesSound
        inline: true
      humidity:
        type: DevicePropertiesMinutMetadataLatestSensorValuesHumidity
        inline: true
      pressure:
        type: DevicePropertiesMinutMetadataLatestSensorValuesPressure
        inline: true
      accelerometer_z:
        type: DevicePropertiesMinutMetadataLatestSensorValuesAccelerometerZ
        inline: true
    source:
      openapi: ../openapi.json
  DevicePropertiesMinutMetadata:
    properties:
      device_id: string
      device_name: string
      latest_sensor_values:
        type: DevicePropertiesMinutMetadataLatestSensorValues
        inline: true
    source:
      openapi: ../openapi.json
  DevicePropertiesFourSuitesMetadata:
    properties:
      device_id: double
      device_name: string
      reclose_delay_in_seconds: double
    source:
      openapi: ../openapi.json
  DevicePropertiesTwoNMetadata:
    properties:
      device_id: double
      device_name: string
    source:
      openapi: ../openapi.json
  DevicePropertiesControlbywebMetadata:
    properties:
      device_id: string
      device_name: string
      relay_name: optional<string>
    source:
      openapi: ../openapi.json
  DevicePropertiesTtlockMetadata:
    properties:
      lock_id: double
      lock_alias: string
      feature_value: string
    source:
      openapi: ../openapi.json
  DevicePropertiesSeamBridgeMetadataUnlockMethod:
    enum:
      - bridge
      - doorking
    source:
      openapi: ../openapi.json
  DevicePropertiesSeamBridgeMetadata:
    properties:
      unlock_method: optional<DevicePropertiesSeamBridgeMetadataUnlockMethod>
      device_num: double
      name: string
    source:
      openapi: ../openapi.json
  DevicePropertiesIgloohomeMetadata:
    properties:
      device_id: string
      device_name: string
      bridge_id: optional<string>
      bridge_name: optional<string>
      keypad_id: optional<string>
    source:
      openapi: ../openapi.json
  DevicePropertiesNestMetadata:
    properties:
      nest_device_id: string
      device_name: string
      custom_name: string
    source:
      openapi: ../openapi.json
  DevicePropertiesEcobeeMetadata:
    properties:
      ecobee_device_id: string
      device_name: string
    source:
      openapi: ../openapi.json
  DevicePropertiesHoneywellResideoMetadata:
    properties:
      honeywell_resideo_device_id: string
      device_name: string
    source:
      openapi: ../openapi.json
  DevicePropertiesHubitatMetadata:
    properties:
      device_id: string
      device_name: string
      device_label: string
    source:
      openapi: ../openapi.json
  DevicePropertiesDormakabaOracodeMetadataPredefinedTimeSlotsItem:
    properties:
      name: string
      prefix: double
      check_in_time: string
      check_out_time: string
      is_24_hour: boolean
      is_biweekly_mode: boolean
      is_one_shot: boolean
      is_master: boolean
      ext_dormakaba_oracode_user_level_prefix: double
      dormakaba_oracode_user_level_id:
        type: string
        validation:
          format: uuid
    source:
      openapi: ../openapi.json
  DevicePropertiesDormakabaOracodeMetadata:
    properties:
      door_id: double
      door_name: string
      device_id: optional<double>
      door_is_wireless: boolean
      site_id: double
      site_name: string
      iana_timezone: optional<string>
      predefined_time_slots: >-
        optional<list<DevicePropertiesDormakabaOracodeMetadataPredefinedTimeSlotsItem>>
    source:
      openapi: ../openapi.json
  DevicePropertiesWyzeMetadata:
    properties:
      device_id: string
      device_name: string
      product_name: string
      product_type: string
      product_model: string
      device_info_model: string
      keypad_uuid: optional<string>
      locker_status_hardlock: optional<double>
    source:
      openapi: ../openapi.json
  DevicePropertiesTedeeMetadata:
    properties:
      device_id: double
      serial_number: string
      device_name: string
      device_model: string
      bridge_id: double
      bridge_name: string
      keypad_id: optional<double>
    source:
      openapi: ../openapi.json
  DevicePropertiesCodeConstraintsItemZeroConstraintType:
    enum:
      - no_zeros
      - cannot_start_with_12
      - no_triple_consecutive_ints
      - cannot_specify_pin_code
      - pin_code_matches_existing_set
      - start_date_in_future
      - no_ascending_or_descending_sequence
      - at_least_three_unique_digits
      - cannot_contain_089
    source:
      openapi: ../openapi.json
  DevicePropertiesCodeConstraintsItemZero:
    properties:
      constraint_type: DevicePropertiesCodeConstraintsItemZeroConstraintType
    source:
      openapi: ../openapi.json
  DevicePropertiesCodeConstraintsItemMaxLengthConstraintType:
    enum:
      - name_length
      - name_must_be_unique
    source:
      openapi: ../openapi.json
  DevicePropertiesCodeConstraintsItemMaxLength:
    properties:
      constraint_type: DevicePropertiesCodeConstraintsItemMaxLengthConstraintType
      min_length: optional<double>
      max_length: optional<double>
    source:
      openapi: ../openapi.json
  DevicePropertiesCodeConstraintsItem:
    discriminated: false
    union:
      - DevicePropertiesCodeConstraintsItemZero
      - DevicePropertiesCodeConstraintsItemMaxLength
    source:
      openapi: ../openapi.json
  DevicePropertiesKeypadBattery:
    properties:
      level: double
    source:
      openapi: ../openapi.json
  DeviceProperties:
    docs: Properties of the device.
    properties:
      online:
        type: boolean
        docs: Indicates whether the device is online.
      name:
        type: string
        docs: |2-

                ---
                deprecated: use device.display_name instead
                ---
                Name of the device.
                
      accessory_keypad:
        type: optional<DevicePropertiesAccessoryKeypad>
        docs: Represents the accessory keypad state.
        inline: true
      appearance:
        type: DevicePropertiesAppearance
        inline: true
      model:
        type: DevicePropertiesModel
        inline: true
      has_direct_power:
        type: optional<boolean>
        docs: Indicates whether the device has direct power.
      battery_level:
        type: optional<double>
        docs: >-
          Indicates the battery level of the device as a decimal value between 0
          and 1, inclusive.
        validation:
          min: 0
          max: 1
      battery:
        type: optional<DevicePropertiesBattery>
        docs: >-
          Represents the current status of the battery charge level. Values are
          "critical," which indicates an extremely low level, suggesting
          imminent shutdown or an urgent need for charging; "low," which
          signifies that the battery is under the preferred threshold and should
          be charged soon; "good," which denotes a satisfactory charge level,
          adequate for normal use without the immediate need for recharging; and
          "full," which represents a battery that is fully charged, providing
          the maximum duration of usage.
        inline: true
      manufacturer:
        type: optional<string>
        docs: Manufacturer of the device.
      image_url:
        type: optional<string>
        docs: Image URL for the device.
        validation:
          format: uri
      image_alt_text:
        type: optional<string>
        docs: Alt text for the device image.
      serial_number:
        type: optional<string>
        docs: Serial number of the device.
      online_access_codes_enabled:
        type: optional<boolean>
        docs: >-
          Indicates whether it is currently possible to use online access codes
          for the device.
      offline_access_codes_enabled:
        type: optional<boolean>
        docs: >-
          Indicates whether it is currently possible to use offline access codes
          for the device.
      supports_accessory_keypad:
        type: optional<boolean>
        docs: |2-

                ---
                deprecated: use device.properties.model.can_connect_accessory_keypad
                ---
                
      supports_offline_access_codes:
        type: optional<boolean>
        docs: |2-

                ---
                deprecated: use offline_access_codes_enabled
                ---
                
      noise_level_decibels:
        type: optional<double>
        docs: >-
          Indicates current noise level in decibels, if the device supports
          noise detection.
      currently_triggering_noise_threshold_ids:
        type: optional<list<string>>
        docs: Array of noise threshold IDs that are currently triggering.
      assa_abloy_credential_service_metadata:
        type: optional<DevicePropertiesAssaAbloyCredentialServiceMetadata>
        inline: true
      august_metadata:
        type: optional<DevicePropertiesAugustMetadata>
        inline: true
      avigilon_alta_metadata:
        type: optional<DevicePropertiesAvigilonAltaMetadata>
        inline: true
      schlage_metadata:
        type: optional<DevicePropertiesSchlageMetadata>
        inline: true
      smartthings_metadata:
        type: optional<DevicePropertiesSmartthingsMetadata>
        inline: true
      lockly_metadata:
        type: optional<DevicePropertiesLocklyMetadata>
        inline: true
      nuki_metadata:
        type: optional<DevicePropertiesNukiMetadata>
        inline: true
      kwikset_metadata:
        type: optional<DevicePropertiesKwiksetMetadata>
        inline: true
      salto_metadata:
        type: optional<DevicePropertiesSaltoMetadata>
        inline: true
      genie_metadata:
        type: optional<DevicePropertiesGenieMetadata>
        inline: true
      brivo_metadata:
        type: optional<DevicePropertiesBrivoMetadata>
        inline: true
      igloo_metadata:
        type: optional<DevicePropertiesIglooMetadata>
        inline: true
      noiseaware_metadata:
        type: optional<DevicePropertiesNoiseawareMetadata>
        inline: true
      minut_metadata:
        type: optional<DevicePropertiesMinutMetadata>
        inline: true
      four_suites_metadata:
        type: optional<DevicePropertiesFourSuitesMetadata>
        inline: true
      two_n_metadata:
        type: optional<DevicePropertiesTwoNMetadata>
        inline: true
      controlbyweb_metadata:
        type: optional<DevicePropertiesControlbywebMetadata>
        inline: true
      ttlock_metadata:
        type: optional<DevicePropertiesTtlockMetadata>
        inline: true
      seam_bridge_metadata:
        type: optional<DevicePropertiesSeamBridgeMetadata>
        inline: true
      igloohome_metadata:
        type: optional<DevicePropertiesIgloohomeMetadata>
        inline: true
      nest_metadata:
        type: optional<DevicePropertiesNestMetadata>
        inline: true
      ecobee_metadata:
        type: optional<DevicePropertiesEcobeeMetadata>
        inline: true
      honeywell_resideo_metadata:
        type: optional<DevicePropertiesHoneywellResideoMetadata>
        inline: true
      hubitat_metadata:
        type: optional<DevicePropertiesHubitatMetadata>
        inline: true
      dormakaba_oracode_metadata:
        type: optional<DevicePropertiesDormakabaOracodeMetadata>
        inline: true
      wyze_metadata:
        type: optional<DevicePropertiesWyzeMetadata>
        inline: true
      tedee_metadata:
        type: optional<DevicePropertiesTedeeMetadata>
        inline: true
      _experimental_supported_code_from_access_codes_lengths: optional<list<double>>
      code_constraints: optional<list<DevicePropertiesCodeConstraintsItem>>
      supported_code_lengths: optional<list<double>>
      max_active_codes_supported: optional<double>
      supports_backup_access_code_pool: optional<boolean>
      has_native_entry_events: optional<boolean>
      locked: optional<boolean>
      keypad_battery:
        type: optional<DevicePropertiesKeypadBattery>
        inline: true
      door_open: optional<boolean>
    source:
      openapi: ../openapi.json
  DeviceLocation:
    docs: Location information for the device.
    properties:
      location_name:
        type: optional<string>
        docs: Name of the device location.
      timezone:
        type: optional<string>
        docs: Time zone of the device location.
    source:
      openapi: ../openapi.json
  DeviceErrorsItem:
    properties:
      error_code: string
      message: string
    source:
      openapi: ../openapi.json
  DeviceWarningsItem:
    properties:
      warning_code: string
      message: string
    source:
      openapi: ../openapi.json
  DeviceCustomMetadataValue:
    discriminated: false
    union:
      - string
      - boolean
    source:
      openapi: ../openapi.json
  Device:
    properties:
      device_id:
        type: string
        docs: Unique identifier for the device.
        validation:
          format: uuid
      device_type:
        type: DeviceDeviceType
        docs: Type of the device.
      nickname:
        type: optional<string>
        docs: Optional nickname to describe the device, settable through Seam
      display_name:
        type: string
        docs: >-
          Display name of the device, defaults to nickname (if it is set) or
          properties.appearance.name otherwise. Enables administrators and users
          to identify the device easily, especially when there are numerous
          devices.
      capabilities_supported:
        docs: >-
          Collection of capabilities that the device supports when connected to
          Seam. Values are "access_code," which indicates that the device can
          manage and utilize digital PIN codes for secure access; "lock," which
          indicates that the device controls a door locking mechanism, enabling
          the remote opening and closing of doors and other entry points;
          "noise_detection," which indicates that the device supports monitoring
          and responding to ambient noise levels; "thermostat," which indicates
          that the device can regulate and adjust indoor temperatures; and
          "battery," which indicates that the device can manage battery life and
          health.
        type: list<DeviceCapabilitiesSupportedItem>
      properties:
        type: DeviceProperties
        docs: Properties of the device.
      location:
        type: optional<DeviceLocation>
        docs: Location information for the device.
        inline: true
      connected_account_id:
        type: string
        docs: Unique identifier for the account associated with the device.
        validation:
          format: uuid
      workspace_id:
        type: string
        docs: Unique identifier for the Seam workspace associated with the device.
        validation:
          format: uuid
      errors:
        docs: >-
          Array of errors associated with the device. Each error object within
          the array contains two fields: "error_code" and "message."
          "error_code" is a string that uniquely identifies the type of error,
          enabling quick recognition and categorization of the issue. "message"
          provides a more detailed description of the error, offering insights
          into the issue and potentially how to rectify it.
        type: list<DeviceErrorsItem>
      warnings:
        docs: >-
          Array of warnings associated with the device. Each warning object
          within the array contains two fields: "warning_code" and "message."
          "warning_code" is a string that uniquely identifies the type of
          warning, enabling quick recognition and categorization of the issue.
          "message" provides a more detailed description of the warning,
          offering insights into the issue and potentially how to rectify it.
        type: list<DeviceWarningsItem>
      created_at:
        type: datetime
        docs: Date and time at which the device object was created.
      is_managed:
        type: boolean
        docs: Indicates whether Seam manages the device.
      custom_metadata: map<string, DeviceCustomMetadataValue>
      can_remotely_unlock: optional<boolean>
      can_remotely_lock: optional<boolean>
      can_program_offline_access_codes: optional<boolean>
      can_program_online_access_codes: optional<boolean>
      can_simulate_removal: optional<boolean>
      can_simulate_connection: optional<boolean>
      can_simulate_disconnection: optional<boolean>
    source:
      openapi: ../openapi.json
  UnmanagedDeviceDeviceType:
    enum:
      - akuvox_lock
      - august_lock
      - brivo_access_point
      - butterflymx_panel
      - avigilon_alta_entry
      - doorking_lock
      - genie_door
      - igloo_lock
      - linear_lock
      - lockly_lock
      - kwikset_lock
      - nuki_lock
      - salto_lock
      - schlage_lock
      - seam_relay
      - smartthings_lock
      - wyze_lock
      - yale_lock
      - two_n_intercom
      - controlbyweb_device
      - ttlock_lock
      - igloohome_lock
      - hubitat_lock
      - four_suites_door
      - dormakaba_oracode_door
      - tedee_lock
      - noiseaware_activity_zone
      - minut_sensor
      - ecobee_thermostat
      - nest_thermostat
      - honeywell_resideo_thermostat
      - ios_phone
      - android_phone
    docs: Type of the device.
    source:
      openapi: ../openapi.json
  UnmanagedDeviceCapabilitiesSupportedItem:
    enum:
      - access_code
      - lock
      - noise_detection
      - thermostat
      - battery
      - phone
    source:
      openapi: ../openapi.json
  UnmanagedDeviceErrorsItem:
    properties:
      error_code: string
      message: string
    source:
      openapi: ../openapi.json
  UnmanagedDeviceWarningsItem:
    properties:
      warning_code: string
      message: string
    source:
      openapi: ../openapi.json
  UnmanagedDevicePropertiesAccessoryKeypadBattery:
    docs: Indicates if the keypad battery properties.
    properties:
      level:
        type: double
        validation:
          min: 0
          max: 1
    source:
      openapi: ../openapi.json
  UnmanagedDevicePropertiesAccessoryKeypad:
    docs: Represents the accessory keypad state.
    properties:
      is_connected:
        type: boolean
        docs: Indicates if the accessory_keypad is connected to the device.
      battery:
        type: optional<UnmanagedDevicePropertiesAccessoryKeypadBattery>
        docs: Indicates if the keypad battery properties.
        inline: true
    source:
      openapi: ../openapi.json
  UnmanagedDevicePropertiesBatteryStatus:
    enum:
      - critical
      - low
      - good
      - full
    source:
      openapi: ../openapi.json
  UnmanagedDevicePropertiesBattery:
    docs: >-
      Represents the current status of the battery charge level. Values are
      "critical," which indicates an extremely low level, suggesting imminent
      shutdown or an urgent need for charging; "low," which signifies that the
      battery is under the preferred threshold and should be charged soon;
      "good," which denotes a satisfactory charge level, adequate for normal use
      without the immediate need for recharging; and "full," which represents a
      battery that is fully charged, providing the maximum duration of usage.
    properties:
      level:
        type: double
        validation:
          min: 0
          max: 1
      status: UnmanagedDevicePropertiesBatteryStatus
    source:
      openapi: ../openapi.json
  UnmanagedDevicePropertiesModel:
    properties:
      can_connect_accessory_keypad:
        type: optional<boolean>
        docs: Indicates whether the device can connect a accessory keypad.
      display_name:
        type: string
        docs: Display name of the device model.
      manufacturer_display_name:
        type: string
        docs: >-
          Display name that corresponds to the manufacturer-specific terminology
          for the device.
      has_built_in_keypad:
        type: optional<boolean>
        docs: Indicates whether the device has a built in accessory keypad.
      offline_access_codes_supported:
        type: optional<boolean>
        docs: Indicates whether the device supports offline access codes.
      online_access_codes_supported:
        type: optional<boolean>
        docs: Indicates whether the device supports online access codes.
      accessory_keypad_supported:
        type: optional<boolean>
        docs: |2-

                ---
                deprecated: use device.properties.model.can_connect_accessory_keypad
                ---
                
    source:
      openapi: ../openapi.json
  UnmanagedDeviceProperties:
    properties:
      accessory_keypad:
        type: optional<UnmanagedDevicePropertiesAccessoryKeypad>
        docs: Represents the accessory keypad state.
        inline: true
      name:
        type: string
        docs: |2-

                ---
                deprecated: use device.display_name instead
                ---
                Name of the device.
                
      online:
        type: boolean
        docs: Indicates whether the device is online.
      manufacturer:
        type: optional<string>
        docs: Manufacturer of the device.
      image_url:
        type: optional<string>
        docs: Image URL for the device.
        validation:
          format: uri
      image_alt_text:
        type: optional<string>
        docs: Alt text for the device image.
      battery_level:
        type: optional<double>
        docs: >-
          Indicates the battery level of the device as a decimal value between 0
          and 1, inclusive.
        validation:
          min: 0
          max: 1
      battery:
        type: optional<UnmanagedDevicePropertiesBattery>
        docs: >-
          Represents the current status of the battery charge level. Values are
          "critical," which indicates an extremely low level, suggesting
          imminent shutdown or an urgent need for charging; "low," which
          signifies that the battery is under the preferred threshold and should
          be charged soon; "good," which denotes a satisfactory charge level,
          adequate for normal use without the immediate need for recharging; and
          "full," which represents a battery that is fully charged, providing
          the maximum duration of usage.
        inline: true
      online_access_codes_enabled:
        type: optional<boolean>
        docs: >-
          Indicates whether it is currently possible to use online access codes
          for the device.
      offline_access_codes_enabled:
        type: optional<boolean>
        docs: >-
          Indicates whether it is currently possible to use offline access codes
          for the device.
      model:
        type: UnmanagedDevicePropertiesModel
        inline: true
    source:
      openapi: ../openapi.json
  UnmanagedDevice:
    properties:
      device_id:
        type: string
        docs: Unique identifier for the device.
        validation:
          format: uuid
      device_type:
        type: UnmanagedDeviceDeviceType
        docs: Type of the device.
      connected_account_id:
        type: string
        docs: Unique identifier for the account associated with the device.
        validation:
          format: uuid
      capabilities_supported:
        docs: >-
          Collection of capabilities that the device supports when connected to
          Seam. Values are "access_code," which indicates that the device can
          manage and utilize digital PIN codes for secure access; "lock," which
          indicates that the device controls a door locking mechanism, enabling
          the remote opening and closing of doors and other entry points;
          "noise_detection," which indicates that the device supports monitoring
          and responding to ambient noise levels; "thermostat," which indicates
          that the device can regulate and adjust indoor temperatures; and
          "battery," which indicates that the device can manage battery life and
          health.
        type: list<UnmanagedDeviceCapabilitiesSupportedItem>
      workspace_id:
        type: string
        docs: Unique identifier for the Seam workspace associated with the device.
        validation:
          format: uuid
      errors:
        docs: >-
          Array of errors associated with the device. Each error object within
          the array contains two fields: "error_code" and "message."
          "error_code" is a string that uniquely identifies the type of error,
          enabling quick recognition and categorization of the issue. "message"
          provides a more detailed description of the error, offering insights
          into the issue and potentially how to rectify it.
        type: list<UnmanagedDeviceErrorsItem>
      warnings:
        docs: >-
          Array of warnings associated with the device. Each warning object
          within the array contains two fields: "warning_code" and "message."
          "warning_code" is a string that uniquely identifies the type of
          warning, enabling quick recognition and categorization of the issue.
          "message" provides a more detailed description of the warning,
          offering insights into the issue and potentially how to rectify it.
        type: list<UnmanagedDeviceWarningsItem>
      created_at:
        type: datetime
        docs: Date and time at which the device object was created.
      is_managed: boolean
      properties:
        type: UnmanagedDeviceProperties
        inline: true
      can_remotely_unlock: optional<boolean>
      can_remotely_lock: optional<boolean>
      can_program_offline_access_codes: optional<boolean>
      can_program_online_access_codes: optional<boolean>
      can_simulate_removal: optional<boolean>
      can_simulate_connection: optional<boolean>
      can_simulate_disconnection: optional<boolean>
    source:
      openapi: ../openapi.json
  DeviceProviderDeviceProviderName:
    enum:
      - akuvox
      - august
      - avigilon_alta
      - brivo
      - butterflymx
      - schlage
      - smartthings
      - yale
      - genie
      - doorking
      - salto
      - lockly
      - ttlock
      - linear
      - noiseaware
      - nuki
      - seam_relay_admin
      - igloo
      - kwikset
      - minut
      - my_2n
      - controlbyweb
      - nest
      - igloohome
      - ecobee
      - hubitat
      - four_suites
      - dormakaba_oracode
      - pti
      - wyze
      - seam_passport
      - visionline
      - assa_abloy_credential_service
      - seam_bridge
      - tedee
      - honeywell_resideo
      - latch
    source:
      openapi: ../openapi.json
  DeviceProviderProviderCategoriesItem:
    enum:
      - stable
      - consumer_smartlocks
      - thermostats
      - noise_sensors
      - access_control_systems
    source:
      openapi: ../openapi.json
  DeviceProvider:
    properties:
      device_provider_name: DeviceProviderDeviceProviderName
      display_name: string
      image_url: string
      provider_categories: list<DeviceProviderProviderCategoriesItem>
    source:
      openapi: ../openapi.json
  Event:
    properties:
      event_id:
        type: string
        validation:
          format: uuid
      device_id:
        type: optional<string>
        validation:
          format: uuid
      action_attempt_id:
        type: optional<string>
        validation:
          format: uuid
      acs_credential_id:
        type: optional<string>
        validation:
          format: uuid
      acs_user_id:
        type: optional<string>
        validation:
          format: uuid
      acs_system_id:
        type: optional<string>
        validation:
          format: uuid
      client_session_id:
        type: optional<string>
        validation:
          format: uuid
      enrollment_automation_id:
        type: optional<string>
        validation:
          format: uuid
      event_type: string
      workspace_id:
        type: string
        validation:
          format: uuid
      created_at: datetime
      occurred_at: datetime
    source:
      openapi: ../openapi.json
  NoiseThreshold:
    properties:
      noise_threshold_id:
        type: string
        validation:
          format: uuid
      device_id:
        type: string
        validation:
          format: uuid
      name: string
      noise_threshold_nrs: optional<double>
      starts_daily_at: string
      ends_daily_at: string
      noise_threshold_decibels: double
    source:
      openapi: ../openapi.json
  ServiceHealthStatus:
    enum:
      - healthy
      - degraded
      - down
    source:
      openapi: ../openapi.json
  ServiceHealth:
    properties:
      service: string
      status: ServiceHealthStatus
      description: string
    source:
      openapi: ../openapi.json
  Webhook:
    properties:
      webhook_id: string
      url: string
      event_types: optional<list<string>>
      secret: optional<string>
    source:
      openapi: ../openapi.json
  Workspace:
    properties:
      workspace_id:
        type: string
        validation:
          format: uuid
      name: string
      company_name: string
      is_sandbox: boolean
      connect_partner_name:
        type: optional<string>
        docs: |2-

              ---
              deprecated: use company_name
              ---
            
    source:
      openapi: ../openapi.json
  AcsSystemExternalType:
    enum:
      - pti_site
      - alta_org
      - salto_site
      - brivo_account
      - hid_credential_manager_organization
      - visionline_system
      - assa_abloy_credential_service
      - latch_building
    source:
      openapi: ../openapi.json
  AcsSystemSystemType:
    enum:
      - pti_site
      - alta_org
      - salto_site
      - brivo_account
      - hid_credential_manager_organization
      - visionline_system
      - assa_abloy_credential_service
      - latch_building
    docs: |2-

            ---
            deprecated: use external_type
            ---
            
    source:
      openapi: ../openapi.json
  AcsSystemErrorsItemSeamBridgeDisconnected:
    properties:
      created_at: datetime
      message: string
    source:
      openapi: ../openapi.json
  AcsSystemErrorsItemVisionlineInstanceUnreachable:
    properties:
      created_at: datetime
      message: string
    source:
      openapi: ../openapi.json
  AcsSystemErrorsItem:
    discriminant: error_code
    base-properties: {}
    union:
      seam_bridge_disconnected: AcsSystemErrorsItemSeamBridgeDisconnected
      visionline_instance_unreachable: AcsSystemErrorsItemVisionlineInstanceUnreachable
    source:
      openapi: ../openapi.json
  AcsSystemWarningsItem:
    properties: {}
    source:
      openapi: ../openapi.json
  AcsSystem:
    properties:
      acs_system_id:
        type: string
        validation:
          format: uuid
      external_type: optional<AcsSystemExternalType>
      external_type_display_name: optional<string>
      system_type:
        type: optional<AcsSystemSystemType>
        docs: |2-

                ---
                deprecated: use external_type
                ---
                
      system_type_display_name:
        type: optional<string>
        docs: |2-

                ---
                deprecated: use external_type_display_name
                ---
                
      name: string
      created_at: datetime
      workspace_id:
        type: string
        validation:
          format: uuid
      connected_account_ids: list<string>
      image_url: string
      image_alt_text: string
      errors: list<AcsSystemErrorsItem>
      warnings: list<AcsSystemWarningsItem>
      can_automate_enrollment: optional<boolean>
      can_create_acs_access_groups: optional<boolean>
      can_remove_acs_users_from_acs_access_groups: optional<boolean>
      can_add_acs_users_to_acs_access_groups: optional<boolean>
    source:
      openapi: ../openapi.json
  AcsAccessGroupAccessGroupType:
    enum:
      - pti_unit
      - pti_access_level
      - salto_access_group
      - brivo_group
    docs: |2-

          ---
          deprecated: use external_type
          ---
        
    source:
      openapi: ../openapi.json
  AcsAccessGroupExternalType:
    enum:
      - pti_unit
      - pti_access_level
      - salto_access_group
      - brivo_group
    source:
      openapi: ../openapi.json
  AcsAccessGroup:
    properties:
      acs_access_group_id:
        type: string
        validation:
          format: uuid
      acs_system_id:
        type: string
        validation:
          format: uuid
      workspace_id:
        type: string
        validation:
          format: uuid
      name: string
      access_group_type:
        type: AcsAccessGroupAccessGroupType
        docs: |2-

              ---
              deprecated: use external_type
              ---
            
      access_group_type_display_name:
        type: string
        docs: |2-

              ---
              deprecated: use external_type_display_name
              ---
              
      display_name: string
      external_type: AcsAccessGroupExternalType
      external_type_display_name: string
      created_at: datetime
    source:
      openapi: ../openapi.json
  AcsUserExternalType:
    enum:
      - pti_user
      - brivo_user
      - hid_credential_manager_user
      - salto_site_user
      - latch_user
    source:
      openapi: ../openapi.json
  AcsUserAccessSchedule:
    properties:
      starts_at: datetime
      ends_at: datetime
    source:
      openapi: ../openapi.json
  AcsUser:
    properties:
      acs_user_id:
        type: string
        validation:
          format: uuid
      acs_system_id:
        type: string
        validation:
          format: uuid
      hid_acs_system_id:
        type: optional<string>
        validation:
          format: uuid
      workspace_id:
        type: string
        validation:
          format: uuid
      created_at: datetime
      display_name: string
      external_type: optional<AcsUserExternalType>
      external_type_display_name: optional<string>
      is_suspended: boolean
      access_schedule:
        type: optional<AcsUserAccessSchedule>
        inline: true
      user_identity_id: optional<string>
      user_identity_full_name: optional<string>
      user_identity_email_address: optional<string>
      user_identity_phone_number: optional<string>
      full_name: optional<string>
      email:
        type: optional<string>
        docs: |2-

              ---
              deprecated: use email_address.
              ---
              
        validation:
          format: email
      email_address:
        type: optional<string>
        validation:
          format: email
      phone_number: optional<string>
    source:
      openapi: ../openapi.json
  AcsEntranceErrorsItem:
    properties:
      error_code: string
      message: string
    source:
      openapi: ../openapi.json
  AcsEntranceLatchMetadata:
    properties:
      accessibility_type: string
      door_name: string
      door_type: string
      is_connected: boolean
    source:
      openapi: ../openapi.json
  AcsEntranceVisionlineMetadataDoorCategory:
    enum:
      - entrance
      - guest
      - value: elevator reader
        name: ElevatorReader
      - common
      - value: common (PMS)
        name: CommonPms
    source:
      openapi: ../openapi.json
  AcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileType:
    enum:
      - BLE
      - commonDoor
      - touch
    source:
      openapi: ../openapi.json
  AcsEntranceVisionlineMetadataProfilesItem:
    properties:
      visionline_door_profile_id: string
      visionline_door_profile_type: AcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileType
    source:
      openapi: ../openapi.json
  AcsEntranceVisionlineMetadata:
    properties:
      door_name: string
      door_category: AcsEntranceVisionlineMetadataDoorCategory
      profiles: optional<list<AcsEntranceVisionlineMetadataProfilesItem>>
    source:
      openapi: ../openapi.json
  AcsEntrance:
    properties:
      acs_system_id:
        type: string
        validation:
          format: uuid
      acs_entrance_id:
        type: string
        validation:
          format: uuid
      created_at: datetime
      display_name: string
      errors: list<AcsEntranceErrorsItem>
      latch_metadata:
        type: optional<AcsEntranceLatchMetadata>
        inline: true
      visionline_metadata:
        type: optional<AcsEntranceVisionlineMetadata>
        inline: true
    source:
      openapi: ../openapi.json
  AcsCredentialProvisioningAutomation:
    properties:
      acs_credential_provisioning_automation_id:
        type: string
        validation:
          format: uuid
      credential_manager_acs_system_id:
        type: string
        validation:
          format: uuid
      user_identity_id:
        type: string
        validation:
          format: uuid
      created_at: datetime
      workspace_id:
        type: string
        validation:
          format: uuid
    source:
      openapi: ../openapi.json
  AcsCredentialPool:
    properties:
      acs_credential_pool_id:
        type: string
        validation:
          format: uuid
      acs_system_id:
        type: string
        validation:
          format: uuid
      display_name:
        type: string
        validation:
          minLength: 1
      external_type: literal<"hid_part_number">
      external_type_display_name: string
      created_at: datetime
      workspace_id:
        type: string
        validation:
          format: uuid
    source:
      openapi: ../openapi.json
  AcsCredentialAccessMethod:
    enum:
      - code
      - card
      - mobile_key
    source:
      openapi: ../openapi.json
  AcsCredentialExternalType:
    enum:
      - pti_card
      - brivo_credential
      - hid_credential
      - visionline_card
    source:
      openapi: ../openapi.json
  AcsCredentialErrorsItem:
    properties:
      error_code: string
      message: string
    source:
      openapi: ../openapi.json
  AcsCredentialWarningsItem:
    properties:
      warning_code: string
      message: string
    source:
      openapi: ../openapi.json
  AcsCredentialVisionlineMetadataCardFunctionType:
    enum:
      - guest
      - staff
    source:
      openapi: ../openapi.json
  AcsCredentialVisionlineMetadata:
    properties:
      card_function_type: AcsCredentialVisionlineMetadataCardFunctionType
      joiner_acs_credential_ids: optional<list<string>>
      guest_acs_entrance_ids: optional<list<string>>
      common_acs_entrance_ids: optional<list<string>>
    source:
      openapi: ../openapi.json
  AcsCredential:
    properties:
      acs_credential_id:
        type: string
        validation:
          format: uuid
      acs_user_id:
        type: optional<string>
        validation:
          format: uuid
      acs_credential_pool_id:
        type: optional<string>
        validation:
          format: uuid
      acs_system_id:
        type: string
        validation:
          format: uuid
      parent_acs_credential_id:
        type: optional<string>
        validation:
          format: uuid
      display_name:
        type: string
        validation:
          minLength: 1
      code: optional<string>
      access_method: AcsCredentialAccessMethod
      external_type: optional<AcsCredentialExternalType>
      external_type_display_name: optional<string>
      created_at: datetime
      workspace_id:
        type: string
        validation:
          format: uuid
      starts_at: optional<string>
      ends_at: optional<string>
      errors: list<AcsCredentialErrorsItem>
      warnings: list<AcsCredentialWarningsItem>
      is_multi_phone_sync_credential: optional<boolean>
      is_latest_desired_state_synced_with_provider: optional<boolean>
      latest_desired_state_synced_with_provider_at: optional<datetime>
      visionline_metadata:
        type: optional<AcsCredentialVisionlineMetadata>
        inline: true
    source:
      openapi: ../openapi.json
  EnrollmentAutomation:
    properties:
      credential_manager_acs_system_id:
        type: string
        validation:
          format: uuid
      user_identity_id:
        type: string
        validation:
          format: uuid
      created_at: datetime
      workspace_id:
        type: string
        validation:
          format: uuid
      enrollment_automation_id:
        type: string
        validation:
          format: uuid
    source:
      openapi: ../openapi.json
  PhoneDeviceType:
    enum:
      - android_phone
      - ios_phone
    source:
      openapi: ../openapi.json
  PhoneCapabilitiesSupportedItem:
    enum:
      - access_code
      - lock
      - noise_detection
      - thermostat
      - battery
      - phone
    source:
      openapi: ../openapi.json
  PhonePropertiesAssaAbloyCredentialServiceMetadataEndpointsItem:
    properties:
      endpoint_id: string
      is_active: boolean
    source:
      openapi: ../openapi.json
  PhonePropertiesAssaAbloyCredentialServiceMetadata:
    properties:
      has_active_endpoint: boolean
      endpoints: list<PhonePropertiesAssaAbloyCredentialServiceMetadataEndpointsItem>
    source:
      openapi: ../openapi.json
  PhoneProperties:
    properties:
      assa_abloy_credential_service_metadata:
        type: optional<PhonePropertiesAssaAbloyCredentialServiceMetadata>
        inline: true
    source:
      openapi: ../openapi.json
  PhoneLocation:
    docs: Location information for the device.
    properties:
      location_name:
        type: optional<string>
        docs: Name of the device location.
      timezone:
        type: optional<string>
        docs: Time zone of the device location.
    source:
      openapi: ../openapi.json
  PhoneErrorsItem:
    properties:
      error_code: string
      message: string
    source:
      openapi: ../openapi.json
  PhoneWarningsItem:
    properties:
      warning_code: string
      message: string
    source:
      openapi: ../openapi.json
  PhoneCustomMetadataValue:
    discriminated: false
    union:
      - string
      - boolean
    source:
      openapi: ../openapi.json
  Phone:
    properties:
      device_id:
        type: string
        docs: Unique identifier for the device.
        validation:
          format: uuid
      device_type: PhoneDeviceType
      nickname:
        type: optional<string>
        docs: Optional nickname to describe the device, settable through Seam
      display_name:
        type: string
        docs: >-
          Display name of the device, defaults to nickname (if it is set) or
          properties.appearance.name otherwise. Enables administrators and users
          to identify the device easily, especially when there are numerous
          devices.
      capabilities_supported:
        docs: >-
          Collection of capabilities that the device supports when connected to
          Seam. Values are "access_code," which indicates that the device can
          manage and utilize digital PIN codes for secure access; "lock," which
          indicates that the device controls a door locking mechanism, enabling
          the remote opening and closing of doors and other entry points;
          "noise_detection," which indicates that the device supports monitoring
          and responding to ambient noise levels; "thermostat," which indicates
          that the device can regulate and adjust indoor temperatures; and
          "battery," which indicates that the device can manage battery life and
          health.
        type: list<PhoneCapabilitiesSupportedItem>
      properties:
        type: PhoneProperties
        inline: true
      location:
        type: optional<PhoneLocation>
        docs: Location information for the device.
        inline: true
      workspace_id:
        type: string
        docs: Unique identifier for the Seam workspace associated with the device.
        validation:
          format: uuid
      errors:
        docs: >-
          Array of errors associated with the device. Each error object within
          the array contains two fields: "error_code" and "message."
          "error_code" is a string that uniquely identifies the type of error,
          enabling quick recognition and categorization of the issue. "message"
          provides a more detailed description of the error, offering insights
          into the issue and potentially how to rectify it.
        type: list<PhoneErrorsItem>
      warnings:
        docs: >-
          Array of warnings associated with the device. Each warning object
          within the array contains two fields: "warning_code" and "message."
          "warning_code" is a string that uniquely identifies the type of
          warning, enabling quick recognition and categorization of the issue.
          "message" provides a more detailed description of the warning,
          offering insights into the issue and potentially how to rectify it.
        type: list<PhoneWarningsItem>
      created_at:
        type: datetime
        docs: Date and time at which the device object was created.
      is_managed:
        type: boolean
        docs: Indicates whether Seam manages the device.
      custom_metadata: map<string, PhoneCustomMetadataValue>
      can_remotely_unlock: optional<boolean>
      can_remotely_lock: optional<boolean>
      can_program_offline_access_codes: optional<boolean>
      can_program_online_access_codes: optional<boolean>
      can_simulate_removal: optional<boolean>
      can_simulate_connection: optional<boolean>
      can_simulate_disconnection: optional<boolean>
    source:
      openapi: ../openapi.json
  UserIdentity:
    properties:
      user_identity_id:
        type: string
        validation:
          format: uuid
      user_identity_key:
        type: optional<string>
        validation:
          minLength: 1
      email_address:
        type: optional<string>
        validation:
          format: email
      phone_number: optional<string>
      display_name:
        type: string
        validation:
          minLength: 1
      full_name:
        type: optional<string>
        validation:
          minLength: 1
      created_at: datetime
      workspace_id:
        type: string
        validation:
          format: uuid
    source:
      openapi: ../openapi.json
  Network:
    properties:
      network_id:
        type: string
        validation:
          format: uuid
      workspace_id:
        type: string
        validation:
          format: uuid
      display_name: string
      created_at: datetime
    source:
      openapi: ../openapi.json
",
    },
    "accessCodes.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "create": {
              "auth": true,
              "display-name": "/access_codes/create",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "device_id": "device_id",
                  },
                  "response": {
                    "body": {
                      "access_code": {
                        "access_code_id": "access_code_id",
                        "code": "code",
                        "common_code_key": "common_code_key",
                        "created_at": "2024-01-15T09:30:00Z",
                        "device_id": "device_id",
                        "ends_at": "2024-01-15T09:30:00Z",
                        "errors": {
                          "key": "value",
                        },
                        "is_backup": true,
                        "is_backup_access_code_available": true,
                        "is_external_modification_allowed": true,
                        "is_managed": true,
                        "is_offline_access_code": true,
                        "is_one_time_use": true,
                        "is_scheduled_on_device": true,
                        "is_waiting_for_code_assignment": true,
                        "name": "name",
                        "pulled_backup_access_code_id": "pulled_backup_access_code_id",
                        "starts_at": "2024-01-15T09:30:00Z",
                        "status": "setting",
                        "type": "time_bound",
                        "warnings": {
                          "key": "value",
                        },
                      },
                      "action_attempt": {
                        "action_attempt_id": "action_attempt_id",
                        "action_type": "LOCK_DOOR",
                        "error": "error",
                        "result": "result",
                        "status": "pending",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/access_codes/create",
              "request": {
                "body": {
                  "properties": {
                    "allow_external_modification": "optional<boolean>",
                    "attempt_for_offline_device": {
                      "default": true,
                      "type": "optional<boolean>",
                    },
                    "code": {
                      "type": "optional<string>",
                      "validation": {
                        "format": undefined,
                        "maxLength": 9,
                        "minLength": 4,
                        "pattern": "^\d+$",
                      },
                    },
                    "common_code_key": "optional<string>",
                    "device_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "ends_at": "optional<string>",
                    "is_external_modification_allowed": "optional<boolean>",
                    "is_offline_access_code": "optional<boolean>",
                    "is_one_time_use": "optional<boolean>",
                    "max_time_rounding": {
                      "default": "1hour",
                      "type": "optional<AccessCodesCreateRequestMaxTimeRounding>",
                    },
                    "name": "optional<string>",
                    "prefer_native_scheduling": "optional<boolean>",
                    "starts_at": "optional<string>",
                    "sync": {
                      "default": false,
                      "type": "optional<boolean>",
                    },
                    "use_backup_access_code_pool": "optional<boolean>",
                    "use_offline_access_code": "optional<boolean>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "AccessCodesCreateRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "access_code",
                "type": "AccessCodesCreateResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "create_multiple": {
              "auth": true,
              "display-name": "/access_codes/create_multiple",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "device_ids": [
                      "device_ids",
                    ],
                  },
                  "response": {
                    "body": {
                      "access_codes": [
                        {
                          "access_code_id": "access_code_id",
                          "code": "code",
                          "common_code_key": "common_code_key",
                          "created_at": "2024-01-15T09:30:00Z",
                          "device_id": "device_id",
                          "ends_at": "2024-01-15T09:30:00Z",
                          "errors": {
                            "key": "value",
                          },
                          "is_backup": true,
                          "is_backup_access_code_available": true,
                          "is_external_modification_allowed": true,
                          "is_managed": true,
                          "is_offline_access_code": true,
                          "is_one_time_use": true,
                          "is_scheduled_on_device": true,
                          "is_waiting_for_code_assignment": true,
                          "name": "name",
                          "pulled_backup_access_code_id": "pulled_backup_access_code_id",
                          "starts_at": "2024-01-15T09:30:00Z",
                          "status": "setting",
                          "type": "time_bound",
                          "warnings": {
                            "key": "value",
                          },
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/access_codes/create_multiple",
              "request": {
                "body": {
                  "properties": {
                    "allow_external_modification": "optional<boolean>",
                    "attempt_for_offline_device": {
                      "default": true,
                      "type": "optional<boolean>",
                    },
                    "behavior_when_code_cannot_be_shared": {
                      "default": "throw",
                      "type": "optional<AccessCodesCreateMultipleRequestBehaviorWhenCodeCannotBeShared>",
                    },
                    "code": {
                      "type": "optional<string>",
                      "validation": {
                        "format": undefined,
                        "maxLength": 9,
                        "minLength": 4,
                        "pattern": "^\d+$",
                      },
                    },
                    "device_ids": "list<string>",
                    "ends_at": "optional<string>",
                    "is_external_modification_allowed": "optional<boolean>",
                    "is_offline_access_code": "optional<boolean>",
                    "is_one_time_use": "optional<boolean>",
                    "max_time_rounding": {
                      "default": "1hour",
                      "type": "optional<AccessCodesCreateMultipleRequestMaxTimeRounding>",
                    },
                    "name": "optional<string>",
                    "prefer_native_scheduling": "optional<boolean>",
                    "preferred_code_length": "optional<double>",
                    "starts_at": "optional<string>",
                    "use_backup_access_code_pool": "optional<boolean>",
                    "use_offline_access_code": "optional<boolean>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "AccessCodesCreateMultipleRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "access_codes",
                "type": "AccessCodesCreateMultipleResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "delete": {
              "auth": true,
              "display-name": "/access_codes/delete",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "access_code_id": "access_code_id",
                  },
                  "response": {
                    "body": {
                      "action_attempt": {
                        "action_attempt_id": "action_attempt_id",
                        "action_type": "LOCK_DOOR",
                        "error": "error",
                        "result": "result",
                        "status": "pending",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/access_codes/delete",
              "request": {
                "body": {
                  "properties": {
                    "access_code_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "device_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "sync": {
                      "default": false,
                      "type": "optional<boolean>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "AccessCodesDeleteRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "type": "AccessCodesDeleteResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "generate_code": {
              "auth": true,
              "display-name": "/access_codes/generate_code",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "device_id": "device_id",
                  },
                  "response": {
                    "body": {
                      "generated_code": {
                        "access_code_id": "access_code_id",
                        "code": "code",
                        "common_code_key": "common_code_key",
                        "created_at": "2024-01-15T09:30:00Z",
                        "device_id": "device_id",
                        "ends_at": "2024-01-15T09:30:00Z",
                        "errors": {
                          "key": "value",
                        },
                        "is_backup": true,
                        "is_backup_access_code_available": true,
                        "is_external_modification_allowed": true,
                        "is_managed": true,
                        "is_offline_access_code": true,
                        "is_one_time_use": true,
                        "is_scheduled_on_device": true,
                        "is_waiting_for_code_assignment": true,
                        "name": "name",
                        "pulled_backup_access_code_id": "pulled_backup_access_code_id",
                        "starts_at": "2024-01-15T09:30:00Z",
                        "status": "setting",
                        "type": "time_bound",
                        "warnings": {
                          "key": "value",
                        },
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/access_codes/generate_code",
              "request": {
                "body": {
                  "properties": {
                    "device_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "AccessCodesGenerateCodeRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "generated_code",
                "type": "AccessCodesGenerateCodeResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get": {
              "auth": true,
              "display-name": "/access_codes/get",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {},
                  "response": {
                    "body": {
                      "access_code": {
                        "access_code_id": "access_code_id",
                        "code": "code",
                        "common_code_key": "common_code_key",
                        "created_at": "2024-01-15T09:30:00Z",
                        "device_id": "device_id",
                        "ends_at": "2024-01-15T09:30:00Z",
                        "errors": {
                          "key": "value",
                        },
                        "is_backup": true,
                        "is_backup_access_code_available": true,
                        "is_external_modification_allowed": true,
                        "is_managed": true,
                        "is_offline_access_code": true,
                        "is_one_time_use": true,
                        "is_scheduled_on_device": true,
                        "is_waiting_for_code_assignment": true,
                        "name": "name",
                        "pulled_backup_access_code_id": "pulled_backup_access_code_id",
                        "starts_at": "2024-01-15T09:30:00Z",
                        "status": "setting",
                        "type": "time_bound",
                        "warnings": {
                          "key": "value",
                        },
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/access_codes/get",
              "request": {
                "body": {
                  "properties": {
                    "access_code_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "code": "optional<string>",
                    "device_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "AccessCodesGetRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "access_code",
                "type": "AccessCodesGetResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list": {
              "auth": true,
              "display-name": "/access_codes/list",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {},
                  "response": {
                    "body": {
                      "access_codes": [
                        {
                          "access_code_id": "access_code_id",
                          "code": "code",
                          "common_code_key": "common_code_key",
                          "created_at": "2024-01-15T09:30:00Z",
                          "device_id": "device_id",
                          "ends_at": "2024-01-15T09:30:00Z",
                          "errors": {
                            "key": "value",
                          },
                          "is_backup": true,
                          "is_backup_access_code_available": true,
                          "is_external_modification_allowed": true,
                          "is_managed": true,
                          "is_offline_access_code": true,
                          "is_one_time_use": true,
                          "is_scheduled_on_device": true,
                          "is_waiting_for_code_assignment": true,
                          "name": "name",
                          "pulled_backup_access_code_id": "pulled_backup_access_code_id",
                          "starts_at": "2024-01-15T09:30:00Z",
                          "status": "setting",
                          "type": "time_bound",
                          "warnings": {
                            "key": "value",
                          },
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/access_codes/list",
              "request": {
                "body": {
                  "properties": {
                    "access_code_ids": "optional<list<string>>",
                    "device_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "user_identifier_key": "optional<string>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "AccessCodesListRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "access_codes",
                "type": "AccessCodesListResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "pull_backup_access_code": {
              "auth": true,
              "display-name": "/access_codes/pull_backup_access_code",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "access_code_id": "access_code_id",
                  },
                  "response": {
                    "body": {
                      "backup_access_code": {
                        "access_code_id": "access_code_id",
                        "code": "code",
                        "common_code_key": "common_code_key",
                        "created_at": "2024-01-15T09:30:00Z",
                        "device_id": "device_id",
                        "ends_at": "2024-01-15T09:30:00Z",
                        "errors": {
                          "key": "value",
                        },
                        "is_backup": true,
                        "is_backup_access_code_available": true,
                        "is_external_modification_allowed": true,
                        "is_managed": true,
                        "is_offline_access_code": true,
                        "is_one_time_use": true,
                        "is_scheduled_on_device": true,
                        "is_waiting_for_code_assignment": true,
                        "name": "name",
                        "pulled_backup_access_code_id": "pulled_backup_access_code_id",
                        "starts_at": "2024-01-15T09:30:00Z",
                        "status": "setting",
                        "type": "time_bound",
                        "warnings": {
                          "key": "value",
                        },
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/access_codes/pull_backup_access_code",
              "request": {
                "body": {
                  "properties": {
                    "access_code_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "AccessCodesPullBackupAccessCodeRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "backup_access_code",
                "type": "AccessCodesPullBackupAccessCodeResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "update": {
              "auth": true,
              "display-name": "/access_codes/update",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "access_code_id": "access_code_id",
                  },
                  "response": {
                    "body": {
                      "action_attempt": {
                        "action_attempt_id": "action_attempt_id",
                        "action_type": "LOCK_DOOR",
                        "error": "error",
                        "result": "result",
                        "status": "pending",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/access_codes/update",
              "request": {
                "body": {
                  "properties": {
                    "access_code_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "allow_external_modification": "optional<boolean>",
                    "attempt_for_offline_device": {
                      "default": true,
                      "type": "optional<boolean>",
                    },
                    "code": {
                      "type": "optional<string>",
                      "validation": {
                        "format": undefined,
                        "maxLength": 9,
                        "minLength": 4,
                        "pattern": "^\d+$",
                      },
                    },
                    "device_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "ends_at": "optional<string>",
                    "is_external_modification_allowed": "optional<boolean>",
                    "is_managed": "optional<boolean>",
                    "is_offline_access_code": "optional<boolean>",
                    "is_one_time_use": "optional<boolean>",
                    "max_time_rounding": {
                      "default": "1hour",
                      "type": "optional<AccessCodesUpdateRequestMaxTimeRounding>",
                    },
                    "name": "optional<string>",
                    "prefer_native_scheduling": "optional<boolean>",
                    "starts_at": "optional<string>",
                    "sync": {
                      "default": false,
                      "type": "optional<boolean>",
                    },
                    "type": "optional<AccessCodesUpdateRequestType>",
                    "use_backup_access_code_pool": "optional<boolean>",
                    "use_offline_access_code": "optional<boolean>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "AccessCodesUpdateRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "type": "AccessCodesUpdateResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "AccessCodesCreateMultipleRequestBehaviorWhenCodeCannotBeShared": {
            "default": "throw",
            "enum": [
              "throw",
              "create_random_code",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AccessCodesCreateMultipleRequestMaxTimeRounding": {
            "default": "1hour",
            "enum": [
              {
                "name": "OneHour",
                "value": "1hour",
              },
              {
                "name": "OneDay",
                "value": "1day",
              },
              {
                "name": "OneH",
                "value": "1h",
              },
              {
                "name": "OneD",
                "value": "1d",
              },
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AccessCodesCreateMultipleResponse": {
            "docs": undefined,
            "properties": {
              "access_codes": "list<root.AccessCode>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AccessCodesCreateRequestMaxTimeRounding": {
            "default": "1hour",
            "enum": [
              {
                "name": "OneHour",
                "value": "1hour",
              },
              {
                "name": "OneDay",
                "value": "1day",
              },
              {
                "name": "OneH",
                "value": "1h",
              },
              {
                "name": "OneD",
                "value": "1d",
              },
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AccessCodesCreateResponse": {
            "docs": undefined,
            "properties": {
              "access_code": "root.AccessCode",
              "action_attempt": "root.ActionAttempt",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AccessCodesDeleteResponse": {
            "docs": undefined,
            "properties": {
              "action_attempt": "root.ActionAttempt",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AccessCodesGenerateCodeResponse": {
            "docs": undefined,
            "properties": {
              "generated_code": "root.AccessCode",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AccessCodesGetResponse": {
            "docs": undefined,
            "properties": {
              "access_code": "root.AccessCode",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AccessCodesListResponse": {
            "docs": undefined,
            "properties": {
              "access_codes": "list<root.AccessCode>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AccessCodesPullBackupAccessCodeResponse": {
            "docs": undefined,
            "properties": {
              "backup_access_code": "root.AccessCode",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AccessCodesUpdateRequestMaxTimeRounding": {
            "default": "1hour",
            "enum": [
              {
                "name": "OneHour",
                "value": "1hour",
              },
              {
                "name": "OneDay",
                "value": "1day",
              },
              {
                "name": "OneH",
                "value": "1h",
              },
              {
                "name": "OneD",
                "value": "1d",
              },
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AccessCodesUpdateRequestType": {
            "enum": [
              "ongoing",
              "time_bound",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AccessCodesUpdateResponse": {
            "docs": undefined,
            "properties": {
              "action_attempt": "root.ActionAttempt",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "types:
  AccessCodesCreateRequestMaxTimeRounding:
    enum:
      - value: 1hour
        name: OneHour
      - value: 1day
        name: OneDay
      - value: 1h
        name: OneH
      - value: 1d
        name: OneD
    default: 1hour
    source:
      openapi: ../openapi.json
  AccessCodesCreateResponse:
    properties:
      action_attempt: root.ActionAttempt
      access_code: root.AccessCode
      ok: boolean
    source:
      openapi: ../openapi.json
  AccessCodesCreateMultipleRequestBehaviorWhenCodeCannotBeShared:
    enum:
      - throw
      - create_random_code
    default: throw
    source:
      openapi: ../openapi.json
  AccessCodesCreateMultipleRequestMaxTimeRounding:
    enum:
      - value: 1hour
        name: OneHour
      - value: 1day
        name: OneDay
      - value: 1h
        name: OneH
      - value: 1d
        name: OneD
    default: 1hour
    source:
      openapi: ../openapi.json
  AccessCodesCreateMultipleResponse:
    properties:
      access_codes: list<root.AccessCode>
      ok: boolean
    source:
      openapi: ../openapi.json
  AccessCodesDeleteResponse:
    properties:
      action_attempt: root.ActionAttempt
      ok: boolean
    source:
      openapi: ../openapi.json
  AccessCodesGenerateCodeResponse:
    properties:
      generated_code: root.AccessCode
      ok: boolean
    source:
      openapi: ../openapi.json
  AccessCodesGetResponse:
    properties:
      access_code: root.AccessCode
      ok: boolean
    source:
      openapi: ../openapi.json
  AccessCodesListResponse:
    properties:
      access_codes: list<root.AccessCode>
      ok: boolean
    source:
      openapi: ../openapi.json
  AccessCodesPullBackupAccessCodeResponse:
    properties:
      backup_access_code: root.AccessCode
      ok: boolean
    source:
      openapi: ../openapi.json
  AccessCodesUpdateRequestMaxTimeRounding:
    enum:
      - value: 1hour
        name: OneHour
      - value: 1day
        name: OneDay
      - value: 1h
        name: OneH
      - value: 1d
        name: OneD
    default: 1hour
    source:
      openapi: ../openapi.json
  AccessCodesUpdateRequestType:
    enum:
      - ongoing
      - time_bound
    source:
      openapi: ../openapi.json
  AccessCodesUpdateResponse:
    properties:
      action_attempt: root.ActionAttempt
      ok: boolean
    source:
      openapi: ../openapi.json
imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    create:
      path: /access_codes/create
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /access_codes/create
      request:
        name: AccessCodesCreateRequest
        body:
          properties:
            device_id:
              type: string
              validation:
                format: uuid
            name: optional<string>
            starts_at: optional<string>
            ends_at: optional<string>
            code:
              type: optional<string>
              validation:
                pattern: ^\d+$
                minLength: 4
                maxLength: 9
            sync:
              type: optional<boolean>
              default: false
            attempt_for_offline_device:
              type: optional<boolean>
              default: true
            common_code_key: optional<string>
            prefer_native_scheduling: optional<boolean>
            use_backup_access_code_pool: optional<boolean>
            allow_external_modification: optional<boolean>
            is_external_modification_allowed: optional<boolean>
            use_offline_access_code: optional<boolean>
            is_offline_access_code: optional<boolean>
            is_one_time_use: optional<boolean>
            max_time_rounding:
              type: optional<AccessCodesCreateRequestMaxTimeRounding>
              default: 1hour
        content-type: application/json
      response:
        docs: OK
        type: AccessCodesCreateResponse
        property: access_code
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            device_id: device_id
          response:
            body:
              action_attempt:
                action_attempt_id: action_attempt_id
                status: pending
                result: result
                error: error
                action_type: LOCK_DOOR
              access_code:
                common_code_key: common_code_key
                is_scheduled_on_device: true
                type: time_bound
                is_waiting_for_code_assignment: true
                access_code_id: access_code_id
                device_id: device_id
                name: name
                code: code
                created_at: '2024-01-15T09:30:00Z'
                errors:
                  key: value
                warnings:
                  key: value
                is_managed: true
                starts_at: '2024-01-15T09:30:00Z'
                ends_at: '2024-01-15T09:30:00Z'
                status: setting
                is_backup_access_code_available: true
                is_backup: true
                pulled_backup_access_code_id: pulled_backup_access_code_id
                is_external_modification_allowed: true
                is_one_time_use: true
                is_offline_access_code: true
              ok: true
    create_multiple:
      path: /access_codes/create_multiple
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /access_codes/create_multiple
      request:
        name: AccessCodesCreateMultipleRequest
        body:
          properties:
            device_ids: list<string>
            behavior_when_code_cannot_be_shared:
              type: >-
                optional<AccessCodesCreateMultipleRequestBehaviorWhenCodeCannotBeShared>
              default: throw
            preferred_code_length: optional<double>
            name: optional<string>
            starts_at: optional<string>
            ends_at: optional<string>
            code:
              type: optional<string>
              validation:
                pattern: ^\d+$
                minLength: 4
                maxLength: 9
            attempt_for_offline_device:
              type: optional<boolean>
              default: true
            prefer_native_scheduling: optional<boolean>
            use_backup_access_code_pool: optional<boolean>
            allow_external_modification: optional<boolean>
            is_external_modification_allowed: optional<boolean>
            use_offline_access_code: optional<boolean>
            is_offline_access_code: optional<boolean>
            is_one_time_use: optional<boolean>
            max_time_rounding:
              type: optional<AccessCodesCreateMultipleRequestMaxTimeRounding>
              default: 1hour
        content-type: application/json
      response:
        docs: OK
        type: AccessCodesCreateMultipleResponse
        property: access_codes
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            device_ids:
              - device_ids
          response:
            body:
              access_codes:
                - common_code_key: common_code_key
                  is_scheduled_on_device: true
                  type: time_bound
                  is_waiting_for_code_assignment: true
                  access_code_id: access_code_id
                  device_id: device_id
                  name: name
                  code: code
                  created_at: '2024-01-15T09:30:00Z'
                  errors:
                    key: value
                  warnings:
                    key: value
                  is_managed: true
                  starts_at: '2024-01-15T09:30:00Z'
                  ends_at: '2024-01-15T09:30:00Z'
                  status: setting
                  is_backup_access_code_available: true
                  is_backup: true
                  pulled_backup_access_code_id: pulled_backup_access_code_id
                  is_external_modification_allowed: true
                  is_one_time_use: true
                  is_offline_access_code: true
              ok: true
    delete:
      path: /access_codes/delete
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /access_codes/delete
      request:
        name: AccessCodesDeleteRequest
        body:
          properties:
            device_id:
              type: optional<string>
              validation:
                format: uuid
            access_code_id:
              type: string
              validation:
                format: uuid
            sync:
              type: optional<boolean>
              default: false
        content-type: application/json
      response:
        docs: OK
        type: AccessCodesDeleteResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            access_code_id: access_code_id
          response:
            body:
              action_attempt:
                action_attempt_id: action_attempt_id
                status: pending
                result: result
                error: error
                action_type: LOCK_DOOR
              ok: true
    generate_code:
      path: /access_codes/generate_code
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /access_codes/generate_code
      request:
        name: AccessCodesGenerateCodeRequest
        body:
          properties:
            device_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: AccessCodesGenerateCodeResponse
        property: generated_code
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            device_id: device_id
          response:
            body:
              generated_code:
                common_code_key: common_code_key
                is_scheduled_on_device: true
                type: time_bound
                is_waiting_for_code_assignment: true
                access_code_id: access_code_id
                device_id: device_id
                name: name
                code: code
                created_at: '2024-01-15T09:30:00Z'
                errors:
                  key: value
                warnings:
                  key: value
                is_managed: true
                starts_at: '2024-01-15T09:30:00Z'
                ends_at: '2024-01-15T09:30:00Z'
                status: setting
                is_backup_access_code_available: true
                is_backup: true
                pulled_backup_access_code_id: pulled_backup_access_code_id
                is_external_modification_allowed: true
                is_one_time_use: true
                is_offline_access_code: true
              ok: true
    get:
      path: /access_codes/get
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /access_codes/get
      request:
        name: AccessCodesGetRequest
        body:
          properties:
            device_id:
              type: optional<string>
              validation:
                format: uuid
            access_code_id:
              type: optional<string>
              validation:
                format: uuid
            code: optional<string>
        content-type: application/json
      response:
        docs: OK
        type: AccessCodesGetResponse
        property: access_code
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request: {}
          response:
            body:
              access_code:
                common_code_key: common_code_key
                is_scheduled_on_device: true
                type: time_bound
                is_waiting_for_code_assignment: true
                access_code_id: access_code_id
                device_id: device_id
                name: name
                code: code
                created_at: '2024-01-15T09:30:00Z'
                errors:
                  key: value
                warnings:
                  key: value
                is_managed: true
                starts_at: '2024-01-15T09:30:00Z'
                ends_at: '2024-01-15T09:30:00Z'
                status: setting
                is_backup_access_code_available: true
                is_backup: true
                pulled_backup_access_code_id: pulled_backup_access_code_id
                is_external_modification_allowed: true
                is_one_time_use: true
                is_offline_access_code: true
              ok: true
    list:
      path: /access_codes/list
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /access_codes/list
      request:
        name: AccessCodesListRequest
        body:
          properties:
            device_id:
              type: optional<string>
              validation:
                format: uuid
            access_code_ids: optional<list<string>>
            user_identifier_key: optional<string>
        content-type: application/json
      response:
        docs: OK
        type: AccessCodesListResponse
        property: access_codes
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request: {}
          response:
            body:
              access_codes:
                - common_code_key: common_code_key
                  is_scheduled_on_device: true
                  type: time_bound
                  is_waiting_for_code_assignment: true
                  access_code_id: access_code_id
                  device_id: device_id
                  name: name
                  code: code
                  created_at: '2024-01-15T09:30:00Z'
                  errors:
                    key: value
                  warnings:
                    key: value
                  is_managed: true
                  starts_at: '2024-01-15T09:30:00Z'
                  ends_at: '2024-01-15T09:30:00Z'
                  status: setting
                  is_backup_access_code_available: true
                  is_backup: true
                  pulled_backup_access_code_id: pulled_backup_access_code_id
                  is_external_modification_allowed: true
                  is_one_time_use: true
                  is_offline_access_code: true
              ok: true
    pull_backup_access_code:
      path: /access_codes/pull_backup_access_code
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /access_codes/pull_backup_access_code
      request:
        name: AccessCodesPullBackupAccessCodeRequest
        body:
          properties:
            access_code_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: AccessCodesPullBackupAccessCodeResponse
        property: backup_access_code
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            access_code_id: access_code_id
          response:
            body:
              backup_access_code:
                common_code_key: common_code_key
                is_scheduled_on_device: true
                type: time_bound
                is_waiting_for_code_assignment: true
                access_code_id: access_code_id
                device_id: device_id
                name: name
                code: code
                created_at: '2024-01-15T09:30:00Z'
                errors:
                  key: value
                warnings:
                  key: value
                is_managed: true
                starts_at: '2024-01-15T09:30:00Z'
                ends_at: '2024-01-15T09:30:00Z'
                status: setting
                is_backup_access_code_available: true
                is_backup: true
                pulled_backup_access_code_id: pulled_backup_access_code_id
                is_external_modification_allowed: true
                is_one_time_use: true
                is_offline_access_code: true
              ok: true
    update:
      path: /access_codes/update
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /access_codes/update
      request:
        name: AccessCodesUpdateRequest
        body:
          properties:
            name: optional<string>
            starts_at: optional<string>
            ends_at: optional<string>
            code:
              type: optional<string>
              validation:
                pattern: ^\d+$
                minLength: 4
                maxLength: 9
            sync:
              type: optional<boolean>
              default: false
            attempt_for_offline_device:
              type: optional<boolean>
              default: true
            prefer_native_scheduling: optional<boolean>
            use_backup_access_code_pool: optional<boolean>
            allow_external_modification: optional<boolean>
            is_external_modification_allowed: optional<boolean>
            use_offline_access_code: optional<boolean>
            is_offline_access_code: optional<boolean>
            is_one_time_use: optional<boolean>
            max_time_rounding:
              type: optional<AccessCodesUpdateRequestMaxTimeRounding>
              default: 1hour
            access_code_id:
              type: string
              validation:
                format: uuid
            device_id:
              type: optional<string>
              validation:
                format: uuid
            type: optional<AccessCodesUpdateRequestType>
            is_managed: optional<boolean>
        content-type: application/json
      response:
        docs: OK
        type: AccessCodesUpdateResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            access_code_id: access_code_id
          response:
            body:
              action_attempt:
                action_attempt_id: action_attempt_id
                status: pending
                result: result
                error: error
                action_type: LOCK_DOOR
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "accessCodes/simulate.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "../__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "create_unmanaged_access_code": {
              "auth": true,
              "display-name": "/access_codes/simulate/create_unmanaged_access_code",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "code": "code",
                    "device_id": "device_id",
                    "name": "name",
                  },
                  "response": {
                    "body": {
                      "access_code": {
                        "access_code_id": "access_code_id",
                        "code": "code",
                        "created_at": "2024-01-15T09:30:00Z",
                        "device_id": "device_id",
                        "ends_at": "2024-01-15T09:30:00Z",
                        "errors": {
                          "key": "value",
                        },
                        "is_managed": true,
                        "name": "name",
                        "starts_at": "2024-01-15T09:30:00Z",
                        "status": "set",
                        "type": "time_bound",
                        "warnings": {
                          "key": "value",
                        },
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/access_codes/simulate/create_unmanaged_access_code",
              "request": {
                "body": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "validation": {
                        "format": undefined,
                        "maxLength": 8,
                        "minLength": 4,
                        "pattern": "^\d+$",
                      },
                    },
                    "device_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "name": "string",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "SimulateCreateUnmanagedAccessCodeRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "access_code",
                "type": "SimulateCreateUnmanagedAccessCodeResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "SimulateCreateUnmanagedAccessCodeResponse": {
            "docs": undefined,
            "properties": {
              "access_code": "root.UnmanagedAccessCode",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "imports:
  root: ../__package__.yml
types:
  SimulateCreateUnmanagedAccessCodeResponse:
    properties:
      access_code: root.UnmanagedAccessCode
      ok: boolean
    source:
      openapi: ../openapi.json
service:
  auth: false
  base-path: ''
  endpoints:
    create_unmanaged_access_code:
      path: /access_codes/simulate/create_unmanaged_access_code
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /access_codes/simulate/create_unmanaged_access_code
      request:
        name: SimulateCreateUnmanagedAccessCodeRequest
        body:
          properties:
            device_id:
              type: string
              validation:
                format: uuid
            name: string
            code:
              type: string
              validation:
                pattern: ^\d+$
                minLength: 4
                maxLength: 8
        content-type: application/json
      response:
        docs: OK
        type: SimulateCreateUnmanagedAccessCodeResponse
        property: access_code
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            device_id: device_id
            name: name
            code: code
          response:
            body:
              access_code:
                type: time_bound
                access_code_id: access_code_id
                device_id: device_id
                name: name
                code: code
                created_at: '2024-01-15T09:30:00Z'
                errors:
                  key: value
                warnings:
                  key: value
                is_managed: true
                starts_at: '2024-01-15T09:30:00Z'
                ends_at: '2024-01-15T09:30:00Z'
                status: set
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "accessCodes/unmanaged.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "../__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "convert_to_managed": {
              "auth": true,
              "display-name": "/access_codes/unmanaged/convert_to_managed",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "access_code_id": "access_code_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/access_codes/unmanaged/convert_to_managed",
              "request": {
                "body": {
                  "properties": {
                    "access_code_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "allow_external_modification": "optional<boolean>",
                    "force": "optional<boolean>",
                    "is_external_modification_allowed": "optional<boolean>",
                    "sync": {
                      "default": false,
                      "type": "optional<boolean>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UnmanagedConvertToManagedRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "type": "UnmanagedConvertToManagedResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "delete": {
              "auth": true,
              "display-name": "/access_codes/unmanaged/delete",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "access_code_id": "access_code_id",
                  },
                  "response": {
                    "body": {
                      "action_attempt": {
                        "action_attempt_id": "action_attempt_id",
                        "action_type": "LOCK_DOOR",
                        "error": "error",
                        "result": "result",
                        "status": "pending",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/access_codes/unmanaged/delete",
              "request": {
                "body": {
                  "properties": {
                    "access_code_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "sync": {
                      "default": false,
                      "type": "optional<boolean>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UnmanagedDeleteRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "type": "UnmanagedDeleteResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get": {
              "auth": true,
              "display-name": "/access_codes/unmanaged/get",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {},
                  "response": {
                    "body": {
                      "access_code": {
                        "access_code_id": "access_code_id",
                        "code": "code",
                        "created_at": "2024-01-15T09:30:00Z",
                        "device_id": "device_id",
                        "ends_at": "2024-01-15T09:30:00Z",
                        "errors": {
                          "key": "value",
                        },
                        "is_managed": true,
                        "name": "name",
                        "starts_at": "2024-01-15T09:30:00Z",
                        "status": "set",
                        "type": "time_bound",
                        "warnings": {
                          "key": "value",
                        },
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/access_codes/unmanaged/get",
              "request": {
                "body": {
                  "properties": {
                    "access_code_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "code": "optional<string>",
                    "device_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UnmanagedGetRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "access_code",
                "type": "UnmanagedGetResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list": {
              "auth": true,
              "display-name": "/access_codes/unmanaged/list",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "device_id": "device_id",
                  },
                  "response": {
                    "body": {
                      "access_codes": [
                        {
                          "access_code_id": "access_code_id",
                          "code": "code",
                          "created_at": "2024-01-15T09:30:00Z",
                          "device_id": "device_id",
                          "ends_at": "2024-01-15T09:30:00Z",
                          "errors": {
                            "key": "value",
                          },
                          "is_managed": true,
                          "name": "name",
                          "starts_at": "2024-01-15T09:30:00Z",
                          "status": "set",
                          "type": "time_bound",
                          "warnings": {
                            "key": "value",
                          },
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/access_codes/unmanaged/list",
              "request": {
                "body": {
                  "properties": {
                    "device_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "user_identifier_key": "optional<string>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UnmanagedListRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "access_codes",
                "type": "UnmanagedListResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "update": {
              "auth": true,
              "display-name": "/access_codes/unmanaged/update",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "access_code_id": "access_code_id",
                    "is_managed": true,
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/access_codes/unmanaged/update",
              "request": {
                "body": {
                  "properties": {
                    "access_code_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "allow_external_modification": "optional<boolean>",
                    "force": "optional<boolean>",
                    "is_external_modification_allowed": "optional<boolean>",
                    "is_managed": "boolean",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UnmanagedUpdateRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "type": "UnmanagedUpdateResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "UnmanagedConvertToManagedResponse": {
            "docs": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UnmanagedDeleteResponse": {
            "docs": undefined,
            "properties": {
              "action_attempt": "root.ActionAttempt",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UnmanagedGetResponse": {
            "docs": undefined,
            "properties": {
              "access_code": "root.UnmanagedAccessCode",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UnmanagedListResponse": {
            "docs": undefined,
            "properties": {
              "access_codes": "list<root.UnmanagedAccessCode>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UnmanagedUpdateResponse": {
            "docs": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "types:
  UnmanagedConvertToManagedResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
  UnmanagedDeleteResponse:
    properties:
      action_attempt: root.ActionAttempt
      ok: boolean
    source:
      openapi: ../openapi.json
  UnmanagedGetResponse:
    properties:
      access_code: root.UnmanagedAccessCode
      ok: boolean
    source:
      openapi: ../openapi.json
  UnmanagedListResponse:
    properties:
      access_codes: list<root.UnmanagedAccessCode>
      ok: boolean
    source:
      openapi: ../openapi.json
  UnmanagedUpdateResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
imports:
  root: ../__package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    convert_to_managed:
      path: /access_codes/unmanaged/convert_to_managed
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /access_codes/unmanaged/convert_to_managed
      request:
        name: UnmanagedConvertToManagedRequest
        body:
          properties:
            access_code_id:
              type: string
              validation:
                format: uuid
            is_external_modification_allowed: optional<boolean>
            allow_external_modification: optional<boolean>
            force: optional<boolean>
            sync:
              type: optional<boolean>
              default: false
        content-type: application/json
      response:
        docs: OK
        type: UnmanagedConvertToManagedResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            access_code_id: access_code_id
          response:
            body:
              ok: true
    delete:
      path: /access_codes/unmanaged/delete
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /access_codes/unmanaged/delete
      request:
        name: UnmanagedDeleteRequest
        body:
          properties:
            access_code_id:
              type: string
              validation:
                format: uuid
            sync:
              type: optional<boolean>
              default: false
        content-type: application/json
      response:
        docs: OK
        type: UnmanagedDeleteResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            access_code_id: access_code_id
          response:
            body:
              action_attempt:
                action_attempt_id: action_attempt_id
                status: pending
                result: result
                error: error
                action_type: LOCK_DOOR
              ok: true
    get:
      path: /access_codes/unmanaged/get
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /access_codes/unmanaged/get
      request:
        name: UnmanagedGetRequest
        body:
          properties:
            device_id:
              type: optional<string>
              validation:
                format: uuid
            access_code_id:
              type: optional<string>
              validation:
                format: uuid
            code: optional<string>
        content-type: application/json
      response:
        docs: OK
        type: UnmanagedGetResponse
        property: access_code
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request: {}
          response:
            body:
              access_code:
                type: time_bound
                access_code_id: access_code_id
                device_id: device_id
                name: name
                code: code
                created_at: '2024-01-15T09:30:00Z'
                errors:
                  key: value
                warnings:
                  key: value
                is_managed: true
                starts_at: '2024-01-15T09:30:00Z'
                ends_at: '2024-01-15T09:30:00Z'
                status: set
              ok: true
    list:
      path: /access_codes/unmanaged/list
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /access_codes/unmanaged/list
      request:
        name: UnmanagedListRequest
        body:
          properties:
            device_id:
              type: string
              validation:
                format: uuid
            user_identifier_key: optional<string>
        content-type: application/json
      response:
        docs: OK
        type: UnmanagedListResponse
        property: access_codes
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            device_id: device_id
          response:
            body:
              access_codes:
                - type: time_bound
                  access_code_id: access_code_id
                  device_id: device_id
                  name: name
                  code: code
                  created_at: '2024-01-15T09:30:00Z'
                  errors:
                    key: value
                  warnings:
                    key: value
                  is_managed: true
                  starts_at: '2024-01-15T09:30:00Z'
                  ends_at: '2024-01-15T09:30:00Z'
                  status: set
              ok: true
    update:
      path: /access_codes/unmanaged/update
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /access_codes/unmanaged/update
      request:
        name: UnmanagedUpdateRequest
        body:
          properties:
            access_code_id:
              type: string
              validation:
                format: uuid
            is_managed: boolean
            allow_external_modification: optional<boolean>
            is_external_modification_allowed: optional<boolean>
            force: optional<boolean>
        content-type: application/json
      response:
        docs: OK
        type: UnmanagedUpdateResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            access_code_id: access_code_id
            is_managed: true
          response:
            body:
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "acs/accessGroups.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "../__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "add_user": {
              "auth": true,
              "display-name": "/acs/access_groups/add_user",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "acs_access_group_id": "acs_access_group_id",
                    "acs_user_id": "acs_user_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/access_groups/add_user",
              "request": {
                "body": {
                  "properties": {
                    "acs_access_group_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "acs_user_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "AccessGroupsAddUserRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "type": "AccessGroupsAddUserResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get": {
              "auth": true,
              "display-name": "/acs/access_groups/get",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "acs_access_group_id": "acs_access_group_id",
                  },
                  "response": {
                    "body": {
                      "acs_access_group": {
                        "access_group_type": "pti_unit",
                        "access_group_type_display_name": "access_group_type_display_name",
                        "acs_access_group_id": "acs_access_group_id",
                        "acs_system_id": "acs_system_id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "display_name": "display_name",
                        "external_type": "pti_unit",
                        "external_type_display_name": "external_type_display_name",
                        "name": "name",
                        "workspace_id": "workspace_id",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/access_groups/get",
              "request": {
                "body": {
                  "properties": {
                    "acs_access_group_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "AccessGroupsGetRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "acs_access_group",
                "type": "AccessGroupsGetResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list": {
              "auth": true,
              "display-name": "/acs/access_groups/list",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {},
                  "response": {
                    "body": {
                      "acs_access_groups": [
                        {
                          "access_group_type": "pti_unit",
                          "access_group_type_display_name": "access_group_type_display_name",
                          "acs_access_group_id": "acs_access_group_id",
                          "acs_system_id": "acs_system_id",
                          "created_at": "2024-01-15T09:30:00Z",
                          "display_name": "display_name",
                          "external_type": "pti_unit",
                          "external_type_display_name": "external_type_display_name",
                          "name": "name",
                          "workspace_id": "workspace_id",
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/access_groups/list",
              "request": {
                "body": {
                  "properties": {
                    "acs_system_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "acs_user_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "AccessGroupsListRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "acs_access_groups",
                "type": "AccessGroupsListResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list_users": {
              "auth": true,
              "display-name": "/acs/access_groups/list_users",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "acs_access_group_id": "acs_access_group_id",
                  },
                  "response": {
                    "body": {
                      "acs_users": [
                        {
                          "access_schedule": {
                            "ends_at": "2024-01-15T09:30:00Z",
                            "starts_at": "2024-01-15T09:30:00Z",
                          },
                          "acs_system_id": "acs_system_id",
                          "acs_user_id": "acs_user_id",
                          "created_at": "2024-01-15T09:30:00Z",
                          "display_name": "display_name",
                          "email": "email",
                          "email_address": "email_address",
                          "external_type": "pti_user",
                          "external_type_display_name": "external_type_display_name",
                          "full_name": "full_name",
                          "hid_acs_system_id": "hid_acs_system_id",
                          "is_suspended": true,
                          "phone_number": "phone_number",
                          "user_identity_email_address": "user_identity_email_address",
                          "user_identity_full_name": "user_identity_full_name",
                          "user_identity_id": "user_identity_id",
                          "user_identity_phone_number": "user_identity_phone_number",
                          "workspace_id": "workspace_id",
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/access_groups/list_users",
              "request": {
                "body": {
                  "properties": {
                    "acs_access_group_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "AccessGroupsListUsersRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "acs_users",
                "type": "AccessGroupsListUsersResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "remove_user": {
              "auth": true,
              "display-name": "/acs/access_groups/remove_user",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "acs_access_group_id": "acs_access_group_id",
                    "acs_user_id": "acs_user_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/access_groups/remove_user",
              "request": {
                "body": {
                  "properties": {
                    "acs_access_group_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "acs_user_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "AccessGroupsRemoveUserRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "type": "AccessGroupsRemoveUserResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "AccessGroupsAddUserResponse": {
            "docs": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AccessGroupsGetResponse": {
            "docs": undefined,
            "properties": {
              "acs_access_group": "root.AcsAccessGroup",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AccessGroupsListResponse": {
            "docs": undefined,
            "properties": {
              "acs_access_groups": "list<root.AcsAccessGroup>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AccessGroupsListUsersResponse": {
            "docs": undefined,
            "properties": {
              "acs_users": "list<root.AcsUser>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "AccessGroupsRemoveUserResponse": {
            "docs": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "types:
  AccessGroupsAddUserResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
  AccessGroupsGetResponse:
    properties:
      acs_access_group: root.AcsAccessGroup
      ok: boolean
    source:
      openapi: ../openapi.json
  AccessGroupsListResponse:
    properties:
      acs_access_groups: list<root.AcsAccessGroup>
      ok: boolean
    source:
      openapi: ../openapi.json
  AccessGroupsListUsersResponse:
    properties:
      acs_users: list<root.AcsUser>
      ok: boolean
    source:
      openapi: ../openapi.json
  AccessGroupsRemoveUserResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
imports:
  root: ../__package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    add_user:
      path: /acs/access_groups/add_user
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /acs/access_groups/add_user
      request:
        name: AccessGroupsAddUserRequest
        body:
          properties:
            acs_access_group_id:
              type: string
              validation:
                format: uuid
            acs_user_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: AccessGroupsAddUserResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            acs_access_group_id: acs_access_group_id
            acs_user_id: acs_user_id
          response:
            body:
              ok: true
    get:
      path: /acs/access_groups/get
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /acs/access_groups/get
      request:
        name: AccessGroupsGetRequest
        body:
          properties:
            acs_access_group_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: AccessGroupsGetResponse
        property: acs_access_group
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            acs_access_group_id: acs_access_group_id
          response:
            body:
              acs_access_group:
                acs_access_group_id: acs_access_group_id
                acs_system_id: acs_system_id
                workspace_id: workspace_id
                name: name
                access_group_type: pti_unit
                access_group_type_display_name: access_group_type_display_name
                display_name: display_name
                external_type: pti_unit
                external_type_display_name: external_type_display_name
                created_at: '2024-01-15T09:30:00Z'
              ok: true
    list:
      path: /acs/access_groups/list
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /acs/access_groups/list
      request:
        name: AccessGroupsListRequest
        body:
          properties:
            acs_system_id:
              type: optional<string>
              validation:
                format: uuid
            acs_user_id:
              type: optional<string>
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: AccessGroupsListResponse
        property: acs_access_groups
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request: {}
          response:
            body:
              acs_access_groups:
                - acs_access_group_id: acs_access_group_id
                  acs_system_id: acs_system_id
                  workspace_id: workspace_id
                  name: name
                  access_group_type: pti_unit
                  access_group_type_display_name: access_group_type_display_name
                  display_name: display_name
                  external_type: pti_unit
                  external_type_display_name: external_type_display_name
                  created_at: '2024-01-15T09:30:00Z'
              ok: true
    list_users:
      path: /acs/access_groups/list_users
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /acs/access_groups/list_users
      request:
        name: AccessGroupsListUsersRequest
        body:
          properties:
            acs_access_group_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: AccessGroupsListUsersResponse
        property: acs_users
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            acs_access_group_id: acs_access_group_id
          response:
            body:
              acs_users:
                - acs_user_id: acs_user_id
                  acs_system_id: acs_system_id
                  hid_acs_system_id: hid_acs_system_id
                  workspace_id: workspace_id
                  created_at: '2024-01-15T09:30:00Z'
                  display_name: display_name
                  external_type: pti_user
                  external_type_display_name: external_type_display_name
                  is_suspended: true
                  access_schedule:
                    starts_at: '2024-01-15T09:30:00Z'
                    ends_at: '2024-01-15T09:30:00Z'
                  user_identity_id: user_identity_id
                  user_identity_full_name: user_identity_full_name
                  user_identity_email_address: user_identity_email_address
                  user_identity_phone_number: user_identity_phone_number
                  full_name: full_name
                  email: email
                  email_address: email_address
                  phone_number: phone_number
              ok: true
    remove_user:
      path: /acs/access_groups/remove_user
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /acs/access_groups/remove_user
      request:
        name: AccessGroupsRemoveUserRequest
        body:
          properties:
            acs_access_group_id:
              type: string
              validation:
                format: uuid
            acs_user_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: AccessGroupsRemoveUserResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            acs_access_group_id: acs_access_group_id
            acs_user_id: acs_user_id
          response:
            body:
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "acs/credentialPools.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "../__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "list": {
              "auth": true,
              "display-name": "/acs/credential_pools/list",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "acs_system_id": "acs_system_id",
                  },
                  "response": {
                    "body": {
                      "acs_credential_pools": [
                        {
                          "acs_credential_pool_id": "acs_credential_pool_id",
                          "acs_system_id": "acs_system_id",
                          "created_at": "2024-01-15T09:30:00Z",
                          "display_name": "display_name",
                          "external_type": "hid_part_number",
                          "external_type_display_name": "external_type_display_name",
                          "workspace_id": "workspace_id",
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/credential_pools/list",
              "request": {
                "body": {
                  "properties": {
                    "acs_system_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "CredentialPoolsListRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "acs_credential_pools",
                "type": "CredentialPoolsListResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "CredentialPoolsListResponse": {
            "docs": undefined,
            "properties": {
              "acs_credential_pools": "list<root.AcsCredentialPool>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "imports:
  root: ../__package__.yml
types:
  CredentialPoolsListResponse:
    properties:
      acs_credential_pools: list<root.AcsCredentialPool>
      ok: boolean
    source:
      openapi: ../openapi.json
service:
  auth: false
  base-path: ''
  endpoints:
    list:
      path: /acs/credential_pools/list
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /acs/credential_pools/list
      request:
        name: CredentialPoolsListRequest
        body:
          properties:
            acs_system_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: CredentialPoolsListResponse
        property: acs_credential_pools
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            acs_system_id: acs_system_id
          response:
            body:
              acs_credential_pools:
                - acs_credential_pool_id: acs_credential_pool_id
                  acs_system_id: acs_system_id
                  display_name: display_name
                  external_type: hid_part_number
                  external_type_display_name: external_type_display_name
                  created_at: '2024-01-15T09:30:00Z'
                  workspace_id: workspace_id
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "acs/credentialProvisioningAutomations.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "../__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "launch": {
              "auth": true,
              "display-name": "/acs/credential_provisioning_automations/launch",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "credential_manager_acs_system_id": "credential_manager_acs_system_id",
                    "user_identity_id": "user_identity_id",
                  },
                  "response": {
                    "body": {
                      "acs_credential_provisioning_automation": {
                        "acs_credential_provisioning_automation_id": "acs_credential_provisioning_automation_id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "credential_manager_acs_system_id": "credential_manager_acs_system_id",
                        "user_identity_id": "user_identity_id",
                        "workspace_id": "workspace_id",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/credential_provisioning_automations/launch",
              "request": {
                "body": {
                  "properties": {
                    "acs_credential_pool_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "create_credential_manager_user": "optional<boolean>",
                    "credential_manager_acs_system_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "credential_manager_acs_user_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "user_identity_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "CredentialProvisioningAutomationsLaunchRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "acs_credential_provisioning_automation",
                "type": "CredentialProvisioningAutomationsLaunchResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "CredentialProvisioningAutomationsLaunchResponse": {
            "docs": undefined,
            "properties": {
              "acs_credential_provisioning_automation": "root.AcsCredentialProvisioningAutomation",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "imports:
  root: ../__package__.yml
types:
  CredentialProvisioningAutomationsLaunchResponse:
    properties:
      acs_credential_provisioning_automation: root.AcsCredentialProvisioningAutomation
      ok: boolean
    source:
      openapi: ../openapi.json
service:
  auth: false
  base-path: ''
  endpoints:
    launch:
      path: /acs/credential_provisioning_automations/launch
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /acs/credential_provisioning_automations/launch
      request:
        name: CredentialProvisioningAutomationsLaunchRequest
        body:
          properties:
            user_identity_id:
              type: string
              validation:
                format: uuid
            credential_manager_acs_system_id:
              type: string
              validation:
                format: uuid
            acs_credential_pool_id:
              type: optional<string>
              validation:
                format: uuid
            create_credential_manager_user: optional<boolean>
            credential_manager_acs_user_id:
              type: optional<string>
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: CredentialProvisioningAutomationsLaunchResponse
        property: acs_credential_provisioning_automation
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            user_identity_id: user_identity_id
            credential_manager_acs_system_id: credential_manager_acs_system_id
          response:
            body:
              acs_credential_provisioning_automation:
                acs_credential_provisioning_automation_id: acs_credential_provisioning_automation_id
                credential_manager_acs_system_id: credential_manager_acs_system_id
                user_identity_id: user_identity_id
                created_at: '2024-01-15T09:30:00Z'
                workspace_id: workspace_id
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "acs/credentials.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "../__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "assign": {
              "auth": true,
              "display-name": "/acs/credentials/assign",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "acs_credential_id": "acs_credential_id",
                    "acs_user_id": "acs_user_id",
                  },
                  "response": {
                    "body": {
                      "acs_credential": {
                        "access_method": "code",
                        "acs_credential_id": "acs_credential_id",
                        "acs_credential_pool_id": "acs_credential_pool_id",
                        "acs_system_id": "acs_system_id",
                        "acs_user_id": "acs_user_id",
                        "code": "code",
                        "created_at": "2024-01-15T09:30:00Z",
                        "display_name": "display_name",
                        "ends_at": "ends_at",
                        "errors": [
                          {
                            "error_code": "error_code",
                            "message": "message",
                          },
                        ],
                        "external_type": "pti_card",
                        "external_type_display_name": "external_type_display_name",
                        "is_latest_desired_state_synced_with_provider": true,
                        "is_multi_phone_sync_credential": true,
                        "latest_desired_state_synced_with_provider_at": "2024-01-15T09:30:00Z",
                        "parent_acs_credential_id": "parent_acs_credential_id",
                        "starts_at": "starts_at",
                        "visionline_metadata": {
                          "card_function_type": "guest",
                          "common_acs_entrance_ids": [
                            "common_acs_entrance_ids",
                          ],
                          "guest_acs_entrance_ids": [
                            "guest_acs_entrance_ids",
                          ],
                          "joiner_acs_credential_ids": [
                            "joiner_acs_credential_ids",
                          ],
                        },
                        "warnings": [
                          {
                            "message": "message",
                            "warning_code": "warning_code",
                          },
                        ],
                        "workspace_id": "workspace_id",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/credentials/assign",
              "request": {
                "body": {
                  "properties": {
                    "acs_credential_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "acs_user_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "CredentialsAssignRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "type": "CredentialsAssignResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "create": {
              "auth": true,
              "display-name": "/acs/credentials/create",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "access_method": "code",
                    "acs_user_id": "acs_user_id",
                  },
                  "response": {
                    "body": {
                      "acs_credential": {
                        "access_method": "code",
                        "acs_credential_id": "acs_credential_id",
                        "acs_credential_pool_id": "acs_credential_pool_id",
                        "acs_system_id": "acs_system_id",
                        "acs_user_id": "acs_user_id",
                        "code": "code",
                        "created_at": "2024-01-15T09:30:00Z",
                        "display_name": "display_name",
                        "ends_at": "ends_at",
                        "errors": [
                          {
                            "error_code": "error_code",
                            "message": "message",
                          },
                        ],
                        "external_type": "pti_card",
                        "external_type_display_name": "external_type_display_name",
                        "is_latest_desired_state_synced_with_provider": true,
                        "is_multi_phone_sync_credential": true,
                        "latest_desired_state_synced_with_provider_at": "2024-01-15T09:30:00Z",
                        "parent_acs_credential_id": "parent_acs_credential_id",
                        "starts_at": "starts_at",
                        "visionline_metadata": {
                          "card_function_type": "guest",
                          "common_acs_entrance_ids": [
                            "common_acs_entrance_ids",
                          ],
                          "guest_acs_entrance_ids": [
                            "guest_acs_entrance_ids",
                          ],
                          "joiner_acs_credential_ids": [
                            "joiner_acs_credential_ids",
                          ],
                        },
                        "warnings": [
                          {
                            "message": "message",
                            "warning_code": "warning_code",
                          },
                        ],
                        "workspace_id": "workspace_id",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/credentials/create",
              "request": {
                "body": {
                  "properties": {
                    "access_method": "CredentialsCreateRequestAccessMethod",
                    "acs_user_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "allowed_acs_entrance_ids": "optional<list<string>>",
                    "code": {
                      "type": "optional<string>",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": "^\d+$",
                      },
                    },
                    "credential_manager_acs_system_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "ends_at": "optional<datetime>",
                    "is_multi_phone_sync_credential": {
                      "default": false,
                      "type": "optional<boolean>",
                    },
                    "starts_at": "optional<datetime>",
                    "visionline_metadata": "optional<CredentialsCreateRequestVisionlineMetadata>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "CredentialsCreateRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "acs_credential",
                "type": "CredentialsCreateResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "delete": {
              "auth": true,
              "display-name": "/acs/credentials/delete",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "acs_credential_id": "acs_credential_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/credentials/delete",
              "request": {
                "body": {
                  "properties": {
                    "acs_credential_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "CredentialsDeleteRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "type": "CredentialsDeleteResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get": {
              "auth": true,
              "display-name": "/acs/credentials/get",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "acs_credential_id": "acs_credential_id",
                  },
                  "response": {
                    "body": {
                      "acs_credential": {
                        "access_method": "code",
                        "acs_credential_id": "acs_credential_id",
                        "acs_credential_pool_id": "acs_credential_pool_id",
                        "acs_system_id": "acs_system_id",
                        "acs_user_id": "acs_user_id",
                        "code": "code",
                        "created_at": "2024-01-15T09:30:00Z",
                        "display_name": "display_name",
                        "ends_at": "ends_at",
                        "errors": [
                          {
                            "error_code": "error_code",
                            "message": "message",
                          },
                        ],
                        "external_type": "pti_card",
                        "external_type_display_name": "external_type_display_name",
                        "is_latest_desired_state_synced_with_provider": true,
                        "is_multi_phone_sync_credential": true,
                        "latest_desired_state_synced_with_provider_at": "2024-01-15T09:30:00Z",
                        "parent_acs_credential_id": "parent_acs_credential_id",
                        "starts_at": "starts_at",
                        "visionline_metadata": {
                          "card_function_type": "guest",
                          "common_acs_entrance_ids": [
                            "common_acs_entrance_ids",
                          ],
                          "guest_acs_entrance_ids": [
                            "guest_acs_entrance_ids",
                          ],
                          "joiner_acs_credential_ids": [
                            "joiner_acs_credential_ids",
                          ],
                        },
                        "warnings": [
                          {
                            "message": "message",
                            "warning_code": "warning_code",
                          },
                        ],
                        "workspace_id": "workspace_id",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/credentials/get",
              "request": {
                "body": {
                  "properties": {
                    "acs_credential_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "CredentialsGetRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "acs_credential",
                "type": "CredentialsGetResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list": {
              "auth": true,
              "display-name": "/acs/credentials/list",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {},
                  "response": {
                    "body": {
                      "acs_credentials": [
                        {
                          "access_method": "code",
                          "acs_credential_id": "acs_credential_id",
                          "acs_credential_pool_id": "acs_credential_pool_id",
                          "acs_system_id": "acs_system_id",
                          "acs_user_id": "acs_user_id",
                          "code": "code",
                          "created_at": "2024-01-15T09:30:00Z",
                          "display_name": "display_name",
                          "ends_at": "ends_at",
                          "errors": [
                            {
                              "error_code": "error_code",
                              "message": "message",
                            },
                          ],
                          "external_type": "pti_card",
                          "external_type_display_name": "external_type_display_name",
                          "is_latest_desired_state_synced_with_provider": true,
                          "is_multi_phone_sync_credential": true,
                          "latest_desired_state_synced_with_provider_at": "2024-01-15T09:30:00Z",
                          "parent_acs_credential_id": "parent_acs_credential_id",
                          "starts_at": "starts_at",
                          "visionline_metadata": {
                            "card_function_type": "guest",
                          },
                          "warnings": [
                            {
                              "message": "message",
                              "warning_code": "warning_code",
                            },
                          ],
                          "workspace_id": "workspace_id",
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/credentials/list",
              "request": {
                "body": {
                  "properties": {
                    "is_multi_phone_sync_credential": "optional<boolean>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "CredentialsListRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "acs_credentials",
                "type": "CredentialsListResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list_accessible_entrances": {
              "auth": true,
              "display-name": "/acs/credentials/list_accessible_entrances",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "acs_credential_id": "acs_credential_id",
                  },
                  "response": {
                    "body": {
                      "acs_entrances": [
                        {
                          "acs_entrance_id": "acs_entrance_id",
                          "acs_system_id": "acs_system_id",
                          "created_at": "2024-01-15T09:30:00Z",
                          "display_name": "display_name",
                          "errors": [
                            {
                              "error_code": "error_code",
                              "message": "message",
                            },
                          ],
                          "latch_metadata": {
                            "accessibility_type": "accessibility_type",
                            "door_name": "door_name",
                            "door_type": "door_type",
                            "is_connected": true,
                          },
                          "visionline_metadata": {
                            "door_category": "entrance",
                            "door_name": "door_name",
                          },
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/credentials/list_accessible_entrances",
              "request": {
                "body": {
                  "properties": {
                    "acs_credential_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "CredentialsListAccessibleEntrancesRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "acs_entrances",
                "type": "CredentialsListAccessibleEntrancesResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "unassign": {
              "auth": true,
              "display-name": "/acs/credentials/unassign",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "acs_credential_id": "acs_credential_id",
                    "acs_user_id": "acs_user_id",
                  },
                  "response": {
                    "body": {
                      "acs_credential": {
                        "access_method": "code",
                        "acs_credential_id": "acs_credential_id",
                        "acs_credential_pool_id": "acs_credential_pool_id",
                        "acs_system_id": "acs_system_id",
                        "acs_user_id": "acs_user_id",
                        "code": "code",
                        "created_at": "2024-01-15T09:30:00Z",
                        "display_name": "display_name",
                        "ends_at": "ends_at",
                        "errors": [
                          {
                            "error_code": "error_code",
                            "message": "message",
                          },
                        ],
                        "external_type": "pti_card",
                        "external_type_display_name": "external_type_display_name",
                        "is_latest_desired_state_synced_with_provider": true,
                        "is_multi_phone_sync_credential": true,
                        "latest_desired_state_synced_with_provider_at": "2024-01-15T09:30:00Z",
                        "parent_acs_credential_id": "parent_acs_credential_id",
                        "starts_at": "starts_at",
                        "visionline_metadata": {
                          "card_function_type": "guest",
                          "common_acs_entrance_ids": [
                            "common_acs_entrance_ids",
                          ],
                          "guest_acs_entrance_ids": [
                            "guest_acs_entrance_ids",
                          ],
                          "joiner_acs_credential_ids": [
                            "joiner_acs_credential_ids",
                          ],
                        },
                        "warnings": [
                          {
                            "message": "message",
                            "warning_code": "warning_code",
                          },
                        ],
                        "workspace_id": "workspace_id",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/credentials/unassign",
              "request": {
                "body": {
                  "properties": {
                    "acs_credential_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "acs_user_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "CredentialsUnassignRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "type": "CredentialsUnassignResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "update": {
              "auth": true,
              "display-name": "/acs/credentials/update",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "acs_credential_id": "acs_credential_id",
                  },
                  "response": {
                    "body": {
                      "acs_credential": {
                        "access_method": "code",
                        "acs_credential_id": "acs_credential_id",
                        "acs_credential_pool_id": "acs_credential_pool_id",
                        "acs_system_id": "acs_system_id",
                        "acs_user_id": "acs_user_id",
                        "code": "code",
                        "created_at": "2024-01-15T09:30:00Z",
                        "display_name": "display_name",
                        "ends_at": "ends_at",
                        "errors": [
                          {
                            "error_code": "error_code",
                            "message": "message",
                          },
                        ],
                        "external_type": "pti_card",
                        "external_type_display_name": "external_type_display_name",
                        "is_latest_desired_state_synced_with_provider": true,
                        "is_multi_phone_sync_credential": true,
                        "latest_desired_state_synced_with_provider_at": "2024-01-15T09:30:00Z",
                        "parent_acs_credential_id": "parent_acs_credential_id",
                        "starts_at": "starts_at",
                        "visionline_metadata": {
                          "card_function_type": "guest",
                          "common_acs_entrance_ids": [
                            "common_acs_entrance_ids",
                          ],
                          "guest_acs_entrance_ids": [
                            "guest_acs_entrance_ids",
                          ],
                          "joiner_acs_credential_ids": [
                            "joiner_acs_credential_ids",
                          ],
                        },
                        "warnings": [
                          {
                            "message": "message",
                            "warning_code": "warning_code",
                          },
                        ],
                        "workspace_id": "workspace_id",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/credentials/update",
              "request": {
                "body": {
                  "properties": {
                    "acs_credential_id": "string",
                    "code": {
                      "type": "optional<string>",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": "^\d+$",
                      },
                    },
                    "ends_at": "optional<datetime>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "CredentialsUpdateRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "type": "CredentialsUpdateResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "CredentialsAssignResponse": {
            "docs": undefined,
            "properties": {
              "acs_credential": "root.AcsCredential",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "CredentialsCreateRequestAccessMethod": {
            "enum": [
              "code",
              "card",
              "mobile_key",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "CredentialsCreateRequestVisionlineMetadata": {
            "docs": undefined,
            "properties": {
              "assa_abloy_credential_service_mobile_endpoint_id": {
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "card_format": "optional<CredentialsCreateRequestVisionlineMetadataCardFormat>",
              "card_function_type": {
                "default": "guest",
                "type": "optional<CredentialsCreateRequestVisionlineMetadataCardFunctionType>",
              },
              "is_override_key": {
                "docs": "
          ---
          deprecated: use override.
          ---
        ",
                "type": "optional<boolean>",
              },
              "joiner_acs_credential_ids": "optional<list<string>>",
              "override": "optional<boolean>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "CredentialsCreateRequestVisionlineMetadataCardFormat": {
            "enum": [
              "TLCode",
              "rfid48",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "CredentialsCreateRequestVisionlineMetadataCardFunctionType": {
            "default": "guest",
            "enum": [
              "guest",
              "staff",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "CredentialsCreateResponse": {
            "docs": undefined,
            "properties": {
              "acs_credential": "root.AcsCredential",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "CredentialsDeleteResponse": {
            "docs": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "CredentialsGetResponse": {
            "docs": undefined,
            "properties": {
              "acs_credential": "root.AcsCredential",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "CredentialsListAccessibleEntrancesResponse": {
            "docs": undefined,
            "properties": {
              "acs_entrances": "list<root.AcsEntrance>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "CredentialsListResponse": {
            "docs": undefined,
            "properties": {
              "acs_credentials": "list<root.AcsCredential>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "CredentialsUnassignResponse": {
            "docs": undefined,
            "properties": {
              "acs_credential": "root.AcsCredential",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "CredentialsUpdateResponse": {
            "docs": undefined,
            "properties": {
              "acs_credential": "root.AcsCredential",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "imports:
  root: ../__package__.yml
types:
  CredentialsAssignResponse:
    properties:
      acs_credential: root.AcsCredential
      ok: boolean
    source:
      openapi: ../openapi.json
  CredentialsCreateRequestAccessMethod:
    enum:
      - code
      - card
      - mobile_key
    source:
      openapi: ../openapi.json
  CredentialsCreateRequestVisionlineMetadataCardFormat:
    enum:
      - TLCode
      - rfid48
    source:
      openapi: ../openapi.json
  CredentialsCreateRequestVisionlineMetadataCardFunctionType:
    enum:
      - guest
      - staff
    default: guest
    source:
      openapi: ../openapi.json
  CredentialsCreateRequestVisionlineMetadata:
    properties:
      assa_abloy_credential_service_mobile_endpoint_id:
        type: optional<string>
        validation:
          format: uuid
      card_format: optional<CredentialsCreateRequestVisionlineMetadataCardFormat>
      card_function_type:
        type: optional<CredentialsCreateRequestVisionlineMetadataCardFunctionType>
        default: guest
      is_override_key:
        type: optional<boolean>
        docs: |2-

                    ---
                    deprecated: use override.
                    ---
                  
      override: optional<boolean>
      joiner_acs_credential_ids: optional<list<string>>
    source:
      openapi: ../openapi.json
  CredentialsCreateResponse:
    properties:
      acs_credential: root.AcsCredential
      ok: boolean
    source:
      openapi: ../openapi.json
  CredentialsDeleteResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
  CredentialsGetResponse:
    properties:
      acs_credential: root.AcsCredential
      ok: boolean
    source:
      openapi: ../openapi.json
  CredentialsListResponse:
    properties:
      acs_credentials: list<root.AcsCredential>
      ok: boolean
    source:
      openapi: ../openapi.json
  CredentialsListAccessibleEntrancesResponse:
    properties:
      acs_entrances: list<root.AcsEntrance>
      ok: boolean
    source:
      openapi: ../openapi.json
  CredentialsUnassignResponse:
    properties:
      acs_credential: root.AcsCredential
      ok: boolean
    source:
      openapi: ../openapi.json
  CredentialsUpdateResponse:
    properties:
      acs_credential: root.AcsCredential
      ok: boolean
    source:
      openapi: ../openapi.json
service:
  auth: false
  base-path: ''
  endpoints:
    assign:
      path: /acs/credentials/assign
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /acs/credentials/assign
      request:
        name: CredentialsAssignRequest
        body:
          properties:
            acs_user_id:
              type: string
              validation:
                format: uuid
            acs_credential_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: CredentialsAssignResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            acs_user_id: acs_user_id
            acs_credential_id: acs_credential_id
          response:
            body:
              acs_credential:
                acs_credential_id: acs_credential_id
                acs_user_id: acs_user_id
                acs_credential_pool_id: acs_credential_pool_id
                acs_system_id: acs_system_id
                parent_acs_credential_id: parent_acs_credential_id
                display_name: display_name
                code: code
                access_method: code
                external_type: pti_card
                external_type_display_name: external_type_display_name
                created_at: '2024-01-15T09:30:00Z'
                workspace_id: workspace_id
                starts_at: starts_at
                ends_at: ends_at
                errors:
                  - error_code: error_code
                    message: message
                warnings:
                  - warning_code: warning_code
                    message: message
                is_multi_phone_sync_credential: true
                is_latest_desired_state_synced_with_provider: true
                latest_desired_state_synced_with_provider_at: '2024-01-15T09:30:00Z'
                visionline_metadata:
                  card_function_type: guest
                  joiner_acs_credential_ids:
                    - joiner_acs_credential_ids
                  guest_acs_entrance_ids:
                    - guest_acs_entrance_ids
                  common_acs_entrance_ids:
                    - common_acs_entrance_ids
              ok: true
    create:
      path: /acs/credentials/create
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /acs/credentials/create
      request:
        name: CredentialsCreateRequest
        body:
          properties:
            credential_manager_acs_system_id:
              type: optional<string>
              validation:
                format: uuid
            acs_user_id:
              type: string
              validation:
                format: uuid
            access_method: CredentialsCreateRequestAccessMethod
            code:
              type: optional<string>
              validation:
                pattern: ^\d+$
            is_multi_phone_sync_credential:
              type: optional<boolean>
              default: false
            allowed_acs_entrance_ids: optional<list<string>>
            visionline_metadata: optional<CredentialsCreateRequestVisionlineMetadata>
            starts_at: optional<datetime>
            ends_at: optional<datetime>
        content-type: application/json
      response:
        docs: OK
        type: CredentialsCreateResponse
        property: acs_credential
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            acs_user_id: acs_user_id
            access_method: code
          response:
            body:
              acs_credential:
                acs_credential_id: acs_credential_id
                acs_user_id: acs_user_id
                acs_credential_pool_id: acs_credential_pool_id
                acs_system_id: acs_system_id
                parent_acs_credential_id: parent_acs_credential_id
                display_name: display_name
                code: code
                access_method: code
                external_type: pti_card
                external_type_display_name: external_type_display_name
                created_at: '2024-01-15T09:30:00Z'
                workspace_id: workspace_id
                starts_at: starts_at
                ends_at: ends_at
                errors:
                  - error_code: error_code
                    message: message
                warnings:
                  - warning_code: warning_code
                    message: message
                is_multi_phone_sync_credential: true
                is_latest_desired_state_synced_with_provider: true
                latest_desired_state_synced_with_provider_at: '2024-01-15T09:30:00Z'
                visionline_metadata:
                  card_function_type: guest
                  joiner_acs_credential_ids:
                    - joiner_acs_credential_ids
                  guest_acs_entrance_ids:
                    - guest_acs_entrance_ids
                  common_acs_entrance_ids:
                    - common_acs_entrance_ids
              ok: true
    delete:
      path: /acs/credentials/delete
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /acs/credentials/delete
      request:
        name: CredentialsDeleteRequest
        body:
          properties:
            acs_credential_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: CredentialsDeleteResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            acs_credential_id: acs_credential_id
          response:
            body:
              ok: true
    get:
      path: /acs/credentials/get
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /acs/credentials/get
      request:
        name: CredentialsGetRequest
        body:
          properties:
            acs_credential_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: CredentialsGetResponse
        property: acs_credential
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            acs_credential_id: acs_credential_id
          response:
            body:
              acs_credential:
                acs_credential_id: acs_credential_id
                acs_user_id: acs_user_id
                acs_credential_pool_id: acs_credential_pool_id
                acs_system_id: acs_system_id
                parent_acs_credential_id: parent_acs_credential_id
                display_name: display_name
                code: code
                access_method: code
                external_type: pti_card
                external_type_display_name: external_type_display_name
                created_at: '2024-01-15T09:30:00Z'
                workspace_id: workspace_id
                starts_at: starts_at
                ends_at: ends_at
                errors:
                  - error_code: error_code
                    message: message
                warnings:
                  - warning_code: warning_code
                    message: message
                is_multi_phone_sync_credential: true
                is_latest_desired_state_synced_with_provider: true
                latest_desired_state_synced_with_provider_at: '2024-01-15T09:30:00Z'
                visionline_metadata:
                  card_function_type: guest
                  joiner_acs_credential_ids:
                    - joiner_acs_credential_ids
                  guest_acs_entrance_ids:
                    - guest_acs_entrance_ids
                  common_acs_entrance_ids:
                    - common_acs_entrance_ids
              ok: true
    list:
      path: /acs/credentials/list
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /acs/credentials/list
      request:
        name: CredentialsListRequest
        body:
          properties:
            is_multi_phone_sync_credential: optional<boolean>
        content-type: application/json
      response:
        docs: OK
        type: CredentialsListResponse
        property: acs_credentials
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request: {}
          response:
            body:
              acs_credentials:
                - acs_credential_id: acs_credential_id
                  acs_user_id: acs_user_id
                  acs_credential_pool_id: acs_credential_pool_id
                  acs_system_id: acs_system_id
                  parent_acs_credential_id: parent_acs_credential_id
                  display_name: display_name
                  code: code
                  access_method: code
                  external_type: pti_card
                  external_type_display_name: external_type_display_name
                  created_at: '2024-01-15T09:30:00Z'
                  workspace_id: workspace_id
                  starts_at: starts_at
                  ends_at: ends_at
                  errors:
                    - error_code: error_code
                      message: message
                  warnings:
                    - warning_code: warning_code
                      message: message
                  is_multi_phone_sync_credential: true
                  is_latest_desired_state_synced_with_provider: true
                  latest_desired_state_synced_with_provider_at: '2024-01-15T09:30:00Z'
                  visionline_metadata:
                    card_function_type: guest
              ok: true
    list_accessible_entrances:
      path: /acs/credentials/list_accessible_entrances
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /acs/credentials/list_accessible_entrances
      request:
        name: CredentialsListAccessibleEntrancesRequest
        body:
          properties:
            acs_credential_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: CredentialsListAccessibleEntrancesResponse
        property: acs_entrances
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            acs_credential_id: acs_credential_id
          response:
            body:
              acs_entrances:
                - acs_system_id: acs_system_id
                  acs_entrance_id: acs_entrance_id
                  created_at: '2024-01-15T09:30:00Z'
                  display_name: display_name
                  errors:
                    - error_code: error_code
                      message: message
                  latch_metadata:
                    accessibility_type: accessibility_type
                    door_name: door_name
                    door_type: door_type
                    is_connected: true
                  visionline_metadata:
                    door_name: door_name
                    door_category: entrance
              ok: true
    unassign:
      path: /acs/credentials/unassign
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /acs/credentials/unassign
      request:
        name: CredentialsUnassignRequest
        body:
          properties:
            acs_user_id:
              type: string
              validation:
                format: uuid
            acs_credential_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: CredentialsUnassignResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            acs_user_id: acs_user_id
            acs_credential_id: acs_credential_id
          response:
            body:
              acs_credential:
                acs_credential_id: acs_credential_id
                acs_user_id: acs_user_id
                acs_credential_pool_id: acs_credential_pool_id
                acs_system_id: acs_system_id
                parent_acs_credential_id: parent_acs_credential_id
                display_name: display_name
                code: code
                access_method: code
                external_type: pti_card
                external_type_display_name: external_type_display_name
                created_at: '2024-01-15T09:30:00Z'
                workspace_id: workspace_id
                starts_at: starts_at
                ends_at: ends_at
                errors:
                  - error_code: error_code
                    message: message
                warnings:
                  - warning_code: warning_code
                    message: message
                is_multi_phone_sync_credential: true
                is_latest_desired_state_synced_with_provider: true
                latest_desired_state_synced_with_provider_at: '2024-01-15T09:30:00Z'
                visionline_metadata:
                  card_function_type: guest
                  joiner_acs_credential_ids:
                    - joiner_acs_credential_ids
                  guest_acs_entrance_ids:
                    - guest_acs_entrance_ids
                  common_acs_entrance_ids:
                    - common_acs_entrance_ids
              ok: true
    update:
      path: /acs/credentials/update
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /acs/credentials/update
      request:
        name: CredentialsUpdateRequest
        body:
          properties:
            acs_credential_id: string
            code:
              type: optional<string>
              validation:
                pattern: ^\d+$
            ends_at: optional<datetime>
        content-type: application/json
      response:
        docs: OK
        type: CredentialsUpdateResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            acs_credential_id: acs_credential_id
          response:
            body:
              acs_credential:
                acs_credential_id: acs_credential_id
                acs_user_id: acs_user_id
                acs_credential_pool_id: acs_credential_pool_id
                acs_system_id: acs_system_id
                parent_acs_credential_id: parent_acs_credential_id
                display_name: display_name
                code: code
                access_method: code
                external_type: pti_card
                external_type_display_name: external_type_display_name
                created_at: '2024-01-15T09:30:00Z'
                workspace_id: workspace_id
                starts_at: starts_at
                ends_at: ends_at
                errors:
                  - error_code: error_code
                    message: message
                warnings:
                  - warning_code: warning_code
                    message: message
                is_multi_phone_sync_credential: true
                is_latest_desired_state_synced_with_provider: true
                latest_desired_state_synced_with_provider_at: '2024-01-15T09:30:00Z'
                visionline_metadata:
                  card_function_type: guest
                  joiner_acs_credential_ids:
                    - joiner_acs_credential_ids
                  guest_acs_entrance_ids:
                    - guest_acs_entrance_ids
                  common_acs_entrance_ids:
                    - common_acs_entrance_ids
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "acs/entrances.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "../__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "get": {
              "auth": true,
              "display-name": "/acs/entrances/get",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "acs_entrance_id": "acs_entrance_id",
                  },
                  "response": {
                    "body": {
                      "acs_entrance": {
                        "acs_entrance_id": "acs_entrance_id",
                        "acs_system_id": "acs_system_id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "display_name": "display_name",
                        "errors": [
                          {
                            "error_code": "error_code",
                            "message": "message",
                          },
                        ],
                        "latch_metadata": {
                          "accessibility_type": "accessibility_type",
                          "door_name": "door_name",
                          "door_type": "door_type",
                          "is_connected": true,
                        },
                        "visionline_metadata": {
                          "door_category": "entrance",
                          "door_name": "door_name",
                          "profiles": [
                            {
                              "visionline_door_profile_id": "visionline_door_profile_id",
                              "visionline_door_profile_type": "BLE",
                            },
                          ],
                        },
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/entrances/get",
              "request": {
                "body": {
                  "properties": {
                    "acs_entrance_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "EntrancesGetRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "acs_entrance",
                "type": "EntrancesGetResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "grant_access": {
              "auth": true,
              "display-name": "/acs/entrances/grant_access",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "acs_entrance_id": "acs_entrance_id",
                    "acs_user_id": "acs_user_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/entrances/grant_access",
              "request": {
                "body": {
                  "properties": {
                    "acs_entrance_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "acs_user_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "EntrancesGrantAccessRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "type": "EntrancesGrantAccessResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list": {
              "auth": true,
              "display-name": "/acs/entrances/list",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {},
                  "response": {
                    "body": {
                      "acs_entrances": [
                        {
                          "acs_entrance_id": "acs_entrance_id",
                          "acs_system_id": "acs_system_id",
                          "created_at": "2024-01-15T09:30:00Z",
                          "display_name": "display_name",
                          "errors": [
                            {
                              "error_code": "error_code",
                              "message": "message",
                            },
                          ],
                          "latch_metadata": {
                            "accessibility_type": "accessibility_type",
                            "door_name": "door_name",
                            "door_type": "door_type",
                            "is_connected": true,
                          },
                          "visionline_metadata": {
                            "door_category": "entrance",
                            "door_name": "door_name",
                          },
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/entrances/list",
              "request": {
                "body": {
                  "properties": {
                    "acs_credential_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "acs_system_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "EntrancesListRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "acs_entrances",
                "type": "EntrancesListResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list_credentials_with_access": {
              "auth": true,
              "display-name": "/acs/entrances/list_credentials_with_access",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "acs_entrance_id": "acs_entrance_id",
                  },
                  "response": {
                    "body": {
                      "acs_credentials": [
                        {
                          "access_method": "code",
                          "acs_credential_id": "acs_credential_id",
                          "acs_credential_pool_id": "acs_credential_pool_id",
                          "acs_system_id": "acs_system_id",
                          "acs_user_id": "acs_user_id",
                          "code": "code",
                          "created_at": "2024-01-15T09:30:00Z",
                          "display_name": "display_name",
                          "ends_at": "ends_at",
                          "errors": [
                            {
                              "error_code": "error_code",
                              "message": "message",
                            },
                          ],
                          "external_type": "pti_card",
                          "external_type_display_name": "external_type_display_name",
                          "is_latest_desired_state_synced_with_provider": true,
                          "is_multi_phone_sync_credential": true,
                          "latest_desired_state_synced_with_provider_at": "2024-01-15T09:30:00Z",
                          "parent_acs_credential_id": "parent_acs_credential_id",
                          "starts_at": "starts_at",
                          "visionline_metadata": {
                            "card_function_type": "guest",
                          },
                          "warnings": [
                            {
                              "message": "message",
                              "warning_code": "warning_code",
                            },
                          ],
                          "workspace_id": "workspace_id",
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/entrances/list_credentials_with_access",
              "request": {
                "body": {
                  "properties": {
                    "acs_entrance_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "include_if": "optional<list<literal<"visionline_metadata.is_valid">>>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "EntrancesListCredentialsWithAccessRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "acs_credentials",
                "type": "EntrancesListCredentialsWithAccessResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "EntrancesGetResponse": {
            "docs": undefined,
            "properties": {
              "acs_entrance": "root.AcsEntrance",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "EntrancesGrantAccessResponse": {
            "docs": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "EntrancesListCredentialsWithAccessResponse": {
            "docs": undefined,
            "properties": {
              "acs_credentials": "list<root.AcsCredential>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "EntrancesListResponse": {
            "docs": undefined,
            "properties": {
              "acs_entrances": "list<root.AcsEntrance>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "imports:
  root: ../__package__.yml
types:
  EntrancesGetResponse:
    properties:
      acs_entrance: root.AcsEntrance
      ok: boolean
    source:
      openapi: ../openapi.json
  EntrancesGrantAccessResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
  EntrancesListResponse:
    properties:
      acs_entrances: list<root.AcsEntrance>
      ok: boolean
    source:
      openapi: ../openapi.json
  EntrancesListCredentialsWithAccessResponse:
    properties:
      acs_credentials: list<root.AcsCredential>
      ok: boolean
    source:
      openapi: ../openapi.json
service:
  auth: false
  base-path: ''
  endpoints:
    get:
      path: /acs/entrances/get
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /acs/entrances/get
      request:
        name: EntrancesGetRequest
        body:
          properties:
            acs_entrance_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: EntrancesGetResponse
        property: acs_entrance
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            acs_entrance_id: acs_entrance_id
          response:
            body:
              acs_entrance:
                acs_system_id: acs_system_id
                acs_entrance_id: acs_entrance_id
                created_at: '2024-01-15T09:30:00Z'
                display_name: display_name
                errors:
                  - error_code: error_code
                    message: message
                latch_metadata:
                  accessibility_type: accessibility_type
                  door_name: door_name
                  door_type: door_type
                  is_connected: true
                visionline_metadata:
                  door_name: door_name
                  door_category: entrance
                  profiles:
                    - visionline_door_profile_id: visionline_door_profile_id
                      visionline_door_profile_type: BLE
              ok: true
    grant_access:
      path: /acs/entrances/grant_access
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /acs/entrances/grant_access
      request:
        name: EntrancesGrantAccessRequest
        body:
          properties:
            acs_entrance_id:
              type: string
              validation:
                format: uuid
            acs_user_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: EntrancesGrantAccessResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            acs_entrance_id: acs_entrance_id
            acs_user_id: acs_user_id
          response:
            body:
              ok: true
    list:
      path: /acs/entrances/list
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /acs/entrances/list
      request:
        name: EntrancesListRequest
        body:
          properties:
            acs_system_id:
              type: optional<string>
              validation:
                format: uuid
            acs_credential_id:
              type: optional<string>
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: EntrancesListResponse
        property: acs_entrances
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request: {}
          response:
            body:
              acs_entrances:
                - acs_system_id: acs_system_id
                  acs_entrance_id: acs_entrance_id
                  created_at: '2024-01-15T09:30:00Z'
                  display_name: display_name
                  errors:
                    - error_code: error_code
                      message: message
                  latch_metadata:
                    accessibility_type: accessibility_type
                    door_name: door_name
                    door_type: door_type
                    is_connected: true
                  visionline_metadata:
                    door_name: door_name
                    door_category: entrance
              ok: true
    list_credentials_with_access:
      path: /acs/entrances/list_credentials_with_access
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /acs/entrances/list_credentials_with_access
      request:
        name: EntrancesListCredentialsWithAccessRequest
        body:
          properties:
            acs_entrance_id:
              type: string
              validation:
                format: uuid
            include_if: optional<list<literal<"visionline_metadata.is_valid">>>
        content-type: application/json
      response:
        docs: OK
        type: EntrancesListCredentialsWithAccessResponse
        property: acs_credentials
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            acs_entrance_id: acs_entrance_id
          response:
            body:
              acs_credentials:
                - acs_credential_id: acs_credential_id
                  acs_user_id: acs_user_id
                  acs_credential_pool_id: acs_credential_pool_id
                  acs_system_id: acs_system_id
                  parent_acs_credential_id: parent_acs_credential_id
                  display_name: display_name
                  code: code
                  access_method: code
                  external_type: pti_card
                  external_type_display_name: external_type_display_name
                  created_at: '2024-01-15T09:30:00Z'
                  workspace_id: workspace_id
                  starts_at: starts_at
                  ends_at: ends_at
                  errors:
                    - error_code: error_code
                      message: message
                  warnings:
                    - warning_code: warning_code
                      message: message
                  is_multi_phone_sync_credential: true
                  is_latest_desired_state_synced_with_provider: true
                  latest_desired_state_synced_with_provider_at: '2024-01-15T09:30:00Z'
                  visionline_metadata:
                    card_function_type: guest
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "acs/systems.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "../__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "get": {
              "auth": true,
              "display-name": "/acs/systems/get",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "acs_system_id": "acs_system_id",
                  },
                  "response": {
                    "body": {
                      "acs_system": {
                        "acs_system_id": "acs_system_id",
                        "can_add_acs_users_to_acs_access_groups": true,
                        "can_automate_enrollment": true,
                        "can_create_acs_access_groups": true,
                        "can_remove_acs_users_from_acs_access_groups": true,
                        "connected_account_ids": [
                          "connected_account_ids",
                        ],
                        "created_at": "2024-01-15T09:30:00Z",
                        "errors": [
                          {
                            "created_at": "2024-01-15T09:30:00Z",
                            "error_code": "visionline_instance_unreachable",
                            "message": "errors",
                          },
                        ],
                        "external_type": "pti_site",
                        "external_type_display_name": "external_type_display_name",
                        "image_alt_text": "image_alt_text",
                        "image_url": "image_url",
                        "name": "name",
                        "system_type": "pti_site",
                        "system_type_display_name": "system_type_display_name",
                        "warnings": [
                          {},
                        ],
                        "workspace_id": "workspace_id",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/systems/get",
              "request": {
                "body": {
                  "properties": {
                    "acs_system_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "SystemsGetRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "acs_system",
                "type": "SystemsGetResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list": {
              "auth": true,
              "display-name": "/acs/systems/list",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {},
                  "response": {
                    "body": {
                      "acs_systems": [
                        {
                          "acs_system_id": "acs_system_id",
                          "can_add_acs_users_to_acs_access_groups": true,
                          "can_automate_enrollment": true,
                          "can_create_acs_access_groups": true,
                          "can_remove_acs_users_from_acs_access_groups": true,
                          "connected_account_ids": [
                            "connected_account_ids",
                          ],
                          "created_at": "2024-01-15T09:30:00Z",
                          "errors": [
                            {
                              "created_at": "2024-01-15T09:30:00Z",
                              "error_code": "visionline_instance_unreachable",
                              "message": "errors",
                            },
                          ],
                          "external_type": "pti_site",
                          "external_type_display_name": "external_type_display_name",
                          "image_alt_text": "image_alt_text",
                          "image_url": "image_url",
                          "name": "name",
                          "system_type": "pti_site",
                          "system_type_display_name": "system_type_display_name",
                          "warnings": [
                            {},
                          ],
                          "workspace_id": "workspace_id",
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/systems/list",
              "request": {
                "body": {
                  "properties": {
                    "connected_account_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "SystemsListRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "acs_systems",
                "type": "SystemsListResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list_compatible_credential_manager_acs_systems": {
              "auth": true,
              "display-name": "/acs/systems/list_compatible_credential_manager_acs_systems",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "acs_system_id": "acs_system_id",
                  },
                  "response": {
                    "body": {
                      "acs_systems": [
                        {
                          "acs_system_id": "acs_system_id",
                          "can_add_acs_users_to_acs_access_groups": true,
                          "can_automate_enrollment": true,
                          "can_create_acs_access_groups": true,
                          "can_remove_acs_users_from_acs_access_groups": true,
                          "connected_account_ids": [
                            "connected_account_ids",
                          ],
                          "created_at": "2024-01-15T09:30:00Z",
                          "errors": [
                            {
                              "created_at": "2024-01-15T09:30:00Z",
                              "error_code": "visionline_instance_unreachable",
                              "message": "errors",
                            },
                          ],
                          "external_type": "pti_site",
                          "external_type_display_name": "external_type_display_name",
                          "image_alt_text": "image_alt_text",
                          "image_url": "image_url",
                          "name": "name",
                          "system_type": "pti_site",
                          "system_type_display_name": "system_type_display_name",
                          "warnings": [
                            {},
                          ],
                          "workspace_id": "workspace_id",
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/systems/list_compatible_credential_manager_acs_systems",
              "request": {
                "body": {
                  "properties": {
                    "acs_system_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "SystemsListCompatibleCredentialManagerAcsSystemsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "acs_systems",
                "type": "SystemsListCompatibleCredentialManagerAcsSystemsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "SystemsGetResponse": {
            "docs": undefined,
            "properties": {
              "acs_system": "root.AcsSystem",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "SystemsListCompatibleCredentialManagerAcsSystemsResponse": {
            "docs": undefined,
            "properties": {
              "acs_systems": "list<root.AcsSystem>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "SystemsListResponse": {
            "docs": undefined,
            "properties": {
              "acs_systems": "list<root.AcsSystem>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "imports:
  root: ../__package__.yml
types:
  SystemsGetResponse:
    properties:
      acs_system: root.AcsSystem
      ok: boolean
    source:
      openapi: ../openapi.json
  SystemsListResponse:
    properties:
      acs_systems: list<root.AcsSystem>
      ok: boolean
    source:
      openapi: ../openapi.json
  SystemsListCompatibleCredentialManagerAcsSystemsResponse:
    properties:
      acs_systems: list<root.AcsSystem>
      ok: boolean
    source:
      openapi: ../openapi.json
service:
  auth: false
  base-path: ''
  endpoints:
    get:
      path: /acs/systems/get
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /acs/systems/get
      request:
        name: SystemsGetRequest
        body:
          properties:
            acs_system_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: SystemsGetResponse
        property: acs_system
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            acs_system_id: acs_system_id
          response:
            body:
              acs_system:
                acs_system_id: acs_system_id
                external_type: pti_site
                external_type_display_name: external_type_display_name
                system_type: pti_site
                system_type_display_name: system_type_display_name
                name: name
                created_at: '2024-01-15T09:30:00Z'
                workspace_id: workspace_id
                connected_account_ids:
                  - connected_account_ids
                image_url: image_url
                image_alt_text: image_alt_text
                errors:
                  - error_code: visionline_instance_unreachable
                    created_at: '2024-01-15T09:30:00Z'
                    message: errors
                warnings:
                  - {}
                can_automate_enrollment: true
                can_create_acs_access_groups: true
                can_remove_acs_users_from_acs_access_groups: true
                can_add_acs_users_to_acs_access_groups: true
              ok: true
    list:
      path: /acs/systems/list
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /acs/systems/list
      request:
        name: SystemsListRequest
        body:
          properties:
            connected_account_id:
              type: optional<string>
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: SystemsListResponse
        property: acs_systems
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request: {}
          response:
            body:
              acs_systems:
                - acs_system_id: acs_system_id
                  external_type: pti_site
                  external_type_display_name: external_type_display_name
                  system_type: pti_site
                  system_type_display_name: system_type_display_name
                  name: name
                  created_at: '2024-01-15T09:30:00Z'
                  workspace_id: workspace_id
                  connected_account_ids:
                    - connected_account_ids
                  image_url: image_url
                  image_alt_text: image_alt_text
                  errors:
                    - error_code: visionline_instance_unreachable
                      created_at: '2024-01-15T09:30:00Z'
                      message: errors
                  warnings:
                    - {}
                  can_automate_enrollment: true
                  can_create_acs_access_groups: true
                  can_remove_acs_users_from_acs_access_groups: true
                  can_add_acs_users_to_acs_access_groups: true
              ok: true
    list_compatible_credential_manager_acs_systems:
      path: /acs/systems/list_compatible_credential_manager_acs_systems
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /acs/systems/list_compatible_credential_manager_acs_systems
      request:
        name: SystemsListCompatibleCredentialManagerAcsSystemsRequest
        body:
          properties:
            acs_system_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: SystemsListCompatibleCredentialManagerAcsSystemsResponse
        property: acs_systems
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            acs_system_id: acs_system_id
          response:
            body:
              acs_systems:
                - acs_system_id: acs_system_id
                  external_type: pti_site
                  external_type_display_name: external_type_display_name
                  system_type: pti_site
                  system_type_display_name: system_type_display_name
                  name: name
                  created_at: '2024-01-15T09:30:00Z'
                  workspace_id: workspace_id
                  connected_account_ids:
                    - connected_account_ids
                  image_url: image_url
                  image_alt_text: image_alt_text
                  errors:
                    - error_code: visionline_instance_unreachable
                      created_at: '2024-01-15T09:30:00Z'
                      message: errors
                  warnings:
                    - {}
                  can_automate_enrollment: true
                  can_create_acs_access_groups: true
                  can_remove_acs_users_from_acs_access_groups: true
                  can_add_acs_users_to_acs_access_groups: true
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "acs/users.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "../__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "add_to_access_group": {
              "auth": true,
              "display-name": "/acs/users/add_to_access_group",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "acs_access_group_id": "acs_access_group_id",
                    "acs_user_id": "acs_user_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/users/add_to_access_group",
              "request": {
                "body": {
                  "properties": {
                    "acs_access_group_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "acs_user_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UsersAddToAccessGroupRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "type": "UsersAddToAccessGroupResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "create": {
              "auth": true,
              "display-name": "/acs/users/create",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "acs_system_id": "acs_system_id",
                  },
                  "response": {
                    "body": {
                      "acs_user": {
                        "access_schedule": {
                          "ends_at": "2024-01-15T09:30:00Z",
                          "starts_at": "2024-01-15T09:30:00Z",
                        },
                        "acs_system_id": "acs_system_id",
                        "acs_user_id": "acs_user_id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "display_name": "display_name",
                        "email": "email",
                        "email_address": "email_address",
                        "external_type": "pti_user",
                        "external_type_display_name": "external_type_display_name",
                        "full_name": "full_name",
                        "hid_acs_system_id": "hid_acs_system_id",
                        "is_suspended": true,
                        "phone_number": "phone_number",
                        "user_identity_email_address": "user_identity_email_address",
                        "user_identity_full_name": "user_identity_full_name",
                        "user_identity_id": "user_identity_id",
                        "user_identity_phone_number": "user_identity_phone_number",
                        "workspace_id": "workspace_id",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/users/create",
              "request": {
                "body": {
                  "properties": {
                    "access_schedule": "optional<UsersCreateRequestAccessSchedule>",
                    "acs_access_group_ids": "optional<list<string>>",
                    "acs_system_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "email": {
                      "docs": "
    ---
    deprecated: use email_address.
    ---
    ",
                      "type": "optional<string>",
                      "validation": {
                        "format": "email",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "email_address": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "email",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "full_name": "optional<string>",
                    "phone_number": "optional<string>",
                    "user_identity_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UsersCreateRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "acs_user",
                "type": "UsersCreateResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "delete": {
              "auth": true,
              "display-name": "/acs/users/delete",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "acs_user_id": "acs_user_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/users/delete",
              "request": {
                "body": {
                  "properties": {
                    "acs_user_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UsersDeleteRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "type": "UsersDeleteResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get": {
              "auth": true,
              "display-name": "/acs/users/get",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "acs_user_id": "acs_user_id",
                  },
                  "response": {
                    "body": {
                      "acs_user": {
                        "access_schedule": {
                          "ends_at": "2024-01-15T09:30:00Z",
                          "starts_at": "2024-01-15T09:30:00Z",
                        },
                        "acs_system_id": "acs_system_id",
                        "acs_user_id": "acs_user_id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "display_name": "display_name",
                        "email": "email",
                        "email_address": "email_address",
                        "external_type": "pti_user",
                        "external_type_display_name": "external_type_display_name",
                        "full_name": "full_name",
                        "hid_acs_system_id": "hid_acs_system_id",
                        "is_suspended": true,
                        "phone_number": "phone_number",
                        "user_identity_email_address": "user_identity_email_address",
                        "user_identity_full_name": "user_identity_full_name",
                        "user_identity_id": "user_identity_id",
                        "user_identity_phone_number": "user_identity_phone_number",
                        "workspace_id": "workspace_id",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/users/get",
              "request": {
                "body": {
                  "properties": {
                    "acs_user_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UsersGetRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "acs_user",
                "type": "UsersGetResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list": {
              "auth": true,
              "display-name": "/acs/users/list",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {},
                  "response": {
                    "body": {
                      "acs_users": [
                        {
                          "access_schedule": {
                            "ends_at": "2024-01-15T09:30:00Z",
                            "starts_at": "2024-01-15T09:30:00Z",
                          },
                          "acs_system_id": "acs_system_id",
                          "acs_user_id": "acs_user_id",
                          "created_at": "2024-01-15T09:30:00Z",
                          "display_name": "display_name",
                          "email": "email",
                          "email_address": "email_address",
                          "external_type": "pti_user",
                          "external_type_display_name": "external_type_display_name",
                          "full_name": "full_name",
                          "hid_acs_system_id": "hid_acs_system_id",
                          "is_suspended": true,
                          "phone_number": "phone_number",
                          "user_identity_email_address": "user_identity_email_address",
                          "user_identity_full_name": "user_identity_full_name",
                          "user_identity_id": "user_identity_id",
                          "user_identity_phone_number": "user_identity_phone_number",
                          "workspace_id": "workspace_id",
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/users/list",
              "request": {
                "body": {
                  "properties": {
                    "acs_system_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "user_identity_email_address": "optional<string>",
                    "user_identity_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "user_identity_phone_number": "optional<string>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UsersListRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "acs_users",
                "type": "UsersListResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list_accessible_entrances": {
              "auth": true,
              "display-name": "/acs/users/list_accessible_entrances",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "acs_user_id": "acs_user_id",
                  },
                  "response": {
                    "body": {
                      "acs_entrances": [
                        {
                          "acs_entrance_id": "acs_entrance_id",
                          "acs_system_id": "acs_system_id",
                          "created_at": "2024-01-15T09:30:00Z",
                          "display_name": "display_name",
                          "errors": [
                            {
                              "error_code": "error_code",
                              "message": "message",
                            },
                          ],
                          "latch_metadata": {
                            "accessibility_type": "accessibility_type",
                            "door_name": "door_name",
                            "door_type": "door_type",
                            "is_connected": true,
                          },
                          "visionline_metadata": {
                            "door_category": "entrance",
                            "door_name": "door_name",
                          },
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/users/list_accessible_entrances",
              "request": {
                "body": {
                  "properties": {
                    "acs_user_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UsersListAccessibleEntrancesRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "acs_entrances",
                "type": "UsersListAccessibleEntrancesResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "remove_from_access_group": {
              "auth": true,
              "display-name": "/acs/users/remove_from_access_group",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "acs_access_group_id": "acs_access_group_id",
                    "acs_user_id": "acs_user_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/users/remove_from_access_group",
              "request": {
                "body": {
                  "properties": {
                    "acs_access_group_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "acs_user_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UsersRemoveFromAccessGroupRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "type": "UsersRemoveFromAccessGroupResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "revoke_access_to_all_entrances": {
              "auth": true,
              "display-name": "/acs/users/revoke_access_to_all_entrances",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "acs_user_id": "acs_user_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/users/revoke_access_to_all_entrances",
              "request": {
                "body": {
                  "properties": {
                    "acs_user_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UsersRevokeAccessToAllEntrancesRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "type": "UsersRevokeAccessToAllEntrancesResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "suspend": {
              "auth": true,
              "display-name": "/acs/users/suspend",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "acs_user_id": "acs_user_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/users/suspend",
              "request": {
                "body": {
                  "properties": {
                    "acs_user_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UsersSuspendRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "type": "UsersSuspendResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "unsuspend": {
              "auth": true,
              "display-name": "/acs/users/unsuspend",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "acs_user_id": "acs_user_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/users/unsuspend",
              "request": {
                "body": {
                  "properties": {
                    "acs_user_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UsersUnsuspendRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "type": "UsersUnsuspendResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "update": {
              "auth": true,
              "display-name": "/acs/users/update",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "acs_user_id": "acs_user_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/acs/users/update",
              "request": {
                "body": {
                  "properties": {
                    "access_schedule": "optional<UsersUpdateRequestAccessSchedule>",
                    "acs_user_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "email": {
                      "docs": "
    ---
    deprecated: use email_address.
    ---
    ",
                      "type": "optional<string>",
                      "validation": {
                        "format": "email",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "email_address": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "email",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "full_name": "optional<string>",
                    "hid_acs_system_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "phone_number": "optional<string>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UsersUpdateRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "type": "UsersUpdateResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "UsersAddToAccessGroupResponse": {
            "docs": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UsersCreateRequestAccessSchedule": {
            "docs": undefined,
            "properties": {
              "ends_at": "datetime",
              "starts_at": "datetime",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UsersCreateResponse": {
            "docs": undefined,
            "properties": {
              "acs_user": "root.AcsUser",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UsersDeleteResponse": {
            "docs": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UsersGetResponse": {
            "docs": undefined,
            "properties": {
              "acs_user": "root.AcsUser",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UsersListAccessibleEntrancesResponse": {
            "docs": undefined,
            "properties": {
              "acs_entrances": "list<root.AcsEntrance>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UsersListResponse": {
            "docs": undefined,
            "properties": {
              "acs_users": "list<root.AcsUser>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UsersRemoveFromAccessGroupResponse": {
            "docs": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UsersRevokeAccessToAllEntrancesResponse": {
            "docs": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UsersSuspendResponse": {
            "docs": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UsersUnsuspendResponse": {
            "docs": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UsersUpdateRequestAccessSchedule": {
            "docs": undefined,
            "properties": {
              "ends_at": "datetime",
              "starts_at": "datetime",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UsersUpdateResponse": {
            "docs": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "types:
  UsersAddToAccessGroupResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
  UsersCreateRequestAccessSchedule:
    properties:
      starts_at: datetime
      ends_at: datetime
    source:
      openapi: ../openapi.json
  UsersCreateResponse:
    properties:
      acs_user: root.AcsUser
      ok: boolean
    source:
      openapi: ../openapi.json
  UsersDeleteResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
  UsersGetResponse:
    properties:
      acs_user: root.AcsUser
      ok: boolean
    source:
      openapi: ../openapi.json
  UsersListResponse:
    properties:
      acs_users: list<root.AcsUser>
      ok: boolean
    source:
      openapi: ../openapi.json
  UsersListAccessibleEntrancesResponse:
    properties:
      acs_entrances: list<root.AcsEntrance>
      ok: boolean
    source:
      openapi: ../openapi.json
  UsersRemoveFromAccessGroupResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
  UsersRevokeAccessToAllEntrancesResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
  UsersSuspendResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
  UsersUnsuspendResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
  UsersUpdateRequestAccessSchedule:
    properties:
      starts_at: datetime
      ends_at: datetime
    source:
      openapi: ../openapi.json
  UsersUpdateResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
imports:
  root: ../__package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    add_to_access_group:
      path: /acs/users/add_to_access_group
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /acs/users/add_to_access_group
      request:
        name: UsersAddToAccessGroupRequest
        body:
          properties:
            acs_user_id:
              type: string
              validation:
                format: uuid
            acs_access_group_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: UsersAddToAccessGroupResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            acs_user_id: acs_user_id
            acs_access_group_id: acs_access_group_id
          response:
            body:
              ok: true
    create:
      path: /acs/users/create
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /acs/users/create
      request:
        name: UsersCreateRequest
        body:
          properties:
            acs_system_id:
              type: string
              validation:
                format: uuid
            acs_access_group_ids: optional<list<string>>
            user_identity_id:
              type: optional<string>
              validation:
                format: uuid
            access_schedule: optional<UsersCreateRequestAccessSchedule>
            full_name: optional<string>
            email:
              type: optional<string>
              docs: |2-

                    ---
                    deprecated: use email_address.
                    ---
                    
              validation:
                format: email
            phone_number: optional<string>
            email_address:
              type: optional<string>
              validation:
                format: email
        content-type: application/json
      response:
        docs: OK
        type: UsersCreateResponse
        property: acs_user
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            acs_system_id: acs_system_id
          response:
            body:
              acs_user:
                acs_user_id: acs_user_id
                acs_system_id: acs_system_id
                hid_acs_system_id: hid_acs_system_id
                workspace_id: workspace_id
                created_at: '2024-01-15T09:30:00Z'
                display_name: display_name
                external_type: pti_user
                external_type_display_name: external_type_display_name
                is_suspended: true
                access_schedule:
                  starts_at: '2024-01-15T09:30:00Z'
                  ends_at: '2024-01-15T09:30:00Z'
                user_identity_id: user_identity_id
                user_identity_full_name: user_identity_full_name
                user_identity_email_address: user_identity_email_address
                user_identity_phone_number: user_identity_phone_number
                full_name: full_name
                email: email
                email_address: email_address
                phone_number: phone_number
              ok: true
    delete:
      path: /acs/users/delete
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /acs/users/delete
      request:
        name: UsersDeleteRequest
        body:
          properties:
            acs_user_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: UsersDeleteResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            acs_user_id: acs_user_id
          response:
            body:
              ok: true
    get:
      path: /acs/users/get
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /acs/users/get
      request:
        name: UsersGetRequest
        body:
          properties:
            acs_user_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: UsersGetResponse
        property: acs_user
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            acs_user_id: acs_user_id
          response:
            body:
              acs_user:
                acs_user_id: acs_user_id
                acs_system_id: acs_system_id
                hid_acs_system_id: hid_acs_system_id
                workspace_id: workspace_id
                created_at: '2024-01-15T09:30:00Z'
                display_name: display_name
                external_type: pti_user
                external_type_display_name: external_type_display_name
                is_suspended: true
                access_schedule:
                  starts_at: '2024-01-15T09:30:00Z'
                  ends_at: '2024-01-15T09:30:00Z'
                user_identity_id: user_identity_id
                user_identity_full_name: user_identity_full_name
                user_identity_email_address: user_identity_email_address
                user_identity_phone_number: user_identity_phone_number
                full_name: full_name
                email: email
                email_address: email_address
                phone_number: phone_number
              ok: true
    list:
      path: /acs/users/list
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /acs/users/list
      request:
        name: UsersListRequest
        body:
          properties:
            user_identity_id:
              type: optional<string>
              validation:
                format: uuid
            user_identity_phone_number: optional<string>
            user_identity_email_address: optional<string>
            acs_system_id:
              type: optional<string>
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: UsersListResponse
        property: acs_users
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request: {}
          response:
            body:
              acs_users:
                - acs_user_id: acs_user_id
                  acs_system_id: acs_system_id
                  hid_acs_system_id: hid_acs_system_id
                  workspace_id: workspace_id
                  created_at: '2024-01-15T09:30:00Z'
                  display_name: display_name
                  external_type: pti_user
                  external_type_display_name: external_type_display_name
                  is_suspended: true
                  access_schedule:
                    starts_at: '2024-01-15T09:30:00Z'
                    ends_at: '2024-01-15T09:30:00Z'
                  user_identity_id: user_identity_id
                  user_identity_full_name: user_identity_full_name
                  user_identity_email_address: user_identity_email_address
                  user_identity_phone_number: user_identity_phone_number
                  full_name: full_name
                  email: email
                  email_address: email_address
                  phone_number: phone_number
              ok: true
    list_accessible_entrances:
      path: /acs/users/list_accessible_entrances
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /acs/users/list_accessible_entrances
      request:
        name: UsersListAccessibleEntrancesRequest
        body:
          properties:
            acs_user_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: UsersListAccessibleEntrancesResponse
        property: acs_entrances
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            acs_user_id: acs_user_id
          response:
            body:
              acs_entrances:
                - acs_system_id: acs_system_id
                  acs_entrance_id: acs_entrance_id
                  created_at: '2024-01-15T09:30:00Z'
                  display_name: display_name
                  errors:
                    - error_code: error_code
                      message: message
                  latch_metadata:
                    accessibility_type: accessibility_type
                    door_name: door_name
                    door_type: door_type
                    is_connected: true
                  visionline_metadata:
                    door_name: door_name
                    door_category: entrance
              ok: true
    remove_from_access_group:
      path: /acs/users/remove_from_access_group
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /acs/users/remove_from_access_group
      request:
        name: UsersRemoveFromAccessGroupRequest
        body:
          properties:
            acs_user_id:
              type: string
              validation:
                format: uuid
            acs_access_group_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: UsersRemoveFromAccessGroupResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            acs_user_id: acs_user_id
            acs_access_group_id: acs_access_group_id
          response:
            body:
              ok: true
    revoke_access_to_all_entrances:
      path: /acs/users/revoke_access_to_all_entrances
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /acs/users/revoke_access_to_all_entrances
      request:
        name: UsersRevokeAccessToAllEntrancesRequest
        body:
          properties:
            acs_user_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: UsersRevokeAccessToAllEntrancesResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            acs_user_id: acs_user_id
          response:
            body:
              ok: true
    suspend:
      path: /acs/users/suspend
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /acs/users/suspend
      request:
        name: UsersSuspendRequest
        body:
          properties:
            acs_user_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: UsersSuspendResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            acs_user_id: acs_user_id
          response:
            body:
              ok: true
    unsuspend:
      path: /acs/users/unsuspend
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /acs/users/unsuspend
      request:
        name: UsersUnsuspendRequest
        body:
          properties:
            acs_user_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: UsersUnsuspendResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            acs_user_id: acs_user_id
          response:
            body:
              ok: true
    update:
      path: /acs/users/update
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /acs/users/update
      request:
        name: UsersUpdateRequest
        body:
          properties:
            access_schedule: optional<UsersUpdateRequestAccessSchedule>
            acs_user_id:
              type: string
              validation:
                format: uuid
            full_name: optional<string>
            email:
              type: optional<string>
              docs: |2-

                    ---
                    deprecated: use email_address.
                    ---
                    
              validation:
                format: email
            phone_number: optional<string>
            email_address:
              type: optional<string>
              validation:
                format: email
            hid_acs_system_id:
              type: optional<string>
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: UsersUpdateResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            acs_user_id: acs_user_id
          response:
            body:
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "actionAttempts.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "get": {
              "auth": true,
              "display-name": "/action_attempts/get",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "action_attempt_id": "action_attempt_id",
                  },
                  "response": {
                    "body": {
                      "action_attempt": {
                        "action_attempt_id": "action_attempt_id",
                        "action_type": "LOCK_DOOR",
                        "error": "error",
                        "result": "result",
                        "status": "pending",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/action_attempts/get",
              "request": {
                "body": {
                  "properties": {
                    "action_attempt_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ActionAttemptsGetRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "action_attempt",
                "type": "ActionAttemptsGetResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list": {
              "auth": true,
              "display-name": "/action_attempts/list",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "action_attempt_ids": [
                      "action_attempt_ids",
                    ],
                  },
                  "response": {
                    "body": {
                      "action_attempts": [
                        {
                          "action_attempt_id": "action_attempt_id",
                          "action_type": "LOCK_DOOR",
                          "error": "error",
                          "result": "result",
                          "status": "pending",
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/action_attempts/list",
              "request": {
                "body": {
                  "properties": {
                    "action_attempt_ids": "list<string>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ActionAttemptsListRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "action_attempts",
                "type": "ActionAttemptsListResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "ActionAttemptsGetResponse": {
            "docs": undefined,
            "properties": {
              "action_attempt": "root.ActionAttempt",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ActionAttemptsListResponse": {
            "docs": undefined,
            "properties": {
              "action_attempts": "list<root.ActionAttempt>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
types:
  ActionAttemptsGetResponse:
    properties:
      action_attempt: root.ActionAttempt
      ok: boolean
    source:
      openapi: ../openapi.json
  ActionAttemptsListResponse:
    properties:
      action_attempts: list<root.ActionAttempt>
      ok: boolean
    source:
      openapi: ../openapi.json
service:
  auth: false
  base-path: ''
  endpoints:
    get:
      path: /action_attempts/get
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /action_attempts/get
      request:
        name: ActionAttemptsGetRequest
        body:
          properties:
            action_attempt_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: ActionAttemptsGetResponse
        property: action_attempt
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            action_attempt_id: action_attempt_id
          response:
            body:
              action_attempt:
                action_attempt_id: action_attempt_id
                status: pending
                result: result
                error: error
                action_type: LOCK_DOOR
              ok: true
    list:
      path: /action_attempts/list
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /action_attempts/list
      request:
        name: ActionAttemptsListRequest
        body:
          properties:
            action_attempt_ids: list<string>
        content-type: application/json
      response:
        docs: OK
        type: ActionAttemptsListResponse
        property: action_attempts
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            action_attempt_ids:
              - action_attempt_ids
          response:
            body:
              action_attempts:
                - action_attempt_id: action_attempt_id
                  status: pending
                  result: result
                  error: error
                  action_type: LOCK_DOOR
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "clientSessions.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "create": {
              "auth": false,
              "display-name": "/client_sessions/create",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {},
                  "response": {
                    "body": {
                      "client_session": {
                        "client_session_id": "client_session_id",
                        "connect_webview_ids": [
                          "connect_webview_ids",
                        ],
                        "connected_account_ids": [
                          "connected_account_ids",
                        ],
                        "created_at": "2024-01-15T09:30:00Z",
                        "device_count": 1.1,
                        "token": "token",
                        "user_identifier_key": "user_identifier_key",
                        "user_identity_ids": [
                          "user_identity_ids",
                        ],
                        "workspace_id": "workspace_id",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/client_sessions/create",
              "request": {
                "body": {
                  "properties": {
                    "connect_webview_ids": "optional<list<string>>",
                    "connected_account_ids": "optional<list<string>>",
                    "expires_at": "optional<datetime>",
                    "user_identifier_key": {
                      "type": "optional<string>",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": 1,
                        "pattern": undefined,
                      },
                    },
                    "user_identity_ids": "optional<list<string>>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ClientSessionsCreateRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "client_session",
                "type": "ClientSessionsCreateResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "delete": {
              "auth": true,
              "display-name": "/client_sessions/delete",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "client_session_id": "client_session_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/client_sessions/delete",
              "request": {
                "body": {
                  "properties": {
                    "client_session_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ClientSessionsDeleteRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "type": "ClientSessionsDeleteResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get": {
              "auth": true,
              "display-name": "/client_sessions/get",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {},
                  "response": {
                    "body": {
                      "client_session": {
                        "client_session_id": "client_session_id",
                        "connect_webview_ids": [
                          "connect_webview_ids",
                        ],
                        "connected_account_ids": [
                          "connected_account_ids",
                        ],
                        "created_at": "2024-01-15T09:30:00Z",
                        "device_count": 1.1,
                        "token": "token",
                        "user_identifier_key": "user_identifier_key",
                        "user_identity_ids": [
                          "user_identity_ids",
                        ],
                        "workspace_id": "workspace_id",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/client_sessions/get",
              "request": {
                "body": {
                  "properties": {
                    "client_session_id": "optional<string>",
                    "user_identifier_key": "optional<string>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ClientSessionsGetRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "client_session",
                "type": "ClientSessionsGetResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get_or_create": {
              "auth": false,
              "display-name": "/client_sessions/get_or_create",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {},
                  "response": {
                    "body": {
                      "client_session": {
                        "client_session_id": "client_session_id",
                        "connect_webview_ids": [
                          "connect_webview_ids",
                        ],
                        "connected_account_ids": [
                          "connected_account_ids",
                        ],
                        "created_at": "2024-01-15T09:30:00Z",
                        "device_count": 1.1,
                        "token": "token",
                        "user_identifier_key": "user_identifier_key",
                        "user_identity_ids": [
                          "user_identity_ids",
                        ],
                        "workspace_id": "workspace_id",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/client_sessions/get_or_create",
              "request": {
                "body": {
                  "properties": {
                    "connect_webview_ids": "optional<list<string>>",
                    "connected_account_ids": "optional<list<string>>",
                    "expires_at": "optional<datetime>",
                    "user_identifier_key": {
                      "type": "optional<string>",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": 1,
                        "pattern": undefined,
                      },
                    },
                    "user_identity_ids": "optional<list<string>>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ClientSessionsGetOrCreateRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "client_session",
                "type": "ClientSessionsGetOrCreateResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "grant_access": {
              "auth": true,
              "display-name": "/client_sessions/grant_access",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {},
                  "response": {
                    "body": {
                      "client_session": {
                        "client_session_id": "client_session_id",
                        "connect_webview_ids": [
                          "connect_webview_ids",
                        ],
                        "connected_account_ids": [
                          "connected_account_ids",
                        ],
                        "created_at": "2024-01-15T09:30:00Z",
                        "device_count": 1.1,
                        "token": "token",
                        "user_identifier_key": "user_identifier_key",
                        "user_identity_ids": [
                          "user_identity_ids",
                        ],
                        "workspace_id": "workspace_id",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/client_sessions/grant_access",
              "request": {
                "body": {
                  "properties": {
                    "client_session_id": "optional<string>",
                    "connect_webview_ids": "optional<list<string>>",
                    "connected_account_ids": "optional<list<string>>",
                    "user_identifier_key": "optional<string>",
                    "user_identity_ids": "optional<list<string>>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ClientSessionsGrantAccessRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "type": "ClientSessionsGrantAccessResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list": {
              "auth": true,
              "display-name": "/client_sessions/list",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {},
                  "response": {
                    "body": {
                      "client_sessions": [
                        {
                          "client_session_id": "client_session_id",
                          "connect_webview_ids": [
                            "connect_webview_ids",
                          ],
                          "connected_account_ids": [
                            "connected_account_ids",
                          ],
                          "created_at": "2024-01-15T09:30:00Z",
                          "device_count": 1.1,
                          "token": "token",
                          "user_identifier_key": "user_identifier_key",
                          "user_identity_ids": [
                            "user_identity_ids",
                          ],
                          "workspace_id": "workspace_id",
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/client_sessions/list",
              "request": {
                "body": {
                  "properties": {
                    "client_session_id": "optional<string>",
                    "connect_webview_id": "optional<string>",
                    "user_identifier_key": "optional<string>",
                    "user_identity_id": "optional<string>",
                    "without_user_identifier_key": "optional<boolean>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ClientSessionsListRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "client_sessions",
                "type": "ClientSessionsListResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "revoke": {
              "auth": true,
              "display-name": "/client_sessions/revoke",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "client_session_id": "client_session_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/client_sessions/revoke",
              "request": {
                "body": {
                  "properties": {
                    "client_session_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ClientSessionsRevokeRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "type": "ClientSessionsRevokeResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "ClientSessionsCreateResponse": {
            "docs": undefined,
            "properties": {
              "client_session": "root.ClientSession",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ClientSessionsDeleteResponse": {
            "docs": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ClientSessionsGetOrCreateResponse": {
            "docs": undefined,
            "properties": {
              "client_session": "root.ClientSession",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ClientSessionsGetResponse": {
            "docs": undefined,
            "properties": {
              "client_session": "root.ClientSession",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ClientSessionsGrantAccessResponse": {
            "docs": undefined,
            "properties": {
              "client_session": "root.ClientSession",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ClientSessionsListResponse": {
            "docs": undefined,
            "properties": {
              "client_sessions": "list<root.ClientSession>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ClientSessionsRevokeResponse": {
            "docs": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
types:
  ClientSessionsCreateResponse:
    properties:
      client_session: root.ClientSession
      ok: boolean
    source:
      openapi: ../openapi.json
  ClientSessionsDeleteResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
  ClientSessionsGetResponse:
    properties:
      client_session: root.ClientSession
      ok: boolean
    source:
      openapi: ../openapi.json
  ClientSessionsGetOrCreateResponse:
    properties:
      client_session: root.ClientSession
      ok: boolean
    source:
      openapi: ../openapi.json
  ClientSessionsGrantAccessResponse:
    properties:
      client_session: root.ClientSession
      ok: boolean
    source:
      openapi: ../openapi.json
  ClientSessionsListResponse:
    properties:
      client_sessions: list<root.ClientSession>
      ok: boolean
    source:
      openapi: ../openapi.json
  ClientSessionsRevokeResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
service:
  auth: false
  base-path: ''
  endpoints:
    create:
      path: /client_sessions/create
      method: POST
      auth: false
      source:
        openapi: ../openapi.json
      display-name: /client_sessions/create
      request:
        name: ClientSessionsCreateRequest
        body:
          properties:
            user_identifier_key:
              type: optional<string>
              validation:
                minLength: 1
            connect_webview_ids: optional<list<string>>
            connected_account_ids: optional<list<string>>
            user_identity_ids: optional<list<string>>
            expires_at: optional<datetime>
        content-type: application/json
      response:
        docs: OK
        type: ClientSessionsCreateResponse
        property: client_session
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request: {}
          response:
            body:
              client_session:
                client_session_id: client_session_id
                workspace_id: workspace_id
                created_at: '2024-01-15T09:30:00Z'
                token: token
                user_identifier_key: user_identifier_key
                device_count: 1.1
                connected_account_ids:
                  - connected_account_ids
                connect_webview_ids:
                  - connect_webview_ids
                user_identity_ids:
                  - user_identity_ids
              ok: true
    delete:
      path: /client_sessions/delete
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /client_sessions/delete
      request:
        name: ClientSessionsDeleteRequest
        body:
          properties:
            client_session_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: ClientSessionsDeleteResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            client_session_id: client_session_id
          response:
            body:
              ok: true
    get:
      path: /client_sessions/get
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /client_sessions/get
      request:
        name: ClientSessionsGetRequest
        body:
          properties:
            client_session_id: optional<string>
            user_identifier_key: optional<string>
        content-type: application/json
      response:
        docs: OK
        type: ClientSessionsGetResponse
        property: client_session
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request: {}
          response:
            body:
              client_session:
                client_session_id: client_session_id
                workspace_id: workspace_id
                created_at: '2024-01-15T09:30:00Z'
                token: token
                user_identifier_key: user_identifier_key
                device_count: 1.1
                connected_account_ids:
                  - connected_account_ids
                connect_webview_ids:
                  - connect_webview_ids
                user_identity_ids:
                  - user_identity_ids
              ok: true
    get_or_create:
      path: /client_sessions/get_or_create
      method: POST
      auth: false
      source:
        openapi: ../openapi.json
      display-name: /client_sessions/get_or_create
      request:
        name: ClientSessionsGetOrCreateRequest
        body:
          properties:
            user_identifier_key:
              type: optional<string>
              validation:
                minLength: 1
            connect_webview_ids: optional<list<string>>
            connected_account_ids: optional<list<string>>
            user_identity_ids: optional<list<string>>
            expires_at: optional<datetime>
        content-type: application/json
      response:
        docs: OK
        type: ClientSessionsGetOrCreateResponse
        property: client_session
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request: {}
          response:
            body:
              client_session:
                client_session_id: client_session_id
                workspace_id: workspace_id
                created_at: '2024-01-15T09:30:00Z'
                token: token
                user_identifier_key: user_identifier_key
                device_count: 1.1
                connected_account_ids:
                  - connected_account_ids
                connect_webview_ids:
                  - connect_webview_ids
                user_identity_ids:
                  - user_identity_ids
              ok: true
    grant_access:
      path: /client_sessions/grant_access
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /client_sessions/grant_access
      request:
        name: ClientSessionsGrantAccessRequest
        body:
          properties:
            client_session_id: optional<string>
            user_identifier_key: optional<string>
            connected_account_ids: optional<list<string>>
            connect_webview_ids: optional<list<string>>
            user_identity_ids: optional<list<string>>
        content-type: application/json
      response:
        docs: OK
        type: ClientSessionsGrantAccessResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request: {}
          response:
            body:
              client_session:
                client_session_id: client_session_id
                workspace_id: workspace_id
                created_at: '2024-01-15T09:30:00Z'
                token: token
                user_identifier_key: user_identifier_key
                device_count: 1.1
                connected_account_ids:
                  - connected_account_ids
                connect_webview_ids:
                  - connect_webview_ids
                user_identity_ids:
                  - user_identity_ids
              ok: true
    list:
      path: /client_sessions/list
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /client_sessions/list
      request:
        name: ClientSessionsListRequest
        body:
          properties:
            client_session_id: optional<string>
            user_identifier_key: optional<string>
            connect_webview_id: optional<string>
            without_user_identifier_key: optional<boolean>
            user_identity_id: optional<string>
        content-type: application/json
      response:
        docs: OK
        type: ClientSessionsListResponse
        property: client_sessions
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request: {}
          response:
            body:
              client_sessions:
                - client_session_id: client_session_id
                  workspace_id: workspace_id
                  created_at: '2024-01-15T09:30:00Z'
                  token: token
                  user_identifier_key: user_identifier_key
                  device_count: 1.1
                  connected_account_ids:
                    - connected_account_ids
                  connect_webview_ids:
                    - connect_webview_ids
                  user_identity_ids:
                    - user_identity_ids
              ok: true
    revoke:
      path: /client_sessions/revoke
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /client_sessions/revoke
      request:
        name: ClientSessionsRevokeRequest
        body:
          properties:
            client_session_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: ClientSessionsRevokeResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            client_session_id: client_session_id
          response:
            body:
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "connectWebviews.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "create": {
              "auth": true,
              "display-name": "/connect_webviews/create",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {},
                  "response": {
                    "body": {
                      "connect_webview": {
                        "accepted_devices": [
                          "accepted_devices",
                        ],
                        "accepted_providers": [
                          "accepted_providers",
                        ],
                        "any_device_allowed": true,
                        "any_provider_allowed": true,
                        "authorized_at": "2024-01-15T09:30:00Z",
                        "automatically_manage_new_devices": true,
                        "connect_webview_id": "connect_webview_id",
                        "connected_account_id": "connected_account_id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "custom_metadata": {
                          "key": "value",
                        },
                        "custom_redirect_failure_url": "custom_redirect_failure_url",
                        "custom_redirect_url": "custom_redirect_url",
                        "device_selection_mode": "none",
                        "login_successful": true,
                        "selected_provider": "selected_provider",
                        "status": "pending",
                        "url": "url",
                        "wait_for_device_creation": true,
                        "workspace_id": "workspace_id",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/connect_webviews/create",
              "request": {
                "body": {
                  "properties": {
                    "accepted_providers": "optional<list<ConnectWebviewsCreateRequestAcceptedProvidersItem>>",
                    "automatically_manage_new_devices": {
                      "default": true,
                      "type": "optional<boolean>",
                    },
                    "custom_metadata": "optional<map<string, optional<ConnectWebviewsCreateRequestCustomMetadataValue>>>",
                    "custom_redirect_failure_url": "optional<string>",
                    "custom_redirect_url": "optional<string>",
                    "device_selection_mode": "optional<ConnectWebviewsCreateRequestDeviceSelectionMode>",
                    "provider_category": "optional<ConnectWebviewsCreateRequestProviderCategory>",
                    "wait_for_device_creation": {
                      "default": false,
                      "type": "optional<boolean>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ConnectWebviewsCreateRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "connect_webview",
                "type": "ConnectWebviewsCreateResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "delete": {
              "auth": true,
              "display-name": "/connect_webviews/delete",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "connect_webview_id": "connect_webview_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/connect_webviews/delete",
              "request": {
                "body": {
                  "properties": {
                    "connect_webview_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ConnectWebviewsDeleteRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "type": "ConnectWebviewsDeleteResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get": {
              "auth": true,
              "display-name": "/connect_webviews/get",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "connect_webview_id": "connect_webview_id",
                  },
                  "response": {
                    "body": {
                      "connect_webview": {
                        "accepted_devices": [
                          "accepted_devices",
                        ],
                        "accepted_providers": [
                          "accepted_providers",
                        ],
                        "any_device_allowed": true,
                        "any_provider_allowed": true,
                        "authorized_at": "2024-01-15T09:30:00Z",
                        "automatically_manage_new_devices": true,
                        "connect_webview_id": "connect_webview_id",
                        "connected_account_id": "connected_account_id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "custom_metadata": {
                          "key": "value",
                        },
                        "custom_redirect_failure_url": "custom_redirect_failure_url",
                        "custom_redirect_url": "custom_redirect_url",
                        "device_selection_mode": "none",
                        "login_successful": true,
                        "selected_provider": "selected_provider",
                        "status": "pending",
                        "url": "url",
                        "wait_for_device_creation": true,
                        "workspace_id": "workspace_id",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/connect_webviews/get",
              "request": {
                "body": {
                  "properties": {
                    "connect_webview_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ConnectWebviewsGetRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "connect_webview",
                "type": "ConnectWebviewsGetResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list": {
              "auth": true,
              "display-name": "/connect_webviews/list",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {},
                  "response": {
                    "body": {
                      "connect_webviews": [
                        {
                          "accepted_devices": [
                            "accepted_devices",
                          ],
                          "accepted_providers": [
                            "accepted_providers",
                          ],
                          "any_device_allowed": true,
                          "any_provider_allowed": true,
                          "authorized_at": "2024-01-15T09:30:00Z",
                          "automatically_manage_new_devices": true,
                          "connect_webview_id": "connect_webview_id",
                          "connected_account_id": "connected_account_id",
                          "created_at": "2024-01-15T09:30:00Z",
                          "custom_metadata": {
                            "key": "value",
                          },
                          "custom_redirect_failure_url": "custom_redirect_failure_url",
                          "custom_redirect_url": "custom_redirect_url",
                          "device_selection_mode": "none",
                          "login_successful": true,
                          "selected_provider": "selected_provider",
                          "status": "pending",
                          "url": "url",
                          "wait_for_device_creation": true,
                          "workspace_id": "workspace_id",
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/connect_webviews/list",
              "request": {
                "body": {
                  "properties": {
                    "custom_metadata_has": {
                      "docs": "Returns devices where the webview's custom_metadata contains all of the provided key/value pairs.",
                      "type": "optional<map<string, ConnectWebviewsListRequestCustomMetadataHasValue>>",
                    },
                    "limit": {
                      "default": 500,
                      "type": "optional<double>",
                    },
                    "user_identifier_key": "optional<string>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ConnectWebviewsListRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "connect_webviews",
                "type": "ConnectWebviewsListResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "ConnectWebviewsCreateRequestAcceptedProvidersItem": {
            "enum": [
              "akuvox",
              "august",
              "avigilon_alta",
              "brivo",
              "butterflymx",
              "schlage",
              "smartthings",
              "yale",
              "genie",
              "doorking",
              "salto",
              "lockly",
              "ttlock",
              "linear",
              "noiseaware",
              "nuki",
              "seam_relay_admin",
              "igloo",
              "kwikset",
              "minut",
              "my_2n",
              "controlbyweb",
              "nest",
              "igloohome",
              "ecobee",
              "hubitat",
              "four_suites",
              "dormakaba_oracode",
              "pti",
              "wyze",
              "seam_passport",
              "visionline",
              "assa_abloy_credential_service",
              "seam_bridge",
              "tedee",
              "honeywell_resideo",
              "latch",
              "yale_access",
              "hid_cm",
              "google_nest",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ConnectWebviewsCreateRequestCustomMetadataValue": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
            "union": [
              {
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": 500,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "boolean",
              "optional<string>",
            ],
          },
          "ConnectWebviewsCreateRequestDeviceSelectionMode": {
            "enum": [
              "none",
              "single",
              "multiple",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ConnectWebviewsCreateRequestProviderCategory": {
            "enum": [
              "stable",
              "consumer_smartlocks",
              "thermostats",
              "noise_sensors",
              "access_control_systems",
              "internal_beta",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ConnectWebviewsCreateResponse": {
            "docs": undefined,
            "properties": {
              "connect_webview": "root.ConnectWebview",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ConnectWebviewsDeleteResponse": {
            "docs": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ConnectWebviewsGetResponse": {
            "docs": undefined,
            "properties": {
              "connect_webview": "root.ConnectWebview",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ConnectWebviewsListRequestCustomMetadataHasValue": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
            "union": [
              "string",
              "boolean",
            ],
          },
          "ConnectWebviewsListResponse": {
            "docs": undefined,
            "properties": {
              "connect_webviews": "list<root.ConnectWebview>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "types:
  ConnectWebviewsCreateRequestDeviceSelectionMode:
    enum:
      - none
      - single
      - multiple
    source:
      openapi: ../openapi.json
  ConnectWebviewsCreateRequestAcceptedProvidersItem:
    enum:
      - akuvox
      - august
      - avigilon_alta
      - brivo
      - butterflymx
      - schlage
      - smartthings
      - yale
      - genie
      - doorking
      - salto
      - lockly
      - ttlock
      - linear
      - noiseaware
      - nuki
      - seam_relay_admin
      - igloo
      - kwikset
      - minut
      - my_2n
      - controlbyweb
      - nest
      - igloohome
      - ecobee
      - hubitat
      - four_suites
      - dormakaba_oracode
      - pti
      - wyze
      - seam_passport
      - visionline
      - assa_abloy_credential_service
      - seam_bridge
      - tedee
      - honeywell_resideo
      - latch
      - yale_access
      - hid_cm
      - google_nest
    source:
      openapi: ../openapi.json
  ConnectWebviewsCreateRequestProviderCategory:
    enum:
      - stable
      - consumer_smartlocks
      - thermostats
      - noise_sensors
      - access_control_systems
      - internal_beta
    source:
      openapi: ../openapi.json
  ConnectWebviewsCreateRequestCustomMetadataValue:
    discriminated: false
    union:
      - type: string
        validation:
          maxLength: 500
      - boolean
      - optional<string>
    source:
      openapi: ../openapi.json
  ConnectWebviewsCreateResponse:
    properties:
      connect_webview: root.ConnectWebview
      ok: boolean
    source:
      openapi: ../openapi.json
  ConnectWebviewsDeleteResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
  ConnectWebviewsGetResponse:
    properties:
      connect_webview: root.ConnectWebview
      ok: boolean
    source:
      openapi: ../openapi.json
  ConnectWebviewsListRequestCustomMetadataHasValue:
    discriminated: false
    union:
      - string
      - boolean
    source:
      openapi: ../openapi.json
  ConnectWebviewsListResponse:
    properties:
      connect_webviews: list<root.ConnectWebview>
      ok: boolean
    source:
      openapi: ../openapi.json
imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    create:
      path: /connect_webviews/create
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /connect_webviews/create
      request:
        name: ConnectWebviewsCreateRequest
        body:
          properties:
            device_selection_mode: optional<ConnectWebviewsCreateRequestDeviceSelectionMode>
            custom_redirect_url: optional<string>
            custom_redirect_failure_url: optional<string>
            accepted_providers: optional<list<ConnectWebviewsCreateRequestAcceptedProvidersItem>>
            provider_category: optional<ConnectWebviewsCreateRequestProviderCategory>
            custom_metadata: >-
              optional<map<string,
              optional<ConnectWebviewsCreateRequestCustomMetadataValue>>>
            automatically_manage_new_devices:
              type: optional<boolean>
              default: true
            wait_for_device_creation:
              type: optional<boolean>
              default: false
        content-type: application/json
      response:
        docs: OK
        type: ConnectWebviewsCreateResponse
        property: connect_webview
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request: {}
          response:
            body:
              connect_webview:
                connect_webview_id: connect_webview_id
                workspace_id: workspace_id
                created_at: '2024-01-15T09:30:00Z'
                connected_account_id: connected_account_id
                url: url
                device_selection_mode: none
                accepted_providers:
                  - accepted_providers
                accepted_devices:
                  - accepted_devices
                any_device_allowed: true
                any_provider_allowed: true
                login_successful: true
                status: pending
                custom_redirect_url: custom_redirect_url
                custom_redirect_failure_url: custom_redirect_failure_url
                custom_metadata:
                  key: value
                automatically_manage_new_devices: true
                wait_for_device_creation: true
                authorized_at: '2024-01-15T09:30:00Z'
                selected_provider: selected_provider
              ok: true
    delete:
      path: /connect_webviews/delete
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /connect_webviews/delete
      request:
        name: ConnectWebviewsDeleteRequest
        body:
          properties:
            connect_webview_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: ConnectWebviewsDeleteResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            connect_webview_id: connect_webview_id
          response:
            body:
              ok: true
    get:
      path: /connect_webviews/get
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /connect_webviews/get
      request:
        name: ConnectWebviewsGetRequest
        body:
          properties:
            connect_webview_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: ConnectWebviewsGetResponse
        property: connect_webview
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            connect_webview_id: connect_webview_id
          response:
            body:
              connect_webview:
                connect_webview_id: connect_webview_id
                workspace_id: workspace_id
                created_at: '2024-01-15T09:30:00Z'
                connected_account_id: connected_account_id
                url: url
                device_selection_mode: none
                accepted_providers:
                  - accepted_providers
                accepted_devices:
                  - accepted_devices
                any_device_allowed: true
                any_provider_allowed: true
                login_successful: true
                status: pending
                custom_redirect_url: custom_redirect_url
                custom_redirect_failure_url: custom_redirect_failure_url
                custom_metadata:
                  key: value
                automatically_manage_new_devices: true
                wait_for_device_creation: true
                authorized_at: '2024-01-15T09:30:00Z'
                selected_provider: selected_provider
              ok: true
    list:
      path: /connect_webviews/list
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /connect_webviews/list
      request:
        name: ConnectWebviewsListRequest
        body:
          properties:
            user_identifier_key: optional<string>
            custom_metadata_has:
              type: >-
                optional<map<string,
                ConnectWebviewsListRequestCustomMetadataHasValue>>
              docs: >-
                Returns devices where the webview's custom_metadata contains all
                of the provided key/value pairs.
            limit:
              type: optional<double>
              default: 500
        content-type: application/json
      response:
        docs: OK
        type: ConnectWebviewsListResponse
        property: connect_webviews
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request: {}
          response:
            body:
              connect_webviews:
                - connect_webview_id: connect_webview_id
                  workspace_id: workspace_id
                  created_at: '2024-01-15T09:30:00Z'
                  connected_account_id: connected_account_id
                  url: url
                  device_selection_mode: none
                  accepted_providers:
                    - accepted_providers
                  accepted_devices:
                    - accepted_devices
                  any_device_allowed: true
                  any_provider_allowed: true
                  login_successful: true
                  status: pending
                  custom_redirect_url: custom_redirect_url
                  custom_redirect_failure_url: custom_redirect_failure_url
                  custom_metadata:
                    key: value
                  automatically_manage_new_devices: true
                  wait_for_device_creation: true
                  authorized_at: '2024-01-15T09:30:00Z'
                  selected_provider: selected_provider
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "connectedAccounts.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "delete": {
              "auth": true,
              "display-name": "/connected_accounts/delete",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "connected_account_id": "connected_account_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/connected_accounts/delete",
              "request": {
                "body": {
                  "properties": {
                    "connected_account_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "sync": {
                      "default": false,
                      "type": "optional<boolean>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ConnectedAccountsDeleteRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "type": "ConnectedAccountsDeleteResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get": {
              "auth": true,
              "display-name": "/connected_accounts/get",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "connected_account_id": "connected_account_id",
                  },
                  "response": {
                    "body": {
                      "connected_account": {
                        "account_type": "account_type",
                        "account_type_display_name": "account_type_display_name",
                        "automatically_manage_new_devices": true,
                        "connected_account_id": "connected_account_id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "custom_metadata": {
                          "key": "value",
                        },
                        "errors": {
                          "key": "value",
                        },
                        "user_identifier": {
                          "api_url": "api_url",
                          "email": "email",
                          "exclusive": true,
                          "phone": "phone",
                          "username": "username",
                        },
                        "warnings": {
                          "key": "value",
                        },
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/connected_accounts/get",
              "request": {
                "body": "ConnectedAccountsGetRequest",
                "content-type": "application/json",
              },
              "response": {
                "docs": "OK",
                "property": "connected_account",
                "type": "ConnectedAccountsGetResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list": {
              "auth": true,
              "display-name": "/connected_accounts/list",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {},
                  "response": {
                    "body": {
                      "connected_accounts": [
                        {
                          "account_type": "account_type",
                          "account_type_display_name": "account_type_display_name",
                          "automatically_manage_new_devices": true,
                          "connected_account_id": "connected_account_id",
                          "created_at": "2024-01-15T09:30:00Z",
                          "custom_metadata": {
                            "key": "value",
                          },
                          "errors": {
                            "key": "value",
                          },
                          "warnings": {
                            "key": "value",
                          },
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/connected_accounts/list",
              "request": {
                "body": {
                  "properties": {
                    "custom_metadata_has": {
                      "docs": "Returns devices where the account's custom_metadata contains all of the provided key/value pairs.",
                      "type": "optional<map<string, ConnectedAccountsListRequestCustomMetadataHasValue>>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ConnectedAccountsListRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "connected_accounts",
                "type": "ConnectedAccountsListResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "update": {
              "auth": true,
              "display-name": "/connected_accounts/update",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "connected_account_id": "connected_account_id",
                  },
                  "response": {
                    "body": {
                      "connected_account": {
                        "account_type": "account_type",
                        "account_type_display_name": "account_type_display_name",
                        "automatically_manage_new_devices": true,
                        "connected_account_id": "connected_account_id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "custom_metadata": {
                          "key": "value",
                        },
                        "errors": {
                          "key": "value",
                        },
                        "user_identifier": {
                          "api_url": "api_url",
                          "email": "email",
                          "exclusive": true,
                          "phone": "phone",
                          "username": "username",
                        },
                        "warnings": {
                          "key": "value",
                        },
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/connected_accounts/update",
              "request": {
                "body": {
                  "properties": {
                    "automatically_manage_new_devices": "optional<boolean>",
                    "connected_account_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "custom_metadata": "optional<map<string, optional<ConnectedAccountsUpdateRequestCustomMetadataValue>>>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ConnectedAccountsUpdateRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "connected_account",
                "type": "ConnectedAccountsUpdateResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "ConnectedAccountsDeleteResponse": {
            "docs": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ConnectedAccountsGetRequest": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
            "union": [
              "ConnectedAccountsGetRequestConnectedAccountId",
              "ConnectedAccountsGetRequestEmail",
            ],
          },
          "ConnectedAccountsGetRequestConnectedAccountId": {
            "docs": undefined,
            "properties": {
              "connected_account_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ConnectedAccountsGetRequestEmail": {
            "docs": undefined,
            "properties": {
              "email": {
                "type": "string",
                "validation": {
                  "format": "email",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ConnectedAccountsGetResponse": {
            "docs": undefined,
            "properties": {
              "connected_account": "root.ConnectedAccount",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ConnectedAccountsListRequestCustomMetadataHasValue": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
            "union": [
              "string",
              "boolean",
            ],
          },
          "ConnectedAccountsListResponse": {
            "docs": undefined,
            "properties": {
              "connected_accounts": "list<root.ConnectedAccount>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ConnectedAccountsUpdateRequestCustomMetadataValue": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
            "union": [
              {
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": 500,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "boolean",
              "optional<string>",
            ],
          },
          "ConnectedAccountsUpdateResponse": {
            "docs": undefined,
            "properties": {
              "connected_account": "root.ConnectedAccount",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "types:
  ConnectedAccountsDeleteResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
  ConnectedAccountsGetRequestConnectedAccountId:
    properties:
      connected_account_id:
        type: string
        validation:
          format: uuid
    source:
      openapi: ../openapi.json
  ConnectedAccountsGetRequestEmail:
    properties:
      email:
        type: string
        validation:
          format: email
    source:
      openapi: ../openapi.json
  ConnectedAccountsGetRequest:
    discriminated: false
    union:
      - ConnectedAccountsGetRequestConnectedAccountId
      - ConnectedAccountsGetRequestEmail
    source:
      openapi: ../openapi.json
  ConnectedAccountsGetResponse:
    properties:
      connected_account: root.ConnectedAccount
      ok: boolean
    source:
      openapi: ../openapi.json
  ConnectedAccountsListRequestCustomMetadataHasValue:
    discriminated: false
    union:
      - string
      - boolean
    source:
      openapi: ../openapi.json
  ConnectedAccountsListResponse:
    properties:
      connected_accounts: list<root.ConnectedAccount>
      ok: boolean
    source:
      openapi: ../openapi.json
  ConnectedAccountsUpdateRequestCustomMetadataValue:
    discriminated: false
    union:
      - type: string
        validation:
          maxLength: 500
      - boolean
      - optional<string>
    source:
      openapi: ../openapi.json
  ConnectedAccountsUpdateResponse:
    properties:
      connected_account: root.ConnectedAccount
      ok: boolean
    source:
      openapi: ../openapi.json
imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    delete:
      path: /connected_accounts/delete
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /connected_accounts/delete
      request:
        name: ConnectedAccountsDeleteRequest
        body:
          properties:
            connected_account_id:
              type: string
              validation:
                format: uuid
            sync:
              type: optional<boolean>
              default: false
        content-type: application/json
      response:
        docs: OK
        type: ConnectedAccountsDeleteResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            connected_account_id: connected_account_id
          response:
            body:
              ok: true
    get:
      path: /connected_accounts/get
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /connected_accounts/get
      request:
        body: ConnectedAccountsGetRequest
        content-type: application/json
      response:
        docs: OK
        type: ConnectedAccountsGetResponse
        property: connected_account
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            connected_account_id: connected_account_id
          response:
            body:
              connected_account:
                connected_account_id: connected_account_id
                created_at: '2024-01-15T09:30:00Z'
                user_identifier:
                  username: username
                  api_url: api_url
                  email: email
                  phone: phone
                  exclusive: true
                account_type: account_type
                account_type_display_name: account_type_display_name
                errors:
                  key: value
                warnings:
                  key: value
                custom_metadata:
                  key: value
                automatically_manage_new_devices: true
              ok: true
    list:
      path: /connected_accounts/list
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /connected_accounts/list
      request:
        name: ConnectedAccountsListRequest
        body:
          properties:
            custom_metadata_has:
              type: >-
                optional<map<string,
                ConnectedAccountsListRequestCustomMetadataHasValue>>
              docs: >-
                Returns devices where the account's custom_metadata contains all
                of the provided key/value pairs.
        content-type: application/json
      response:
        docs: OK
        type: ConnectedAccountsListResponse
        property: connected_accounts
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request: {}
          response:
            body:
              connected_accounts:
                - connected_account_id: connected_account_id
                  created_at: '2024-01-15T09:30:00Z'
                  account_type: account_type
                  account_type_display_name: account_type_display_name
                  errors:
                    key: value
                  warnings:
                    key: value
                  custom_metadata:
                    key: value
                  automatically_manage_new_devices: true
              ok: true
    update:
      path: /connected_accounts/update
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /connected_accounts/update
      request:
        name: ConnectedAccountsUpdateRequest
        body:
          properties:
            connected_account_id:
              type: string
              validation:
                format: uuid
            automatically_manage_new_devices: optional<boolean>
            custom_metadata: >-
              optional<map<string,
              optional<ConnectedAccountsUpdateRequestCustomMetadataValue>>>
        content-type: application/json
      response:
        docs: OK
        type: ConnectedAccountsUpdateResponse
        property: connected_account
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            connected_account_id: connected_account_id
          response:
            body:
              connected_account:
                connected_account_id: connected_account_id
                created_at: '2024-01-15T09:30:00Z'
                user_identifier:
                  username: username
                  api_url: api_url
                  email: email
                  phone: phone
                  exclusive: true
                account_type: account_type
                account_type_display_name: account_type_display_name
                errors:
                  key: value
                warnings:
                  key: value
                custom_metadata:
                  key: value
                automatically_manage_new_devices: true
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "devices.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "delete": {
              "auth": true,
              "display-name": "/devices/delete",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "device_id": "device_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/devices/delete",
              "request": {
                "body": {
                  "properties": {
                    "device_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "DevicesDeleteRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "type": "DevicesDeleteResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get": {
              "auth": true,
              "display-name": "/devices/get",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {},
                  "response": {
                    "body": {
                      "device": {
                        "can_program_offline_access_codes": true,
                        "can_program_online_access_codes": true,
                        "can_remotely_lock": true,
                        "can_remotely_unlock": true,
                        "can_simulate_connection": true,
                        "can_simulate_disconnection": true,
                        "can_simulate_removal": true,
                        "capabilities_supported": [
                          "access_code",
                        ],
                        "connected_account_id": "connected_account_id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "custom_metadata": {
                          "key": "value",
                        },
                        "device_id": "device_id",
                        "device_type": "akuvox_lock",
                        "display_name": "display_name",
                        "errors": [
                          {
                            "error_code": "error_code",
                            "message": "message",
                          },
                        ],
                        "is_managed": true,
                        "location": {
                          "location_name": "location_name",
                          "timezone": "timezone",
                        },
                        "nickname": "nickname",
                        "properties": {
                          "_experimental_supported_code_from_access_codes_lengths": [
                            1.1,
                          ],
                          "accessory_keypad": {
                            "is_connected": true,
                          },
                          "appearance": {
                            "name": "name",
                          },
                          "assa_abloy_credential_service_metadata": {
                            "endpoints": [
                              {
                                "endpoint_id": "endpoint_id",
                                "is_active": true,
                              },
                            ],
                            "has_active_endpoint": true,
                          },
                          "august_metadata": {
                            "has_keypad": true,
                            "house_name": "house_name",
                            "lock_id": "lock_id",
                            "lock_name": "lock_name",
                          },
                          "avigilon_alta_metadata": {
                            "entry_name": "entry_name",
                            "entry_relays_total_count": 1.1,
                            "org_name": "org_name",
                            "site_id": 1.1,
                            "site_name": "site_name",
                            "zone_id": 1.1,
                            "zone_name": "zone_name",
                          },
                          "battery": {
                            "level": 1.1,
                            "status": "critical",
                          },
                          "battery_level": 1.1,
                          "brivo_metadata": {
                            "device_name": "device_name",
                          },
                          "code_constraints": [
                            {
                              "constraint_type": "no_zeros",
                            },
                          ],
                          "controlbyweb_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                          },
                          "currently_triggering_noise_threshold_ids": [
                            "currently_triggering_noise_threshold_ids",
                          ],
                          "door_open": true,
                          "dormakaba_oracode_metadata": {
                            "door_id": 1.1,
                            "door_is_wireless": true,
                            "door_name": "door_name",
                            "site_id": 1.1,
                            "site_name": "site_name",
                          },
                          "ecobee_metadata": {
                            "device_name": "device_name",
                            "ecobee_device_id": "ecobee_device_id",
                          },
                          "four_suites_metadata": {
                            "device_id": 1.1,
                            "device_name": "device_name",
                            "reclose_delay_in_seconds": 1.1,
                          },
                          "genie_metadata": {
                            "device_name": "device_name",
                            "door_name": "door_name",
                          },
                          "has_direct_power": true,
                          "has_native_entry_events": true,
                          "honeywell_resideo_metadata": {
                            "device_name": "device_name",
                            "honeywell_resideo_device_id": "honeywell_resideo_device_id",
                          },
                          "hubitat_metadata": {
                            "device_id": "device_id",
                            "device_label": "device_label",
                            "device_name": "device_name",
                          },
                          "igloo_metadata": {
                            "bridge_id": "bridge_id",
                            "device_id": "device_id",
                          },
                          "igloohome_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                          },
                          "image_alt_text": "image_alt_text",
                          "image_url": "image_url",
                          "keypad_battery": {
                            "level": 1.1,
                          },
                          "kwikset_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                            "model_number": "model_number",
                          },
                          "locked": true,
                          "lockly_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                          },
                          "manufacturer": "manufacturer",
                          "max_active_codes_supported": 1.1,
                          "minut_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                            "latest_sensor_values": {
                              "accelerometer_z": {
                                "time": "time",
                                "value": 1.1,
                              },
                              "humidity": {
                                "time": "time",
                                "value": 1.1,
                              },
                              "pressure": {
                                "time": "time",
                                "value": 1.1,
                              },
                              "sound": {
                                "time": "time",
                                "value": 1.1,
                              },
                              "temperature": {
                                "time": "time",
                                "value": 1.1,
                              },
                            },
                          },
                          "model": {
                            "display_name": "display_name",
                            "manufacturer_display_name": "manufacturer_display_name",
                          },
                          "name": "name",
                          "nest_metadata": {
                            "custom_name": "custom_name",
                            "device_name": "device_name",
                            "nest_device_id": "nest_device_id",
                          },
                          "noise_level_decibels": 1.1,
                          "noiseaware_metadata": {
                            "device_id": "device_id",
                            "device_model": "indoor",
                            "device_name": "device_name",
                            "noise_level_decibel": 1.1,
                            "noise_level_nrs": 1.1,
                          },
                          "nuki_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                          },
                          "offline_access_codes_enabled": true,
                          "online": true,
                          "online_access_codes_enabled": true,
                          "salto_metadata": {
                            "battery_level": "battery_level",
                            "customer_reference": "customer_reference",
                            "lock_id": "lock_id",
                            "lock_type": "lock_type",
                            "locked_state": "locked_state",
                          },
                          "schlage_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                          },
                          "seam_bridge_metadata": {
                            "device_num": 1.1,
                            "name": "name",
                          },
                          "serial_number": "serial_number",
                          "smartthings_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                          },
                          "supported_code_lengths": [
                            1.1,
                          ],
                          "supports_accessory_keypad": true,
                          "supports_backup_access_code_pool": true,
                          "supports_offline_access_codes": true,
                          "tedee_metadata": {
                            "bridge_id": 1.1,
                            "bridge_name": "bridge_name",
                            "device_id": 1.1,
                            "device_model": "device_model",
                            "device_name": "device_name",
                            "serial_number": "serial_number",
                          },
                          "ttlock_metadata": {
                            "feature_value": "feature_value",
                            "lock_alias": "lock_alias",
                            "lock_id": 1.1,
                          },
                          "two_n_metadata": {
                            "device_id": 1.1,
                            "device_name": "device_name",
                          },
                          "wyze_metadata": {
                            "device_id": "device_id",
                            "device_info_model": "device_info_model",
                            "device_name": "device_name",
                            "product_model": "product_model",
                            "product_name": "product_name",
                            "product_type": "product_type",
                          },
                        },
                        "warnings": [
                          {
                            "message": "message",
                            "warning_code": "warning_code",
                          },
                        ],
                        "workspace_id": "workspace_id",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/devices/get",
              "request": {
                "body": {
                  "properties": {
                    "device_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "name": "optional<string>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "DevicesGetRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "device",
                "type": "DevicesGetResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list": {
              "auth": true,
              "display-name": "/devices/list",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {},
                  "response": {
                    "body": {
                      "devices": [
                        {
                          "can_program_offline_access_codes": true,
                          "can_program_online_access_codes": true,
                          "can_remotely_lock": true,
                          "can_remotely_unlock": true,
                          "can_simulate_connection": true,
                          "can_simulate_disconnection": true,
                          "can_simulate_removal": true,
                          "capabilities_supported": [
                            "access_code",
                          ],
                          "connected_account_id": "connected_account_id",
                          "created_at": "2024-01-15T09:30:00Z",
                          "custom_metadata": {
                            "key": "value",
                          },
                          "device_id": "device_id",
                          "device_type": "akuvox_lock",
                          "display_name": "display_name",
                          "errors": [
                            {
                              "error_code": "error_code",
                              "message": "message",
                            },
                          ],
                          "is_managed": true,
                          "nickname": "nickname",
                          "properties": {
                            "appearance": {
                              "name": "name",
                            },
                            "model": {
                              "display_name": "display_name",
                              "manufacturer_display_name": "manufacturer_display_name",
                            },
                            "name": "name",
                            "online": true,
                          },
                          "warnings": [
                            {
                              "message": "message",
                              "warning_code": "warning_code",
                            },
                          ],
                          "workspace_id": "workspace_id",
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/devices/list",
              "request": {
                "body": {
                  "properties": {
                    "connect_webview_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "connected_account_id": {
                      "docs": "List all devices owned by this connected account",
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "connected_account_ids": "optional<list<string>>",
                    "created_before": "optional<datetime>",
                    "custom_metadata_has": "optional<map<string, DevicesListRequestCustomMetadataHasValue>>",
                    "device_ids": "optional<list<string>>",
                    "device_type": "optional<DevicesListRequestDeviceType>",
                    "device_types": "optional<list<DevicesListRequestDeviceTypesItem>>",
                    "exclude_if": "optional<list<DevicesListRequestExcludeIfItem>>",
                    "include_if": "optional<list<DevicesListRequestIncludeIfItem>>",
                    "limit": {
                      "default": 500,
                      "type": "optional<double>",
                    },
                    "manufacturer": "optional<DevicesListRequestManufacturer>",
                    "user_identifier_key": "optional<string>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "DevicesListRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "devices",
                "type": "DevicesListResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list_device_providers": {
              "auth": true,
              "display-name": "/devices/list_device_providers",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {},
                  "response": {
                    "body": {
                      "device_providers": [
                        {
                          "device_provider_name": "akuvox",
                          "display_name": "display_name",
                          "image_url": "image_url",
                          "provider_categories": [
                            "stable",
                          ],
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/devices/list_device_providers",
              "request": {
                "body": {
                  "properties": {
                    "provider_category": "optional<DevicesListDeviceProvidersRequestProviderCategory>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "DevicesListDeviceProvidersRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "device_providers",
                "type": "DevicesListDeviceProvidersResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "update": {
              "auth": true,
              "display-name": "/devices/update",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "device_id": "device_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/devices/update",
              "request": {
                "body": {
                  "properties": {
                    "custom_metadata": "optional<map<string, optional<DevicesUpdateRequestCustomMetadataValue>>>",
                    "device_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "is_managed": {
                      "default": true,
                      "type": "optional<boolean>",
                    },
                    "name": "optional<string>",
                    "properties": "optional<DevicesUpdateRequestProperties>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "DevicesUpdateRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "type": "DevicesUpdateResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "DevicesDeleteResponse": {
            "docs": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicesGetResponse": {
            "docs": undefined,
            "properties": {
              "device": "root.Device",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicesListDeviceProvidersRequestProviderCategory": {
            "enum": [
              "stable",
              "consumer_smartlocks",
              "thermostats",
              "noise_sensors",
              "access_control_systems",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicesListDeviceProvidersResponse": {
            "docs": undefined,
            "properties": {
              "device_providers": "list<root.DeviceProvider>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicesListRequestCustomMetadataHasValue": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
            "union": [
              "string",
              "boolean",
            ],
          },
          "DevicesListRequestDeviceType": {
            "enum": [
              "akuvox_lock",
              "august_lock",
              "brivo_access_point",
              "butterflymx_panel",
              "avigilon_alta_entry",
              "doorking_lock",
              "genie_door",
              "igloo_lock",
              "linear_lock",
              "lockly_lock",
              "kwikset_lock",
              "nuki_lock",
              "salto_lock",
              "schlage_lock",
              "seam_relay",
              "smartthings_lock",
              "wyze_lock",
              "yale_lock",
              "two_n_intercom",
              "controlbyweb_device",
              "ttlock_lock",
              "igloohome_lock",
              "hubitat_lock",
              "four_suites_door",
              "dormakaba_oracode_door",
              "tedee_lock",
              "noiseaware_activity_zone",
              "minut_sensor",
              "ecobee_thermostat",
              "nest_thermostat",
              "honeywell_resideo_thermostat",
              "ios_phone",
              "android_phone",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicesListRequestDeviceTypesItem": {
            "enum": [
              "akuvox_lock",
              "august_lock",
              "brivo_access_point",
              "butterflymx_panel",
              "avigilon_alta_entry",
              "doorking_lock",
              "genie_door",
              "igloo_lock",
              "linear_lock",
              "lockly_lock",
              "kwikset_lock",
              "nuki_lock",
              "salto_lock",
              "schlage_lock",
              "seam_relay",
              "smartthings_lock",
              "wyze_lock",
              "yale_lock",
              "two_n_intercom",
              "controlbyweb_device",
              "ttlock_lock",
              "igloohome_lock",
              "hubitat_lock",
              "four_suites_door",
              "dormakaba_oracode_door",
              "tedee_lock",
              "noiseaware_activity_zone",
              "minut_sensor",
              "ecobee_thermostat",
              "nest_thermostat",
              "honeywell_resideo_thermostat",
              "ios_phone",
              "android_phone",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicesListRequestExcludeIfItem": {
            "enum": [
              "can_remotely_unlock",
              "can_remotely_lock",
              "can_program_offline_access_codes",
              "can_program_online_access_codes",
              "can_simulate_removal",
              "can_simulate_connection",
              "can_simulate_disconnection",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicesListRequestIncludeIfItem": {
            "enum": [
              "can_remotely_unlock",
              "can_remotely_lock",
              "can_program_offline_access_codes",
              "can_program_online_access_codes",
              "can_simulate_removal",
              "can_simulate_connection",
              "can_simulate_disconnection",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicesListRequestManufacturer": {
            "enum": [
              "akuvox",
              "august",
              "avigilon_alta",
              "brivo",
              "butterflymx",
              "doorking",
              "four_suites",
              "genie",
              "igloo",
              "keywe",
              "kwikset",
              "linear",
              "lockly",
              "nuki",
              "philia",
              "salto",
              "samsung",
              "schlage",
              "seam",
              "unknown",
              "wyze",
              "yale",
              "minut",
              "two_n",
              "ttlock",
              "nest",
              "igloohome",
              "ecobee",
              "hubitat",
              "controlbyweb",
              "smartthings",
              "dormakaba_oracode",
              "tedee",
              "honeywell_resideo",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicesListResponse": {
            "docs": undefined,
            "properties": {
              "devices": "list<root.Device>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicesUpdateRequestCustomMetadataValue": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
            "union": [
              {
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": 500,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "boolean",
              "optional<string>",
            ],
          },
          "DevicesUpdateRequestProperties": {
            "docs": undefined,
            "properties": {
              "name": "optional<string>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "DevicesUpdateResponse": {
            "docs": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "types:
  DevicesDeleteResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
  DevicesGetResponse:
    properties:
      device: root.Device
      ok: boolean
    source:
      openapi: ../openapi.json
  DevicesListRequestDeviceType:
    enum:
      - akuvox_lock
      - august_lock
      - brivo_access_point
      - butterflymx_panel
      - avigilon_alta_entry
      - doorking_lock
      - genie_door
      - igloo_lock
      - linear_lock
      - lockly_lock
      - kwikset_lock
      - nuki_lock
      - salto_lock
      - schlage_lock
      - seam_relay
      - smartthings_lock
      - wyze_lock
      - yale_lock
      - two_n_intercom
      - controlbyweb_device
      - ttlock_lock
      - igloohome_lock
      - hubitat_lock
      - four_suites_door
      - dormakaba_oracode_door
      - tedee_lock
      - noiseaware_activity_zone
      - minut_sensor
      - ecobee_thermostat
      - nest_thermostat
      - honeywell_resideo_thermostat
      - ios_phone
      - android_phone
    source:
      openapi: ../openapi.json
  DevicesListRequestDeviceTypesItem:
    enum:
      - akuvox_lock
      - august_lock
      - brivo_access_point
      - butterflymx_panel
      - avigilon_alta_entry
      - doorking_lock
      - genie_door
      - igloo_lock
      - linear_lock
      - lockly_lock
      - kwikset_lock
      - nuki_lock
      - salto_lock
      - schlage_lock
      - seam_relay
      - smartthings_lock
      - wyze_lock
      - yale_lock
      - two_n_intercom
      - controlbyweb_device
      - ttlock_lock
      - igloohome_lock
      - hubitat_lock
      - four_suites_door
      - dormakaba_oracode_door
      - tedee_lock
      - noiseaware_activity_zone
      - minut_sensor
      - ecobee_thermostat
      - nest_thermostat
      - honeywell_resideo_thermostat
      - ios_phone
      - android_phone
    source:
      openapi: ../openapi.json
  DevicesListRequestManufacturer:
    enum:
      - akuvox
      - august
      - avigilon_alta
      - brivo
      - butterflymx
      - doorking
      - four_suites
      - genie
      - igloo
      - keywe
      - kwikset
      - linear
      - lockly
      - nuki
      - philia
      - salto
      - samsung
      - schlage
      - seam
      - unknown
      - wyze
      - yale
      - minut
      - two_n
      - ttlock
      - nest
      - igloohome
      - ecobee
      - hubitat
      - controlbyweb
      - smartthings
      - dormakaba_oracode
      - tedee
      - honeywell_resideo
    source:
      openapi: ../openapi.json
  DevicesListRequestCustomMetadataHasValue:
    discriminated: false
    union:
      - string
      - boolean
    source:
      openapi: ../openapi.json
  DevicesListRequestIncludeIfItem:
    enum:
      - can_remotely_unlock
      - can_remotely_lock
      - can_program_offline_access_codes
      - can_program_online_access_codes
      - can_simulate_removal
      - can_simulate_connection
      - can_simulate_disconnection
    source:
      openapi: ../openapi.json
  DevicesListRequestExcludeIfItem:
    enum:
      - can_remotely_unlock
      - can_remotely_lock
      - can_program_offline_access_codes
      - can_program_online_access_codes
      - can_simulate_removal
      - can_simulate_connection
      - can_simulate_disconnection
    source:
      openapi: ../openapi.json
  DevicesListResponse:
    properties:
      devices: list<root.Device>
      ok: boolean
    source:
      openapi: ../openapi.json
  DevicesListDeviceProvidersRequestProviderCategory:
    enum:
      - stable
      - consumer_smartlocks
      - thermostats
      - noise_sensors
      - access_control_systems
    source:
      openapi: ../openapi.json
  DevicesListDeviceProvidersResponse:
    properties:
      device_providers: list<root.DeviceProvider>
      ok: boolean
    source:
      openapi: ../openapi.json
  DevicesUpdateRequestProperties:
    properties:
      name: optional<string>
    source:
      openapi: ../openapi.json
  DevicesUpdateRequestCustomMetadataValue:
    discriminated: false
    union:
      - type: string
        validation:
          maxLength: 500
      - boolean
      - optional<string>
    source:
      openapi: ../openapi.json
  DevicesUpdateResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    delete:
      path: /devices/delete
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /devices/delete
      request:
        name: DevicesDeleteRequest
        body:
          properties:
            device_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: DevicesDeleteResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            device_id: device_id
          response:
            body:
              ok: true
    get:
      path: /devices/get
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /devices/get
      request:
        name: DevicesGetRequest
        body:
          properties:
            device_id:
              type: optional<string>
              validation:
                format: uuid
            name: optional<string>
        content-type: application/json
      response:
        docs: OK
        type: DevicesGetResponse
        property: device
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request: {}
          response:
            body:
              device:
                device_id: device_id
                device_type: akuvox_lock
                nickname: nickname
                display_name: display_name
                capabilities_supported:
                  - access_code
                properties:
                  online: true
                  name: name
                  accessory_keypad:
                    is_connected: true
                  appearance:
                    name: name
                  model:
                    display_name: display_name
                    manufacturer_display_name: manufacturer_display_name
                  has_direct_power: true
                  battery_level: 1.1
                  battery:
                    level: 1.1
                    status: critical
                  manufacturer: manufacturer
                  image_url: image_url
                  image_alt_text: image_alt_text
                  serial_number: serial_number
                  online_access_codes_enabled: true
                  offline_access_codes_enabled: true
                  supports_accessory_keypad: true
                  supports_offline_access_codes: true
                  noise_level_decibels: 1.1
                  currently_triggering_noise_threshold_ids:
                    - currently_triggering_noise_threshold_ids
                  assa_abloy_credential_service_metadata:
                    has_active_endpoint: true
                    endpoints:
                      - endpoint_id: endpoint_id
                        is_active: true
                  august_metadata:
                    lock_id: lock_id
                    lock_name: lock_name
                    house_name: house_name
                    has_keypad: true
                  avigilon_alta_metadata:
                    entry_name: entry_name
                    org_name: org_name
                    zone_id: 1.1
                    zone_name: zone_name
                    site_id: 1.1
                    site_name: site_name
                    entry_relays_total_count: 1.1
                  schlage_metadata:
                    device_id: device_id
                    device_name: device_name
                  smartthings_metadata:
                    device_id: device_id
                    device_name: device_name
                  lockly_metadata:
                    device_id: device_id
                    device_name: device_name
                  nuki_metadata:
                    device_id: device_id
                    device_name: device_name
                  kwikset_metadata:
                    device_id: device_id
                    device_name: device_name
                    model_number: model_number
                  salto_metadata:
                    lock_id: lock_id
                    customer_reference: customer_reference
                    lock_type: lock_type
                    battery_level: battery_level
                    locked_state: locked_state
                  genie_metadata:
                    device_name: device_name
                    door_name: door_name
                  brivo_metadata:
                    device_name: device_name
                  igloo_metadata:
                    device_id: device_id
                    bridge_id: bridge_id
                  noiseaware_metadata:
                    device_model: indoor
                    noise_level_nrs: 1.1
                    noise_level_decibel: 1.1
                    device_name: device_name
                    device_id: device_id
                  minut_metadata:
                    device_id: device_id
                    device_name: device_name
                    latest_sensor_values:
                      temperature:
                        time: time
                        value: 1.1
                      sound:
                        time: time
                        value: 1.1
                      humidity:
                        time: time
                        value: 1.1
                      pressure:
                        time: time
                        value: 1.1
                      accelerometer_z:
                        time: time
                        value: 1.1
                  four_suites_metadata:
                    device_id: 1.1
                    device_name: device_name
                    reclose_delay_in_seconds: 1.1
                  two_n_metadata:
                    device_id: 1.1
                    device_name: device_name
                  controlbyweb_metadata:
                    device_id: device_id
                    device_name: device_name
                  ttlock_metadata:
                    lock_id: 1.1
                    lock_alias: lock_alias
                    feature_value: feature_value
                  seam_bridge_metadata:
                    device_num: 1.1
                    name: name
                  igloohome_metadata:
                    device_id: device_id
                    device_name: device_name
                  nest_metadata:
                    nest_device_id: nest_device_id
                    device_name: device_name
                    custom_name: custom_name
                  ecobee_metadata:
                    ecobee_device_id: ecobee_device_id
                    device_name: device_name
                  honeywell_resideo_metadata:
                    honeywell_resideo_device_id: honeywell_resideo_device_id
                    device_name: device_name
                  hubitat_metadata:
                    device_id: device_id
                    device_name: device_name
                    device_label: device_label
                  dormakaba_oracode_metadata:
                    door_id: 1.1
                    door_name: door_name
                    door_is_wireless: true
                    site_id: 1.1
                    site_name: site_name
                  wyze_metadata:
                    device_id: device_id
                    device_name: device_name
                    product_name: product_name
                    product_type: product_type
                    product_model: product_model
                    device_info_model: device_info_model
                  tedee_metadata:
                    device_id: 1.1
                    serial_number: serial_number
                    device_name: device_name
                    device_model: device_model
                    bridge_id: 1.1
                    bridge_name: bridge_name
                  _experimental_supported_code_from_access_codes_lengths:
                    - 1.1
                  code_constraints:
                    - constraint_type: no_zeros
                  supported_code_lengths:
                    - 1.1
                  max_active_codes_supported: 1.1
                  supports_backup_access_code_pool: true
                  has_native_entry_events: true
                  locked: true
                  keypad_battery:
                    level: 1.1
                  door_open: true
                location:
                  location_name: location_name
                  timezone: timezone
                connected_account_id: connected_account_id
                workspace_id: workspace_id
                errors:
                  - error_code: error_code
                    message: message
                warnings:
                  - warning_code: warning_code
                    message: message
                created_at: '2024-01-15T09:30:00Z'
                is_managed: true
                custom_metadata:
                  key: value
                can_remotely_unlock: true
                can_remotely_lock: true
                can_program_offline_access_codes: true
                can_program_online_access_codes: true
                can_simulate_removal: true
                can_simulate_connection: true
                can_simulate_disconnection: true
              ok: true
    list:
      path: /devices/list
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /devices/list
      request:
        name: DevicesListRequest
        body:
          properties:
            connected_account_id:
              type: optional<string>
              docs: List all devices owned by this connected account
              validation:
                format: uuid
            connected_account_ids: optional<list<string>>
            connect_webview_id:
              type: optional<string>
              validation:
                format: uuid
            device_type: optional<DevicesListRequestDeviceType>
            device_types: optional<list<DevicesListRequestDeviceTypesItem>>
            manufacturer: optional<DevicesListRequestManufacturer>
            device_ids: optional<list<string>>
            limit:
              type: optional<double>
              default: 500
            created_before: optional<datetime>
            user_identifier_key: optional<string>
            custom_metadata_has: optional<map<string, DevicesListRequestCustomMetadataHasValue>>
            include_if: optional<list<DevicesListRequestIncludeIfItem>>
            exclude_if: optional<list<DevicesListRequestExcludeIfItem>>
        content-type: application/json
      response:
        docs: OK
        type: DevicesListResponse
        property: devices
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request: {}
          response:
            body:
              devices:
                - device_id: device_id
                  device_type: akuvox_lock
                  nickname: nickname
                  display_name: display_name
                  capabilities_supported:
                    - access_code
                  properties:
                    online: true
                    name: name
                    appearance:
                      name: name
                    model:
                      display_name: display_name
                      manufacturer_display_name: manufacturer_display_name
                  connected_account_id: connected_account_id
                  workspace_id: workspace_id
                  errors:
                    - error_code: error_code
                      message: message
                  warnings:
                    - warning_code: warning_code
                      message: message
                  created_at: '2024-01-15T09:30:00Z'
                  is_managed: true
                  custom_metadata:
                    key: value
                  can_remotely_unlock: true
                  can_remotely_lock: true
                  can_program_offline_access_codes: true
                  can_program_online_access_codes: true
                  can_simulate_removal: true
                  can_simulate_connection: true
                  can_simulate_disconnection: true
              ok: true
    list_device_providers:
      path: /devices/list_device_providers
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /devices/list_device_providers
      request:
        name: DevicesListDeviceProvidersRequest
        body:
          properties:
            provider_category: optional<DevicesListDeviceProvidersRequestProviderCategory>
        content-type: application/json
      response:
        docs: OK
        type: DevicesListDeviceProvidersResponse
        property: device_providers
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request: {}
          response:
            body:
              device_providers:
                - device_provider_name: akuvox
                  display_name: display_name
                  image_url: image_url
                  provider_categories:
                    - stable
              ok: true
    update:
      path: /devices/update
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /devices/update
      request:
        name: DevicesUpdateRequest
        body:
          properties:
            device_id:
              type: string
              validation:
                format: uuid
            properties: optional<DevicesUpdateRequestProperties>
            name: optional<string>
            is_managed:
              type: optional<boolean>
              default: true
            custom_metadata: >-
              optional<map<string,
              optional<DevicesUpdateRequestCustomMetadataValue>>>
        content-type: application/json
      response:
        docs: OK
        type: DevicesUpdateResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            device_id: device_id
          response:
            body:
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "devices/simulate.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "../__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "connect": {
              "auth": true,
              "display-name": "/devices/simulate/connect",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "device_id": "device_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/devices/simulate/connect",
              "request": {
                "body": {
                  "properties": {
                    "device_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "SimulateConnectRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "type": "SimulateConnectResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "disconnect": {
              "auth": true,
              "display-name": "/devices/simulate/disconnect",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "device_id": "device_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/devices/simulate/disconnect",
              "request": {
                "body": {
                  "properties": {
                    "device_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "SimulateDisconnectRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "type": "SimulateDisconnectResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "remove": {
              "auth": true,
              "display-name": "/devices/simulate/remove",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "device_id": "device_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/devices/simulate/remove",
              "request": {
                "body": {
                  "properties": {
                    "device_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "SimulateRemoveRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "type": "SimulateRemoveResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "SimulateConnectResponse": {
            "docs": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "SimulateDisconnectResponse": {
            "docs": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "SimulateRemoveResponse": {
            "docs": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "types:
  SimulateConnectResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
  SimulateDisconnectResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
  SimulateRemoveResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
imports:
  root: ../__package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    connect:
      path: /devices/simulate/connect
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /devices/simulate/connect
      request:
        name: SimulateConnectRequest
        body:
          properties:
            device_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: SimulateConnectResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            device_id: device_id
          response:
            body:
              ok: true
    disconnect:
      path: /devices/simulate/disconnect
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /devices/simulate/disconnect
      request:
        name: SimulateDisconnectRequest
        body:
          properties:
            device_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: SimulateDisconnectResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            device_id: device_id
          response:
            body:
              ok: true
    remove:
      path: /devices/simulate/remove
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /devices/simulate/remove
      request:
        name: SimulateRemoveRequest
        body:
          properties:
            device_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: SimulateRemoveResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            device_id: device_id
          response:
            body:
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "devices/unmanaged.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "../__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "get": {
              "auth": true,
              "display-name": "/devices/unmanaged/get",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {},
                  "response": {
                    "body": {
                      "device": {
                        "can_program_offline_access_codes": true,
                        "can_program_online_access_codes": true,
                        "can_remotely_lock": true,
                        "can_remotely_unlock": true,
                        "can_simulate_connection": true,
                        "can_simulate_disconnection": true,
                        "can_simulate_removal": true,
                        "capabilities_supported": [
                          "access_code",
                        ],
                        "connected_account_id": "connected_account_id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "device_id": "device_id",
                        "device_type": "akuvox_lock",
                        "errors": [
                          {
                            "error_code": "error_code",
                            "message": "message",
                          },
                        ],
                        "is_managed": true,
                        "properties": {
                          "accessory_keypad": {
                            "is_connected": true,
                          },
                          "battery": {
                            "level": 1.1,
                            "status": "critical",
                          },
                          "battery_level": 1.1,
                          "image_alt_text": "image_alt_text",
                          "image_url": "image_url",
                          "manufacturer": "manufacturer",
                          "model": {
                            "display_name": "display_name",
                            "manufacturer_display_name": "manufacturer_display_name",
                          },
                          "name": "name",
                          "offline_access_codes_enabled": true,
                          "online": true,
                          "online_access_codes_enabled": true,
                        },
                        "warnings": [
                          {
                            "message": "message",
                            "warning_code": "warning_code",
                          },
                        ],
                        "workspace_id": "workspace_id",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/devices/unmanaged/get",
              "request": {
                "body": {
                  "properties": {
                    "device_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "name": "optional<string>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UnmanagedGetRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "device",
                "type": "UnmanagedGetResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list": {
              "auth": true,
              "display-name": "/devices/unmanaged/list",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {},
                  "response": {
                    "body": {
                      "devices": [
                        {
                          "can_program_offline_access_codes": true,
                          "can_program_online_access_codes": true,
                          "can_remotely_lock": true,
                          "can_remotely_unlock": true,
                          "can_simulate_connection": true,
                          "can_simulate_disconnection": true,
                          "can_simulate_removal": true,
                          "capabilities_supported": [
                            "access_code",
                          ],
                          "connected_account_id": "connected_account_id",
                          "created_at": "2024-01-15T09:30:00Z",
                          "device_id": "device_id",
                          "device_type": "akuvox_lock",
                          "errors": [
                            {
                              "error_code": "error_code",
                              "message": "message",
                            },
                          ],
                          "is_managed": true,
                          "properties": {
                            "model": {
                              "display_name": "display_name",
                              "manufacturer_display_name": "manufacturer_display_name",
                            },
                            "name": "name",
                            "online": true,
                          },
                          "warnings": [
                            {
                              "message": "message",
                              "warning_code": "warning_code",
                            },
                          ],
                          "workspace_id": "workspace_id",
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/devices/unmanaged/list",
              "request": {
                "body": {
                  "properties": {
                    "connect_webview_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "connected_account_id": {
                      "docs": "List all devices owned by this connected account",
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "connected_account_ids": "optional<list<string>>",
                    "created_before": "optional<datetime>",
                    "custom_metadata_has": "optional<map<string, UnmanagedListRequestCustomMetadataHasValue>>",
                    "device_ids": "optional<list<string>>",
                    "device_type": "optional<UnmanagedListRequestDeviceType>",
                    "device_types": "optional<list<UnmanagedListRequestDeviceTypesItem>>",
                    "exclude_if": "optional<list<UnmanagedListRequestExcludeIfItem>>",
                    "include_if": "optional<list<UnmanagedListRequestIncludeIfItem>>",
                    "limit": {
                      "default": 500,
                      "type": "optional<double>",
                    },
                    "manufacturer": "optional<UnmanagedListRequestManufacturer>",
                    "user_identifier_key": "optional<string>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UnmanagedListRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "devices",
                "type": "UnmanagedListResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "update": {
              "auth": true,
              "display-name": "/devices/unmanaged/update",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "device_id": "device_id",
                    "is_managed": true,
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/devices/unmanaged/update",
              "request": {
                "body": {
                  "properties": {
                    "device_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "is_managed": "boolean",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UnmanagedUpdateRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "type": "UnmanagedUpdateResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "UnmanagedGetResponse": {
            "docs": undefined,
            "properties": {
              "device": "root.UnmanagedDevice",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UnmanagedListRequestCustomMetadataHasValue": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
            "union": [
              "string",
              "boolean",
            ],
          },
          "UnmanagedListRequestDeviceType": {
            "enum": [
              "akuvox_lock",
              "august_lock",
              "brivo_access_point",
              "butterflymx_panel",
              "avigilon_alta_entry",
              "doorking_lock",
              "genie_door",
              "igloo_lock",
              "linear_lock",
              "lockly_lock",
              "kwikset_lock",
              "nuki_lock",
              "salto_lock",
              "schlage_lock",
              "seam_relay",
              "smartthings_lock",
              "wyze_lock",
              "yale_lock",
              "two_n_intercom",
              "controlbyweb_device",
              "ttlock_lock",
              "igloohome_lock",
              "hubitat_lock",
              "four_suites_door",
              "dormakaba_oracode_door",
              "tedee_lock",
              "noiseaware_activity_zone",
              "minut_sensor",
              "ecobee_thermostat",
              "nest_thermostat",
              "honeywell_resideo_thermostat",
              "ios_phone",
              "android_phone",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UnmanagedListRequestDeviceTypesItem": {
            "enum": [
              "akuvox_lock",
              "august_lock",
              "brivo_access_point",
              "butterflymx_panel",
              "avigilon_alta_entry",
              "doorking_lock",
              "genie_door",
              "igloo_lock",
              "linear_lock",
              "lockly_lock",
              "kwikset_lock",
              "nuki_lock",
              "salto_lock",
              "schlage_lock",
              "seam_relay",
              "smartthings_lock",
              "wyze_lock",
              "yale_lock",
              "two_n_intercom",
              "controlbyweb_device",
              "ttlock_lock",
              "igloohome_lock",
              "hubitat_lock",
              "four_suites_door",
              "dormakaba_oracode_door",
              "tedee_lock",
              "noiseaware_activity_zone",
              "minut_sensor",
              "ecobee_thermostat",
              "nest_thermostat",
              "honeywell_resideo_thermostat",
              "ios_phone",
              "android_phone",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UnmanagedListRequestExcludeIfItem": {
            "enum": [
              "can_remotely_unlock",
              "can_remotely_lock",
              "can_program_offline_access_codes",
              "can_program_online_access_codes",
              "can_simulate_removal",
              "can_simulate_connection",
              "can_simulate_disconnection",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UnmanagedListRequestIncludeIfItem": {
            "enum": [
              "can_remotely_unlock",
              "can_remotely_lock",
              "can_program_offline_access_codes",
              "can_program_online_access_codes",
              "can_simulate_removal",
              "can_simulate_connection",
              "can_simulate_disconnection",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UnmanagedListRequestManufacturer": {
            "enum": [
              "akuvox",
              "august",
              "avigilon_alta",
              "brivo",
              "butterflymx",
              "doorking",
              "four_suites",
              "genie",
              "igloo",
              "keywe",
              "kwikset",
              "linear",
              "lockly",
              "nuki",
              "philia",
              "salto",
              "samsung",
              "schlage",
              "seam",
              "unknown",
              "wyze",
              "yale",
              "minut",
              "two_n",
              "ttlock",
              "nest",
              "igloohome",
              "ecobee",
              "hubitat",
              "controlbyweb",
              "smartthings",
              "dormakaba_oracode",
              "tedee",
              "honeywell_resideo",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UnmanagedListResponse": {
            "docs": undefined,
            "properties": {
              "devices": "list<root.UnmanagedDevice>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UnmanagedUpdateResponse": {
            "docs": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "imports:
  root: ../__package__.yml
types:
  UnmanagedGetResponse:
    properties:
      device: root.UnmanagedDevice
      ok: boolean
    source:
      openapi: ../openapi.json
  UnmanagedListRequestDeviceType:
    enum:
      - akuvox_lock
      - august_lock
      - brivo_access_point
      - butterflymx_panel
      - avigilon_alta_entry
      - doorking_lock
      - genie_door
      - igloo_lock
      - linear_lock
      - lockly_lock
      - kwikset_lock
      - nuki_lock
      - salto_lock
      - schlage_lock
      - seam_relay
      - smartthings_lock
      - wyze_lock
      - yale_lock
      - two_n_intercom
      - controlbyweb_device
      - ttlock_lock
      - igloohome_lock
      - hubitat_lock
      - four_suites_door
      - dormakaba_oracode_door
      - tedee_lock
      - noiseaware_activity_zone
      - minut_sensor
      - ecobee_thermostat
      - nest_thermostat
      - honeywell_resideo_thermostat
      - ios_phone
      - android_phone
    source:
      openapi: ../openapi.json
  UnmanagedListRequestDeviceTypesItem:
    enum:
      - akuvox_lock
      - august_lock
      - brivo_access_point
      - butterflymx_panel
      - avigilon_alta_entry
      - doorking_lock
      - genie_door
      - igloo_lock
      - linear_lock
      - lockly_lock
      - kwikset_lock
      - nuki_lock
      - salto_lock
      - schlage_lock
      - seam_relay
      - smartthings_lock
      - wyze_lock
      - yale_lock
      - two_n_intercom
      - controlbyweb_device
      - ttlock_lock
      - igloohome_lock
      - hubitat_lock
      - four_suites_door
      - dormakaba_oracode_door
      - tedee_lock
      - noiseaware_activity_zone
      - minut_sensor
      - ecobee_thermostat
      - nest_thermostat
      - honeywell_resideo_thermostat
      - ios_phone
      - android_phone
    source:
      openapi: ../openapi.json
  UnmanagedListRequestManufacturer:
    enum:
      - akuvox
      - august
      - avigilon_alta
      - brivo
      - butterflymx
      - doorking
      - four_suites
      - genie
      - igloo
      - keywe
      - kwikset
      - linear
      - lockly
      - nuki
      - philia
      - salto
      - samsung
      - schlage
      - seam
      - unknown
      - wyze
      - yale
      - minut
      - two_n
      - ttlock
      - nest
      - igloohome
      - ecobee
      - hubitat
      - controlbyweb
      - smartthings
      - dormakaba_oracode
      - tedee
      - honeywell_resideo
    source:
      openapi: ../openapi.json
  UnmanagedListRequestCustomMetadataHasValue:
    discriminated: false
    union:
      - string
      - boolean
    source:
      openapi: ../openapi.json
  UnmanagedListRequestIncludeIfItem:
    enum:
      - can_remotely_unlock
      - can_remotely_lock
      - can_program_offline_access_codes
      - can_program_online_access_codes
      - can_simulate_removal
      - can_simulate_connection
      - can_simulate_disconnection
    source:
      openapi: ../openapi.json
  UnmanagedListRequestExcludeIfItem:
    enum:
      - can_remotely_unlock
      - can_remotely_lock
      - can_program_offline_access_codes
      - can_program_online_access_codes
      - can_simulate_removal
      - can_simulate_connection
      - can_simulate_disconnection
    source:
      openapi: ../openapi.json
  UnmanagedListResponse:
    properties:
      devices: list<root.UnmanagedDevice>
      ok: boolean
    source:
      openapi: ../openapi.json
  UnmanagedUpdateResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
service:
  auth: false
  base-path: ''
  endpoints:
    get:
      path: /devices/unmanaged/get
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /devices/unmanaged/get
      request:
        name: UnmanagedGetRequest
        body:
          properties:
            device_id:
              type: optional<string>
              validation:
                format: uuid
            name: optional<string>
        content-type: application/json
      response:
        docs: OK
        type: UnmanagedGetResponse
        property: device
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request: {}
          response:
            body:
              device:
                device_id: device_id
                device_type: akuvox_lock
                connected_account_id: connected_account_id
                capabilities_supported:
                  - access_code
                workspace_id: workspace_id
                errors:
                  - error_code: error_code
                    message: message
                warnings:
                  - warning_code: warning_code
                    message: message
                created_at: '2024-01-15T09:30:00Z'
                is_managed: true
                properties:
                  accessory_keypad:
                    is_connected: true
                  name: name
                  online: true
                  manufacturer: manufacturer
                  image_url: image_url
                  image_alt_text: image_alt_text
                  battery_level: 1.1
                  battery:
                    level: 1.1
                    status: critical
                  online_access_codes_enabled: true
                  offline_access_codes_enabled: true
                  model:
                    display_name: display_name
                    manufacturer_display_name: manufacturer_display_name
                can_remotely_unlock: true
                can_remotely_lock: true
                can_program_offline_access_codes: true
                can_program_online_access_codes: true
                can_simulate_removal: true
                can_simulate_connection: true
                can_simulate_disconnection: true
              ok: true
    list:
      path: /devices/unmanaged/list
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /devices/unmanaged/list
      request:
        name: UnmanagedListRequest
        body:
          properties:
            connected_account_id:
              type: optional<string>
              docs: List all devices owned by this connected account
              validation:
                format: uuid
            connected_account_ids: optional<list<string>>
            connect_webview_id:
              type: optional<string>
              validation:
                format: uuid
            device_type: optional<UnmanagedListRequestDeviceType>
            device_types: optional<list<UnmanagedListRequestDeviceTypesItem>>
            manufacturer: optional<UnmanagedListRequestManufacturer>
            device_ids: optional<list<string>>
            limit:
              type: optional<double>
              default: 500
            created_before: optional<datetime>
            user_identifier_key: optional<string>
            custom_metadata_has: optional<map<string, UnmanagedListRequestCustomMetadataHasValue>>
            include_if: optional<list<UnmanagedListRequestIncludeIfItem>>
            exclude_if: optional<list<UnmanagedListRequestExcludeIfItem>>
        content-type: application/json
      response:
        docs: OK
        type: UnmanagedListResponse
        property: devices
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request: {}
          response:
            body:
              devices:
                - device_id: device_id
                  device_type: akuvox_lock
                  connected_account_id: connected_account_id
                  capabilities_supported:
                    - access_code
                  workspace_id: workspace_id
                  errors:
                    - error_code: error_code
                      message: message
                  warnings:
                    - warning_code: warning_code
                      message: message
                  created_at: '2024-01-15T09:30:00Z'
                  is_managed: true
                  properties:
                    name: name
                    online: true
                    model:
                      display_name: display_name
                      manufacturer_display_name: manufacturer_display_name
                  can_remotely_unlock: true
                  can_remotely_lock: true
                  can_program_offline_access_codes: true
                  can_program_online_access_codes: true
                  can_simulate_removal: true
                  can_simulate_connection: true
                  can_simulate_disconnection: true
              ok: true
    update:
      path: /devices/unmanaged/update
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /devices/unmanaged/update
      request:
        name: UnmanagedUpdateRequest
        body:
          properties:
            device_id:
              type: string
              validation:
                format: uuid
            is_managed: boolean
        content-type: application/json
      response:
        docs: OK
        type: UnmanagedUpdateResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            device_id: device_id
            is_managed: true
          response:
            body:
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "events.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "get": {
              "auth": true,
              "display-name": "/events/get",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {},
                  "response": {
                    "body": {
                      "event": {
                        "acs_credential_id": "acs_credential_id",
                        "acs_system_id": "acs_system_id",
                        "acs_user_id": "acs_user_id",
                        "action_attempt_id": "action_attempt_id",
                        "client_session_id": "client_session_id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "device_id": "device_id",
                        "enrollment_automation_id": "enrollment_automation_id",
                        "event_id": "event_id",
                        "event_type": "event_type",
                        "occurred_at": "2024-01-15T09:30:00Z",
                        "workspace_id": "workspace_id",
                      },
                      "message": "message",
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/events/get",
              "request": {
                "body": {
                  "properties": {
                    "device_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "event_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "event_type": "optional<string>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "EventsGetRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "event",
                "type": "EventsGetResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list": {
              "auth": true,
              "display-name": "/events/list",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {},
                  "response": {
                    "body": {
                      "events": [
                        {
                          "acs_credential_id": "acs_credential_id",
                          "acs_system_id": "acs_system_id",
                          "acs_user_id": "acs_user_id",
                          "action_attempt_id": "action_attempt_id",
                          "client_session_id": "client_session_id",
                          "created_at": "2024-01-15T09:30:00Z",
                          "device_id": "device_id",
                          "enrollment_automation_id": "enrollment_automation_id",
                          "event_id": "event_id",
                          "event_type": "event_type",
                          "occurred_at": "2024-01-15T09:30:00Z",
                          "workspace_id": "workspace_id",
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/events/list",
              "request": {
                "body": {
                  "properties": {
                    "access_code_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "access_code_ids": "optional<list<string>>",
                    "between": "optional<list<EventsListRequestBetweenItem>>",
                    "connected_account_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "device_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "device_ids": "optional<list<string>>",
                    "event_type": "optional<EventsListRequestEventType>",
                    "event_types": "optional<list<EventsListRequestEventTypesItem>>",
                    "limit": {
                      "default": 500,
                      "type": "optional<double>",
                    },
                    "since": "optional<string>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "EventsListRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "events",
                "type": "EventsListResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "EventsGetResponse": {
            "docs": undefined,
            "properties": {
              "event": "optional<root.Event>",
              "message": "optional<string>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "EventsListRequestBetweenItem": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
            "union": [
              "string",
              "datetime",
            ],
          },
          "EventsListRequestEventType": {
            "enum": [
              {
                "name": "DeviceAccessoryKeypadConnected",
                "value": "device.accessory_keypad_connected",
              },
              {
                "name": "DeviceAccessoryKeypadDisconnected",
                "value": "device.accessory_keypad_disconnected",
              },
              {
                "name": "DeviceConnected",
                "value": "device.connected",
              },
              {
                "name": "DeviceUnmanagedConnected",
                "value": "device.unmanaged.connected",
              },
              {
                "name": "DeviceDisconnected",
                "value": "device.disconnected",
              },
              {
                "name": "DeviceUnmanagedDisconnected",
                "value": "device.unmanaged.disconnected",
              },
              {
                "name": "DeviceConvertedToUnmanaged",
                "value": "device.converted_to_unmanaged",
              },
              {
                "name": "DeviceUnmanagedConvertedToManaged",
                "value": "device.unmanaged.converted_to_managed",
              },
              {
                "name": "DeviceRemoved",
                "value": "device.removed",
              },
              {
                "name": "DeviceDeleted",
                "value": "device.deleted",
              },
              {
                "name": "DeviceTampered",
                "value": "device.tampered",
              },
              {
                "name": "DeviceLowBattery",
                "value": "device.low_battery",
              },
              {
                "name": "DeviceBatteryStatusChanged",
                "value": "device.battery_status_changed",
              },
              {
                "name": "DeviceThirdPartyIntegrationDetected",
                "value": "device.third_party_integration_detected",
              },
              {
                "name": "DeviceThirdPartyIntegrationNoLongerDetected",
                "value": "device.third_party_integration_no_longer_detected",
              },
              {
                "name": "DeviceSaltoPrivacyModeActivated",
                "value": "device.salto.privacy_mode_activated",
              },
              {
                "name": "DeviceSaltoPrivacyModeDeactivated",
                "value": "device.salto.privacy_mode_deactivated",
              },
              {
                "name": "DeviceConnectionBecameFlaky",
                "value": "device.connection_became_flaky",
              },
              {
                "name": "DeviceConnectionStabilized",
                "value": "device.connection_stabilized",
              },
              {
                "name": "DeviceErrorSubscriptionRequired",
                "value": "device.error.subscription_required",
              },
              {
                "name": "DeviceErrorSubscriptionRequiredResolved",
                "value": "device.error.subscription_required.resolved",
              },
              {
                "name": "AccessCodeCreated",
                "value": "access_code.created",
              },
              {
                "name": "AccessCodeChanged",
                "value": "access_code.changed",
              },
              {
                "name": "AccessCodeScheduledOnDevice",
                "value": "access_code.scheduled_on_device",
              },
              {
                "name": "AccessCodeSetOnDevice",
                "value": "access_code.set_on_device",
              },
              {
                "name": "AccessCodeDeleted",
                "value": "access_code.deleted",
              },
              {
                "name": "AccessCodeRemovedFromDevice",
                "value": "access_code.removed_from_device",
              },
              {
                "name": "AccessCodeFailedToSetOnDevice",
                "value": "access_code.failed_to_set_on_device",
              },
              {
                "name": "AccessCodeDelayInSettingOnDevice",
                "value": "access_code.delay_in_setting_on_device",
              },
              {
                "name": "AccessCodeFailedToRemoveFromDevice",
                "value": "access_code.failed_to_remove_from_device",
              },
              {
                "name": "AccessCodeDelayInRemovingFromDevice",
                "value": "access_code.delay_in_removing_from_device",
              },
              {
                "name": "AccessCodeDeletedExternalToSeam",
                "value": "access_code.deleted_external_to_seam",
              },
              {
                "name": "AccessCodeModifiedExternalToSeam",
                "value": "access_code.modified_external_to_seam",
              },
              {
                "name": "AccessCodeUnmanagedConvertedToManaged",
                "value": "access_code.unmanaged.converted_to_managed",
              },
              {
                "name": "AccessCodeUnmanagedFailedToConvertToManaged",
                "value": "access_code.unmanaged.failed_to_convert_to_managed",
              },
              {
                "name": "AccessCodeUnmanagedCreated",
                "value": "access_code.unmanaged.created",
              },
              {
                "name": "AccessCodeUnmanagedRemoved",
                "value": "access_code.unmanaged.removed",
              },
              {
                "name": "LockLocked",
                "value": "lock.locked",
              },
              {
                "name": "LockUnlocked",
                "value": "lock.unlocked",
              },
              {
                "name": "PhoneDeactivated",
                "value": "phone.deactivated",
              },
              {
                "name": "ConnectedAccountConnected",
                "value": "connected_account.connected",
              },
              {
                "name": "ConnectedAccountSuccessfulLogin",
                "value": "connected_account.successful_login",
              },
              {
                "name": "ConnectedAccountCreated",
                "value": "connected_account.created",
              },
              {
                "name": "ConnectedAccountDeleted",
                "value": "connected_account.deleted",
              },
              {
                "name": "ConnectedAccountDisconnected",
                "value": "connected_account.disconnected",
              },
              {
                "name": "ConnectedAccountCompletedFirstSync",
                "value": "connected_account.completed_first_sync",
              },
              {
                "name": "ConnectedAccountCompletedFirstSyncAfterReconnection",
                "value": "connected_account.completed_first_sync_after_reconnection",
              },
              {
                "name": "NoiseSensorNoiseThresholdTriggered",
                "value": "noise_sensor.noise_threshold_triggered",
              },
              {
                "name": "AccessCodeBackupAccessCodePulled",
                "value": "access_code.backup_access_code_pulled",
              },
              {
                "name": "AcsSystemConnected",
                "value": "acs_system.connected",
              },
              {
                "name": "AcsUserDeleted",
                "value": "acs_user.deleted",
              },
              {
                "name": "AcsCredentialDeleted",
                "value": "acs_credential.deleted",
              },
              {
                "name": "EnrollmentAutomationDeleted",
                "value": "enrollment_automation.deleted",
              },
              {
                "name": "ClientSessionDeleted",
                "value": "client_session.deleted",
              },
              {
                "name": "ActionAttemptLockDoorSucceeded",
                "value": "action_attempt.lock_door.succeeded",
              },
              {
                "name": "ActionAttemptLockDoorFailed",
                "value": "action_attempt.lock_door.failed",
              },
              {
                "name": "ActionAttemptUnlockDoorSucceeded",
                "value": "action_attempt.unlock_door.succeeded",
              },
              {
                "name": "ActionAttemptUnlockDoorFailed",
                "value": "action_attempt.unlock_door.failed",
              },
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "EventsListRequestEventTypesItem": {
            "enum": [
              {
                "name": "DeviceAccessoryKeypadConnected",
                "value": "device.accessory_keypad_connected",
              },
              {
                "name": "DeviceAccessoryKeypadDisconnected",
                "value": "device.accessory_keypad_disconnected",
              },
              {
                "name": "DeviceConnected",
                "value": "device.connected",
              },
              {
                "name": "DeviceUnmanagedConnected",
                "value": "device.unmanaged.connected",
              },
              {
                "name": "DeviceDisconnected",
                "value": "device.disconnected",
              },
              {
                "name": "DeviceUnmanagedDisconnected",
                "value": "device.unmanaged.disconnected",
              },
              {
                "name": "DeviceConvertedToUnmanaged",
                "value": "device.converted_to_unmanaged",
              },
              {
                "name": "DeviceUnmanagedConvertedToManaged",
                "value": "device.unmanaged.converted_to_managed",
              },
              {
                "name": "DeviceRemoved",
                "value": "device.removed",
              },
              {
                "name": "DeviceDeleted",
                "value": "device.deleted",
              },
              {
                "name": "DeviceTampered",
                "value": "device.tampered",
              },
              {
                "name": "DeviceLowBattery",
                "value": "device.low_battery",
              },
              {
                "name": "DeviceBatteryStatusChanged",
                "value": "device.battery_status_changed",
              },
              {
                "name": "DeviceThirdPartyIntegrationDetected",
                "value": "device.third_party_integration_detected",
              },
              {
                "name": "DeviceThirdPartyIntegrationNoLongerDetected",
                "value": "device.third_party_integration_no_longer_detected",
              },
              {
                "name": "DeviceSaltoPrivacyModeActivated",
                "value": "device.salto.privacy_mode_activated",
              },
              {
                "name": "DeviceSaltoPrivacyModeDeactivated",
                "value": "device.salto.privacy_mode_deactivated",
              },
              {
                "name": "DeviceConnectionBecameFlaky",
                "value": "device.connection_became_flaky",
              },
              {
                "name": "DeviceConnectionStabilized",
                "value": "device.connection_stabilized",
              },
              {
                "name": "DeviceErrorSubscriptionRequired",
                "value": "device.error.subscription_required",
              },
              {
                "name": "DeviceErrorSubscriptionRequiredResolved",
                "value": "device.error.subscription_required.resolved",
              },
              {
                "name": "AccessCodeCreated",
                "value": "access_code.created",
              },
              {
                "name": "AccessCodeChanged",
                "value": "access_code.changed",
              },
              {
                "name": "AccessCodeScheduledOnDevice",
                "value": "access_code.scheduled_on_device",
              },
              {
                "name": "AccessCodeSetOnDevice",
                "value": "access_code.set_on_device",
              },
              {
                "name": "AccessCodeDeleted",
                "value": "access_code.deleted",
              },
              {
                "name": "AccessCodeRemovedFromDevice",
                "value": "access_code.removed_from_device",
              },
              {
                "name": "AccessCodeFailedToSetOnDevice",
                "value": "access_code.failed_to_set_on_device",
              },
              {
                "name": "AccessCodeDelayInSettingOnDevice",
                "value": "access_code.delay_in_setting_on_device",
              },
              {
                "name": "AccessCodeFailedToRemoveFromDevice",
                "value": "access_code.failed_to_remove_from_device",
              },
              {
                "name": "AccessCodeDelayInRemovingFromDevice",
                "value": "access_code.delay_in_removing_from_device",
              },
              {
                "name": "AccessCodeDeletedExternalToSeam",
                "value": "access_code.deleted_external_to_seam",
              },
              {
                "name": "AccessCodeModifiedExternalToSeam",
                "value": "access_code.modified_external_to_seam",
              },
              {
                "name": "AccessCodeUnmanagedConvertedToManaged",
                "value": "access_code.unmanaged.converted_to_managed",
              },
              {
                "name": "AccessCodeUnmanagedFailedToConvertToManaged",
                "value": "access_code.unmanaged.failed_to_convert_to_managed",
              },
              {
                "name": "AccessCodeUnmanagedCreated",
                "value": "access_code.unmanaged.created",
              },
              {
                "name": "AccessCodeUnmanagedRemoved",
                "value": "access_code.unmanaged.removed",
              },
              {
                "name": "LockLocked",
                "value": "lock.locked",
              },
              {
                "name": "LockUnlocked",
                "value": "lock.unlocked",
              },
              {
                "name": "PhoneDeactivated",
                "value": "phone.deactivated",
              },
              {
                "name": "ConnectedAccountConnected",
                "value": "connected_account.connected",
              },
              {
                "name": "ConnectedAccountSuccessfulLogin",
                "value": "connected_account.successful_login",
              },
              {
                "name": "ConnectedAccountCreated",
                "value": "connected_account.created",
              },
              {
                "name": "ConnectedAccountDeleted",
                "value": "connected_account.deleted",
              },
              {
                "name": "ConnectedAccountDisconnected",
                "value": "connected_account.disconnected",
              },
              {
                "name": "ConnectedAccountCompletedFirstSync",
                "value": "connected_account.completed_first_sync",
              },
              {
                "name": "ConnectedAccountCompletedFirstSyncAfterReconnection",
                "value": "connected_account.completed_first_sync_after_reconnection",
              },
              {
                "name": "NoiseSensorNoiseThresholdTriggered",
                "value": "noise_sensor.noise_threshold_triggered",
              },
              {
                "name": "AccessCodeBackupAccessCodePulled",
                "value": "access_code.backup_access_code_pulled",
              },
              {
                "name": "AcsSystemConnected",
                "value": "acs_system.connected",
              },
              {
                "name": "AcsUserDeleted",
                "value": "acs_user.deleted",
              },
              {
                "name": "AcsCredentialDeleted",
                "value": "acs_credential.deleted",
              },
              {
                "name": "EnrollmentAutomationDeleted",
                "value": "enrollment_automation.deleted",
              },
              {
                "name": "ClientSessionDeleted",
                "value": "client_session.deleted",
              },
              {
                "name": "ActionAttemptLockDoorSucceeded",
                "value": "action_attempt.lock_door.succeeded",
              },
              {
                "name": "ActionAttemptLockDoorFailed",
                "value": "action_attempt.lock_door.failed",
              },
              {
                "name": "ActionAttemptUnlockDoorSucceeded",
                "value": "action_attempt.unlock_door.succeeded",
              },
              {
                "name": "ActionAttemptUnlockDoorFailed",
                "value": "action_attempt.unlock_door.failed",
              },
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "EventsListResponse": {
            "docs": undefined,
            "properties": {
              "events": "list<root.Event>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
types:
  EventsGetResponse:
    properties:
      event: optional<root.Event>
      message: optional<string>
      ok: boolean
    source:
      openapi: ../openapi.json
  EventsListRequestBetweenItem:
    discriminated: false
    union:
      - string
      - datetime
    source:
      openapi: ../openapi.json
  EventsListRequestEventType:
    enum:
      - value: device.accessory_keypad_connected
        name: DeviceAccessoryKeypadConnected
      - value: device.accessory_keypad_disconnected
        name: DeviceAccessoryKeypadDisconnected
      - value: device.connected
        name: DeviceConnected
      - value: device.unmanaged.connected
        name: DeviceUnmanagedConnected
      - value: device.disconnected
        name: DeviceDisconnected
      - value: device.unmanaged.disconnected
        name: DeviceUnmanagedDisconnected
      - value: device.converted_to_unmanaged
        name: DeviceConvertedToUnmanaged
      - value: device.unmanaged.converted_to_managed
        name: DeviceUnmanagedConvertedToManaged
      - value: device.removed
        name: DeviceRemoved
      - value: device.deleted
        name: DeviceDeleted
      - value: device.tampered
        name: DeviceTampered
      - value: device.low_battery
        name: DeviceLowBattery
      - value: device.battery_status_changed
        name: DeviceBatteryStatusChanged
      - value: device.third_party_integration_detected
        name: DeviceThirdPartyIntegrationDetected
      - value: device.third_party_integration_no_longer_detected
        name: DeviceThirdPartyIntegrationNoLongerDetected
      - value: device.salto.privacy_mode_activated
        name: DeviceSaltoPrivacyModeActivated
      - value: device.salto.privacy_mode_deactivated
        name: DeviceSaltoPrivacyModeDeactivated
      - value: device.connection_became_flaky
        name: DeviceConnectionBecameFlaky
      - value: device.connection_stabilized
        name: DeviceConnectionStabilized
      - value: device.error.subscription_required
        name: DeviceErrorSubscriptionRequired
      - value: device.error.subscription_required.resolved
        name: DeviceErrorSubscriptionRequiredResolved
      - value: access_code.created
        name: AccessCodeCreated
      - value: access_code.changed
        name: AccessCodeChanged
      - value: access_code.scheduled_on_device
        name: AccessCodeScheduledOnDevice
      - value: access_code.set_on_device
        name: AccessCodeSetOnDevice
      - value: access_code.deleted
        name: AccessCodeDeleted
      - value: access_code.removed_from_device
        name: AccessCodeRemovedFromDevice
      - value: access_code.failed_to_set_on_device
        name: AccessCodeFailedToSetOnDevice
      - value: access_code.delay_in_setting_on_device
        name: AccessCodeDelayInSettingOnDevice
      - value: access_code.failed_to_remove_from_device
        name: AccessCodeFailedToRemoveFromDevice
      - value: access_code.delay_in_removing_from_device
        name: AccessCodeDelayInRemovingFromDevice
      - value: access_code.deleted_external_to_seam
        name: AccessCodeDeletedExternalToSeam
      - value: access_code.modified_external_to_seam
        name: AccessCodeModifiedExternalToSeam
      - value: access_code.unmanaged.converted_to_managed
        name: AccessCodeUnmanagedConvertedToManaged
      - value: access_code.unmanaged.failed_to_convert_to_managed
        name: AccessCodeUnmanagedFailedToConvertToManaged
      - value: access_code.unmanaged.created
        name: AccessCodeUnmanagedCreated
      - value: access_code.unmanaged.removed
        name: AccessCodeUnmanagedRemoved
      - value: lock.locked
        name: LockLocked
      - value: lock.unlocked
        name: LockUnlocked
      - value: phone.deactivated
        name: PhoneDeactivated
      - value: connected_account.connected
        name: ConnectedAccountConnected
      - value: connected_account.successful_login
        name: ConnectedAccountSuccessfulLogin
      - value: connected_account.created
        name: ConnectedAccountCreated
      - value: connected_account.deleted
        name: ConnectedAccountDeleted
      - value: connected_account.disconnected
        name: ConnectedAccountDisconnected
      - value: connected_account.completed_first_sync
        name: ConnectedAccountCompletedFirstSync
      - value: connected_account.completed_first_sync_after_reconnection
        name: ConnectedAccountCompletedFirstSyncAfterReconnection
      - value: noise_sensor.noise_threshold_triggered
        name: NoiseSensorNoiseThresholdTriggered
      - value: access_code.backup_access_code_pulled
        name: AccessCodeBackupAccessCodePulled
      - value: acs_system.connected
        name: AcsSystemConnected
      - value: acs_user.deleted
        name: AcsUserDeleted
      - value: acs_credential.deleted
        name: AcsCredentialDeleted
      - value: enrollment_automation.deleted
        name: EnrollmentAutomationDeleted
      - value: client_session.deleted
        name: ClientSessionDeleted
      - value: action_attempt.lock_door.succeeded
        name: ActionAttemptLockDoorSucceeded
      - value: action_attempt.lock_door.failed
        name: ActionAttemptLockDoorFailed
      - value: action_attempt.unlock_door.succeeded
        name: ActionAttemptUnlockDoorSucceeded
      - value: action_attempt.unlock_door.failed
        name: ActionAttemptUnlockDoorFailed
    source:
      openapi: ../openapi.json
  EventsListRequestEventTypesItem:
    enum:
      - value: device.accessory_keypad_connected
        name: DeviceAccessoryKeypadConnected
      - value: device.accessory_keypad_disconnected
        name: DeviceAccessoryKeypadDisconnected
      - value: device.connected
        name: DeviceConnected
      - value: device.unmanaged.connected
        name: DeviceUnmanagedConnected
      - value: device.disconnected
        name: DeviceDisconnected
      - value: device.unmanaged.disconnected
        name: DeviceUnmanagedDisconnected
      - value: device.converted_to_unmanaged
        name: DeviceConvertedToUnmanaged
      - value: device.unmanaged.converted_to_managed
        name: DeviceUnmanagedConvertedToManaged
      - value: device.removed
        name: DeviceRemoved
      - value: device.deleted
        name: DeviceDeleted
      - value: device.tampered
        name: DeviceTampered
      - value: device.low_battery
        name: DeviceLowBattery
      - value: device.battery_status_changed
        name: DeviceBatteryStatusChanged
      - value: device.third_party_integration_detected
        name: DeviceThirdPartyIntegrationDetected
      - value: device.third_party_integration_no_longer_detected
        name: DeviceThirdPartyIntegrationNoLongerDetected
      - value: device.salto.privacy_mode_activated
        name: DeviceSaltoPrivacyModeActivated
      - value: device.salto.privacy_mode_deactivated
        name: DeviceSaltoPrivacyModeDeactivated
      - value: device.connection_became_flaky
        name: DeviceConnectionBecameFlaky
      - value: device.connection_stabilized
        name: DeviceConnectionStabilized
      - value: device.error.subscription_required
        name: DeviceErrorSubscriptionRequired
      - value: device.error.subscription_required.resolved
        name: DeviceErrorSubscriptionRequiredResolved
      - value: access_code.created
        name: AccessCodeCreated
      - value: access_code.changed
        name: AccessCodeChanged
      - value: access_code.scheduled_on_device
        name: AccessCodeScheduledOnDevice
      - value: access_code.set_on_device
        name: AccessCodeSetOnDevice
      - value: access_code.deleted
        name: AccessCodeDeleted
      - value: access_code.removed_from_device
        name: AccessCodeRemovedFromDevice
      - value: access_code.failed_to_set_on_device
        name: AccessCodeFailedToSetOnDevice
      - value: access_code.delay_in_setting_on_device
        name: AccessCodeDelayInSettingOnDevice
      - value: access_code.failed_to_remove_from_device
        name: AccessCodeFailedToRemoveFromDevice
      - value: access_code.delay_in_removing_from_device
        name: AccessCodeDelayInRemovingFromDevice
      - value: access_code.deleted_external_to_seam
        name: AccessCodeDeletedExternalToSeam
      - value: access_code.modified_external_to_seam
        name: AccessCodeModifiedExternalToSeam
      - value: access_code.unmanaged.converted_to_managed
        name: AccessCodeUnmanagedConvertedToManaged
      - value: access_code.unmanaged.failed_to_convert_to_managed
        name: AccessCodeUnmanagedFailedToConvertToManaged
      - value: access_code.unmanaged.created
        name: AccessCodeUnmanagedCreated
      - value: access_code.unmanaged.removed
        name: AccessCodeUnmanagedRemoved
      - value: lock.locked
        name: LockLocked
      - value: lock.unlocked
        name: LockUnlocked
      - value: phone.deactivated
        name: PhoneDeactivated
      - value: connected_account.connected
        name: ConnectedAccountConnected
      - value: connected_account.successful_login
        name: ConnectedAccountSuccessfulLogin
      - value: connected_account.created
        name: ConnectedAccountCreated
      - value: connected_account.deleted
        name: ConnectedAccountDeleted
      - value: connected_account.disconnected
        name: ConnectedAccountDisconnected
      - value: connected_account.completed_first_sync
        name: ConnectedAccountCompletedFirstSync
      - value: connected_account.completed_first_sync_after_reconnection
        name: ConnectedAccountCompletedFirstSyncAfterReconnection
      - value: noise_sensor.noise_threshold_triggered
        name: NoiseSensorNoiseThresholdTriggered
      - value: access_code.backup_access_code_pulled
        name: AccessCodeBackupAccessCodePulled
      - value: acs_system.connected
        name: AcsSystemConnected
      - value: acs_user.deleted
        name: AcsUserDeleted
      - value: acs_credential.deleted
        name: AcsCredentialDeleted
      - value: enrollment_automation.deleted
        name: EnrollmentAutomationDeleted
      - value: client_session.deleted
        name: ClientSessionDeleted
      - value: action_attempt.lock_door.succeeded
        name: ActionAttemptLockDoorSucceeded
      - value: action_attempt.lock_door.failed
        name: ActionAttemptLockDoorFailed
      - value: action_attempt.unlock_door.succeeded
        name: ActionAttemptUnlockDoorSucceeded
      - value: action_attempt.unlock_door.failed
        name: ActionAttemptUnlockDoorFailed
    source:
      openapi: ../openapi.json
  EventsListResponse:
    properties:
      events: list<root.Event>
      ok: boolean
    source:
      openapi: ../openapi.json
service:
  auth: false
  base-path: ''
  endpoints:
    get:
      path: /events/get
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /events/get
      request:
        name: EventsGetRequest
        body:
          properties:
            event_id:
              type: optional<string>
              validation:
                format: uuid
            event_type: optional<string>
            device_id:
              type: optional<string>
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: EventsGetResponse
        property: event
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request: {}
          response:
            body:
              event:
                event_id: event_id
                device_id: device_id
                action_attempt_id: action_attempt_id
                acs_credential_id: acs_credential_id
                acs_user_id: acs_user_id
                acs_system_id: acs_system_id
                client_session_id: client_session_id
                enrollment_automation_id: enrollment_automation_id
                event_type: event_type
                workspace_id: workspace_id
                created_at: '2024-01-15T09:30:00Z'
                occurred_at: '2024-01-15T09:30:00Z'
              message: message
              ok: true
    list:
      path: /events/list
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /events/list
      request:
        name: EventsListRequest
        body:
          properties:
            since: optional<string>
            between: optional<list<EventsListRequestBetweenItem>>
            device_id:
              type: optional<string>
              validation:
                format: uuid
            device_ids: optional<list<string>>
            access_code_id:
              type: optional<string>
              validation:
                format: uuid
            access_code_ids: optional<list<string>>
            event_type: optional<EventsListRequestEventType>
            event_types: optional<list<EventsListRequestEventTypesItem>>
            connected_account_id:
              type: optional<string>
              validation:
                format: uuid
            limit:
              type: optional<double>
              default: 500
        content-type: application/json
      response:
        docs: OK
        type: EventsListResponse
        property: events
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request: {}
          response:
            body:
              events:
                - event_id: event_id
                  device_id: device_id
                  action_attempt_id: action_attempt_id
                  acs_credential_id: acs_credential_id
                  acs_user_id: acs_user_id
                  acs_system_id: acs_system_id
                  client_session_id: client_session_id
                  enrollment_automation_id: enrollment_automation_id
                  event_type: event_type
                  workspace_id: workspace_id
                  created_at: '2024-01-15T09:30:00Z'
                  occurred_at: '2024-01-15T09:30:00Z'
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "locks.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "get": {
              "auth": true,
              "display-name": "/locks/get",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {},
                  "response": {
                    "body": {
                      "device": {
                        "can_program_offline_access_codes": true,
                        "can_program_online_access_codes": true,
                        "can_remotely_lock": true,
                        "can_remotely_unlock": true,
                        "can_simulate_connection": true,
                        "can_simulate_disconnection": true,
                        "can_simulate_removal": true,
                        "capabilities_supported": [
                          "access_code",
                        ],
                        "connected_account_id": "connected_account_id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "custom_metadata": {
                          "key": "value",
                        },
                        "device_id": "device_id",
                        "device_type": "akuvox_lock",
                        "display_name": "display_name",
                        "errors": [
                          {
                            "error_code": "error_code",
                            "message": "message",
                          },
                        ],
                        "is_managed": true,
                        "location": {
                          "location_name": "location_name",
                          "timezone": "timezone",
                        },
                        "nickname": "nickname",
                        "properties": {
                          "_experimental_supported_code_from_access_codes_lengths": [
                            1.1,
                          ],
                          "accessory_keypad": {
                            "is_connected": true,
                          },
                          "appearance": {
                            "name": "name",
                          },
                          "assa_abloy_credential_service_metadata": {
                            "endpoints": [
                              {
                                "endpoint_id": "endpoint_id",
                                "is_active": true,
                              },
                            ],
                            "has_active_endpoint": true,
                          },
                          "august_metadata": {
                            "has_keypad": true,
                            "house_name": "house_name",
                            "lock_id": "lock_id",
                            "lock_name": "lock_name",
                          },
                          "avigilon_alta_metadata": {
                            "entry_name": "entry_name",
                            "entry_relays_total_count": 1.1,
                            "org_name": "org_name",
                            "site_id": 1.1,
                            "site_name": "site_name",
                            "zone_id": 1.1,
                            "zone_name": "zone_name",
                          },
                          "battery": {
                            "level": 1.1,
                            "status": "critical",
                          },
                          "battery_level": 1.1,
                          "brivo_metadata": {
                            "device_name": "device_name",
                          },
                          "code_constraints": [
                            {
                              "constraint_type": "no_zeros",
                            },
                          ],
                          "controlbyweb_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                          },
                          "currently_triggering_noise_threshold_ids": [
                            "currently_triggering_noise_threshold_ids",
                          ],
                          "door_open": true,
                          "dormakaba_oracode_metadata": {
                            "door_id": 1.1,
                            "door_is_wireless": true,
                            "door_name": "door_name",
                            "site_id": 1.1,
                            "site_name": "site_name",
                          },
                          "ecobee_metadata": {
                            "device_name": "device_name",
                            "ecobee_device_id": "ecobee_device_id",
                          },
                          "four_suites_metadata": {
                            "device_id": 1.1,
                            "device_name": "device_name",
                            "reclose_delay_in_seconds": 1.1,
                          },
                          "genie_metadata": {
                            "device_name": "device_name",
                            "door_name": "door_name",
                          },
                          "has_direct_power": true,
                          "has_native_entry_events": true,
                          "honeywell_resideo_metadata": {
                            "device_name": "device_name",
                            "honeywell_resideo_device_id": "honeywell_resideo_device_id",
                          },
                          "hubitat_metadata": {
                            "device_id": "device_id",
                            "device_label": "device_label",
                            "device_name": "device_name",
                          },
                          "igloo_metadata": {
                            "bridge_id": "bridge_id",
                            "device_id": "device_id",
                          },
                          "igloohome_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                          },
                          "image_alt_text": "image_alt_text",
                          "image_url": "image_url",
                          "keypad_battery": {
                            "level": 1.1,
                          },
                          "kwikset_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                            "model_number": "model_number",
                          },
                          "locked": true,
                          "lockly_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                          },
                          "manufacturer": "manufacturer",
                          "max_active_codes_supported": 1.1,
                          "minut_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                            "latest_sensor_values": {
                              "accelerometer_z": {
                                "time": "time",
                                "value": 1.1,
                              },
                              "humidity": {
                                "time": "time",
                                "value": 1.1,
                              },
                              "pressure": {
                                "time": "time",
                                "value": 1.1,
                              },
                              "sound": {
                                "time": "time",
                                "value": 1.1,
                              },
                              "temperature": {
                                "time": "time",
                                "value": 1.1,
                              },
                            },
                          },
                          "model": {
                            "display_name": "display_name",
                            "manufacturer_display_name": "manufacturer_display_name",
                          },
                          "name": "name",
                          "nest_metadata": {
                            "custom_name": "custom_name",
                            "device_name": "device_name",
                            "nest_device_id": "nest_device_id",
                          },
                          "noise_level_decibels": 1.1,
                          "noiseaware_metadata": {
                            "device_id": "device_id",
                            "device_model": "indoor",
                            "device_name": "device_name",
                            "noise_level_decibel": 1.1,
                            "noise_level_nrs": 1.1,
                          },
                          "nuki_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                          },
                          "offline_access_codes_enabled": true,
                          "online": true,
                          "online_access_codes_enabled": true,
                          "salto_metadata": {
                            "battery_level": "battery_level",
                            "customer_reference": "customer_reference",
                            "lock_id": "lock_id",
                            "lock_type": "lock_type",
                            "locked_state": "locked_state",
                          },
                          "schlage_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                          },
                          "seam_bridge_metadata": {
                            "device_num": 1.1,
                            "name": "name",
                          },
                          "serial_number": "serial_number",
                          "smartthings_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                          },
                          "supported_code_lengths": [
                            1.1,
                          ],
                          "supports_accessory_keypad": true,
                          "supports_backup_access_code_pool": true,
                          "supports_offline_access_codes": true,
                          "tedee_metadata": {
                            "bridge_id": 1.1,
                            "bridge_name": "bridge_name",
                            "device_id": 1.1,
                            "device_model": "device_model",
                            "device_name": "device_name",
                            "serial_number": "serial_number",
                          },
                          "ttlock_metadata": {
                            "feature_value": "feature_value",
                            "lock_alias": "lock_alias",
                            "lock_id": 1.1,
                          },
                          "two_n_metadata": {
                            "device_id": 1.1,
                            "device_name": "device_name",
                          },
                          "wyze_metadata": {
                            "device_id": "device_id",
                            "device_info_model": "device_info_model",
                            "device_name": "device_name",
                            "product_model": "product_model",
                            "product_name": "product_name",
                            "product_type": "product_type",
                          },
                        },
                        "warnings": [
                          {
                            "message": "message",
                            "warning_code": "warning_code",
                          },
                        ],
                        "workspace_id": "workspace_id",
                      },
                      "lock": {
                        "can_program_offline_access_codes": true,
                        "can_program_online_access_codes": true,
                        "can_remotely_lock": true,
                        "can_remotely_unlock": true,
                        "can_simulate_connection": true,
                        "can_simulate_disconnection": true,
                        "can_simulate_removal": true,
                        "capabilities_supported": [
                          "access_code",
                        ],
                        "connected_account_id": "connected_account_id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "custom_metadata": {
                          "key": "value",
                        },
                        "device_id": "device_id",
                        "device_type": "akuvox_lock",
                        "display_name": "display_name",
                        "errors": [
                          {
                            "error_code": "error_code",
                            "message": "message",
                          },
                        ],
                        "is_managed": true,
                        "location": {
                          "location_name": "location_name",
                          "timezone": "timezone",
                        },
                        "nickname": "nickname",
                        "properties": {
                          "_experimental_supported_code_from_access_codes_lengths": [
                            1.1,
                          ],
                          "accessory_keypad": {
                            "is_connected": true,
                          },
                          "appearance": {
                            "name": "name",
                          },
                          "assa_abloy_credential_service_metadata": {
                            "endpoints": [
                              {
                                "endpoint_id": "endpoint_id",
                                "is_active": true,
                              },
                            ],
                            "has_active_endpoint": true,
                          },
                          "august_metadata": {
                            "has_keypad": true,
                            "house_name": "house_name",
                            "lock_id": "lock_id",
                            "lock_name": "lock_name",
                          },
                          "avigilon_alta_metadata": {
                            "entry_name": "entry_name",
                            "entry_relays_total_count": 1.1,
                            "org_name": "org_name",
                            "site_id": 1.1,
                            "site_name": "site_name",
                            "zone_id": 1.1,
                            "zone_name": "zone_name",
                          },
                          "battery": {
                            "level": 1.1,
                            "status": "critical",
                          },
                          "battery_level": 1.1,
                          "brivo_metadata": {
                            "device_name": "device_name",
                          },
                          "code_constraints": [
                            {
                              "constraint_type": "no_zeros",
                            },
                          ],
                          "controlbyweb_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                          },
                          "currently_triggering_noise_threshold_ids": [
                            "currently_triggering_noise_threshold_ids",
                          ],
                          "door_open": true,
                          "dormakaba_oracode_metadata": {
                            "door_id": 1.1,
                            "door_is_wireless": true,
                            "door_name": "door_name",
                            "site_id": 1.1,
                            "site_name": "site_name",
                          },
                          "ecobee_metadata": {
                            "device_name": "device_name",
                            "ecobee_device_id": "ecobee_device_id",
                          },
                          "four_suites_metadata": {
                            "device_id": 1.1,
                            "device_name": "device_name",
                            "reclose_delay_in_seconds": 1.1,
                          },
                          "genie_metadata": {
                            "device_name": "device_name",
                            "door_name": "door_name",
                          },
                          "has_direct_power": true,
                          "has_native_entry_events": true,
                          "honeywell_resideo_metadata": {
                            "device_name": "device_name",
                            "honeywell_resideo_device_id": "honeywell_resideo_device_id",
                          },
                          "hubitat_metadata": {
                            "device_id": "device_id",
                            "device_label": "device_label",
                            "device_name": "device_name",
                          },
                          "igloo_metadata": {
                            "bridge_id": "bridge_id",
                            "device_id": "device_id",
                          },
                          "igloohome_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                          },
                          "image_alt_text": "image_alt_text",
                          "image_url": "image_url",
                          "keypad_battery": {
                            "level": 1.1,
                          },
                          "kwikset_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                            "model_number": "model_number",
                          },
                          "locked": true,
                          "lockly_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                          },
                          "manufacturer": "manufacturer",
                          "max_active_codes_supported": 1.1,
                          "minut_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                            "latest_sensor_values": {
                              "accelerometer_z": {
                                "time": "time",
                                "value": 1.1,
                              },
                              "humidity": {
                                "time": "time",
                                "value": 1.1,
                              },
                              "pressure": {
                                "time": "time",
                                "value": 1.1,
                              },
                              "sound": {
                                "time": "time",
                                "value": 1.1,
                              },
                              "temperature": {
                                "time": "time",
                                "value": 1.1,
                              },
                            },
                          },
                          "model": {
                            "display_name": "display_name",
                            "manufacturer_display_name": "manufacturer_display_name",
                          },
                          "name": "name",
                          "nest_metadata": {
                            "custom_name": "custom_name",
                            "device_name": "device_name",
                            "nest_device_id": "nest_device_id",
                          },
                          "noise_level_decibels": 1.1,
                          "noiseaware_metadata": {
                            "device_id": "device_id",
                            "device_model": "indoor",
                            "device_name": "device_name",
                            "noise_level_decibel": 1.1,
                            "noise_level_nrs": 1.1,
                          },
                          "nuki_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                          },
                          "offline_access_codes_enabled": true,
                          "online": true,
                          "online_access_codes_enabled": true,
                          "salto_metadata": {
                            "battery_level": "battery_level",
                            "customer_reference": "customer_reference",
                            "lock_id": "lock_id",
                            "lock_type": "lock_type",
                            "locked_state": "locked_state",
                          },
                          "schlage_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                          },
                          "seam_bridge_metadata": {
                            "device_num": 1.1,
                            "name": "name",
                          },
                          "serial_number": "serial_number",
                          "smartthings_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                          },
                          "supported_code_lengths": [
                            1.1,
                          ],
                          "supports_accessory_keypad": true,
                          "supports_backup_access_code_pool": true,
                          "supports_offline_access_codes": true,
                          "tedee_metadata": {
                            "bridge_id": 1.1,
                            "bridge_name": "bridge_name",
                            "device_id": 1.1,
                            "device_model": "device_model",
                            "device_name": "device_name",
                            "serial_number": "serial_number",
                          },
                          "ttlock_metadata": {
                            "feature_value": "feature_value",
                            "lock_alias": "lock_alias",
                            "lock_id": 1.1,
                          },
                          "two_n_metadata": {
                            "device_id": 1.1,
                            "device_name": "device_name",
                          },
                          "wyze_metadata": {
                            "device_id": "device_id",
                            "device_info_model": "device_info_model",
                            "device_name": "device_name",
                            "product_model": "product_model",
                            "product_name": "product_name",
                            "product_type": "product_type",
                          },
                        },
                        "warnings": [
                          {
                            "message": "message",
                            "warning_code": "warning_code",
                          },
                        ],
                        "workspace_id": "workspace_id",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/locks/get",
              "request": {
                "body": {
                  "properties": {
                    "device_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "name": "optional<string>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "LocksGetRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "device",
                "type": "LocksGetResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list": {
              "auth": true,
              "display-name": "/locks/list",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {},
                  "response": {
                    "body": {
                      "devices": [
                        {
                          "can_program_offline_access_codes": true,
                          "can_program_online_access_codes": true,
                          "can_remotely_lock": true,
                          "can_remotely_unlock": true,
                          "can_simulate_connection": true,
                          "can_simulate_disconnection": true,
                          "can_simulate_removal": true,
                          "capabilities_supported": [
                            "access_code",
                          ],
                          "connected_account_id": "connected_account_id",
                          "created_at": "2024-01-15T09:30:00Z",
                          "custom_metadata": {
                            "key": "value",
                          },
                          "device_id": "device_id",
                          "device_type": "akuvox_lock",
                          "display_name": "display_name",
                          "errors": [
                            {
                              "error_code": "error_code",
                              "message": "message",
                            },
                          ],
                          "is_managed": true,
                          "nickname": "nickname",
                          "properties": {
                            "appearance": {
                              "name": "name",
                            },
                            "model": {
                              "display_name": "display_name",
                              "manufacturer_display_name": "manufacturer_display_name",
                            },
                            "name": "name",
                            "online": true,
                          },
                          "warnings": [
                            {
                              "message": "message",
                              "warning_code": "warning_code",
                            },
                          ],
                          "workspace_id": "workspace_id",
                        },
                      ],
                      "locks": [
                        {
                          "can_program_offline_access_codes": true,
                          "can_program_online_access_codes": true,
                          "can_remotely_lock": true,
                          "can_remotely_unlock": true,
                          "can_simulate_connection": true,
                          "can_simulate_disconnection": true,
                          "can_simulate_removal": true,
                          "capabilities_supported": [
                            "access_code",
                          ],
                          "connected_account_id": "connected_account_id",
                          "created_at": "2024-01-15T09:30:00Z",
                          "custom_metadata": {
                            "key": "value",
                          },
                          "device_id": "device_id",
                          "device_type": "akuvox_lock",
                          "display_name": "display_name",
                          "errors": [
                            {
                              "error_code": "error_code",
                              "message": "message",
                            },
                          ],
                          "is_managed": true,
                          "nickname": "nickname",
                          "properties": {
                            "appearance": {
                              "name": "name",
                            },
                            "model": {
                              "display_name": "display_name",
                              "manufacturer_display_name": "manufacturer_display_name",
                            },
                            "name": "name",
                            "online": true,
                          },
                          "warnings": [
                            {
                              "message": "message",
                              "warning_code": "warning_code",
                            },
                          ],
                          "workspace_id": "workspace_id",
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/locks/list",
              "request": {
                "body": {
                  "properties": {
                    "connect_webview_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "connected_account_id": {
                      "docs": "List all devices owned by this connected account",
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "connected_account_ids": "optional<list<string>>",
                    "created_before": "optional<datetime>",
                    "custom_metadata_has": "optional<map<string, LocksListRequestCustomMetadataHasValue>>",
                    "device_ids": "optional<list<string>>",
                    "device_type": "optional<LocksListRequestDeviceType>",
                    "device_types": "optional<list<LocksListRequestDeviceTypesItem>>",
                    "exclude_if": "optional<list<LocksListRequestExcludeIfItem>>",
                    "include_if": "optional<list<LocksListRequestIncludeIfItem>>",
                    "limit": {
                      "default": 500,
                      "type": "optional<double>",
                    },
                    "manufacturer": "optional<LocksListRequestManufacturer>",
                    "user_identifier_key": "optional<string>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "LocksListRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "devices",
                "type": "LocksListResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "lock_door": {
              "auth": true,
              "display-name": "/locks/lock_door",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "device_id": "device_id",
                  },
                  "response": {
                    "body": {
                      "action_attempt": {
                        "action_attempt_id": "action_attempt_id",
                        "action_type": "LOCK_DOOR",
                        "error": "error",
                        "result": "result",
                        "status": "pending",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/locks/lock_door",
              "request": {
                "body": {
                  "properties": {
                    "device_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "sync": {
                      "default": false,
                      "type": "optional<boolean>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "LocksLockDoorRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "action_attempt",
                "type": "LocksLockDoorResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "unlock_door": {
              "auth": true,
              "display-name": "/locks/unlock_door",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "device_id": "device_id",
                  },
                  "response": {
                    "body": {
                      "action_attempt": {
                        "action_attempt_id": "action_attempt_id",
                        "action_type": "LOCK_DOOR",
                        "error": "error",
                        "result": "result",
                        "status": "pending",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/locks/unlock_door",
              "request": {
                "body": {
                  "properties": {
                    "device_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "sync": {
                      "default": false,
                      "type": "optional<boolean>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "LocksUnlockDoorRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "action_attempt",
                "type": "LocksUnlockDoorResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "LocksGetResponse": {
            "docs": undefined,
            "properties": {
              "device": "root.Device",
              "lock": "root.Device",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "LocksListRequestCustomMetadataHasValue": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
            "union": [
              "string",
              "boolean",
            ],
          },
          "LocksListRequestDeviceType": {
            "enum": [
              "akuvox_lock",
              "august_lock",
              "brivo_access_point",
              "butterflymx_panel",
              "avigilon_alta_entry",
              "doorking_lock",
              "genie_door",
              "igloo_lock",
              "linear_lock",
              "lockly_lock",
              "kwikset_lock",
              "nuki_lock",
              "salto_lock",
              "schlage_lock",
              "seam_relay",
              "smartthings_lock",
              "wyze_lock",
              "yale_lock",
              "two_n_intercom",
              "controlbyweb_device",
              "ttlock_lock",
              "igloohome_lock",
              "hubitat_lock",
              "four_suites_door",
              "dormakaba_oracode_door",
              "tedee_lock",
              "noiseaware_activity_zone",
              "minut_sensor",
              "ecobee_thermostat",
              "nest_thermostat",
              "honeywell_resideo_thermostat",
              "ios_phone",
              "android_phone",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "LocksListRequestDeviceTypesItem": {
            "enum": [
              "akuvox_lock",
              "august_lock",
              "brivo_access_point",
              "butterflymx_panel",
              "avigilon_alta_entry",
              "doorking_lock",
              "genie_door",
              "igloo_lock",
              "linear_lock",
              "lockly_lock",
              "kwikset_lock",
              "nuki_lock",
              "salto_lock",
              "schlage_lock",
              "seam_relay",
              "smartthings_lock",
              "wyze_lock",
              "yale_lock",
              "two_n_intercom",
              "controlbyweb_device",
              "ttlock_lock",
              "igloohome_lock",
              "hubitat_lock",
              "four_suites_door",
              "dormakaba_oracode_door",
              "tedee_lock",
              "noiseaware_activity_zone",
              "minut_sensor",
              "ecobee_thermostat",
              "nest_thermostat",
              "honeywell_resideo_thermostat",
              "ios_phone",
              "android_phone",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "LocksListRequestExcludeIfItem": {
            "enum": [
              "can_remotely_unlock",
              "can_remotely_lock",
              "can_program_offline_access_codes",
              "can_program_online_access_codes",
              "can_simulate_removal",
              "can_simulate_connection",
              "can_simulate_disconnection",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "LocksListRequestIncludeIfItem": {
            "enum": [
              "can_remotely_unlock",
              "can_remotely_lock",
              "can_program_offline_access_codes",
              "can_program_online_access_codes",
              "can_simulate_removal",
              "can_simulate_connection",
              "can_simulate_disconnection",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "LocksListRequestManufacturer": {
            "enum": [
              "akuvox",
              "august",
              "avigilon_alta",
              "brivo",
              "butterflymx",
              "doorking",
              "four_suites",
              "genie",
              "igloo",
              "keywe",
              "kwikset",
              "linear",
              "lockly",
              "nuki",
              "philia",
              "salto",
              "samsung",
              "schlage",
              "seam",
              "unknown",
              "wyze",
              "yale",
              "minut",
              "two_n",
              "ttlock",
              "nest",
              "igloohome",
              "ecobee",
              "hubitat",
              "controlbyweb",
              "smartthings",
              "dormakaba_oracode",
              "tedee",
              "honeywell_resideo",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "LocksListResponse": {
            "docs": undefined,
            "properties": {
              "devices": "list<root.Device>",
              "locks": "list<root.Device>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "LocksLockDoorResponse": {
            "docs": undefined,
            "properties": {
              "action_attempt": "root.ActionAttempt",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "LocksUnlockDoorResponse": {
            "docs": undefined,
            "properties": {
              "action_attempt": "root.ActionAttempt",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
types:
  LocksGetResponse:
    properties:
      lock: root.Device
      device: root.Device
      ok: boolean
    source:
      openapi: ../openapi.json
  LocksListRequestDeviceType:
    enum:
      - akuvox_lock
      - august_lock
      - brivo_access_point
      - butterflymx_panel
      - avigilon_alta_entry
      - doorking_lock
      - genie_door
      - igloo_lock
      - linear_lock
      - lockly_lock
      - kwikset_lock
      - nuki_lock
      - salto_lock
      - schlage_lock
      - seam_relay
      - smartthings_lock
      - wyze_lock
      - yale_lock
      - two_n_intercom
      - controlbyweb_device
      - ttlock_lock
      - igloohome_lock
      - hubitat_lock
      - four_suites_door
      - dormakaba_oracode_door
      - tedee_lock
      - noiseaware_activity_zone
      - minut_sensor
      - ecobee_thermostat
      - nest_thermostat
      - honeywell_resideo_thermostat
      - ios_phone
      - android_phone
    source:
      openapi: ../openapi.json
  LocksListRequestDeviceTypesItem:
    enum:
      - akuvox_lock
      - august_lock
      - brivo_access_point
      - butterflymx_panel
      - avigilon_alta_entry
      - doorking_lock
      - genie_door
      - igloo_lock
      - linear_lock
      - lockly_lock
      - kwikset_lock
      - nuki_lock
      - salto_lock
      - schlage_lock
      - seam_relay
      - smartthings_lock
      - wyze_lock
      - yale_lock
      - two_n_intercom
      - controlbyweb_device
      - ttlock_lock
      - igloohome_lock
      - hubitat_lock
      - four_suites_door
      - dormakaba_oracode_door
      - tedee_lock
      - noiseaware_activity_zone
      - minut_sensor
      - ecobee_thermostat
      - nest_thermostat
      - honeywell_resideo_thermostat
      - ios_phone
      - android_phone
    source:
      openapi: ../openapi.json
  LocksListRequestManufacturer:
    enum:
      - akuvox
      - august
      - avigilon_alta
      - brivo
      - butterflymx
      - doorking
      - four_suites
      - genie
      - igloo
      - keywe
      - kwikset
      - linear
      - lockly
      - nuki
      - philia
      - salto
      - samsung
      - schlage
      - seam
      - unknown
      - wyze
      - yale
      - minut
      - two_n
      - ttlock
      - nest
      - igloohome
      - ecobee
      - hubitat
      - controlbyweb
      - smartthings
      - dormakaba_oracode
      - tedee
      - honeywell_resideo
    source:
      openapi: ../openapi.json
  LocksListRequestCustomMetadataHasValue:
    discriminated: false
    union:
      - string
      - boolean
    source:
      openapi: ../openapi.json
  LocksListRequestIncludeIfItem:
    enum:
      - can_remotely_unlock
      - can_remotely_lock
      - can_program_offline_access_codes
      - can_program_online_access_codes
      - can_simulate_removal
      - can_simulate_connection
      - can_simulate_disconnection
    source:
      openapi: ../openapi.json
  LocksListRequestExcludeIfItem:
    enum:
      - can_remotely_unlock
      - can_remotely_lock
      - can_program_offline_access_codes
      - can_program_online_access_codes
      - can_simulate_removal
      - can_simulate_connection
      - can_simulate_disconnection
    source:
      openapi: ../openapi.json
  LocksListResponse:
    properties:
      locks: list<root.Device>
      devices: list<root.Device>
      ok: boolean
    source:
      openapi: ../openapi.json
  LocksLockDoorResponse:
    properties:
      action_attempt: root.ActionAttempt
      ok: boolean
    source:
      openapi: ../openapi.json
  LocksUnlockDoorResponse:
    properties:
      action_attempt: root.ActionAttempt
      ok: boolean
    source:
      openapi: ../openapi.json
service:
  auth: false
  base-path: ''
  endpoints:
    get:
      path: /locks/get
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /locks/get
      request:
        name: LocksGetRequest
        body:
          properties:
            device_id:
              type: optional<string>
              validation:
                format: uuid
            name: optional<string>
        content-type: application/json
      response:
        docs: OK
        type: LocksGetResponse
        property: device
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request: {}
          response:
            body:
              lock:
                device_id: device_id
                device_type: akuvox_lock
                nickname: nickname
                display_name: display_name
                capabilities_supported:
                  - access_code
                properties:
                  online: true
                  name: name
                  accessory_keypad:
                    is_connected: true
                  appearance:
                    name: name
                  model:
                    display_name: display_name
                    manufacturer_display_name: manufacturer_display_name
                  has_direct_power: true
                  battery_level: 1.1
                  battery:
                    level: 1.1
                    status: critical
                  manufacturer: manufacturer
                  image_url: image_url
                  image_alt_text: image_alt_text
                  serial_number: serial_number
                  online_access_codes_enabled: true
                  offline_access_codes_enabled: true
                  supports_accessory_keypad: true
                  supports_offline_access_codes: true
                  noise_level_decibels: 1.1
                  currently_triggering_noise_threshold_ids:
                    - currently_triggering_noise_threshold_ids
                  assa_abloy_credential_service_metadata:
                    has_active_endpoint: true
                    endpoints:
                      - endpoint_id: endpoint_id
                        is_active: true
                  august_metadata:
                    lock_id: lock_id
                    lock_name: lock_name
                    house_name: house_name
                    has_keypad: true
                  avigilon_alta_metadata:
                    entry_name: entry_name
                    org_name: org_name
                    zone_id: 1.1
                    zone_name: zone_name
                    site_id: 1.1
                    site_name: site_name
                    entry_relays_total_count: 1.1
                  schlage_metadata:
                    device_id: device_id
                    device_name: device_name
                  smartthings_metadata:
                    device_id: device_id
                    device_name: device_name
                  lockly_metadata:
                    device_id: device_id
                    device_name: device_name
                  nuki_metadata:
                    device_id: device_id
                    device_name: device_name
                  kwikset_metadata:
                    device_id: device_id
                    device_name: device_name
                    model_number: model_number
                  salto_metadata:
                    lock_id: lock_id
                    customer_reference: customer_reference
                    lock_type: lock_type
                    battery_level: battery_level
                    locked_state: locked_state
                  genie_metadata:
                    device_name: device_name
                    door_name: door_name
                  brivo_metadata:
                    device_name: device_name
                  igloo_metadata:
                    device_id: device_id
                    bridge_id: bridge_id
                  noiseaware_metadata:
                    device_model: indoor
                    noise_level_nrs: 1.1
                    noise_level_decibel: 1.1
                    device_name: device_name
                    device_id: device_id
                  minut_metadata:
                    device_id: device_id
                    device_name: device_name
                    latest_sensor_values:
                      temperature:
                        time: time
                        value: 1.1
                      sound:
                        time: time
                        value: 1.1
                      humidity:
                        time: time
                        value: 1.1
                      pressure:
                        time: time
                        value: 1.1
                      accelerometer_z:
                        time: time
                        value: 1.1
                  four_suites_metadata:
                    device_id: 1.1
                    device_name: device_name
                    reclose_delay_in_seconds: 1.1
                  two_n_metadata:
                    device_id: 1.1
                    device_name: device_name
                  controlbyweb_metadata:
                    device_id: device_id
                    device_name: device_name
                  ttlock_metadata:
                    lock_id: 1.1
                    lock_alias: lock_alias
                    feature_value: feature_value
                  seam_bridge_metadata:
                    device_num: 1.1
                    name: name
                  igloohome_metadata:
                    device_id: device_id
                    device_name: device_name
                  nest_metadata:
                    nest_device_id: nest_device_id
                    device_name: device_name
                    custom_name: custom_name
                  ecobee_metadata:
                    ecobee_device_id: ecobee_device_id
                    device_name: device_name
                  honeywell_resideo_metadata:
                    honeywell_resideo_device_id: honeywell_resideo_device_id
                    device_name: device_name
                  hubitat_metadata:
                    device_id: device_id
                    device_name: device_name
                    device_label: device_label
                  dormakaba_oracode_metadata:
                    door_id: 1.1
                    door_name: door_name
                    door_is_wireless: true
                    site_id: 1.1
                    site_name: site_name
                  wyze_metadata:
                    device_id: device_id
                    device_name: device_name
                    product_name: product_name
                    product_type: product_type
                    product_model: product_model
                    device_info_model: device_info_model
                  tedee_metadata:
                    device_id: 1.1
                    serial_number: serial_number
                    device_name: device_name
                    device_model: device_model
                    bridge_id: 1.1
                    bridge_name: bridge_name
                  _experimental_supported_code_from_access_codes_lengths:
                    - 1.1
                  code_constraints:
                    - constraint_type: no_zeros
                  supported_code_lengths:
                    - 1.1
                  max_active_codes_supported: 1.1
                  supports_backup_access_code_pool: true
                  has_native_entry_events: true
                  locked: true
                  keypad_battery:
                    level: 1.1
                  door_open: true
                location:
                  location_name: location_name
                  timezone: timezone
                connected_account_id: connected_account_id
                workspace_id: workspace_id
                errors:
                  - error_code: error_code
                    message: message
                warnings:
                  - warning_code: warning_code
                    message: message
                created_at: '2024-01-15T09:30:00Z'
                is_managed: true
                custom_metadata:
                  key: value
                can_remotely_unlock: true
                can_remotely_lock: true
                can_program_offline_access_codes: true
                can_program_online_access_codes: true
                can_simulate_removal: true
                can_simulate_connection: true
                can_simulate_disconnection: true
              device:
                device_id: device_id
                device_type: akuvox_lock
                nickname: nickname
                display_name: display_name
                capabilities_supported:
                  - access_code
                properties:
                  online: true
                  name: name
                  accessory_keypad:
                    is_connected: true
                  appearance:
                    name: name
                  model:
                    display_name: display_name
                    manufacturer_display_name: manufacturer_display_name
                  has_direct_power: true
                  battery_level: 1.1
                  battery:
                    level: 1.1
                    status: critical
                  manufacturer: manufacturer
                  image_url: image_url
                  image_alt_text: image_alt_text
                  serial_number: serial_number
                  online_access_codes_enabled: true
                  offline_access_codes_enabled: true
                  supports_accessory_keypad: true
                  supports_offline_access_codes: true
                  noise_level_decibels: 1.1
                  currently_triggering_noise_threshold_ids:
                    - currently_triggering_noise_threshold_ids
                  assa_abloy_credential_service_metadata:
                    has_active_endpoint: true
                    endpoints:
                      - endpoint_id: endpoint_id
                        is_active: true
                  august_metadata:
                    lock_id: lock_id
                    lock_name: lock_name
                    house_name: house_name
                    has_keypad: true
                  avigilon_alta_metadata:
                    entry_name: entry_name
                    org_name: org_name
                    zone_id: 1.1
                    zone_name: zone_name
                    site_id: 1.1
                    site_name: site_name
                    entry_relays_total_count: 1.1
                  schlage_metadata:
                    device_id: device_id
                    device_name: device_name
                  smartthings_metadata:
                    device_id: device_id
                    device_name: device_name
                  lockly_metadata:
                    device_id: device_id
                    device_name: device_name
                  nuki_metadata:
                    device_id: device_id
                    device_name: device_name
                  kwikset_metadata:
                    device_id: device_id
                    device_name: device_name
                    model_number: model_number
                  salto_metadata:
                    lock_id: lock_id
                    customer_reference: customer_reference
                    lock_type: lock_type
                    battery_level: battery_level
                    locked_state: locked_state
                  genie_metadata:
                    device_name: device_name
                    door_name: door_name
                  brivo_metadata:
                    device_name: device_name
                  igloo_metadata:
                    device_id: device_id
                    bridge_id: bridge_id
                  noiseaware_metadata:
                    device_model: indoor
                    noise_level_nrs: 1.1
                    noise_level_decibel: 1.1
                    device_name: device_name
                    device_id: device_id
                  minut_metadata:
                    device_id: device_id
                    device_name: device_name
                    latest_sensor_values:
                      temperature:
                        time: time
                        value: 1.1
                      sound:
                        time: time
                        value: 1.1
                      humidity:
                        time: time
                        value: 1.1
                      pressure:
                        time: time
                        value: 1.1
                      accelerometer_z:
                        time: time
                        value: 1.1
                  four_suites_metadata:
                    device_id: 1.1
                    device_name: device_name
                    reclose_delay_in_seconds: 1.1
                  two_n_metadata:
                    device_id: 1.1
                    device_name: device_name
                  controlbyweb_metadata:
                    device_id: device_id
                    device_name: device_name
                  ttlock_metadata:
                    lock_id: 1.1
                    lock_alias: lock_alias
                    feature_value: feature_value
                  seam_bridge_metadata:
                    device_num: 1.1
                    name: name
                  igloohome_metadata:
                    device_id: device_id
                    device_name: device_name
                  nest_metadata:
                    nest_device_id: nest_device_id
                    device_name: device_name
                    custom_name: custom_name
                  ecobee_metadata:
                    ecobee_device_id: ecobee_device_id
                    device_name: device_name
                  honeywell_resideo_metadata:
                    honeywell_resideo_device_id: honeywell_resideo_device_id
                    device_name: device_name
                  hubitat_metadata:
                    device_id: device_id
                    device_name: device_name
                    device_label: device_label
                  dormakaba_oracode_metadata:
                    door_id: 1.1
                    door_name: door_name
                    door_is_wireless: true
                    site_id: 1.1
                    site_name: site_name
                  wyze_metadata:
                    device_id: device_id
                    device_name: device_name
                    product_name: product_name
                    product_type: product_type
                    product_model: product_model
                    device_info_model: device_info_model
                  tedee_metadata:
                    device_id: 1.1
                    serial_number: serial_number
                    device_name: device_name
                    device_model: device_model
                    bridge_id: 1.1
                    bridge_name: bridge_name
                  _experimental_supported_code_from_access_codes_lengths:
                    - 1.1
                  code_constraints:
                    - constraint_type: no_zeros
                  supported_code_lengths:
                    - 1.1
                  max_active_codes_supported: 1.1
                  supports_backup_access_code_pool: true
                  has_native_entry_events: true
                  locked: true
                  keypad_battery:
                    level: 1.1
                  door_open: true
                location:
                  location_name: location_name
                  timezone: timezone
                connected_account_id: connected_account_id
                workspace_id: workspace_id
                errors:
                  - error_code: error_code
                    message: message
                warnings:
                  - warning_code: warning_code
                    message: message
                created_at: '2024-01-15T09:30:00Z'
                is_managed: true
                custom_metadata:
                  key: value
                can_remotely_unlock: true
                can_remotely_lock: true
                can_program_offline_access_codes: true
                can_program_online_access_codes: true
                can_simulate_removal: true
                can_simulate_connection: true
                can_simulate_disconnection: true
              ok: true
    list:
      path: /locks/list
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /locks/list
      request:
        name: LocksListRequest
        body:
          properties:
            connected_account_id:
              type: optional<string>
              docs: List all devices owned by this connected account
              validation:
                format: uuid
            connected_account_ids: optional<list<string>>
            connect_webview_id:
              type: optional<string>
              validation:
                format: uuid
            device_type: optional<LocksListRequestDeviceType>
            device_types: optional<list<LocksListRequestDeviceTypesItem>>
            manufacturer: optional<LocksListRequestManufacturer>
            device_ids: optional<list<string>>
            limit:
              type: optional<double>
              default: 500
            created_before: optional<datetime>
            user_identifier_key: optional<string>
            custom_metadata_has: optional<map<string, LocksListRequestCustomMetadataHasValue>>
            include_if: optional<list<LocksListRequestIncludeIfItem>>
            exclude_if: optional<list<LocksListRequestExcludeIfItem>>
        content-type: application/json
      response:
        docs: OK
        type: LocksListResponse
        property: devices
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request: {}
          response:
            body:
              locks:
                - device_id: device_id
                  device_type: akuvox_lock
                  nickname: nickname
                  display_name: display_name
                  capabilities_supported:
                    - access_code
                  properties:
                    online: true
                    name: name
                    appearance:
                      name: name
                    model:
                      display_name: display_name
                      manufacturer_display_name: manufacturer_display_name
                  connected_account_id: connected_account_id
                  workspace_id: workspace_id
                  errors:
                    - error_code: error_code
                      message: message
                  warnings:
                    - warning_code: warning_code
                      message: message
                  created_at: '2024-01-15T09:30:00Z'
                  is_managed: true
                  custom_metadata:
                    key: value
                  can_remotely_unlock: true
                  can_remotely_lock: true
                  can_program_offline_access_codes: true
                  can_program_online_access_codes: true
                  can_simulate_removal: true
                  can_simulate_connection: true
                  can_simulate_disconnection: true
              devices:
                - device_id: device_id
                  device_type: akuvox_lock
                  nickname: nickname
                  display_name: display_name
                  capabilities_supported:
                    - access_code
                  properties:
                    online: true
                    name: name
                    appearance:
                      name: name
                    model:
                      display_name: display_name
                      manufacturer_display_name: manufacturer_display_name
                  connected_account_id: connected_account_id
                  workspace_id: workspace_id
                  errors:
                    - error_code: error_code
                      message: message
                  warnings:
                    - warning_code: warning_code
                      message: message
                  created_at: '2024-01-15T09:30:00Z'
                  is_managed: true
                  custom_metadata:
                    key: value
                  can_remotely_unlock: true
                  can_remotely_lock: true
                  can_program_offline_access_codes: true
                  can_program_online_access_codes: true
                  can_simulate_removal: true
                  can_simulate_connection: true
                  can_simulate_disconnection: true
              ok: true
    lock_door:
      path: /locks/lock_door
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /locks/lock_door
      request:
        name: LocksLockDoorRequest
        body:
          properties:
            device_id:
              type: string
              validation:
                format: uuid
            sync:
              type: optional<boolean>
              default: false
        content-type: application/json
      response:
        docs: OK
        type: LocksLockDoorResponse
        property: action_attempt
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            device_id: device_id
          response:
            body:
              action_attempt:
                action_attempt_id: action_attempt_id
                status: pending
                result: result
                error: error
                action_type: LOCK_DOOR
              ok: true
    unlock_door:
      path: /locks/unlock_door
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /locks/unlock_door
      request:
        name: LocksUnlockDoorRequest
        body:
          properties:
            device_id:
              type: string
              validation:
                format: uuid
            sync:
              type: optional<boolean>
              default: false
        content-type: application/json
      response:
        docs: OK
        type: LocksUnlockDoorResponse
        property: action_attempt
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            device_id: device_id
          response:
            body:
              action_attempt:
                action_attempt_id: action_attempt_id
                status: pending
                result: result
                error: error
                action_type: LOCK_DOOR
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "networks.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "get": {
              "auth": true,
              "display-name": "/networks/get",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "network_id": "network_id",
                  },
                  "response": {
                    "body": {
                      "network": {
                        "created_at": "2024-01-15T09:30:00Z",
                        "display_name": "display_name",
                        "network_id": "network_id",
                        "workspace_id": "workspace_id",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/networks/get",
              "request": {
                "body": {
                  "properties": {
                    "network_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "NetworksGetRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "network",
                "type": "NetworksGetResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list": {
              "auth": true,
              "display-name": "/networks/list",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {},
                  "response": {
                    "body": {
                      "networks": [
                        {
                          "created_at": "2024-01-15T09:30:00Z",
                          "display_name": "display_name",
                          "network_id": "network_id",
                          "workspace_id": "workspace_id",
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/networks/list",
              "request": {
                "body": {
                  "properties": {},
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "NetworksListRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "networks",
                "type": "NetworksListResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "NetworksGetResponse": {
            "docs": undefined,
            "properties": {
              "network": "root.Network",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "NetworksListResponse": {
            "docs": undefined,
            "properties": {
              "networks": "list<root.Network>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
types:
  NetworksGetResponse:
    properties:
      network: root.Network
      ok: boolean
    source:
      openapi: ../openapi.json
  NetworksListResponse:
    properties:
      networks: list<root.Network>
      ok: boolean
    source:
      openapi: ../openapi.json
service:
  auth: false
  base-path: ''
  endpoints:
    get:
      path: /networks/get
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /networks/get
      request:
        name: NetworksGetRequest
        body:
          properties:
            network_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: NetworksGetResponse
        property: network
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            network_id: network_id
          response:
            body:
              network:
                network_id: network_id
                workspace_id: workspace_id
                display_name: display_name
                created_at: '2024-01-15T09:30:00Z'
              ok: true
    list:
      path: /networks/list
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /networks/list
      request:
        name: NetworksListRequest
        body:
          properties: {}
        content-type: application/json
      response:
        docs: OK
        type: NetworksListResponse
        property: networks
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request: {}
          response:
            body:
              networks:
                - network_id: network_id
                  workspace_id: workspace_id
                  display_name: display_name
                  created_at: '2024-01-15T09:30:00Z'
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "noiseSensors/noiseThresholds.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "../__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "create": {
              "auth": true,
              "display-name": "/noise_sensors/noise_thresholds/create",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "device_id": "device_id",
                    "ends_daily_at": "ends_daily_at",
                    "starts_daily_at": "starts_daily_at",
                  },
                  "response": {
                    "body": {
                      "action_attempt": {
                        "action_attempt_id": "action_attempt_id",
                        "action_type": "LOCK_DOOR",
                        "error": "error",
                        "result": "result",
                        "status": "pending",
                      },
                      "noise_threshold": {
                        "device_id": "device_id",
                        "ends_daily_at": "ends_daily_at",
                        "name": "name",
                        "noise_threshold_decibels": 1.1,
                        "noise_threshold_id": "noise_threshold_id",
                        "noise_threshold_nrs": 1.1,
                        "starts_daily_at": "starts_daily_at",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/noise_sensors/noise_thresholds/create",
              "request": {
                "body": {
                  "properties": {
                    "device_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "ends_daily_at": "string",
                    "name": "optional<string>",
                    "noise_threshold_decibels": "optional<double>",
                    "noise_threshold_nrs": "optional<double>",
                    "starts_daily_at": "string",
                    "sync": {
                      "default": false,
                      "type": "optional<boolean>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "NoiseThresholdsCreateRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "noise_threshold",
                "type": "NoiseThresholdsCreateResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "delete": {
              "auth": true,
              "display-name": "/noise_sensors/noise_thresholds/delete",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "device_id": "device_id",
                    "noise_threshold_id": "noise_threshold_id",
                  },
                  "response": {
                    "body": {
                      "action_attempt": {
                        "action_attempt_id": "action_attempt_id",
                        "action_type": "LOCK_DOOR",
                        "error": "error",
                        "result": "result",
                        "status": "pending",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/noise_sensors/noise_thresholds/delete",
              "request": {
                "body": {
                  "properties": {
                    "device_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "noise_threshold_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "sync": {
                      "default": false,
                      "type": "optional<boolean>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "NoiseThresholdsDeleteRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "type": "NoiseThresholdsDeleteResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get": {
              "auth": true,
              "display-name": "/noise_sensors/noise_thresholds/get",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "noise_threshold_id": "noise_threshold_id",
                  },
                  "response": {
                    "body": {
                      "noise_threshold": {
                        "device_id": "device_id",
                        "ends_daily_at": "ends_daily_at",
                        "name": "name",
                        "noise_threshold_decibels": 1.1,
                        "noise_threshold_id": "noise_threshold_id",
                        "noise_threshold_nrs": 1.1,
                        "starts_daily_at": "starts_daily_at",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/noise_sensors/noise_thresholds/get",
              "request": {
                "body": {
                  "properties": {
                    "noise_threshold_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "NoiseThresholdsGetRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "noise_threshold",
                "type": "NoiseThresholdsGetResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list": {
              "auth": true,
              "display-name": "/noise_sensors/noise_thresholds/list",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "device_id": "device_id",
                  },
                  "response": {
                    "body": {
                      "noise_thresholds": [
                        {
                          "device_id": "device_id",
                          "ends_daily_at": "ends_daily_at",
                          "name": "name",
                          "noise_threshold_decibels": 1.1,
                          "noise_threshold_id": "noise_threshold_id",
                          "noise_threshold_nrs": 1.1,
                          "starts_daily_at": "starts_daily_at",
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/noise_sensors/noise_thresholds/list",
              "request": {
                "body": {
                  "properties": {
                    "device_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "is_programmed": "optional<boolean>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "NoiseThresholdsListRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "noise_thresholds",
                "type": "NoiseThresholdsListResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "update": {
              "auth": true,
              "display-name": "/noise_sensors/noise_thresholds/update",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "device_id": "device_id",
                    "noise_threshold_id": "noise_threshold_id",
                  },
                  "response": {
                    "body": {
                      "action_attempt": {
                        "action_attempt_id": "action_attempt_id",
                        "action_type": "LOCK_DOOR",
                        "error": "error",
                        "result": "result",
                        "status": "pending",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/noise_sensors/noise_thresholds/update",
              "request": {
                "body": {
                  "properties": {
                    "device_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "ends_daily_at": "optional<string>",
                    "name": "optional<string>",
                    "noise_threshold_decibels": "optional<double>",
                    "noise_threshold_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "noise_threshold_nrs": "optional<double>",
                    "starts_daily_at": "optional<string>",
                    "sync": {
                      "default": false,
                      "type": "optional<boolean>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "NoiseThresholdsUpdateRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "type": "NoiseThresholdsUpdateResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "NoiseThresholdsCreateResponse": {
            "docs": undefined,
            "properties": {
              "action_attempt": "root.ActionAttempt",
              "noise_threshold": "root.NoiseThreshold",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "NoiseThresholdsDeleteResponse": {
            "docs": undefined,
            "properties": {
              "action_attempt": "root.ActionAttempt",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "NoiseThresholdsGetResponse": {
            "docs": undefined,
            "properties": {
              "noise_threshold": "root.NoiseThreshold",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "NoiseThresholdsListResponse": {
            "docs": undefined,
            "properties": {
              "noise_thresholds": "list<root.NoiseThreshold>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "NoiseThresholdsUpdateResponse": {
            "docs": undefined,
            "properties": {
              "action_attempt": "root.ActionAttempt",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "imports:
  root: ../__package__.yml
types:
  NoiseThresholdsCreateResponse:
    properties:
      action_attempt: root.ActionAttempt
      noise_threshold: root.NoiseThreshold
      ok: boolean
    source:
      openapi: ../openapi.json
  NoiseThresholdsDeleteResponse:
    properties:
      action_attempt: root.ActionAttempt
      ok: boolean
    source:
      openapi: ../openapi.json
  NoiseThresholdsGetResponse:
    properties:
      noise_threshold: root.NoiseThreshold
      ok: boolean
    source:
      openapi: ../openapi.json
  NoiseThresholdsListResponse:
    properties:
      noise_thresholds: list<root.NoiseThreshold>
      ok: boolean
    source:
      openapi: ../openapi.json
  NoiseThresholdsUpdateResponse:
    properties:
      action_attempt: root.ActionAttempt
      ok: boolean
    source:
      openapi: ../openapi.json
service:
  auth: false
  base-path: ''
  endpoints:
    create:
      path: /noise_sensors/noise_thresholds/create
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /noise_sensors/noise_thresholds/create
      request:
        name: NoiseThresholdsCreateRequest
        body:
          properties:
            device_id:
              type: string
              validation:
                format: uuid
            sync:
              type: optional<boolean>
              default: false
            name: optional<string>
            starts_daily_at: string
            ends_daily_at: string
            noise_threshold_decibels: optional<double>
            noise_threshold_nrs: optional<double>
        content-type: application/json
      response:
        docs: OK
        type: NoiseThresholdsCreateResponse
        property: noise_threshold
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            device_id: device_id
            starts_daily_at: starts_daily_at
            ends_daily_at: ends_daily_at
          response:
            body:
              action_attempt:
                action_attempt_id: action_attempt_id
                status: pending
                result: result
                error: error
                action_type: LOCK_DOOR
              noise_threshold:
                noise_threshold_id: noise_threshold_id
                device_id: device_id
                name: name
                noise_threshold_nrs: 1.1
                starts_daily_at: starts_daily_at
                ends_daily_at: ends_daily_at
                noise_threshold_decibels: 1.1
              ok: true
    delete:
      path: /noise_sensors/noise_thresholds/delete
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /noise_sensors/noise_thresholds/delete
      request:
        name: NoiseThresholdsDeleteRequest
        body:
          properties:
            noise_threshold_id:
              type: string
              validation:
                format: uuid
            device_id:
              type: string
              validation:
                format: uuid
            sync:
              type: optional<boolean>
              default: false
        content-type: application/json
      response:
        docs: OK
        type: NoiseThresholdsDeleteResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            noise_threshold_id: noise_threshold_id
            device_id: device_id
          response:
            body:
              action_attempt:
                action_attempt_id: action_attempt_id
                status: pending
                result: result
                error: error
                action_type: LOCK_DOOR
              ok: true
    get:
      path: /noise_sensors/noise_thresholds/get
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /noise_sensors/noise_thresholds/get
      request:
        name: NoiseThresholdsGetRequest
        body:
          properties:
            noise_threshold_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: NoiseThresholdsGetResponse
        property: noise_threshold
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            noise_threshold_id: noise_threshold_id
          response:
            body:
              noise_threshold:
                noise_threshold_id: noise_threshold_id
                device_id: device_id
                name: name
                noise_threshold_nrs: 1.1
                starts_daily_at: starts_daily_at
                ends_daily_at: ends_daily_at
                noise_threshold_decibels: 1.1
              ok: true
    list:
      path: /noise_sensors/noise_thresholds/list
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /noise_sensors/noise_thresholds/list
      request:
        name: NoiseThresholdsListRequest
        body:
          properties:
            device_id:
              type: string
              validation:
                format: uuid
            is_programmed: optional<boolean>
        content-type: application/json
      response:
        docs: OK
        type: NoiseThresholdsListResponse
        property: noise_thresholds
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            device_id: device_id
          response:
            body:
              noise_thresholds:
                - noise_threshold_id: noise_threshold_id
                  device_id: device_id
                  name: name
                  noise_threshold_nrs: 1.1
                  starts_daily_at: starts_daily_at
                  ends_daily_at: ends_daily_at
                  noise_threshold_decibels: 1.1
              ok: true
    update:
      path: /noise_sensors/noise_thresholds/update
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /noise_sensors/noise_thresholds/update
      request:
        name: NoiseThresholdsUpdateRequest
        body:
          properties:
            noise_threshold_id:
              type: string
              validation:
                format: uuid
            device_id:
              type: string
              validation:
                format: uuid
            sync:
              type: optional<boolean>
              default: false
            name: optional<string>
            starts_daily_at: optional<string>
            ends_daily_at: optional<string>
            noise_threshold_decibels: optional<double>
            noise_threshold_nrs: optional<double>
        content-type: application/json
      response:
        docs: OK
        type: NoiseThresholdsUpdateResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            noise_threshold_id: noise_threshold_id
            device_id: device_id
          response:
            body:
              action_attempt:
                action_attempt_id: action_attempt_id
                status: pending
                result: result
                error: error
                action_type: LOCK_DOOR
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "noiseSensors/simulate.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "../__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "trigger_noise_threshold": {
              "auth": true,
              "display-name": "/noise_sensors/simulate/trigger_noise_threshold",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "device_id": "device_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/noise_sensors/simulate/trigger_noise_threshold",
              "request": {
                "body": {
                  "properties": {
                    "device_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "SimulateTriggerNoiseThresholdRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "type": "SimulateTriggerNoiseThresholdResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "SimulateTriggerNoiseThresholdResponse": {
            "docs": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "types:
  SimulateTriggerNoiseThresholdResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
imports:
  root: ../__package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    trigger_noise_threshold:
      path: /noise_sensors/simulate/trigger_noise_threshold
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /noise_sensors/simulate/trigger_noise_threshold
      request:
        name: SimulateTriggerNoiseThresholdRequest
        body:
          properties:
            device_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: SimulateTriggerNoiseThresholdResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            device_id: device_id
          response:
            body:
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "phones.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "deactivate": {
              "auth": true,
              "display-name": "/phones/deactivate",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "device_id": "device_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/phones/deactivate",
              "request": {
                "body": {
                  "properties": {
                    "device_id": "string",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "PhonesDeactivateRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "type": "PhonesDeactivateResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list": {
              "auth": true,
              "display-name": "/phones/list",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {},
                  "response": {
                    "body": {
                      "ok": true,
                      "phones": [
                        {
                          "can_program_offline_access_codes": true,
                          "can_program_online_access_codes": true,
                          "can_remotely_lock": true,
                          "can_remotely_unlock": true,
                          "can_simulate_connection": true,
                          "can_simulate_disconnection": true,
                          "can_simulate_removal": true,
                          "capabilities_supported": [
                            "access_code",
                          ],
                          "created_at": "2024-01-15T09:30:00Z",
                          "custom_metadata": {
                            "key": "value",
                          },
                          "device_id": "device_id",
                          "device_type": "android_phone",
                          "display_name": "display_name",
                          "errors": [
                            {
                              "error_code": "error_code",
                              "message": "message",
                            },
                          ],
                          "is_managed": true,
                          "nickname": "nickname",
                          "properties": {},
                          "warnings": [
                            {
                              "message": "message",
                              "warning_code": "warning_code",
                            },
                          ],
                          "workspace_id": "workspace_id",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/phones/list",
              "request": {
                "body": {
                  "properties": {
                    "owner_user_identity_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "PhonesListRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "phones",
                "type": "PhonesListResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "PhonesDeactivateResponse": {
            "docs": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "PhonesListResponse": {
            "docs": undefined,
            "properties": {
              "ok": "boolean",
              "phones": "list<root.Phone>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "types:
  PhonesDeactivateResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
  PhonesListResponse:
    properties:
      phones: list<root.Phone>
      ok: boolean
    source:
      openapi: ../openapi.json
imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    deactivate:
      path: /phones/deactivate
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /phones/deactivate
      request:
        name: PhonesDeactivateRequest
        body:
          properties:
            device_id: string
        content-type: application/json
      response:
        docs: OK
        type: PhonesDeactivateResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            device_id: device_id
          response:
            body:
              ok: true
    list:
      path: /phones/list
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /phones/list
      request:
        name: PhonesListRequest
        body:
          properties:
            owner_user_identity_id:
              type: optional<string>
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: PhonesListResponse
        property: phones
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request: {}
          response:
            body:
              phones:
                - device_id: device_id
                  device_type: android_phone
                  nickname: nickname
                  display_name: display_name
                  capabilities_supported:
                    - access_code
                  properties: {}
                  workspace_id: workspace_id
                  errors:
                    - error_code: error_code
                      message: message
                  warnings:
                    - warning_code: warning_code
                      message: message
                  created_at: '2024-01-15T09:30:00Z'
                  is_managed: true
                  custom_metadata:
                    key: value
                  can_remotely_unlock: true
                  can_remotely_lock: true
                  can_program_offline_access_codes: true
                  can_program_online_access_codes: true
                  can_simulate_removal: true
                  can_simulate_connection: true
                  can_simulate_disconnection: true
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "phones/simulate.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "../__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "create_sandbox_phone": {
              "auth": true,
              "display-name": "/phones/simulate/create_sandbox_phone",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "user_identity_id": "user_identity_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                      "phone": {
                        "can_program_offline_access_codes": true,
                        "can_program_online_access_codes": true,
                        "can_remotely_lock": true,
                        "can_remotely_unlock": true,
                        "can_simulate_connection": true,
                        "can_simulate_disconnection": true,
                        "can_simulate_removal": true,
                        "capabilities_supported": [
                          "access_code",
                        ],
                        "created_at": "2024-01-15T09:30:00Z",
                        "custom_metadata": {
                          "key": "value",
                        },
                        "device_id": "device_id",
                        "device_type": "android_phone",
                        "display_name": "display_name",
                        "errors": [
                          {
                            "error_code": "error_code",
                            "message": "message",
                          },
                        ],
                        "is_managed": true,
                        "location": {
                          "location_name": "location_name",
                          "timezone": "timezone",
                        },
                        "nickname": "nickname",
                        "properties": {
                          "assa_abloy_credential_service_metadata": {
                            "endpoints": [
                              {
                                "endpoint_id": "endpoint_id",
                                "is_active": true,
                              },
                            ],
                            "has_active_endpoint": true,
                          },
                        },
                        "warnings": [
                          {
                            "message": "message",
                            "warning_code": "warning_code",
                          },
                        ],
                        "workspace_id": "workspace_id",
                      },
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/phones/simulate/create_sandbox_phone",
              "request": {
                "body": {
                  "properties": {
                    "assa_abloy_metadata": "optional<SimulateCreateSandboxPhoneRequestAssaAbloyMetadata>",
                    "custom_sdk_installation_id": "optional<string>",
                    "phone_metadata": "optional<SimulateCreateSandboxPhoneRequestPhoneMetadata>",
                    "user_identity_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "SimulateCreateSandboxPhoneRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "phone",
                "type": "SimulateCreateSandboxPhoneResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "SimulateCreateSandboxPhoneRequestAssaAbloyMetadata": {
            "docs": undefined,
            "properties": {
              "application_version": {
                "default": "1.0.0",
                "type": "optional<string>",
              },
              "ble_capability": {
                "default": true,
                "type": "optional<boolean>",
              },
              "hce_capability": {
                "default": false,
                "type": "optional<boolean>",
              },
              "nfc_capability": {
                "default": false,
                "type": "optional<boolean>",
              },
              "seos_applet_version": {
                "default": "1.0.0",
                "type": "optional<string>",
              },
              "seos_tsm_endpoint_id": {
                "default": 1,
                "type": "optional<double>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "SimulateCreateSandboxPhoneRequestPhoneMetadata": {
            "docs": undefined,
            "properties": {
              "device_manufacturer": {
                "default": "Samsung",
                "type": "optional<string>",
              },
              "device_model": {
                "default": "Samsung Galaxy S10",
                "type": "optional<string>",
              },
              "operating_system": {
                "default": "android",
                "type": "optional<SimulateCreateSandboxPhoneRequestPhoneMetadataOperatingSystem>",
              },
              "os_version": {
                "default": "10",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "SimulateCreateSandboxPhoneRequestPhoneMetadataOperatingSystem": {
            "default": "android",
            "enum": [
              "android",
              "ios",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "SimulateCreateSandboxPhoneResponse": {
            "docs": undefined,
            "properties": {
              "ok": "boolean",
              "phone": "root.Phone",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "types:
  SimulateCreateSandboxPhoneRequestPhoneMetadataOperatingSystem:
    enum:
      - android
      - ios
    default: android
    source:
      openapi: ../openapi.json
  SimulateCreateSandboxPhoneRequestPhoneMetadata:
    properties:
      operating_system:
        type: >-
          optional<SimulateCreateSandboxPhoneRequestPhoneMetadataOperatingSystem>
        default: android
      os_version:
        type: optional<string>
        default: '10'
      device_manufacturer:
        type: optional<string>
        default: Samsung
      device_model:
        type: optional<string>
        default: Samsung Galaxy S10
    source:
      openapi: ../openapi.json
  SimulateCreateSandboxPhoneRequestAssaAbloyMetadata:
    properties:
      ble_capability:
        type: optional<boolean>
        default: true
      hce_capability:
        type: optional<boolean>
        default: false
      nfc_capability:
        type: optional<boolean>
        default: false
      application_version:
        type: optional<string>
        default: 1.0.0
      seos_applet_version:
        type: optional<string>
        default: 1.0.0
      seos_tsm_endpoint_id:
        type: optional<double>
        default: 1
    source:
      openapi: ../openapi.json
  SimulateCreateSandboxPhoneResponse:
    properties:
      phone: root.Phone
      ok: boolean
    source:
      openapi: ../openapi.json
imports:
  root: ../__package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    create_sandbox_phone:
      path: /phones/simulate/create_sandbox_phone
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /phones/simulate/create_sandbox_phone
      request:
        name: SimulateCreateSandboxPhoneRequest
        body:
          properties:
            custom_sdk_installation_id: optional<string>
            user_identity_id:
              type: string
              validation:
                format: uuid
            phone_metadata: optional<SimulateCreateSandboxPhoneRequestPhoneMetadata>
            assa_abloy_metadata: optional<SimulateCreateSandboxPhoneRequestAssaAbloyMetadata>
        content-type: application/json
      response:
        docs: OK
        type: SimulateCreateSandboxPhoneResponse
        property: phone
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            user_identity_id: user_identity_id
          response:
            body:
              phone:
                device_id: device_id
                device_type: android_phone
                nickname: nickname
                display_name: display_name
                capabilities_supported:
                  - access_code
                properties:
                  assa_abloy_credential_service_metadata:
                    has_active_endpoint: true
                    endpoints:
                      - endpoint_id: endpoint_id
                        is_active: true
                location:
                  location_name: location_name
                  timezone: timezone
                workspace_id: workspace_id
                errors:
                  - error_code: error_code
                    message: message
                warnings:
                  - warning_code: warning_code
                    message: message
                created_at: '2024-01-15T09:30:00Z'
                is_managed: true
                custom_metadata:
                  key: value
                can_remotely_unlock: true
                can_remotely_lock: true
                can_program_offline_access_codes: true
                can_program_online_access_codes: true
                can_simulate_removal: true
                can_simulate_connection: true
                can_simulate_disconnection: true
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "thermostats.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "cool": {
              "auth": true,
              "display-name": "/thermostats/cool",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "device_id": "device_id",
                  },
                  "response": {
                    "body": {
                      "action_attempt": {
                        "action_attempt_id": "action_attempt_id",
                        "action_type": "LOCK_DOOR",
                        "error": "error",
                        "result": "result",
                        "status": "pending",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/thermostats/cool",
              "request": {
                "body": {
                  "properties": {
                    "cooling_set_point_celsius": "optional<double>",
                    "cooling_set_point_fahrenheit": "optional<double>",
                    "device_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "sync": {
                      "default": false,
                      "type": "optional<boolean>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ThermostatsCoolRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "action_attempt",
                "type": "ThermostatsCoolResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get": {
              "auth": true,
              "display-name": "/thermostats/get",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {},
                  "response": {
                    "body": {
                      "ok": true,
                      "thermostat": {
                        "can_program_offline_access_codes": true,
                        "can_program_online_access_codes": true,
                        "can_remotely_lock": true,
                        "can_remotely_unlock": true,
                        "can_simulate_connection": true,
                        "can_simulate_disconnection": true,
                        "can_simulate_removal": true,
                        "capabilities_supported": [
                          "access_code",
                        ],
                        "connected_account_id": "connected_account_id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "custom_metadata": {
                          "key": "value",
                        },
                        "device_id": "device_id",
                        "device_type": "akuvox_lock",
                        "display_name": "display_name",
                        "errors": [
                          {
                            "error_code": "error_code",
                            "message": "message",
                          },
                        ],
                        "is_managed": true,
                        "location": {
                          "location_name": "location_name",
                          "timezone": "timezone",
                        },
                        "nickname": "nickname",
                        "properties": {
                          "_experimental_supported_code_from_access_codes_lengths": [
                            1.1,
                          ],
                          "accessory_keypad": {
                            "is_connected": true,
                          },
                          "appearance": {
                            "name": "name",
                          },
                          "assa_abloy_credential_service_metadata": {
                            "endpoints": [
                              {
                                "endpoint_id": "endpoint_id",
                                "is_active": true,
                              },
                            ],
                            "has_active_endpoint": true,
                          },
                          "august_metadata": {
                            "has_keypad": true,
                            "house_name": "house_name",
                            "lock_id": "lock_id",
                            "lock_name": "lock_name",
                          },
                          "avigilon_alta_metadata": {
                            "entry_name": "entry_name",
                            "entry_relays_total_count": 1.1,
                            "org_name": "org_name",
                            "site_id": 1.1,
                            "site_name": "site_name",
                            "zone_id": 1.1,
                            "zone_name": "zone_name",
                          },
                          "battery": {
                            "level": 1.1,
                            "status": "critical",
                          },
                          "battery_level": 1.1,
                          "brivo_metadata": {
                            "device_name": "device_name",
                          },
                          "code_constraints": [
                            {
                              "constraint_type": "no_zeros",
                            },
                          ],
                          "controlbyweb_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                          },
                          "currently_triggering_noise_threshold_ids": [
                            "currently_triggering_noise_threshold_ids",
                          ],
                          "door_open": true,
                          "dormakaba_oracode_metadata": {
                            "door_id": 1.1,
                            "door_is_wireless": true,
                            "door_name": "door_name",
                            "site_id": 1.1,
                            "site_name": "site_name",
                          },
                          "ecobee_metadata": {
                            "device_name": "device_name",
                            "ecobee_device_id": "ecobee_device_id",
                          },
                          "four_suites_metadata": {
                            "device_id": 1.1,
                            "device_name": "device_name",
                            "reclose_delay_in_seconds": 1.1,
                          },
                          "genie_metadata": {
                            "device_name": "device_name",
                            "door_name": "door_name",
                          },
                          "has_direct_power": true,
                          "has_native_entry_events": true,
                          "honeywell_resideo_metadata": {
                            "device_name": "device_name",
                            "honeywell_resideo_device_id": "honeywell_resideo_device_id",
                          },
                          "hubitat_metadata": {
                            "device_id": "device_id",
                            "device_label": "device_label",
                            "device_name": "device_name",
                          },
                          "igloo_metadata": {
                            "bridge_id": "bridge_id",
                            "device_id": "device_id",
                          },
                          "igloohome_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                          },
                          "image_alt_text": "image_alt_text",
                          "image_url": "image_url",
                          "keypad_battery": {
                            "level": 1.1,
                          },
                          "kwikset_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                            "model_number": "model_number",
                          },
                          "locked": true,
                          "lockly_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                          },
                          "manufacturer": "manufacturer",
                          "max_active_codes_supported": 1.1,
                          "minut_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                            "latest_sensor_values": {
                              "accelerometer_z": {
                                "time": "time",
                                "value": 1.1,
                              },
                              "humidity": {
                                "time": "time",
                                "value": 1.1,
                              },
                              "pressure": {
                                "time": "time",
                                "value": 1.1,
                              },
                              "sound": {
                                "time": "time",
                                "value": 1.1,
                              },
                              "temperature": {
                                "time": "time",
                                "value": 1.1,
                              },
                            },
                          },
                          "model": {
                            "display_name": "display_name",
                            "manufacturer_display_name": "manufacturer_display_name",
                          },
                          "name": "name",
                          "nest_metadata": {
                            "custom_name": "custom_name",
                            "device_name": "device_name",
                            "nest_device_id": "nest_device_id",
                          },
                          "noise_level_decibels": 1.1,
                          "noiseaware_metadata": {
                            "device_id": "device_id",
                            "device_model": "indoor",
                            "device_name": "device_name",
                            "noise_level_decibel": 1.1,
                            "noise_level_nrs": 1.1,
                          },
                          "nuki_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                          },
                          "offline_access_codes_enabled": true,
                          "online": true,
                          "online_access_codes_enabled": true,
                          "salto_metadata": {
                            "battery_level": "battery_level",
                            "customer_reference": "customer_reference",
                            "lock_id": "lock_id",
                            "lock_type": "lock_type",
                            "locked_state": "locked_state",
                          },
                          "schlage_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                          },
                          "seam_bridge_metadata": {
                            "device_num": 1.1,
                            "name": "name",
                          },
                          "serial_number": "serial_number",
                          "smartthings_metadata": {
                            "device_id": "device_id",
                            "device_name": "device_name",
                          },
                          "supported_code_lengths": [
                            1.1,
                          ],
                          "supports_accessory_keypad": true,
                          "supports_backup_access_code_pool": true,
                          "supports_offline_access_codes": true,
                          "tedee_metadata": {
                            "bridge_id": 1.1,
                            "bridge_name": "bridge_name",
                            "device_id": 1.1,
                            "device_model": "device_model",
                            "device_name": "device_name",
                            "serial_number": "serial_number",
                          },
                          "ttlock_metadata": {
                            "feature_value": "feature_value",
                            "lock_alias": "lock_alias",
                            "lock_id": 1.1,
                          },
                          "two_n_metadata": {
                            "device_id": 1.1,
                            "device_name": "device_name",
                          },
                          "wyze_metadata": {
                            "device_id": "device_id",
                            "device_info_model": "device_info_model",
                            "device_name": "device_name",
                            "product_model": "product_model",
                            "product_name": "product_name",
                            "product_type": "product_type",
                          },
                        },
                        "warnings": [
                          {
                            "message": "message",
                            "warning_code": "warning_code",
                          },
                        ],
                        "workspace_id": "workspace_id",
                      },
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/thermostats/get",
              "request": {
                "body": {
                  "properties": {
                    "device_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "name": "optional<string>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ThermostatsGetRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "thermostat",
                "type": "ThermostatsGetResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "heat": {
              "auth": true,
              "display-name": "/thermostats/heat",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "device_id": "device_id",
                  },
                  "response": {
                    "body": {
                      "action_attempt": {
                        "action_attempt_id": "action_attempt_id",
                        "action_type": "LOCK_DOOR",
                        "error": "error",
                        "result": "result",
                        "status": "pending",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/thermostats/heat",
              "request": {
                "body": {
                  "properties": {
                    "device_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "heating_set_point_celsius": "optional<double>",
                    "heating_set_point_fahrenheit": "optional<double>",
                    "sync": {
                      "default": false,
                      "type": "optional<boolean>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ThermostatsHeatRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "action_attempt",
                "type": "ThermostatsHeatResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "heat_cool": {
              "auth": true,
              "display-name": "/thermostats/heat_cool",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "device_id": "device_id",
                  },
                  "response": {
                    "body": {
                      "action_attempt": {
                        "action_attempt_id": "action_attempt_id",
                        "action_type": "LOCK_DOOR",
                        "error": "error",
                        "result": "result",
                        "status": "pending",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/thermostats/heat_cool",
              "request": {
                "body": {
                  "properties": {
                    "cooling_set_point_celsius": "optional<double>",
                    "cooling_set_point_fahrenheit": "optional<double>",
                    "device_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "heating_set_point_celsius": "optional<double>",
                    "heating_set_point_fahrenheit": "optional<double>",
                    "sync": {
                      "default": false,
                      "type": "optional<boolean>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ThermostatsHeatCoolRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "action_attempt",
                "type": "ThermostatsHeatCoolResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list": {
              "auth": true,
              "display-name": "/thermostats/list",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {},
                  "response": {
                    "body": {
                      "ok": true,
                      "thermostats": [
                        {
                          "can_program_offline_access_codes": true,
                          "can_program_online_access_codes": true,
                          "can_remotely_lock": true,
                          "can_remotely_unlock": true,
                          "can_simulate_connection": true,
                          "can_simulate_disconnection": true,
                          "can_simulate_removal": true,
                          "capabilities_supported": [
                            "access_code",
                          ],
                          "connected_account_id": "connected_account_id",
                          "created_at": "2024-01-15T09:30:00Z",
                          "custom_metadata": {
                            "key": "value",
                          },
                          "device_id": "device_id",
                          "device_type": "akuvox_lock",
                          "display_name": "display_name",
                          "errors": [
                            {
                              "error_code": "error_code",
                              "message": "message",
                            },
                          ],
                          "is_managed": true,
                          "nickname": "nickname",
                          "properties": {
                            "appearance": {
                              "name": "name",
                            },
                            "model": {
                              "display_name": "display_name",
                              "manufacturer_display_name": "manufacturer_display_name",
                            },
                            "name": "name",
                            "online": true,
                          },
                          "warnings": [
                            {
                              "message": "message",
                              "warning_code": "warning_code",
                            },
                          ],
                          "workspace_id": "workspace_id",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/thermostats/list",
              "request": {
                "body": {
                  "properties": {
                    "connect_webview_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "connected_account_id": {
                      "docs": "List all devices owned by this connected account",
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "connected_account_ids": "optional<list<string>>",
                    "created_before": "optional<datetime>",
                    "custom_metadata_has": "optional<map<string, ThermostatsListRequestCustomMetadataHasValue>>",
                    "device_ids": "optional<list<string>>",
                    "device_type": "optional<ThermostatsListRequestDeviceType>",
                    "device_types": "optional<list<ThermostatsListRequestDeviceTypesItem>>",
                    "exclude_if": "optional<list<ThermostatsListRequestExcludeIfItem>>",
                    "include_if": "optional<list<ThermostatsListRequestIncludeIfItem>>",
                    "limit": {
                      "default": 500,
                      "type": "optional<double>",
                    },
                    "manufacturer": "optional<ThermostatsListRequestManufacturer>",
                    "user_identifier_key": "optional<string>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ThermostatsListRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "thermostats",
                "type": "ThermostatsListResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "off": {
              "auth": true,
              "display-name": "/thermostats/off",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "device_id": "device_id",
                  },
                  "response": {
                    "body": {
                      "action_attempt": {
                        "action_attempt_id": "action_attempt_id",
                        "action_type": "LOCK_DOOR",
                        "error": "error",
                        "result": "result",
                        "status": "pending",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/thermostats/off",
              "request": {
                "body": {
                  "properties": {
                    "device_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "sync": {
                      "default": false,
                      "type": "optional<boolean>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ThermostatsOffRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "action_attempt",
                "type": "ThermostatsOffResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "set_fan_mode": {
              "auth": true,
              "display-name": "/thermostats/set_fan_mode",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "device_id": "device_id",
                  },
                  "response": {
                    "body": {
                      "action_attempt": {
                        "action_attempt_id": "action_attempt_id",
                        "action_type": "LOCK_DOOR",
                        "error": "error",
                        "result": "result",
                        "status": "pending",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/thermostats/set_fan_mode",
              "request": {
                "body": {
                  "properties": {
                    "device_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "fan_mode": "optional<ThermostatsSetFanModeRequestFanMode>",
                    "fan_mode_setting": "optional<ThermostatsSetFanModeRequestFanModeSetting>",
                    "sync": {
                      "default": false,
                      "type": "optional<boolean>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ThermostatsSetFanModeRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "action_attempt",
                "type": "ThermostatsSetFanModeResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "update": {
              "auth": true,
              "display-name": "/thermostats/update",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "default_climate_setting": {},
                    "device_id": "device_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/thermostats/update",
              "request": {
                "body": {
                  "properties": {
                    "default_climate_setting": "ThermostatsUpdateRequestDefaultClimateSetting",
                    "device_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ThermostatsUpdateRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "type": "ThermostatsUpdateResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "ThermostatsCoolResponse": {
            "docs": undefined,
            "properties": {
              "action_attempt": "root.ActionAttempt",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ThermostatsGetResponse": {
            "docs": undefined,
            "properties": {
              "ok": "boolean",
              "thermostat": "root.Device",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ThermostatsHeatCoolResponse": {
            "docs": undefined,
            "properties": {
              "action_attempt": "root.ActionAttempt",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ThermostatsHeatResponse": {
            "docs": undefined,
            "properties": {
              "action_attempt": "root.ActionAttempt",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ThermostatsListRequestCustomMetadataHasValue": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
            "union": [
              "string",
              "boolean",
            ],
          },
          "ThermostatsListRequestDeviceType": {
            "enum": [
              "akuvox_lock",
              "august_lock",
              "brivo_access_point",
              "butterflymx_panel",
              "avigilon_alta_entry",
              "doorking_lock",
              "genie_door",
              "igloo_lock",
              "linear_lock",
              "lockly_lock",
              "kwikset_lock",
              "nuki_lock",
              "salto_lock",
              "schlage_lock",
              "seam_relay",
              "smartthings_lock",
              "wyze_lock",
              "yale_lock",
              "two_n_intercom",
              "controlbyweb_device",
              "ttlock_lock",
              "igloohome_lock",
              "hubitat_lock",
              "four_suites_door",
              "dormakaba_oracode_door",
              "tedee_lock",
              "noiseaware_activity_zone",
              "minut_sensor",
              "ecobee_thermostat",
              "nest_thermostat",
              "honeywell_resideo_thermostat",
              "ios_phone",
              "android_phone",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ThermostatsListRequestDeviceTypesItem": {
            "enum": [
              "akuvox_lock",
              "august_lock",
              "brivo_access_point",
              "butterflymx_panel",
              "avigilon_alta_entry",
              "doorking_lock",
              "genie_door",
              "igloo_lock",
              "linear_lock",
              "lockly_lock",
              "kwikset_lock",
              "nuki_lock",
              "salto_lock",
              "schlage_lock",
              "seam_relay",
              "smartthings_lock",
              "wyze_lock",
              "yale_lock",
              "two_n_intercom",
              "controlbyweb_device",
              "ttlock_lock",
              "igloohome_lock",
              "hubitat_lock",
              "four_suites_door",
              "dormakaba_oracode_door",
              "tedee_lock",
              "noiseaware_activity_zone",
              "minut_sensor",
              "ecobee_thermostat",
              "nest_thermostat",
              "honeywell_resideo_thermostat",
              "ios_phone",
              "android_phone",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ThermostatsListRequestExcludeIfItem": {
            "enum": [
              "can_remotely_unlock",
              "can_remotely_lock",
              "can_program_offline_access_codes",
              "can_program_online_access_codes",
              "can_simulate_removal",
              "can_simulate_connection",
              "can_simulate_disconnection",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ThermostatsListRequestIncludeIfItem": {
            "enum": [
              "can_remotely_unlock",
              "can_remotely_lock",
              "can_program_offline_access_codes",
              "can_program_online_access_codes",
              "can_simulate_removal",
              "can_simulate_connection",
              "can_simulate_disconnection",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ThermostatsListRequestManufacturer": {
            "enum": [
              "akuvox",
              "august",
              "avigilon_alta",
              "brivo",
              "butterflymx",
              "doorking",
              "four_suites",
              "genie",
              "igloo",
              "keywe",
              "kwikset",
              "linear",
              "lockly",
              "nuki",
              "philia",
              "salto",
              "samsung",
              "schlage",
              "seam",
              "unknown",
              "wyze",
              "yale",
              "minut",
              "two_n",
              "ttlock",
              "nest",
              "igloohome",
              "ecobee",
              "hubitat",
              "controlbyweb",
              "smartthings",
              "dormakaba_oracode",
              "tedee",
              "honeywell_resideo",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ThermostatsListResponse": {
            "docs": undefined,
            "properties": {
              "ok": "boolean",
              "thermostats": "list<root.Device>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ThermostatsOffResponse": {
            "docs": undefined,
            "properties": {
              "action_attempt": "root.ActionAttempt",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ThermostatsSetFanModeRequestFanMode": {
            "enum": [
              "auto",
              "on",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ThermostatsSetFanModeRequestFanModeSetting": {
            "enum": [
              "auto",
              "on",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ThermostatsSetFanModeResponse": {
            "docs": undefined,
            "properties": {
              "action_attempt": "root.ActionAttempt",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ThermostatsUpdateRequestDefaultClimateSetting": {
            "docs": undefined,
            "properties": {
              "automatic_cooling_enabled": "optional<boolean>",
              "automatic_heating_enabled": "optional<boolean>",
              "cooling_set_point_celsius": "optional<double>",
              "cooling_set_point_fahrenheit": "optional<double>",
              "heating_set_point_celsius": "optional<double>",
              "heating_set_point_fahrenheit": "optional<double>",
              "hvac_mode_setting": "optional<ThermostatsUpdateRequestDefaultClimateSettingHvacModeSetting>",
              "manual_override_allowed": "optional<boolean>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ThermostatsUpdateRequestDefaultClimateSettingHvacModeSetting": {
            "enum": [
              "off",
              "heat",
              "cool",
              "heat_cool",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ThermostatsUpdateResponse": {
            "docs": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
types:
  ThermostatsCoolResponse:
    properties:
      action_attempt: root.ActionAttempt
      ok: boolean
    source:
      openapi: ../openapi.json
  ThermostatsGetResponse:
    properties:
      thermostat: root.Device
      ok: boolean
    source:
      openapi: ../openapi.json
  ThermostatsHeatResponse:
    properties:
      action_attempt: root.ActionAttempt
      ok: boolean
    source:
      openapi: ../openapi.json
  ThermostatsHeatCoolResponse:
    properties:
      action_attempt: root.ActionAttempt
      ok: boolean
    source:
      openapi: ../openapi.json
  ThermostatsListRequestDeviceType:
    enum:
      - akuvox_lock
      - august_lock
      - brivo_access_point
      - butterflymx_panel
      - avigilon_alta_entry
      - doorking_lock
      - genie_door
      - igloo_lock
      - linear_lock
      - lockly_lock
      - kwikset_lock
      - nuki_lock
      - salto_lock
      - schlage_lock
      - seam_relay
      - smartthings_lock
      - wyze_lock
      - yale_lock
      - two_n_intercom
      - controlbyweb_device
      - ttlock_lock
      - igloohome_lock
      - hubitat_lock
      - four_suites_door
      - dormakaba_oracode_door
      - tedee_lock
      - noiseaware_activity_zone
      - minut_sensor
      - ecobee_thermostat
      - nest_thermostat
      - honeywell_resideo_thermostat
      - ios_phone
      - android_phone
    source:
      openapi: ../openapi.json
  ThermostatsListRequestDeviceTypesItem:
    enum:
      - akuvox_lock
      - august_lock
      - brivo_access_point
      - butterflymx_panel
      - avigilon_alta_entry
      - doorking_lock
      - genie_door
      - igloo_lock
      - linear_lock
      - lockly_lock
      - kwikset_lock
      - nuki_lock
      - salto_lock
      - schlage_lock
      - seam_relay
      - smartthings_lock
      - wyze_lock
      - yale_lock
      - two_n_intercom
      - controlbyweb_device
      - ttlock_lock
      - igloohome_lock
      - hubitat_lock
      - four_suites_door
      - dormakaba_oracode_door
      - tedee_lock
      - noiseaware_activity_zone
      - minut_sensor
      - ecobee_thermostat
      - nest_thermostat
      - honeywell_resideo_thermostat
      - ios_phone
      - android_phone
    source:
      openapi: ../openapi.json
  ThermostatsListRequestManufacturer:
    enum:
      - akuvox
      - august
      - avigilon_alta
      - brivo
      - butterflymx
      - doorking
      - four_suites
      - genie
      - igloo
      - keywe
      - kwikset
      - linear
      - lockly
      - nuki
      - philia
      - salto
      - samsung
      - schlage
      - seam
      - unknown
      - wyze
      - yale
      - minut
      - two_n
      - ttlock
      - nest
      - igloohome
      - ecobee
      - hubitat
      - controlbyweb
      - smartthings
      - dormakaba_oracode
      - tedee
      - honeywell_resideo
    source:
      openapi: ../openapi.json
  ThermostatsListRequestCustomMetadataHasValue:
    discriminated: false
    union:
      - string
      - boolean
    source:
      openapi: ../openapi.json
  ThermostatsListRequestIncludeIfItem:
    enum:
      - can_remotely_unlock
      - can_remotely_lock
      - can_program_offline_access_codes
      - can_program_online_access_codes
      - can_simulate_removal
      - can_simulate_connection
      - can_simulate_disconnection
    source:
      openapi: ../openapi.json
  ThermostatsListRequestExcludeIfItem:
    enum:
      - can_remotely_unlock
      - can_remotely_lock
      - can_program_offline_access_codes
      - can_program_online_access_codes
      - can_simulate_removal
      - can_simulate_connection
      - can_simulate_disconnection
    source:
      openapi: ../openapi.json
  ThermostatsListResponse:
    properties:
      thermostats: list<root.Device>
      ok: boolean
    source:
      openapi: ../openapi.json
  ThermostatsOffResponse:
    properties:
      action_attempt: root.ActionAttempt
      ok: boolean
    source:
      openapi: ../openapi.json
  ThermostatsSetFanModeRequestFanMode:
    enum:
      - auto
      - 'on'
    source:
      openapi: ../openapi.json
  ThermostatsSetFanModeRequestFanModeSetting:
    enum:
      - auto
      - 'on'
    source:
      openapi: ../openapi.json
  ThermostatsSetFanModeResponse:
    properties:
      action_attempt: root.ActionAttempt
      ok: boolean
    source:
      openapi: ../openapi.json
  ThermostatsUpdateRequestDefaultClimateSettingHvacModeSetting:
    enum:
      - 'off'
      - heat
      - cool
      - heat_cool
    source:
      openapi: ../openapi.json
  ThermostatsUpdateRequestDefaultClimateSetting:
    properties:
      automatic_heating_enabled: optional<boolean>
      automatic_cooling_enabled: optional<boolean>
      hvac_mode_setting: optional<ThermostatsUpdateRequestDefaultClimateSettingHvacModeSetting>
      cooling_set_point_celsius: optional<double>
      heating_set_point_celsius: optional<double>
      cooling_set_point_fahrenheit: optional<double>
      heating_set_point_fahrenheit: optional<double>
      manual_override_allowed: optional<boolean>
    source:
      openapi: ../openapi.json
  ThermostatsUpdateResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
service:
  auth: false
  base-path: ''
  endpoints:
    cool:
      path: /thermostats/cool
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /thermostats/cool
      request:
        name: ThermostatsCoolRequest
        body:
          properties:
            device_id:
              type: string
              validation:
                format: uuid
            cooling_set_point_celsius: optional<double>
            cooling_set_point_fahrenheit: optional<double>
            sync:
              type: optional<boolean>
              default: false
        content-type: application/json
      response:
        docs: OK
        type: ThermostatsCoolResponse
        property: action_attempt
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            device_id: device_id
          response:
            body:
              action_attempt:
                action_attempt_id: action_attempt_id
                status: pending
                result: result
                error: error
                action_type: LOCK_DOOR
              ok: true
    get:
      path: /thermostats/get
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /thermostats/get
      request:
        name: ThermostatsGetRequest
        body:
          properties:
            device_id:
              type: optional<string>
              validation:
                format: uuid
            name: optional<string>
        content-type: application/json
      response:
        docs: OK
        type: ThermostatsGetResponse
        property: thermostat
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request: {}
          response:
            body:
              thermostat:
                device_id: device_id
                device_type: akuvox_lock
                nickname: nickname
                display_name: display_name
                capabilities_supported:
                  - access_code
                properties:
                  online: true
                  name: name
                  accessory_keypad:
                    is_connected: true
                  appearance:
                    name: name
                  model:
                    display_name: display_name
                    manufacturer_display_name: manufacturer_display_name
                  has_direct_power: true
                  battery_level: 1.1
                  battery:
                    level: 1.1
                    status: critical
                  manufacturer: manufacturer
                  image_url: image_url
                  image_alt_text: image_alt_text
                  serial_number: serial_number
                  online_access_codes_enabled: true
                  offline_access_codes_enabled: true
                  supports_accessory_keypad: true
                  supports_offline_access_codes: true
                  noise_level_decibels: 1.1
                  currently_triggering_noise_threshold_ids:
                    - currently_triggering_noise_threshold_ids
                  assa_abloy_credential_service_metadata:
                    has_active_endpoint: true
                    endpoints:
                      - endpoint_id: endpoint_id
                        is_active: true
                  august_metadata:
                    lock_id: lock_id
                    lock_name: lock_name
                    house_name: house_name
                    has_keypad: true
                  avigilon_alta_metadata:
                    entry_name: entry_name
                    org_name: org_name
                    zone_id: 1.1
                    zone_name: zone_name
                    site_id: 1.1
                    site_name: site_name
                    entry_relays_total_count: 1.1
                  schlage_metadata:
                    device_id: device_id
                    device_name: device_name
                  smartthings_metadata:
                    device_id: device_id
                    device_name: device_name
                  lockly_metadata:
                    device_id: device_id
                    device_name: device_name
                  nuki_metadata:
                    device_id: device_id
                    device_name: device_name
                  kwikset_metadata:
                    device_id: device_id
                    device_name: device_name
                    model_number: model_number
                  salto_metadata:
                    lock_id: lock_id
                    customer_reference: customer_reference
                    lock_type: lock_type
                    battery_level: battery_level
                    locked_state: locked_state
                  genie_metadata:
                    device_name: device_name
                    door_name: door_name
                  brivo_metadata:
                    device_name: device_name
                  igloo_metadata:
                    device_id: device_id
                    bridge_id: bridge_id
                  noiseaware_metadata:
                    device_model: indoor
                    noise_level_nrs: 1.1
                    noise_level_decibel: 1.1
                    device_name: device_name
                    device_id: device_id
                  minut_metadata:
                    device_id: device_id
                    device_name: device_name
                    latest_sensor_values:
                      temperature:
                        time: time
                        value: 1.1
                      sound:
                        time: time
                        value: 1.1
                      humidity:
                        time: time
                        value: 1.1
                      pressure:
                        time: time
                        value: 1.1
                      accelerometer_z:
                        time: time
                        value: 1.1
                  four_suites_metadata:
                    device_id: 1.1
                    device_name: device_name
                    reclose_delay_in_seconds: 1.1
                  two_n_metadata:
                    device_id: 1.1
                    device_name: device_name
                  controlbyweb_metadata:
                    device_id: device_id
                    device_name: device_name
                  ttlock_metadata:
                    lock_id: 1.1
                    lock_alias: lock_alias
                    feature_value: feature_value
                  seam_bridge_metadata:
                    device_num: 1.1
                    name: name
                  igloohome_metadata:
                    device_id: device_id
                    device_name: device_name
                  nest_metadata:
                    nest_device_id: nest_device_id
                    device_name: device_name
                    custom_name: custom_name
                  ecobee_metadata:
                    ecobee_device_id: ecobee_device_id
                    device_name: device_name
                  honeywell_resideo_metadata:
                    honeywell_resideo_device_id: honeywell_resideo_device_id
                    device_name: device_name
                  hubitat_metadata:
                    device_id: device_id
                    device_name: device_name
                    device_label: device_label
                  dormakaba_oracode_metadata:
                    door_id: 1.1
                    door_name: door_name
                    door_is_wireless: true
                    site_id: 1.1
                    site_name: site_name
                  wyze_metadata:
                    device_id: device_id
                    device_name: device_name
                    product_name: product_name
                    product_type: product_type
                    product_model: product_model
                    device_info_model: device_info_model
                  tedee_metadata:
                    device_id: 1.1
                    serial_number: serial_number
                    device_name: device_name
                    device_model: device_model
                    bridge_id: 1.1
                    bridge_name: bridge_name
                  _experimental_supported_code_from_access_codes_lengths:
                    - 1.1
                  code_constraints:
                    - constraint_type: no_zeros
                  supported_code_lengths:
                    - 1.1
                  max_active_codes_supported: 1.1
                  supports_backup_access_code_pool: true
                  has_native_entry_events: true
                  locked: true
                  keypad_battery:
                    level: 1.1
                  door_open: true
                location:
                  location_name: location_name
                  timezone: timezone
                connected_account_id: connected_account_id
                workspace_id: workspace_id
                errors:
                  - error_code: error_code
                    message: message
                warnings:
                  - warning_code: warning_code
                    message: message
                created_at: '2024-01-15T09:30:00Z'
                is_managed: true
                custom_metadata:
                  key: value
                can_remotely_unlock: true
                can_remotely_lock: true
                can_program_offline_access_codes: true
                can_program_online_access_codes: true
                can_simulate_removal: true
                can_simulate_connection: true
                can_simulate_disconnection: true
              ok: true
    heat:
      path: /thermostats/heat
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /thermostats/heat
      request:
        name: ThermostatsHeatRequest
        body:
          properties:
            device_id:
              type: string
              validation:
                format: uuid
            heating_set_point_celsius: optional<double>
            heating_set_point_fahrenheit: optional<double>
            sync:
              type: optional<boolean>
              default: false
        content-type: application/json
      response:
        docs: OK
        type: ThermostatsHeatResponse
        property: action_attempt
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            device_id: device_id
          response:
            body:
              action_attempt:
                action_attempt_id: action_attempt_id
                status: pending
                result: result
                error: error
                action_type: LOCK_DOOR
              ok: true
    heat_cool:
      path: /thermostats/heat_cool
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /thermostats/heat_cool
      request:
        name: ThermostatsHeatCoolRequest
        body:
          properties:
            device_id:
              type: string
              validation:
                format: uuid
            heating_set_point_celsius: optional<double>
            heating_set_point_fahrenheit: optional<double>
            cooling_set_point_celsius: optional<double>
            cooling_set_point_fahrenheit: optional<double>
            sync:
              type: optional<boolean>
              default: false
        content-type: application/json
      response:
        docs: OK
        type: ThermostatsHeatCoolResponse
        property: action_attempt
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            device_id: device_id
          response:
            body:
              action_attempt:
                action_attempt_id: action_attempt_id
                status: pending
                result: result
                error: error
                action_type: LOCK_DOOR
              ok: true
    list:
      path: /thermostats/list
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /thermostats/list
      request:
        name: ThermostatsListRequest
        body:
          properties:
            connected_account_id:
              type: optional<string>
              docs: List all devices owned by this connected account
              validation:
                format: uuid
            connected_account_ids: optional<list<string>>
            connect_webview_id:
              type: optional<string>
              validation:
                format: uuid
            device_type: optional<ThermostatsListRequestDeviceType>
            device_types: optional<list<ThermostatsListRequestDeviceTypesItem>>
            manufacturer: optional<ThermostatsListRequestManufacturer>
            device_ids: optional<list<string>>
            limit:
              type: optional<double>
              default: 500
            created_before: optional<datetime>
            user_identifier_key: optional<string>
            custom_metadata_has: >-
              optional<map<string,
              ThermostatsListRequestCustomMetadataHasValue>>
            include_if: optional<list<ThermostatsListRequestIncludeIfItem>>
            exclude_if: optional<list<ThermostatsListRequestExcludeIfItem>>
        content-type: application/json
      response:
        docs: OK
        type: ThermostatsListResponse
        property: thermostats
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request: {}
          response:
            body:
              thermostats:
                - device_id: device_id
                  device_type: akuvox_lock
                  nickname: nickname
                  display_name: display_name
                  capabilities_supported:
                    - access_code
                  properties:
                    online: true
                    name: name
                    appearance:
                      name: name
                    model:
                      display_name: display_name
                      manufacturer_display_name: manufacturer_display_name
                  connected_account_id: connected_account_id
                  workspace_id: workspace_id
                  errors:
                    - error_code: error_code
                      message: message
                  warnings:
                    - warning_code: warning_code
                      message: message
                  created_at: '2024-01-15T09:30:00Z'
                  is_managed: true
                  custom_metadata:
                    key: value
                  can_remotely_unlock: true
                  can_remotely_lock: true
                  can_program_offline_access_codes: true
                  can_program_online_access_codes: true
                  can_simulate_removal: true
                  can_simulate_connection: true
                  can_simulate_disconnection: true
              ok: true
    'off':
      path: /thermostats/off
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /thermostats/off
      request:
        name: ThermostatsOffRequest
        body:
          properties:
            device_id:
              type: string
              validation:
                format: uuid
            sync:
              type: optional<boolean>
              default: false
        content-type: application/json
      response:
        docs: OK
        type: ThermostatsOffResponse
        property: action_attempt
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            device_id: device_id
          response:
            body:
              action_attempt:
                action_attempt_id: action_attempt_id
                status: pending
                result: result
                error: error
                action_type: LOCK_DOOR
              ok: true
    set_fan_mode:
      path: /thermostats/set_fan_mode
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /thermostats/set_fan_mode
      request:
        name: ThermostatsSetFanModeRequest
        body:
          properties:
            device_id:
              type: string
              validation:
                format: uuid
            fan_mode: optional<ThermostatsSetFanModeRequestFanMode>
            fan_mode_setting: optional<ThermostatsSetFanModeRequestFanModeSetting>
            sync:
              type: optional<boolean>
              default: false
        content-type: application/json
      response:
        docs: OK
        type: ThermostatsSetFanModeResponse
        property: action_attempt
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            device_id: device_id
          response:
            body:
              action_attempt:
                action_attempt_id: action_attempt_id
                status: pending
                result: result
                error: error
                action_type: LOCK_DOOR
              ok: true
    update:
      path: /thermostats/update
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /thermostats/update
      request:
        name: ThermostatsUpdateRequest
        body:
          properties:
            device_id:
              type: string
              validation:
                format: uuid
            default_climate_setting: ThermostatsUpdateRequestDefaultClimateSetting
        content-type: application/json
      response:
        docs: OK
        type: ThermostatsUpdateResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            device_id: device_id
            default_climate_setting: {}
          response:
            body:
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "thermostats/climateSettingSchedules.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "../__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "create": {
              "auth": true,
              "display-name": "/thermostats/climate_setting_schedules/create",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "device_id": "device_id",
                    "schedule_ends_at": "schedule_ends_at",
                    "schedule_starts_at": "schedule_starts_at",
                  },
                  "response": {
                    "body": {
                      "climate_setting_schedule": {
                        "automatic_cooling_enabled": true,
                        "automatic_heating_enabled": true,
                        "climate_setting_schedule_id": "climate_setting_schedule_id",
                        "cooling_set_point_celsius": 1.1,
                        "cooling_set_point_fahrenheit": 1.1,
                        "created_at": "2024-01-15T09:30:00Z",
                        "device_id": "device_id",
                        "errors": {
                          "key": "value",
                        },
                        "heating_set_point_celsius": 1.1,
                        "heating_set_point_fahrenheit": 1.1,
                        "hvac_mode_setting": "off",
                        "manual_override_allowed": true,
                        "name": "name",
                        "schedule_ends_at": "schedule_ends_at",
                        "schedule_starts_at": "schedule_starts_at",
                        "schedule_type": "time_bound",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/thermostats/climate_setting_schedules/create",
              "request": {
                "body": {
                  "properties": {
                    "automatic_cooling_enabled": "optional<boolean>",
                    "automatic_heating_enabled": "optional<boolean>",
                    "cooling_set_point_celsius": "optional<double>",
                    "cooling_set_point_fahrenheit": "optional<double>",
                    "device_id": "string",
                    "heating_set_point_celsius": "optional<double>",
                    "heating_set_point_fahrenheit": "optional<double>",
                    "hvac_mode_setting": "optional<ClimateSettingSchedulesCreateRequestHvacModeSetting>",
                    "manual_override_allowed": "optional<boolean>",
                    "name": "optional<string>",
                    "schedule_ends_at": "string",
                    "schedule_starts_at": "string",
                    "schedule_type": "optional<literal<"time_bound">>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ClimateSettingSchedulesCreateRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "climate_setting_schedule",
                "type": "ClimateSettingSchedulesCreateResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "delete": {
              "auth": true,
              "display-name": "/thermostats/climate_setting_schedules/delete",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "climate_setting_schedule_id": "climate_setting_schedule_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/thermostats/climate_setting_schedules/delete",
              "request": {
                "body": {
                  "properties": {
                    "climate_setting_schedule_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ClimateSettingSchedulesDeleteRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "type": "ClimateSettingSchedulesDeleteResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get": {
              "auth": true,
              "display-name": "/thermostats/climate_setting_schedules/get",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {},
                  "response": {
                    "body": {
                      "climate_setting_schedule": {
                        "automatic_cooling_enabled": true,
                        "automatic_heating_enabled": true,
                        "climate_setting_schedule_id": "climate_setting_schedule_id",
                        "cooling_set_point_celsius": 1.1,
                        "cooling_set_point_fahrenheit": 1.1,
                        "created_at": "2024-01-15T09:30:00Z",
                        "device_id": "device_id",
                        "errors": {
                          "key": "value",
                        },
                        "heating_set_point_celsius": 1.1,
                        "heating_set_point_fahrenheit": 1.1,
                        "hvac_mode_setting": "off",
                        "manual_override_allowed": true,
                        "name": "name",
                        "schedule_ends_at": "schedule_ends_at",
                        "schedule_starts_at": "schedule_starts_at",
                        "schedule_type": "time_bound",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/thermostats/climate_setting_schedules/get",
              "request": {
                "body": {
                  "properties": {
                    "climate_setting_schedule_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "device_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ClimateSettingSchedulesGetRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "climate_setting_schedule",
                "type": "ClimateSettingSchedulesGetResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list": {
              "auth": true,
              "display-name": "/thermostats/climate_setting_schedules/list",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "device_id": "device_id",
                  },
                  "response": {
                    "body": {
                      "climate_setting_schedules": [
                        {
                          "automatic_cooling_enabled": true,
                          "automatic_heating_enabled": true,
                          "climate_setting_schedule_id": "climate_setting_schedule_id",
                          "cooling_set_point_celsius": 1.1,
                          "cooling_set_point_fahrenheit": 1.1,
                          "created_at": "2024-01-15T09:30:00Z",
                          "device_id": "device_id",
                          "errors": {
                            "key": "value",
                          },
                          "heating_set_point_celsius": 1.1,
                          "heating_set_point_fahrenheit": 1.1,
                          "hvac_mode_setting": "off",
                          "manual_override_allowed": true,
                          "name": "name",
                          "schedule_ends_at": "schedule_ends_at",
                          "schedule_starts_at": "schedule_starts_at",
                          "schedule_type": "time_bound",
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/thermostats/climate_setting_schedules/list",
              "request": {
                "body": {
                  "properties": {
                    "device_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "user_identifier_key": "optional<string>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ClimateSettingSchedulesListRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "climate_setting_schedules",
                "type": "ClimateSettingSchedulesListResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "update": {
              "auth": true,
              "display-name": "/thermostats/climate_setting_schedules/update",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "climate_setting_schedule_id": "climate_setting_schedule_id",
                  },
                  "response": {
                    "body": {
                      "climate_setting_schedule": {
                        "automatic_cooling_enabled": true,
                        "automatic_heating_enabled": true,
                        "climate_setting_schedule_id": "climate_setting_schedule_id",
                        "cooling_set_point_celsius": 1.1,
                        "cooling_set_point_fahrenheit": 1.1,
                        "created_at": "2024-01-15T09:30:00Z",
                        "device_id": "device_id",
                        "errors": {
                          "key": "value",
                        },
                        "heating_set_point_celsius": 1.1,
                        "heating_set_point_fahrenheit": 1.1,
                        "hvac_mode_setting": "off",
                        "manual_override_allowed": true,
                        "name": "name",
                        "schedule_ends_at": "schedule_ends_at",
                        "schedule_starts_at": "schedule_starts_at",
                        "schedule_type": "time_bound",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/thermostats/climate_setting_schedules/update",
              "request": {
                "body": {
                  "properties": {
                    "automatic_cooling_enabled": "optional<boolean>",
                    "automatic_heating_enabled": "optional<boolean>",
                    "climate_setting_schedule_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "cooling_set_point_celsius": "optional<double>",
                    "cooling_set_point_fahrenheit": "optional<double>",
                    "heating_set_point_celsius": "optional<double>",
                    "heating_set_point_fahrenheit": "optional<double>",
                    "hvac_mode_setting": "optional<ClimateSettingSchedulesUpdateRequestHvacModeSetting>",
                    "manual_override_allowed": "optional<boolean>",
                    "name": "optional<string>",
                    "schedule_ends_at": "optional<string>",
                    "schedule_starts_at": "optional<string>",
                    "schedule_type": "optional<literal<"time_bound">>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ClimateSettingSchedulesUpdateRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "type": "ClimateSettingSchedulesUpdateResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "ClimateSettingSchedulesCreateRequestHvacModeSetting": {
            "enum": [
              "off",
              "heat",
              "cool",
              "heat_cool",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ClimateSettingSchedulesCreateResponse": {
            "docs": undefined,
            "properties": {
              "climate_setting_schedule": "root.ClimateSettingSchedule",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ClimateSettingSchedulesDeleteResponse": {
            "docs": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ClimateSettingSchedulesGetResponse": {
            "docs": undefined,
            "properties": {
              "climate_setting_schedule": "root.ClimateSettingSchedule",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ClimateSettingSchedulesListResponse": {
            "docs": undefined,
            "properties": {
              "climate_setting_schedules": "list<root.ClimateSettingSchedule>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ClimateSettingSchedulesUpdateRequestHvacModeSetting": {
            "enum": [
              "off",
              "heat",
              "cool",
              "heat_cool",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "ClimateSettingSchedulesUpdateResponse": {
            "docs": undefined,
            "properties": {
              "climate_setting_schedule": "root.ClimateSettingSchedule",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "types:
  ClimateSettingSchedulesCreateRequestHvacModeSetting:
    enum:
      - 'off'
      - heat
      - cool
      - heat_cool
    source:
      openapi: ../openapi.json
  ClimateSettingSchedulesCreateResponse:
    properties:
      climate_setting_schedule: root.ClimateSettingSchedule
      ok: boolean
    source:
      openapi: ../openapi.json
  ClimateSettingSchedulesDeleteResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
  ClimateSettingSchedulesGetResponse:
    properties:
      climate_setting_schedule: root.ClimateSettingSchedule
      ok: boolean
    source:
      openapi: ../openapi.json
  ClimateSettingSchedulesListResponse:
    properties:
      climate_setting_schedules: list<root.ClimateSettingSchedule>
      ok: boolean
    source:
      openapi: ../openapi.json
  ClimateSettingSchedulesUpdateRequestHvacModeSetting:
    enum:
      - 'off'
      - heat
      - cool
      - heat_cool
    source:
      openapi: ../openapi.json
  ClimateSettingSchedulesUpdateResponse:
    properties:
      climate_setting_schedule: root.ClimateSettingSchedule
      ok: boolean
    source:
      openapi: ../openapi.json
imports:
  root: ../__package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    create:
      path: /thermostats/climate_setting_schedules/create
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /thermostats/climate_setting_schedules/create
      request:
        name: ClimateSettingSchedulesCreateRequest
        body:
          properties:
            schedule_type: optional<literal<"time_bound">>
            device_id: string
            name: optional<string>
            schedule_starts_at: string
            schedule_ends_at: string
            automatic_heating_enabled: optional<boolean>
            automatic_cooling_enabled: optional<boolean>
            hvac_mode_setting: optional<ClimateSettingSchedulesCreateRequestHvacModeSetting>
            cooling_set_point_celsius: optional<double>
            heating_set_point_celsius: optional<double>
            cooling_set_point_fahrenheit: optional<double>
            heating_set_point_fahrenheit: optional<double>
            manual_override_allowed: optional<boolean>
        content-type: application/json
      response:
        docs: OK
        type: ClimateSettingSchedulesCreateResponse
        property: climate_setting_schedule
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            device_id: device_id
            schedule_starts_at: schedule_starts_at
            schedule_ends_at: schedule_ends_at
          response:
            body:
              climate_setting_schedule:
                climate_setting_schedule_id: climate_setting_schedule_id
                schedule_type: time_bound
                device_id: device_id
                name: name
                schedule_starts_at: schedule_starts_at
                schedule_ends_at: schedule_ends_at
                created_at: '2024-01-15T09:30:00Z'
                errors:
                  key: value
                automatic_heating_enabled: true
                automatic_cooling_enabled: true
                hvac_mode_setting: 'off'
                cooling_set_point_celsius: 1.1
                heating_set_point_celsius: 1.1
                cooling_set_point_fahrenheit: 1.1
                heating_set_point_fahrenheit: 1.1
                manual_override_allowed: true
              ok: true
    delete:
      path: /thermostats/climate_setting_schedules/delete
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /thermostats/climate_setting_schedules/delete
      request:
        name: ClimateSettingSchedulesDeleteRequest
        body:
          properties:
            climate_setting_schedule_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: ClimateSettingSchedulesDeleteResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            climate_setting_schedule_id: climate_setting_schedule_id
          response:
            body:
              ok: true
    get:
      path: /thermostats/climate_setting_schedules/get
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /thermostats/climate_setting_schedules/get
      request:
        name: ClimateSettingSchedulesGetRequest
        body:
          properties:
            climate_setting_schedule_id:
              type: optional<string>
              validation:
                format: uuid
            device_id:
              type: optional<string>
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: ClimateSettingSchedulesGetResponse
        property: climate_setting_schedule
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request: {}
          response:
            body:
              climate_setting_schedule:
                climate_setting_schedule_id: climate_setting_schedule_id
                schedule_type: time_bound
                device_id: device_id
                name: name
                schedule_starts_at: schedule_starts_at
                schedule_ends_at: schedule_ends_at
                created_at: '2024-01-15T09:30:00Z'
                errors:
                  key: value
                automatic_heating_enabled: true
                automatic_cooling_enabled: true
                hvac_mode_setting: 'off'
                cooling_set_point_celsius: 1.1
                heating_set_point_celsius: 1.1
                cooling_set_point_fahrenheit: 1.1
                heating_set_point_fahrenheit: 1.1
                manual_override_allowed: true
              ok: true
    list:
      path: /thermostats/climate_setting_schedules/list
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /thermostats/climate_setting_schedules/list
      request:
        name: ClimateSettingSchedulesListRequest
        body:
          properties:
            device_id:
              type: string
              validation:
                format: uuid
            user_identifier_key: optional<string>
        content-type: application/json
      response:
        docs: OK
        type: ClimateSettingSchedulesListResponse
        property: climate_setting_schedules
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            device_id: device_id
          response:
            body:
              climate_setting_schedules:
                - climate_setting_schedule_id: climate_setting_schedule_id
                  schedule_type: time_bound
                  device_id: device_id
                  name: name
                  schedule_starts_at: schedule_starts_at
                  schedule_ends_at: schedule_ends_at
                  created_at: '2024-01-15T09:30:00Z'
                  errors:
                    key: value
                  automatic_heating_enabled: true
                  automatic_cooling_enabled: true
                  hvac_mode_setting: 'off'
                  cooling_set_point_celsius: 1.1
                  heating_set_point_celsius: 1.1
                  cooling_set_point_fahrenheit: 1.1
                  heating_set_point_fahrenheit: 1.1
                  manual_override_allowed: true
              ok: true
    update:
      path: /thermostats/climate_setting_schedules/update
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /thermostats/climate_setting_schedules/update
      request:
        name: ClimateSettingSchedulesUpdateRequest
        body:
          properties:
            climate_setting_schedule_id:
              type: string
              validation:
                format: uuid
            schedule_type: optional<literal<"time_bound">>
            name: optional<string>
            schedule_starts_at: optional<string>
            schedule_ends_at: optional<string>
            automatic_heating_enabled: optional<boolean>
            automatic_cooling_enabled: optional<boolean>
            hvac_mode_setting: optional<ClimateSettingSchedulesUpdateRequestHvacModeSetting>
            cooling_set_point_celsius: optional<double>
            heating_set_point_celsius: optional<double>
            cooling_set_point_fahrenheit: optional<double>
            heating_set_point_fahrenheit: optional<double>
            manual_override_allowed: optional<boolean>
        content-type: application/json
      response:
        docs: OK
        type: ClimateSettingSchedulesUpdateResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            climate_setting_schedule_id: climate_setting_schedule_id
          response:
            body:
              climate_setting_schedule:
                climate_setting_schedule_id: climate_setting_schedule_id
                schedule_type: time_bound
                device_id: device_id
                name: name
                schedule_starts_at: schedule_starts_at
                schedule_ends_at: schedule_ends_at
                created_at: '2024-01-15T09:30:00Z'
                errors:
                  key: value
                automatic_heating_enabled: true
                automatic_cooling_enabled: true
                hvac_mode_setting: 'off'
                cooling_set_point_celsius: 1.1
                heating_set_point_celsius: 1.1
                cooling_set_point_fahrenheit: 1.1
                heating_set_point_fahrenheit: 1.1
                manual_override_allowed: true
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "userIdentities.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "add_acs_user": {
              "auth": true,
              "display-name": "/user_identities/add_acs_user",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "acs_user_id": "acs_user_id",
                    "user_identity_id": "user_identity_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/user_identities/add_acs_user",
              "request": {
                "body": {
                  "properties": {
                    "acs_user_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "user_identity_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UserIdentitiesAddAcsUserRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "type": "UserIdentitiesAddAcsUserResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "create": {
              "auth": true,
              "display-name": "/user_identities/create",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {},
                  "response": {
                    "body": {
                      "ok": true,
                      "user_identity": {
                        "created_at": "2024-01-15T09:30:00Z",
                        "display_name": "display_name",
                        "email_address": "email_address",
                        "full_name": "full_name",
                        "phone_number": "phone_number",
                        "user_identity_id": "user_identity_id",
                        "user_identity_key": "user_identity_key",
                        "workspace_id": "workspace_id",
                      },
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/user_identities/create",
              "request": {
                "body": {
                  "properties": {
                    "email_address": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "email",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "full_name": {
                      "type": "optional<string>",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": 1,
                        "pattern": undefined,
                      },
                    },
                    "phone_number": "optional<string>",
                    "user_identity_key": {
                      "type": "optional<string>",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": 1,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UserIdentitiesCreateRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "user_identity",
                "type": "UserIdentitiesCreateResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "delete": {
              "auth": true,
              "display-name": "/user_identities/delete",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "user_identity_id": "user_identity_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/user_identities/delete",
              "request": {
                "body": {
                  "properties": {
                    "user_identity_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UserIdentitiesDeleteRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "type": "UserIdentitiesDeleteResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get": {
              "auth": true,
              "display-name": "/user_identities/get",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "user_identity_id": "user_identity_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                      "user_identity": {
                        "created_at": "2024-01-15T09:30:00Z",
                        "display_name": "display_name",
                        "email_address": "email_address",
                        "full_name": "full_name",
                        "phone_number": "phone_number",
                        "user_identity_id": "user_identity_id",
                        "user_identity_key": "user_identity_key",
                        "workspace_id": "workspace_id",
                      },
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/user_identities/get",
              "request": {
                "body": "UserIdentitiesGetRequest",
                "content-type": "application/json",
              },
              "response": {
                "docs": "OK",
                "property": "user_identity",
                "type": "UserIdentitiesGetResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "grant_access_to_device": {
              "auth": true,
              "display-name": "/user_identities/grant_access_to_device",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "device_id": "device_id",
                    "user_identity_id": "user_identity_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/user_identities/grant_access_to_device",
              "request": {
                "body": {
                  "properties": {
                    "device_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "user_identity_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UserIdentitiesGrantAccessToDeviceRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "type": "UserIdentitiesGrantAccessToDeviceResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list": {
              "auth": true,
              "display-name": "/user_identities/list",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {},
                  "response": {
                    "body": {
                      "ok": true,
                      "user_identities": [
                        {
                          "created_at": "2024-01-15T09:30:00Z",
                          "display_name": "display_name",
                          "email_address": "email_address",
                          "full_name": "full_name",
                          "phone_number": "phone_number",
                          "user_identity_id": "user_identity_id",
                          "user_identity_key": "user_identity_key",
                          "workspace_id": "workspace_id",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/user_identities/list",
              "request": {
                "body": {
                  "properties": {
                    "credential_manager_acs_system_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UserIdentitiesListRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "user_identities",
                "type": "UserIdentitiesListResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list_accessible_devices": {
              "auth": true,
              "display-name": "/user_identities/list_accessible_devices",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "user_identity_id": "user_identity_id",
                  },
                  "response": {
                    "body": {
                      "accessible_devices": [
                        {
                          "can_program_offline_access_codes": true,
                          "can_program_online_access_codes": true,
                          "can_remotely_lock": true,
                          "can_remotely_unlock": true,
                          "can_simulate_connection": true,
                          "can_simulate_disconnection": true,
                          "can_simulate_removal": true,
                          "capabilities_supported": [
                            "access_code",
                          ],
                          "connected_account_id": "connected_account_id",
                          "created_at": "2024-01-15T09:30:00Z",
                          "custom_metadata": {
                            "key": "value",
                          },
                          "device_id": "device_id",
                          "device_type": "akuvox_lock",
                          "display_name": "display_name",
                          "errors": [
                            {
                              "error_code": "error_code",
                              "message": "message",
                            },
                          ],
                          "is_managed": true,
                          "nickname": "nickname",
                          "properties": {
                            "appearance": {
                              "name": "name",
                            },
                            "model": {
                              "display_name": "display_name",
                              "manufacturer_display_name": "manufacturer_display_name",
                            },
                            "name": "name",
                            "online": true,
                          },
                          "warnings": [
                            {
                              "message": "message",
                              "warning_code": "warning_code",
                            },
                          ],
                          "workspace_id": "workspace_id",
                        },
                      ],
                      "devices": [
                        {
                          "can_program_offline_access_codes": true,
                          "can_program_online_access_codes": true,
                          "can_remotely_lock": true,
                          "can_remotely_unlock": true,
                          "can_simulate_connection": true,
                          "can_simulate_disconnection": true,
                          "can_simulate_removal": true,
                          "capabilities_supported": [
                            "access_code",
                          ],
                          "connected_account_id": "connected_account_id",
                          "created_at": "2024-01-15T09:30:00Z",
                          "custom_metadata": {
                            "key": "value",
                          },
                          "device_id": "device_id",
                          "device_type": "akuvox_lock",
                          "display_name": "display_name",
                          "errors": [
                            {
                              "error_code": "error_code",
                              "message": "message",
                            },
                          ],
                          "is_managed": true,
                          "nickname": "nickname",
                          "properties": {
                            "appearance": {
                              "name": "name",
                            },
                            "model": {
                              "display_name": "display_name",
                              "manufacturer_display_name": "manufacturer_display_name",
                            },
                            "name": "name",
                            "online": true,
                          },
                          "warnings": [
                            {
                              "message": "message",
                              "warning_code": "warning_code",
                            },
                          ],
                          "workspace_id": "workspace_id",
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/user_identities/list_accessible_devices",
              "request": {
                "body": {
                  "properties": {
                    "user_identity_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UserIdentitiesListAccessibleDevicesRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "devices",
                "type": "UserIdentitiesListAccessibleDevicesResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list_acs_systems": {
              "auth": true,
              "display-name": "/user_identities/list_acs_systems",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "user_identity_id": "user_identity_id",
                  },
                  "response": {
                    "body": {
                      "acs_systems": [
                        {
                          "acs_system_id": "acs_system_id",
                          "can_add_acs_users_to_acs_access_groups": true,
                          "can_automate_enrollment": true,
                          "can_create_acs_access_groups": true,
                          "can_remove_acs_users_from_acs_access_groups": true,
                          "connected_account_ids": [
                            "connected_account_ids",
                          ],
                          "created_at": "2024-01-15T09:30:00Z",
                          "errors": [
                            {
                              "created_at": "2024-01-15T09:30:00Z",
                              "error_code": "visionline_instance_unreachable",
                              "message": "errors",
                            },
                          ],
                          "external_type": "pti_site",
                          "external_type_display_name": "external_type_display_name",
                          "image_alt_text": "image_alt_text",
                          "image_url": "image_url",
                          "name": "name",
                          "system_type": "pti_site",
                          "system_type_display_name": "system_type_display_name",
                          "warnings": [
                            {},
                          ],
                          "workspace_id": "workspace_id",
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/user_identities/list_acs_systems",
              "request": {
                "body": {
                  "properties": {
                    "user_identity_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UserIdentitiesListAcsSystemsRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "acs_systems",
                "type": "UserIdentitiesListAcsSystemsResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list_acs_users": {
              "auth": true,
              "display-name": "/user_identities/list_acs_users",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "user_identity_id": "user_identity_id",
                  },
                  "response": {
                    "body": {
                      "acs_users": [
                        {
                          "access_schedule": {
                            "ends_at": "2024-01-15T09:30:00Z",
                            "starts_at": "2024-01-15T09:30:00Z",
                          },
                          "acs_system_id": "acs_system_id",
                          "acs_user_id": "acs_user_id",
                          "created_at": "2024-01-15T09:30:00Z",
                          "display_name": "display_name",
                          "email": "email",
                          "email_address": "email_address",
                          "external_type": "pti_user",
                          "external_type_display_name": "external_type_display_name",
                          "full_name": "full_name",
                          "hid_acs_system_id": "hid_acs_system_id",
                          "is_suspended": true,
                          "phone_number": "phone_number",
                          "user_identity_email_address": "user_identity_email_address",
                          "user_identity_full_name": "user_identity_full_name",
                          "user_identity_id": "user_identity_id",
                          "user_identity_phone_number": "user_identity_phone_number",
                          "workspace_id": "workspace_id",
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/user_identities/list_acs_users",
              "request": {
                "body": {
                  "properties": {
                    "user_identity_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UserIdentitiesListAcsUsersRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "acs_users",
                "type": "UserIdentitiesListAcsUsersResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "remove_acs_user": {
              "auth": true,
              "display-name": "/user_identities/remove_acs_user",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "acs_user_id": "acs_user_id",
                    "user_identity_id": "user_identity_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/user_identities/remove_acs_user",
              "request": {
                "body": {
                  "properties": {
                    "acs_user_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "user_identity_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UserIdentitiesRemoveAcsUserRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "type": "UserIdentitiesRemoveAcsUserResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "revoke_access_to_device": {
              "auth": true,
              "display-name": "/user_identities/revoke_access_to_device",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "device_id": "device_id",
                    "user_identity_id": "user_identity_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/user_identities/revoke_access_to_device",
              "request": {
                "body": {
                  "properties": {
                    "device_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "user_identity_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UserIdentitiesRevokeAccessToDeviceRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "type": "UserIdentitiesRevokeAccessToDeviceResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "update": {
              "auth": true,
              "display-name": "/user_identities/update",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "user_identity_id": "user_identity_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/user_identities/update",
              "request": {
                "body": {
                  "properties": {
                    "email_address": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "email",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "full_name": {
                      "type": "optional<string>",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": 1,
                        "pattern": undefined,
                      },
                    },
                    "phone_number": "optional<string>",
                    "user_identity_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "user_identity_key": {
                      "type": "optional<string>",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": 1,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UserIdentitiesUpdateRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "type": "UserIdentitiesUpdateResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "UserIdentitiesAddAcsUserResponse": {
            "docs": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UserIdentitiesCreateResponse": {
            "docs": undefined,
            "properties": {
              "ok": "boolean",
              "user_identity": "root.UserIdentity",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UserIdentitiesDeleteResponse": {
            "docs": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UserIdentitiesGetRequest": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.json",
            },
            "union": [
              "UserIdentitiesGetRequestUserIdentityId",
              "UserIdentitiesGetRequestUserIdentityKey",
            ],
          },
          "UserIdentitiesGetRequestUserIdentityId": {
            "docs": undefined,
            "properties": {
              "user_identity_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UserIdentitiesGetRequestUserIdentityKey": {
            "docs": undefined,
            "properties": {
              "user_identity_key": "string",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UserIdentitiesGetResponse": {
            "docs": undefined,
            "properties": {
              "ok": "boolean",
              "user_identity": "root.UserIdentity",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UserIdentitiesGrantAccessToDeviceResponse": {
            "docs": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UserIdentitiesListAccessibleDevicesResponse": {
            "docs": undefined,
            "properties": {
              "accessible_devices": {
                "docs": "
      ---
      deprecated: use devices.
      ---
    ",
                "type": "list<root.Device>",
              },
              "devices": "list<root.Device>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UserIdentitiesListAcsSystemsResponse": {
            "docs": undefined,
            "properties": {
              "acs_systems": "list<root.AcsSystem>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UserIdentitiesListAcsUsersResponse": {
            "docs": undefined,
            "properties": {
              "acs_users": "list<root.AcsUser>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UserIdentitiesListResponse": {
            "docs": undefined,
            "properties": {
              "ok": "boolean",
              "user_identities": "list<root.UserIdentity>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UserIdentitiesRemoveAcsUserResponse": {
            "docs": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UserIdentitiesRevokeAccessToDeviceResponse": {
            "docs": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "UserIdentitiesUpdateResponse": {
            "docs": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "types:
  UserIdentitiesAddAcsUserResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
  UserIdentitiesCreateResponse:
    properties:
      user_identity: root.UserIdentity
      ok: boolean
    source:
      openapi: ../openapi.json
  UserIdentitiesDeleteResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
  UserIdentitiesGetRequestUserIdentityId:
    properties:
      user_identity_id:
        type: string
        validation:
          format: uuid
    source:
      openapi: ../openapi.json
  UserIdentitiesGetRequestUserIdentityKey:
    properties:
      user_identity_key: string
    source:
      openapi: ../openapi.json
  UserIdentitiesGetRequest:
    discriminated: false
    union:
      - UserIdentitiesGetRequestUserIdentityId
      - UserIdentitiesGetRequestUserIdentityKey
    source:
      openapi: ../openapi.json
  UserIdentitiesGetResponse:
    properties:
      user_identity: root.UserIdentity
      ok: boolean
    source:
      openapi: ../openapi.json
  UserIdentitiesGrantAccessToDeviceResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
  UserIdentitiesListResponse:
    properties:
      user_identities: list<root.UserIdentity>
      ok: boolean
    source:
      openapi: ../openapi.json
  UserIdentitiesListAccessibleDevicesResponse:
    properties:
      devices: list<root.Device>
      accessible_devices:
        docs: |2-

                ---
                deprecated: use devices.
                ---
              
        type: list<root.Device>
      ok: boolean
    source:
      openapi: ../openapi.json
  UserIdentitiesListAcsSystemsResponse:
    properties:
      acs_systems: list<root.AcsSystem>
      ok: boolean
    source:
      openapi: ../openapi.json
  UserIdentitiesListAcsUsersResponse:
    properties:
      acs_users: list<root.AcsUser>
      ok: boolean
    source:
      openapi: ../openapi.json
  UserIdentitiesRemoveAcsUserResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
  UserIdentitiesRevokeAccessToDeviceResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
  UserIdentitiesUpdateResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    add_acs_user:
      path: /user_identities/add_acs_user
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /user_identities/add_acs_user
      request:
        name: UserIdentitiesAddAcsUserRequest
        body:
          properties:
            user_identity_id:
              type: string
              validation:
                format: uuid
            acs_user_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: UserIdentitiesAddAcsUserResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            user_identity_id: user_identity_id
            acs_user_id: acs_user_id
          response:
            body:
              ok: true
    create:
      path: /user_identities/create
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /user_identities/create
      request:
        name: UserIdentitiesCreateRequest
        body:
          properties:
            user_identity_key:
              type: optional<string>
              validation:
                minLength: 1
            email_address:
              type: optional<string>
              validation:
                format: email
            phone_number: optional<string>
            full_name:
              type: optional<string>
              validation:
                minLength: 1
        content-type: application/json
      response:
        docs: OK
        type: UserIdentitiesCreateResponse
        property: user_identity
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request: {}
          response:
            body:
              user_identity:
                user_identity_id: user_identity_id
                user_identity_key: user_identity_key
                email_address: email_address
                phone_number: phone_number
                display_name: display_name
                full_name: full_name
                created_at: '2024-01-15T09:30:00Z'
                workspace_id: workspace_id
              ok: true
    delete:
      path: /user_identities/delete
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /user_identities/delete
      request:
        name: UserIdentitiesDeleteRequest
        body:
          properties:
            user_identity_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: UserIdentitiesDeleteResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            user_identity_id: user_identity_id
          response:
            body:
              ok: true
    get:
      path: /user_identities/get
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /user_identities/get
      request:
        body: UserIdentitiesGetRequest
        content-type: application/json
      response:
        docs: OK
        type: UserIdentitiesGetResponse
        property: user_identity
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            user_identity_id: user_identity_id
          response:
            body:
              user_identity:
                user_identity_id: user_identity_id
                user_identity_key: user_identity_key
                email_address: email_address
                phone_number: phone_number
                display_name: display_name
                full_name: full_name
                created_at: '2024-01-15T09:30:00Z'
                workspace_id: workspace_id
              ok: true
    grant_access_to_device:
      path: /user_identities/grant_access_to_device
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /user_identities/grant_access_to_device
      request:
        name: UserIdentitiesGrantAccessToDeviceRequest
        body:
          properties:
            user_identity_id:
              type: string
              validation:
                format: uuid
            device_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: UserIdentitiesGrantAccessToDeviceResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            user_identity_id: user_identity_id
            device_id: device_id
          response:
            body:
              ok: true
    list:
      path: /user_identities/list
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /user_identities/list
      request:
        name: UserIdentitiesListRequest
        body:
          properties:
            credential_manager_acs_system_id:
              type: optional<string>
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: UserIdentitiesListResponse
        property: user_identities
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request: {}
          response:
            body:
              user_identities:
                - user_identity_id: user_identity_id
                  user_identity_key: user_identity_key
                  email_address: email_address
                  phone_number: phone_number
                  display_name: display_name
                  full_name: full_name
                  created_at: '2024-01-15T09:30:00Z'
                  workspace_id: workspace_id
              ok: true
    list_accessible_devices:
      path: /user_identities/list_accessible_devices
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /user_identities/list_accessible_devices
      request:
        name: UserIdentitiesListAccessibleDevicesRequest
        body:
          properties:
            user_identity_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: UserIdentitiesListAccessibleDevicesResponse
        property: devices
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            user_identity_id: user_identity_id
          response:
            body:
              devices:
                - device_id: device_id
                  device_type: akuvox_lock
                  nickname: nickname
                  display_name: display_name
                  capabilities_supported:
                    - access_code
                  properties:
                    online: true
                    name: name
                    appearance:
                      name: name
                    model:
                      display_name: display_name
                      manufacturer_display_name: manufacturer_display_name
                  connected_account_id: connected_account_id
                  workspace_id: workspace_id
                  errors:
                    - error_code: error_code
                      message: message
                  warnings:
                    - warning_code: warning_code
                      message: message
                  created_at: '2024-01-15T09:30:00Z'
                  is_managed: true
                  custom_metadata:
                    key: value
                  can_remotely_unlock: true
                  can_remotely_lock: true
                  can_program_offline_access_codes: true
                  can_program_online_access_codes: true
                  can_simulate_removal: true
                  can_simulate_connection: true
                  can_simulate_disconnection: true
              accessible_devices:
                - device_id: device_id
                  device_type: akuvox_lock
                  nickname: nickname
                  display_name: display_name
                  capabilities_supported:
                    - access_code
                  properties:
                    online: true
                    name: name
                    appearance:
                      name: name
                    model:
                      display_name: display_name
                      manufacturer_display_name: manufacturer_display_name
                  connected_account_id: connected_account_id
                  workspace_id: workspace_id
                  errors:
                    - error_code: error_code
                      message: message
                  warnings:
                    - warning_code: warning_code
                      message: message
                  created_at: '2024-01-15T09:30:00Z'
                  is_managed: true
                  custom_metadata:
                    key: value
                  can_remotely_unlock: true
                  can_remotely_lock: true
                  can_program_offline_access_codes: true
                  can_program_online_access_codes: true
                  can_simulate_removal: true
                  can_simulate_connection: true
                  can_simulate_disconnection: true
              ok: true
    list_acs_systems:
      path: /user_identities/list_acs_systems
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /user_identities/list_acs_systems
      request:
        name: UserIdentitiesListAcsSystemsRequest
        body:
          properties:
            user_identity_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: UserIdentitiesListAcsSystemsResponse
        property: acs_systems
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            user_identity_id: user_identity_id
          response:
            body:
              acs_systems:
                - acs_system_id: acs_system_id
                  external_type: pti_site
                  external_type_display_name: external_type_display_name
                  system_type: pti_site
                  system_type_display_name: system_type_display_name
                  name: name
                  created_at: '2024-01-15T09:30:00Z'
                  workspace_id: workspace_id
                  connected_account_ids:
                    - connected_account_ids
                  image_url: image_url
                  image_alt_text: image_alt_text
                  errors:
                    - error_code: visionline_instance_unreachable
                      created_at: '2024-01-15T09:30:00Z'
                      message: errors
                  warnings:
                    - {}
                  can_automate_enrollment: true
                  can_create_acs_access_groups: true
                  can_remove_acs_users_from_acs_access_groups: true
                  can_add_acs_users_to_acs_access_groups: true
              ok: true
    list_acs_users:
      path: /user_identities/list_acs_users
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /user_identities/list_acs_users
      request:
        name: UserIdentitiesListAcsUsersRequest
        body:
          properties:
            user_identity_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: UserIdentitiesListAcsUsersResponse
        property: acs_users
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            user_identity_id: user_identity_id
          response:
            body:
              acs_users:
                - acs_user_id: acs_user_id
                  acs_system_id: acs_system_id
                  hid_acs_system_id: hid_acs_system_id
                  workspace_id: workspace_id
                  created_at: '2024-01-15T09:30:00Z'
                  display_name: display_name
                  external_type: pti_user
                  external_type_display_name: external_type_display_name
                  is_suspended: true
                  access_schedule:
                    starts_at: '2024-01-15T09:30:00Z'
                    ends_at: '2024-01-15T09:30:00Z'
                  user_identity_id: user_identity_id
                  user_identity_full_name: user_identity_full_name
                  user_identity_email_address: user_identity_email_address
                  user_identity_phone_number: user_identity_phone_number
                  full_name: full_name
                  email: email
                  email_address: email_address
                  phone_number: phone_number
              ok: true
    remove_acs_user:
      path: /user_identities/remove_acs_user
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /user_identities/remove_acs_user
      request:
        name: UserIdentitiesRemoveAcsUserRequest
        body:
          properties:
            user_identity_id:
              type: string
              validation:
                format: uuid
            acs_user_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: UserIdentitiesRemoveAcsUserResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            user_identity_id: user_identity_id
            acs_user_id: acs_user_id
          response:
            body:
              ok: true
    revoke_access_to_device:
      path: /user_identities/revoke_access_to_device
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /user_identities/revoke_access_to_device
      request:
        name: UserIdentitiesRevokeAccessToDeviceRequest
        body:
          properties:
            user_identity_id:
              type: string
              validation:
                format: uuid
            device_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: UserIdentitiesRevokeAccessToDeviceResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            user_identity_id: user_identity_id
            device_id: device_id
          response:
            body:
              ok: true
    update:
      path: /user_identities/update
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /user_identities/update
      request:
        name: UserIdentitiesUpdateRequest
        body:
          properties:
            user_identity_id:
              type: string
              validation:
                format: uuid
            user_identity_key:
              type: optional<string>
              validation:
                minLength: 1
            email_address:
              type: optional<string>
              validation:
                format: email
            phone_number: optional<string>
            full_name:
              type: optional<string>
              validation:
                minLength: 1
        content-type: application/json
      response:
        docs: OK
        type: UserIdentitiesUpdateResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            user_identity_id: user_identity_id
          response:
            body:
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "userIdentities/enrollmentAutomations.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "../__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "delete": {
              "auth": true,
              "display-name": "/user_identities/enrollment_automations/delete",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "enrollment_automation_id": "enrollment_automation_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/user_identities/enrollment_automations/delete",
              "request": {
                "body": {
                  "properties": {
                    "enrollment_automation_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "EnrollmentAutomationsDeleteRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "type": "EnrollmentAutomationsDeleteResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get": {
              "auth": true,
              "display-name": "/user_identities/enrollment_automations/get",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "enrollment_automation_id": "enrollment_automation_id",
                  },
                  "response": {
                    "body": {
                      "enrollment_automation": {
                        "created_at": "2024-01-15T09:30:00Z",
                        "credential_manager_acs_system_id": "credential_manager_acs_system_id",
                        "enrollment_automation_id": "enrollment_automation_id",
                        "user_identity_id": "user_identity_id",
                        "workspace_id": "workspace_id",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/user_identities/enrollment_automations/get",
              "request": {
                "body": {
                  "properties": {
                    "enrollment_automation_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "EnrollmentAutomationsGetRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "enrollment_automation",
                "type": "EnrollmentAutomationsGetResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "launch": {
              "auth": true,
              "display-name": "/user_identities/enrollment_automations/launch",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "credential_manager_acs_system_id": "credential_manager_acs_system_id",
                    "user_identity_id": "user_identity_id",
                  },
                  "response": {
                    "body": {
                      "enrollment_automation": {
                        "acs_credential_provisioning_automation_id": "acs_credential_provisioning_automation_id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "credential_manager_acs_system_id": "credential_manager_acs_system_id",
                        "enrollment_automation_id": "enrollment_automation_id",
                        "user_identity_id": "user_identity_id",
                        "workspace_id": "workspace_id",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/user_identities/enrollment_automations/launch",
              "request": {
                "body": {
                  "properties": {
                    "acs_credential_pool_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "create_credential_manager_user": "optional<boolean>",
                    "credential_manager_acs_system_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "credential_manager_acs_user_id": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "user_identity_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "EnrollmentAutomationsLaunchRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "enrollment_automation",
                "type": "EnrollmentAutomationsLaunchResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list": {
              "auth": true,
              "display-name": "/user_identities/enrollment_automations/list",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "user_identity_id": "user_identity_id",
                  },
                  "response": {
                    "body": {
                      "enrollment_automations": [
                        {
                          "created_at": "2024-01-15T09:30:00Z",
                          "credential_manager_acs_system_id": "credential_manager_acs_system_id",
                          "enrollment_automation_id": "enrollment_automation_id",
                          "user_identity_id": "user_identity_id",
                          "workspace_id": "workspace_id",
                        },
                      ],
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/user_identities/enrollment_automations/list",
              "request": {
                "body": {
                  "properties": {
                    "user_identity_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "EnrollmentAutomationsListRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "enrollment_automations",
                "type": "EnrollmentAutomationsListResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "EnrollmentAutomationsDeleteResponse": {
            "docs": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "EnrollmentAutomationsGetResponse": {
            "docs": undefined,
            "properties": {
              "enrollment_automation": "root.EnrollmentAutomation",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "EnrollmentAutomationsLaunchResponse": {
            "docs": undefined,
            "properties": {
              "enrollment_automation": {
                "inline": true,
                "type": "EnrollmentAutomationsLaunchResponseEnrollmentAutomation",
              },
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "EnrollmentAutomationsLaunchResponseEnrollmentAutomation": {
            "docs": undefined,
            "properties": {
              "acs_credential_provisioning_automation_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "created_at": "datetime",
              "credential_manager_acs_system_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "enrollment_automation_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "user_identity_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "workspace_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "EnrollmentAutomationsListResponse": {
            "docs": undefined,
            "properties": {
              "enrollment_automations": "list<root.EnrollmentAutomation>",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "types:
  EnrollmentAutomationsDeleteResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
  EnrollmentAutomationsGetResponse:
    properties:
      enrollment_automation: root.EnrollmentAutomation
      ok: boolean
    source:
      openapi: ../openapi.json
  EnrollmentAutomationsLaunchResponseEnrollmentAutomation:
    properties:
      acs_credential_provisioning_automation_id:
        type: string
        validation:
          format: uuid
      credential_manager_acs_system_id:
        type: string
        validation:
          format: uuid
      user_identity_id:
        type: string
        validation:
          format: uuid
      created_at: datetime
      workspace_id:
        type: string
        validation:
          format: uuid
      enrollment_automation_id:
        type: string
        validation:
          format: uuid
    source:
      openapi: ../openapi.json
  EnrollmentAutomationsLaunchResponse:
    properties:
      enrollment_automation:
        type: EnrollmentAutomationsLaunchResponseEnrollmentAutomation
        inline: true
      ok: boolean
    source:
      openapi: ../openapi.json
  EnrollmentAutomationsListResponse:
    properties:
      enrollment_automations: list<root.EnrollmentAutomation>
      ok: boolean
    source:
      openapi: ../openapi.json
imports:
  root: ../__package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    delete:
      path: /user_identities/enrollment_automations/delete
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /user_identities/enrollment_automations/delete
      request:
        name: EnrollmentAutomationsDeleteRequest
        body:
          properties:
            enrollment_automation_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: EnrollmentAutomationsDeleteResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            enrollment_automation_id: enrollment_automation_id
          response:
            body:
              ok: true
    get:
      path: /user_identities/enrollment_automations/get
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /user_identities/enrollment_automations/get
      request:
        name: EnrollmentAutomationsGetRequest
        body:
          properties:
            enrollment_automation_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: EnrollmentAutomationsGetResponse
        property: enrollment_automation
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            enrollment_automation_id: enrollment_automation_id
          response:
            body:
              enrollment_automation:
                credential_manager_acs_system_id: credential_manager_acs_system_id
                user_identity_id: user_identity_id
                created_at: '2024-01-15T09:30:00Z'
                workspace_id: workspace_id
                enrollment_automation_id: enrollment_automation_id
              ok: true
    launch:
      path: /user_identities/enrollment_automations/launch
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /user_identities/enrollment_automations/launch
      request:
        name: EnrollmentAutomationsLaunchRequest
        body:
          properties:
            user_identity_id:
              type: string
              validation:
                format: uuid
            credential_manager_acs_system_id:
              type: string
              validation:
                format: uuid
            acs_credential_pool_id:
              type: optional<string>
              validation:
                format: uuid
            create_credential_manager_user: optional<boolean>
            credential_manager_acs_user_id:
              type: optional<string>
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: EnrollmentAutomationsLaunchResponse
        property: enrollment_automation
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            user_identity_id: user_identity_id
            credential_manager_acs_system_id: credential_manager_acs_system_id
          response:
            body:
              enrollment_automation:
                acs_credential_provisioning_automation_id: acs_credential_provisioning_automation_id
                credential_manager_acs_system_id: credential_manager_acs_system_id
                user_identity_id: user_identity_id
                created_at: '2024-01-15T09:30:00Z'
                workspace_id: workspace_id
                enrollment_automation_id: enrollment_automation_id
              ok: true
    list:
      path: /user_identities/enrollment_automations/list
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /user_identities/enrollment_automations/list
      request:
        name: EnrollmentAutomationsListRequest
        body:
          properties:
            user_identity_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: OK
        type: EnrollmentAutomationsListResponse
        property: enrollment_automations
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            user_identity_id: user_identity_id
          response:
            body:
              enrollment_automations:
                - credential_manager_acs_system_id: credential_manager_acs_system_id
                  user_identity_id: user_identity_id
                  created_at: '2024-01-15T09:30:00Z'
                  workspace_id: workspace_id
                  enrollment_automation_id: enrollment_automation_id
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "webhooks.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "create": {
              "auth": true,
              "display-name": "/webhooks/create",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "url": "url",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                      "webhook": {
                        "event_types": [
                          "event_types",
                        ],
                        "secret": "secret",
                        "url": "url",
                        "webhook_id": "webhook_id",
                      },
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/webhooks/create",
              "request": {
                "body": {
                  "properties": {
                    "event_types": "optional<list<string>>",
                    "url": {
                      "type": "string",
                      "validation": {
                        "format": "uri",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "WebhooksCreateRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "webhook",
                "type": "WebhooksCreateResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "delete": {
              "auth": true,
              "display-name": "/webhooks/delete",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "webhook_id": "webhook_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/webhooks/delete",
              "request": {
                "body": {
                  "properties": {
                    "webhook_id": "string",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "WebhooksDeleteRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "type": "WebhooksDeleteResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get": {
              "auth": true,
              "display-name": "/webhooks/get",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "webhook_id": "webhook_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                      "webhook": {
                        "event_types": [
                          "event_types",
                        ],
                        "secret": "secret",
                        "url": "url",
                        "webhook_id": "webhook_id",
                      },
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/webhooks/get",
              "request": {
                "body": {
                  "properties": {
                    "webhook_id": "string",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "WebhooksGetRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "webhook",
                "type": "WebhooksGetResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list": {
              "auth": true,
              "display-name": "/webhooks/list",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "response": {
                    "body": {
                      "ok": true,
                      "webhooks": [
                        {
                          "event_types": [
                            "event_types",
                          ],
                          "secret": "secret",
                          "url": "url",
                          "webhook_id": "webhook_id",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/webhooks/list",
              "response": {
                "docs": "OK",
                "property": "webhooks",
                "type": "WebhooksListResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "update": {
              "auth": true,
              "display-name": "/webhooks/update",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "event_types": [
                      "event_types",
                    ],
                    "webhook_id": "webhook_id",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/webhooks/update",
              "request": {
                "body": {
                  "properties": {
                    "event_types": "list<string>",
                    "webhook_id": "string",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "WebhooksUpdateRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "type": "WebhooksUpdateResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "WebhooksCreateResponse": {
            "docs": undefined,
            "properties": {
              "ok": "boolean",
              "webhook": "root.Webhook",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "WebhooksDeleteResponse": {
            "docs": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "WebhooksGetResponse": {
            "docs": undefined,
            "properties": {
              "ok": "boolean",
              "webhook": "root.Webhook",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "WebhooksListResponse": {
            "docs": undefined,
            "properties": {
              "ok": "boolean",
              "webhooks": "list<root.Webhook>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "WebhooksUpdateResponse": {
            "docs": undefined,
            "properties": {
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
types:
  WebhooksCreateResponse:
    properties:
      webhook: root.Webhook
      ok: boolean
    source:
      openapi: ../openapi.json
  WebhooksDeleteResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
  WebhooksGetResponse:
    properties:
      webhook: root.Webhook
      ok: boolean
    source:
      openapi: ../openapi.json
  WebhooksListResponse:
    properties:
      webhooks: list<root.Webhook>
      ok: boolean
    source:
      openapi: ../openapi.json
  WebhooksUpdateResponse:
    properties:
      ok: boolean
    source:
      openapi: ../openapi.json
service:
  auth: false
  base-path: ''
  endpoints:
    create:
      path: /webhooks/create
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /webhooks/create
      request:
        name: WebhooksCreateRequest
        body:
          properties:
            url:
              type: string
              validation:
                format: uri
            event_types: optional<list<string>>
        content-type: application/json
      response:
        docs: OK
        type: WebhooksCreateResponse
        property: webhook
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            url: url
          response:
            body:
              webhook:
                webhook_id: webhook_id
                url: url
                event_types:
                  - event_types
                secret: secret
              ok: true
    delete:
      path: /webhooks/delete
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /webhooks/delete
      request:
        name: WebhooksDeleteRequest
        body:
          properties:
            webhook_id: string
        content-type: application/json
      response:
        docs: OK
        type: WebhooksDeleteResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            webhook_id: webhook_id
          response:
            body:
              ok: true
    get:
      path: /webhooks/get
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /webhooks/get
      request:
        name: WebhooksGetRequest
        body:
          properties:
            webhook_id: string
        content-type: application/json
      response:
        docs: OK
        type: WebhooksGetResponse
        property: webhook
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            webhook_id: webhook_id
          response:
            body:
              webhook:
                webhook_id: webhook_id
                url: url
                event_types:
                  - event_types
                secret: secret
              ok: true
    list:
      path: /webhooks/list
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /webhooks/list
      response:
        docs: OK
        type: WebhooksListResponse
        property: webhooks
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - response:
            body:
              webhooks:
                - webhook_id: webhook_id
                  url: url
                  event_types:
                    - event_types
                  secret: secret
              ok: true
    update:
      path: /webhooks/update
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /webhooks/update
      request:
        name: WebhooksUpdateRequest
        body:
          properties:
            webhook_id: string
            event_types: list<string>
        content-type: application/json
      response:
        docs: OK
        type: WebhooksUpdateResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            webhook_id: webhook_id
            event_types:
              - event_types
          response:
            body:
              ok: true
  source:
    openapi: ../openapi.json
",
    },
    "workspaces.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "create": {
              "auth": true,
              "display-name": "/workspaces/create",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "request": {
                    "name": "name",
                  },
                  "response": {
                    "body": {
                      "ok": true,
                      "workspace": {
                        "company_name": "company_name",
                        "connect_partner_name": "connect_partner_name",
                        "is_sandbox": true,
                        "name": "name",
                        "workspace_id": "workspace_id",
                      },
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/workspaces/create",
              "request": {
                "body": {
                  "properties": {
                    "company_name": "optional<string>",
                    "connect_partner_name": {
                      "docs": "
    ---
    deprecated: use company_name
    ---
  ",
                      "type": "optional<string>",
                    },
                    "is_sandbox": {
                      "default": false,
                      "type": "optional<boolean>",
                    },
                    "name": "string",
                    "webview_logo_shape": "optional<WorkspacesCreateRequestWebviewLogoShape>",
                    "webview_primary_button_color": "optional<string>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "WorkspacesCreateRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "OK",
                "property": "workspace",
                "type": "WorkspacesCreateResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "get": {
              "auth": true,
              "display-name": "/workspaces/get",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "response": {
                    "body": {
                      "ok": true,
                      "workspace": {
                        "company_name": "company_name",
                        "connect_partner_name": "connect_partner_name",
                        "is_sandbox": true,
                        "name": "name",
                        "workspace_id": "workspace_id",
                      },
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/workspaces/get",
              "response": {
                "docs": "OK",
                "property": "workspace",
                "type": "WorkspacesGetResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "list": {
              "auth": true,
              "display-name": "/workspaces/list",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "response": {
                    "body": {
                      "ok": true,
                      "workspaces": [
                        {
                          "company_name": "company_name",
                          "connect_partner_name": "connect_partner_name",
                          "is_sandbox": true,
                          "name": "name",
                          "workspace_id": "workspace_id",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/workspaces/list",
              "response": {
                "docs": "OK",
                "property": "workspaces",
                "type": "WorkspacesListResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
            "reset_sandbox": {
              "auth": true,
              "display-name": "/workspaces/reset_sandbox",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
              ],
              "examples": [
                {
                  "response": {
                    "body": {
                      "action_attempt": {
                        "action_attempt_id": "action_attempt_id",
                        "action_type": "LOCK_DOOR",
                        "error": "error",
                        "result": "result",
                        "status": "pending",
                      },
                      "ok": true,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/workspaces/reset_sandbox",
              "response": {
                "docs": "OK",
                "property": "action_attempt",
                "type": "WorkspacesResetSandboxResponse",
              },
              "source": {
                "openapi": "../openapi.json",
              },
            },
          },
          "source": {
            "openapi": "../openapi.json",
          },
        },
        "types": {
          "WorkspacesCreateRequestWebviewLogoShape": {
            "enum": [
              "circle",
              "square",
            ],
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "WorkspacesCreateResponse": {
            "docs": undefined,
            "properties": {
              "ok": "boolean",
              "workspace": "root.Workspace",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "WorkspacesGetResponse": {
            "docs": undefined,
            "properties": {
              "ok": "boolean",
              "workspace": "root.Workspace",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "WorkspacesListResponse": {
            "docs": undefined,
            "properties": {
              "ok": "boolean",
              "workspaces": "list<root.Workspace>",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
          "WorkspacesResetSandboxResponse": {
            "docs": undefined,
            "properties": {
              "action_attempt": "root.ActionAttempt",
              "ok": "boolean",
            },
            "source": {
              "openapi": "../openapi.json",
            },
          },
        },
      },
      "rawContents": "types:
  WorkspacesCreateRequestWebviewLogoShape:
    enum:
      - circle
      - square
    source:
      openapi: ../openapi.json
  WorkspacesCreateResponse:
    properties:
      workspace: root.Workspace
      ok: boolean
    source:
      openapi: ../openapi.json
  WorkspacesGetResponse:
    properties:
      workspace: root.Workspace
      ok: boolean
    source:
      openapi: ../openapi.json
  WorkspacesListResponse:
    properties:
      workspaces: list<root.Workspace>
      ok: boolean
    source:
      openapi: ../openapi.json
  WorkspacesResetSandboxResponse:
    properties:
      action_attempt: root.ActionAttempt
      ok: boolean
    source:
      openapi: ../openapi.json
imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    create:
      path: /workspaces/create
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /workspaces/create
      request:
        name: WorkspacesCreateRequest
        body:
          properties:
            name: string
            company_name: optional<string>
            connect_partner_name:
              type: optional<string>
              docs: |2-

                    ---
                    deprecated: use company_name
                    ---
                  
            is_sandbox:
              type: optional<boolean>
              default: false
            webview_primary_button_color: optional<string>
            webview_logo_shape: optional<WorkspacesCreateRequestWebviewLogoShape>
        content-type: application/json
      response:
        docs: OK
        type: WorkspacesCreateResponse
        property: workspace
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - request:
            name: name
          response:
            body:
              workspace:
                workspace_id: workspace_id
                name: name
                company_name: company_name
                is_sandbox: true
                connect_partner_name: connect_partner_name
              ok: true
    get:
      path: /workspaces/get
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /workspaces/get
      response:
        docs: OK
        type: WorkspacesGetResponse
        property: workspace
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - response:
            body:
              workspace:
                workspace_id: workspace_id
                name: name
                company_name: company_name
                is_sandbox: true
                connect_partner_name: connect_partner_name
              ok: true
    list:
      path: /workspaces/list
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /workspaces/list
      response:
        docs: OK
        type: WorkspacesListResponse
        property: workspaces
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - response:
            body:
              workspaces:
                - workspace_id: workspace_id
                  name: name
                  company_name: company_name
                  is_sandbox: true
                  connect_partner_name: connect_partner_name
              ok: true
    reset_sandbox:
      path: /workspaces/reset_sandbox
      method: POST
      auth: true
      source:
        openapi: ../openapi.json
      display-name: /workspaces/reset_sandbox
      response:
        docs: OK
        type: WorkspacesResetSandboxResponse
        property: action_attempt
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
      examples:
        - response:
            body:
              action_attempt:
                action_attempt_id: action_attempt_id
                status: pending
                result: result
                error: error
                action_type: LOCK_DOOR
              ok: true
  source:
    openapi: ../openapi.json
",
    },
  },
  "packageMarkers": {},
  "rootApiFile": {
    "contents": {
      "auth": "BearerAuthScheme",
      "auth-schemes": {
        "BearerAuthScheme": {
          "scheme": "bearer",
        },
      },
      "default-environment": "Default",
      "display-name": "Seam Connect",
      "environments": {
        "Default": "https://connect.getseam.com",
      },
      "error-discrimination": {
        "strategy": "status-code",
      },
      "headers": {
        "client-session-token": {
          "env": undefined,
          "name": "clientSessionToken",
          "type": "string",
        },
        "seam-client-session-token": {
          "env": undefined,
          "name": "seamClientSessionToken",
          "type": "string",
        },
        "seam-workspace": {
          "env": undefined,
          "name": "seamWorkspace",
          "type": "string",
        },
      },
      "name": "api",
    },
    "defaultUrl": undefined,
    "rawContents": "name: api
error-discrimination:
  strategy: status-code
display-name: Seam Connect
environments:
  Default: https://connect.getseam.com
default-environment: Default
auth-schemes:
  BearerAuthScheme:
    scheme: bearer
auth: BearerAuthScheme
headers:
  seam-workspace:
    type: string
    name: seamWorkspace
  seam-client-session-token:
    type: string
    name: seamClientSessionToken
  client-session-token:
    type: string
    name: clientSessionToken
",
  },
}