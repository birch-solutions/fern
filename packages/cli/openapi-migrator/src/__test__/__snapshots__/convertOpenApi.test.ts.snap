// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`open api converter covie simple 1`] = `
{
  "rootApiFile": {
    "auth": undefined,
    "auth-schemes": undefined,
    "display-name": "Policy API",
    "headers": {},
    "name": "api",
  },
  "serviceFiles": {
    "__package__.yml": {},
    "account.yml": {
      "service": {
        "auth": false,
        "base-path": "/accounts/{account_id}/mfa_requirements",
        "endpoints": {
          "disableAccountMfaRequired": {
            "display-name": "Disable Account MFA Requirement",
            "docs": "Remove requirement for all account users to have an MFA application configured",
            "method": "DELETE",
            "path": "",
          },
          "enableAccountMfaRequired": {
            "display-name": "Enable Account MFA Requirement",
            "docs": "Require all account users to have an MFA application configured",
            "method": "POST",
            "path": "",
            "response": "AccountWithConfig",
          },
        },
        "path-parameters": {
          "account_id": {
            "docs": "Unique identifier of the account.",
            "type": "string",
          },
        },
      },
      "types": {
        "AccountWithConfig": "unknown",
      },
    },
    "application.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "service": {
        "auth": false,
        "base-path": "/applications/{application_id}",
        "endpoints": {
          "getApplicationLinks": {
            "display-name": "List Application Links",
            "docs": "Lists an application's links.",
            "method": "GET",
            "path": "/links",
            "response": "commons.Links",
          },
          "getApplicationPolicies": {
            "display-name": "List Application Policies",
            "docs": "Lists an application's policies.",
            "method": "GET",
            "path": "/policies",
            "response": "commons.Policies",
          },
        },
        "path-parameters": {
          "application_id": {
            "docs": "Unique identifier of the application.",
            "type": "string",
          },
        },
      },
    },
    "commons.yml": {
      "types": {
        "Address": {
          "docs": "A universal base object encapsulating the physical address related to another object.",
          "extends": undefined,
          "properties": {
            "city": {
              "docs": "The city in which the address provided is located.",
              "type": "optional<string>",
            },
            "line1": {
              "docs": "The first line of the address being provided.",
              "type": "optional<string>",
            },
            "line2": {
              "docs": "The second line of the address, when provided.",
              "type": "optional<string>",
            },
            "postal_code": {
              "docs": "The 5 digit postal code in which the address is located.",
              "type": "optional<string>",
            },
            "state": {
              "docs": "The state or provide in which the address is located, represented in abbreviated form.",
              "type": "optional<string>",
            },
          },
        },
        "Carrier": {
          "docs": "A basic object describing the individual insurance company which has issued a policy.",
          "extends": undefined,
          "properties": {
            "name": {
              "docs": "The name of the issuing company.",
              "type": "optional<string>",
            },
          },
        },
        "Coverage": {
          "docs": "Describes the features of a specific coverage element for a person or property, encapsulating the limits, deductibles, and premium information therein. ",
          "extends": undefined,
          "properties": {
            "deductible": "optional<unknown>",
            "limits": {
              "docs": "A breakout of different limits and sublimits that apply to this coverage item. When the limits property is null, then the coverage described is selected but limits are not applicable for the coverage feature. The ommission of any limit scope indicates that it does not apply to the coverage.",
              "type": "optional<_InlinedType24>",
            },
            "name": {
              "docs": "The name of the coverage element being described. This is a coded value offered as a convenience method to avoid the need to introspect code to understand which branch of logic is being evaluated.",
              "type": "optional<string>",
            },
            "premium": {
              "docs": "The amount of premium being charged for this coverage item at the specified limits and deductibles.",
              "type": "optional<unknown>",
            },
          },
        },
        "CurrencyValue": {
          "docs": "Describes a value that is tied to a monetary amount. Most frequently used to describe limits, premiums, and deductibles.",
          "extends": undefined,
          "properties": {
            "unit": {
              "docs": "The ISO-compatible currency code of the value being represented.",
              "type": "optional<_InlinedType25>",
            },
            "value": {
              "docs": "The amount of currency",
              "type": "optional<double>",
            },
          },
        },
        "Discount": {
          "docs": "Describes a discount which a policyholder is receiving for a particular covered property under a policy. When available, this object also describes the amount of savings.",
          "extends": undefined,
          "properties": {
            "amount": "optional<unknown>",
            "code": {
              "docs": "The programming-friendly value to indicate the discount being applied. NOTE: We regularly add values to this enumeration, so your code should be able to gracefully handle unexpected enum values (though new values are documented here as they go live).",
              "type": "optional<_InlinedType31>",
            },
            "friendly_name": {
              "docs": "A human-readable, friendly name for the discount.",
              "type": "optional<string>",
            },
          },
        },
        "DistanceValue": {
          "docs": "Describes a value that is tied to a physical length or distance. Most frequently used to describe limits on coverages.",
          "extends": undefined,
          "properties": {
            "unit": {
              "docs": "The distance unit of the value being represented.",
              "type": "optional<_InlinedType29>",
            },
            "value": {
              "docs": "The amount of the distance in the units specified",
              "type": "optional<double>",
            },
          },
        },
        "DocumentRef": {
          "docs": "Describes the individual insurance document available for download from a given insurance policy, including the content-type (or mimetype) of the document.",
          "extends": undefined,
          "properties": {
            "content_type": {
              "docs": "The content-type, or mimetype, of the document being conveyed at this location.",
              "type": "optional<string>",
            },
            "href": {
              "docs": "The path to retrieve the document described in this object.",
              "type": "optional<string>",
            },
            "type": {
              "docs": "The type of document provided at the corresponding URL.",
              "type": "optional<_InlinedType34>",
            },
          },
        },
        "Driver": {
          "docs": "Describes the individual driver who is considered the routine operator of the vehicle it is attached to and who is explicitly included under the coverage terms selected for the vehicle.",
          "extends": undefined,
          "properties": {
            "age_licensed": {
              "docs": "The age in which the driver was first licensed, when provided by the insurer.",
              "type": "optional<integer>",
            },
            "date_of_birth": {
              "docs": "The date of birth of the driver, when provided by the insurer. Represented as an ISO-8601 date.",
              "type": "optional<string>",
            },
            "gender": {
              "docs": "The reported gender of the driver, when provided by the insurer.",
              "type": "optional<_InlinedType22>",
            },
            "is_primary": {
              "docs": "A flag indicating if the driver is described as the primary driver of the vehicle. When no clear indication is made by an insurer, the first listed driver is assumed to be the primary.",
              "type": "optional<boolean>",
            },
            "license_number": {
              "docs": "The drivers license number of the driver when provided by the insurer. This value may be masked.",
              "type": "optional<string>",
            },
            "license_state": {
              "docs": "The state in which the driver is licensed. Represented in abbreviated form.",
              "type": "optional<string>",
            },
            "marital_status": {
              "docs": "The current marital status of the driver, if provided. The \`separated\` value includes divorced status.",
              "type": "optional<_InlinedType21>",
            },
            "name": "optional<Name>",
          },
        },
        "EMail": {
          "docs": "A universal base object encapsulating the e-mail address related to another object.",
          "extends": undefined,
          "properties": {
            "address": "optional<unknown>",
            "is_primary": "optional<unknown>",
          },
        },
        "Event": {
          "docs": "Represents an event delivered via webhook on the occurrence of certain policy changes.",
          "extends": undefined,
          "properties": {
            "_embedded": {
              "docs": "A collection of the objects in which this event applies to.",
              "type": "optional<map<string, unknown>>",
            },
            "_links": "optional<unknown>",
            "event_type": {
              "docs": "An enumerated string representing the type of event that occurred.",
              "type": "optional<_InlinedType35>",
            },
            "id": {
              "docs": "The unique identifier of the received event.",
              "type": "optional<string>",
            },
            "occurred_at": {
              "docs": "The date and time in which the event occurred, represented as an ISO-8601 string.",
              "type": "optional<string>",
            },
          },
        },
        "Events": "unknown",
        "Integration": {
          "docs": "Represents a connection between a client application and Covie's systems allowing a client users to create and process links.",
          "extends": undefined,
          "properties": {
            "configuration": "optional<unknown>",
            "created_at": {
              "docs": "The date and time, in ISO-8601 format, when the integration was first created.",
              "type": "optional<string>",
            },
            "id": {
              "docs": "Unique identifier for the integration.",
              "type": "optional<string>",
            },
            "is_onboarding": {
              "docs": "Whether the integration is live, but belongs to a prepaid account that hasn't had its first refill",
              "type": "optional<unknown>",
            },
            "key": {
              "docs": "Integration key used in client application initialization.",
              "type": "optional<string>",
            },
            "name": {
              "docs": "A descriptive name of the integration.",
              "type": "optional<string>",
            },
            "policy_requirements": "optional<unknown>",
            "status": {
              "docs": "String representation of the current status of the integration.",
              "type": "optional<_InlinedType39>",
            },
            "updated_at": {
              "docs": "The date and time, in ISO-8601 format, when the integration was last updated.",
              "type": "optional<string>",
            },
          },
        },
        "Interest": {
          "docs": "Describes an entity, person or company, that has a legal interest in a piece of covered property. This could represent a bank or other financial institution who owns a loan/mortgage/lien over a covered property, a landlord who owns the property a tenant is leasing, or some other recognized stakeholder who is entitled to certain information rights from the insurance company regarding the covered property.",
          "extends": undefined,
          "properties": {
            "address": "optional<unknown>",
            "email_addresses": {
              "docs": "E-Mail addresses used to contact the interested party.",
              "type": "optional<list<EMail>>",
            },
            "fax": {
              "docs": "The Fax Number by which to contact the interested party. Provided in E164 format.",
              "type": "optional<unknown>",
            },
            "name": "optional<Name>",
            "phone_numbers": {
              "docs": "Phone Numbers used to call the interested party. Provided in E164 format.",
              "type": "optional<list<Phone>>",
            },
            "type": {
              "docs": "The type of interest being described. Such as: lender, landlord, guarantor, or other.",
              "type": "optional<_InlinedType23>",
            },
          },
        },
        "Link_2": {
          "docs": "Represents the individual connections between Covie and a Policyholder's account with a carrier and wraps the policies retrieved from it that have been made available to the consumer.",
          "extends": undefined,
          "properties": {
            "_links": "optional<unknown>",
            "created_at": {
              "docs": "The date and time, in ISO-8601 format, when the link was first created.",
              "type": "optional<string>",
            },
            "id": {
              "docs": "The unique identifier of the link object.",
              "type": "optional<string>",
            },
            "integration_id": {
              "docs": "The identifier of the integration that was used to establish the link.",
              "type": "optional<string>",
            },
            "is_tracked": {
              "docs": "A flag indicating if the policies provided by this link should be tracked by Covie's monitoring service.",
              "type": "optional<boolean>",
            },
            "metadata": {
              "docs": "Arbitrary key value pairs set on link creation or PATCH. Keys are alphanumeric plus _, -, ., and space, at most 64 characters. Values are at most 256 characters. You can have at most 32 metadata keys on a link.",
              "type": "optional<map<string, unknown>>",
            },
            "object": {
              "docs": "String representing the object’s type. Objects of the same type share the same value.",
              "type": "optional<string>",
            },
            "policy_count": {
              "docs": "The number of policies provided by this link.",
              "type": "optional<integer>",
            },
            "status": {
              "docs": "A string representation of the link's current status. This is distinct from a policy's status which is an indicator to whether a policy is in force. A link's status is an indicator of how new and complete the data is and whether or not it is possible to retrieve refreshed information.",
              "type": "optional<_InlinedType55>",
            },
            "tracking_frequency": {
              "docs": "The frequency of which tracking should be performed. This value is \`never\` when tracking is disabled.",
              "type": "optional<_InlinedType56>",
            },
            "updated_at": {
              "docs": "The date and time, in ISO-8601 format, when the link was last updated.",
              "type": "optional<string>",
            },
          },
        },
        "Links": "unknown",
        "Location": {
          "docs": "Describes a physical location and/or structure which is covered under the terms of an insurance policy.",
          "extends": undefined,
          "properties": {
            "address": "optional<Address>",
            "coverages": {
              "docs": "A list of coverages that apply to the location being insured.",
              "type": "optional<_InlinedType32>",
            },
            "discounts": {
              "docs": "A list of discounts being applied to the location.",
              "type": "optional<list<Discount>>",
            },
            "interests": {
              "docs": "A list of interested parties, such as mortgagers, lienholders, guarantors, landlords, or others.",
              "type": "optional<list<Interest>>",
            },
            "other_deductibles": {
              "docs": "A list of deductibles that apply in addition to the coverage-specific deductibles.",
              "type": "optional<_InlinedType33>",
            },
          },
        },
        "Name": {
          "docs": "Contains a name for a person or business",
          "extends": undefined,
          "properties": {
            "full": "optional<unknown>",
          },
        },
        "PercentageValue": {
          "docs": "Describes a value that is represented as a percentage, fraction, or ratio of another value. Most frequently depicted for deductibles which may be a percentage of a limit.",
          "extends": undefined,
          "properties": {
            "unit": {
              "docs": "Always "percentage"",
              "type": "optional<_InlinedType28>",
            },
            "value": {
              "docs": "The percentage amount determined by this value.",
              "type": "optional<double>",
            },
          },
        },
        "PeriodValue": {
          "docs": "Describes a value that represents a period of time, such as days, weeks, or months.",
          "extends": undefined,
          "properties": {
            "unit": {
              "docs": "The scale of time period being represented.",
              "type": "optional<_InlinedType30>",
            },
            "value": {
              "docs": "The amount of time being represented.",
              "type": "optional<integer>",
            },
          },
        },
        "Phone": {
          "docs": "A universal base object encapsulating the phone number related to another object.",
          "extends": undefined,
          "properties": {
            "is_primary": "optional<unknown>",
            "number": "optional<unknown>",
            "type": "optional<unknown>",
          },
        },
        "Policies": "unknown",
        "Policy": {
          "docs": "This describes, in high level, the insurance policy record that is provided by a link. This object encapsulates all the necessary details to understand the policy's status, policyholders, and covered persons or properties. ",
          "extends": undefined,
          "properties": {
            "_embedded": {
              "docs": "A container for objects wrapped by the current object.",
              "type": "optional<_InlinedType46>",
            },
            "_links": {
              "docs": "A polymorphic list of externally linked resources related to this policy such as documents or logos for carriers.",
              "type": "optional<_InlinedType45>",
            },
            "cancellation_date": {
              "docs": "The date when the policy is set to be cancelled. This date is provided in ISO-8601 format excluding time.",
              "type": "optional<string>",
            },
            "cancellation_reason": {
              "docs": "The determined reason for the cancellation, such as insured_non_payment or carrier_non_renew or insured_action. This value is null when cancellation is not active or not explicitly indicated by the carrier systems and is not guaranteed to be provided in any circumstance.",
              "type": "optional<_InlinedType43>",
            },
            "carrier": "optional<Carrier>",
            "expiration_date": {
              "docs": "The date when the described policy period ends. This date is provided in ISO-8601 format excluding time.",
              "type": "optional<string>",
            },
            "fingerprint": {
              "docs": "A universally-unique identifier of a policy.",
              "type": "optional<string>",
            },
            "id": {
              "docs": "Unique identifier of a policy record within the application that obtained it.",
              "type": "optional<string>",
            },
            "inception_date": {
              "docs": "The date when the policy becomes in force. This date is provided in ISO-8601 format excluding time.",
              "type": "optional<string>",
            },
            "last_synced_at": {
              "docs": "The date and time when the policy record was last updated. This date and time is provided in ISO-8601 format.",
              "type": "optional<string>",
            },
            "line": {
              "docs": "A string indicating the line of business this policy encompasses.",
              "type": "optional<_InlinedType41>",
            },
            "link_id": {
              "docs": "Unique identifier of the link associated to the policy.",
              "type": "optional<string>",
            },
            "linked_at": {
              "docs": "The date and time which the policy was initially retrieved. This date and time is provided in ISO-8601 format.",
              "type": "optional<string>",
            },
            "locations": "optional<unknown>",
            "masked_number": {
              "docs": "This is a masked version of the policy number provided by the issuing company. This is always provided and available to all customers.",
              "type": "optional<string>",
            },
            "number": {
              "docs": "The full policy number as provided by the issuing company. This is not available to all users and may be null when not active on the account.",
              "type": "optional<string>",
            },
            "object": {
              "docs": "String representing the object’s type. Objects of the same type share the same value.",
              "type": "optional<string>",
            },
            "policyholders": {
              "docs": "A list of insureds, or policyholders assigned to this policy.",
              "type": "optional<list<Policyholder>>",
            },
            "premium": {
              "docs": "An integer indicating the total premium paid for the policy period. This value is null when premium access is not enabled on the customer account or is not able to be determined.",
              "type": "optional<unknown>",
            },
            "status": {
              "docs": "A string representation of the policy's current status.",
              "type": "optional<_InlinedType42>",
            },
            "term_length": "optional<PeriodValue>",
            "vehicles": "optional<unknown>",
          },
        },
        "Policyholder": {
          "docs": "Describes the company or person which is legally listed on, and entitled to benefits from the policy for which they are attached.",
          "extends": undefined,
          "properties": {
            "address": "optional<unknown>",
            "email_addresses": {
              "docs": "The contact e-mail addresses of the insured, if known.",
              "type": "optional<list<EMail>>",
            },
            "is_primary": {
              "docs": "A flag indicating if the insured is explicitly referenced as primary, or assumed primary as being the first insured listed on the policy.",
              "type": "optional<boolean>",
            },
            "name": "optional<Name>",
            "phone_numbers": {
              "docs": "The contact phone numbers of the insured, if known.",
              "type": "optional<list<Phone>>",
            },
            "type": {
              "docs": "An indication if the insured is a business or individual.",
              "type": "optional<_InlinedType17>",
            },
          },
        },
        "Provider": {
          "docs": "Represents a connected insurance partner that can be used to authenticate and return policy data.",
          "extends": undefined,
          "properties": {
            "_embedded": {
              "docs": "A collection of sub objects that are related to this provider, most commonly consisting of co-branded or sub-issuing providers affiliated with this provider.",
              "type": "optional<_InlinedType50>",
            },
            "_links": {
              "docs": "A collection of externally referenced material pertaining to the provider, such as web addresses and images.",
              "type": "optional<_InlinedType49>",
            },
            "id": {
              "docs": "The unique identifier of the provider.",
              "type": "optional<string>",
            },
            "name": {
              "docs": "The friendly name of the provider in question.",
              "type": "optional<string>",
            },
          },
        },
        "RelativeValue": {
          "docs": "Describes a value that is relative to another, such as the fair market value or replacement value. It is inherently variable and subject to the context in which it is invoked.",
          "extends": undefined,
          "properties": {
            "unit": {
              "docs": "Always "other".",
              "type": "optional<_InlinedType26>",
            },
            "value": {
              "docs": "The form of measure used to calculate the relative value, such as "actual cash value" or "ACV" which looks at the original price or investment and factors in depreciation (effectively "Fair Market Value"), or "replacement cost" (sometimes "Actual Loss Sustained" or "ALS") which sets a value against real cost to replace something today.

Occasionally, a response of "unknown" may be returned. This value indicates that no specific value was provided in high level policy documents. The value may be subjective and specific to the individual policyholder as specified in their policy contract and should be manually reviewed.",
              "type": "optional<_InlinedType27>",
            },
          },
        },
        "Vehicle": {
          "docs": "Describes the motor vehicle which is covered under the terms of a policy. This object contains details of the specific coverages provided for this vehicle and information about the drivers who are covered.",
          "extends": undefined,
          "properties": {
            "annual_mileage": {
              "docs": "When provided, the estimated number of miles this vehicle is expected to be driven, per year. When a range is specified by the carrier, the highest value in the range is provided.",
              "type": "optional<integer>",
            },
            "coverages": {
              "docs": "A list of all coverages that apply to this vehicle. The omission of any coverage indicates that coverage was either declined or does not apply to this vehicle.",
              "type": "optional<_InlinedType20>",
            },
            "discounts": {
              "docs": "A list of discounts being applied to the premium of this vehicle.",
              "type": "optional<list<Discount>>",
            },
            "drivers": {
              "docs": "A list of drivers assigned to this vehicle.",
              "type": "optional<list<Driver>>",
            },
            "garaging_address": "optional<unknown>",
            "interests": {
              "docs": "The financial institution which presently holds a lien against the vehicle.",
              "type": "optional<list<Interest>>",
            },
            "make": {
              "docs": "The manufacturer of the vehicle covered by this policy.",
              "type": "optional<string>",
            },
            "model": {
              "docs": "The model of the vehicle covered by this policy.",
              "type": "optional<string>",
            },
            "ownership": {
              "docs": "Whether or not the vehicle specified is owned, leased, or financed by the insured.",
              "type": "optional<_InlinedType19>",
            },
            "series": {
              "docs": "The series of the vehicle covered by this policy.",
              "type": "optional<string>",
            },
            "trim": {
              "docs": "The trim of the vehicle covered by this policy.",
              "type": "optional<string>",
            },
            "usage": {
              "docs": "The intended usage of the vehicle by the insured.",
              "type": "optional<_InlinedType18>",
            },
            "vin": {
              "docs": "The unique Vehicle Identification Number (VIN) that pertains to this vehicle.",
              "type": "optional<string>",
            },
            "year": {
              "docs": "The 4-digit model year of the vehicle covered by this policy.",
              "type": "optional<string>",
            },
          },
        },
        "Webhook": {
          "docs": "Represents a webhook in the Covie system.",
          "extends": undefined,
          "properties": {
            "created_at": {
              "docs": "Date the webhook was created.",
              "type": "optional<string>",
            },
            "event_types": "optional<unknown>",
            "headers": {
              "docs": "List of the headers and their values that should be included in the request.",
              "type": "optional<map<string, unknown>>",
            },
            "id": {
              "docs": "Unique identifier for the Webhook object.",
              "type": "optional<string>",
            },
            "is_enabled": "optional<unknown>",
            "last_called_at": {
              "docs": "The last time a request was made.",
              "type": "optional<string>",
            },
            "last_response_body": {
              "docs": "The response from the last request.",
              "type": "optional<string>",
            },
            "last_response_code": {
              "docs": "The response HTTP code from the last request.",
              "type": "optional<string>",
            },
            "updated_at": {
              "docs": "Date of the last time the webhook was updated.",
              "type": "optional<string>",
            },
            "uri": {
              "docs": "URI the webhook should make a request to when the event is triggered.",
              "type": "optional<string>",
            },
          },
        },
        "_InlinedType17": {
          "docs": "An indication if the insured is a business or individual.",
          "enum": [
            "person",
            "business",
          ],
        },
        "_InlinedType18": {
          "docs": "The intended usage of the vehicle by the insured.",
          "enum": [
            "commute",
            "pleasure",
            "business",
          ],
        },
        "_InlinedType19": {
          "docs": "Whether or not the vehicle specified is owned, leased, or financed by the insured.",
          "enum": [
            "own",
            "lease",
            "finance",
          ],
        },
        "_InlinedType20": {
          "docs": "A list of all coverages that apply to this vehicle. The omission of any coverage indicates that coverage was either declined or does not apply to this vehicle.",
          "extends": undefined,
          "properties": {
            "all_risk": "optional<Coverage>",
            "automobile_death_benefit": "optional<Coverage>",
            "bodily_injury": "optional<Coverage>",
            "carried_contents": "optional<Coverage>",
            "collision": "optional<Coverage>",
            "collision_deductible_waiver": "optional<Coverage>",
            "comprehensive": "optional<Coverage>",
            "custom_parts": "optional<Coverage>",
            "full_glass": "optional<Coverage>",
            "limited_personal_injury_protection": "optional<Coverage>",
            "limited_property_damage": "optional<Coverage>",
            "loan_lease_payoff": "optional<Coverage>",
            "medical_payments": "optional<Coverage>",
            "motorcycle_enhanced_injury": "optional<Coverage>",
            "new_vehicle_replacement": "optional<Coverage>",
            "nonowned_bodily_injury": "optional<Coverage>",
            "nonowned_medical_payments": "optional<Coverage>",
            "nonowned_physical_damage": "optional<Coverage>",
            "nonowned_property_damage": "optional<Coverage>",
            "oem_parts": "optional<Coverage>",
            "personal_injury_attendant_rider": "optional<Coverage>",
            "personal_injury_protection": "optional<Coverage>",
            "personal_property": "optional<Coverage>",
            "property_damage": "optional<Coverage>",
            "property_protection": "optional<Coverage>",
            "rental_car": "optional<Coverage>",
            "rented_vehicle_liability": "optional<Coverage>",
            "ride_share": "optional<Coverage>",
            "roadside": "optional<Coverage>",
            "trip_interruption": "optional<Coverage>",
            "underinsured_bodily_injury": "optional<Coverage>",
            "underinsured_property_damage": "optional<Coverage>",
            "uninsured_bodily_injury": "optional<Coverage>",
            "uninsured_property_damage": "optional<Coverage>",
          },
        },
        "_InlinedType21": {
          "docs": "The current marital status of the driver, if provided. The \`separated\` value includes divorced status.",
          "enum": [
            "married",
            "single",
            "separated",
            "widowed",
          ],
        },
        "_InlinedType22": {
          "docs": "The reported gender of the driver, when provided by the insurer.",
          "enum": [
            "male",
            "female",
            "non-binary",
          ],
        },
        "_InlinedType23": {
          "docs": "The type of interest being described. Such as: lender, landlord, guarantor, or other.",
          "enum": [
            "landlord",
            "lender",
            "guarantor",
            "other",
          ],
        },
        "_InlinedType24": {
          "docs": "A breakout of different limits and sublimits that apply to this coverage item. When the limits property is null, then the coverage described is selected but limits are not applicable for the coverage feature. The ommission of any limit scope indicates that it does not apply to the coverage.",
          "extends": undefined,
          "properties": {
            "day": "optional<unknown>",
            "duration": "optional<PeriodValue>",
            "occurrence": "optional<unknown>",
            "person": "optional<unknown>",
            "term": "optional<CurrencyValue>",
          },
        },
        "_InlinedType25": {
          "docs": "The ISO-compatible currency code of the value being represented.",
          "enum": [
            "USD",
            "USD_cents",
          ],
        },
        "_InlinedType26": {
          "docs": "Always "other".",
          "enum": [
            "other",
          ],
        },
        "_InlinedType27": {
          "docs": "The form of measure used to calculate the relative value, such as "actual cash value" or "ACV" which looks at the original price or investment and factors in depreciation (effectively "Fair Market Value"), or "replacement cost" (sometimes "Actual Loss Sustained" or "ALS") which sets a value against real cost to replace something today.

Occasionally, a response of "unknown" may be returned. This value indicates that no specific value was provided in high level policy documents. The value may be subjective and specific to the individual policyholder as specified in their policy contract and should be manually reviewed.",
          "enum": [
            "actual_cash_value",
            "replacement_value",
            "unknown",
          ],
        },
        "_InlinedType28": {
          "docs": "Always "percentage"",
          "enum": [
            "percentage",
          ],
        },
        "_InlinedType29": {
          "docs": "The distance unit of the value being represented.",
          "enum": [
            "mile",
            "kilometer",
          ],
        },
        "_InlinedType30": {
          "docs": "The scale of time period being represented.",
          "enum": [
            "day",
            "week",
            "month",
          ],
        },
        "_InlinedType31": {
          "docs": "The programming-friendly value to indicate the discount being applied. NOTE: We regularly add values to this enumeration, so your code should be able to gracefully handle unexpected enum values (though new values are documented here as they go live).",
          "enum": [
            "safe_driver",
            "telematics",
            "online",
            "bundle",
            "teen_driver",
            "claim_free",
            "homeowner",
            "new_car",
            "multi_car",
            "pay_in_full",
            "paperless_billing",
            "loyalty",
            "good_student",
            "distant_student",
            "accident_free",
            "continuous_insurance",
            "eft",
            "early_quote",
            "alarm_system",
            "new_home",
            "new_roof",
            "safe_vehicle",
            "smart_vehicle",
            "membership",
            "payment_plan",
            "military",
            "garage_parking",
            "senior",
            "autopay",
            "insurance_to_value",
            "verified_mileage",
            "payment_history",
            "motorcycle_endorsement",
          ],
        },
        "_InlinedType32": {
          "docs": "A list of coverages that apply to the location being insured.",
          "extends": undefined,
          "properties": {
            "additional_structures": "optional<Coverage>",
            "arson_reward": "optional<Coverage>",
            "credit_card_fraud": "optional<Coverage>",
            "debris_removal": "optional<Coverage>",
            "dwelling": "optional<Coverage>",
            "dwelling_extension": "optional<Coverage>",
            "fire_service": "optional<Coverage>",
            "landscaping": "optional<Coverage>",
            "locks": "optional<Coverage>",
            "loss_assessment": "optional<Coverage>",
            "loss_of_use": "optional<Coverage>",
            "medical_payments": "optional<Coverage>",
            "oil_release": "optional<Coverage>",
            "personal_liability": "optional<Coverage>",
            "personal_property": "optional<Coverage>",
            "personal_property_off_premises": "optional<Coverage>",
            "property_damage_others": "optional<Coverage>",
            "service_line": "optional<Coverage>",
            "sewer_backup": "optional<Coverage>",
          },
        },
        "_InlinedType33": {
          "docs": "A list of deductibles that apply in addition to the coverage-specific deductibles.",
          "extends": undefined,
          "properties": {
            "earthquake": "optional<unknown>",
            "hail": "optional<unknown>",
          },
        },
        "_InlinedType34": {
          "docs": "The type of document provided at the corresponding URL.",
          "enum": [
            "declaration",
            "id_card",
            "renewal",
            "evidence_of_insurance",
            "cancellation",
          ],
        },
        "_InlinedType35": {
          "docs": "An enumerated string representing the type of event that occurred.",
          "enum": [
            "link.created",
            "link.successful",
            "link.documents.available",
            "link.broken",
            "link.stale",
            "link.changed",
            "policies.unlinked",
            "policy.activated",
            "policy.cancelling",
            "policy.expired",
            "policy.reinstated",
            "policy.renewed",
            "policy.changed",
            "policy.changed.coverage",
            "policy.changed.insureds",
            "policy.changed.status",
            "policy.changed.premium",
          ],
        },
        "_InlinedType36": {
          "docs": "Link to view the full event payload.",
          "extends": undefined,
          "properties": {
            "href": "optional<unknown>",
          },
        },
        "_InlinedType37": {
          "docs": "String representation of the current status of the integration.",
          "enum": [
            "active",
            "archived",
          ],
        },
        "_InlinedType38": {
          "docs": "Branding configuration for the embed.",
          "extends": undefined,
          "properties": {
            "colors": "optional<unknown>",
            "hide_logo": {
              "docs": "Hides the logo.",
              "type": "optional<boolean>",
            },
            "logo": {
              "docs": "Brand logo to be used in the embed.",
              "type": "optional<string>",
            },
          },
        },
        "_InlinedType39": {
          "docs": "String representation of the current status of the integration.",
          "enum": [
            "active",
            "archived",
          ],
        },
        "_InlinedType40": {
          "docs": "Branding configuration for the embed.",
          "extends": undefined,
          "properties": {
            "colors": "optional<unknown>",
            "hide_logo": {
              "docs": "Hides the logo.",
              "type": "optional<boolean>",
            },
            "logo": {
              "docs": "Brand logo to be used in the embed.",
              "type": "optional<string>",
            },
          },
        },
        "_InlinedType41": {
          "docs": "A string indicating the line of business this policy encompasses.",
          "enum": [
            "personal_auto",
            "homeowner",
            "renter",
            "motorcycle",
          ],
        },
        "_InlinedType42": {
          "docs": "A string representation of the policy's current status.",
          "enum": [
            "active",
            "expired",
            "pending",
            "cancelled",
          ],
        },
        "_InlinedType43": {
          "docs": "The determined reason for the cancellation, such as insured_non_payment or carrier_non_renew or insured_action. This value is null when cancellation is not active or not explicitly indicated by the carrier systems and is not guaranteed to be provided in any circumstance.",
          "enum": [
            "carrier_non_renew",
            "insured_non_payment",
            "insured_requested",
            "other",
          ],
        },
        "_InlinedType44": {
          "docs": "A link to the logo for the carrier on the policy.",
          "extends": undefined,
          "properties": {
            "href": "optional<unknown>",
          },
        },
        "_InlinedType45": {
          "docs": "A polymorphic list of externally linked resources related to this policy such as documents or logos for carriers.",
          "extends": undefined,
          "properties": {
            "carrier_logo": {
              "docs": "A link to the logo for the carrier on the policy.",
              "type": "optional<_InlinedType44>",
            },
            "documents": {
              "docs": "A list of documents obtained and available for this policy. This list may be empty if no documents are available or if document access is not enabled for your account.",
              "type": "optional<list<DocumentRef>>",
            },
          },
        },
        "_InlinedType46": {
          "docs": "A container for objects wrapped by the current object.",
          "extends": undefined,
          "properties": {
            "missing_fields": {
              "docs": "A list of policy fields that were unable to be processed.",
              "type": "optional<list<unknown>>",
            },
          },
        },
        "_InlinedType47": {
          "docs": "The logo image to be used when describing a given provider.",
          "extends": undefined,
          "properties": {
            "href": {
              "docs": "The full URL to access the provider's logo.",
              "type": "optional<string>",
            },
          },
        },
        "_InlinedType48": {
          "docs": "A reference to the provider's primary website.",
          "extends": undefined,
          "properties": {
            "href": {
              "docs": "The full URL of the provider's main website.",
              "type": "optional<string>",
            },
          },
        },
        "_InlinedType49": {
          "docs": "A collection of externally referenced material pertaining to the provider, such as web addresses and images.",
          "extends": undefined,
          "properties": {
            "image": {
              "docs": "The logo image to be used when describing a given provider.",
              "type": "optional<_InlinedType47>",
            },
            "website": {
              "docs": "A reference to the provider's primary website.",
              "type": "optional<_InlinedType48>",
            },
          },
        },
        "_InlinedType50": {
          "docs": "A collection of sub objects that are related to this provider, most commonly consisting of co-branded or sub-issuing providers affiliated with this provider.",
          "extends": undefined,
          "properties": {
            "alternative_providers": {
              "docs": "A collection of alternative providers which a policyholder may have issued policies through this top-level provider.",
              "type": "optional<list<Provider>>",
            },
          },
        },
        "_InlinedType51": {
          "docs": "A string representation of the link's current status. This is distinct from a policy's status which is an indicator to whether a policy is in force. A link's status is an indicator of how new and complete the data is and whether or not it is possible to retrieve refreshed information.",
          "enum": [
            "new",
            "active",
            "document_uploaded",
            "broken",
            "revoked",
            "stale",
          ],
        },
        "_InlinedType52": {
          "docs": "The frequency of which tracking should be performed. This value is \`never\` when tracking is disabled.",
          "enum": [
            "daily",
            "weekly",
            "monthly",
            "never",
            "on_demand",
          ],
        },
        "_InlinedType53": {
          "docs": "Link to retrieve the link's details.",
          "extends": undefined,
          "properties": {
            "href": "optional<unknown>",
          },
        },
        "_InlinedType54": {
          "docs": "Link to the carrier's logo.",
          "extends": undefined,
          "properties": {
            "href": "optional<unknown>",
          },
        },
        "_InlinedType55": {
          "docs": "A string representation of the link's current status. This is distinct from a policy's status which is an indicator to whether a policy is in force. A link's status is an indicator of how new and complete the data is and whether or not it is possible to retrieve refreshed information.",
          "enum": [
            "new",
            "active",
            "document_uploaded",
            "broken",
            "revoked",
            "stale",
          ],
        },
        "_InlinedType56": {
          "docs": "The frequency of which tracking should be performed. This value is \`never\` when tracking is disabled.",
          "enum": [
            "daily",
            "weekly",
            "monthly",
            "never",
            "on_demand",
          ],
        },
        "_InlinedType57": {
          "docs": "Link to retrieve the link's details.",
          "extends": undefined,
          "properties": {
            "href": "optional<unknown>",
          },
        },
        "_InlinedType58": {
          "docs": "Link to the carrier's logo.",
          "extends": undefined,
          "properties": {
            "href": "optional<unknown>",
          },
        },
      },
    },
    "event.yml": {
      "service": {
        "auth": false,
        "base-path": "/events/{event_id}/broadcasts",
        "endpoints": {
          "postEventsEventIdBroadcasts": {
            "display-name": "Rebroadcast Event",
            "docs": "Rebroadcast an event.",
            "method": "POST",
            "path": "",
            "response": "unknown",
          },
        },
        "path-parameters": {
          "event_id": "string",
        },
      },
      "types": {
        "EventBroadcast": {
          "docs": "Record of a broadcast to a webhook endpoint when an event is triggered.",
          "extends": undefined,
          "properties": {
            "broadcast_at": {
              "docs": "Date/Time the broadcast was sent.",
              "type": "optional<string>",
            },
            "id": {
              "docs": "Unique identifier for the broadcast.",
              "type": "optional<string>",
            },
            "queued_at": {
              "docs": "Date/Time the broadcast was prepared for delivery.",
              "type": "optional<string>",
            },
            "request_headers": {
              "docs": "Custom headers used to send the broadcast.",
              "type": "optional<map<string, unknown>>",
            },
            "request_uri": {
              "docs": "URI the broadcast was sent to.",
              "type": "optional<string>",
            },
            "response_body": {
              "docs": "Contents of the response.",
              "type": "optional<string>",
            },
            "response_code": {
              "docs": "Response code from the URI.",
              "type": "optional<integer>",
            },
          },
        },
      },
    },
    "integration.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "service": {
        "auth": false,
        "base-path": "/integrations",
        "endpoints": {
          "createIntegration": {
            "display-name": "Create Integration",
            "docs": "Creates a new integration.",
            "method": "POST",
            "path": "",
            "request": {
              "body": "_InlinedType7",
            },
          },
          "deleteIntegration": {
            "display-name": "Delete Integration",
            "docs": "Deletes an integration.",
            "method": "DELETE",
            "path": "/{integration_id}",
            "path-parameters": {
              "integration_id": "string",
            },
          },
          "deleteIntegrationsIntegrationIdAgencyLogo": {
            "display-name": "Delete Agency Logo",
            "docs": "Delete the agency logo and/or config if present.",
            "method": "DELETE",
            "path": "/{integration_id}/agency_logo",
            "path-parameters": {
              "integration_id": "string",
            },
          },
          "deleteIntegrationsIntegrationIdAgentPhoto": {
            "display-name": "Delete Agent Photo",
            "docs": "Delete the agent photo and/or config if present.",
            "method": "DELETE",
            "path": "/{integration_id}/agent_photo",
            "path-parameters": {
              "integration_id": "string",
            },
          },
          "deleteIntegrationsIntegrationIdBrandLogo": {
            "display-name": "Delete Brand Logo",
            "docs": "Delete the brand logo and/or config if present.",
            "method": "DELETE",
            "path": "/{integration_id}/brand_logo",
            "path-parameters": {
              "integration_id": "string",
            },
          },
          "getIntegration": {
            "display-name": "Get Integration",
            "docs": "Retrieve the details of an integration.",
            "method": "GET",
            "path": "/{integration_id}",
            "path-parameters": {
              "integration_id": "string",
            },
            "response": "commons.Integration_2",
          },
          "getIntegrationPolicies": {
            "display-name": "List Integration Policies",
            "docs": "List all policies that have been linked to an integration.",
            "method": "GET",
            "path": "/{integration_id}/policies",
            "path-parameters": {
              "integration_id": "string",
            },
            "response": "commons.Policies",
          },
          "getIntegrationProviders": {
            "display-name": "Supported Providers List",
            "docs": "Retrieve a list of supported carriers for a given integration, along with their identifiers.",
            "method": "GET",
            "path": "/{integration_id}/providers",
            "path-parameters": {
              "integration_id": "string",
            },
            "response": "Providers",
          },
          "getIntegrationsIntegrationIdAgencyLogo": {
            "display-name": "View Agency Logo",
            "docs": "View the agency logo for the hosted integration.",
            "method": "GET",
            "path": "/{integration_id}/agency_logo",
            "path-parameters": {
              "integration_id": "string",
            },
          },
          "getIntegrationsIntegrationIdAgentPhoto": {
            "display-name": "View Agent Photo",
            "docs": "View the agent photo for the hosted integration.",
            "method": "GET",
            "path": "/{integration_id}/agent_photo",
            "path-parameters": {
              "integration_id": "string",
            },
          },
          "getIntegrationsIntegrationIdBrandLogo": {
            "display-name": "View Brand Logo",
            "docs": "View the brand logo for the integration.",
            "method": "GET",
            "path": "/{integration_id}/brand_logo",
            "path-parameters": {
              "integration_id": "string",
            },
          },
          "listIntegrations": {
            "display-name": "List Integrations",
            "docs": "List integrations associated to an application",
            "method": "GET",
            "path": "",
            "response": "Integrations",
          },
          "putIntegrationsIntegrationIdAgencyLogo": {
            "display-name": "Update Agency Logo",
            "docs": "Upload the agency logo for the hosted integration.",
            "method": "PUT",
            "path": "/{integration_id}/agency_logo",
            "path-parameters": {
              "integration_id": "string",
            },
            "response": "unknown",
          },
          "putIntegrationsIntegrationIdAgentPhoto": {
            "display-name": "Update Agent Photo",
            "docs": "Upload an agent photo for the hosted integration.",
            "method": "PUT",
            "path": "/{integration_id}/agent_photo",
            "path-parameters": {
              "integration_id": "string",
            },
            "response": "unknown",
          },
          "putIntegrationsIntegrationIdBrandLogo": {
            "display-name": "Update Brand Logo",
            "docs": "Upload the brand logo for the hosted integration.",
            "method": "PUT",
            "path": "/{integration_id}/brand_logo",
            "path-parameters": {
              "integration_id": "string",
            },
            "response": "unknown",
          },
          "regenerateIntegrationKey": {
            "display-name": "Regenerate Integration Key",
            "docs": "Replaces the existing integration key with a new randomly generated key.",
            "method": "POST",
            "path": "/{integration_id}/regenerate_key",
            "path-parameters": {
              "integration_id": "string",
            },
            "response": "commons.Integration_2",
          },
          "updateIntegration": {
            "display-name": "Update Integration",
            "docs": "Edit the name and archived status of an integration.",
            "method": "PATCH",
            "path": "/{integration_id}",
            "path-parameters": {
              "integration_id": "string",
            },
            "request": {
              "body": "_InlinedType10",
            },
            "response": "commons.Integration_2",
          },
        },
        "path-parameters": undefined,
      },
      "types": {
        "Integrations": "unknown",
        "Providers": "unknown",
        "_InlinedType10": "unknown",
        "_InlinedType6": {
          "docs": "Branding configuration for the embed.",
          "extends": undefined,
          "properties": {
            "colors": "optional<unknown>",
            "hide_logo": {
              "docs": "Hides the logo.",
              "type": "optional<boolean>",
            },
            "logo": {
              "docs": "Brand logo to be used in the embed.",
              "type": "optional<string>",
            },
          },
        },
        "_InlinedType7": "unknown",
        "_InlinedType8": {
          "docs": "String representation of the current status of the integration.",
          "enum": [
            "active",
            "archived",
          ],
        },
        "_InlinedType9": {
          "docs": "Branding configuration for the embed.",
          "extends": undefined,
          "properties": {
            "colors": "optional<unknown>",
            "hide_logo": {
              "docs": "Hides the logo.",
              "type": "optional<boolean>",
            },
            "logo": {
              "docs": "Brand logo to be used in the embed.",
              "type": "optional<string>",
            },
          },
        },
      },
    },
    "link.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "attachLinkDocument": {
            "display-name": "Upload Document To Link",
            "docs": "Attach a policy document to a Link. If the document can be parsed, select the parsed policy for sharing.",
            "method": "POST",
            "path": "/links/{id}/documents",
            "path-parameters": {
              "id": "string",
            },
          },
          "deleteLink": {
            "display-name": "Delete Link",
            "docs": "Deletes a link.",
            "method": "DELETE",
            "path": "/links/{id}",
            "path-parameters": {
              "id": "string",
            },
          },
          "getIntegrationLinks": {
            "display-name": "List Integration Links",
            "docs": "Retrieves a list of links associated to the requested integration",
            "method": "GET",
            "path": "/integrations/{integration_id}/links",
            "path-parameters": {
              "integration_id": "string",
            },
            "response": "commons.Links",
          },
          "getIntegrationLinksWithPolicies": {
            "display-name": "List Integration Links With Policies",
            "docs": "Retrieves a list of links and selected policies associated to the requested integration",
            "method": "GET",
            "path": "/integrations/{integration_id}/links_with_policies",
            "path-parameters": {
              "integration_id": "string",
            },
            "response": "LinksWithPolicies",
          },
          "getLink": {
            "display-name": "Retrieve link",
            "docs": "Retrieves a Link",
            "method": "GET",
            "path": "/links/{id}",
            "path-parameters": {
              "id": "string",
            },
            "response": "commons.Link",
          },
          "getLinkEvents": {
            "display-name": "List Link Events",
            "docs": "Retrieves a list of events triggered for the requested link",
            "method": "GET",
            "path": "/links/{id}/events",
            "path-parameters": {
              "id": "string",
            },
            "response": "commons.Events",
          },
          "getLinkPolicies": {
            "display-name": "List Link Policies",
            "docs": "Retrieves a list of policies associated with the requested link",
            "method": "GET",
            "path": "/links/{id}/policies",
            "path-parameters": {
              "id": "string",
            },
            "response": "commons.Policies",
          },
          "initializeLinkViaIntegration": {
            "display-name": "Initialize link",
            "docs": "Creates a link and optionally sets metadata and selects a carrier, allowing for seeding initial data before an insured continues the linking process via the embed",
            "method": "POST",
            "path": "/integrations/{integration_id}/links",
            "path-parameters": {
              "integration_id": "string",
            },
            "request": {
              "body": "_InlinedType14",
            },
            "response": "commons.Link",
          },
          "syncLinkManually": {
            "display-name": "Manually Sync Link",
            "docs": "Sync a tracked link with the provider using the stored user credentials",
            "method": "POST",
            "path": "/links/{id}/syncs",
            "path-parameters": {
              "id": "string",
            },
          },
          "updateLinkSettings": {
            "display-name": "Update Link Settings",
            "docs": undefined,
            "method": "PATCH",
            "path": "/links/{id}",
            "path-parameters": {
              "id": "string",
            },
            "request": {
              "body": "_InlinedType13",
            },
            "response": "commons.Link",
          },
        },
        "path-parameters": undefined,
      },
      "types": {
        "LinkWithPolicies": {
          "docs": "Represents the individual connections between Covie and a Policyholder's account with a carrier and wraps the policies retrieved from it that have been made available to the consumer.",
          "extends": [
            "commons.Link_2",
            "_InlinedType11",
          ],
        },
        "LinksWithPolicies": "unknown",
        "_InlinedType11": "unknown",
        "_InlinedType12": {
          "docs": "The frequency of which tracking should be performed. This value is \`never\` when tracking is disabled.",
          "enum": [
            "never",
            "daily",
            "weekly",
            "monthly",
            "on_demand",
          ],
        },
        "_InlinedType13": "unknown",
        "_InlinedType14": "unknown",
      },
    },
    "policy.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "service": {
        "auth": false,
        "base-path": "/policies/{policy_id}",
        "endpoints": {
          "getPoliciesPolicyId": {
            "display-name": "Retrieve Policy",
            "docs": "Retrieve a Policy object that was previously connected via a Link",
            "method": "GET",
            "path": "",
            "response": "Policy_2",
          },
          "getPolicyDocument": {
            "display-name": "Retrieve Policy Document",
            "docs": "Retrieve the contents of a Policy document",
            "method": "GET",
            "path": "/documents/{document_type}",
            "path-parameters": {
              "document_type": "string",
            },
            "response": "FileContents",
          },
          "listPolicyEvents": {
            "display-name": "List Policy Events",
            "docs": "List all events that have been triggered for the selected policy",
            "method": "GET",
            "path": "/events",
            "response": "commons.Events",
          },
        },
        "path-parameters": {
          "policy_id": {
            "docs": "The unique identifier of the policy object being sought.",
            "type": "string",
          },
        },
      },
      "types": {
        "Policy": {
          "docs": "This describes, in high level, the insurance policy record that is provided by a link. This object encapsulates all the necessary details to understand the policy's status, policyholders, and covered persons or properties. ",
          "extends": undefined,
          "properties": {
            "_embedded": {
              "docs": "A container for objects wrapped by the current object.",
              "type": "optional<_InlinedType5>",
            },
            "_links": {
              "docs": "A polymorphic list of externally linked resources related to this policy such as documents or logos for carriers.",
              "type": "optional<_InlinedType4>",
            },
            "cancellation_date": {
              "docs": "The date when the policy is set to be cancelled. This date is provided in ISO-8601 format excluding time.",
              "type": "optional<string>",
            },
            "cancellation_reason": {
              "docs": "The determined reason for the cancellation, such as insured_non_payment or carrier_non_renew or insured_action. This value is null when cancellation is not active or not explicitly indicated by the carrier systems and is not guaranteed to be provided in any circumstance.",
              "type": "optional<_InlinedType2>",
            },
            "carrier": "optional<commons.Carrier>",
            "expiration_date": {
              "docs": "The date when the described policy period ends. This date is provided in ISO-8601 format excluding time.",
              "type": "optional<string>",
            },
            "fingerprint": {
              "docs": "A universally-unique identifier of a policy.",
              "type": "optional<string>",
            },
            "id": {
              "docs": "Unique identifier of a policy record within the application that obtained it.",
              "type": "optional<string>",
            },
            "inception_date": {
              "docs": "The date when the policy becomes in force. This date is provided in ISO-8601 format excluding time.",
              "type": "optional<string>",
            },
            "last_synced_at": {
              "docs": "The date and time when the policy record was last updated. This date and time is provided in ISO-8601 format.",
              "type": "optional<string>",
            },
            "line": {
              "docs": "A string indicating the line of business this policy encompasses.",
              "type": "optional<_InlinedType0>",
            },
            "link_id": {
              "docs": "Unique identifier of the link associated to the policy.",
              "type": "optional<string>",
            },
            "linked_at": {
              "docs": "The date and time which the policy was initially retrieved. This date and time is provided in ISO-8601 format.",
              "type": "optional<string>",
            },
            "locations": "optional<unknown>",
            "masked_number": {
              "docs": "This is a masked version of the policy number provided by the issuing company. This is always provided and available to all customers.",
              "type": "optional<string>",
            },
            "number": {
              "docs": "The full policy number as provided by the issuing company. This is not available to all users and may be null when not active on the account.",
              "type": "optional<string>",
            },
            "object": {
              "docs": "String representing the object’s type. Objects of the same type share the same value.",
              "type": "optional<string>",
            },
            "policyholders": {
              "docs": "A list of insureds, or policyholders assigned to this policy.",
              "type": "optional<list<commons.Policyholder>>",
            },
            "premium": {
              "docs": "An integer indicating the total premium paid for the policy period. This value is null when premium access is not enabled on the customer account or is not able to be determined.",
              "type": "optional<unknown>",
            },
            "status": {
              "docs": "A string representation of the policy's current status.",
              "type": "optional<_InlinedType1>",
            },
            "term_length": "optional<commons.PeriodValue>",
            "vehicles": "optional<unknown>",
          },
        },
        "_InlinedType0": {
          "docs": "A string indicating the line of business this policy encompasses.",
          "enum": [
            "personal_auto",
            "homeowner",
            "renter",
            "motorcycle",
          ],
        },
        "_InlinedType1": {
          "docs": "A string representation of the policy's current status.",
          "enum": [
            "active",
            "expired",
            "pending",
            "cancelled",
          ],
        },
        "_InlinedType2": {
          "docs": "The determined reason for the cancellation, such as insured_non_payment or carrier_non_renew or insured_action. This value is null when cancellation is not active or not explicitly indicated by the carrier systems and is not guaranteed to be provided in any circumstance.",
          "enum": [
            "carrier_non_renew",
            "insured_non_payment",
            "insured_requested",
            "other",
          ],
        },
        "_InlinedType3": {
          "docs": "A link to the logo for the carrier on the policy.",
          "extends": undefined,
          "properties": {
            "href": "optional<unknown>",
          },
        },
        "_InlinedType4": {
          "docs": "A polymorphic list of externally linked resources related to this policy such as documents or logos for carriers.",
          "extends": undefined,
          "properties": {
            "carrier_logo": {
              "docs": "A link to the logo for the carrier on the policy.",
              "type": "optional<_InlinedType3>",
            },
            "documents": {
              "docs": "A list of documents obtained and available for this policy. This list may be empty if no documents are available or if document access is not enabled for your account.",
              "type": "optional<list<commons.DocumentRef>>",
            },
          },
        },
        "_InlinedType5": {
          "docs": "A container for objects wrapped by the current object.",
          "extends": undefined,
          "properties": {
            "missing_fields": {
              "docs": "A list of policy fields that were unable to be processed.",
              "type": "optional<list<unknown>>",
            },
          },
        },
      },
    },
    "webhook.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "service": {
        "auth": false,
        "base-path": "/webhooks",
        "endpoints": {
          "createWebhook": {
            "display-name": "Create Webhook",
            "docs": "Create a new webhook",
            "method": "POST",
            "path": "",
            "request": {
              "body": "_InlinedType15",
            },
          },
          "getWebhook": {
            "display-name": "Get Webhook",
            "docs": "Get the details of a webhook.",
            "method": "GET",
            "path": "/{webhook_id}",
            "path-parameters": {
              "webhook_id": "string",
            },
            "response": "commons.Webhook_2",
          },
          "listWebhookEvents": {
            "display-name": "List Webhook Events",
            "docs": "List the events that have been triggered for a webhook.",
            "method": "GET",
            "path": "/{webhook_id}/events",
            "path-parameters": {
              "webhook_id": "string",
            },
            "response": "commons.Events",
          },
          "listWebhooks": {
            "display-name": "List Webhooks",
            "docs": "List an application's configured webhooks.",
            "method": "GET",
            "path": "",
            "response": "Webhooks",
          },
          "updateWebhook": {
            "display-name": "Update Webhook",
            "docs": "Update a webhook.",
            "method": "PATCH",
            "path": "/{webhook_id}",
            "path-parameters": {
              "webhook_id": "string",
            },
            "request": {
              "body": "_InlinedType16",
            },
            "response": "commons.Webhook_2",
          },
        },
        "path-parameters": undefined,
      },
      "types": {
        "Webhooks": "unknown",
        "_InlinedType15": "unknown",
        "_InlinedType16": "unknown",
      },
    },
  },
}
`;

exports[`open api converter flagright simple 1`] = `
{
  "rootApiFile": {
    "auth": "x-api-key",
    "auth-schemes": {
      "x-api-key": {
        "header": "x-api-key",
        "name": "apiKey",
      },
    },
    "display-name": "Flagright API",
    "headers": {},
    "name": "api",
  },
  "serviceFiles": {
    "__package__.yml": {
      "service": {
        "auth": true,
        "base-path": "",
        "endpoints": {
          "getBusinessUserUserId": {
            "display-name": "Retrieve a Business User",
            "docs": "### GET Business User

\`/business/user\` endpoint allows you to operate on the [Business User entity](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships#user).

Calling \`GET /business/user/{userId}\` will return the entire User payload and rule execution results for the User with the corresponding \`userId\`",
            "method": "GET",
            "path": "/business/users/{userId}",
            "path-parameters": {
              "userId": "string",
            },
            "response": "Business",
          },
          "getConsumerTransaction": {
            "display-name": "Retrieve a Transaction",
            "docs": "### GET Transactions

\`/transactions\` endpoint allows you to operate on the [Transaction entity](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships#transaction).

Calling \`GET /transactions/{transactionId}\` will return the entire transaction payload and rule execution results for the transaction with the corresponding \`transactionId\`",
            "method": "GET",
            "path": "/transactions/{transactionId}",
            "path-parameters": {
              "transactionId": "string",
            },
            "response": "TransactionWithRulesResult",
          },
          "getConsumerUser": {
            "display-name": "Retrieve a Consumer User",
            "docs": "### GET Consumer User

\`/consumer/user\` endpoint allows you to operate on the [Consumer User entity](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships#user).

Calling \`GET /consumer/user/{userId}\` will return the entire user payload and rule execution results for the user with the corresponding \`userId\`",
            "method": "GET",
            "path": "/consumer/users/{userId}",
            "path-parameters": {
              "userId": "string",
            },
            "response": "User",
          },
          "postBusinessUser": {
            "display-name": "Create a Business User",
            "docs": "## POST Business User

\`/business/user\` endpoint allows you to operate on the [Business user entity.](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships#user)

In order to pass the payload of a User to Flagright and verify the User, you will need to call this endpoint with the User payload. Not all fields are mandatory, you will only need to pass in the fields that you have and are relevant for your compliance setup.

### Payload


Each consumer Business entity needs three mandatory fields:

* \`userId\` - Unique identifier for the user
* \`legalEntity\` - Details of the business legal entity (CompanyGeneralDetails, FinancialDetails etc) - only \`legalName\`in \`CompanyGeneralDetails\` is mandatory
* \`createdTimestamp\` - UNIX timestamp in *milliseconds* for when the User is created in your system",
            "method": "POST",
            "path": "/business/users",
            "request": {
              "body": "Business",
            },
          },
          "postBusinessUserEvent": {
            "display-name": "Create a Business User Event",
            "docs": "## POST Business User Events

\`/events/business/user\` endpoint allows you to operate on the Business User Events entity.

User events are created after the initial \`POST /business/users\` call (which creates a user) and are used to:

* Update the STATE and KYC Status of the user, using the \`userStateDetails\` or \`kycStatusDetails\` field
* Update the user details, using the \`updatedBusinessUserAttributes\` field.

> If you have neither of the above two use cases, you do not need to use user events. 

### Payload

Each user event needs three mandatory fields:

* \`timestamp\`- the timestamp of when the event was created or occured in your system
* \`userId\` - The ID of the transaction for which this event is generated. 

In order to make individual events retrievable, you also need to pass in a unique \`eventId\` to the request body.
",
            "method": "POST",
            "path": "/events/business/user",
            "request": {
              "body": "BusinessUserEvent",
            },
          },
          "postConsumerTransaction": {
            "display-name": "Verify a Transaction",
            "docs": "## POST Transactions

\`/transactions\` endpoint allows you to operate on the [Transaction entity.](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships#transaction)

In order to pass the payload of a transaction to Flagright and verify the transaciton, you will need to call this endpoint with the transaction payload. Not all fields are mandatory, you will only need to pass in the fields that you have and are relevant for your compliance setup. 


### Payload

Here are some of the most used payload fields explained (you can find the full payload [schema below](https://docs.flagright.com/docs/flagright-api/87742ed31b30e-verify-a-transaction#request-body) with 1 line descriptions):

* \`type\`: Type of transaction (Ex: \`WITHDRAWAL\`, \`DEPOSIT\`, \`TRANSFER\` etc). 
* \`transactionId\` - Unique Identifier for the transaction. Flagright API will generate a \`transactionId\` if this field is left empty
* \`timestamp\` - UNIX timestamp in *milliseconds* of when the transaction took place
* \`transactionState\` - The state of the transaction, set to \`CREATED\` by default. [More details here](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships-in-the-api#transaction-lifecycle-through-transaction-events)
* \`originUserId\` - Unique identifier (if any) of the user who is sending the money. This user must be created within the Flagright system before using the [create a consumer user](https://docs.flagright.com/docs/flagright-api/18132cd454603-create-a-consumer-user) or [create a business user](https://docs.flagright.com/docs/flagright-api/f651463db29d8-create-a-business-user) endpoint
* \`destinationUserId\` - Unique identifier (if any) of the user who is receiving the money. This user must be created within the Flagright system before using the [create a consumer user](https://docs.flagright.com/docs/flagright-api/18132cd454603-create-a-consumer-user) or [create a business user](https://docs.flagright.com/docs/flagright-api/f651463db29d8-create-a-business-user) endpoint
* \`originAmountDetails\` - Details of the amount being sent from the origin
* \`destinationAmountDetails\` - Details of the amount being received at the destination
* \`originPaymentDetails\` - Payment details (if any) used at the origin (ex: \`CARD\`, \`IBAN\`, \`WALLET\` etc). You can click on the dropdown next to the field in the schema below to view all supported payment types.
* \`originPaymentDetails\` - Payment details (if any) used at the destination (ex: \`CARD\`, \`IBAN\`, \`WALLET\` etc). You can click on the dropdown next to the field in the schema below to view all supported payment types.",
            "method": "POST",
            "path": "/transactions",
            "request": {
              "body": "Transaction",
              "name": "VerifyTransactionRequest",
            },
          },
          "postConsumerUser": {
            "display-name": "Create a Consumer User",
            "docs": "## POST Consumer User

\`/consumer/user\` endpoint allows you to operate on the [Consumer user entity.](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships#user)

In order to pass the payload of a User to Flagright and verify the User, you will need to call this endpoint with the User payload. Not all fields are mandatory, you will only need to pass in the fields that you have and are relevant for your compliance setup.

### Payload

Each consumer User entity needs three mandatory fields:

* \`userId\` - Unique identifier for the user
* \`userDetails\` - Details of the user (name, DOB, country of residence and nationality etc) - only \`name\` is mandatory
* \`createdTimestamp\` - UNIX timestamp in *milliseconds* for when the User is created in your system
",
            "method": "POST",
            "path": "/consumer/users",
            "request": {
              "body": "User",
            },
          },
          "postTransactionEvent": {
            "display-name": "Create a Transaction Event",
            "docs": "## POST Transaction Events

\`/events/transaction\` endpoint allows you to operate on the [Transaction Events entity.](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships#transaction-event)

Transaction events are created after the initial \`POST /transactions\` call (which creates a transaction) and are used to:

* Update the STATE of the transaction, using the \`transactionState\` field and manage the [Transaction Lifecycle](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships#transaction-lifecycle-through-transaction-events)
* Update the transaction details, using the \`updatedTransactionAttributes\` field.

> If you have neither of the above two use cases, you do not need to use transaction events. 

### Payload

Each transaction event needs three mandatory fields:

* \`transactionState\` - STATE of the transaction -> value is set to \`CREATED\` after \`POST /transactions\` call
* \`timestamp\`- the timestamp of when the event was created or occured in your system
* \`transactionId\` - The ID of the transaction for which this event is generated. 

In order to make individual events retrievable, you also need to pass in a unique \`eventId\` to the request body.
",
            "method": "POST",
            "path": "/events/transaction",
            "request": {
              "body": "TransactionEvent",
            },
          },
          "postUserEvent": {
            "display-name": "Create a Consumer User Event",
            "docs": "## POST Consumer User Events

\`/events/consumer/user\` endpoint allows you to operate on the Consumer User Events entity.

User events are created after the initial \`POST /consumer/users\` call (which creates a user) and are used to:

* Update the STATE and KYC Status of the user, using the \`userStateDetails\` or \`kycStatusDetails\` field
* Update the user details, using the \`updatedConsumerUserAttributes\` field.

> If you have neither of the above two use cases, you do not need to use user events. 

### Payload

Each user event needs three mandatory fields:

* \`timestamp\`- the timestamp of when the event was created or occured in your system
* \`userId\` - The ID of the transaction for which this event is generated. 

In order to make individual events retrievable, you also need to pass in a unique \`eventId\` to the request body.
",
            "method": "POST",
            "path": "/events/consumer/user",
            "request": {
              "body": "ConsumerUserEvent",
            },
          },
        },
        "path-parameters": undefined,
      },
      "types": {
        "ACHDetails": {
          "docs": "Model for ACH payment method",
          "extends": undefined,
          "properties": {
            "accountNumber": {
              "docs": "Bank account number of the individual",
              "type": "optional<string>",
            },
            "bankAddress": "optional<Address>",
            "bankName": {
              "docs": "Name of the bank",
              "type": "optional<string>",
            },
            "beneficiaryName": {
              "docs": "Beneficiary name of the account",
              "type": "optional<string>",
            },
            "method": "ACHPaymentMethod",
            "name": {
              "docs": "Name of the account holder",
              "type": "optional<string>",
            },
            "routingNumber": {
              "docs": "Routing number of the bank",
              "type": "optional<string>",
            },
          },
        },
        "ACHPaymentMethod": {
          "docs": "Classify the method of payment as "ACH" for ACHDetails",
          "enum": [
            "ACH",
          ],
        },
        "Address": {
          "docs": "Model for standardized address",
          "extends": undefined,
          "properties": {
            "addressLines": {
              "docs": "Address lines of the user's residence address",
              "type": "list<unknown>",
            },
            "city": {
              "docs": "City of the user's residence address",
              "type": "string",
            },
            "country": {
              "docs": "User's country of residence",
              "type": "string",
            },
            "postcode": {
              "docs": "Post code of the user's residence address",
              "type": "string",
            },
            "state": {
              "docs": "State of the user's residence address",
              "type": "optional<string>",
            },
            "tags": {
              "docs": "Additional information that can be added via tags",
              "type": "optional<list<Tag>>",
            },
          },
        },
        "Amount": {
          "docs": "Model for amount",
          "extends": undefined,
          "properties": {
            "amountCurrency": "CurrencyCode",
            "amountValue": {
              "docs": "Numerical value of the transaction",
              "type": "double",
            },
          },
        },
        "Business": "unknown",
        "BusinessBase": {
          "docs": "Model for a business user base fields",
          "extends": undefined,
          "properties": {
            "createdTimestamp": {
              "docs": "Timestamp when the user was created",
              "type": "double",
            },
            "legalEntity": "LegalEntity",
            "riskLevel": "optional<RiskLevel>",
            "userId": {
              "docs": "Unique user ID for the user",
              "type": "string",
            },
          },
        },
        "BusinessOptional": {
          "docs": "Model for a business user - optional fields",
          "extends": undefined,
          "properties": {
            "allowedPaymentMethods": "optional<unknown>",
            "directors": {
              "docs": "Director(s) of the company. Must be at least one",
              "type": "optional<list<Person>>",
            },
            "kycStatusDetails": "optional<KYCStatusDetails>",
            "mccDetails": "optional<MCCDetails>",
            "riskLevel": "optional<RiskLevel>",
            "shareHolders": {
              "docs": "Shareholders (beneficiaries) of the company that hold at least 25% ownership. Can be another company or an individual",
              "type": "optional<list<Person>>",
            },
            "tags": {
              "docs": "Additional information that can be added via tags",
              "type": "optional<list<Tag>>",
            },
            "transactionLimits": "optional<TransactionLimits>",
            "userStateDetails": "optional<UserStateDetails>",
          },
        },
        "BusinessUserEvent": {
          "docs": "Model for business user-related events",
          "extends": undefined,
          "properties": {
            "eventDescription": {
              "docs": "Event description",
              "type": "optional<string>",
            },
            "eventId": {
              "docs": "Unique event ID",
              "type": "optional<string>",
            },
            "reason": {
              "docs": "Reason for the event or a state change",
              "type": "optional<string>",
            },
            "timestamp": {
              "docs": "Timestamp of the event",
              "type": "double",
            },
            "updatedBusinessUserAttributes": "optional<BusinessOptional>",
            "userId": {
              "docs": "Transaction ID the event pertains to",
              "type": "string",
            },
          },
        },
        "BusinessUsersResponse": {
          "docs": "Model for business user risk score response",
          "extends": undefined,
          "properties": {
            "userId": {
              "docs": "user ID the risk score pertains to",
              "type": "string",
            },
            "userRiskScoreDetails": "optional<RiskScoringResult>",
          },
        },
        "CardDetails": {
          "docs": "Model for credit or debit card details",
          "extends": undefined,
          "properties": {
            "3dsDone": {
              "docs": "Whether 3ds was successfully enforced for the transaction",
              "type": "optional<boolean>",
            },
            "cardAuthenticated": {
              "docs": "Authentication of Card",
              "type": "optional<boolean>",
            },
            "cardBrand": {
              "docs": "Brand of Card",
              "type": "optional<_InlinedType0>",
            },
            "cardExpiry": "optional<CardExpiry>",
            "cardFingerprint": {
              "docs": "Unique card fingerprint that helps identify a specific card without having to use explicit card number. This is likely available at your card payment scheme provider",
              "type": "optional<string>",
            },
            "cardFunding": {
              "docs": "Funding of Card",
              "type": "optional<_InlinedType1>",
            },
            "cardIssuedCountry": "optional<CountryCode>",
            "cardLast4Digits": {
              "docs": "Last 4 digits of Card",
              "type": "optional<string>",
            },
            "cardType": "optional<unknown>",
            "merchantDetails": "optional<CardMerchantDetails>",
            "method": "CardPaymentMethod",
            "nameOnCard": "optional<ConsumerName>",
            "paymentChannel": "optional<unknown>",
            "transactionReferenceField": {
              "docs": "Reference for the transaction",
              "type": "optional<string>",
            },
          },
        },
        "CardExpiry": "unknown",
        "CardMerchantDetails": "unknown",
        "CardPaymentMethod": {
          "docs": "Classify the method of payment as "Card" for CardDetails
",
          "enum": [
            "CARD",
          ],
        },
        "CaseCreationType": "unknown",
        "CheckDetails": "unknown",
        "CheckPaymentMethod": {
          "docs": "Classify the method of payment as "CHECK" for CheckDetails",
          "enum": [
            "CHECK",
          ],
        },
        "CompanyFinancialDetails": {
          "docs": "Model for business user company financial details",
          "extends": undefined,
          "properties": {
            "expectedTransactionAmountPerMonth": "optional<Amount>",
            "expectedTurnoverPerMonth": "optional<Amount>",
            "tags": {
              "docs": "Additional information that can be added via tags",
              "type": "optional<list<Tag>>",
            },
          },
        },
        "CompanyGeneralDetails": {
          "docs": "Model for business user company general details",
          "extends": undefined,
          "properties": {
            "businessIndustry": {
              "docs": "The industry the business operates in for a business customer",
              "type": "optional<list<unknown>>",
            },
            "legalName": {
              "docs": "Legal name of the company",
              "type": "string",
            },
            "mainProductsServicesSold": {
              "docs": "The key products and services provided by the company",
              "type": "optional<list<unknown>>",
            },
            "tags": {
              "docs": "Additional information that can be added via tags",
              "type": "optional<list<Tag>>",
            },
          },
        },
        "CompanyRegistrationDetails": {
          "docs": "Model for business user company registration details",
          "extends": undefined,
          "properties": {
            "dateOfRegistration": "optional<unknown>",
            "legalEntityType": {
              "docs": "Type of legal entity. Ex: Limited Liability",
              "type": "optional<string>",
            },
            "registrationCountry": "CountryCode",
            "registrationIdentifier": {
              "docs": "Commercial registry registration number for the company in its registration country",
              "type": "string",
            },
            "tags": {
              "docs": "Additional information that can be added via tags",
              "type": "optional<list<Tag>>",
            },
            "taxIdentifier": {
              "docs": "Tax ID number of the registered entity",
              "type": "optional<string>",
            },
          },
        },
        "ConsumerName": {
          "docs": "Model for a generic consumer name",
          "extends": undefined,
          "properties": {
            "firstName": {
              "docs": "First name of the user",
              "type": "string",
            },
            "lastName": {
              "docs": "Last name of the user",
              "type": "optional<string>",
            },
            "middleName": {
              "docs": "Middle name of the user",
              "type": "optional<string>",
            },
          },
        },
        "ConsumerUserEvent": {
          "docs": "Model for consumer user-related events",
          "extends": undefined,
          "properties": {
            "eventDescription": {
              "docs": "Event description",
              "type": "optional<string>",
            },
            "eventId": {
              "docs": "Unique event ID",
              "type": "optional<string>",
            },
            "reason": {
              "docs": "Reason for the event or a state change",
              "type": "optional<string>",
            },
            "timestamp": {
              "docs": "Timestamp of the event",
              "type": "double",
            },
            "updatedConsumerUserAttributes": "optional<UserOptional>",
            "userId": {
              "docs": "Transaction ID the event pertains to",
              "type": "string",
            },
          },
        },
        "ConsumerUsersResponse": {
          "docs": "Model for consumer user risk score response",
          "extends": undefined,
          "properties": {
            "userId": {
              "docs": "user ID the risk score pertains to",
              "type": "string",
            },
            "userRiskScoreDetails": "optional<RiskScoringResult>",
          },
        },
        "ContactDetails": {
          "docs": "Model for business user contact information details",
          "extends": undefined,
          "properties": {
            "addresses": {
              "docs": "Address(es) of the company",
              "type": "optional<list<Address>>",
            },
            "contactNumbers": {
              "docs": "Phone numbers to contact a given business customer",
              "type": "optional<list<unknown>>",
            },
            "emailIds": {
              "docs": "Email addresses of the contacts for a given business customer",
              "type": "optional<list<unknown>>",
            },
            "faxNumbers": {
              "docs": "Fax numbers to contact a business customer",
              "type": "optional<list<unknown>>",
            },
            "websites": {
              "docs": "Website of the company",
              "type": "optional<list<unknown>>",
            },
          },
        },
        "CountryCode": "unknown",
        "CurrencyCode": "unknown",
        "DeviceData": {
          "docs": "Model for device data",
          "extends": undefined,
          "properties": {
            "appVersion": {
              "docs": "The version of the app your user is using on their device at a given timestamp for an event or transaction",
              "type": "optional<string>",
            },
            "batteryLevel": {
              "docs": "Battery level of the device used for a transaction or event at a given timestamp",
              "type": "optional<double>",
            },
            "deviceIdentifier": {
              "docs": "Device identifier number",
              "type": "optional<string>",
            },
            "deviceLatitude": {
              "docs": "Device latitude at a give timestamp for an event or transaction",
              "type": "optional<double>",
            },
            "deviceLongitude": {
              "docs": "Device longitude at a give timestamp for an event or transaction",
              "type": "optional<double>",
            },
            "deviceMaker": {
              "docs": "The maker of the device at a given timestamp for an event or transaction",
              "type": "optional<string>",
            },
            "deviceModel": {
              "docs": "The model of the device at a given timestamp for an event or transaction",
              "type": "optional<string>",
            },
            "deviceYear": {
              "docs": "The year the device was manufactured at a given timestamp for an event or transaction",
              "type": "optional<string>",
            },
            "ipAddress": {
              "docs": "IP address of the device at a given timestamp for an event or transaction",
              "type": "optional<string>",
            },
            "operatingSystem": {
              "docs": "Operating system of the device at a given timestamp for an event or transaction",
              "type": "optional<string>",
            },
            "vpnUsed": {
              "docs": "Whether VPN was used at a given timestamp for an event or transaction",
              "type": "optional<boolean>",
            },
          },
        },
        "ExecutedRulesResult": {
          "docs": "Model for list of executed rules",
          "extends": undefined,
          "properties": {
            "ruleAction": "RuleAction",
            "ruleDescription": {
              "docs": "Description of the rule",
              "type": "string",
            },
            "ruleHit": "unknown",
            "ruleHitMeta": "optional<RuleHitMeta>",
            "ruleId": {
              "docs": "Unique rule identifier",
              "type": "string",
            },
            "ruleInstanceId": "unknown",
            "ruleName": {
              "docs": "Name of the rule",
              "type": "string",
            },
          },
        },
        "FalsePositiveDetails": "unknown",
        "GeneralBankAccountPaymentMethod": {
          "docs": "Classify the method of payment as "GENERIC_BANK_ACCOUNT" for GenericBankAccountDetails",
          "enum": [
            "GENERIC_BANK_ACCOUNT",
          ],
        },
        "GenericBankAccountDetails": {
          "docs": "Model for any generic bank account",
          "extends": undefined,
          "properties": {
            "accountNumber": {
              "docs": "Bank account number",
              "type": "optional<string>",
            },
            "accountType": {
              "docs": "Bank account type. E.g. Checking, Savings etc.",
              "type": "optional<string>",
            },
            "bankAddress": "optional<Address>",
            "bankCode": {
              "docs": "Unique identifier of the bank. In some countries, this can be the same as the bank's SWIFT code",
              "type": "optional<string>",
            },
            "bankName": {
              "docs": "Name of the bank",
              "type": "optional<string>",
            },
            "method": "GeneralBankAccountPaymentMethod",
            "name": {
              "docs": "Name of the account holder",
              "type": "optional<string>",
            },
            "paymentChannel": "optional<unknown>",
            "specialInstructions": {
              "docs": "Special instructions to be specified if any",
              "type": "optional<string>",
            },
          },
        },
        "HitRulesDetails": {
          "docs": "Model for list of hit rules",
          "extends": undefined,
          "properties": {
            "ruleAction": "RuleAction",
            "ruleDescription": {
              "docs": "Description of the rule",
              "type": "string",
            },
            "ruleHitMeta": "optional<RuleHitMeta>",
            "ruleId": {
              "docs": "Unique rule identifier",
              "type": "string",
            },
            "ruleInstanceId": "unknown",
            "ruleName": {
              "docs": "Name of the rule",
              "type": "string",
            },
          },
        },
        "IBANDetails": {
          "docs": "Standardized model for Bank Details",
          "extends": undefined,
          "properties": {
            "BIC": {
              "docs": "Identifier for the bank. Can be routing number, BIK number, SWIFT code, BIC number etc.",
              "type": "optional<string>",
            },
            "IBAN": {
              "docs": "Account number of the user. Can be account number, IBAN number etc.",
              "type": "optional<string>",
            },
            "bankAddress": "optional<Address>",
            "bankBranchCode": {
              "docs": "Branch code of the bank. In some countries, this can be the same as the bank's SWIFT code",
              "type": "optional<string>",
            },
            "bankName": {
              "docs": "Name of the bank",
              "type": "optional<string>",
            },
            "method": "IBANPaymentMethod",
            "name": {
              "docs": "Name of the bank account holder",
              "type": "optional<string>",
            },
            "paymentChannel": "optional<unknown>",
            "tags": "optional<Tag>",
          },
        },
        "IBANPaymentMethod": {
          "docs": "Classify the method of payment as "IBAN" for IBANDetails
",
          "enum": [
            "IBAN",
          ],
        },
        "KYCStatus": "unknown",
        "KYCStatusDetails": "unknown",
        "LegalDocument": {
          "docs": "LegalDocument model generalizes User's identity document type (ex: Passport)",
          "extends": undefined,
          "properties": {
            "documentExpirationDate": {
              "docs": "User's identity document expiration date (UNIX timestamp in milliseconds)",
              "type": "optional<double>",
            },
            "documentIssuedCountry": "CountryCode",
            "documentIssuedDate": {
              "docs": "User's identity document issuance date (UNIX timestamp in milliseconds)",
              "type": "optional<double>",
            },
            "documentNumber": {
              "docs": "User's unique identity document number such as passport number",
              "type": "string",
            },
            "documentType": {
              "docs": "User's identity document type such as passport, national ID etc.",
              "type": "string",
            },
            "nameOnDocument": "optional<ConsumerName>",
            "tags": {
              "docs": "Additional information that can be added via tags",
              "type": "optional<list<Tag>>",
            },
          },
        },
        "LegalEntity": {
          "docs": "Model for business user legal entity details",
          "extends": undefined,
          "properties": {
            "companyFinancialDetails": "optional<CompanyFinancialDetails>",
            "companyGeneralDetails": "CompanyGeneralDetails",
            "companyRegistrationDetails": "optional<CompanyRegistrationDetails>",
            "contactDetails": "optional<ContactDetails>",
            "reasonForAccountOpening": {
              "docs": "Reason for opening the account at financial institution",
              "type": "optional<list<unknown>>",
            },
          },
        },
        "MCCDetails": "unknown",
        "MpesaDetails": {
          "docs": "Model for Mpesa payment method",
          "extends": undefined,
          "properties": {
            "businessShortCode": {
              "docs": "Business code",
              "type": "string",
            },
            "method": "MpesaPaymentMethod",
            "phoneNumber": {
              "docs": "Contact Number of the account holder",
              "type": "string",
            },
            "transactionType": {
              "docs": "Type of transaction",
              "type": "_InlinedType2",
            },
          },
        },
        "MpesaPaymentMethod": {
          "docs": "Classify the method of payment as "Mpesa" for MpesaDetails",
          "enum": [
            "MPESA",
          ],
        },
        "PEPStatus": "unknown",
        "PaymentMethods": "unknown",
        "Person": {
          "docs": "Model for a generic individual - different from User model by not having userId field",
          "extends": undefined,
          "properties": {
            "contactDetails": "optional<ContactDetails>",
            "generalDetails": "UserDetails",
            "legalDocuments": {
              "docs": "User's legal identity documents - See Document Model for details",
              "type": "optional<list<LegalDocument>>",
            },
            "pepStatus": "optional<unknown>",
            "tags": {
              "docs": "Additional information that can be added via tags",
              "type": "optional<list<Tag>>",
            },
          },
        },
        "RiskLevel": "unknown",
        "RiskScoringResult": {
          "docs": "Model for results from Risk Scoring",
          "extends": undefined,
          "properties": {
            "actionRiskScore": {
              "docs": "Quantified action risk score",
              "type": "double",
            },
            "dynamicRiskScore": {
              "docs": "Quantified dynamic risk score",
              "type": "optional<double>",
            },
            "kycRiskScore": {
              "docs": "Quantified KYC risk score",
              "type": "double",
            },
          },
        },
        "RuleAction": {
          "docs": "Model for rule action if a rule is hit. This is returned in the API response and can be configured on Console by operational accounts like a Compliance Analyst",
          "enum": [
            "ALLOW",
            "FLAG",
            "BLOCK",
            "SUSPEND",
          ],
        },
        "RuleHitDirection": "unknown",
        "RuleHitMeta": {
          "docs": "Details of rule execution, for internal purposes only",
          "extends": undefined,
          "properties": {
            "caseCreationType": "optional<CaseCreationType>",
            "falsePositiveDetails": "optional<FalsePositiveDetails>",
            "hitDirections": "optional<unknown>",
          },
        },
        "RulesResults": "unknown",
        "SWIFTDetails": {
          "docs": "Model for SWIFT payment method",
          "extends": undefined,
          "properties": {
            "accountNumber": {
              "docs": "Account number",
              "type": "optional<string>",
            },
            "accountType": {
              "docs": "Account type. E.g. Checking, Savings etc.",
              "type": "optional<string>",
            },
            "bankAddress": "optional<Address>",
            "bankName": {
              "docs": "Name of the bank",
              "type": "optional<string>",
            },
            "method": "SWIFTPaymentMethod",
            "name": {
              "docs": "Name of the account holder",
              "type": "optional<string>",
            },
            "specialInstructions": {
              "docs": "Special instructions if any",
              "type": "optional<string>",
            },
            "swiftCode": {
              "docs": "SWIFT code of the financial institution",
              "type": "optional<string>",
            },
          },
        },
        "SWIFTPaymentMethod": {
          "docs": "Classify the method of payment as "SWIFT" for SWIFTDetails",
          "enum": [
            "SWIFT",
          ],
        },
        "Tag": {
          "docs": "Generic key-value pair model to append a custom variable being sent to Flagright API",
          "extends": undefined,
          "properties": {
            "key": {
              "docs": "Key value when you are creating a custom variable",
              "type": "string",
            },
            "value": {
              "docs": "Value for a given key when you are creating a custom variable",
              "type": "string",
            },
          },
        },
        "Transaction": "unknown",
        "TransactionAmountDetails": {
          "docs": "Model for transaction amount details",
          "extends": undefined,
          "properties": {
            "country": "optional<CountryCode>",
            "transactionAmount": {
              "docs": "Amount of the transaction",
              "type": "double",
            },
            "transactionCurrency": "CurrencyCode",
          },
        },
        "TransactionAmountLimit": "unknown",
        "TransactionBase": {
          "docs": "Model for transaction base Payload",
          "extends": undefined,
          "properties": {
            "destinationUserId": {
              "docs": "UserId for transaction's destination. In other words, where the value is being transferred to.",
              "type": "optional<string>",
            },
            "originUserId": {
              "docs": "UserId for where the transaction originates from",
              "type": "optional<string>",
            },
            "timestamp": {
              "docs": "Timestamp of when transaction took place",
              "type": "double",
            },
            "transactionId": {
              "docs": "Unique transaction identifier",
              "type": "string",
            },
            "type": "optional<TransactionType>",
          },
        },
        "TransactionCountLimit": "unknown",
        "TransactionEvent": {
          "docs": "Model for transaction-related events",
          "extends": undefined,
          "properties": {
            "eventDescription": {
              "docs": "Event description",
              "type": "optional<string>",
            },
            "eventId": {
              "docs": "Unique event ID",
              "type": "optional<string>",
            },
            "metaData": "optional<DeviceData>",
            "reason": {
              "docs": "Reason for the event or a state change",
              "type": "optional<string>",
            },
            "timestamp": {
              "docs": "Timestamp of the event",
              "type": "double",
            },
            "transactionId": {
              "docs": "Transaction ID the event pertains to",
              "type": "string",
            },
            "transactionState": "TransactionState",
            "updatedTransactionAttributes": "optional<TransactionUpdatable>",
          },
        },
        "TransactionEventMonitoringResult": "unknown",
        "TransactionLimit": "unknown",
        "TransactionLimits": {
          "docs": "Model for transaction limits for a given user",
          "extends": undefined,
          "properties": {
            "maximumDailyTransactionLimit": "optional<Amount>",
            "maximumMonthlyTransactionLimit": "optional<Amount>",
            "maximumQuarterlyTransactionLimit": "optional<Amount>",
            "maximumTransactionLimit": "optional<Amount>",
            "maximumWeeklyTransactionLimit": "optional<Amount>",
            "maximumYearlyTransactionLimit": "optional<Amount>",
            "paymentMethodLimits": "optional<unknown>",
          },
        },
        "TransactionMonitoringResult": "unknown",
        "TransactionState": {
          "docs": "Model for transaction states. E.g. Processing, Refunded, Successful etc.",
          "enum": [
            "CREATED",
            "PROCESSING",
            "SENT",
            "EXPIRED",
            "DECLINED",
            "SUSPENDED",
            "REFUNDED",
            "SUCCESSFUL",
          ],
        },
        "TransactionType": "unknown",
        "TransactionUpdatable": {
          "docs": "Model for transaction additional payload",
          "extends": undefined,
          "properties": {
            "destinationAmountDetails": "optional<TransactionAmountDetails>",
            "destinationPaymentDetails": {
              "docs": "Payment details of the destination. It can be a bank account number, wallet ID, card fingerprint etc.",
              "type": "optional<unknown>",
            },
            "deviceData": "optional<DeviceData>",
            "originAmountDetails": "optional<TransactionAmountDetails>",
            "originPaymentDetails": {
              "docs": "Payment details of the origin. It can be a bank account number, wallet ID, card fingerprint etc.",
              "type": "optional<unknown>",
            },
            "productType": {
              "docs": "Type of produce being used by the consumer (ex wallets, payments etc)",
              "type": "optional<string>",
            },
            "promotionCodeUsed": {
              "docs": "Whether a promotion code was used or not the transaction",
              "type": "optional<boolean>",
            },
            "reference": {
              "docs": "Reference field for the transaction indicating the purpose of the transaction etc.",
              "type": "optional<string>",
            },
            "relatedTransactionIds": {
              "docs": "IDs of transactions related to this transaction. Ex: refund, split bills",
              "type": "optional<list<unknown>>",
            },
            "tags": {
              "docs": "Additional information that can be added via tags",
              "type": "optional<list<Tag>>",
            },
            "transactionState": "optional<TransactionState>",
          },
        },
        "TransactionWithRulesResult": {
          "docs": "Model for transaction payload with rules result",
          "extends": [
            "Transaction",
            "_InlinedType4",
          ],
        },
        "UPIDetails": {
          "docs": "Model for UPI payment method",
          "extends": undefined,
          "properties": {
            "bankProvider": {
              "docs": "Bank provider name",
              "type": "optional<string>",
            },
            "interfaceProvider": {
              "docs": "Interface provider name",
              "type": "optional<string>",
            },
            "method": "UPIPaymentMethod",
            "name": {
              "docs": "Name of the account holder",
              "type": "optional<string>",
            },
            "upiID": {
              "docs": "UPI Id number",
              "type": "string",
            },
          },
        },
        "UPIPaymentMethod": {
          "docs": "Classify the method of payment as "UPI" for UPIDetails",
          "enum": [
            "UPI",
          ],
        },
        "User": {
          "docs": "Model for User details",
          "extends": [
            "UserBase",
            "UserOptional",
          ],
        },
        "UserBase": {
          "docs": "Model for User details",
          "extends": undefined,
          "properties": {
            "createdTimestamp": {
              "docs": "Timestamp when userId is created",
              "type": "double",
            },
            "userDetails": "optional<UserDetails>",
            "userId": {
              "docs": "Unique user ID",
              "type": "string",
            },
          },
        },
        "UserDetails": {
          "docs": "Model for consumer user personal details",
          "extends": undefined,
          "properties": {
            "countryOfNationality": "optional<CountryCode>",
            "countryOfResidence": "optional<CountryCode>",
            "dateOfBirth": {
              "docs": "Date of birth of the user (YYYY-MM-DD)",
              "type": "optional<string>",
            },
            "name": "ConsumerName",
          },
        },
        "UserOptional": {
          "docs": "Model for User details",
          "extends": undefined,
          "properties": {
            "contactDetails": "optional<ContactDetails>",
            "kycStatusDetails": "optional<KYCStatusDetails>",
            "legalDocuments": {
              "docs": "User's legal identity documents - See Document Model for details",
              "type": "optional<list<LegalDocument>>",
            },
            "pepStatus": "optional<unknown>",
            "reasonForAccountOpening": "optional<unknown>",
            "riskLevel": "optional<RiskLevel>",
            "tags": {
              "docs": "Additional information that can be added via tags",
              "type": "optional<list<Tag>>",
            },
            "transactionLimits": "optional<TransactionLimits>",
            "userStateDetails": "optional<UserStateDetails>",
          },
        },
        "UserState": "unknown",
        "UserStateDetails": "unknown",
        "WalletDetails": {
          "docs": "Standardized model for a Generic wallet transaction",
          "extends": undefined,
          "properties": {
            "method": "WalletPaymentMethod",
            "name": {
              "docs": "Name of the account holder for a specific wallet",
              "type": "optional<string>",
            },
            "paymentChannel": {
              "docs": "Payment Channel used through wallet",
              "type": "optional<string>",
            },
            "tags": "optional<Tag>",
            "walletId": {
              "docs": "Unique ID of the wallet",
              "type": "optional<string>",
            },
            "walletPhoneNumber": {
              "docs": "Phone number associated with the wallet, if any",
              "type": "optional<string>",
            },
            "walletType": {
              "docs": "Wallet type if there are various types of wallets belonging to the same user. E.g. Checking, savings, vault, different currency wallets etc.",
              "type": "string",
            },
          },
        },
        "WalletPaymentMethod": {
          "docs": "Classify the method of payment as "Wallet" for WalletDetails",
          "enum": [
            "WALLET",
          ],
        },
        "_InlinedType0": {
          "docs": "Brand of Card",
          "enum": [
            "VISA",
            "MASTERCARD",
            "AMERICAN_EXPRESS",
            "DISCOVER",
            "UNIONPAY",
            "RUPAY",
            "JCB",
          ],
        },
        "_InlinedType1": {
          "docs": "Funding of Card",
          "enum": [
            "CREDIT",
            "DEBIT",
            "PREPAID",
          ],
        },
        "_InlinedType2": {
          "docs": "Type of transaction",
          "enum": [
            "CustomerPayBillOnline",
            "CustomerBuyGoodsOnline",
            "SalaryPayment",
            "BusinessPayment",
            "PromotionPayment",
          ],
        },
        "_InlinedType3": {
          "docs": "Model to convey the results of transaction monitoring",
          "extends": undefined,
          "properties": {
            "transactionId": {
              "docs": "Transaction ID that the results pertain to",
              "type": "string",
            },
          },
        },
        "_InlinedType4": "unknown",
        "_InlinedType5": {
          "docs": "Model to convey the results of transaction monitoring",
          "extends": undefined,
          "properties": {
            "eventId": "unknown",
            "transaction": "Transaction",
          },
        },
      },
    },
    "commons.yml": {},
  },
}
`;

exports[`open api converter partnerstack simple 1`] = `
{
  "rootApiFile": {
    "auth": undefined,
    "auth-schemes": undefined,
    "display-name": "PartnerStack API",
    "headers": {},
    "name": "api",
  },
  "serviceFiles": {
    "__package__.yml": {},
    "actions.yml": {
      "service": {
        "auth": false,
        "base-path": "/v2/actions",
        "endpoints": {
          "": {
            "display-name": "List all actions",
            "docs": "Returns a list of your actions. The actions are returned sorted by creation date by default, with the most recent actions appearing first.",
            "method": "GET",
            "path": "",
            "response": "unknown",
          },
          "_unnamedOperation10": {
            "display-name": "Archive an action",
            "docs": "Archives an action. Any associated rewards or drip rewards will be archived as well.",
            "method": "DELETE",
            "path": "/{action_key}",
            "path-parameters": {
              "action_key": "string",
            },
            "response": "unknown",
          },
          "_unnamedOperation9": {
            "display-name": "Record action",
            "docs": "Records a new action taken by a given partner or customer, and the number of times that action was performed.",
            "method": "POST",
            "path": "",
            "request": {
              "body": "_InlinedType59",
            },
            "response": "unknown",
          },
        },
        "path-parameters": undefined,
      },
      "types": {
        "_InlinedType53": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": {
              "docs": "Immutable Unix timestamp in milliseconds taken at time of creation",
              "type": "optional<integer>",
            },
            "key": {
              "docs": "A unique identifier used to reference the object",
              "type": "optional<string>",
            },
            "updated_at": {
              "docs": "Unix timestamp in milliseconds taken at time of last update",
              "type": "optional<integer>",
            },
          },
        },
        "_InlinedType54": {
          "docs": "An **Action** represents a specific action a partner or customer took on your platform",
          "extends": undefined,
          "properties": {
            "archived": {
              "docs": "The boolean flag which determines if the action is archived or not.",
              "type": "optional<boolean>",
            },
            "company": {
              "docs": "Base schema representation of a company",
              "type": "optional<_InlinedType55>",
            },
            "customer": "optional<unknown>",
            "partnership_key": {
              "docs": "Unique key of this partnership.",
              "type": "optional<string>",
            },
            "type": {
              "docs": "The type of action the partner or customer performed",
              "type": "optional<string>",
            },
            "value": {
              "docs": "The number of times the action was performed",
              "type": "optional<integer>",
            },
          },
        },
        "_InlinedType56": {
          "docs": "**Actions** represent a specific action a partner or customer took on your platform",
          "extends": undefined,
          "properties": {
            "external_key": {
              "docs": "The external key of the action record in PartnerStack",
              "type": "optional<string>",
            },
            "target_key": {
              "docs": "The identifier of the target specified in \`target_type\`. For a customer, this is the customer key. For a partnership, it is their partner key.",
              "type": "optional<string>",
            },
            "target_type": {
              "docs": "Whether to record an action under a partnership or customer",
              "type": "optional<_InlinedType57>",
            },
            "type": {
              "docs": "The type of action the partner or customer performed",
              "type": "optional<string>",
            },
            "value": {
              "docs": "The number of times the action was performed",
              "type": "optional<integer>",
            },
          },
        },
        "_InlinedType58": "unknown",
        "_InlinedType59": "unknown",
        "_InlinedType60": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": {
              "docs": "Immutable Unix timestamp in milliseconds taken at time of creation",
              "type": "optional<integer>",
            },
            "key": {
              "docs": "A unique identifier used to reference the object",
              "type": "optional<string>",
            },
            "updated_at": {
              "docs": "Unix timestamp in milliseconds taken at time of last update",
              "type": "optional<integer>",
            },
          },
        },
        "_InlinedType61": {
          "docs": "**Actions** represent a specific action a partner or customer took on your platform",
          "extends": undefined,
          "properties": {
            "external_key": {
              "docs": "The external key of the action record in PartnerStack",
              "type": "optional<string>",
            },
            "target_key": {
              "docs": "The identifier of the target specified in \`target_type\`. For a customer, this is the customer key. For a partnership, it is their partner key.",
              "type": "optional<string>",
            },
            "target_type": {
              "docs": "Whether to record an action under a partnership or customer",
              "type": "optional<_InlinedType62>",
            },
            "type": {
              "docs": "The type of action the partner or customer performed",
              "type": "optional<string>",
            },
            "value": {
              "docs": "The number of times the action was performed",
              "type": "optional<integer>",
            },
          },
        },
      },
    },
    "applications.yml": {
      "service": {
        "auth": false,
        "base-path": "/v2/applications",
        "endpoints": {
          "": {
            "display-name": "Bulk Decision Applications",
            "docs": "Update the decision of the given Applications provided",
            "method": "PATCH",
            "path": "/decision",
            "request": {
              "body": "_InlinedType63",
            },
            "response": "unknown",
          },
          "_unnamedOperation11": {
            "display-name": "Decision an Application",
            "docs": "Update the decision of the given Application",
            "method": "PATCH",
            "path": "/{application_key}/decision",
            "path-parameters": {
              "application_key": "string",
            },
            "request": {
              "body": "_InlinedType66",
            },
            "response": "unknown",
          },
        },
        "path-parameters": undefined,
      },
      "types": {
        "_InlinedType63": "unknown",
        "_InlinedType64": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": {
              "docs": "Immutable Unix timestamp in milliseconds taken at time of creation",
              "type": "optional<integer>",
            },
            "key": {
              "docs": "A unique identifier used to reference the object",
              "type": "optional<string>",
            },
            "updated_at": {
              "docs": "Unix timestamp in milliseconds taken at time of last update",
              "type": "optional<integer>",
            },
          },
        },
        "_InlinedType65": {
          "docs": "Applications represent partnerstack partners attempting to join vendor programs via public form",
          "type": "map<string, unknown>",
        },
        "_InlinedType66": "unknown",
        "_InlinedType67": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": {
              "docs": "Immutable Unix timestamp in milliseconds taken at time of creation",
              "type": "optional<integer>",
            },
            "key": {
              "docs": "A unique identifier used to reference the object",
              "type": "optional<string>",
            },
            "updated_at": {
              "docs": "Unix timestamp in milliseconds taken at time of last update",
              "type": "optional<integer>",
            },
          },
        },
        "_InlinedType68": {
          "docs": "Applications represent partnerstack partners attempting to join vendor programs via public form",
          "type": "map<string, unknown>",
        },
      },
    },
    "commons.yml": {},
    "customers.yml": {
      "service": {
        "auth": false,
        "base-path": "/v2/customers",
        "endpoints": {
          "": {
            "display-name": "List all customers",
            "docs": "Returns a list of your customers. The customers are returned sorted by creation date by default, with the most recent customers appearing first.",
            "method": "GET",
            "path": "",
            "response": "unknown",
          },
          "_unnamedOperation12": {
            "display-name": "Create a customer",
            "docs": "Creates a new customer with the data provided.",
            "method": "POST",
            "path": "",
            "request": {
              "body": "_InlinedType77",
            },
            "response": "unknown",
          },
          "_unnamedOperation13": {
            "display-name": "Retrieve a customer",
            "docs": "Gets a customer with a given customer key.",
            "method": "GET",
            "path": "/{customer_key}",
            "path-parameters": {
              "customer_key": "string",
            },
            "response": "unknown",
          },
          "_unnamedOperation14": {
            "display-name": "Delete a customer",
            "docs": "Deletes a customer with a given customer key.",
            "method": "DELETE",
            "path": "/{customer_key}",
            "path-parameters": {
              "customer_key": "string",
            },
            "response": "unknown",
          },
          "_unnamedOperation15": {
            "display-name": "Update a customer",
            "docs": "Updates a customer with the data provided. Any parameters not passed will not be updated.",
            "method": "PATCH",
            "path": "/{customer_key}",
            "path-parameters": {
              "customer_key": "string",
            },
            "request": {
              "body": "_InlinedType89",
            },
            "response": "unknown",
          },
        },
        "path-parameters": undefined,
      },
      "types": {
        "_InlinedType69": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": {
              "docs": "Immutable Unix timestamp in milliseconds taken at time of creation",
              "type": "optional<integer>",
            },
            "key": {
              "docs": "A unique identifier used to reference the object",
              "type": "optional<string>",
            },
            "updated_at": {
              "docs": "Unix timestamp in milliseconds taken at time of last update",
              "type": "optional<integer>",
            },
          },
        },
        "_InlinedType70": {
          "docs": "**Customers** represent the users who have been referred by a **Partner**.

**Customers** are linked to the **Partner** that referred them through a **partner_key** which must be provided on the Create Customer endpoint.

The **partner_key** is retrievable from \`growsumo.data.partner_key\`, which is created by the \`PartnerStackJS\` snippet.",
          "extends": [
            "_InlinedType71",
            "_InlinedType72",
          ],
        },
        "_InlinedType74": "unknown",
        "_InlinedType75": "unknown",
        "_InlinedType76": "unknown",
        "_InlinedType77": "unknown",
        "_InlinedType78": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": {
              "docs": "Immutable Unix timestamp in milliseconds taken at time of creation",
              "type": "optional<integer>",
            },
            "key": {
              "docs": "A unique identifier used to reference the object",
              "type": "optional<string>",
            },
            "updated_at": {
              "docs": "Unix timestamp in milliseconds taken at time of last update",
              "type": "optional<integer>",
            },
          },
        },
        "_InlinedType79": {
          "docs": "**Customers** represent the users who have been referred by a **Partner**.

**Customers** are linked to the **Partner** that referred them through a **partner_key** which must be provided on the Create Customer endpoint.

The **partner_key** is retrievable from \`growsumo.data.partner_key\`, which is created by the \`PartnerStackJS\` snippet.",
          "extends": [
            "_InlinedType80",
            "_InlinedType81",
          ],
        },
        "_InlinedType83": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": {
              "docs": "Immutable Unix timestamp in milliseconds taken at time of creation",
              "type": "optional<integer>",
            },
            "key": {
              "docs": "A unique identifier used to reference the object",
              "type": "optional<string>",
            },
            "updated_at": {
              "docs": "Unix timestamp in milliseconds taken at time of last update",
              "type": "optional<integer>",
            },
          },
        },
        "_InlinedType84": {
          "docs": "**Customers** represent the users who have been referred by a **Partner**.

**Customers** are linked to the **Partner** that referred them through a **partner_key** which must be provided on the Create Customer endpoint.

The **partner_key** is retrievable from \`growsumo.data.partner_key\`, which is created by the \`PartnerStackJS\` snippet.",
          "extends": [
            "_InlinedType85",
            "_InlinedType86",
          ],
        },
        "_InlinedType88": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": {
              "docs": "Immutable Unix timestamp in milliseconds taken at time of creation",
              "type": "optional<integer>",
            },
            "key": {
              "docs": "A unique identifier used to reference the object",
              "type": "optional<string>",
            },
            "updated_at": {
              "docs": "Unix timestamp in milliseconds taken at time of last update",
              "type": "optional<integer>",
            },
          },
        },
        "_InlinedType89": "unknown",
        "_InlinedType90": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": {
              "docs": "Immutable Unix timestamp in milliseconds taken at time of creation",
              "type": "optional<integer>",
            },
            "key": {
              "docs": "A unique identifier used to reference the object",
              "type": "optional<string>",
            },
            "updated_at": {
              "docs": "Unix timestamp in milliseconds taken at time of last update",
              "type": "optional<integer>",
            },
          },
        },
        "_InlinedType91": {
          "docs": "**Customers** represent the users who have been referred by a **Partner**.

**Customers** are linked to the **Partner** that referred them through a **partner_key** which must be provided on the Create Customer endpoint.

The **partner_key** is retrievable from \`growsumo.data.partner_key\`, which is created by the \`PartnerStackJS\` snippet.",
          "extends": [
            "_InlinedType92",
            "_InlinedType93",
          ],
        },
      },
    },
    "deals.yml": {
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "": {
            "display-name": "Assign partnership to deal",
            "docs": "Assign the provided partnership to the provided deal.",
            "method": "POST",
            "path": "/deals/{deal_key}/assignment/{partnership_key}/{stack_key}",
            "path-parameters": {
              "deal_key": "string",
              "partnership_key": "string",
              "stack_key": "string",
            },
            "response": "unknown",
          },
          "_unnamedOperation0": {
            "display-name": "Get deal file",
            "docs": "Get the file for the deal.",
            "method": "GET",
            "path": "/deals/{deal_key}/file/{file_key}",
            "path-parameters": {
              "deal_key": "string",
              "file_key": "string",
            },
            "response": "unknown",
          },
          "_unnamedOperation1": {
            "display-name": "List all deals",
            "docs": "Returns a list of your deals. The deals are
    returned sorted by creation date, with the most recent deals
    appearing first.",
            "method": "GET",
            "path": "/v2/deals",
            "response": "unknown",
          },
          "_unnamedOperation2": {
            "display-name": "Create a deal",
            "docs": "Creates a deal with desired params.",
            "method": "POST",
            "path": "/v2/deals",
            "request": {
              "body": "_InlinedType11",
            },
            "response": "unknown",
          },
          "_unnamedOperation3": {
            "display-name": "Retrieve the form templates for a deal",
            "docs": "Fetches the specified form templates for a deal.",
            "method": "GET",
            "path": "/v2/deals/form-templates",
            "response": "unknown",
          },
          "_unnamedOperation4": {
            "display-name": "Retrieve a deal",
            "docs": "Retrieves the details of an existing deal. You need only supply the unique deal key that was returned upon deal creation.",
            "method": "GET",
            "path": "/v2/deals/{deal_key}",
            "path-parameters": {
              "deal_key": "string",
            },
            "response": "unknown",
          },
          "_unnamedOperation5": {
            "display-name": "Archive a deal",
            "docs": "Archives the specified deal",
            "method": "DELETE",
            "path": "/v2/deals/{deal_key}",
            "path-parameters": {
              "deal_key": "string",
            },
            "response": "unknown",
          },
          "_unnamedOperation6": {
            "display-name": "Update a deal",
            "docs": "Updates the specified deal by setting the values of
    the parameters passed. Any parameters not provided will be left
    unchanged.",
            "method": "PATCH",
            "path": "/v2/deals/{deal_key}",
            "path-parameters": {
              "deal_key": "string",
            },
            "request": {
              "body": {
                "docs": "**Deals** allow your partners to submit accounts they are working to your sales team to avoid channel conflicts and earn commissions for closed accounts.

Typically the Deals experience is handled through a CRM integration like Salesforce. However you may opt to use the Deals API to have PartnerStack interact with a custom data warehouse rather than directly with your CRM.",
                "extends": undefined,
                "properties": {
                  "account_name": {
                    "docs": "Name of the account",
                    "type": "optional<string>",
                  },
                  "amount": {
                    "docs": "Deal amount in **cents**",
                    "type": "optional<integer>",
                  },
                  "close_date": {
                    "docs": "Expected close date of deal as YYYY-MM-DD",
                    "type": "optional<string>",
                  },
                  "contact_first_name": {
                    "docs": "First name of the account's contact",
                    "type": "optional<string>",
                  },
                  "contact_last_name": {
                    "docs": "Last name of the account's contact",
                    "type": "optional<string>",
                  },
                  "external_key": {
                    "docs": "Reference that can be used in place of the key.",
                    "type": "optional<string>",
                  },
                  "field_data": "optional<unknown>",
                  "fields": "optional<unknown>",
                  "group_key": {
                    "docs": "The unique key of the group in which this deals's partner is in",
                    "type": "optional<string>",
                  },
                  "lost_reason": {
                    "docs": "Reason for which the deal was lost.",
                    "type": "optional<string>",
                  },
                  "meta": "optional<unknown>",
                  "mold_key": "optional<unknown>",
                  "partner_key": {
                    "docs": "The unique key of the partner who owns this deal",
                    "type": "optional<string>",
                  },
                  "source": {
                    "docs": "Source of the deal, either 'partner' or 'vendor', defaults to 'partner' if not specified",
                    "type": "optional<_InlinedType34>",
                  },
                  "stage": {
                    "docs": "Current stage of this deal. Must appear in Deals Stage list found in group settings.",
                    "type": "optional<string>",
                  },
                  "team": "optional<unknown>",
                  "team_member": "optional<unknown>",
                },
              },
            },
            "response": "unknown",
          },
          "_unnamedOperation7": {
            "display-name": "Convert a deal",
            "docs": "Converts a deal to a customer",
            "method": "POST",
            "path": "/v2/deals/{deal_key}/convert",
            "path-parameters": {
              "deal_key": "string",
            },
            "request": {
              "body": "_InlinedType47",
            },
            "response": "unknown",
          },
          "_unnamedOperation8": {
            "display-name": "Get files attached to a deal",
            "docs": "Gets the files attached to the specified deal",
            "method": "GET",
            "path": "/v2/deals/{deal_key}/files",
            "path-parameters": {
              "deal_key": "string",
            },
            "response": "unknown",
          },
        },
        "path-parameters": undefined,
      },
      "types": {
        "_InlinedType0": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": {
              "docs": "Immutable Unix timestamp in milliseconds taken at time of creation",
              "type": "optional<integer>",
            },
            "key": {
              "docs": "A unique identifier used to reference the object",
              "type": "optional<string>",
            },
            "updated_at": {
              "docs": "Unix timestamp in milliseconds taken at time of last update",
              "type": "optional<integer>",
            },
          },
        },
        "_InlinedType1": {
          "docs": "**Deals** allow your partners to submit accounts they are working to your sales team to avoid channel conflicts and earn commissions for closed accounts.

Typically the Deals experience is handled through a CRM integration like Salesforce. However you may opt to use the Deals API to have PartnerStack interact with a custom data warehouse rather than directly with your CRM.",
          "extends": undefined,
          "properties": {
            "account_name": {
              "docs": "Name of the account",
              "type": "optional<string>",
            },
            "amount": {
              "docs": "Deal amount in **cents**",
              "type": "optional<integer>",
            },
            "close_date": {
              "docs": "Expected close date of deal as YYYY-MM-DD",
              "type": "optional<string>",
            },
            "contact_first_name": {
              "docs": "First name of the account's contact",
              "type": "optional<string>",
            },
            "contact_last_name": {
              "docs": "Last name of the account's contact",
              "type": "optional<string>",
            },
            "external_key": {
              "docs": "Reference that can be used in place of the key.",
              "type": "optional<string>",
            },
            "field_data": "optional<unknown>",
            "fields": "optional<unknown>",
            "group_key": {
              "docs": "The unique key of the group in which this deals's partner is in",
              "type": "optional<string>",
            },
            "lost_reason": {
              "docs": "Reason for which the deal was lost.",
              "type": "optional<string>",
            },
            "meta": "optional<unknown>",
            "mold_key": "optional<unknown>",
            "partner_key": {
              "docs": "The unique key of the partner who owns this deal",
              "type": "optional<string>",
            },
            "source": {
              "docs": "Source of the deal, either 'partner' or 'vendor', defaults to 'partner' if not specified",
              "type": "optional<_InlinedType3>",
            },
            "stage": {
              "docs": "Current stage of this deal. Must appear in Deals Stage list found in group settings.",
              "type": "optional<string>",
            },
            "team": "optional<unknown>",
            "team_member": "optional<unknown>",
          },
        },
        "_InlinedType11": "unknown",
        "_InlinedType12": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": {
              "docs": "Immutable Unix timestamp in milliseconds taken at time of creation",
              "type": "optional<integer>",
            },
            "key": {
              "docs": "A unique identifier used to reference the object",
              "type": "optional<string>",
            },
            "updated_at": {
              "docs": "Unix timestamp in milliseconds taken at time of last update",
              "type": "optional<integer>",
            },
          },
        },
        "_InlinedType13": {
          "docs": "**Deals** allow your partners to submit accounts they are working to your sales team to avoid channel conflicts and earn commissions for closed accounts.

Typically the Deals experience is handled through a CRM integration like Salesforce. However you may opt to use the Deals API to have PartnerStack interact with a custom data warehouse rather than directly with your CRM.",
          "extends": undefined,
          "properties": {
            "account_name": {
              "docs": "Name of the account",
              "type": "optional<string>",
            },
            "amount": {
              "docs": "Deal amount in **cents**",
              "type": "optional<integer>",
            },
            "close_date": {
              "docs": "Expected close date of deal as YYYY-MM-DD",
              "type": "optional<string>",
            },
            "contact_first_name": {
              "docs": "First name of the account's contact",
              "type": "optional<string>",
            },
            "contact_last_name": {
              "docs": "Last name of the account's contact",
              "type": "optional<string>",
            },
            "external_key": {
              "docs": "Reference that can be used in place of the key.",
              "type": "optional<string>",
            },
            "field_data": "optional<unknown>",
            "fields": "optional<unknown>",
            "group_key": {
              "docs": "The unique key of the group in which this deals's partner is in",
              "type": "optional<string>",
            },
            "lost_reason": {
              "docs": "Reason for which the deal was lost.",
              "type": "optional<string>",
            },
            "meta": "optional<unknown>",
            "mold_key": "optional<unknown>",
            "partner_key": {
              "docs": "The unique key of the partner who owns this deal",
              "type": "optional<string>",
            },
            "source": {
              "docs": "Source of the deal, either 'partner' or 'vendor', defaults to 'partner' if not specified",
              "type": "optional<_InlinedType15>",
            },
            "stage": {
              "docs": "Current stage of this deal. Must appear in Deals Stage list found in group settings.",
              "type": "optional<string>",
            },
            "team": "optional<unknown>",
            "team_member": "optional<unknown>",
          },
        },
        "_InlinedType20": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": {
              "docs": "Immutable Unix timestamp in milliseconds taken at time of creation",
              "type": "optional<integer>",
            },
            "key": {
              "docs": "A unique identifier used to reference the object",
              "type": "optional<string>",
            },
            "updated_at": {
              "docs": "Unix timestamp in milliseconds taken at time of last update",
              "type": "optional<integer>",
            },
          },
        },
        "_InlinedType21": {
          "docs": "**FormTemplates** are configurable on many of our supported objects. These forms act as a way to collect additional information on object create",
          "extends": undefined,
          "properties": {
            "description": {
              "docs": "A description for users to better understand the form",
              "type": "optional<string>",
            },
            "fields": "optional<unknown>",
            "groups": "optional<unknown>",
            "name": {
              "docs": "The presented name of this form",
              "type": "optional<string>",
            },
            "title": {
              "docs": "A title to display to users when they fill out the form",
              "type": "optional<string>",
            },
            "type": {
              "docs": "The type of object within PartnerStack that this form translates to",
              "type": "optional<string>",
            },
          },
        },
        "_InlinedType25": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": {
              "docs": "Immutable Unix timestamp in milliseconds taken at time of creation",
              "type": "optional<integer>",
            },
            "key": {
              "docs": "A unique identifier used to reference the object",
              "type": "optional<string>",
            },
            "updated_at": {
              "docs": "Unix timestamp in milliseconds taken at time of last update",
              "type": "optional<integer>",
            },
          },
        },
        "_InlinedType26": {
          "docs": "**Deals** allow your partners to submit accounts they are working to your sales team to avoid channel conflicts and earn commissions for closed accounts.

Typically the Deals experience is handled through a CRM integration like Salesforce. However you may opt to use the Deals API to have PartnerStack interact with a custom data warehouse rather than directly with your CRM.",
          "extends": undefined,
          "properties": {
            "account_name": {
              "docs": "Name of the account",
              "type": "optional<string>",
            },
            "amount": {
              "docs": "Deal amount in **cents**",
              "type": "optional<integer>",
            },
            "close_date": {
              "docs": "Expected close date of deal as YYYY-MM-DD",
              "type": "optional<string>",
            },
            "contact_first_name": {
              "docs": "First name of the account's contact",
              "type": "optional<string>",
            },
            "contact_last_name": {
              "docs": "Last name of the account's contact",
              "type": "optional<string>",
            },
            "external_key": {
              "docs": "Reference that can be used in place of the key.",
              "type": "optional<string>",
            },
            "field_data": "optional<unknown>",
            "fields": "optional<unknown>",
            "group_key": {
              "docs": "The unique key of the group in which this deals's partner is in",
              "type": "optional<string>",
            },
            "lost_reason": {
              "docs": "Reason for which the deal was lost.",
              "type": "optional<string>",
            },
            "meta": "optional<unknown>",
            "mold_key": "optional<unknown>",
            "partner_key": {
              "docs": "The unique key of the partner who owns this deal",
              "type": "optional<string>",
            },
            "source": {
              "docs": "Source of the deal, either 'partner' or 'vendor', defaults to 'partner' if not specified",
              "type": "optional<_InlinedType28>",
            },
            "stage": {
              "docs": "Current stage of this deal. Must appear in Deals Stage list found in group settings.",
              "type": "optional<string>",
            },
            "team": "optional<unknown>",
            "team_member": "optional<unknown>",
          },
        },
        "_InlinedType33": {
          "docs": "**FieldData** combines attributes about a field with its submitted value on target object",
          "extends": undefined,
          "properties": {
            "api_name": {
              "docs": "API name of this field to be used on create / update / serialization. Created at time of field creation but can be edited",
              "type": "optional<string>",
            },
            "external_type": {
              "docs": "Name that can be used for external systems",
              "type": "optional<string>",
            },
            "field_key": {
              "docs": "Key of field that is presented",
              "type": "optional<string>",
            },
            "help_text": {
              "docs": "The help text that is provided for this field",
              "type": "optional<string>",
            },
            "hidden": {
              "docs": "Whether or not this field is displayed when filling out its attached form",
              "type": "optional<boolean>",
            },
            "internal_name": {
              "docs": "Internal name of this field. Created by PartnerStack at time of field creation. Used when referencing field in created objects. Cannot be edited.",
              "type": "optional<string>",
            },
            "name": {
              "docs": "Name of field that is presented",
              "type": "optional<string>",
            },
            "options": {
              "docs": "Options to select from if this field is a picklist/checkbox",
              "type": "optional<map<string, unknown>>",
            },
            "placeholder_text": {
              "docs": "The text of the placeholder that is provided for this field",
              "type": "optional<string>",
            },
            "position": {
              "docs": "The position that this field will be displayed in relation to others on the same form (index starts at 0)",
              "type": "optional<integer>",
            },
            "required": {
              "docs": "Whether or not this field will be required when filling out its attached form",
              "type": "optional<boolean>",
            },
            "type": {
              "docs": "The type of field that will be presented (input, picklist, number ect.)",
              "type": "optional<string>",
            },
            "value": {
              "docs": "The value that was submitted to the field and stored on the target object",
              "type": "optional<unknown>",
            },
          },
        },
        "_InlinedType34": {
          "docs": "Source of the deal, either 'partner' or 'vendor', defaults to 'partner' if not specified",
          "enum": [
            "partner",
            "vendor",
          ],
        },
        "_InlinedType35": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": {
              "docs": "Immutable Unix timestamp in milliseconds taken at time of creation",
              "type": "optional<integer>",
            },
            "key": {
              "docs": "A unique identifier used to reference the object",
              "type": "optional<string>",
            },
            "updated_at": {
              "docs": "Unix timestamp in milliseconds taken at time of last update",
              "type": "optional<integer>",
            },
          },
        },
        "_InlinedType36": {
          "docs": "Details of team used in public API.",
          "extends": undefined,
          "properties": {
            "name": {
              "docs": "The name of the partner team",
              "type": "optional<string>",
            },
          },
        },
        "_InlinedType37": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": {
              "docs": "Immutable Unix timestamp in milliseconds taken at time of creation",
              "type": "optional<integer>",
            },
            "key": {
              "docs": "A unique identifier used to reference the object",
              "type": "optional<string>",
            },
            "updated_at": {
              "docs": "Unix timestamp in milliseconds taken at time of last update",
              "type": "optional<integer>",
            },
          },
        },
        "_InlinedType38": {
          "docs": "Details of team member used in public API.",
          "extends": undefined,
          "properties": {
            "email": {
              "docs": "Email of the partner team member",
              "type": "optional<string>",
            },
            "first_name": {
              "docs": "First name of the partner team member",
              "type": "optional<string>",
            },
            "last_name": {
              "docs": "Last name of the partner team member",
              "type": "optional<string>",
            },
          },
        },
        "_InlinedType39": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": {
              "docs": "Immutable Unix timestamp in milliseconds taken at time of creation",
              "type": "optional<integer>",
            },
            "key": {
              "docs": "A unique identifier used to reference the object",
              "type": "optional<string>",
            },
            "updated_at": {
              "docs": "Unix timestamp in milliseconds taken at time of last update",
              "type": "optional<integer>",
            },
          },
        },
        "_InlinedType40": {
          "docs": "**Deals** allow your partners to submit accounts they are working to your sales team to avoid channel conflicts and earn commissions for closed accounts.

Typically the Deals experience is handled through a CRM integration like Salesforce. However you may opt to use the Deals API to have PartnerStack interact with a custom data warehouse rather than directly with your CRM.",
          "extends": undefined,
          "properties": {
            "account_name": {
              "docs": "Name of the account",
              "type": "optional<string>",
            },
            "amount": {
              "docs": "Deal amount in **cents**",
              "type": "optional<integer>",
            },
            "close_date": {
              "docs": "Expected close date of deal as YYYY-MM-DD",
              "type": "optional<string>",
            },
            "contact_first_name": {
              "docs": "First name of the account's contact",
              "type": "optional<string>",
            },
            "contact_last_name": {
              "docs": "Last name of the account's contact",
              "type": "optional<string>",
            },
            "external_key": {
              "docs": "Reference that can be used in place of the key.",
              "type": "optional<string>",
            },
            "field_data": "optional<unknown>",
            "fields": "optional<unknown>",
            "group_key": {
              "docs": "The unique key of the group in which this deals's partner is in",
              "type": "optional<string>",
            },
            "lost_reason": {
              "docs": "Reason for which the deal was lost.",
              "type": "optional<string>",
            },
            "meta": "optional<unknown>",
            "mold_key": "optional<unknown>",
            "partner_key": {
              "docs": "The unique key of the partner who owns this deal",
              "type": "optional<string>",
            },
            "source": {
              "docs": "Source of the deal, either 'partner' or 'vendor', defaults to 'partner' if not specified",
              "type": "optional<_InlinedType42>",
            },
            "stage": {
              "docs": "Current stage of this deal. Must appear in Deals Stage list found in group settings.",
              "type": "optional<string>",
            },
            "team": "optional<unknown>",
            "team_member": "optional<unknown>",
          },
        },
        "_InlinedType47": "unknown",
        "_InlinedType48": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": {
              "docs": "Immutable Unix timestamp in milliseconds taken at time of creation",
              "type": "optional<integer>",
            },
            "key": {
              "docs": "A unique identifier used to reference the object",
              "type": "optional<string>",
            },
            "updated_at": {
              "docs": "Unix timestamp in milliseconds taken at time of last update",
              "type": "optional<integer>",
            },
          },
        },
        "_InlinedType49": {
          "docs": "**Customers** represent the users who have been referred by a **Partner**.

**Customers** are linked to the **Partner** that referred them through a **partner_key** which must be provided on the Create Customer endpoint.

The **partner_key** is retrievable from \`growsumo.data.partner_key\`, which is created by the \`PartnerStackJS\` snippet.",
          "extends": [
            "_InlinedType50",
            "_InlinedType51",
          ],
        },
        "_InlinedType8": "unknown",
      },
    },
    "formTemplates.yml": {
      "service": {
        "auth": false,
        "base-path": "/v2/form-templates",
        "endpoints": {
          "getFormTemplates": {
            "display-name": "List all form templates",
            "docs": "Returns a list of your form templates. The form templates are returned sorted by creation date, with the most recent form templates appearing first.",
            "method": "GET",
            "path": "",
            "response": "unknown",
          },
        },
        "path-parameters": undefined,
      },
      "types": {
        "_InlinedType95": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": {
              "docs": "Immutable Unix timestamp in milliseconds taken at time of creation",
              "type": "optional<integer>",
            },
            "key": {
              "docs": "A unique identifier used to reference the object",
              "type": "optional<string>",
            },
            "updated_at": {
              "docs": "Unix timestamp in milliseconds taken at time of last update",
              "type": "optional<integer>",
            },
          },
        },
        "_InlinedType96": {
          "docs": "**FormTemplates** are configurable on many of our supported objects. These forms act as a way to collect additional information on object create",
          "extends": undefined,
          "properties": {
            "description": {
              "docs": "A description for users to better understand the form",
              "type": "optional<string>",
            },
            "fields": "optional<unknown>",
            "groups": "optional<unknown>",
            "name": {
              "docs": "The presented name of this form",
              "type": "optional<string>",
            },
            "title": {
              "docs": "A title to display to users when they fill out the form",
              "type": "optional<string>",
            },
            "type": {
              "docs": "The type of object within PartnerStack that this form translates to",
              "type": "optional<string>",
            },
          },
        },
      },
    },
    "groups.yml": {
      "service": {
        "auth": false,
        "base-path": "/v2/groups",
        "endpoints": {
          "": {
            "display-name": "List all groups",
            "docs": "Returns a list of your groups. The groups are returned sorted by creation date, with the most recent groups appearing first.",
            "method": "GET",
            "path": "",
            "response": "unknown",
          },
        },
        "path-parameters": undefined,
      },
      "types": {
        "_InlinedType100": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": {
              "docs": "Immutable Unix timestamp in milliseconds taken at time of creation",
              "type": "optional<integer>",
            },
            "key": {
              "docs": "A unique identifier used to reference the object",
              "type": "optional<string>",
            },
            "updated_at": {
              "docs": "Unix timestamp in milliseconds taken at time of last update",
              "type": "optional<integer>",
            },
          },
        },
        "_InlinedType101": {
          "docs": "**Groups** are a way to segment partners within PartnerStack to selectively distribute access to things such as Campaigns, Marketing Assets, and Rewards",
          "extends": undefined,
          "properties": {
            "archived": {
              "docs": "Whether or not this group is still active",
              "type": "optional<boolean>",
            },
            "default": {
              "docs": "Whether this is the default Group for partners to join",
              "type": "optional<boolean>",
            },
            "features": {
              "docs": "Features that partners within this group have access too",
              "type": "optional<map<string, unknown>>",
            },
            "name": {
              "docs": "The name of this Group as presented to partners",
              "type": "optional<string>",
            },
            "slug": {
              "docs": "The slugified version of this groups name to be added to routes",
              "type": "optional<string>",
            },
          },
        },
      },
    },
    "leads.yml": {
      "service": {
        "auth": false,
        "base-path": "/v2/leads",
        "endpoints": {
          "": {
            "display-name": "List all leads",
            "docs": "Returns a list of your leads. The leads are
    returned sorted by creation date, with the most recent leads
    appearing first.",
            "method": "GET",
            "path": "",
            "response": "unknown",
          },
          "_unnamedOperation16": {
            "display-name": "Create a lead",
            "docs": "Creates a lead with desired params.",
            "method": "POST",
            "path": "",
            "request": {
              "body": "_InlinedType109",
            },
            "response": "unknown",
          },
          "_unnamedOperation17": {
            "display-name": "Retrieve the form templates for a lead",
            "docs": "Fetches the specified form templates for a lead.",
            "method": "GET",
            "path": "/form-templates",
            "response": "unknown",
          },
          "_unnamedOperation18": {
            "display-name": "Retrieve a lead",
            "docs": "Retrieves the details of an existing
    lead. You need only supply the unique lead key that was returned
    upon lead creation.",
            "method": "GET",
            "path": "/{lead_key}",
            "path-parameters": {
              "lead_key": "string",
            },
            "response": "unknown",
          },
          "_unnamedOperation19": {
            "display-name": "Archive a lead",
            "docs": "Archives the specified lead.",
            "method": "DELETE",
            "path": "/{lead_key}",
            "path-parameters": {
              "lead_key": "string",
            },
            "response": "unknown",
          },
          "_unnamedOperation20": {
            "display-name": "Update a lead",
            "docs": "Updates the specified lead by setting the values
    of the parameters passed. Any parameters not provided will be left
    unchanged.",
            "method": "PATCH",
            "path": "/{lead_key}",
            "path-parameters": {
              "lead_key": "string",
            },
            "request": {
              "body": {
                "docs": "**Leads** are submitted by your partners to let your sales team know of potential accounts that they may wish to work. Partners may earn comission for qualified leads, or leads that eventually become closed accounts.",
                "extends": undefined,
                "properties": {
                  "amount": {
                    "docs": "Lead amount in **cents**",
                    "type": "optional<integer>",
                  },
                  "approved": {
                    "docs": "Used to indicate whether this lead has been approved to move past the closed stage",
                    "type": "optional<boolean>",
                  },
                  "customer_key": {
                    "docs": "Unique identifier to be used for Customer after a lead has been converted",
                    "type": "optional<string>",
                  },
                  "external_key": {
                    "docs": "A unique key that identifies this lead in an external system. This key must be unique across all leads in your account. This key is used to identify leads when they are updated or deleted. Often provided as an email, but can be any unique string.",
                    "type": "optional<string>",
                  },
                  "field_data": "optional<unknown>",
                  "fields": "optional<unknown>",
                  "group_key": "optional<unknown>",
                  "meta": {
                    "docs": "Key value pairs that store additional information about this lead. First and last name required. Other eligible keys are based on Lead forms created. Use the /leads/form-template to view field names",
                    "type": "optional<map<string, unknown>>",
                  },
                  "mold_key": "optional<unknown>",
                  "partner_key": {
                    "docs": "The unique key of the partner who submitted this lead",
                    "type": "optional<string>",
                  },
                  "status": {
                    "docs": "Current status of this lead. Must be one of either 'open', 'closed', 'dead', 'closed won', or 'closed lost'",
                    "type": "optional<_InlinedType124>",
                  },
                },
              },
            },
            "response": "unknown",
          },
          "_unnamedOperation21": {
            "display-name": "Convert a lead",
            "docs": "Converts a lead to a customer",
            "method": "POST",
            "path": "/{lead_key}/convert",
            "path-parameters": {
              "lead_key": "string",
            },
            "request": {
              "body": "_InlinedType129",
            },
            "response": "unknown",
          },
        },
        "path-parameters": undefined,
      },
      "types": {
        "_InlinedType102": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": {
              "docs": "Immutable Unix timestamp in milliseconds taken at time of creation",
              "type": "optional<integer>",
            },
            "key": {
              "docs": "A unique identifier used to reference the object",
              "type": "optional<string>",
            },
            "updated_at": {
              "docs": "Unix timestamp in milliseconds taken at time of last update",
              "type": "optional<integer>",
            },
          },
        },
        "_InlinedType103": {
          "docs": "**Leads** are submitted by your partners to let your sales team know of potential accounts that they may wish to work. Partners may earn comission for qualified leads, or leads that eventually become closed accounts.",
          "extends": undefined,
          "properties": {
            "amount": {
              "docs": "Lead amount in **cents**",
              "type": "optional<integer>",
            },
            "approved": {
              "docs": "Used to indicate whether this lead has been approved to move past the closed stage",
              "type": "optional<boolean>",
            },
            "customer_key": {
              "docs": "Unique identifier to be used for Customer after a lead has been converted",
              "type": "optional<string>",
            },
            "external_key": {
              "docs": "A unique key that identifies this lead in an external system. This key must be unique across all leads in your account. This key is used to identify leads when they are updated or deleted. Often provided as an email, but can be any unique string.",
              "type": "optional<string>",
            },
            "field_data": "optional<unknown>",
            "fields": "optional<unknown>",
            "group_key": "optional<unknown>",
            "meta": {
              "docs": "Key value pairs that store additional information about this lead. First and last name required. Other eligible keys are based on Lead forms created. Use the /leads/form-template to view field names",
              "type": "optional<map<string, unknown>>",
            },
            "mold_key": "optional<unknown>",
            "partner_key": {
              "docs": "The unique key of the partner who submitted this lead",
              "type": "optional<string>",
            },
            "status": {
              "docs": "Current status of this lead. Must be one of either 'open', 'closed', 'dead', 'closed won', or 'closed lost'",
              "type": "optional<_InlinedType105>",
            },
          },
        },
        "_InlinedType106": {
          "docs": "**Leads** are submitted by your partners to let your sales team know of potential accounts that they may wish to work. Partners may earn comission for qualified leads, or leads that eventually become closed accounts.",
          "extends": undefined,
          "properties": {
            "amount": {
              "docs": "Lead amount in **cents**",
              "type": "optional<integer>",
            },
            "external_key": {
              "docs": "A unique key that identifies this lead in an external system. This key must be unique across all leads in your account. This key is used to identify leads when they are updated or deleted. Often provided as an email, but can be any unique string.",
              "type": "string",
            },
            "field_data": "optional<unknown>",
            "fields": "optional<unknown>",
            "group_key": "optional<unknown>",
            "meta": {
              "docs": "Key value pairs that store additional information about this lead. First and last name required. Other eligible keys are based on Lead forms created. Use the /leads/form-template to view field names",
              "type": "map<string, unknown>",
            },
            "mold_key": "optional<unknown>",
            "partner_key": {
              "docs": "The unique key of the partner who submitted this lead",
              "type": "string",
            },
            "status": {
              "docs": "Current status of this lead. Must be one of either 'open', 'closed', 'dead', 'closed won', or 'closed lost'",
              "type": "_InlinedType108",
            },
          },
        },
        "_InlinedType109": "unknown",
        "_InlinedType110": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": {
              "docs": "Immutable Unix timestamp in milliseconds taken at time of creation",
              "type": "optional<integer>",
            },
            "key": {
              "docs": "A unique identifier used to reference the object",
              "type": "optional<string>",
            },
            "updated_at": {
              "docs": "Unix timestamp in milliseconds taken at time of last update",
              "type": "optional<integer>",
            },
          },
        },
        "_InlinedType111": {
          "docs": "**Leads** are submitted by your partners to let your sales team know of potential accounts that they may wish to work. Partners may earn comission for qualified leads, or leads that eventually become closed accounts.",
          "extends": undefined,
          "properties": {
            "amount": {
              "docs": "Lead amount in **cents**",
              "type": "optional<integer>",
            },
            "approved": {
              "docs": "Used to indicate whether this lead has been approved to move past the closed stage",
              "type": "optional<boolean>",
            },
            "customer_key": {
              "docs": "Unique identifier to be used for Customer after a lead has been converted",
              "type": "optional<string>",
            },
            "external_key": {
              "docs": "A unique key that identifies this lead in an external system. This key must be unique across all leads in your account. This key is used to identify leads when they are updated or deleted. Often provided as an email, but can be any unique string.",
              "type": "optional<string>",
            },
            "field_data": "optional<unknown>",
            "fields": "optional<unknown>",
            "group_key": "optional<unknown>",
            "meta": {
              "docs": "Key value pairs that store additional information about this lead. First and last name required. Other eligible keys are based on Lead forms created. Use the /leads/form-template to view field names",
              "type": "optional<map<string, unknown>>",
            },
            "mold_key": "optional<unknown>",
            "partner_key": {
              "docs": "The unique key of the partner who submitted this lead",
              "type": "optional<string>",
            },
            "status": {
              "docs": "Current status of this lead. Must be one of either 'open', 'closed', 'dead', 'closed won', or 'closed lost'",
              "type": "optional<_InlinedType113>",
            },
          },
        },
        "_InlinedType114": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": {
              "docs": "Immutable Unix timestamp in milliseconds taken at time of creation",
              "type": "optional<integer>",
            },
            "key": {
              "docs": "A unique identifier used to reference the object",
              "type": "optional<string>",
            },
            "updated_at": {
              "docs": "Unix timestamp in milliseconds taken at time of last update",
              "type": "optional<integer>",
            },
          },
        },
        "_InlinedType115": {
          "docs": "**FormTemplates** are configurable on many of our supported objects. These forms act as a way to collect additional information on object create",
          "extends": undefined,
          "properties": {
            "description": {
              "docs": "A description for users to better understand the form",
              "type": "optional<string>",
            },
            "fields": "optional<unknown>",
            "groups": "optional<unknown>",
            "name": {
              "docs": "The presented name of this form",
              "type": "optional<string>",
            },
            "title": {
              "docs": "A title to display to users when they fill out the form",
              "type": "optional<string>",
            },
            "type": {
              "docs": "The type of object within PartnerStack that this form translates to",
              "type": "optional<string>",
            },
          },
        },
        "_InlinedType119": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": {
              "docs": "Immutable Unix timestamp in milliseconds taken at time of creation",
              "type": "optional<integer>",
            },
            "key": {
              "docs": "A unique identifier used to reference the object",
              "type": "optional<string>",
            },
            "updated_at": {
              "docs": "Unix timestamp in milliseconds taken at time of last update",
              "type": "optional<integer>",
            },
          },
        },
        "_InlinedType120": {
          "docs": "**Leads** are submitted by your partners to let your sales team know of potential accounts that they may wish to work. Partners may earn comission for qualified leads, or leads that eventually become closed accounts.",
          "extends": undefined,
          "properties": {
            "amount": {
              "docs": "Lead amount in **cents**",
              "type": "optional<integer>",
            },
            "approved": {
              "docs": "Used to indicate whether this lead has been approved to move past the closed stage",
              "type": "optional<boolean>",
            },
            "customer_key": {
              "docs": "Unique identifier to be used for Customer after a lead has been converted",
              "type": "optional<string>",
            },
            "external_key": {
              "docs": "A unique key that identifies this lead in an external system. This key must be unique across all leads in your account. This key is used to identify leads when they are updated or deleted. Often provided as an email, but can be any unique string.",
              "type": "optional<string>",
            },
            "field_data": "optional<unknown>",
            "fields": "optional<unknown>",
            "group_key": "optional<unknown>",
            "meta": {
              "docs": "Key value pairs that store additional information about this lead. First and last name required. Other eligible keys are based on Lead forms created. Use the /leads/form-template to view field names",
              "type": "optional<map<string, unknown>>",
            },
            "mold_key": "optional<unknown>",
            "partner_key": {
              "docs": "The unique key of the partner who submitted this lead",
              "type": "optional<string>",
            },
            "status": {
              "docs": "Current status of this lead. Must be one of either 'open', 'closed', 'dead', 'closed won', or 'closed lost'",
              "type": "optional<_InlinedType122>",
            },
          },
        },
        "_InlinedType123": {
          "docs": "**FieldData** combines attributes about a field with its submitted value on target object",
          "extends": undefined,
          "properties": {
            "api_name": {
              "docs": "API name of this field to be used on create / update / serialization. Created at time of field creation but can be edited",
              "type": "optional<string>",
            },
            "external_type": {
              "docs": "Name that can be used for external systems",
              "type": "optional<string>",
            },
            "field_key": {
              "docs": "Key of field that is presented",
              "type": "optional<string>",
            },
            "help_text": {
              "docs": "The help text that is provided for this field",
              "type": "optional<string>",
            },
            "hidden": {
              "docs": "Whether or not this field is displayed when filling out its attached form",
              "type": "optional<boolean>",
            },
            "internal_name": {
              "docs": "Internal name of this field. Created by PartnerStack at time of field creation. Used when referencing field in created objects. Cannot be edited.",
              "type": "optional<string>",
            },
            "name": {
              "docs": "Name of field that is presented",
              "type": "optional<string>",
            },
            "options": {
              "docs": "Options to select from if this field is a picklist/checkbox",
              "type": "optional<map<string, unknown>>",
            },
            "placeholder_text": {
              "docs": "The text of the placeholder that is provided for this field",
              "type": "optional<string>",
            },
            "position": {
              "docs": "The position that this field will be displayed in relation to others on the same form (index starts at 0)",
              "type": "optional<integer>",
            },
            "required": {
              "docs": "Whether or not this field will be required when filling out its attached form",
              "type": "optional<boolean>",
            },
            "type": {
              "docs": "The type of field that will be presented (input, picklist, number ect.)",
              "type": "optional<string>",
            },
            "value": {
              "docs": "The value that was submitted to the field and stored on the target object",
              "type": "optional<unknown>",
            },
          },
        },
        "_InlinedType124": {
          "docs": "Current status of this lead. Must be one of either 'open', 'closed', 'dead', 'closed won', or 'closed lost'",
          "enum": [
            "open",
            "closed",
            "dead",
            "closed won",
            "closed lost",
          ],
        },
        "_InlinedType125": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": {
              "docs": "Immutable Unix timestamp in milliseconds taken at time of creation",
              "type": "optional<integer>",
            },
            "key": {
              "docs": "A unique identifier used to reference the object",
              "type": "optional<string>",
            },
            "updated_at": {
              "docs": "Unix timestamp in milliseconds taken at time of last update",
              "type": "optional<integer>",
            },
          },
        },
        "_InlinedType126": {
          "docs": "**Leads** are submitted by your partners to let your sales team know of potential accounts that they may wish to work. Partners may earn comission for qualified leads, or leads that eventually become closed accounts.",
          "extends": undefined,
          "properties": {
            "amount": {
              "docs": "Lead amount in **cents**",
              "type": "optional<integer>",
            },
            "approved": {
              "docs": "Used to indicate whether this lead has been approved to move past the closed stage",
              "type": "optional<boolean>",
            },
            "customer_key": {
              "docs": "Unique identifier to be used for Customer after a lead has been converted",
              "type": "optional<string>",
            },
            "external_key": {
              "docs": "A unique key that identifies this lead in an external system. This key must be unique across all leads in your account. This key is used to identify leads when they are updated or deleted. Often provided as an email, but can be any unique string.",
              "type": "optional<string>",
            },
            "field_data": "optional<unknown>",
            "fields": "optional<unknown>",
            "group_key": "optional<unknown>",
            "meta": {
              "docs": "Key value pairs that store additional information about this lead. First and last name required. Other eligible keys are based on Lead forms created. Use the /leads/form-template to view field names",
              "type": "optional<map<string, unknown>>",
            },
            "mold_key": "optional<unknown>",
            "partner_key": {
              "docs": "The unique key of the partner who submitted this lead",
              "type": "optional<string>",
            },
            "status": {
              "docs": "Current status of this lead. Must be one of either 'open', 'closed', 'dead', 'closed won', or 'closed lost'",
              "type": "optional<_InlinedType128>",
            },
          },
        },
        "_InlinedType129": "unknown",
        "_InlinedType130": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": {
              "docs": "Immutable Unix timestamp in milliseconds taken at time of creation",
              "type": "optional<integer>",
            },
            "key": {
              "docs": "A unique identifier used to reference the object",
              "type": "optional<string>",
            },
            "updated_at": {
              "docs": "Unix timestamp in milliseconds taken at time of last update",
              "type": "optional<integer>",
            },
          },
        },
        "_InlinedType131": {
          "docs": "**Customers** represent the users who have been referred by a **Partner**.

**Customers** are linked to the **Partner** that referred them through a **partner_key** which must be provided on the Create Customer endpoint.

The **partner_key** is retrievable from \`growsumo.data.partner_key\`, which is created by the \`PartnerStackJS\` snippet.",
          "extends": [
            "_InlinedType132",
            "_InlinedType133",
          ],
        },
      },
    },
    "marketplace.yml": {
      "service": {
        "auth": false,
        "base-path": "/v2/marketplace/programs",
        "endpoints": {
          "": {
            "display-name": "List all programs",
            "docs": "Returns a list of all active marketplace-listed programs and their details. The programs are returned sorted by creation date by default, with the most recent programs appearing first.",
            "method": "GET",
            "path": "",
            "response": "unknown",
          },
          "_unnamedOperation22": {
            "display-name": "Retrieve a marketplace program",
            "docs": "Retrieves a marketplace program given its program key.",
            "method": "GET",
            "path": "/{company_key}",
            "path-parameters": {
              "company_key": "string",
            },
            "response": "unknown",
          },
        },
        "path-parameters": undefined,
      },
      "types": {
        "_InlinedType135": {
          "docs": "Returns a list of all marketplace-listed programs and their details",
          "extends": undefined,
          "properties": {
            "category": {
              "docs": "The category of this marketplace listing",
              "type": "optional<list<unknown>>",
            },
            "country": {
              "docs": "Origin country of this marketplace listing",
              "type": "optional<string>",
            },
            "created_at": {
              "docs": "Immutable Unix timestamp in milliseconds taken at time of company creation",
              "type": "optional<integer>",
            },
            "description": {
              "docs": "The description of the marketplace listing",
              "type": "optional<string>",
            },
            "key": {
              "docs": "Key of the marketplace listing",
              "type": "optional<string>",
            },
            "logo": {
              "docs": "Key of image for this marketplace listing",
              "type": "optional<string>",
            },
            "name": {
              "docs": "The name of the marketplace listing",
              "type": "optional<string>",
            },
            "offers": {
              "docs": "Available offers for the program",
              "type": "optional<list<unknown>>",
            },
            "website": {
              "docs": "The website of this marketplace listing",
              "type": "optional<string>",
            },
          },
        },
        "_InlinedType136": {
          "docs": "Returns a list of all marketplace-listed programs and their details",
          "extends": undefined,
          "properties": {
            "category": {
              "docs": "The category of this marketplace listing",
              "type": "optional<list<unknown>>",
            },
            "country": {
              "docs": "Origin country of this marketplace listing",
              "type": "optional<string>",
            },
            "created_at": {
              "docs": "Immutable Unix timestamp in milliseconds taken at time of company creation",
              "type": "optional<integer>",
            },
            "description": {
              "docs": "The description of the marketplace listing",
              "type": "optional<string>",
            },
            "key": {
              "docs": "Key of the marketplace listing",
              "type": "optional<string>",
            },
            "logo": {
              "docs": "Key of image for this marketplace listing",
              "type": "optional<string>",
            },
            "name": {
              "docs": "The name of the marketplace listing",
              "type": "optional<string>",
            },
            "offers": {
              "docs": "Available offers for the program",
              "type": "optional<list<unknown>>",
            },
            "website": {
              "docs": "The website of this marketplace listing",
              "type": "optional<string>",
            },
          },
        },
      },
    },
    "partnerships.yml": {
      "service": {
        "auth": false,
        "base-path": "/v2/partnerships",
        "endpoints": {
          "": {
            "display-name": "List all partnerships",
            "docs": "Returns a list of your partnerships. The partnerships are returned sorted by creation date by default, with the most recent partnerships appearing first.",
            "method": "GET",
            "path": "",
            "response": "unknown",
          },
          "_unnamedOperation23": {
            "display-name": "Create a partnership",
            "docs": "Creates a new partnership with the data provided.",
            "method": "POST",
            "path": "",
            "request": {
              "body": "_InlinedType146",
            },
            "response": "unknown",
          },
          "_unnamedOperation24": {
            "display-name": "Retrieve a partnership",
            "docs": "Retrieves the details of an existing partnership.",
            "method": "GET",
            "path": "/{partnership_key}",
            "path-parameters": {
              "partnership_key": "string",
            },
            "response": "unknown",
          },
          "_unnamedOperation25": {
            "display-name": "Archive a partnership",
            "docs": "Archives a partnership.",
            "method": "DELETE",
            "path": "/{partnership_key}",
            "path-parameters": {
              "partnership_key": "string",
            },
            "response": "unknown",
          },
          "_unnamedOperation26": {
            "display-name": "Update a partnership",
            "docs": "Updates the specific partnership by setting the values of the parameters passed.",
            "method": "PATCH",
            "path": "/{partnership_key}",
            "path-parameters": {
              "partnership_key": "string",
            },
            "request": {
              "body": {
                "docs": "UpdateTarget",
                "extends": undefined,
                "properties": {
                  "fields": "optional<unknown>",
                  "group_key": {
                    "docs": "The key of the group within PartnerStack that you want this partner to be placed into.",
                    "type": "optional<string>",
                  },
                  "manager_email": {
                    "docs": "The email of the partner manager that you would like to assign this partner.",
                    "type": "optional<string>",
                  },
                  "tier_key": {
                    "docs": "The key of the tier within PartnerStack that you want this partner to be placed into.",
                    "type": "optional<string>",
                  },
                },
              },
            },
            "response": "unknown",
          },
          "_unnamedOperation27": {
            "display-name": "Updates a partnership's tags",
            "docs": "Add or remove tags from the specified partnership.",
            "method": "PATCH",
            "path": "/{partnership_key}/tags",
            "path-parameters": {
              "partnership_key": "string",
            },
            "request": {
              "body": {
                "docs": "UpdateTagsForTarget",
                "extends": undefined,
                "properties": {
                  "add": {
                    "docs": "Specifies a list of tags to be associated/added to the partnership",
                    "type": "optional<list<unknown>>",
                  },
                  "remove": {
                    "docs": "Specifies a list of tags to be disassociated/removed from the partnership",
                    "type": "optional<list<unknown>>",
                  },
                },
              },
            },
            "response": "unknown",
          },
        },
        "path-parameters": undefined,
      },
      "types": {
        "_InlinedType137": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": {
              "docs": "Immutable Unix timestamp in milliseconds taken at time of creation",
              "type": "optional<integer>",
            },
            "key": {
              "docs": "A unique identifier used to reference the object",
              "type": "optional<string>",
            },
            "updated_at": {
              "docs": "Unix timestamp in milliseconds taken at time of last update",
              "type": "optional<integer>",
            },
          },
        },
        "_InlinedType138": {
          "docs": "Partnerships represent companies that you are partnered with and promoting on PartnerStack",
          "extends": undefined,
          "properties": {
            "address": {
              "docs": "Partnership's address information.",
              "type": "optional<_InlinedType139>",
            },
            "email": {
              "docs": "email address for the partner",
              "type": "optional<string>",
            },
            "first_name": {
              "docs": "first name of the partner",
              "type": "optional<string>",
            },
            "group": {
              "docs": "partnership's group information",
              "type": "optional<_InlinedType140>",
            },
            "joined_at": {
              "docs": "timestamp for when the partner joined partnerstack",
              "type": "optional<integer>",
            },
            "last_name": {
              "docs": "last name of the partner",
              "type": "optional<string>",
            },
            "manager": {
              "docs": "partnership's manager information if applicable",
              "type": "optional<_InlinedType141>",
            },
            "mdata": {
              "docs": "partnership metadata",
              "type": "optional<map<string, unknown>>",
            },
            "partner_key": {
              "docs": "key used externally when referencing the partnership",
              "type": "optional<string>",
            },
            "stats": {
              "docs": "latest stats data for partnership",
              "type": "optional<map<string, unknown>>",
            },
            "tags": {
              "docs": "List of tags associated with the partnership",
              "type": "optional<list<unknown>>",
            },
          },
        },
        "_InlinedType142": "unknown",
        "_InlinedType143": {
          "docs": "**Partners** represent users on PartnerStack that will be promoting your company.",
          "extends": undefined,
          "properties": {
            "email": {
              "docs": "The email of the partner.",
              "type": "optional<string>",
            },
            "field_data": {
              "docs": "DEPRECATED 'fields' should be the source of truth",
              "type": "optional<map<string, unknown>>",
            },
            "fields": "optional<unknown>",
            "first_name": {
              "docs": "The first name of the partner.",
              "type": "optional<string>",
            },
            "last_name": {
              "docs": "The last name of the partner.",
              "type": "optional<string>",
            },
            "manager_email": {
              "docs": "The email of the Partner Manager who you wish to manage this partner.",
              "type": "optional<string>",
            },
            "manager_name": {
              "docs": "The name of the Partner Manager who you wish to manage this partner.",
              "type": "optional<string>",
            },
            "meta": {
              "docs": "DEPRECATED 'fields' should be the source of truth",
              "type": "optional<map<string, unknown>>",
            },
            "partner_key": {
              "docs": "The \`partner_key\` you wish to use for this partner. If included, **must** be unique to this partner. For more information on \`partner_key\` see PartnerStackJS.",
              "type": "optional<string>",
            },
            "tags": "optional<unknown>",
          },
        },
        "_InlinedType145": "unknown",
        "_InlinedType146": "unknown",
        "_InlinedType147": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": {
              "docs": "Immutable Unix timestamp in milliseconds taken at time of creation",
              "type": "optional<integer>",
            },
            "key": {
              "docs": "A unique identifier used to reference the object",
              "type": "optional<string>",
            },
            "updated_at": {
              "docs": "Unix timestamp in milliseconds taken at time of last update",
              "type": "optional<integer>",
            },
          },
        },
        "_InlinedType148": "unknown",
        "_InlinedType155": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": {
              "docs": "Immutable Unix timestamp in milliseconds taken at time of creation",
              "type": "optional<integer>",
            },
            "key": {
              "docs": "A unique identifier used to reference the object",
              "type": "optional<string>",
            },
            "updated_at": {
              "docs": "Unix timestamp in milliseconds taken at time of last update",
              "type": "optional<integer>",
            },
          },
        },
        "_InlinedType156": "unknown",
        "_InlinedType163": "unknown",
        "_InlinedType165": {
          "docs": "**Partners** represent users on PartnerStack that will be promoting your company.",
          "extends": undefined,
          "properties": {
            "email": {
              "docs": "The email of the partner.",
              "type": "optional<string>",
            },
            "field_data": {
              "docs": "DEPRECATED 'fields' should be the source of truth",
              "type": "optional<map<string, unknown>>",
            },
            "fields": "optional<unknown>",
            "first_name": {
              "docs": "The first name of the partner.",
              "type": "optional<string>",
            },
            "last_name": {
              "docs": "The last name of the partner.",
              "type": "optional<string>",
            },
            "manager_email": {
              "docs": "The email of the Partner Manager who you wish to manage this partner.",
              "type": "optional<string>",
            },
            "manager_name": {
              "docs": "The name of the Partner Manager who you wish to manage this partner.",
              "type": "optional<string>",
            },
            "meta": {
              "docs": "DEPRECATED 'fields' should be the source of truth",
              "type": "optional<map<string, unknown>>",
            },
            "partner_key": {
              "docs": "The \`partner_key\` you wish to use for this partner. If included, **must** be unique to this partner. For more information on \`partner_key\` see PartnerStackJS.",
              "type": "optional<string>",
            },
            "tags": "optional<unknown>",
          },
        },
        "_InlinedType167": "unknown",
        "_InlinedType171": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": {
              "docs": "Immutable Unix timestamp in milliseconds taken at time of creation",
              "type": "optional<integer>",
            },
            "key": {
              "docs": "A unique identifier used to reference the object",
              "type": "optional<string>",
            },
            "updated_at": {
              "docs": "Unix timestamp in milliseconds taken at time of last update",
              "type": "optional<integer>",
            },
          },
        },
        "_InlinedType172": "unknown",
        "_InlinedType179": {
          "docs": "Response schema for the PatchUpdateTagsForPartnership endpoint",
          "extends": undefined,
          "properties": {
            "partnership": "optional<unknown>",
            "tags_added": "optional<unknown>",
            "tags_not_found": "optional<unknown>",
            "tags_removed": "optional<unknown>",
          },
        },
      },
    },
    "rewards.yml": {
      "service": {
        "auth": false,
        "base-path": "/v2/rewards",
        "endpoints": {
          "": {
            "display-name": "List all rewards",
            "docs": "Returns a list of your rewards. The rewards are returned sorted by creation date by default, with the most recent rewards appearing first.",
            "method": "GET",
            "path": "",
            "response": "unknown",
          },
          "_unnamedOperation28": {
            "display-name": "Create a reward",
            "docs": "Creates a new reward for a given target.",
            "method": "POST",
            "path": "",
            "request": {
              "body": {
                "docs": "Reward is what the Partner earns.",
                "extends": undefined,
                "properties": {
                  "amount": {
                    "docs": "The amount of the reward in cents (USD)",
                    "type": "integer",
                  },
                  "description": {
                    "docs": "The description of what this reward is for",
                    "type": "string",
                  },
                  "target": "unknown",
                },
              },
            },
            "response": "unknown",
          },
        },
        "path-parameters": undefined,
      },
      "types": {
        "_InlinedType180": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": {
              "docs": "Immutable Unix timestamp in milliseconds taken at time of creation",
              "type": "optional<integer>",
            },
            "key": {
              "docs": "A unique identifier used to reference the object",
              "type": "optional<string>",
            },
            "updated_at": {
              "docs": "Unix timestamp in milliseconds taken at time of last update",
              "type": "optional<integer>",
            },
          },
        },
        "_InlinedType181": "unknown",
        "_InlinedType194": {
          "docs": "The type of the target for the reward",
          "enum": [
            "customer",
            "transaction",
            "manual",
          ],
        },
        "_InlinedType195": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": {
              "docs": "Immutable Unix timestamp in milliseconds taken at time of creation",
              "type": "optional<integer>",
            },
            "key": {
              "docs": "A unique identifier used to reference the object",
              "type": "optional<string>",
            },
            "updated_at": {
              "docs": "Unix timestamp in milliseconds taken at time of last update",
              "type": "optional<integer>",
            },
          },
        },
        "_InlinedType196": {
          "docs": "Reward is what the Partner earns.",
          "extends": undefined,
          "properties": {
            "amount": {
              "docs": "The amount of the reward in cents (USD)",
              "type": "integer",
            },
            "description": {
              "docs": "The description of what this reward is for",
              "type": "string",
            },
            "target": "unknown",
          },
        },
      },
    },
    "transactions.yml": {
      "service": {
        "auth": false,
        "base-path": "/v2/transactions",
        "endpoints": {
          "": {
            "display-name": "List all transactions",
            "docs": "Returns a list of your transactions. The transactions are returned sorted by creation date, with the most recent transactions appearing first. ",
            "method": "GET",
            "path": "",
            "response": "unknown",
          },
          "_unnamedOperation29": {
            "display-name": "Create a transaction",
            "docs": "Creates a new transaction

Note that \`customer_external_key\` or \`customer_email\` can be provided in
place of \`customer_key\` to reference the customer.

These customer reference fields are required, but mutually exclusive
(i.e. you must provide exactly and only one of the three).",
            "method": "POST",
            "path": "",
            "request": {
              "body": "_InlinedType208",
            },
            "response": "unknown",
          },
        },
        "path-parameters": undefined,
      },
      "types": {
        "_InlinedType198": {
          "docs": "Transaction",
          "extends": [
            "_InlinedType199",
            "_InlinedType200",
            "_InlinedType201",
          ],
        },
        "_InlinedType202": "unknown",
        "_InlinedType204": {
          "docs": "Transaction",
          "extends": [
            "_InlinedType198",
            "_InlinedType202",
          ],
        },
        "_InlinedType205": {
          "docs": "Transaction Base",
          "extends": undefined,
          "properties": {
            "amount": {
              "docs": "Transaction amount in cents for specified currency.",
              "type": "optional<integer>",
            },
            "category_key": {
              "docs": "Key of transaction category.",
              "type": "optional<string>",
            },
            "currency": {
              "docs": "Transaction currency type.",
              "type": "optional<string>",
            },
            "customer_key": {
              "docs": "Key of customer who made the transaction.",
              "type": "optional<string>",
            },
            "key": {
              "docs": "Key of transaction record in PartnerStack.",
              "type": "optional<string>",
            },
            "metadata": {
              "docs": "Additional data that can be provided for the transaction on creation. Note that you can only store a maximum of 25 metadata attributes. The value of each attribute cannot exceed 100 characters, and the name of each attribute cannot exceed 30 characters.",
              "type": "optional<map<string, unknown>>",
            },
            "product_key": {
              "docs": "Key of transaction product.",
              "type": "optional<string>",
            },
          },
        },
        "_InlinedType206": "unknown",
        "_InlinedType207": "unknown",
        "_InlinedType208": "unknown",
        "_InlinedType209": {
          "docs": "Transaction",
          "extends": [
            "_InlinedType210",
            "_InlinedType214",
          ],
        },
      },
    },
    "webhooks.yml": {
      "service": {
        "auth": false,
        "base-path": "/v2/webhooks",
        "endpoints": {
          "": {
            "display-name": "List all webhooks",
            "docs": "Returns a list of your webhooks. The webhooks are
    returned sorted by creation date, with the most recent webhooks
    appearing first.",
            "method": "GET",
            "path": "",
            "response": "unknown",
          },
          "_unnamedOperation30": {
            "display-name": "Create a webhook",
            "docs": "Webhooks deliver POST requests to the target URL when the specified events are triggered.",
            "method": "POST",
            "path": "",
            "request": {
              "body": "_InlinedType221",
            },
            "response": "unknown",
          },
          "_unnamedOperation31": {
            "display-name": "Retrieve a webhook",
            "docs": "Retrieves the details of an existing webhook. You
    need only supply the unique webhook key that was returned upon
    webhook creation.",
            "method": "GET",
            "path": "/{webhook_key}",
            "path-parameters": {
              "webhook_key": "string",
            },
            "response": "unknown",
          },
          "_unnamedOperation32": {
            "display-name": "Archive a webhook",
            "docs": "Webhook events will no longer be delivered to the attached endpoints.",
            "method": "DELETE",
            "path": "/{webhook_key}",
            "path-parameters": {
              "webhook_key": "string",
            },
            "response": "unknown",
          },
          "_unnamedOperation33": {
            "display-name": "Update a webhook",
            "docs": "Updates the specified webhook by setting the values of the parameters passed.",
            "method": "PATCH",
            "path": "/{webhook_key}",
            "path-parameters": {
              "webhook_key": "string",
            },
            "request": {
              "body": "_InlinedType233",
            },
            "response": "unknown",
          },
        },
        "path-parameters": undefined,
      },
      "types": {
        "_InlinedType216": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": {
              "docs": "Immutable Unix timestamp in milliseconds taken at time of creation",
              "type": "optional<integer>",
            },
            "key": {
              "docs": "A unique identifier used to reference the object",
              "type": "optional<string>",
            },
            "updated_at": {
              "docs": "Unix timestamp in milliseconds taken at time of last update",
              "type": "optional<integer>",
            },
          },
        },
        "_InlinedType217": {
          "docs": "Webhook Base",
          "extends": undefined,
          "properties": {
            "events": {
              "docs": "A list of events to send to the registered Webhook.",
              "type": "optional<list<unknown>>",
            },
            "target_url": {
              "docs": "URL endpoint Webhook data will be sent to.",
              "type": "optional<string>",
            },
          },
        },
        "_InlinedType218": {
          "docs": "Webhook",
          "extends": [
            "_InlinedType216",
            "_InlinedType217",
          ],
        },
        "_InlinedType219": {
          "docs": "Webhook Base",
          "extends": undefined,
          "properties": {
            "events": {
              "docs": "A list of events to send to the registered Webhook.",
              "type": "optional<list<unknown>>",
            },
            "target_url": {
              "docs": "URL endpoint Webhook data will be sent to.",
              "type": "optional<string>",
            },
          },
        },
        "_InlinedType220": "unknown",
        "_InlinedType221": "unknown",
        "_InlinedType222": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": {
              "docs": "Immutable Unix timestamp in milliseconds taken at time of creation",
              "type": "optional<integer>",
            },
            "key": {
              "docs": "A unique identifier used to reference the object",
              "type": "optional<string>",
            },
            "updated_at": {
              "docs": "Unix timestamp in milliseconds taken at time of last update",
              "type": "optional<integer>",
            },
          },
        },
        "_InlinedType223": {
          "docs": "Webhook Base",
          "extends": undefined,
          "properties": {
            "events": {
              "docs": "A list of events to send to the registered Webhook.",
              "type": "optional<list<unknown>>",
            },
            "target_url": {
              "docs": "URL endpoint Webhook data will be sent to.",
              "type": "optional<string>",
            },
          },
        },
        "_InlinedType224": {
          "docs": "Webhook",
          "extends": [
            "_InlinedType222",
            "_InlinedType223",
          ],
        },
        "_InlinedType225": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": {
              "docs": "Immutable Unix timestamp in milliseconds taken at time of creation",
              "type": "optional<integer>",
            },
            "key": {
              "docs": "A unique identifier used to reference the object",
              "type": "optional<string>",
            },
            "updated_at": {
              "docs": "Unix timestamp in milliseconds taken at time of last update",
              "type": "optional<integer>",
            },
          },
        },
        "_InlinedType226": {
          "docs": "Webhook Base",
          "extends": undefined,
          "properties": {
            "events": {
              "docs": "A list of events to send to the registered Webhook.",
              "type": "optional<list<unknown>>",
            },
            "target_url": {
              "docs": "URL endpoint Webhook data will be sent to.",
              "type": "optional<string>",
            },
          },
        },
        "_InlinedType227": {
          "docs": "Webhook",
          "extends": [
            "_InlinedType225",
            "_InlinedType226",
          ],
        },
        "_InlinedType228": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": {
              "docs": "Immutable Unix timestamp in milliseconds taken at time of creation",
              "type": "optional<integer>",
            },
            "key": {
              "docs": "A unique identifier used to reference the object",
              "type": "optional<string>",
            },
            "updated_at": {
              "docs": "Unix timestamp in milliseconds taken at time of last update",
              "type": "optional<integer>",
            },
          },
        },
        "_InlinedType229": {
          "docs": "Webhook Base",
          "extends": undefined,
          "properties": {
            "events": {
              "docs": "A list of events to send to the registered Webhook.",
              "type": "optional<list<unknown>>",
            },
            "target_url": {
              "docs": "URL endpoint Webhook data will be sent to.",
              "type": "optional<string>",
            },
          },
        },
        "_InlinedType230": {
          "docs": "Webhook",
          "extends": [
            "_InlinedType228",
            "_InlinedType229",
          ],
        },
        "_InlinedType231": {
          "docs": "Webhook Base",
          "extends": undefined,
          "properties": {
            "events": {
              "docs": "A list of events to send to the registered Webhook.",
              "type": "optional<list<unknown>>",
            },
            "target_url": {
              "docs": "URL endpoint Webhook data will be sent to.",
              "type": "optional<string>",
            },
          },
        },
        "_InlinedType232": "unknown",
        "_InlinedType233": "unknown",
        "_InlinedType234": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": {
              "docs": "Immutable Unix timestamp in milliseconds taken at time of creation",
              "type": "optional<integer>",
            },
            "key": {
              "docs": "A unique identifier used to reference the object",
              "type": "optional<string>",
            },
            "updated_at": {
              "docs": "Unix timestamp in milliseconds taken at time of last update",
              "type": "optional<integer>",
            },
          },
        },
        "_InlinedType235": {
          "docs": "Webhook Base",
          "extends": undefined,
          "properties": {
            "events": {
              "docs": "A list of events to send to the registered Webhook.",
              "type": "optional<list<unknown>>",
            },
            "target_url": {
              "docs": "URL endpoint Webhook data will be sent to.",
              "type": "optional<string>",
            },
          },
        },
        "_InlinedType236": {
          "docs": "Webhook",
          "extends": [
            "_InlinedType234",
            "_InlinedType235",
          ],
        },
      },
    },
  },
}
`;

exports[`open api converter suger simple 1`] = `
{
  "rootApiFile": {
    "auth": undefined,
    "auth-schemes": undefined,
    "display-name": "Suger API",
    "headers": {},
    "name": "api",
  },
  "serviceFiles": {
    "__package__.yml": {},
    "apiAuth.yml": {
      "service": {
        "auth": false,
        "base-path": "/public/apiClient/accessToken",
        "endpoints": {
          "": {
            "display-name": "Get the Bearer Access Token to access Suger API",
            "docs": "Get the Bearer Access Token by giving the Suger API Client ID & Client Secret.",
            "method": "POST",
            "path": "",
            "request": {
              "body": "shared.GetApiClientAccessTokenParams",
            },
            "response": "shared.ApiClientAccessToken",
          },
        },
        "path-parameters": undefined,
      },
      "types": {
        "shared.ApiClientAccessToken": "unknown",
        "shared.GetApiClientAccessTokenParams": "unknown",
      },
    },
    "buyer.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "service": {
        "auth": false,
        "base-path": "/org/{orgId}/buyer",
        "endpoints": {
          "": {
            "display-name": "List all buyers under the organization",
            "docs": undefined,
            "method": "GET",
            "path": "",
            "response": "unknown",
          },
          "_unnamedOperation7": {
            "display-name": "Get the buyer",
            "docs": undefined,
            "method": "GET",
            "path": "/{buyerId}",
            "path-parameters": {
              "buyerId": "string",
            },
            "response": "commons.shared.IdentityBuyer",
          },
          "_unnamedOperation8": {
            "display-name": "Update the name & description of the buyer",
            "docs": undefined,
            "method": "PATCH",
            "path": "/{buyerId}",
            "path-parameters": {
              "buyerId": "string",
            },
            "request": {
              "body": "lib.UpdateBuyerNameDescriptionParams",
            },
            "response": "commons.shared.IdentityBuyer",
          },
        },
        "path-parameters": {
          "orgId": {
            "docs": "Organization ID",
            "type": "string",
          },
        },
      },
      "types": {
        "lib.UpdateBuyerNameDescriptionParams": "unknown",
      },
    },
    "commons.yml": {
      "types": {
        "_InlinedType10": "unknown",
        "_InlinedType11": "unknown",
        "_InlinedType12": "unknown",
        "_InlinedType13": "unknown",
        "_InlinedType14": "unknown",
        "_InlinedType15": "unknown",
        "_InlinedType16": {
          "docs": "The default visibility of offer is PRIVATE.",
          "enum": [
            "PRIVATE",
            "PUBLIC",
          ],
        },
        "_InlinedType17": "unknown",
        "_InlinedType4": "unknown",
        "_InlinedType5": {
          "docs": "The term unit for the commit amount.",
          "enum": [
            "DAY",
            "MONTH",
            "YEAR",
          ],
        },
        "_InlinedType6": {
          "docs": "The Commit Dimension Type.",
          "enum": [
            "FLAT_RATE",
            "PER_USER",
          ],
        },
        "_InlinedType7": {
          "docs": "Enums of the Entitlement State. https://cloud.google.com/marketplace/docs/partners/commerce-procurement-api/reference/rest/v1/providers.entitlements#EntitlementState",
          "enum": [
            "ENTITLEMENT_STATE_UNSPECIFIED",
            "ENTITLEMENT_ACTIVATION_REQUESTED",
            "ENTITLEMENT_ACTIVE",
            "ENTITLEMENT_PENDING_CANCELLATION",
            "ENTITLEMENT_CANCELLED",
            "ENTITLEMENT_PENDING_PLAN_CHANGE",
            "ENTITLEMENT_PENDING_PLAN_CHANGE_APPROVAL",
            "ENTITLEMENT_SUSPENDED",
          ],
        },
        "_InlinedType8": {
          "docs": "The state of the account. An account might not be able to make a purchase if the billing account is suspended, for example.",
          "enum": [
            "ACCOUNT_STATE_UNSPECIFIED",
            "ACCOUNT_ACTIVE",
          ],
        },
        "_InlinedType9": "unknown",
        "http.Header": "unknown",
        "marketplacemetering.BatchMeterUsageOutput": "unknown",
        "marketplacemeteringv1.BatchUsageEventOkResponse": "unknown",
        "marketplacemeteringv1.UsageBatchEventOkMessage": "unknown",
        "marketplacemeteringv1.UsageEventConflictResponse": "unknown",
        "marketplacemeteringv1.UsageEventConflictResponseAdditionalInfo": "unknown",
        "marketplacemeteringv1.UsageEventOkResponse": "unknown",
        "middleware.Metadata": "unknown",
        "partnercentersubmission.AzureAudience": "unknown",
        "partnercentersubmission.AzureGovernmentCertification": "unknown",
        "partnercentersubmission.AzureListingContact": "unknown",
        "partnercentersubmission.AzureListingUri": "unknown",
        "partnercentersubmission.AzureLocalizedDateTime": "unknown",
        "partnercentersubmission.AzureLocalizedTimeRange": "unknown",
        "partnercentersubmission.AzureMarket": "unknown",
        "partnercentersubmission.AzureMarketState": "unknown",
        "partnercentersubmission.AzurePendingUpdateInfo": "unknown",
        "partnercentersubmission.AzurePrice": "unknown",
        "partnercentersubmission.AzurePriceCadence": "unknown",
        "partnercentersubmission.AzurePriceSchedule": "unknown",
        "partnercentersubmission.AzurePricingUnit": "unknown",
        "partnercentersubmission.AzureProduct": "unknown",
        "partnercentersubmission.AzureProductAvailability": "unknown",
        "partnercentersubmission.AzureProductBranch": "unknown",
        "partnercentersubmission.AzureProductFeatureAvailability": "unknown",
        "partnercentersubmission.AzureProductListing": "unknown",
        "partnercentersubmission.AzureProductListingAsset": "unknown",
        "partnercentersubmission.AzureProductPackageConfiguration": "unknown",
        "partnercentersubmission.AzureProductProperty": "unknown",
        "partnercentersubmission.AzureProductSetup": "unknown",
        "partnercentersubmission.AzureProductSubmission": "unknown",
        "partnercentersubmission.AzureProductVariant": "unknown",
        "partnercentersubmission.AzureProductVariantCustomMeter": "unknown",
        "partnercentersubmission.AzureProductVariantPriceSchedule": "unknown",
        "partnercentersubmission.AzureProductVariantTrial": "unknown",
        "partnercentersubmission.AzureValidationResult": "unknown",
        "partnercentersubmission.AzureVariantResource": "unknown",
        "partnercentersubmission.IncludedBaseQuantity": "unknown",
        "partnercentersubmission.TypeValue": "unknown",
        "servicecontrol.ReportError": "unknown",
        "servicecontrol.ReportResponse": "unknown",
        "servicecontrol.Status": "unknown",
        "shared.AwsAccountIdentifier": "unknown",
        "shared.AwsIntegration": {
          "docs": "The data struct to store integration info for Suger service to access the client's AWS services.",
          "extends": undefined,
          "properties": {
            "externalID": {
              "docs": "The external ID for assuming IAM role. If empty, means no external ID set or needed. Otherwise, it should be auth_id in table identity.organization.",
              "type": "optional<string>",
            },
            "iamRoleArn": {
              "docs": "The AWS IAM role for Suger service to assume to access the client's AWS services.",
              "type": "optional<string>",
            },
            "marketplaceStartDate": {
              "docs": "AWS Marketplace start date which comes from MDFS Full-Sync.",
              "type": "optional<string>",
            },
            "mcasFullSyncDone": {
              "docs": "Is AWS Marketplace Commerce Analytics Service (MCAS) full-sync done.",
              "type": "optional<boolean>",
            },
            "mcasIamRoleArn": {
              "docs": "IAM role ARN to allow AWS Marketplace to write to the S3 bucket and publish notifications to the SNS topic.",
              "type": "optional<string>",
            },
            "mcasS3Bucket": {
              "docs": "S3 bucket for AWS Marketplace Commerce Analytics Service (MCAS)",
              "type": "optional<string>",
            },
            "mcasSnsTopic": {
              "docs": "SNS topic ARN for AWS Marketplace Commerce Analytics Service (MCAS)",
              "type": "optional<string>",
            },
            "mdfsFullSyncDone": {
              "docs": "Is AWS Marketplace Data Feeds Service (MDFS) full-sync done.",
              "type": "optional<boolean>",
            },
            "mdfsKmsKeyArn": {
              "docs": "KMS Key ARN for the S3 bucket of AWS Marketplace Data Feeds Service (MDFS)",
              "type": "optional<string>",
            },
            "mdfsS3BucketArn": {
              "docs": "S3 bucket ARN for AWS Marketplace Data Feeds Service (MDFS)",
              "type": "optional<string>",
            },
            "policyArns": {
              "docs": "The policy ARNs in the IAM role.",
              "type": "optional<list<unknown>>",
            },
          },
        },
        "shared.AwsSaasProduct": "unknown",
        "shared.AwsSaasProductAdditionalResource": "unknown",
        "shared.AwsSaasProductDeliveryOption": "unknown",
        "shared.AwsSaasProductDescription": "unknown",
        "shared.AwsSaasProductDimension": "unknown",
        "shared.AwsSaasProductPromotionalResources": "unknown",
        "shared.AwsSaasProductSupportInformation": "unknown",
        "shared.AwsSaasProductVersion": "unknown",
        "shared.AwsSnsSubscription": "unknown",
        "shared.AzureADIdentifier": "unknown",
        "shared.AzureBuyerInfo": "unknown",
        "shared.AzureCredential": "unknown",
        "shared.AzureIntegration": "unknown",
        "shared.AzureMarketplaceSubscription": "unknown",
        "shared.AzureTerm": "unknown",
        "shared.BuyerInfo": "unknown",
        "shared.CommitDimension": {
          "docs": "The commit dimension. There may be one or more commit dimensions defined in single product, offer or entitlement.",
          "extends": undefined,
          "properties": {
            "category": "optional<unknown>",
            "description": "optional<unknown>",
            "key": {
              "docs": "API name of the dimension",
              "type": "optional<string>",
            },
            "length": {
              "docs": "The term length for the commit amount, such as 6 months, or 1 year. length is used together with timeUnit",
              "type": "optional<integer>",
            },
            "maximumUsers": {
              "docs": "The maximum number of users for PER_USER commit",
              "type": "optional<integer>",
            },
            "minimumUsers": {
              "docs": "The minimum number of users for PER_USER commit",
              "type": "optional<integer>",
            },
            "name": {
              "docs": "Display name of the dimension",
              "type": "optional<string>",
            },
            "quantity": {
              "docs": "The quantity of this commit.",
              "type": "optional<integer>",
            },
            "rate": {
              "docs": "The commit amount.",
              "type": "optional<double>",
            },
            "timeUnit": {
              "docs": "The term unit for the commit amount.",
              "type": "optional<_InlinedType5>",
            },
            "type": {
              "docs": "The Commit Dimension Type.",
              "type": "optional<_InlinedType6>",
            },
            "types": "optional<unknown>",
          },
        },
        "shared.CompanyInfo": "unknown",
        "shared.EntitlementInfo": "unknown",
        "shared.EntitlementTermInfo": "unknown",
        "shared.GcpCommerceProducerExternalAccountSpec": "unknown",
        "shared.GcpCommerceProducerListingSpec": "unknown",
        "shared.GcpCommerceProducerMarketingSpec": "unknown",
        "shared.GcpCommerceProducerPrice": "unknown",
        "shared.GcpCommerceProducerPriceInfo": "unknown",
        "shared.GcpCommerceProducerPriceSubscription": "unknown",
        "shared.GcpCommerceProducerPriceTier": "unknown",
        "shared.GcpCommerceProducerPriceUsage": "unknown",
        "shared.GcpCommerceProducerPurchaseMetric": "unknown",
        "shared.GcpCommerceProducerPurchaseSpec": "unknown",
        "shared.GcpCommerceProducerServiceBilling": "unknown",
        "shared.GcpCommerceProducerServiceConfig": "unknown",
        "shared.GcpCommerceProducerSupportSpec": "unknown",
        "shared.GcpIntegration": "unknown",
        "shared.GcpMarketplaceConsumer": "unknown",
        "shared.GcpMarketplaceEntitlement": "unknown",
        "shared.GcpMarketplaceUserAccount": "unknown",
        "shared.GcpMarketplaceUserAccountApproval": "unknown",
        "shared.GcpProduct": "unknown",
        "shared.GcpPurchasePlan": "unknown",
        "shared.GcpUserInfo": "unknown",
        "shared.IdentityBuyer": "unknown",
        "shared.IdentityIntegration": "unknown",
        "shared.IntegrationInfo": "unknown",
        "shared.ListUsageRecordGroupsResponse": "unknown",
        "shared.MeteringDimension": {
          "docs": "The dimension to meter usage in entitlement.",
          "extends": undefined,
          "properties": {
            "category": "optional<unknown>",
            "description": "optional<unknown>",
            "includedBaseQuantities": {
              "docs": "how many quantities of this dimension are included in the commit.",
              "type": "optional<list<partnercentersubmission.IncludedBaseQuantity>>",
            },
            "key": "optional<unknown>",
            "name": {
              "docs": "Display name of the dimension",
              "type": "optional<string>",
            },
            "rate": "optional<unknown>",
            "types": "optional<unknown>",
            "usageCount": "optional<shared.UsageCount>",
            "valueType": "optional<unknown>",
          },
        },
        "shared.MeteringUsageRecordGroup": "unknown",
        "shared.MeteringUsageRecordReport": "unknown",
        "shared.MeteringUsageRecordReportInfo": "unknown",
        "shared.OfferInfo": "unknown",
        "shared.PaymentInstallment": "unknown",
        "shared.ProductInfo": "unknown",
        "shared.RevenueRecord": "unknown",
        "shared.UsageCount": "unknown",
        "shared.WorkloadEntitlement": "unknown",
        "shared.WorkloadEntitlementTerm": "unknown",
        "shared.WorkloadOffer": "unknown",
        "shared.WorkloadProduct": "unknown",
        "types.Entitlement": "unknown",
        "types.Tag": "unknown",
        "types.UsageAllocation": "unknown",
        "types.UsageRecord": "unknown",
        "types.UsageRecordResult": "unknown",
      },
    },
    "entitlement.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "service": {
        "auth": false,
        "base-path": "/org/{orgId}",
        "endpoints": {
          "": {
            "display-name": "Add Credit Amount in Entitlement.",
            "docs": "Add Credit Amount to the given Entitlement. The credit amount is accumulated & saved in the current Entitlement Term of the gvien Entitlement.",
            "method": "POST",
            "path": "/addEntitlementCredit",
            "request": {
              "body": "shared.AddEntitlementCreditParams",
            },
            "response": "shared.AddEntitlementCreditResponse",
          },
          "_unnamedOperation0": {
            "display-name": "List all entitlements of the buyer",
            "docs": undefined,
            "method": "GET",
            "path": "/buyer/{buyerId}/entitlement",
            "path-parameters": {
              "buyerId": "string",
            },
            "response": "unknown",
          },
          "_unnamedOperation1": {
            "display-name": "List all entitlements under the organization",
            "docs": undefined,
            "method": "GET",
            "path": "/entitlement",
            "response": "unknown",
          },
          "_unnamedOperation2": {
            "display-name": "Get entitlement",
            "docs": undefined,
            "method": "GET",
            "path": "/entitlement/{entitlementId}",
            "path-parameters": {
              "entitlementId": "string",
            },
            "response": "commons.shared.WorkloadEntitlement",
          },
          "_unnamedOperation3": {
            "display-name": "Update entitlement name",
            "docs": undefined,
            "method": "PATCH",
            "path": "/entitlement/{entitlementId}/entitlementName",
            "path-parameters": {
              "entitlementId": "string",
            },
            "request": {
              "body": "lib.UpdateEntitlementNameParams",
            },
            "response": "commons.shared.WorkloadEntitlement",
          },
          "_unnamedOperation4": {
            "display-name": "List all entitlements under the offer",
            "docs": undefined,
            "method": "GET",
            "path": "/offer/{offerId}/entitlement",
            "path-parameters": {
              "offerId": "string",
            },
            "response": "unknown",
          },
          "_unnamedOperation5": {
            "display-name": "List all entitlements under the partner",
            "docs": undefined,
            "method": "GET",
            "path": "/partner/{partner}/entitlement",
            "path-parameters": {
              "partner": "string",
            },
            "response": "unknown",
          },
          "_unnamedOperation6": {
            "display-name": "List all entitlements under the product",
            "docs": undefined,
            "method": "GET",
            "path": "/product/{productId}/entitlement",
            "path-parameters": {
              "productId": "string",
            },
            "response": "unknown",
          },
        },
        "path-parameters": {
          "orgId": {
            "docs": "Organization ID",
            "type": "string",
          },
        },
      },
      "types": {
        "lib.UpdateEntitlementNameParams": "unknown",
        "shared.AddEntitlementCreditParams": "unknown",
        "shared.AddEntitlementCreditResponse": "unknown",
      },
    },
    "entitlementTerm.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "service": {
        "auth": false,
        "base-path": "/org/{orgId}/entitlement/{entitlementId}/entitlementTerm",
        "endpoints": {
          "": {
            "display-name": "List all Entitlement Terms of the Entitlement.",
            "docs": undefined,
            "method": "GET",
            "path": "",
            "response": "unknown",
          },
          "_unnamedOperation9": {
            "display-name": "Get an Entitlement Term.",
            "docs": undefined,
            "method": "GET",
            "path": "/{entitlementTermId}",
            "path-parameters": {
              "entitlementTermId": "string",
            },
            "response": "commons.shared.WorkloadEntitlementTerm",
          },
        },
        "path-parameters": {
          "entitlementId": {
            "docs": "Entitlement ID",
            "type": "string",
          },
          "orgId": {
            "docs": "Organization ID",
            "type": "string",
          },
        },
      },
    },
    "integration.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "service": {
        "auth": false,
        "base-path": "/org/{orgId}/integration",
        "endpoints": {
          "": {
            "display-name": "List all integrations under the organization",
            "docs": undefined,
            "method": "GET",
            "path": "",
            "response": "unknown",
          },
          "_unnamedOperation15": {
            "display-name": "Create an integration.",
            "docs": "For each organization, partner & service, there should be at most one integration.",
            "method": "POST",
            "path": "",
            "request": {
              "body": "shared.CreateIntegrationParams",
            },
            "response": "commons.shared.IdentityIntegration",
          },
          "_unnamedOperation16": {
            "display-name": "Get the integration for the given organization, partner & service.",
            "docs": undefined,
            "method": "GET",
            "path": "/{partner}/{service}",
            "path-parameters": {
              "partner": "string",
              "service": "string",
            },
            "response": "commons.shared.IdentityIntegration",
          },
          "_unnamedOperation17": {
            "display-name": "Delete the integration.",
            "docs": undefined,
            "method": "DELETE",
            "path": "/{partner}/{service}",
            "path-parameters": {
              "partner": "string",
              "service": "string",
            },
            "response": "unknown",
          },
          "_unnamedOperation18": {
            "display-name": "Update the integration.",
            "docs": undefined,
            "method": "PATCH",
            "path": "/{partner}/{service}",
            "path-parameters": {
              "partner": "string",
              "service": "string",
            },
            "request": {
              "body": "shared.UpdateIntegrationParams",
            },
            "response": "commons.shared.IdentityIntegration",
          },
          "_unnamedOperation19": {
            "display-name": "Verify the integration, check whether it works correctly.",
            "docs": undefined,
            "method": "POST",
            "path": "/{partner}/{service}/verify",
            "path-parameters": {
              "partner": "string",
              "service": "string",
            },
            "response": "unknown",
          },
        },
        "path-parameters": {
          "orgId": {
            "docs": "Organization ID",
            "type": "string",
          },
        },
      },
      "types": {
        "shared.CreateIntegrationParams": "unknown",
        "shared.UpdateIntegrationParams": "unknown",
      },
    },
    "metering.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "service": {
        "auth": false,
        "base-path": "/org/{orgId}",
        "endpoints": {
          "": {
            "display-name": "list all UsageRecordGroups under the given entitlement",
            "docs": undefined,
            "method": "GET",
            "path": "/entitlement/{entitlementId}/usageRecordGroup",
            "path-parameters": {
              "entitlementId": "string",
            },
            "response": "commons.shared.ListUsageRecordGroupsResponse",
          },
          "_unnamedOperation10": {
            "display-name": "Report new UsageRecordGroup.",
            "docs": "It is recommended to provide the ID in the request body CreateUsageRecordGroupParams, so the report can be deduplicated. All duplicate report will return error code 409.",
            "method": "POST",
            "path": "/entitlement/{entitlementId}/usageRecordGroup",
            "path-parameters": {
              "entitlementId": "string",
            },
            "request": {
              "body": "shared.CreateUsageRecordGroupParams",
            },
            "response": "commons.shared.MeteringUsageRecordGroup",
          },
          "_unnamedOperation11": {
            "display-name": "list all UsageRecordReports under the given entitlement",
            "docs": undefined,
            "method": "GET",
            "path": "/entitlement/{entitlementId}/usageRecordReport",
            "path-parameters": {
              "entitlementId": "string",
            },
            "response": "shared.ListUsageRecordReportsResponse",
          },
          "_unnamedOperation12": {
            "display-name": "list all UsageRecordGroups under the given product",
            "docs": undefined,
            "method": "GET",
            "path": "/product/{productId}/usageRecordGroup",
            "path-parameters": {
              "productId": "string",
            },
            "response": "commons.shared.ListUsageRecordGroupsResponse",
          },
          "_unnamedOperation13": {
            "display-name": "list all UsageRecordGroups under the given organization",
            "docs": undefined,
            "method": "GET",
            "path": "/usageRecordGroup",
            "response": "commons.shared.ListUsageRecordGroupsResponse",
          },
          "_unnamedOperation14": {
            "display-name": "get an UsageRecordGroup by organization_entitlement_usageRecordGroup id",
            "docs": undefined,
            "method": "GET",
            "path": "/usageRecordGroup/{usageRecordGroupId}",
            "path-parameters": {
              "usageRecordGroupId": "string",
            },
            "response": "commons.shared.MeteringUsageRecordGroup",
          },
        },
        "path-parameters": {
          "orgId": {
            "docs": "Organization ID",
            "type": "string",
          },
        },
      },
      "types": {
        "_InlinedType0": "unknown",
        "shared.CreateUsageRecordGroupParams": "unknown",
        "shared.ListUsageRecordReportsResponse": "unknown",
      },
    },
    "offer.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "service": {
        "auth": false,
        "base-path": "/org/{orgId}",
        "endpoints": {
          "": {
            "display-name": "List all offers under the organization",
            "docs": undefined,
            "method": "GET",
            "path": "/offer",
            "response": "unknown",
          },
          "_unnamedOperation20": {
            "display-name": "Create a private offer.",
            "docs": undefined,
            "method": "POST",
            "path": "/offer",
            "request": {
              "body": "shared.CreateOfferParams",
            },
            "response": "commons.shared.WorkloadOffer",
          },
          "_unnamedOperation21": {
            "display-name": "Get the offer.",
            "docs": undefined,
            "method": "GET",
            "path": "/offer/{offerId}",
            "path-parameters": {
              "offerId": "string",
            },
            "response": "commons.shared.WorkloadOffer",
          },
          "_unnamedOperation22": {
            "display-name": "Delete the offer.",
            "docs": "Currently only the offer with status = "CREATE_PENDING" or "CREATE_FAILED" is allowed to be deleted.",
            "method": "DELETE",
            "path": "/offer/{offerId}",
            "path-parameters": {
              "offerId": "string",
            },
            "response": "unknown",
          },
          "_unnamedOperation23": {
            "display-name": "List all offers under the cloud partner.",
            "docs": undefined,
            "method": "GET",
            "path": "/partner/{partner}/offer",
            "path-parameters": {
              "partner": "string",
            },
            "response": "unknown",
          },
          "_unnamedOperation24": {
            "display-name": "List all offers under the product.",
            "docs": undefined,
            "method": "GET",
            "path": "/product/{productId}/offer",
            "path-parameters": {
              "productId": "string",
            },
            "response": "unknown",
          },
        },
        "path-parameters": {
          "orgId": {
            "docs": "Organization ID",
            "type": "string",
          },
        },
      },
      "types": {
        "_InlinedType1": {
          "docs": "Optional",
          "enum": [
            "DEFAULT",
            "COMMIT",
            "SUBSCRIBE",
            "FREE_TRIAL",
            "FLAT_RATE",
            "PER_USER",
            "UNKNOWN",
          ],
        },
        "shared.CreateOfferParams": "unknown",
      },
    },
    "operation.yml": {
      "service": {
        "auth": false,
        "base-path": "/org/{orgId}/operation",
        "endpoints": {
          "": {
            "display-name": "list all long running operations under the given organization, offer or entitlement.",
            "docs": "The operations can be filtered by offerId or entitlementId. If both of them are provided, then it is filtered by entitlementId only.",
            "method": "GET",
            "path": "",
            "response": "unknown",
          },
        },
        "path-parameters": {
          "orgId": {
            "docs": "Organization ID",
            "type": "string",
          },
        },
      },
      "types": {
        "shared.Operation": "unknown",
      },
    },
    "product.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "service": {
        "auth": false,
        "base-path": "/org/{orgId}",
        "endpoints": {
          "": {
            "display-name": "List all products under the cloud partner",
            "docs": undefined,
            "method": "GET",
            "path": "/partner/{partner}/product",
            "path-parameters": {
              "partner": "string",
            },
            "response": "unknown",
          },
          "_unnamedOperation25": {
            "display-name": "List all products under the organization",
            "docs": undefined,
            "method": "GET",
            "path": "/product",
            "response": "unknown",
          },
          "_unnamedOperation26": {
            "display-name": "Create an Product & List it to the Partner's marketplace.",
            "docs": undefined,
            "method": "POST",
            "path": "/product",
            "request": {
              "body": "shared.CreateProductParams",
            },
            "response": "commons.shared.WorkloadProduct",
          },
          "_unnamedOperation27": {
            "display-name": "Get the Product",
            "docs": undefined,
            "method": "GET",
            "path": "/product/{productId}",
            "path-parameters": {
              "productId": "string",
            },
            "response": "commons.shared.WorkloadProduct",
          },
          "_unnamedOperation28": {
            "display-name": "Delete the product.",
            "docs": "Currently only the product with status = "CREATE_PENDING" or "CREATE_FAILED" is allowed to be deleted.",
            "method": "DELETE",
            "path": "/product/{productId}",
            "path-parameters": {
              "productId": "string",
            },
            "response": "unknown",
          },
          "_unnamedOperation29": {
            "display-name": "Currently, only the Fulfillment URL is allowed to update.",
            "docs": undefined,
            "method": "PATCH",
            "path": "/product/{productId}",
            "path-parameters": {
              "productId": "string",
            },
            "request": {
              "body": "shared.UpdateProductParams",
            },
            "response": "commons.shared.WorkloadProduct",
          },
          "_unnamedOperation30": {
            "display-name": "List the Metering Dimensions of the Product",
            "docs": undefined,
            "method": "GET",
            "path": "/product/{productId}/dimension",
            "path-parameters": {
              "productId": "string",
            },
            "response": "unknown",
          },
        },
        "path-parameters": {
          "orgId": {
            "docs": "Organization ID",
            "type": "string",
          },
        },
      },
      "types": {
        "shared.CreateProductParams": "unknown",
        "shared.UpdateProductParams": "unknown",
      },
    },
    "report.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "service": {
        "auth": false,
        "base-path": "/org/{orgId}",
        "endpoints": {
          "": {
            "display-name": "Get the revenue report.",
            "docs": "Get the revenue report of the given organization, product, entitlement, or buyer.",
            "method": "POST",
            "path": "/revenueReport",
            "request": {
              "body": "shared.GetRevenueReportParams",
            },
            "response": "shared.RevenueReport",
          },
          "_unnamedOperation31": {
            "display-name": "Get the usage report.",
            "docs": "Get the daily usage report of the given entitlement, the default timespan is lifetime.",
            "method": "POST",
            "path": "/usageReport",
            "request": {
              "body": "shared.GetUsageReportParams",
            },
            "response": "shared.UsageReport",
          },
        },
        "path-parameters": {
          "orgId": {
            "docs": "Organization ID",
            "type": "string",
          },
        },
      },
      "types": {
        "_InlinedType2": {
          "docs": "Required.",
          "enum": [
            "AWS",
            "AZURE",
            "GCP",
          ],
        },
        "_InlinedType3": {
          "docs": "Required.",
          "enum": [
            "MARKETPLACE",
          ],
        },
        "shared.EntitlementUsageRecord": "unknown",
        "shared.GetRevenueReportParams": "unknown",
        "shared.GetUsageReportParams": "unknown",
        "shared.RevenueReport": "unknown",
        "shared.UsageReport": "unknown",
      },
    },
  },
}
`;

exports[`open api converter telematica simple 1`] = `
{
  "rootApiFile": {
    "auth": "bearerAuth",
    "auth-schemes": {
      "bearerAuth": {
        "header": "Authorization",
        "name": "apiKey",
      },
    },
    "display-name": "Telematica EV APIs",
    "headers": {},
    "name": "api",
  },
  "serviceFiles": {
    "__package__.yml": {},
    "commons.yml": {
      "types": {
        "ChargingStatus_ResponseDTO": "unknown",
        "ILocation": "unknown",
        "Location_ResponseDTO": "unknown",
        "Odo_ResponseDTO": "unknown",
        "RangeSoc_ResponseDTO": "unknown",
        "Range_ResponseDTO": "unknown",
        "SOC_ResponseDTO": "unknown",
        "StaticAttributes_ResponseDTO": "unknown",
      },
    },
    "sampleCallback.yml": {
      "service": {
        "auth": true,
        "base-path": "/callback",
        "endpoints": {
          "appControllerCallback": {
            "display-name": "Dummy callback endpoint",
            "docs": "This is a dummy callback endpoint.
Please share the POST callback endpoint created in your app's backend with Telematica to get callback requests of this format.",
            "method": "POST",
            "path": "",
            "request": {
              "body": "_InlinedType0",
            },
          },
        },
        "path-parameters": undefined,
      },
      "types": {
        "Callback_DTO": "unknown",
        "_InlinedType0": "unknown",
      },
    },
    "testingEndpoints.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "service": {
        "auth": true,
        "base-path": "/vehicle-data",
        "endpoints": {
          "getChargingStatusTest": {
            "display-name": "Test charging status",
            "docs": undefined,
            "method": "GET",
            "path": "/charging-status/test",
            "response": "commons.ChargingStatus_ResponseDTO",
          },
          "getLocationTest": {
            "display-name": "Test location",
            "docs": undefined,
            "method": "GET",
            "path": "/location/test",
            "response": "commons.Location_ResponseDTO",
          },
          "getOdoTest": {
            "display-name": "Test odo",
            "docs": undefined,
            "method": "GET",
            "path": "/odo/test",
            "response": "commons.Odo_ResponseDTO",
          },
          "getRangeSocTest": {
            "display-name": "Test range-soc",
            "docs": undefined,
            "method": "GET",
            "path": "/range-soc/test",
            "response": "commons.RangeSoc_ResponseDTO",
          },
          "getRangeTest": {
            "display-name": "Test range",
            "docs": undefined,
            "method": "GET",
            "path": "/range/test",
            "response": "commons.Range_ResponseDTO",
          },
          "getSocTest": {
            "display-name": "Test SOC (battery level)",
            "docs": undefined,
            "method": "GET",
            "path": "/soc/test",
            "response": "commons.SOC_ResponseDTO",
          },
          "getStaticAttributesTest": {
            "display-name": "Test static attributes",
            "docs": undefined,
            "method": "GET",
            "path": "/static-attributes/test",
            "response": "commons.StaticAttributes_ResponseDTO",
          },
        },
        "path-parameters": undefined,
      },
    },
    "vehicleData.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "service": {
        "auth": true,
        "base-path": "/vehicle-data",
        "endpoints": {
          "getChargingStatus": {
            "display-name": "Charging Status",
            "docs": undefined,
            "method": "GET",
            "path": "/charging-status",
            "response": "commons.ChargingStatus_ResponseDTO",
          },
          "getLocation": {
            "display-name": "Location",
            "docs": undefined,
            "method": "GET",
            "path": "/location",
            "response": "commons.Location_ResponseDTO",
          },
          "getOdo": {
            "display-name": "Odometer",
            "docs": undefined,
            "method": "GET",
            "path": "/odo",
            "response": "commons.Odo_ResponseDTO",
          },
          "getRange": {
            "display-name": "Range",
            "docs": undefined,
            "method": "GET",
            "path": "/range",
            "response": "commons.Range_ResponseDTO",
          },
          "getRangeSoc": {
            "display-name": "Range-SOC",
            "docs": "This endpoint returns the SOC and range for the vehicle in a single call",
            "method": "GET",
            "path": "/range-soc",
            "response": "commons.RangeSoc_ResponseDTO",
          },
          "getSoc": {
            "display-name": "SOC (battery level)",
            "docs": undefined,
            "method": "GET",
            "path": "/soc",
            "response": "commons.SOC_ResponseDTO",
          },
          "getStaticAttributes": {
            "display-name": "Static attributes",
            "docs": "Static vehicle attributes like VIN, registration number, model, year and make",
            "method": "GET",
            "path": "/static-attributes",
            "response": "commons.StaticAttributes_ResponseDTO",
          },
        },
        "path-parameters": undefined,
      },
    },
  },
}
`;

exports[`open api converter venice simple 1`] = `
{
  "rootApiFile": {
    "auth": undefined,
    "auth-schemes": undefined,
    "default-environment": null,
    "display-name": "Venice REST API",
    "environments": {
      "dev": "http://development.venice.local:3000/api/rest",
    },
    "headers": {},
    "name": "api",
  },
  "serviceFiles": {
    "__package__.yml": {},
    "account.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "service": {
        "auth": false,
        "base-path": "/account",
        "endpoints": {
          "create": {
            "display-name": "@graphql({",
            "docs": "	"primary_key_columns": ["id"],
	"totalCount": {"enabled": true},
	"foreign_keys": []
})",
            "method": "POST",
            "path": "",
            "request": {
              "body": "commons.account",
              "name": "CreateAccount",
            },
          },
          "delete": {
            "display-name": "@graphql({",
            "docs": "	"primary_key_columns": ["id"],
	"totalCount": {"enabled": true},
	"foreign_keys": []
})",
            "method": "DELETE",
            "path": "",
            "request": {
              "name": "DeleteAccount",
            },
          },
          "get": {
            "display-name": "@graphql({",
            "docs": "	"primary_key_columns": ["id"],
	"totalCount": {"enabled": true},
	"foreign_keys": []
})",
            "method": "GET",
            "path": "",
            "request": {
              "name": "GetAccount",
            },
            "response": "unknown",
          },
          "update": {
            "display-name": "@graphql({",
            "docs": "	"primary_key_columns": ["id"],
	"totalCount": {"enabled": true},
	"foreign_keys": []
})",
            "method": "PATCH",
            "path": "",
            "request": {
              "body": "commons.account",
              "name": "UpdateAccount",
            },
          },
        },
        "path-parameters": undefined,
      },
    },
    "commons.yml": {
      "types": {
        "account": {
          "docs": "@graphql({
	"primary_key_columns": ["id"],
	"totalCount": {"enabled": true},
	"foreign_keys": []
})",
          "extends": undefined,
          "properties": {
            "available_balance": "optional<unknown>",
            "created_at": "optional<unknown>",
            "current_balance": "optional<unknown>",
            "default_unit": "optional<unknown>",
            "external": "optional<unknown>",
            "id": {
              "docs": "Note:
This is a Primary Key.<pk/>",
              "type": "optional<string>",
            },
            "institution_name": "optional<unknown>",
            "last_four": "optional<unknown>",
            "name": "optional<unknown>",
            "type": "optional<unknown>",
            "updated_at": "optional<unknown>",
          },
        },
        "count": "unknown",
        "institution": "unknown",
        "integration": "unknown",
        "pipeline": "unknown",
        "raw_account": "unknown",
        "raw_commodity": "unknown",
        "raw_transaction": "unknown",
        "resource": "unknown",
        "return": "unknown",
        "transaction": {
          "docs": "TODO: Add description of transaction data type here...

@graphql({
	"primary_key_columns": ["id"],
	"totalCount": {"enabled": true},
	"description": "Double entry transaction",
	"foreign_keys": [
		{
      "local_name": "transactions",
      "local_columns": ["account_id"],
      "foreign_name": "account",
      "foreign_schema": "public",
      "foreign_table": "account",
      "foreign_columns": ["id"]
		}
	]
})",
          "extends": undefined,
          "properties": {
            "account_id": "optional<unknown>",
            "amount_quantity": "optional<unknown>",
            "amount_unit": "optional<unknown>",
            "created_at": "optional<unknown>",
            "date": "optional<unknown>",
            "description": "optional<unknown>",
            "external": "optional<unknown>",
            "external_category": "optional<unknown>",
            "id": {
              "docs": "Note:
This is a Primary Key.<pk/>",
              "type": "optional<string>",
            },
            "notes": "optional<unknown>",
            "payee": "optional<unknown>",
            "splits": "optional<unknown>",
            "updated_at": "optional<unknown>",
          },
        },
      },
    },
    "institution.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "service": {
        "auth": false,
        "base-path": "/institution",
        "endpoints": {
          "create": {
            "display-name": undefined,
            "docs": undefined,
            "method": "POST",
            "path": "",
            "request": {
              "body": "commons.institution",
              "name": "CreateInstitution",
            },
          },
          "delete": {
            "display-name": undefined,
            "docs": undefined,
            "method": "DELETE",
            "path": "",
            "request": {
              "name": "DeleteInstitution",
            },
          },
          "get": {
            "display-name": undefined,
            "docs": undefined,
            "method": "GET",
            "path": "",
            "request": {
              "name": "GetInstitution",
            },
            "response": "unknown",
          },
          "update": {
            "display-name": undefined,
            "docs": undefined,
            "method": "PATCH",
            "path": "",
            "request": {
              "body": "commons.institution",
              "name": "UpdateInstitution",
            },
          },
        },
        "path-parameters": undefined,
      },
    },
    "integration.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "service": {
        "auth": false,
        "base-path": "/integration",
        "endpoints": {
          "create": {
            "display-name": undefined,
            "docs": undefined,
            "method": "POST",
            "path": "",
            "request": {
              "body": "commons.integration",
              "name": "CreateIntegration",
            },
          },
          "delete": {
            "display-name": undefined,
            "docs": undefined,
            "method": "DELETE",
            "path": "",
            "request": {
              "name": "DeleteIntegration",
            },
          },
          "get": {
            "display-name": undefined,
            "docs": undefined,
            "method": "GET",
            "path": "",
            "request": {
              "name": "GetIntegration",
            },
            "response": "unknown",
          },
          "update": {
            "display-name": undefined,
            "docs": undefined,
            "method": "PATCH",
            "path": "",
            "request": {
              "body": "commons.integration",
              "name": "UpdateIntegration",
            },
          },
        },
        "path-parameters": undefined,
      },
    },
    "introspection.yml": {
      "service": {
        "auth": false,
        "base-path": "/",
        "endpoints": {
          "get": {
            "display-name": "OpenAPI description (this document)",
            "docs": undefined,
            "method": "GET",
            "path": "",
          },
        },
        "path-parameters": undefined,
      },
    },
    "pipeline.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "service": {
        "auth": false,
        "base-path": "/pipeline",
        "endpoints": {
          "create": {
            "display-name": undefined,
            "docs": undefined,
            "method": "POST",
            "path": "",
            "request": {
              "body": "commons.pipeline",
              "name": "CreatePipeline",
            },
          },
          "delete": {
            "display-name": undefined,
            "docs": undefined,
            "method": "DELETE",
            "path": "",
            "request": {
              "name": "DeletePipeline",
            },
          },
          "get": {
            "display-name": undefined,
            "docs": undefined,
            "method": "GET",
            "path": "",
            "request": {
              "name": "GetPipeline",
            },
            "response": "unknown",
          },
          "update": {
            "display-name": undefined,
            "docs": undefined,
            "method": "PATCH",
            "path": "",
            "request": {
              "body": "commons.pipeline",
              "name": "update_pipeline",
            },
          },
        },
        "path-parameters": undefined,
      },
    },
    "rawAccount.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "service": {
        "auth": false,
        "base-path": "/raw_account",
        "endpoints": {
          "create": {
            "display-name": undefined,
            "docs": undefined,
            "method": "POST",
            "path": "",
            "request": {
              "body": "commons.raw_account",
              "name": "create_raw_account",
            },
          },
          "delete": {
            "display-name": undefined,
            "docs": undefined,
            "method": "DELETE",
            "path": "",
            "request": {
              "name": "delete_raw_account",
            },
          },
          "get": {
            "display-name": undefined,
            "docs": undefined,
            "method": "GET",
            "path": "",
            "request": {
              "name": "get_raw_account",
            },
            "response": "unknown",
          },
          "update": {
            "display-name": undefined,
            "docs": undefined,
            "method": "PATCH",
            "path": "",
            "request": {
              "body": "commons.raw_account",
              "name": "update_raw_account",
            },
          },
        },
        "path-parameters": undefined,
      },
    },
    "rawCommodity.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "service": {
        "auth": false,
        "base-path": "/raw_commodity",
        "endpoints": {
          "create": {
            "display-name": undefined,
            "docs": undefined,
            "method": "POST",
            "path": "",
            "request": {
              "body": "commons.raw_commodity",
              "name": "create_raw_commodity",
            },
          },
          "delete": {
            "display-name": undefined,
            "docs": undefined,
            "method": "DELETE",
            "path": "",
            "request": {
              "name": "delete_raw_commodity",
            },
          },
          "get": {
            "display-name": undefined,
            "docs": undefined,
            "method": "GET",
            "path": "",
            "request": {
              "name": "get_raw_commodity",
            },
            "response": "unknown",
          },
          "update": {
            "display-name": undefined,
            "docs": undefined,
            "method": "PATCH",
            "path": "",
            "request": {
              "body": "commons.raw_commodity",
              "name": "update_raw_commodity",
            },
          },
        },
        "path-parameters": undefined,
      },
    },
    "rawTransaction.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "service": {
        "auth": false,
        "base-path": "/raw_transaction",
        "endpoints": {
          "create": {
            "display-name": undefined,
            "docs": undefined,
            "method": "POST",
            "path": "",
            "request": {
              "body": "commons.raw_transaction",
              "name": "create_raw_transaction",
            },
          },
          "delete": {
            "display-name": undefined,
            "docs": undefined,
            "method": "DELETE",
            "path": "",
            "request": {
              "name": "delete_raw_transaction",
            },
          },
          "get": {
            "display-name": undefined,
            "docs": undefined,
            "method": "GET",
            "path": "",
            "request": {
              "name": "get_raw_transaction",
            },
            "response": "unknown",
          },
          "update": {
            "display-name": undefined,
            "docs": undefined,
            "method": "PATCH",
            "path": "",
            "request": {
              "body": "commons.raw_transaction",
              "name": "update_raw_transaction",
            },
          },
        },
        "path-parameters": undefined,
      },
    },
    "resource.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "service": {
        "auth": false,
        "base-path": "/resource",
        "endpoints": {
          "create": {
            "display-name": undefined,
            "docs": undefined,
            "method": "POST",
            "path": "",
            "request": {
              "body": "commons.resource",
              "name": "create_resource",
            },
          },
          "delete": {
            "display-name": undefined,
            "docs": undefined,
            "method": "DELETE",
            "path": "",
            "request": {
              "name": "delete_resource",
            },
          },
          "get": {
            "display-name": undefined,
            "docs": undefined,
            "method": "GET",
            "path": "",
            "request": {
              "name": "get_resource",
            },
            "response": "unknown",
          },
          "update": {
            "display-name": undefined,
            "docs": undefined,
            "method": "PATCH",
            "path": "",
            "request": {
              "body": "commons.resource",
              "name": "update_resource",
            },
          },
        },
        "path-parameters": undefined,
      },
    },
    "transaction.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "service": {
        "auth": false,
        "base-path": "/transaction",
        "endpoints": {
          "_unnamedOperation0": {
            "display-name": "TODO: Add description of transaction data type here...",
            "docs": "@graphql({
	"primary_key_columns": ["id"],
	"totalCount": {"enabled": true},
	"description": "Double entry transaction",
	"foreign_keys": [
		{
      "local_name": "transactions",
      "local_columns": ["account_id"],
      "foreign_name": "account",
      "foreign_schema": "public",
      "foreign_table": "account",
      "foreign_columns": ["id"]
		}
	]
})",
            "method": "PATCH",
            "path": "",
            "request": {
              "body": "commons.transaction",
              "name": "create_transaction",
            },
          },
          "create": {
            "display-name": "TODO: Add description of transaction data type here...",
            "docs": "@graphql({
	"primary_key_columns": ["id"],
	"totalCount": {"enabled": true},
	"description": "Double entry transaction",
	"foreign_keys": [
		{
      "local_name": "transactions",
      "local_columns": ["account_id"],
      "foreign_name": "account",
      "foreign_schema": "public",
      "foreign_table": "account",
      "foreign_columns": ["id"]
		}
	]
})",
            "method": "POST",
            "path": "",
            "request": {
              "body": "commons.transaction",
              "name": "create_transaction",
            },
          },
          "delete": {
            "display-name": "TODO: Add description of transaction data type here...",
            "docs": "@graphql({
	"primary_key_columns": ["id"],
	"totalCount": {"enabled": true},
	"description": "Double entry transaction",
	"foreign_keys": [
		{
      "local_name": "transactions",
      "local_columns": ["account_id"],
      "foreign_name": "account",
      "foreign_schema": "public",
      "foreign_table": "account",
      "foreign_columns": ["id"]
		}
	]
})",
            "method": "DELETE",
            "path": "",
            "request": {
              "name": "delete_transaction",
            },
          },
          "get": {
            "display-name": "TODO: Add description of transaction data type here...",
            "docs": "@graphql({
	"primary_key_columns": ["id"],
	"totalCount": {"enabled": true},
	"description": "Double entry transaction",
	"foreign_keys": [
		{
      "local_name": "transactions",
      "local_columns": ["account_id"],
      "foreign_name": "account",
      "foreign_schema": "public",
      "foreign_table": "account",
      "foreign_columns": ["id"]
		}
	]
})",
            "method": "GET",
            "path": "",
            "request": {
              "name": "get_transaction",
            },
            "response": "unknown",
          },
        },
        "path-parameters": undefined,
      },
    },
    "transactionSplit.yml": {
      "service": {
        "auth": false,
        "base-path": "/transaction_split",
        "endpoints": {
          "get": {
            "display-name": "Entities summary",
            "docs": "  Entities description that
  spans
  multiple lines
  
  
	@graphql({
		"primary_key_columns": ["id", "key"],
		"totalCount": {"enabled": true},
		"foreign_keys": []
	})
",
            "method": "GET",
            "path": "",
            "request": {
              "name": "get_transaction_split",
            },
            "response": "unknown",
          },
        },
        "path-parameters": undefined,
      },
      "types": {
        "transaction_split": {
          "docs": "Entities summary

  Entities description that
  spans
  multiple lines
  
  
	@graphql({
		"primary_key_columns": ["id", "key"],
		"totalCount": {"enabled": true},
		"foreign_keys": []
	})
",
          "extends": undefined,
          "properties": {
            "account_id": "optional<unknown>",
            "amount_quantity": "optional<unknown>",
            "amount_unit": "optional<unknown>",
            "created_at": "optional<unknown>",
            "data": "optional<unknown>",
            "key": "optional<unknown>",
            "transaction_id": {
              "docs": "Note:
This is a Primary Key.<pk/>",
              "type": "optional<string>",
            },
            "updated_at": "optional<unknown>",
          },
        },
      },
    },
  },
}
`;
