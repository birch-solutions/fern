imports:
  root: __package__.yml
types:
  GetStationsResponseLinks:
    properties: {}
    extends:
      - root.LinksSelf
      - root.LinksPagination
    source:
      openapi: openapi/trains/openapi.yml
  GetStationsResponse:
    properties:
      data: optional<list<root.Station>>
      links: optional<GetStationsResponseLinks>
    source:
      openapi: openapi/trains/openapi.yml
  GetTripsResponseLinks:
    properties: {}
    extends:
      - root.LinksSelf
      - root.LinksPagination
    source:
      openapi: openapi/trains/openapi.yml
  GetTripsResponse:
    properties:
      data: optional<list<root.Trip>>
      links: optional<GetTripsResponseLinks>
    source:
      openapi: openapi/trains/openapi.yml
  GetBookingsResponseLinks:
    properties: {}
    extends:
      - root.LinksSelf
      - root.LinksPagination
    source:
      openapi: openapi/trains/openapi.yml
  GetBookingsResponse:
    properties:
      data: optional<list<root.Booking>>
      links: optional<GetBookingsResponseLinks>
    source:
      openapi: openapi/trains/openapi.yml
  CreateBookingResponse:
    properties:
      links: optional<root.LinksSelf>
    extends:
      - root.Booking
    source:
      openapi: openapi/trains/openapi.yml
  GetBookingResponse:
    properties:
      links: optional<root.LinksSelf>
    extends:
      - root.Booking
    source:
      openapi: openapi/trains/openapi.yml
  CreateBookingPaymentResponse:
    properties:
      links: optional<root.LinksBooking>
    extends:
      - root.BookingPayment
    source:
      openapi: openapi/trains/openapi.yml
  NewBookingPayloadLinks:
    properties: {}
    extends:
      - root.LinksSelf
      - root.LinksPagination
    source:
      openapi: openapi/trains/openapi.yml
  NewBookingPayload:
    properties:
      links: optional<NewBookingPayloadLinks>
    extends:
      - root.Booking
    source:
      openapi: openapi/trains/openapi.yml
service:
  auth: false
  base-path: ''
  endpoints:
    get-stations:
      path: /stations
      method: GET
      auth: true
      docs: Returns a list of all train stations in the system.
      display-name: Get a list of train stations
      response:
        docs: A list of train stations
        type: GetStationsResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
        - root.InternalServerError
      examples:
        - response:
            body:
              data:
                - id: efdbb9d1-02c2-4bc3-afb7-6788d8782b1e
                  name: Berlin Hauptbahnhof
                  address: InvalidenstraÃŸe 10557 Berlin, Germany
                  country_code: DE
                  timezone: Europe/Berlin
                  pet:
                    id: 1000000
                    name: name
                - id: b2e783e1-c824-4d63-b37a-d8d698862f1d
                  name: Paris Gare du Nord
                  address: 18 Rue de Dunkerque 75010 Paris, France
                  country_code: FR
                  timezone: Europe/Paris
                  pet:
                    id: 1000000
                    name: name
              links:
                next: https://api.example.com/stations?page=3
                prev: https://api.example.com/stations?page=1
                self: https://api.example.com/stations&page=2
    get-trips:
      path: /trips
      method: GET
      auth: true
      docs: >-
        Returns a list of available train trips between the specified origin and
        destination stations on the given date, and allows for filtering by
        bicycle and dog allowances.
      display-name: Get available train trips
      request:
        name: GetTripsRequest
        query-parameters:
          origin:
            type: string
            docs: The ID of the origin station
          destination:
            type: string
            docs: The ID of the destination station
          date:
            type: datetime
            docs: >-
              The date and time of the trip in ISO 8601 format in origin
              station's timezone.
          bicycles:
            type: optional<boolean>
            docs: Only return trips where bicycles are known to be allowed
          dogs:
            type: optional<boolean>
            docs: Only return trips where dogs are known to be allowed
      response:
        docs: A list of available train trips
        type: GetTripsResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
        - root.InternalServerError
      examples:
        - query-parameters:
            origin: efdbb9d1-02c2-4bc3-afb7-6788d8782b1e
            destination: b2e783e1-c824-4d63-b37a-d8d698862f1d
            date: '2024-02-01T09:00:00Z'
          response:
            body:
              data:
                - id: ea399ba1-6d95-433f-92d1-83f67b775594
                  origin: efdbb9d1-02c2-4bc3-afb7-6788d8782b1e
                  destination: b2e783e1-c824-4d63-b37a-d8d698862f1d
                  departure_time: '2024-02-01T10:00:00Z'
                  arrival_time: '2024-02-01T16:00:00Z'
                  operator: Deutsche Bahn
                  price: 50
                  bicycles_allowed: true
                  dogs_allowed: true
                - id: 4d67459c-af07-40bb-bb12-178dbb88e09f
                  origin: b2e783e1-c824-4d63-b37a-d8d698862f1d
                  destination: efdbb9d1-02c2-4bc3-afb7-6788d8782b1e
                  departure_time: '2024-02-01T12:00:00Z'
                  arrival_time: '2024-02-01T18:00:00Z'
                  operator: SNCF
                  price: 50
                  bicycles_allowed: true
                  dogs_allowed: true
              links:
                next: >-
                  https://api.example.com/trips?origin=efdbb9d1-02c2-4bc3-afb7-6788d8782b1e&destination=b2e783e1-c824-4d63-b37a-d8d698862f1d&date=2024-02-01&page=2
                prev: prev
                self: >-
                  https://api.example.com/trips?origin=efdbb9d1-02c2-4bc3-afb7-6788d8782b1e&destination=b2e783e1-c824-4d63-b37a-d8d698862f1d&date=2024-02-01
    get-bookings:
      path: /bookings
      method: GET
      auth: true
      docs: Returns a list of all trip bookings by the authenticated user.
      display-name: List existing bookings
      response:
        docs: A list of bookings
        type: GetBookingsResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
        - root.InternalServerError
      examples:
        - response:
            body:
              data:
                - id: efdbb9d1-02c2-4bc3-afb7-6788d8782b1e
                  trip_id: efdbb9d1-02c2-4bc3-afb7-6788d8782b1e
                  passenger_name: John Doe
                  has_bicycle: true
                  has_dog: true
                - id: b2e783e1-c824-4d63-b37a-d8d698862f1d
                  trip_id: b2e783e1-c824-4d63-b37a-d8d698862f1d
                  passenger_name: Jane Smith
                  has_bicycle: false
                  has_dog: false
              links:
                next: https://api.example.com/bookings?page=2
                prev: prev
                self: https://api.example.com/bookings
    create-booking:
      path: /bookings
      method: POST
      auth: true
      docs: >-
        A booking is a temporary hold on a trip. It is not confirmed until the
        payment is processed.
      display-name: Create a booking
      request:
        body: root.Booking
      response:
        docs: Booking successful
        type: CreateBookingResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.NotFoundError
        - root.ConflictError
        - root.TooManyRequestsError
        - root.InternalServerError
      examples:
        - request: {}
          response:
            body:
              id: efdbb9d1-02c2-4bc3-afb7-6788d8782b1e
              trip_id: efdbb9d1-02c2-4bc3-afb7-6788d8782b1e
              passenger_name: John Doe
              has_bicycle: true
              has_dog: true
              links:
                self: >-
                  https://api.example.com/bookings/efdbb9d1-02c2-4bc3-afb7-6788d8782b1e
    get-booking:
      path: /bookings/{bookingId}
      method: GET
      auth: true
      docs: Returns the details of a specific booking.
      path-parameters:
        bookingId:
          type: string
          docs: The ID of the booking to retrieve.
      display-name: Get a booking
      response:
        docs: The booking details
        type: GetBookingResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
      examples:
        - path-parameters:
            bookingId: 1725ff48-ab45-4bb5-9d02-88745177dedb
          response:
            body:
              id: efdbb9d1-02c2-4bc3-afb7-6788d8782b1e
              trip_id: efdbb9d1-02c2-4bc3-afb7-6788d8782b1e
              passenger_name: John Doe
              has_bicycle: true
              has_dog: true
              links:
                self: >-
                  https://api.example.com/bookings/1725ff48-ab45-4bb5-9d02-88745177dedb
    delete-booking:
      path: /bookings/{bookingId}
      method: DELETE
      auth: true
      docs: Deletes a booking, cancelling the hold on the trip.
      path-parameters:
        bookingId:
          type: string
          docs: The ID of the booking to retrieve.
      display-name: Delete a booking
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
      examples:
        - path-parameters:
            bookingId: 1725ff48-ab45-4bb5-9d02-88745177dedb
    create-booking-payment:
      path: /bookings/{bookingId}/payment
      method: POST
      auth: true
      docs: >-
        A payment is an attempt to pay for the booking, which will confirm the
        booking for the user and enable them to get their tickets.
      path-parameters:
        bookingId:
          type: string
          docs: The ID of the booking to pay for.
      display-name: Pay for a Booking
      request:
        body: root.BookingPayment
      response:
        docs: Payment successful
        type: CreateBookingPaymentResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
        - root.InternalServerError
      examples:
        - name: Card Payment
          path-parameters:
            bookingId: 1725ff48-ab45-4bb5-9d02-88745177dedb
          request:
            amount: 49.99
            currency: gbp
            source:
              object: card
              name: J. Doe
              number: '4242424242424242'
              cvc: 123
              exp_month: 12
              exp_year: 2025
              address_line1: 123 Fake Street
              address_line2: 4th Floor
              address_city: London
              address_country: gb
              address_post_code: N12 9XX
          response:
            body:
              id: 2e3b4f5a-6b7c-8d9e-0f1a-2b3c4d5e6f7a
              amount: 49.99
              currency: gbp
              source:
                object: card
                name: J. Doe
                number: '************4242'
                cvc: 123
                exp_month: 12
                exp_year: 2025
                address_line1: source
                address_line2: source
                address_city: source
                address_country: gb
                address_post_code: N12 9XX
              status: succeeded
              links:
                booking: >-
                  https://api.example.com/bookings/1725ff48-ab45-4bb5-9d02-88745177dedb/payment
        - name: Bank Account Payment
          path-parameters:
            bookingId: 1725ff48-ab45-4bb5-9d02-88745177dedb
          request:
            amount: 100.5
            currency: gbp
            source:
              object: bank_account
              name: J. Doe
              number: '00012345'
              sort_code: '000123'
              account_type: individual
              bank_name: Starling Bank
              country: gb
          response:
            body:
              id: 2e3b4f5a-6b7c-8d9e-0f1a-2b3c4d5e6f7a
              amount: 49.99
              currency: gbp
              source:
                object: card
                name: J. Doe
                number: '************4242'
                cvc: 123
                exp_month: 12
                exp_year: 2025
                address_line1: source
                address_line2: source
                address_city: source
                address_country: gb
                address_post_code: N12 9XX
              status: succeeded
              links:
                booking: >-
                  https://api.example.com/bookings/1725ff48-ab45-4bb5-9d02-88745177dedb/payment
        - name: Card Payment
          path-parameters:
            bookingId: 1725ff48-ab45-4bb5-9d02-88745177dedb
          request:
            amount: 49.99
            currency: gbp
            source:
              object: card
              name: J. Doe
              number: '4242424242424242'
              cvc: 123
              exp_month: 12
              exp_year: 2025
              address_line1: 123 Fake Street
              address_line2: 4th Floor
              address_city: London
              address_country: gb
              address_post_code: N12 9XX
          response:
            body:
              id: 2e3b4f5a-6b7c-8d9e-0f1a-2b3c4d5e6f7a
              amount: 49.99
              currency: gbp
              source:
                object: card
                name: J. Doe
                number: '************4242'
                cvc: 123
                exp_month: 12
                exp_year: 2025
                address_line1: source
                address_line2: source
                address_city: source
                address_country: gb
                address_post_code: N12 9XX
              status: succeeded
              links:
                booking: >-
                  https://api.example.com/bookings/1725ff48-ab45-4bb5-9d02-88745177dedb/payment
        - name: Bank Account Payment
          path-parameters:
            bookingId: 1725ff48-ab45-4bb5-9d02-88745177dedb
          request:
            amount: 49.99
            currency: gbp
            source:
              object: card
              name: J. Doe
              number: '4242424242424242'
              cvc: 123
              exp_month: 12
              exp_year: 2025
              address_line1: 123 Fake Street
              address_line2: 4th Floor
              address_city: London
              address_country: gb
              address_post_code: N12 9XX
          response:
            body:
              id: 2e3b4f5a-6b7c-8d9e-0f1a-2b3c4d5e6f7a
              amount: 100.5
              currency: gbp
              source:
                object: bank_account
                name: J. Doe
                number: '*********2345'
                sort_code: '000123'
                account_type: individual
                bank_name: Starling Bank
                country: gb
              status: succeeded
              links:
                booking: >-
                  https://api.example.com/bookings/1725ff48-ab45-4bb5-9d02-88745177dedb
  source:
    openapi: openapi/trains/openapi.yml
webhooks:
  new-booking:
    method: POST
    display-name: New Booking
    headers: {}
    payload: NewBookingPayload
    examples:
      - payload:
          id: efdbb9d1-02c2-4bc3-afb7-6788d8782b1e
          trip_id: efdbb9d1-02c2-4bc3-afb7-6788d8782b1e
          passenger_name: John Doe
          has_bicycle: true
          has_dog: true
          links:
            self: >-
              https://api.example.com/bookings/1725ff48-ab45-4bb5-9d02-88745177dedb
    docs: >
      Subscribe to new bookings being created, to update integrations for your
      users.  Related data is available via the links provided in the request.
