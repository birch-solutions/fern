{
  "openapi": "3.0.2",
  "info": {
    "title": "Rivet Matchmaker API",
    "version": "2022-6-2"
  },
  "externalDocumentation": {
    "description": "Homepage",
    "url": "https://rivet.gg/"
  },
  "paths": {
    "/lobbies/closed": {
      "put": {
        "description": "If `is_closed` is `true`, players will be prevented from joining the lobby.\n\nDoes not shutdown the lobby.",
        "operationId": "SetLobbyClosed",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetLobbyClosedRequestContent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "SetLobbyClosed 200 response"
          },
          "400": {
            "description": "BadRequestError 400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenError 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "NotFoundError 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponseContent"
                }
              }
            }
          },
          "408": {
            "description": "UnauthorizedError 408 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponseContent"
                }
              }
            }
          },
          "429": {
            "description": "RateLimitError 429 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RateLimitErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "InternalError 500 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorResponseContent"
                }
              }
            }
          }
        },
        "tags": ["public"]
      }
    },
    "/lobbies/find": {
      "post": {
        "description": "Finds a lobby based on the given criteria.\n\nIf a lobby is not found and `prevent_auto_create_lobby` is `true`, a new lobby will be created.",
        "operationId": "FindLobby",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FindLobbyRequestContent"
              }
            }
          },
          "required": true
        },
        "parameters": [
          {
            "name": "origin",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "FindLobby 200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindLobbyResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "BadRequestError 400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenError 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "NotFoundError 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponseContent"
                }
              }
            }
          },
          "408": {
            "description": "UnauthorizedError 408 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponseContent"
                }
              }
            }
          },
          "429": {
            "description": "RateLimitError 429 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RateLimitErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "InternalError 500 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorResponseContent"
                }
              }
            }
          }
        },
        "tags": ["public"]
      }
    },
    "/lobbies/join": {
      "post": {
        "description": "Joins a specific lobby.\n\nThis request will use the direct player count configured for the lobby\ngroup.",
        "operationId": "JoinLobby",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JoinLobbyRequestContent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "JoinLobby 200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JoinLobbyResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "BadRequestError 400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenError 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "NotFoundError 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponseContent"
                }
              }
            }
          },
          "408": {
            "description": "UnauthorizedError 408 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponseContent"
                }
              }
            }
          },
          "429": {
            "description": "RateLimitError 429 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RateLimitErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "InternalError 500 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorResponseContent"
                }
              }
            }
          }
        },
        "tags": ["public"]
      }
    },
    "/lobbies/list": {
      "get": {
        "description": "Lists all open lobbies.",
        "operationId": "ListLobbies",
        "responses": {
          "200": {
            "description": "ListLobbies 200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListLobbiesResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "BadRequestError 400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenError 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "NotFoundError 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponseContent"
                }
              }
            }
          },
          "408": {
            "description": "UnauthorizedError 408 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponseContent"
                }
              }
            }
          },
          "429": {
            "description": "RateLimitError 429 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RateLimitErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "InternalError 500 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorResponseContent"
                }
              }
            }
          }
        },
        "tags": ["public"]
      }
    },
    "/lobbies/ready": {
      "post": {
        "description": "Marks the current lobby as ready to accept connections. Players will not be\nable to connect to this lobby until the lobby is flagged as ready.",
        "operationId": "LobbyReady",
        "responses": {
          "200": {
            "description": "LobbyReady 200 response"
          },
          "400": {
            "description": "BadRequestError 400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenError 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "NotFoundError 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponseContent"
                }
              }
            }
          },
          "408": {
            "description": "UnauthorizedError 408 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponseContent"
                }
              }
            }
          },
          "429": {
            "description": "RateLimitError 429 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RateLimitErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "InternalError 500 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorResponseContent"
                }
              }
            }
          }
        },
        "tags": ["lobby"]
      }
    },
    "/players/connected": {
      "post": {
        "description": "Validates the player token is valid and has not already been consumed then\nmarks the player as connected.\n\n# Player Tokens and Reserved Slots\n\nPlayer tokens reserve a spot in the lobby until they expire. This allows for\nprecise matchmaking up to exactly the lobby's player limit, which is\nimportant for games with small lobbies and a high influx of players.\n\nBy calling this endpoint with the player token, the player's spot is marked\nas connected and will not expire. If this endpoint is never called, the\nplayer's token will expire and this spot will be filled by another player.\n\n# Anti-Botting\n\nPlayer tokens are only issued by caling `rivet.api.matchmaker#JoinLobby`, calling `rivet.api.matchmaker#FindLobby`, or\nfrom the `rivet.api.identity.common#GlobalEventMatchmakerLobbyJoin` event.\nThese endpoints have anti-botting measures (i.e. enforcing max player\nlimits, captchas, and detecting bots), so valid player tokens provide some\nconfidence that the player is not a bot.\n\nTherefore, it's important to make sure the token is valid by waiting for\nthis endpoint to return OK before allowing the connected socket to do\nanything else. If this endpoint returns an error, the socket should be\ndisconnected immediately.\n\n# How to Transmit the Player Token\n\nThe client is responsible for acquiring the player token by caling\n`rivet.api.matchmaker#JoinLobby`, calling `rivet.api.matchmaker#FindLobby`,\nor from the `rivet.api.identity.common#GlobalEventMatchmakerLobbyJoin`\nevent.  Beyond that, it's up to the developer how the player token is\ntransmitted to the lobby.\n\nIf using WebSockets, the player token can be transmitted as a query\nparamter.\n\nOtherwise, the player token will likely be automatically sent by the client\nonce the socket opens. As mentioned above, nothing else should happen until\nthe player token is validated.",
        "operationId": "PlayerConnected",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerConnectedRequestContent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "PlayerConnected 200 response"
          },
          "400": {
            "description": "BadRequestError 400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenError 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "NotFoundError 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponseContent"
                }
              }
            }
          },
          "408": {
            "description": "UnauthorizedError 408 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponseContent"
                }
              }
            }
          },
          "429": {
            "description": "RateLimitError 429 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RateLimitErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "InternalError 500 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorResponseContent"
                }
              }
            }
          }
        },
        "tags": ["lobby"]
      }
    },
    "/players/disconnected": {
      "post": {
        "description": "Marks a player as disconnected.\n\n# Ghost Players\n\nIf players are not marked as disconnected, lobbies will result with \"ghost\nplayers\" that the matchmaker thinks exist but are no longer connected to the\nlobby.",
        "operationId": "PlayerDisconnected",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerDisconnectedRequestContent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "PlayerDisconnected 200 response"
          },
          "400": {
            "description": "BadRequestError 400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenError 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "NotFoundError 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponseContent"
                }
              }
            }
          },
          "408": {
            "description": "UnauthorizedError 408 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponseContent"
                }
              }
            }
          },
          "429": {
            "description": "RateLimitError 429 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RateLimitErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "InternalError 500 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorResponseContent"
                }
              }
            }
          }
        },
        "tags": ["lobby"]
      }
    },
    "/regions": {
      "get": {
        "description": "Returns a list of regions available to this namespace.\n\nRegions are sorted by most optimal to least optimal. The player's IP address\nis used to calculate the regions' optimality.",
        "operationId": "ListRegions",
        "responses": {
          "200": {
            "description": "ListRegions 200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListRegionsResponseContent"
                }
              }
            }
          },
          "400": {
            "description": "BadRequestError 400 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponseContent"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenError 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponseContent"
                }
              }
            }
          },
          "404": {
            "description": "NotFoundError 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponseContent"
                }
              }
            }
          },
          "408": {
            "description": "UnauthorizedError 408 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponseContent"
                }
              }
            }
          },
          "429": {
            "description": "RateLimitError 429 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RateLimitErrorResponseContent"
                }
              }
            }
          },
          "500": {
            "description": "InternalError 500 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorResponseContent"
                }
              }
            }
          }
        },
        "tags": ["public"]
      }
    }
  },
  "components": {
    "schemas": {
      "BadRequestErrorResponseContent": {
        "type": "object",
        "description": "An error thrown when the requestee has sent an invalid or malformed request.",
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "metadata": {
            "description": "Unstructured metadata relating to an error. Must be manually parsed."
          }
        },
        "required": ["code", "message"]
      },
      "CaptchaConfig": {
        "description": "Methods to verify a captcha.",
        "oneOf": [
          {
            "type": "object",
            "title": "hcaptcha",
            "properties": {
              "hcaptcha": {
                "$ref": "#/components/schemas/CaptchaConfigHcaptcha"
              }
            },
            "required": ["hcaptcha"]
          }
        ]
      },
      "CaptchaConfigHcaptcha": {
        "type": "object",
        "description": "hCaptcha configuration.",
        "properties": {
          "client_response": {
            "type": "string"
          }
        },
        "required": ["client_response"]
      },
      "Coord": {
        "type": "object",
        "description": "Geographical coordinates for a location on Planet Earth.",
        "properties": {
          "latitude": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "longitude": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        },
        "required": ["latitude", "longitude"]
      },
      "Distance": {
        "type": "object",
        "description": "Distance available in multiple units.",
        "properties": {
          "kilometers": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "miles": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        },
        "required": ["kilometers", "miles"]
      },
      "FindLobbyRequestContent": {
        "type": "object",
        "properties": {
          "game_modes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Game modes to match lobbies against."
          },
          "regions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Regions to match lobbies against. If not specified, the optimal region\nwill be determined and will attempt to find lobbies in that region."
          },
          "prevent_auto_create_lobby": {
            "type": "boolean",
            "description": "Prevents a new lobby from being created when finding a lobby. If no\nlobby is found, a `MATCHMAKER_LOBBY_NOT_FOUND` error will be thrown.",
            "nullable": true
          },
          "captcha": {
            "$ref": "#/components/schemas/CaptchaConfig"
          }
        },
        "required": ["game_modes"]
      },
      "FindLobbyResponseContent": {
        "type": "object",
        "properties": {
          "lobby": {
            "$ref": "#/components/schemas/MatchmakerLobbyJoinInfo"
          }
        },
        "required": ["lobby"]
      },
      "ForbiddenErrorResponseContent": {
        "type": "object",
        "description": "An error thrown when the requestee requests a resource they do not have access to.",
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "metadata": {
            "description": "Unstructured metadata relating to an error. Must be manually parsed."
          }
        },
        "required": ["code", "message"]
      },
      "GameModeInfo": {
        "type": "object",
        "description": "A game mode that the player can join.",
        "properties": {
          "game_mode_id": {
            "type": "string",
            "maxLength": 16,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9](?:[a-zA-Z0-9]-?)+[a-zA-Z0-9]$",
            "description": "A human readable short identifier used to references resources.\n\nDifferent than a `rivet.common#Uuid` because this is intended to be human readable.\n\nDifferent than `rivet.common#DisplayName` because this should not include special\ncharacters and be short."
          }
        },
        "required": ["game_mode_id"]
      },
      "InternalErrorResponseContent": {
        "type": "object",
        "description": "An error caused by internal server problems.",
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "metadata": {
            "description": "Unstructured metadata relating to an error. Must be manually parsed."
          }
        },
        "required": ["code", "message"]
      },
      "JoinLobbyRequestContent": {
        "type": "object",
        "properties": {
          "lobby_id": {
            "type": "string",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
            "description": "A universally unique identifier."
          },
          "captcha": {
            "$ref": "#/components/schemas/CaptchaConfig"
          }
        },
        "required": ["lobby_id"]
      },
      "JoinLobbyResponseContent": {
        "type": "object",
        "properties": {
          "lobby": {
            "$ref": "#/components/schemas/MatchmakerLobbyJoinInfo"
          }
        },
        "required": ["lobby"]
      },
      "ListLobbiesResponseContent": {
        "type": "object",
        "properties": {
          "game_modes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GameModeInfo"
            }
          },
          "regions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RegionInfo"
            }
          },
          "lobbies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LobbyInfo"
            }
          }
        },
        "required": ["game_modes", "lobbies", "regions"]
      },
      "ListRegionsResponseContent": {
        "type": "object",
        "properties": {
          "regions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RegionInfo"
            }
          }
        },
        "required": ["regions"]
      },
      "LobbyInfo": {
        "type": "object",
        "description": "A public lobby in the lobby list.",
        "properties": {
          "region_id": {
            "type": "string"
          },
          "game_mode_id": {
            "type": "string"
          },
          "lobby_id": {
            "type": "string",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
            "description": "A universally unique identifier."
          },
          "max_players_normal": {
            "type": "number",
            "minimum": 0,
            "description": "Unsigned 32 bit integer.",
            "format": "int32",
            "nullable": true
          },
          "max_players_direct": {
            "type": "number",
            "minimum": 0,
            "description": "Unsigned 32 bit integer.",
            "format": "int32",
            "nullable": true
          },
          "max_players_party": {
            "type": "number",
            "minimum": 0,
            "description": "Unsigned 32 bit integer.",
            "format": "int32",
            "nullable": true
          },
          "total_player_count": {
            "type": "number",
            "minimum": 0,
            "description": "Unsigned 32 bit integer.",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "game_mode_id",
          "lobby_id",
          "max_players_direct",
          "max_players_normal",
          "max_players_party",
          "region_id",
          "total_player_count"
        ]
      },
      "MatchmakerLobbyJoinInfo": {
        "type": "object",
        "description": "A matchmaker lobby.",
        "properties": {
          "lobby_id": {
            "type": "string",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
            "description": "A universally unique identifier."
          },
          "region": {
            "$ref": "#/components/schemas/MatchmakerLobbyJoinInfoRegion"
          },
          "ports": {
            "$ref": "#/components/schemas/MatchmakerLobbyJoinInfoPorts"
          },
          "player": {
            "$ref": "#/components/schemas/MatchmakerLobbyJoinInfoPlayer"
          }
        },
        "required": ["lobby_id", "player", "ports", "region"]
      },
      "MatchmakerLobbyJoinInfoPlayer": {
        "type": "object",
        "description": "A matchmaker lobby player.",
        "properties": {
          "token": {
            "type": "string",
            "description": "Pass this token through the socket to the lobby server. The lobby server\nwill validate this token with `rivet.api.matchmaker#PlayerConnected$player_token`.",
            "format": "password"
          }
        },
        "required": ["token"]
      },
      "MatchmakerLobbyJoinInfoPort": {
        "type": "object",
        "description": "A matchmaker lobby port.\n\nConfigured by `rivet.cloud#LobbyGroupRuntimeDockerPort$label`.",
        "properties": {
          "host": {
            "type": "string",
            "description": "The host for the given port.\n\nWill be null if using a port range."
          },
          "hostname": {
            "type": "string",
            "description": "The hostname for the given port."
          },
          "port": {
            "type": "number",
            "maximum": 65535,
            "minimum": 0,
            "description": "The port number for this lobby.\n\nWill be null if using a port range.",
            "format": "int32",
            "nullable": true
          },
          "port_range": {
            "$ref": "#/components/schemas/MatchmakerLobbyJoinInfoPortRange"
          },
          "is_tls": {
            "type": "boolean",
            "description": "Wether or not this lobby port uses TLS.\n\nYou cannot mix a non-TLS and TLS ports.",
            "nullable": true
          }
        },
        "required": ["hostname", "is_tls"]
      },
      "MatchmakerLobbyJoinInfoPortRange": {
        "type": "object",
        "description": "Inclusive range of ports that can be connected to.",
        "properties": {
          "min": {
            "type": "number",
            "maximum": 65535,
            "minimum": 0,
            "description": "Minimum port that can be connected to. Inclusive range.",
            "format": "int32",
            "nullable": true
          },
          "max": {
            "type": "number",
            "maximum": 65535,
            "minimum": 0,
            "description": "Maximum port that can be connected to. Inclusive range.",
            "format": "int32",
            "nullable": true
          }
        },
        "required": ["max", "min"]
      },
      "MatchmakerLobbyJoinInfoPorts": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/MatchmakerLobbyJoinInfoPort"
        },
        "description": "A list of lobby ports."
      },
      "MatchmakerLobbyJoinInfoRegion": {
        "type": "object",
        "description": "A matchmaker lobby region.",
        "properties": {
          "region_id": {
            "type": "string",
            "maxLength": 16,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9](?:[a-zA-Z0-9]-?)+[a-zA-Z0-9]$",
            "description": "A human readable short identifier used to references resources.\n\nDifferent than a `rivet.common#Uuid` because this is intended to be human readable.\n\nDifferent than `rivet.common#DisplayName` because this should not include special\ncharacters and be short."
          },
          "display_name": {
            "type": "string",
            "maxLength": 24,
            "minLength": 1,
            "pattern": "^(?:[^ \\n\\r] ?)+[^ \\n\\r]$",
            "description": "Represent a resource's readable display name."
          }
        },
        "required": ["display_name", "region_id"]
      },
      "NotFoundErrorResponseContent": {
        "type": "object",
        "description": "An error thrown when the requestee requests a non existant resource.",
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "metadata": {
            "description": "Unstructured metadata relating to an error. Must be manually parsed."
          }
        },
        "required": ["code", "message"]
      },
      "PlayerConnectedRequestContent": {
        "type": "object",
        "properties": {
          "player_token": {
            "type": "string",
            "description": "A JSON Web Token.\n\nSlightly modified to include a description prefix and use Protobufs of\nJSON.",
            "format": "password"
          }
        },
        "required": ["player_token"]
      },
      "PlayerDisconnectedRequestContent": {
        "type": "object",
        "properties": {
          "player_token": {
            "type": "string",
            "description": "A JSON Web Token.\n\nSlightly modified to include a description prefix and use Protobufs of\nJSON.",
            "format": "password"
          }
        },
        "required": ["player_token"]
      },
      "RateLimitErrorResponseContent": {
        "type": "object",
        "description": "An error thrown when the requestee has hit a rate limit. You are sending too many requests too quickly.",
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "metadata": {
            "description": "Unstructured metadata relating to an error. Must be manually parsed."
          }
        },
        "required": ["code", "message"]
      },
      "RegionInfo": {
        "type": "object",
        "description": "A region that the player can connect to.",
        "properties": {
          "region_id": {
            "type": "string",
            "maxLength": 16,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9](?:[a-zA-Z0-9]-?)+[a-zA-Z0-9]$",
            "description": "A human readable short identifier used to references resources.\n\nDifferent than a `rivet.common#Uuid` because this is intended to be human readable.\n\nDifferent than `rivet.common#DisplayName` because this should not include special\ncharacters and be short."
          },
          "provider_display_name": {
            "type": "string",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
            "description": "A universally unique identifier."
          },
          "region_display_name": {
            "type": "string",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
            "description": "A universally unique identifier."
          },
          "datacenter_coord": {
            "$ref": "#/components/schemas/Coord"
          },
          "datacenter_distance_from_client": {
            "$ref": "#/components/schemas/Distance"
          }
        },
        "required": [
          "datacenter_coord",
          "datacenter_distance_from_client",
          "provider_display_name",
          "region_display_name",
          "region_id"
        ]
      },
      "SetLobbyClosedRequestContent": {
        "type": "object",
        "properties": {
          "is_closed": {
            "type": "boolean",
            "nullable": true
          }
        },
        "required": ["is_closed"]
      },
      "UnauthorizedErrorResponseContent": {
        "type": "object",
        "description": "An error thrown when the requestee is not authenticated.",
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "metadata": {
            "description": "Unstructured metadata relating to an error. Must be manually parsed."
          }
        },
        "required": ["code", "message"]
      }
    },
    "securitySchemes": {
      "smithy.api.httpBearerAuth": {
        "type": "http",
        "description": "HTTP Bearer authentication",
        "scheme": "Bearer"
      }
    }
  },
  "security": [
    {
      "smithy.api.httpBearerAuth": []
    }
  ]
}
