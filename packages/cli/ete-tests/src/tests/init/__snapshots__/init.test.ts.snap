// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`fern init gigs openapi 1`] = `
[
  {
    "contents": [
      {
        "contents": [
          {
            "contents": [
              {
                "contents": "name: api
headers: {}
",
                "name": "api.yml",
                "type": "file",
              },
              {
                "contents": "types:
  device:
    properties:
      object: string
      id: string
      model: _InlinedType17
      sims: list<SIMs.sim>
      user: _InlinedType18
      createdAt: string
  _InlinedType17:
    properties:
      object: string
      id: string
      brand: string
      name: string
      simTypes: list<string>
      type: string
  _InlinedType18:
    properties:
      object: string
      id: string
      email: string
      emailVerified: boolean
      preferredLocale: string
      createdAt: string
  plan:
    properties:
      object: string
      id: string
      coverage: commons.coverage
      data: integer
      dataUnit: string
      name: string
      price: _InlinedType19
      provider: string
      requirements: _InlinedType20
      simTypes: list<string>
      sms: integer
      smsUnit: string
      status: string
      tags: list<string>
      validity: _InlinedType21
      voice: integer
      voiceUnit: string
      createdAt: string
  _InlinedType19:
    properties:
      amount: integer
      currency: string
  _InlinedType20:
    properties:
      address: string
      device: string
      user.birthday: string
      user.fullName: string
  _InlinedType21:
    properties:
      minimumPeriods: integer
      type: string
      unit: string
      value: integer
  coverage:
    properties:
      object: string
      id: string
      countries: list<string>
      name: string
  porting:
    properties:
      object: string
      id: string
      declinedAttempts: integer
      donorProvider: _InlinedType22
      phoneNumber: string
      provider: string
      recipientProvider: _InlinedType23
      required: list<string>
      status: string
      user: string
      createdAt: string
  _InlinedType22:
    docs: The service provider from whom the number is ported.
    properties:
      object: string
      id: string
      name: string
      recipientProviders: list<string>
  _InlinedType23:
    docs: The service provider to whom the number is ported.
    properties:
      object: string
      id: string
      name: string
      recipientProviders: list<string>
  organization:
    properties:
      object: string
      id: string
      name: string
      createdAt: string
  subscription:
    properties:
      object: string
      id: string
      currentPeriod: _InlinedType24
      plan: commons.plan
      sim: _InlinedType25
      status: string
      user: commons.user
      createdAt: string
  _InlinedType24:
    properties:
      number: integer
      start: string
      end: string
  _InlinedType25:
    properties:
      object: string
      id: string
      iccid: string
      provider: string
      status: string
      type: string
      createdAt: string
  user:
    properties:
      object: string
      id: string
      email: string
      emailVerified: boolean
      preferredLocale: string
      createdAt: string
  userAddress:
    properties:
      object: string
      id: string
      city: string
      country: string
      line1: string
      user: string
      createdAt: string
services:
  http:
    CommonsService:
      auth: false
      base-path: ''
      endpoints: {}
",
                "name": "commons.yml",
                "type": "file",
              },
              {
                "contents": "types:
  _InlinedType0:
    properties:
      object: string
      items: list<Devices.deviceModel>
  _InlinedType1:
    properties:
      object: string
      items: list<Devices.deviceModel>
  _InlinedType2:
    properties:
      object: string
      items: list<commons.device>
  _InlinedType3:
    properties:
      object: string
      items: list<commons.device>
services:
  http:
    DevicesService:
      auth: false
      base-path: ''
      endpoints:
        DeviceModelsRetrieve:
          path: /deviceModels/{id}
          method: GET
          docs: Retrieves the details of an existing device model.
          display-name: Retrieve a device model
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
          response: Devices.deviceModel
        DeviceModelsSearch:
          path: /deviceModels/search
          method: POST
          docs: Searches for existing devices models matching the given parameters.
          display-name: Search for device models
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
            body:
              properties:
                imei: string
          response: _InlinedType0
        DeviceModelsList:
          path: /deviceModels
          method: GET
          docs: >-
            Returns a list of device models. The models returned are sorted by
            creation date, with the most recently created models appearing
            first.
          display-name: List all device models
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
          response: _InlinedType1
        DevicesRetrieve:
          path: /projects/{project}/devices/{id}
          method: GET
          docs: >-
            Retrieves the details of an existing device owned by the
            authenticated user.
          display-name: Retrieve a device
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
          response: commons.device
        DevicesDelete:
          path: /projects/{project}/devices/{id}
          method: DELETE
          docs: Retrieves the details of an existing device and deletes it.
          display-name: Delete a device
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
          response: commons.device
        DevicesUpdate:
          path: /projects/{project}/devices/{id}
          method: PATCH
          docs: >
            Updates the given properties of an existing device.


            <!-- theme: info -->

            > #### Preview

            >

            > This endpoint is currently in preview and might change in the
            future.

            > We’re excited to hear your feedback and ideas. Please send an
            email

            > to [support@gigs.com](mailto:support@gigs.com) to share your
            thoughts.
          display-name: Update a device
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
            body:
              properties:
                sims: optional<list<string>>
          response: commons.device
        DevicesSearch:
          path: /projects/{project}/devices/search
          method: POST
          docs: >-
            Searches for existing devices matching the given parameters. The
            search will only return factory devices not yet assigned to any
            user, or devices already owned by the current user.
          display-name: Search for devices
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
            body:
              properties:
                imei: string
          response: _InlinedType2
        DevicesList:
          path: /projects/{project}/devices
          method: GET
          docs: >-
            Returns a list of devices. The devices returned are sorted by
            creation date, with the most recently created devices appearing
            first.
          display-name: List all devices
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
          response: _InlinedType3
        DevicesCreate:
          path: /projects/{project}/devices
          method: POST
          docs: Creates a new device with the given parameters.
          display-name: Create a device
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
            body:
              properties:
                imei: string
                user: string
                sims: optional<list<string>>
",
                "name": "devices.yml",
                "type": "file",
              },
              {
                "contents": "types:
  _InlinedType4:
    properties:
      object: string
      items: list<Plans.planDocument>
  _InlinedType5:
    properties:
      object: string
      items: list<commons.plan>
services:
  http:
    PlansService:
      auth: false
      base-path: ''
      endpoints:
        PlansArchive:
          path: /projects/{project}/plans/{id}/archive
          method: POST
          docs: >
            Set the status of a plan to archived. An archived plan can not be
            used to create new subscriptions.


            <!-- theme: info -->

            > #### Preview

            >

            > This endpoint is currently in preview and might change in the
            future.

            > We’re excited to hear your feedback and ideas. Please send an
            email

            > to [support@gigs.com](mailto:support@gigs.com) to share your
            thoughts.
          display-name: Archive a plan
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
          response: commons.plan
        PlanDocumentRetrieve:
          path: /projects/{project}/plans/{plan}/documents/{id}
          method: GET
          docs: Retrieves the details of an existing document for a given plan.
          display-name: Retrieve a plan document
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
          response: Plans.planDocument
        PlanDocumentsList:
          path: /projects/{project}/plans/{plan}/documents
          method: GET
          docs: >-
            Returns a list of documents related to the given plan. The documents
            returned are sorted by creation date, with the most recently created
            documents appearing first.
          display-name: List all plan documents
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
          response: _InlinedType4
        PlansRetrieve:
          path: /projects/{project}/plans/{id}
          method: GET
          docs: Retrieve the details of an existing plan.
          display-name: Retrieve a plan
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
          response: commons.plan
        PlansUpdate:
          path: /projects/{project}/plans/{id}
          method: PATCH
          docs: >-
            Updates the specified plan by setting the values of the parameters
            passed.
          display-name: Update a plan
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
            body:
              properties:
                name: optional<string>
          response: commons.plan
        PlansPublish:
          path: /projects/{project}/plans/{id}/publish
          method: POST
          docs: >
            Set the status of a plan to available. Available plans can be used
            to create new subscriptions.


            <!-- theme: info -->

            > #### Preview

            >

            > This endpoint is currently in preview and might change in the
            future.

            > We’re excited to hear your feedback and ideas. Please send an
            email

            > to [support@gigs.com](mailto:support@gigs.com) to share your
            thoughts.
          display-name: Publish a plan
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
          response: commons.plan
        PlansList:
          path: /projects/{project}/plans
          method: GET
          docs: Returns a list of plans.
          display-name: List all plans
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
          response: _InlinedType5
",
                "name": "plans.yml",
                "type": "file",
              },
              {
                "contents": "types:
  _InlinedType6:
    properties:
      object: string
      items: list<commons.porting>
  _InlinedType7:
    properties:
      object: string
      items: list<Portings.serviceProvider>
services:
  http:
    PortingsService:
      auth: false
      base-path: ''
      endpoints:
        PortingCancel:
          path: /projects/{project}/portings/{id}/cancel
          method: POST
          docs: >
            Retrieves the details of an existing porting and cancels it. Only
            portings that have not yet being completed can be canceled.


            <!-- theme: info -->

            > #### Preview

            >

            > This endpoint is currently in preview and might change in the
            future.

            > We’re excited to hear your feedback and ideas. Please send an
            email

            > to [support@gigs.com](mailto:support@gigs.com) to share your
            thoughts.
          display-name: Cancel a porting
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
          response: commons.porting
        PortingRetrieve:
          path: /projects/{project}/portings/{id}
          method: GET
          docs: >
            Retrieves the details of an existing porting.


            <!-- theme: info -->

            > #### Preview

            >

            > This endpoint is currently in preview and might change in the
            future.

            > We’re excited to hear your feedback and ideas. Please send an
            email

            > to [support@gigs.com](mailto:support@gigs.com) to share your
            thoughts.
          display-name: Retrieve a Porting
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
          response: commons.porting
        PortingUpdate:
          path: /projects/{project}/portings/{id}
          method: PATCH
          docs: >
            Updates the specified porting by setting the values of the
            parameters passed.


            <!-- theme: info -->

            > #### Preview

            >

            > This endpoint is currently in preview and might change in the
            future.

            > We’re excited to hear your feedback and ideas. Please send an
            email

            > to [support@gigs.com](mailto:support@gigs.com) to share your
            thoughts.
          display-name: Update a porting
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
            body:
              properties:
                accountNumber: optional<string>
                accountPin: optional<string>
                birthday: optional<string>
                donorProvider: optional<string>
                firstName: optional<string>
                lastName: optional<string>
                phoneNumber: optional<string>
                provider: optional<string>
          response: commons.porting
        PortingsList:
          path: /projects/{project}/portings
          method: GET
          docs: >
            Returns a list of portings. The portings returned are sorted by
            creation date, with the most recently created portings appearing
            first.


            <!-- theme: info -->

            > #### Preview

            >

            > This endpoint is currently in preview and might change in the
            future.

            > We’re excited to hear your feedback and ideas. Please send an
            email

            > to [support@gigs.com](mailto:support@gigs.com) to share your
            thoughts.
          display-name: List all portings
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
          response: _InlinedType6
        PortingsCreate:
          path: /projects/{project}/portings
          method: POST
          docs: >
            Creates a new porting with the parameters passed. The porting will
            be created in \`draft\` status and can be later used to create an
            order or subscription for the given network provider.


            Only some of the fields are required during creation creation, but
            all of the ones required by the network provider must be set before
            submitting the porting.



            <!-- theme: info -->

            > #### Preview

            >

            > This endpoint is currently in preview and might change in the
            future.

            > We’re excited to hear your feedback and ideas. Please send an
            email

            > to [support@gigs.com](mailto:support@gigs.com) to share your
            thoughts.
          display-name: Create a porting
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
            body:
              properties:
                accountNumber: optional<string>
                accountPin: optional<string>
                birthday: optional<string>
                donorProvider: optional<string>
                firstName: optional<string>
                lastName: optional<string>
                phoneNumber: string
                provider: string
                user: string
        ServiceProviderRetrieve:
          path: /serviceProviders/{id}
          method: GET
          docs: >
            Retrieves the details of a service provider.


            <!-- theme: info -->

            > #### Preview

            >

            > This endpoint is currently in preview and might change in the
            future.

            > We’re excited to hear your feedback and ideas. Please send an
            email

            > to [support@gigs.com](mailto:support@gigs.com) to share your
            thoughts.
          display-name: Retrieve a service provider
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
          response: Portings.serviceProvider
        ServiceProvidersList:
          path: /serviceProviders
          method: GET
          docs: >
            Returns a list of service providers.


            <!-- theme: info -->

            > #### Preview

            >

            > This endpoint is currently in preview and might change in the
            future.

            > We’re excited to hear your feedback and ideas. Please send an
            email

            > to [support@gigs.com](mailto:support@gigs.com) to share your
            thoughts.
          display-name: List all service providers
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
          response: _InlinedType7
",
                "name": "portings.yml",
                "type": "file",
              },
              {
                "contents": "types:
  _InlinedType8:
    properties:
      object: string
  _InlinedType9:
    properties:
      object: string
      items: list<Projects.project>
services:
  http:
    ProjectsService:
      auth: false
      base-path: ''
      endpoints:
        ProjectsRetrieve:
          path: /projects/{project}
          method: GET
          docs: >-
            Retrieves the details of an existing project accessible by the API
            client.
          display-name: Retrieve a project
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
          response: Projects.project
        ProjectsCredentialsRetrieve:
          path: /projects/{project}/credentials
          method: GET
          docs: >
            Retrieve the credentials of an existing project.


            <!-- theme: info -->

            > #### Preview

            >

            > This endpoint is currently in preview and might change in the
            future.

            > We’re excited to hear your feedback and ideas. Please send an
            email

            > to [support@gigs.com](mailto:support@gigs.com) to share your
            thoughts.
          display-name: Retrieve the project credentials
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
          response: _InlinedType8
        ProjectsList:
          path: /projects
          method: GET
          docs: >-
            Returns a list of projects. The projects returned are sorted by
            creation date, with the most recently created projects appearing
            first.
          display-name: List all projects
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
          response: _InlinedType9
",
                "name": "projects.yml",
                "type": "file",
              },
              {
                "contents": "types:
  _InlinedType10:
    properties:
      object: string
      items: list<SIMs.sim>
  _InlinedType11:
    properties:
      object: string
      items: list<SIMs.sim>
services:
  http:
    SiMsService:
      auth: false
      base-path: ''
      endpoints:
        SIMsCredentialsRetrieve:
          path: /projects/{project}/sims/{id}/credentials
          method: GET
          docs: Retrieve the credentials of an existing SIM.
          display-name: Retrieve the SIM credentials
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
          response: SIMs.simCredentials
        SIMsRetrieve:
          path: /projects/{project}/sims/{id}
          method: GET
          docs: >-
            Retrieve the details of an existing SIM which the authenticated user
            is authorized to view.
          display-name: Retrieve a SIM
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
          response: SIMs.sim
        SIMsSearch:
          path: /projects/{project}/sims/search
          method: POST
          docs: Searches for existing SIMs matching the given parameters.
          display-name: Search for SIMs
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
            body:
              properties:
                iccid: string
                type: optional<list<string>>
          response: _InlinedType10
        SIMsList:
          path: /projects/{project}/sims
          method: GET
          docs: >-
            Returns a list of SIMs. The SIMs returned are sorted by creation
            date, with the most recently created SIMs appearing first.
          display-name: List all SIMs
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
          response: _InlinedType11
",
                "name": "siMs.yml",
                "type": "file",
              },
              {
                "contents": "types:
  _InlinedType12:
    properties:
      object: string
      items: list<commons.subscription>
services:
  http:
    SubscriptionsService:
      auth: false
      base-path: ''
      endpoints:
        SubscriptionsCancel:
          path: /projects/{project}/subscriptions/{id}/cancel
          method: POST
          docs: >-
            Retrieves the details of an existing subscription and schedules
            termination of the plan at the end of the next renewal date. You
            need only supply the unique subscription identifier that was
            returned upon purchasing a plan.
          display-name: Cancel an active subscription
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
          response: commons.subscription
        SubscriptionsRetrieve:
          path: /projects/{project}/subscriptions/{id}
          method: GET
          docs: >-
            Retrieves the details of an existing subscription. You need only
            supply the unique subscription identifier that was returned upon
            purchasing a plan.
          display-name: Retrieve a subscription
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
          response: commons.subscription
        SubscriptionsEnd:
          path: /projects/{project}/subscriptions/{id}
          method: DELETE
          docs: >-
            Ends an active plan subscription immediately. You only need to
            supply the unique subscription identifier that was returned upon
            purchasing a plan.
          display-name: End an active subscription
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
          response: commons.subscription
        SubscriptionsResume:
          path: /projects/{project}/subscriptions/{id}/resume
          method: POST
          docs: >-
            Removes the cancellation and end times of the subscription. The
            subscription will continue to auto-renew until canceled again.
          display-name: Resume a canceled subscription
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
          response: commons.subscription
        SubscriptionsList:
          path: /projects/{project}/subscriptions
          method: GET
          docs: >-
            Returns a list of subscriptions. The subscriptions returned are
            sorted by creation date, with the most recently created
            subscriptions appearing first.
          display-name: List all subscriptions
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
          response: _InlinedType12
        SubscriptionsCreate:
          path: /projects/{project}/subscriptions
          method: POST
          docs: >-
            Creates a new subscription for an existing user in the specified
            project.
          display-name: Create a subscription
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
            body:
              properties:
                plan: string
                user: string
",
                "name": "subscriptions.yml",
                "type": "file",
              },
              {
                "contents": "types:
  _InlinedType13:
    properties:
      object: string
      items: list<commons.usageRecord>
services:
  http:
    UsageService:
      auth: false
      base-path: ''
      endpoints:
        SubscriptionUsageRecordList:
          path: /projects/{project}/subscriptions/{id}/usage
          method: GET
          docs: >-
            Lists usage records in ascending order for a subscription,
            defaulting to \`daily\` aggregation for the latest subscription
            period.
          display-name: List subscription usage records
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
          response: _InlinedType13
",
                "name": "usage.yml",
                "type": "file",
              },
              {
                "contents": "types:
  _InlinedType14:
    properties:
      object: string
      items: list<commons.userAddress>
services:
  http:
    UserAddressesService:
      auth: false
      base-path: ''
      endpoints:
        UserAddressesList:
          path: /projects/{project}/users/{user}/addresses
          method: GET
          docs: >-
            Returns a list of addresses owned by the given user. The addresses
            returned are sorted by creation date, with the most recently created
            addresses appearing first.
          display-name: List all user addresses
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
          response: _InlinedType14
        UserAddressesCreate:
          path: /projects/{project}/users/{user}/addresses
          method: POST
          docs: Create a new address for the given user with the given parameters.
          display-name: Create a user address
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
            body:
              properties:
                object: optional<string>
                line1: string
                city: string
                country: string
        UserAddressesRetrieve:
          path: /projects/{project}/users/{user}/addresses/{id}
          method: GET
          docs: Retrieves the details of an existing address for a given user.
          display-name: Retrieve a user address
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
          response: commons.userAddress
        UserAddressesDelete:
          path: /projects/{project}/users/{user}/addresses/{id}
          method: DELETE
          docs: Retrieves the details of an existing user address and deletes it.
          display-name: Delete a user address
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
          response: commons.userAddress
",
                "name": "userAddresses.yml",
                "type": "file",
              },
              {
                "contents": "types:
  _InlinedType15:
    properties:
      object: string
      items: list<commons.user>
  _InlinedType16:
    properties:
      object: string
      items: list<commons.user>
services:
  http:
    UsersService:
      auth: false
      base-path: ''
      endpoints:
        UsersRetrieve:
          path: /projects/{project}/users/{id}
          method: GET
          docs: >-
            Retrieves the details of an existing user. You need only supply the
            unique user identifier that was returned upon user creation.
          display-name: Retrieve a user
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
          response: commons.user
        UsersDelete:
          path: /projects/{project}/users/{id}
          method: DELETE
          docs: Retrieves the details of an existing user and deletes it.
          display-name: Delete a user
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
          response: commons.user
        UsersUpdate:
          path: /projects/{project}/users/{id}
          method: PATCH
          docs: >-
            Updates the specified user by setting the values of the parameters
            passed.
          display-name: Update a user
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
            body:
              properties:
                object: optional<string>
                birthday: optional<string>
                email: optional<string>
                fullName: optional<string>
                preferredLocale: optional<string>
          response: commons.user
        UsersSearch:
          path: /projects/{project}/users/search
          method: POST
          docs: Searches for existing users matching the given parameters.
          display-name: Search for users
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
            body:
              properties:
                email: string
          response: _InlinedType15
        UsersList:
          path: /projects/{project}/users
          method: GET
          docs: >-
            Returns a list of users. The users returned are sorted by creation
            date, with the most recently created users appearing first.
          display-name: List all users
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
          response: _InlinedType16
        UsersCreate:
          path: /projects/{project}/users
          method: POST
          docs: Creates a new user with the given parameters.
          display-name: Create a user
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
            body:
              properties:
                object: optional<string>
                email: string
                preferredLocale: optional<string>
",
                "name": "users.yml",
                "type": "file",
              },
            ],
            "name": "definition",
            "type": "directory",
          },
          {
            "contents": "default-group: external
groups: {}
",
            "name": "generators.yml",
            "type": "file",
          },
        ],
        "name": "api",
        "type": "directory",
      },
      {
        "contents": "{
    "organization": "fern",
    "version": "0.0.0"
}",
        "name": "fern.config.json",
        "type": "file",
      },
    ],
    "name": "fern",
    "type": "directory",
  },
]
`;

exports[`fern init no existing fern directory 1`] = `
[
  {
    "contents": [
      {
        "contents": [
          {
            "contents": "name: api
error-discrimination:
  strategy: status-code
",
            "name": "api.yml",
            "type": "file",
          },
          {
            "contents": "# yaml-language-server: $schema=https://raw.githubusercontent.com/fern-api/fern/main/fern.schema.json

types:
  MovieId: string

  Movie:
    properties:
      id: MovieId
      title: string
      rating: 
        type: double
        docs: The rating scale is one to five stars

  CreateMovieRequest: 
    properties:
      title: string
      rating: double 

services:
  http:
  
    MoviesService:
      auth: false
      base-path: /movies
      endpoints:

        # Here's an HTTP endpoint
        createMovie:
          docs: Add a movie to the database
          method: POST
          path: /create-movie
          request: CreateMovieRequest
          response: MovieId

        getMovie:
          method: GET
          path: /{movieId}
          path-parameters:
            movieId: MovieId
          response: Movie
          errors:
            - MovieDoesNotExistError

errors:
  MovieDoesNotExistError:
    status-code: 404
    type: MovieId
",
            "name": "imdb.yml",
            "type": "file",
          },
        ],
        "name": "definition",
        "type": "directory",
      },
      {
        "contents": "default-group: external
groups: {}
",
        "name": "generators.yml",
        "type": "file",
      },
    ],
    "name": "api",
    "type": "directory",
  },
  {
    "contents": "{
    "organization": "fern",
    "version": "0.0.0"
}",
    "name": "fern.config.json",
    "type": "file",
  },
]
`;

exports[`fern init rivet openapi 1`] = `
[
  {
    "contents": [
      {
        "contents": [
          {
            "contents": [
              {
                "contents": "name: api
headers: {}
",
                "name": "api.yml",
                "type": "file",
              },
              {
                "contents": "types:
  MatchmakerLobbyJoinInfo:
    docs: A matchmaker lobby.
    properties:
      lobby_id: string
      region: commons.MatchmakerLobbyJoinInfoRegion
      ports: commons.MatchmakerLobbyJoinInfoPorts
      player: commons.MatchmakerLobbyJoinInfoPlayer
  MatchmakerLobbyJoinInfoRegion:
    docs: A matchmaker lobby region.
    properties:
      region_id: string
      display_name: string
  MatchmakerLobbyJoinInfoPlayer:
    docs: A matchmaker lobby player.
    properties:
      token: string
services:
  http:
    CommonsService:
      auth: false
      base-path: ''
      endpoints: {}
",
                "name": "commons.yml",
                "type": "file",
              },
              {
                "contents": "types: {}
services:
  http:
    LobbyService:
      auth: false
      base-path: ''
      endpoints:
        LobbyReady:
          path: /lobbies/ready
          method: POST
          docs: >-
            Marks the current lobby as ready to accept connections. Players will
            not be

            able to connect to this lobby until the lobby is flagged as ready.
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
        PlayerConnected:
          path: /players/connected
          method: POST
          docs: >-
            Validates the player token is valid and has not already been
            consumed then

            marks the player as connected.


            # Player Tokens and Reserved Slots


            Player tokens reserve a spot in the lobby until they expire. This
            allows for

            precise matchmaking up to exactly the lobby's player limit, which is

            important for games with small lobbies and a high influx of players.


            By calling this endpoint with the player token, the player's spot is
            marked

            as connected and will not expire. If this endpoint is never called,
            the

            player's token will expire and this spot will be filled by another
            player.


            # Anti-Botting


            Player tokens are only issued by caling
            \`rivet.api.matchmaker#JoinLobby\`, calling
            \`rivet.api.matchmaker#FindLobby\`, or

            from the \`rivet.api.identity.common#GlobalEventMatchmakerLobbyJoin\`
            event.

            These endpoints have anti-botting measures (i.e. enforcing max
            player

            limits, captchas, and detecting bots), so valid player tokens
            provide some

            confidence that the player is not a bot.


            Therefore, it's important to make sure the token is valid by waiting
            for

            this endpoint to return OK before allowing the connected socket to
            do

            anything else. If this endpoint returns an error, the socket should
            be

            disconnected immediately.


            # How to Transmit the Player Token


            The client is responsible for acquiring the player token by caling

            \`rivet.api.matchmaker#JoinLobby\`, calling
            \`rivet.api.matchmaker#FindLobby\`,

            or from the
            \`rivet.api.identity.common#GlobalEventMatchmakerLobbyJoin\`

            event.  Beyond that, it's up to the developer how the player token
            is

            transmitted to the lobby.


            If using WebSockets, the player token can be transmitted as a query

            paramter.


            Otherwise, the player token will likely be automatically sent by the
            client

            once the socket opens. As mentioned above, nothing else should
            happen until

            the player token is validated.
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
            body: lobby.PlayerConnectedRequestContent
        PlayerDisconnected:
          path: /players/disconnected
          method: POST
          docs: >-
            Marks a player as disconnected.


            # Ghost Players


            If players are not marked as disconnected, lobbies will result with
            "ghost

            players" that the matchmaker thinks exist but are no longer
            connected to the

            lobby.
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
            body: lobby.PlayerDisconnectedRequestContent
",
                "name": "lobby.yml",
                "type": "file",
              },
              {
                "contents": "types: {}
services:
  http:
    PublicService:
      auth: false
      base-path: ''
      endpoints:
        SetLobbyClosed:
          path: /lobbies/closed
          method: PUT
          docs: >-
            If \`is_closed\` is \`true\`, players will be prevented from joining the
            lobby.


            Does not shutdown the lobby.
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
            body: public.SetLobbyClosedRequestContent
        FindLobby:
          path: /lobbies/find
          method: POST
          docs: >-
            Finds a lobby based on the given criteria.


            If a lobby is not found and \`prevent_auto_create_lobby\` is \`true\`, a
            new lobby will be created.
          path-parameters: {}
          request:
            query-parameters: {}
            body: public.FindLobbyRequestContent
          response: public.FindLobbyResponseContent
        JoinLobby:
          path: /lobbies/join
          method: POST
          docs: >-
            Joins a specific lobby.


            This request will use the direct player count configured for the
            lobby

            group.
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
            body: public.JoinLobbyRequestContent
          response: public.JoinLobbyResponseContent
        ListLobbies:
          path: /lobbies/list
          method: GET
          docs: Lists all open lobbies.
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
          response: public.ListLobbiesResponseContent
        ListRegions:
          path: /regions
          method: GET
          docs: >-
            Returns a list of regions available to this namespace.


            Regions are sorted by most optimal to least optimal. The player's IP
            address

            is used to calculate the regions' optimality.
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
          response: public.ListRegionsResponseContent
",
                "name": "public.yml",
                "type": "file",
              },
            ],
            "name": "definition",
            "type": "directory",
          },
          {
            "contents": "default-group: external
groups: {}
",
            "name": "generators.yml",
            "type": "file",
          },
        ],
        "name": "api",
        "type": "directory",
      },
      {
        "contents": "{
    "organization": "fern",
    "version": "0.0.0"
}",
        "name": "fern.config.json",
        "type": "file",
      },
    ],
    "name": "fern",
    "type": "directory",
  },
]
`;

exports[`fern init telematica openapi 1`] = `
[
  {
    "contents": [
      {
        "contents": [
          {
            "contents": [
              {
                "contents": "name: api
headers: {}
",
                "name": "api.yml",
                "type": "file",
              },
              {
                "contents": "types:
  SOC_ResponseDTO:
    properties:
      soc: double
  Range_ResponseDTO:
    properties:
      range: double
  RangeSoc_ResponseDTO:
    properties:
      range: double
      soc: double
  Location_ResponseDTO:
    properties:
      location: _InlinedType0
  _InlinedType0:
    extends:
      - commons.ILocation
  ChargingStatus_ResponseDTO:
    properties:
      isCharging: boolean
  Odo_ResponseDTO:
    properties:
      odo: double
  StaticAttributes_ResponseDTO:
    properties:
      vin: string
      model: string
      year: double
      make: string
      registration: string
services:
  http:
    CommonsService:
      auth: false
      base-path: ''
      endpoints: {}
",
                "name": "commons.yml",
                "type": "file",
              },
              {
                "contents": "types: {}
services:
  http:
    SampleCallbackService:
      auth: false
      base-path: ''
      endpoints:
        AppController_callback:
          path: /callback
          method: POST
          docs: >-
            This is a dummy callback endpoint.

            Please share the POST callback endpoint created in your app's
            backend with Telematica to get callback requests of this format.
          display-name: Dummy callback endpoint
          path-parameters: {}
          request:
            query-parameters: {}
            headers: {}
            body:
              properties:
                user: optional<string>
                vehicles: optional<list<commons.Callback_DTO>>
",
                "name": "sampleCallback.yml",
                "type": "file",
              },
              {
                "contents": "types: {}
services:
  http:
    TestingEndpointsService:
      auth: false
      base-path: ''
      endpoints:
        getSOCTest:
          path: /vehicle-data/soc/test
          method: GET
          display-name: Test SOC (battery level)
          path-parameters: {}
          request:
            query-parameters: {}
          response: commons.SOC_ResponseDTO
        getRangeTest:
          path: /vehicle-data/range/test
          method: GET
          display-name: Test range
          path-parameters: {}
          request:
            query-parameters: {}
          response: commons.Range_ResponseDTO
        getRangeSocTest:
          path: /vehicle-data/range-soc/test
          method: GET
          display-name: Test range-soc
          path-parameters: {}
          request:
            query-parameters: {}
          response: commons.RangeSoc_ResponseDTO
        getLocationTest:
          path: /vehicle-data/location/test
          method: GET
          display-name: Test location
          path-parameters: {}
          request:
            query-parameters: {}
          response: commons.Location_ResponseDTO
        getChargingStatusTest:
          path: /vehicle-data/charging-status/test
          method: GET
          display-name: Test charging status
          path-parameters: {}
          request:
            query-parameters: {}
          response: commons.ChargingStatus_ResponseDTO
        getOdoTest:
          path: /vehicle-data/odo/test
          method: GET
          display-name: Test odo
          path-parameters: {}
          request:
            query-parameters: {}
          response: commons.Odo_ResponseDTO
        getStaticAttributesTest:
          path: /vehicle-data/static-attributes/test
          method: GET
          display-name: Test static attributes
          path-parameters: {}
          request:
            query-parameters: {}
          response: commons.StaticAttributes_ResponseDTO
",
                "name": "testingEndpoints.yml",
                "type": "file",
              },
              {
                "contents": "types: {}
services:
  http:
    VehicleDataService:
      auth: false
      base-path: ''
      endpoints:
        getSOC:
          path: /vehicle-data/soc
          method: GET
          display-name: SOC (battery level)
          path-parameters: {}
          request:
            query-parameters: {}
          response: commons.SOC_ResponseDTO
        getRange:
          path: /vehicle-data/range
          method: GET
          display-name: Range
          path-parameters: {}
          request:
            query-parameters: {}
          response: commons.Range_ResponseDTO
        getRangeSoc:
          path: /vehicle-data/range-soc
          method: GET
          docs: >-
            This endpoint returns the SOC and range for the vehicle in a single
            call
          display-name: Range-SOC
          path-parameters: {}
          request:
            query-parameters: {}
          response: commons.RangeSoc_ResponseDTO
        getLocation:
          path: /vehicle-data/location
          method: GET
          display-name: Location
          path-parameters: {}
          request:
            query-parameters: {}
          response: commons.Location_ResponseDTO
        getChargingStatus:
          path: /vehicle-data/charging-status
          method: GET
          display-name: Charging Status
          path-parameters: {}
          request:
            query-parameters: {}
          response: commons.ChargingStatus_ResponseDTO
        getOdo:
          path: /vehicle-data/odo
          method: GET
          display-name: Odometer
          path-parameters: {}
          request:
            query-parameters: {}
          response: commons.Odo_ResponseDTO
        getStaticAttributes:
          path: /vehicle-data/static-attributes
          method: GET
          docs: >-
            Static vehicle attributes like VIN, registration number, model, year
            and make
          display-name: Static attributes
          path-parameters: {}
          request:
            query-parameters: {}
          response: commons.StaticAttributes_ResponseDTO
",
                "name": "vehicleData.yml",
                "type": "file",
              },
            ],
            "name": "definition",
            "type": "directory",
          },
          {
            "contents": "default-group: external
groups: {}
",
            "name": "generators.yml",
            "type": "file",
          },
        ],
        "name": "api",
        "type": "directory",
      },
      {
        "contents": "{
    "organization": "fern",
    "version": "0.0.0"
}",
        "name": "fern.config.json",
        "type": "file",
      },
    ],
    "name": "fern",
    "type": "directory",
  },
]
`;
