// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`open api converter rivet simple 1`] = `
{
  "rootApiFile": {
    "headers": {},
    "name": "api",
  },
  "serviceFiles": {
    "commons.yml": {
      "types": {
        "Coord": {
          "docs": "Geographical coordinates for a location on Planet Earth.",
          "extends": undefined,
          "properties": {
            "latitude": "double",
            "longitude": "double",
          },
        },
        "Distance": {
          "docs": "Distance available in multiple units.",
          "extends": undefined,
          "properties": {
            "kilometers": "double",
            "miles": "double",
          },
        },
        "GameModeInfo": {
          "docs": "A game mode that the player can join.",
          "extends": undefined,
          "properties": {
            "game_mode_id": "string",
          },
        },
        "LobbyInfo": {
          "docs": "A public lobby in the lobby list.",
          "extends": undefined,
          "properties": {
            "game_mode_id": "string",
            "lobby_id": "string",
            "max_players_direct": "double",
            "max_players_normal": "double",
            "max_players_party": "double",
            "region_id": "string",
            "total_player_count": "double",
          },
        },
        "MatchmakerLobbyJoinInfo": {
          "docs": "A matchmaker lobby.",
          "extends": undefined,
          "properties": {
            "lobby_id": "string",
            "player": "MatchmakerLobbyJoinInfoPlayer",
            "ports": "MatchmakerLobbyJoinInfoPorts",
            "region": "MatchmakerLobbyJoinInfoRegion",
          },
        },
        "MatchmakerLobbyJoinInfoPlayer": {
          "docs": "A matchmaker lobby player.",
          "extends": undefined,
          "properties": {
            "token": "string",
          },
        },
        "MatchmakerLobbyJoinInfoRegion": {
          "docs": "A matchmaker lobby region.",
          "extends": undefined,
          "properties": {
            "display_name": "string",
            "region_id": "string",
          },
        },
        "RegionInfo": {
          "docs": "A region that the player can connect to.",
          "extends": undefined,
          "properties": {
            "datacenter_coord": "Coord",
            "datacenter_distance_from_client": "Distance",
            "provider_display_name": "string",
            "region_display_name": "string",
            "region_id": "string",
          },
        },
      },
    },
    "lobby.yml": {
      "services": {
        "http": {
          "LobbyService": {
            "auth": true,
            "base-path": "",
            "endpoints": {
              "lobbyReady": {
                "display-name": undefined,
                "docs": "Marks the current lobby as ready to accept connections. Players will not be
able to connect to this lobby until the lobby is flagged as ready.",
                "method": "POST",
                "path": "/lobbies/ready",
              },
              "playerConnected": {
                "display-name": undefined,
                "docs": "Validates the player token is valid and has not already been consumed then
marks the player as connected.

# Player Tokens and Reserved Slots

Player tokens reserve a spot in the lobby until they expire. This allows for
precise matchmaking up to exactly the lobby's player limit, which is
important for games with small lobbies and a high influx of players.

By calling this endpoint with the player token, the player's spot is marked
as connected and will not expire. If this endpoint is never called, the
player's token will expire and this spot will be filled by another player.

# Anti-Botting

Player tokens are only issued by caling \`rivet.api.matchmaker#JoinLobby\`, calling \`rivet.api.matchmaker#FindLobby\`, or
from the \`rivet.api.identity.common#GlobalEventMatchmakerLobbyJoin\` event.
These endpoints have anti-botting measures (i.e. enforcing max player
limits, captchas, and detecting bots), so valid player tokens provide some
confidence that the player is not a bot.

Therefore, it's important to make sure the token is valid by waiting for
this endpoint to return OK before allowing the connected socket to do
anything else. If this endpoint returns an error, the socket should be
disconnected immediately.

# How to Transmit the Player Token

The client is responsible for acquiring the player token by caling
\`rivet.api.matchmaker#JoinLobby\`, calling \`rivet.api.matchmaker#FindLobby\`,
or from the \`rivet.api.identity.common#GlobalEventMatchmakerLobbyJoin\`
event.  Beyond that, it's up to the developer how the player token is
transmitted to the lobby.

If using WebSockets, the player token can be transmitted as a query
paramter.

Otherwise, the player token will likely be automatically sent by the client
once the socket opens. As mentioned above, nothing else should happen until
the player token is validated.",
                "method": "POST",
                "path": "/players/connected",
                "request": {
                  "body": "PlayerConnectedRequestContent",
                },
              },
              "playerDisconnected": {
                "display-name": undefined,
                "docs": "Marks a player as disconnected.

# Ghost Players

If players are not marked as disconnected, lobbies will result with "ghost
players" that the matchmaker thinks exist but are no longer connected to the
lobby.",
                "method": "POST",
                "path": "/players/disconnected",
                "request": {
                  "body": "PlayerDisconnectedRequestContent",
                },
              },
            },
          },
        },
      },
      "types": {
        "PlayerConnectedRequestContent": {
          "extends": undefined,
          "properties": {
            "player_token": "string",
          },
        },
        "PlayerDisconnectedRequestContent": {
          "extends": undefined,
          "properties": {
            "player_token": "string",
          },
        },
      },
    },
    "public.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "services": {
        "http": {
          "PublicService": {
            "auth": true,
            "base-path": "",
            "endpoints": {
              "findLobby": {
                "display-name": undefined,
                "docs": "Finds a lobby based on the given criteria.

If a lobby is not found and \`prevent_auto_create_lobby\` is \`true\`, a new lobby will be created.",
                "method": "POST",
                "path": "/lobbies/find",
                "request": {
                  "body": "FindLobbyRequestContent",
                  "headers": {
                    "origin": "optional<string>",
                  },
                },
                "response": "FindLobbyResponseContent",
              },
              "joinLobby": {
                "display-name": undefined,
                "docs": "Joins a specific lobby.

This request will use the direct player count configured for the lobby
group.",
                "method": "POST",
                "path": "/lobbies/join",
                "request": {
                  "body": "JoinLobbyRequestContent",
                },
                "response": "JoinLobbyResponseContent",
              },
              "listLobbies": {
                "display-name": undefined,
                "docs": "Lists all open lobbies.",
                "method": "GET",
                "path": "/lobbies/list",
                "response": "ListLobbiesResponseContent",
              },
              "listRegions": {
                "display-name": undefined,
                "docs": "Returns a list of regions available to this namespace.

Regions are sorted by most optimal to least optimal. The player's IP address
is used to calculate the regions' optimality.",
                "method": "GET",
                "path": "/regions",
                "response": "ListRegionsResponseContent",
              },
              "setLobbyClosed": {
                "display-name": undefined,
                "docs": "If \`is_closed\` is \`true\`, players will be prevented from joining the lobby.

Does not shutdown the lobby.",
                "method": "PUT",
                "path": "/lobbies/closed",
                "request": {
                  "body": "SetLobbyClosedRequestContent",
                },
              },
            },
          },
        },
      },
      "types": {
        "FindLobbyRequestContent": {
          "extends": undefined,
          "properties": {
            "captcha": "optional<commons.CaptchaConfig>",
            "game_modes": "list<string>",
            "prevent_auto_create_lobby": "optional<boolean>",
            "regions": "optional<list<string>>",
          },
        },
        "FindLobbyResponseContent": {
          "extends": undefined,
          "properties": {
            "lobby": "commons.MatchmakerLobbyJoinInfo",
          },
        },
        "JoinLobbyRequestContent": {
          "extends": undefined,
          "properties": {
            "captcha": "optional<commons.CaptchaConfig>",
            "lobby_id": "string",
          },
        },
        "JoinLobbyResponseContent": {
          "extends": undefined,
          "properties": {
            "lobby": "commons.MatchmakerLobbyJoinInfo",
          },
        },
        "ListLobbiesResponseContent": {
          "extends": undefined,
          "properties": {
            "game_modes": "list<commons.GameModeInfo>",
            "lobbies": "list<commons.LobbyInfo>",
            "regions": "list<commons.RegionInfo>",
          },
        },
        "ListRegionsResponseContent": {
          "extends": undefined,
          "properties": {
            "regions": "list<commons.RegionInfo>",
          },
        },
        "SetLobbyClosedRequestContent": {
          "extends": undefined,
          "properties": {
            "is_closed": "boolean",
          },
        },
      },
    },
  },
}
`;

exports[`open api converter suger simple 1`] = `
{
  "rootApiFile": {
    "headers": {},
    "name": "api",
  },
  "serviceFiles": {
    "apiAuth.yml": {
      "services": {
        "http": {
          "ApiAuthService": {
            "auth": true,
            "base-path": "",
            "endpoints": {
              "": {
                "display-name": "Get the Bearer Access Token to access Suger API",
                "docs": "Get the Bearer Access Token by giving the Suger API Client ID & Client Secret.",
                "method": "POST",
                "path": "/public/apiClient/accessToken",
                "request": {
                  "body": "shared.GetApiClientAccessTokenParams",
                },
                "response": "shared.ApiClientAccessToken",
              },
            },
          },
        },
      },
      "types": {
        "shared.ApiClientAccessToken": {
          "extends": undefined,
          "properties": {
            "access_token": "optional<string>",
            "expires_in": "optional<integer>",
            "token_type": "optional<string>",
          },
        },
        "shared.GetApiClientAccessTokenParams": {
          "extends": undefined,
          "properties": {
            "id": "string",
            "organizationID": "string",
            "secret": "string",
          },
        },
      },
    },
    "buyer.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "services": {
        "http": {
          "BuyerService": {
            "auth": true,
            "base-path": "",
            "endpoints": {
              "": {
                "display-name": "List all buyers under the organization",
                "docs": undefined,
                "method": "GET",
                "path": "/org/{orgId}/buyer",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                },
                "response": "list<commons.shared.IdentityBuyer>",
              },
              "_unnamedOperation7": {
                "display-name": "Get the buyer",
                "docs": undefined,
                "method": "GET",
                "path": "/org/{orgId}/buyer/{buyerId}",
                "path-parameters": {
                  "buyerId": {
                    "docs": "Buyer ID",
                    "type": "string",
                  },
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                },
                "response": "commons.shared.IdentityBuyer",
              },
              "_unnamedOperation8": {
                "display-name": "Update the name & description of the buyer",
                "docs": undefined,
                "method": "PATCH",
                "path": "/org/{orgId}/buyer/{buyerId}",
                "path-parameters": {
                  "buyerId": {
                    "docs": "Buyer ID",
                    "type": "string",
                  },
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                },
                "request": {
                  "body": "lib.UpdateBuyerNameDescriptionParams",
                },
                "response": "commons.shared.IdentityBuyer",
              },
            },
          },
        },
      },
      "types": {
        "lib.UpdateBuyerNameDescriptionParams": {
          "extends": undefined,
          "properties": {
            "description": "optional<string>",
            "id": "optional<string>",
            "name": "optional<string>",
            "organizationID": "optional<string>",
          },
        },
      },
    },
    "commons.yml": {
      "types": {
        "marketplacemetering.BatchMeterUsageOutput": {
          "extends": undefined,
          "properties": {
            "resultMetadata": "optional<middleware.Metadata>",
            "results": "optional<list<types.UsageRecordResult>>",
            "unprocessedRecords": "optional<list<types.UsageRecord>>",
          },
        },
        "marketplacemeteringv1.BatchUsageEventOkResponse": {
          "extends": undefined,
          "properties": {
            "count": "optional<integer>",
            "result": "optional<list<marketplacemeteringv1.UsageBatchEventOkMessage>>",
          },
        },
        "marketplacemeteringv1.UsageBatchEventOkMessage": {
          "extends": undefined,
          "properties": {
            "dimension": "optional<string>",
            "effectiveStartTime": "optional<string>",
            "error": "optional<marketplacemeteringv1.UsageEventConflictResponse>",
            "messageTime": "optional<string>",
            "planId": "optional<string>",
            "quantity": "optional<double>",
            "resourceId": "optional<string>",
            "resourceUri": "optional<string>",
            "status": "optional<string>",
            "usageEventId": "optional<string>",
          },
        },
        "marketplacemeteringv1.UsageEventConflictResponse": {
          "extends": undefined,
          "properties": {
            "additionalInfo": "optional<marketplacemeteringv1.UsageEventConflictResponseAdditionalInfo>",
            "code": "optional<string>",
            "message": "optional<string>",
          },
        },
        "marketplacemeteringv1.UsageEventConflictResponseAdditionalInfo": {
          "extends": undefined,
          "properties": {
            "acceptedMessage": "optional<marketplacemeteringv1.UsageEventOkResponse>",
          },
        },
        "marketplacemeteringv1.UsageEventOkResponse": {
          "extends": undefined,
          "properties": {
            "dimension": "optional<string>",
            "effectiveStartTime": "optional<string>",
            "messageTime": "optional<string>",
            "planId": "optional<string>",
            "quantity": "optional<double>",
            "resourceId": "optional<string>",
            "resourceUri": "optional<string>",
            "status": "optional<string>",
            "usageEventId": "optional<string>",
          },
        },
        "partnercentersubmission.AzureAudience": {
          "extends": undefined,
          "properties": {
            "description": "optional<string>",
            "id": "optional<string>",
          },
        },
        "partnercentersubmission.AzureGovernmentCertification": {
          "extends": undefined,
          "properties": {
            "title": "optional<string>",
            "uri": "optional<string>",
            "validationResults": "optional<list<partnercentersubmission.AzureValidationResult>>",
          },
        },
        "partnercentersubmission.AzureListingContact": {
          "extends": undefined,
          "properties": {
            "email": "optional<string>",
            "name": "optional<string>",
            "phone": "optional<string>",
            "type": "optional<string>",
            "uri": "optional<string>",
          },
        },
        "partnercentersubmission.AzureListingUri": {
          "extends": undefined,
          "properties": {
            "displayText": "optional<string>",
            "subtype": "optional<string>",
            "type": "optional<string>",
            "uri": "optional<string>",
          },
        },
        "partnercentersubmission.AzureLocalizedDateTime": {
          "extends": undefined,
          "properties": {
            "dateTimeInUtc": "optional<string>",
            "localizePerMarket": "optional<boolean>",
          },
        },
        "partnercentersubmission.AzureLocalizedTimeRange": {
          "extends": undefined,
          "properties": {
            "endAt": "optional<partnercentersubmission.AzureLocalizedDateTime>",
            "startAt": "optional<partnercentersubmission.AzureLocalizedDateTime>",
          },
        },
        "partnercentersubmission.AzureMarket": {
          "extends": undefined,
          "properties": {
            "friendlyName": "optional<string>",
            "marketCode": "optional<string>",
          },
        },
        "partnercentersubmission.AzureMarketState": {
          "extends": undefined,
          "properties": {
            "marketCode": "optional<string>",
            "state": "optional<string>",
          },
        },
        "partnercentersubmission.AzurePendingUpdateInfo": {
          "extends": undefined,
          "properties": {
            "status": "optional<string>",
            "updateType": "optional<string>",
          },
        },
        "partnercentersubmission.AzurePrice": {
          "extends": undefined,
          "properties": {
            "currencyCode": "optional<string>",
            "openPrice": "optional<double>",
            "priceTierID": "optional<string>",
          },
        },
        "partnercentersubmission.AzurePriceCadence": {
          "extends": undefined,
          "properties": {
            "type": "optional<string>",
            "value": "optional<integer>",
          },
        },
        "partnercentersubmission.AzurePriceSchedule": {
          "extends": undefined,
          "properties": {
            "priceCadence": "optional<partnercentersubmission.AzurePriceCadence>",
            "pricingModel": "optional<string>",
            "pricingUnits": "optional<list<partnercentersubmission.AzurePricingUnit>>",
            "retailPrice": "optional<partnercentersubmission.AzurePrice>",
          },
        },
        "partnercentersubmission.AzurePricingUnit": {
          "extends": undefined,
          "properties": {
            "isUnlimitedUnit": "optional<boolean>",
            "lowerUnit": "optional<integer>",
            "name": "optional<string>",
            "unitType": "optional<string>",
            "upperUnit": "optional<integer>",
          },
        },
        "partnercentersubmission.AzureProduct": {
          "extends": undefined,
          "properties": {
            "availabilities": "optional<list<partnercentersubmission.AzureProductAvailability>>",
            "branches": "optional<list<partnercentersubmission.AzureProductBranch>>",
            "externalIDs": "optional<list<partnercentersubmission.TypeValue>>",
            "id": "optional<string>",
            "isModularPublishing": "optional<boolean>",
            "listings": "optional<list<partnercentersubmission.AzureProductListing>>",
            "name": "optional<string>",
            "packageConfigurations": "optional<list<partnercentersubmission.AzureProductPackageConfiguration>>",
            "properties": "optional<list<partnercentersubmission.AzureProductProperty>>",
            "resourceType": "optional<string>",
            "setup": "optional<partnercentersubmission.AzureProductSetup>",
            "submissions": "optional<list<partnercentersubmission.AzureProductSubmission>>",
            "variants": "optional<list<partnercentersubmission.AzureProductVariant>>",
          },
        },
        "partnercentersubmission.AzureProductAvailability": {
          "extends": undefined,
          "properties": {
            "emailAudiences": "optional<list<partnercentersubmission.AzureAudience>>",
            "enterpriseLicensing": "optional<string>",
            "id": "optional<string>",
            "resourceType": "optional<string>",
            "subscriptionAudiences": "optional<list<partnercentersubmission.AzureAudience>>",
            "visibility": "optional<string>",
          },
        },
        "partnercentersubmission.AzureProductBranch": {
          "extends": undefined,
          "properties": {
            "currentDraftInstanceID": "optional<string>",
            "friendlyName": "optional<string>",
            "id": "optional<string>",
            "module": "optional<string>",
            "resourceType": "optional<string>",
            "type": "optional<string>",
            "variantID": "optional<string>",
          },
        },
        "partnercentersubmission.AzureProductFeatureAvailability": {
          "extends": undefined,
          "properties": {
            "customMeters": "optional<list<partnercentersubmission.AzureProductVariantCustomMeter>>",
            "id": "optional<string>",
            "isHidden": "optional<boolean>",
            "marketStates": "optional<list<partnercentersubmission.AzureMarketState>>",
            "markets": "optional<list<partnercentersubmission.AzureMarket>>",
            "priceSchedules": "optional<list<partnercentersubmission.AzureProductVariantPriceSchedule>>",
            "properties": "optional<list<partnercentersubmission.TypeValue>>",
            "resourceType": "optional<string>",
            "subscriptionAudiences": "optional<list<partnercentersubmission.AzureAudience>>",
            "tenantAudiences": "optional<list<partnercentersubmission.AzureAudience>>",
            "trial": "optional<partnercentersubmission.AzureProductVariantTrial>",
            "visibility": "optional<string>",
          },
        },
        "partnercentersubmission.AzureProductListing": {
          "extends": undefined,
          "properties": {
            "accessInformation": "optional<string>",
            "assets": "optional<list<partnercentersubmission.AzureProductListingAsset>>",
            "compatibleProducts": "optional<list<string>>",
            "description": "optional<string>",
            "gettingStartedInstructions": "optional<string>",
            "id": "optional<string>",
            "keywords": "optional<list<string>>",
            "languageCode": "optional<string>",
            "listingContacts": "optional<list<partnercentersubmission.AzureListingContact>>",
            "listingUris": "optional<list<partnercentersubmission.AzureListingUri>>",
            "productDisplayName": "optional<string>",
            "publisherName": "optional<string>",
            "resourceType": "optional<string>",
            "shortDescription": "optional<string>",
            "summary": "optional<string>",
            "title": "optional<string>",
          },
        },
        "partnercentersubmission.AzureProductListingAsset": {
          "extends": undefined,
          "properties": {
            "description": "optional<string>",
            "fileName": "optional<string>",
            "fileSasUri": "optional<string>",
            "friendlyName": "optional<string>",
            "id": "optional<string>",
            "order": "optional<integer>",
            "publisherDefinedSasUri": "optional<string>",
            "resourceType": "optional<string>",
            "state": "optional<string>",
            "type": "optional<string>",
          },
        },
        "partnercentersubmission.AzureProductPackageConfiguration": {
          "extends": undefined,
          "properties": {
            "azureActiveDirectoryApplicationID": "optional<string>",
            "azureActiveDirectoryTenantID": "optional<string>",
            "connectionWebhook": "optional<string>",
            "id": "optional<string>",
            "landingPageUri": "optional<string>",
            "resourceType": "optional<string>",
          },
        },
        "partnercentersubmission.AzureProductProperty": {
          "extends": undefined,
          "properties": {
            "additionalCategories": "optional<list<string>>",
            "appVersion": "optional<string>",
            "applicableProducts": "optional<list<string>>",
            "categories": "optional<list<string>>",
            "customAmendments": "optional<list<string>>",
            "extendedProperties": "optional<list<string>>",
            "globalAmendmentTerms": "optional<string>",
            "hideKeys": "optional<list<string>>",
            "id": "optional<string>",
            "industries": "optional<list<string>>",
            "marketingOnlyChange": "optional<boolean>",
            "productTags": "optional<list<string>>",
            "resourceType": "optional<string>",
            "submissionVersion": "optional<string>",
            "termsOfUse": "optional<string>",
            "useEnterpriseContract": "optional<boolean>",
          },
        },
        "partnercentersubmission.AzureProductSetup": {
          "extends": undefined,
          "properties": {
            "callToAction": "optional<string>",
            "channelStates": "optional<list<partnercentersubmission.TypeValue>>",
            "enableTestDrive": "optional<boolean>",
            "resourceType": "optional<string>",
            "sellingOption": "optional<string>",
            "testDriveType": "optional<string>",
            "trialUri": "optional<string>",
          },
        },
        "partnercentersubmission.AzureProductSubmission": {
          "extends": undefined,
          "properties": {
            "areResourcesReady": "optional<boolean>",
            "friendlyName": "optional<string>",
            "id": "optional<string>",
            "pendingUpdateInfo": "optional<partnercentersubmission.AzurePendingUpdateInfo>",
            "publishedTimeInUtc": "optional<string>",
            "releaseNumber": "optional<integer>",
            "resourceType": "optional<string>",
            "resources": "optional<list<partnercentersubmission.TypeValue>>",
            "state": "optional<string>",
            "subState": "optional<string>",
            "targets": "optional<list<partnercentersubmission.TypeValue>>",
            "variantResources": "optional<list<partnercentersubmission.AzureVariantResource>>",
          },
        },
        "partnercentersubmission.AzureProductVariant": {
          "extends": undefined,
          "properties": {
            "azureGovernmentCertifications": "optional<list<partnercentersubmission.AzureGovernmentCertification>>",
            "cloudAvailabilities": "optional<list<string>>",
            "conversionPaths": "optional<string>",
            "extendedProperties": "optional<list<partnercentersubmission.TypeValue>>",
            "externalID": "optional<string>",
            "featureAvailabilities": "optional<list<partnercentersubmission.AzureProductFeatureAvailability>>",
            "friendlyName": "optional<string>",
            "id": "optional<string>",
            "leadGenID": "optional<string>",
            "referenceVariantID": "optional<string>",
            "resourceType": "optional<string>",
            "state": "optional<string>",
          },
        },
        "partnercentersubmission.AzureProductVariantCustomMeter": {
          "extends": undefined,
          "properties": {
            "displayName": "optional<string>",
            "id": "optional<string>",
            "includedBaseQuantities": "optional<list<partnercentersubmission.IncludedBaseQuantity>>",
            "isEnabled": "optional<boolean>",
            "priceInUsd": "optional<double>",
            "uniqueID": "optional<string>",
            "unitOfMeasure": "optional<string>",
          },
        },
        "partnercentersubmission.AzureProductVariantPriceSchedule": {
          "extends": undefined,
          "properties": {
            "dateTimeRange": "optional<partnercentersubmission.AzureLocalizedTimeRange>",
            "friendlyName": "optional<string>",
            "isBaseSchedule": "optional<boolean>",
            "marketCodes": "optional<list<string>>",
            "schedules": "optional<list<partnercentersubmission.AzurePriceSchedule>>",
          },
        },
        "partnercentersubmission.AzureProductVariantTrial": {
          "extends": undefined,
          "properties": {
            "dateTimeRange": "optional<partnercentersubmission.AzureLocalizedTimeRange>",
            "duration": "optional<integer>",
            "durationType": "optional<string>",
            "type": "optional<string>",
          },
        },
        "partnercentersubmission.AzureValidationResult": {
          "extends": undefined,
          "properties": {
            "errorMessage": "optional<string>",
            "memberNames": "optional<list<string>>",
          },
        },
        "partnercentersubmission.AzureVariantResource": {
          "extends": undefined,
          "properties": {
            "resources": "optional<list<partnercentersubmission.TypeValue>>",
            "variantID": "optional<string>",
          },
        },
        "partnercentersubmission.IncludedBaseQuantity": {
          "extends": undefined,
          "properties": {
            "isInfinite": "optional<boolean>",
            "quantity": "optional<double>",
            "recurringUnit": "optional<string>",
          },
        },
        "partnercentersubmission.TypeValue": {
          "extends": undefined,
          "properties": {
            "type": "optional<string>",
            "value": "optional<string>",
          },
        },
        "servicecontrol.ReportError": {
          "extends": undefined,
          "properties": {
            "operationId": "optional<string>",
            "status": "optional<servicecontrol.Status>",
          },
        },
        "servicecontrol.ReportResponse": {
          "extends": undefined,
          "properties": {
            "header": "optional<http.Header>",
            "httpstatusCode": "optional<integer>",
            "reportErrors": "optional<list<servicecontrol.ReportError>>",
            "serviceConfigId": "optional<string>",
            "serviceRolloutId": "optional<string>",
          },
        },
        "servicecontrol.Status": {
          "extends": undefined,
          "properties": {
            "code": "optional<integer>",
            "details": "optional<list<list<integer>>>",
            "message": "optional<string>",
          },
        },
        "shared.AwsAccountIdentifier": {
          "extends": undefined,
          "properties": {
            "awsAccountID": "optional<string>",
            "awsCustomerID": "optional<string>",
            "companyInfo": "optional<shared.CompanyInfo>",
            "dataFeedAccountID": "optional<string>",
          },
        },
        "shared.AwsIntegration": {
          "docs": "The data struct to store integration info for Suger service to access the client's AWS services.",
          "extends": undefined,
          "properties": {
            "externalID": "optional<string>",
            "iamRoleArn": "optional<string>",
            "marketplaceStartDate": "optional<string>",
            "mcasFullSyncDone": "optional<boolean>",
            "mcasIamRoleArn": "optional<string>",
            "mcasS3Bucket": "optional<string>",
            "mcasSnsTopic": "optional<string>",
            "mdfsFullSyncDone": "optional<boolean>",
            "mdfsKmsKeyArn": "optional<string>",
            "mdfsS3BucketArn": "optional<string>",
            "policyArns": "optional<list<string>>",
          },
        },
        "shared.AwsSaasProduct": {
          "extends": undefined,
          "properties": {
            "Description": "optional<shared.AwsSaasProductDescription>",
            "Dimensions": "optional<list<shared.AwsSaasProductDimension>>",
            "PromotionalResources": "optional<shared.AwsSaasProductPromotionalResources>",
            "SupportInformation": "optional<shared.AwsSaasProductSupportInformation>",
            "Versions": "optional<list<shared.AwsSaasProductVersion>>",
            "dataFeedProductId": "optional<string>",
            "productId": "optional<string>",
          },
        },
        "shared.AwsSaasProductAdditionalResource": {
          "extends": undefined,
          "properties": {
            "Text": "optional<string>",
            "Type": "optional<string>",
            "Url": "optional<string>",
          },
        },
        "shared.AwsSaasProductDeliveryOption": {
          "extends": undefined,
          "properties": {
            "FulfillmentUrl": "optional<string>",
            "Id": "optional<string>",
            "Type": "optional<string>",
          },
        },
        "shared.AwsSaasProductDescription": {
          "extends": undefined,
          "properties": {
            "AssociatedProducts": "optional<string>",
            "Categories": "optional<list<string>>",
            "EuW8Submitted": "optional<boolean>",
            "Highlights": "optional<list<string>>",
            "LongDescription": "optional<string>",
            "Manufacturer": "optional<string>",
            "ProductCode": "optional<string>",
            "ProductTitle": "optional<string>",
            "Registered": "optional<boolean>",
            "SearchKeywords": "optional<list<string>>",
            "ShortDescription": "optional<string>",
            "Sku": "optional<string>",
            "UsW9Submitted": "optional<boolean>",
            "Visibility": "optional<string>",
          },
        },
        "shared.AwsSaasProductDimension": {
          "extends": undefined,
          "properties": {
            "Description": "optional<string>",
            "Key": "optional<string>",
            "Name": "optional<string>",
            "Types": "optional<list<string>>",
            "Unit": "optional<string>",
          },
        },
        "shared.AwsSaasProductPromotionalResources": {
          "extends": undefined,
          "properties": {
            "AdditionalResources": "optional<list<shared.AwsSaasProductAdditionalResource>>",
            "LogoUrl": "optional<string>",
          },
        },
        "shared.AwsSaasProductSupportInformation": {
          "extends": undefined,
          "properties": {
            "Description": "optional<string>",
          },
        },
        "shared.AwsSaasProductVersion": {
          "extends": undefined,
          "properties": {
            "DeliveryOptions": "optional<list<shared.AwsSaasProductDeliveryOption>>",
            "Id": "optional<string>",
          },
        },
        "shared.AwsSnsSubscription": {
          "extends": undefined,
          "properties": {
            "Endpoint": "optional<string>",
            "Protocol": "optional<string>",
            "Status": "optional<string>",
            "SubscriptionArn": "optional<string>",
            "TopicArn": "optional<string>",
          },
        },
        "shared.AzureADIdentifier": {
          "extends": undefined,
          "properties": {
            "buyerInfo": "optional<shared.AzureBuyerInfo>",
            "companyInfo": "optional<shared.CompanyInfo>",
            "emailId": "optional<string>",
            "objectId": "optional<string>",
            "puid": "optional<string>",
            "tenantId": "optional<string>",
          },
        },
        "shared.AzureBuyerInfo": {
          "extends": undefined,
          "properties": {
            "billingAccountId": "optional<string>",
            "customerId": "optional<string>",
            "firstName": "optional<string>",
            "lastName": "optional<string>",
          },
        },
        "shared.AzureCredential": {
          "extends": undefined,
          "properties": {
            "clientID": "optional<string>",
            "clientSecret": "optional<string>",
            "clientSecretKey": "optional<string>",
            "resourceID": "optional<string>",
            "tenantID": "optional<string>",
          },
        },
        "shared.AzureIntegration": {
          "extends": undefined,
          "properties": {
            "cmaFullSyncDone": "optional<boolean>",
            "credential": "optional<shared.AzureCredential>",
          },
        },
        "shared.AzureMarketplaceSubscription": {
          "extends": undefined,
          "properties": {
            "allowedCustomerOperations": "optional<list<string>>",
            "autoRenew": "optional<boolean>",
            "beneficiary": "optional<shared.AzureADIdentifier>",
            "created": "optional<string>",
            "fulfillmentId": "optional<string>",
            "id": "optional<string>",
            "isFreeTrial": "optional<boolean>",
            "isTest": "optional<boolean>",
            "lastModified": "optional<string>",
            "name": "optional<string>",
            "offerId": "optional<string>",
            "planId": "optional<string>",
            "publisherId": "optional<string>",
            "purchaser": "optional<shared.AzureADIdentifier>",
            "quantity": "optional<integer>",
            "saasSubscriptionStatus": "optional<string>",
            "sandboxType": "optional<string>",
            "sessionId": "optional<string>",
            "sessionMode": "optional<string>",
            "storeFront": "optional<string>",
            "term": "optional<shared.AzureTerm>",
          },
        },
        "shared.AzureTerm": {
          "extends": undefined,
          "properties": {
            "chargeDuration": "optional<string>",
            "endDate": "optional<string>",
            "startDate": "optional<string>",
            "termUnit": "optional<string>",
          },
        },
        "shared.BuyerInfo": {
          "extends": undefined,
          "properties": {
            "awsBuyer": "optional<shared.AwsAccountIdentifier>",
            "azureBuyer": "optional<shared.AzureADIdentifier>",
            "collectableAmount": "optional<double>",
            "disbursedAmount": "optional<double>",
            "gcpBuyer": "optional<shared.GcpMarketplaceUserAccount>",
            "invoicedAmount": "optional<double>",
          },
        },
        "shared.CommitDimension": {
          "docs": "The commit dimension. There may be one or more commit dimensions defined in single product, offer or entitlement.",
          "extends": undefined,
          "properties": {
            "category": "optional<string>",
            "description": "optional<string>",
            "key": "optional<string>",
            "length": "optional<integer>",
            "maximumUsers": "optional<integer>",
            "minimumUsers": "optional<integer>",
            "name": "optional<string>",
            "quantity": "optional<integer>",
            "rate": "optional<double>",
            "timeUnit": "optional<string>",
            "type": "optional<string>",
            "types": "optional<list<string>>",
          },
        },
        "shared.CompanyInfo": {
          "extends": undefined,
          "properties": {
            "addressLine1": "optional<string>",
            "addressLine2": "optional<string>",
            "city": "optional<string>",
            "country": "optional<string>",
            "emailDomain": "optional<string>",
            "name": "optional<string>",
            "postalCode": "optional<string>",
            "state": "optional<string>",
          },
        },
        "shared.EntitlementInfo": {
          "extends": undefined,
          "properties": {
            "autoRenew": "optional<boolean>",
            "awsEntitlements": "optional<list<types.Entitlement>>",
            "azureSubscriptions": "optional<list<shared.AzureMarketplaceSubscription>>",
            "collectableAmount": "optional<double>",
            "commits": "optional<list<shared.CommitDimension>>",
            "currency": "optional<string>",
            "dimensions": "optional<list<shared.MeteringDimension>>",
            "disbursedAmount": "optional<double>",
            "discount": "optional<double>",
            "eulaType": "optional<string>",
            "eulaUrl": "optional<string>",
            "gcpEntitlements": "optional<list<shared.GcpMarketplaceEntitlement>>",
            "gcpPlans": "optional<list<shared.GcpPurchasePlan>>",
            "invoicedAmount": "optional<double>",
            "paymentInstallments": "optional<list<shared.PaymentInstallment>>",
            "refundCancelationPolicy": "optional<string>",
            "sellerNotes": "optional<string>",
          },
        },
        "shared.EntitlementTermInfo": {
          "extends": undefined,
          "properties": {
            "type": "optional<string>",
          },
        },
        "shared.GcpCommerceProducerExternalAccountSpec": {
          "extends": undefined,
          "properties": {
            "loginUri": "optional<string>",
            "signupUri": "optional<string>",
            "singleSignOnUri": "optional<string>",
          },
        },
        "shared.GcpCommerceProducerListingSpec": {
          "extends": undefined,
          "properties": {
            "externalAccountSpec": "optional<shared.GcpCommerceProducerExternalAccountSpec>",
            "listingType": "optional<string>",
            "marketingSpec": "optional<shared.GcpCommerceProducerMarketingSpec>",
            "purchaseSpec": "optional<shared.GcpCommerceProducerPurchaseSpec>",
          },
        },
        "shared.GcpCommerceProducerMarketingSpec": {
          "extends": undefined,
          "properties": {
            "description": "optional<string>",
            "displayNames": "optional<list<string>>",
            "eulaUrl": "optional<string>",
            "externalMarketingUrl": "optional<string>",
            "icon": "optional<string>",
            "searchCategories": "optional<list<string>>",
            "searchDescription": "optional<string>",
            "searchKeywords": "optional<list<string>>",
            "shortTitle": "optional<string>",
            "supportSpec": "optional<shared.GcpCommerceProducerSupportSpec>",
            "title": "optional<string>",
          },
        },
        "shared.GcpCommerceProducerPrice": {
          "extends": undefined,
          "properties": {
            "currencyCode": "optional<string>",
            "nanos": "optional<integer>",
            "units": "optional<integer>",
          },
        },
        "shared.GcpCommerceProducerPriceInfo": {
          "extends": undefined,
          "properties": {
            "description": "optional<string>",
            "priceModel": "optional<string>",
            "subscriptionPlans": "optional<list<shared.GcpCommerceProducerPriceSubscription>>",
            "usageFees": "optional<list<shared.GcpCommerceProducerPriceUsage>>",
          },
        },
        "shared.GcpCommerceProducerPriceSubscription": {
          "extends": undefined,
          "properties": {
            "period": "optional<string>",
            "price": "optional<shared.GcpCommerceProducerPrice>",
            "taxCategoryOverride": "optional<string>",
          },
        },
        "shared.GcpCommerceProducerPriceTier": {
          "extends": undefined,
          "properties": {
            "endUsageAmount": "optional<double>",
            "price": "optional<shared.GcpCommerceProducerPrice>",
            "startUsageAmount": "optional<double>",
          },
        },
        "shared.GcpCommerceProducerPriceUsage": {
          "extends": undefined,
          "properties": {
            "displayQuantity": "optional<integer>",
            "metricId": "optional<string>",
            "priceTiers": "optional<list<shared.GcpCommerceProducerPriceTier>>",
            "taxCategoryOverride": "optional<string>",
          },
        },
        "shared.GcpCommerceProducerPurchaseMetric": {
          "extends": undefined,
          "properties": {
            "description": "optional<string>",
            "displayName": "optional<string>",
            "displayUnit": "optional<string>",
            "displayUnitDescription": "optional<string>",
            "id": "optional<string>",
            "metricKind": "optional<string>",
            "name": "optional<string>",
            "reportingUnit": "optional<string>",
            "unit": "optional<string>",
            "valueType": "optional<string>",
          },
        },
        "shared.GcpCommerceProducerPurchaseSpec": {
          "extends": undefined,
          "properties": {
            "metrics": "optional<list<shared.GcpCommerceProducerPurchaseMetric>>",
            "purchaseOptionSpecs": "optional<list<shared.GcpPurchasePlan>>",
          },
        },
        "shared.GcpCommerceProducerServiceBilling": {
          "extends": undefined,
          "properties": {
            "metrics": "optional<list<string>>",
          },
        },
        "shared.GcpCommerceProducerServiceConfig": {
          "extends": undefined,
          "properties": {
            "billing": "optional<shared.GcpCommerceProducerServiceBilling>",
            "metrics": "optional<list<shared.GcpCommerceProducerPurchaseMetric>>",
            "name": "optional<string>",
            "producerProjectId": "optional<string>",
            "title": "optional<string>",
          },
        },
        "shared.GcpCommerceProducerSupportSpec": {
          "extends": undefined,
          "properties": {
            "description": "optional<string>",
            "email": "optional<string>",
            "uri": "optional<string>",
          },
        },
        "shared.GcpIntegration": {
          "extends": undefined,
          "properties": {
            "gcpProjectId": "optional<string>",
            "gcpProjectNumber": "optional<string>",
            "identityProviderId": "optional<string>",
            "partnerId": "optional<string>",
            "pubsubTopic": "optional<string>",
            "reportBucket": "optional<string>",
            "reportFullSyncDone": "optional<boolean>",
            "reportStartDate": "optional<string>",
            "serviceAccountEmail": "optional<string>",
            "serviceNames": "optional<list<string>>",
            "workloadIdentityPoolId": "optional<string>",
          },
        },
        "shared.GcpMarketplaceConsumer": {
          "extends": undefined,
          "properties": {
            "project": "optional<string>",
          },
        },
        "shared.GcpMarketplaceEntitlement": {
          "extends": undefined,
          "properties": {
            "account": "optional<string>",
            "consumers": "optional<list<shared.GcpMarketplaceConsumer>>",
            "createTime": "optional<string>",
            "id": "optional<string>",
            "inputProperties": "optional<list<integer>>",
            "messageToUser": "optional<string>",
            "name": "optional<string>",
            "newOfferDuration": "optional<string>",
            "newOfferEndTime": "optional<string>",
            "newPendingOffer": "optional<string>",
            "newPendingOfferDuration": "optional<string>",
            "newPendingPlan": "optional<string>",
            "newPlan": "optional<string>",
            "offer": "optional<string>",
            "offerDuration": "optional<string>",
            "offerEndTime": "optional<string>",
            "plan": "optional<string>",
            "product": "optional<string>",
            "productExternalName": "optional<string>",
            "provider": "optional<string>",
            "quoteExternalName": "optional<string>",
            "state": "optional<string>",
            "subscriptionEndTime": "optional<string>",
            "updateTime": "optional<string>",
            "usageReportingId": "optional<string>",
          },
        },
        "shared.GcpMarketplaceUserAccount": {
          "extends": undefined,
          "properties": {
            "approvals": "optional<list<shared.GcpMarketplaceUserAccountApproval>>",
            "createTime": "optional<string>",
            "id": "optional<string>",
            "inputProperties": "optional<list<integer>>",
            "name": "optional<string>",
            "provider": "optional<string>",
            "state": "optional<string>",
            "updateTime": "optional<string>",
            "userInfo": "optional<shared.GcpUserInfo>",
          },
        },
        "shared.GcpMarketplaceUserAccountApproval": {
          "extends": undefined,
          "properties": {
            "name": "optional<string>",
            "reason": "optional<string>",
            "state": "optional<string>",
            "updateTime": "optional<string>",
          },
        },
        "shared.GcpProduct": {
          "extends": undefined,
          "properties": {
            "createTime": "optional<string>",
            "id": "optional<string>",
            "listingSpec": "optional<shared.GcpCommerceProducerListingSpec>",
            "marketplace": "optional<string>",
            "name": "optional<string>",
            "service": "optional<string>",
            "serviceConfig": "optional<shared.GcpCommerceProducerServiceConfig>",
          },
        },
        "shared.GcpPurchasePlan": {
          "extends": undefined,
          "properties": {
            "name": "optional<string>",
            "priceInfo": "optional<shared.GcpCommerceProducerPriceInfo>",
            "purchaseMode": "optional<string>",
            "title": "optional<string>",
          },
        },
        "shared.GcpUserInfo": {
          "extends": undefined,
          "properties": {
            "roles": "optional<list<string>>",
            "user_identity": "optional<string>",
          },
        },
        "shared.IdentityBuyer": {
          "extends": undefined,
          "properties": {
            "creationTime": "optional<string>",
            "description": "optional<string>",
            "externalID": "optional<string>",
            "id": "optional<string>",
            "info": "optional<shared.BuyerInfo>",
            "lastUpdateTime": "optional<string>",
            "name": "optional<string>",
            "organizationID": "optional<string>",
            "partner": "optional<string>",
          },
        },
        "shared.IdentityIntegration": {
          "extends": undefined,
          "properties": {
            "createdBy": "optional<string>",
            "creationTime": "optional<string>",
            "info": "optional<shared.IntegrationInfo>",
            "lastUpdateTime": "optional<string>",
            "lastUpdatedBy": "optional<string>",
            "organizationID": "optional<string>",
            "partner": "optional<string>",
            "service": "optional<string>",
            "status": "optional<string>",
          },
        },
        "shared.IntegrationInfo": {
          "extends": undefined,
          "properties": {
            "awsIntegration": "optional<shared.AwsIntegration>",
            "azureIntegration": "optional<shared.AzureIntegration>",
            "gcpIntegration": "optional<shared.GcpIntegration>",
          },
        },
        "shared.ListUsageRecordGroupsResponse": {
          "extends": undefined,
          "properties": {
            "nextOffset": "optional<integer>",
            "usageRecordGroups": "optional<list<shared.MeteringUsageRecordGroup>>",
          },
        },
        "shared.MeteringDimension": {
          "docs": "The dimension to meter usage in entitlement.",
          "extends": undefined,
          "properties": {
            "category": "optional<string>",
            "description": "optional<string>",
            "includedBaseQuantities": "optional<list<partnercentersubmission.IncludedBaseQuantity>>",
            "key": "optional<string>",
            "name": "optional<string>",
            "rate": "optional<double>",
            "types": "optional<list<string>>",
            "usageCount": "optional<shared.UsageCount>",
            "valueType": "optional<string>",
          },
        },
        "shared.MeteringUsageRecordGroup": {
          "extends": undefined,
          "properties": {
            "creationTime": "optional<string>",
            "entitlementID": "optional<string>",
            "id": "optional<string>",
            "lastUpdateTime": "optional<string>",
            "organizationID": "optional<string>",
            "serialID": "optional<integer>",
            "status": "optional<string>",
            "usageRecordReportID": "optional<string>",
          },
        },
        "shared.MeteringUsageRecordReport": {
          "extends": undefined,
          "properties": {
            "creationTime": "optional<string>",
            "entitlementID": "optional<string>",
            "entitlementTermID": "optional<string>",
            "id": "optional<string>",
            "info": "optional<shared.MeteringUsageRecordReportInfo>",
            "organizationID": "optional<string>",
            "productID": "optional<string>",
          },
        },
        "shared.MeteringUsageRecordReportInfo": {
          "extends": undefined,
          "properties": {
            "awsMeteringResponse": "optional<marketplacemetering.BatchMeterUsageOutput>",
            "azureMeteringResponse": "optional<marketplacemeteringv1.BatchUsageEventOkResponse>",
            "commitAmount": "optional<double>",
            "creditAmount": "optional<double>",
            "endTime": "optional<string>",
            "gcpMeteringResponse": "optional<servicecontrol.ReportResponse>",
            "startTime": "optional<string>",
            "usageRecordGroupIds": "optional<list<string>>",
            "usedCommitAmount": "optional<double>",
            "usedCommitAmountIncrement": "optional<double>",
            "usedCreditAmount": "optional<double>",
            "usedCreditAmountIncrement": "optional<double>",
          },
        },
        "shared.OfferInfo": {
          "extends": undefined,
          "properties": {
            "azureProductVariant": "optional<partnercentersubmission.AzureProductVariant>",
            "baseAgreementId": "optional<string>",
            "buyerAwsAccountIds": "optional<list<string>>",
            "buyerAzureTenants": "optional<list<partnercentersubmission.AzureAudience>>",
            "commits": "optional<list<shared.CommitDimension>>",
            "currency": "optional<string>",
            "dimensions": "optional<list<shared.MeteringDimension>>",
            "discount": "optional<double>",
            "eulaType": "optional<string>",
            "eulaUrl": "optional<string>",
            "gcpMetrics": "optional<list<shared.GcpCommerceProducerPurchaseMetric>>",
            "gcpPlans": "optional<list<shared.GcpPurchasePlan>>",
            "isAgreementBasedOffer": "optional<boolean>",
            "paymentInstallments": "optional<list<shared.PaymentInstallment>>",
            "refundCancelationPolicy": "optional<string>",
            "sellerNotes": "optional<string>",
            "visibility": "optional<string>",
          },
        },
        "shared.PaymentInstallment": {
          "extends": undefined,
          "properties": {
            "amount": "optional<double>",
            "chargeOn": "optional<string>",
          },
        },
        "shared.ProductInfo": {
          "extends": undefined,
          "properties": {
            "awsSaasProduct": "optional<shared.AwsSaasProduct>",
            "awsSnsSubscriptions": "optional<list<shared.AwsSnsSubscription>>",
            "azureProduct": "optional<partnercentersubmission.AzureProduct>",
            "commits": "optional<list<shared.CommitDimension>>",
            "currency": "optional<string>",
            "dimensions": "optional<list<shared.MeteringDimension>>",
            "eulaUrl": "optional<string>",
            "gcpProduct": "optional<shared.GcpProduct>",
            "refundCancelationPolicy": "optional<string>",
            "sellerNotes": "optional<string>",
          },
        },
        "shared.RevenueRecord": {
          "extends": undefined,
          "properties": {
            "amount": "optional<double>",
            "date": "optional<string>",
          },
        },
        "shared.UsageCount": {
          "extends": undefined,
          "properties": {
            "creditCount": "optional<double>",
            "includedCount": "optional<double>",
            "reportedCount": "optional<double>",
          },
        },
        "shared.WorkloadEntitlement": {
          "extends": undefined,
          "properties": {
            "buyerID": "optional<string>",
            "creationTime": "optional<string>",
            "endTime": "optional<string>",
            "entitlementTermID": "optional<string>",
            "externalBuyerID": "optional<string>",
            "externalID": "optional<string>",
            "externalProductID": "optional<string>",
            "id": "optional<string>",
            "info": "optional<shared.EntitlementInfo>",
            "lastUpdateTime": "optional<string>",
            "name": "optional<string>",
            "offerID": "optional<string>",
            "organizationID": "optional<string>",
            "partner": "optional<string>",
            "productID": "optional<string>",
            "service": "optional<string>",
            "startTime": "optional<string>",
            "status": "optional<string>",
            "type": "optional<string>",
          },
        },
        "shared.WorkloadEntitlementTerm": {
          "extends": undefined,
          "properties": {
            "buyerID": "optional<string>",
            "commitAmount": "optional<double>",
            "creditAmount": "optional<double>",
            "endTime": "optional<string>",
            "entitlementID": "optional<string>",
            "entitlementInfo": "optional<shared.EntitlementInfo>",
            "externalEntitlementID": "optional<string>",
            "id": "optional<string>",
            "info": "optional<shared.EntitlementTermInfo>",
            "offerID": "optional<string>",
            "organizationID": "optional<string>",
            "partner": "optional<string>",
            "productID": "optional<string>",
            "service": "optional<string>",
            "startTime": "optional<string>",
            "usedCommitAmount": "optional<double>",
            "usedCreditAmount": "optional<double>",
          },
        },
        "shared.WorkloadOffer": {
          "extends": undefined,
          "properties": {
            "createdBy": "optional<string>",
            "creationTime": "optional<string>",
            "endTime": "optional<string>",
            "expireTime": "optional<string>",
            "externalID": "optional<string>",
            "id": "optional<string>",
            "info": "optional<shared.OfferInfo>",
            "lastUpdateTime": "optional<string>",
            "lastUpdatedBy": "optional<string>",
            "name": "optional<string>",
            "offerType": "optional<string>",
            "organizationID": "optional<string>",
            "partner": "optional<string>",
            "productID": "optional<string>",
            "service": "optional<string>",
            "status": "optional<string>",
          },
        },
        "shared.WorkloadProduct": {
          "extends": undefined,
          "properties": {
            "createdBy": "optional<string>",
            "creationTime": "optional<string>",
            "externalID": "optional<string>",
            "fulfillmentUrl": "optional<string>",
            "id": "optional<string>",
            "info": "optional<shared.ProductInfo>",
            "lastUpdateTime": "optional<string>",
            "lastUpdatedBy": "optional<string>",
            "name": "optional<string>",
            "organizationID": "optional<string>",
            "partner": "optional<string>",
            "productType": "optional<string>",
            "service": "optional<string>",
            "status": "optional<string>",
          },
        },
        "types.Entitlement": {
          "extends": undefined,
          "properties": {
            "customerIdentifier": "optional<string>",
            "dimension": "optional<string>",
            "expirationDate": "optional<string>",
            "productCode": "optional<string>",
          },
        },
        "types.Tag": {
          "extends": undefined,
          "properties": {
            "key": "optional<string>",
            "value": "optional<string>",
          },
        },
        "types.UsageAllocation": {
          "extends": undefined,
          "properties": {
            "allocatedUsageQuantity": "optional<integer>",
            "tags": "optional<list<types.Tag>>",
          },
        },
        "types.UsageRecord": {
          "extends": undefined,
          "properties": {
            "customerIdentifier": "optional<string>",
            "dimension": "optional<string>",
            "quantity": "optional<integer>",
            "timestamp": "optional<string>",
            "usageAllocations": "optional<list<types.UsageAllocation>>",
          },
        },
        "types.UsageRecordResult": {
          "extends": undefined,
          "properties": {
            "meteringRecordId": "optional<string>",
            "status": "optional<string>",
            "usageRecord": "optional<types.UsageRecord>",
          },
        },
      },
    },
    "entitlement.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "services": {
        "http": {
          "EntitlementService": {
            "auth": true,
            "base-path": "",
            "endpoints": {
              "": {
                "display-name": "Add Credit Amount in Entitlement.",
                "docs": "Add Credit Amount to the given Entitlement. The credit amount is accumulated & saved in the current Entitlement Term of the gvien Entitlement.",
                "method": "POST",
                "path": "/org/{orgId}/addEntitlementCredit",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                },
                "request": {
                  "body": "shared.AddEntitlementCreditParams",
                },
                "response": "shared.AddEntitlementCreditResponse",
              },
              "_unnamedOperation0": {
                "display-name": "List all entitlements of the buyer",
                "docs": undefined,
                "method": "GET",
                "path": "/org/{orgId}/buyer/{buyerId}/entitlement",
                "path-parameters": {
                  "buyerId": {
                    "docs": "Buyer ID",
                    "type": "string",
                  },
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                },
                "response": "list<commons.shared.WorkloadEntitlement>",
              },
              "_unnamedOperation1": {
                "display-name": "List all entitlements under the organization",
                "docs": undefined,
                "method": "GET",
                "path": "/org/{orgId}/entitlement",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                },
                "response": "list<commons.shared.WorkloadEntitlement>",
              },
              "_unnamedOperation2": {
                "display-name": "Get entitlement",
                "docs": undefined,
                "method": "GET",
                "path": "/org/{orgId}/entitlement/{entitlementId}",
                "path-parameters": {
                  "entitlementId": {
                    "docs": "Entitlement ID",
                    "type": "string",
                  },
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                },
                "response": "commons.shared.WorkloadEntitlement",
              },
              "_unnamedOperation3": {
                "display-name": "Update entitlement name",
                "docs": undefined,
                "method": "PATCH",
                "path": "/org/{orgId}/entitlement/{entitlementId}/entitlementName",
                "path-parameters": {
                  "entitlementId": {
                    "docs": "Entitlement ID",
                    "type": "string",
                  },
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                },
                "request": {
                  "body": "lib.UpdateEntitlementNameParams",
                },
                "response": "commons.shared.WorkloadEntitlement",
              },
              "_unnamedOperation4": {
                "display-name": "List all entitlements under the offer",
                "docs": undefined,
                "method": "GET",
                "path": "/org/{orgId}/offer/{offerId}/entitlement",
                "path-parameters": {
                  "offerId": {
                    "docs": "Offer ID",
                    "type": "string",
                  },
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                },
                "response": "list<commons.shared.WorkloadEntitlement>",
              },
              "_unnamedOperation5": {
                "display-name": "List all entitlements under the partner",
                "docs": undefined,
                "method": "GET",
                "path": "/org/{orgId}/partner/{partner}/entitlement",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                  "partner": {
                    "docs": "Cloud Partner",
                    "type": "string",
                  },
                },
                "response": "list<commons.shared.WorkloadEntitlement>",
              },
              "_unnamedOperation6": {
                "display-name": "List all entitlements under the product",
                "docs": undefined,
                "method": "GET",
                "path": "/org/{orgId}/product/{productId}/entitlement",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                  "productId": {
                    "docs": "Product ID",
                    "type": "string",
                  },
                },
                "response": "list<commons.shared.WorkloadEntitlement>",
              },
            },
          },
        },
      },
      "types": {
        "lib.UpdateEntitlementNameParams": {
          "extends": undefined,
          "properties": {
            "id": "optional<string>",
            "name": "optional<string>",
            "organizationID": "optional<string>",
          },
        },
        "shared.AddEntitlementCreditParams": {
          "extends": undefined,
          "properties": {
            "creditAmountIncrement": "double",
            "entitlementID": "string",
            "organizationID": "string",
          },
        },
        "shared.AddEntitlementCreditResponse": {
          "extends": undefined,
          "properties": {
            "creditAmountIncrement": "optional<double>",
            "entitlementID": "optional<string>",
            "entitlementTermID": "optional<string>",
            "newCreditAmount": "optional<double>",
            "organizationID": "optional<string>",
          },
        },
      },
    },
    "entitlementTerm.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "services": {
        "http": {
          "EntitlementTermService": {
            "auth": true,
            "base-path": "",
            "endpoints": {
              "": {
                "display-name": "List all Entitlement Terms of the Entitlement.",
                "docs": undefined,
                "method": "GET",
                "path": "/org/{orgId}/entitlement/{entitlementId}/entitlementTerm",
                "path-parameters": {
                  "entitlementId": {
                    "docs": "Entitlement ID",
                    "type": "string",
                  },
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                },
                "response": "list<commons.shared.WorkloadEntitlementTerm>",
              },
              "_unnamedOperation9": {
                "display-name": "Get an Entitlement Term.",
                "docs": undefined,
                "method": "GET",
                "path": "/org/{orgId}/entitlement/{entitlementId}/entitlementTerm/{entitlementTermId}",
                "path-parameters": {
                  "entitlementId": {
                    "docs": "Entitlement ID",
                    "type": "string",
                  },
                  "entitlementTermId": {
                    "docs": "Entitlement Term ID",
                    "type": "string",
                  },
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                },
                "response": "commons.shared.WorkloadEntitlementTerm",
              },
            },
          },
        },
      },
    },
    "integration.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "services": {
        "http": {
          "IntegrationService": {
            "auth": true,
            "base-path": "",
            "endpoints": {
              "": {
                "display-name": "List all integrations under the organization",
                "docs": undefined,
                "method": "GET",
                "path": "/org/{orgId}/integration",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                },
                "response": "list<commons.shared.IdentityIntegration>",
              },
              "_unnamedOperation15": {
                "display-name": "Create an integration.",
                "docs": "For each organization, partner & service, there should be at most one integration.",
                "method": "POST",
                "path": "/org/{orgId}/integration",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                },
                "request": {
                  "body": "shared.CreateIntegrationParams",
                },
                "response": "commons.shared.IdentityIntegration",
              },
              "_unnamedOperation16": {
                "display-name": "Get the integration for the given organization, partner & service.",
                "docs": undefined,
                "method": "GET",
                "path": "/org/{orgId}/integration/{partner}/{service}",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                  "partner": {
                    "docs": "Cloud Partner",
                    "type": "string",
                  },
                  "service": {
                    "docs": "Partner Service",
                    "type": "string",
                  },
                },
                "response": "commons.shared.IdentityIntegration",
              },
              "_unnamedOperation17": {
                "display-name": "Delete the integration.",
                "docs": undefined,
                "method": "DELETE",
                "path": "/org/{orgId}/integration/{partner}/{service}",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                  "partner": {
                    "docs": "Cloud Partner",
                    "type": "string",
                  },
                  "service": {
                    "docs": "Partner Service",
                    "type": "string",
                  },
                },
                "response": "string",
              },
              "_unnamedOperation18": {
                "display-name": "Update the integration.",
                "docs": undefined,
                "method": "PATCH",
                "path": "/org/{orgId}/integration/{partner}/{service}",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                  "partner": {
                    "docs": "Cloud Partner",
                    "type": "string",
                  },
                  "service": {
                    "docs": "Partner Service",
                    "type": "string",
                  },
                },
                "request": {
                  "body": "shared.UpdateIntegrationParams",
                },
                "response": "commons.shared.IdentityIntegration",
              },
              "_unnamedOperation19": {
                "display-name": "Verify the integration, check whether it works correctly.",
                "docs": undefined,
                "method": "POST",
                "path": "/org/{orgId}/integration/{partner}/{service}/verify",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                  "partner": {
                    "docs": "Cloud Partner",
                    "type": "string",
                  },
                  "service": {
                    "docs": "Partner Service",
                    "type": "string",
                  },
                },
                "response": "boolean",
              },
            },
          },
        },
      },
      "types": {
        "shared.CreateIntegrationParams": {
          "extends": undefined,
          "properties": {
            "info": "commons.shared.IntegrationInfo",
            "organizationID": "string",
            "partner": "string",
            "service": "string",
          },
        },
        "shared.UpdateIntegrationParams": {
          "extends": undefined,
          "properties": {
            "info": "commons.shared.IntegrationInfo",
            "organizationID": "string",
            "partner": "string",
            "service": "string",
          },
        },
      },
    },
    "metering.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "services": {
        "http": {
          "MeteringService": {
            "auth": true,
            "base-path": "",
            "endpoints": {
              "": {
                "display-name": "list all UsageRecordGroups under the given entitlement",
                "docs": undefined,
                "method": "GET",
                "path": "/org/{orgId}/entitlement/{entitlementId}/usageRecordGroup",
                "path-parameters": {
                  "entitlementId": {
                    "docs": "Entitlement ID",
                    "type": "string",
                  },
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                },
                "request": {
                  "query-parameters": {
                    "limit": {
                      "docs": "List pagination size, default 20",
                      "type": "optional<integer>",
                    },
                    "offset": {
                      "docs": "List pagination offset, default 0",
                      "type": "optional<integer>",
                    },
                  },
                },
                "response": "commons.shared.ListUsageRecordGroupsResponse",
              },
              "_unnamedOperation10": {
                "display-name": "Report new UsageRecordGroup.",
                "docs": "It is recommended to provide the ID in the request body CreateUsageRecordGroupParams, so the report can be deduplicated. All duplicate report will return error code 409.",
                "method": "POST",
                "path": "/org/{orgId}/entitlement/{entitlementId}/usageRecordGroup",
                "path-parameters": {
                  "entitlementId": {
                    "docs": "Entitlement ID",
                    "type": "string",
                  },
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                },
                "request": {
                  "body": "shared.CreateUsageRecordGroupParams",
                },
                "response": "commons.shared.MeteringUsageRecordGroup",
              },
              "_unnamedOperation11": {
                "display-name": "list all UsageRecordReports under the given entitlement",
                "docs": undefined,
                "method": "GET",
                "path": "/org/{orgId}/entitlement/{entitlementId}/usageRecordReport",
                "path-parameters": {
                  "entitlementId": {
                    "docs": "Entitlement ID",
                    "type": "string",
                  },
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                },
                "request": {
                  "query-parameters": {
                    "entitlementTermId": {
                      "docs": "The Entitlement Term ID, if not given, return the UsageRecordReports of all Entitlement Terms under the Entitlement",
                      "type": "optional<string>",
                    },
                  },
                },
                "response": "shared.ListUsageRecordReportsResponse",
              },
              "_unnamedOperation12": {
                "display-name": "list all UsageRecordGroups under the given product",
                "docs": undefined,
                "method": "GET",
                "path": "/org/{orgId}/product/{productId}/usageRecordGroup",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                  "productId": {
                    "docs": "Product ID",
                    "type": "string",
                  },
                },
                "request": {
                  "query-parameters": {
                    "limit": {
                      "docs": "List pagination size, default 20",
                      "type": "optional<integer>",
                    },
                    "offset": {
                      "docs": "List pagination offset, default 0",
                      "type": "optional<integer>",
                    },
                  },
                },
                "response": "commons.shared.ListUsageRecordGroupsResponse",
              },
              "_unnamedOperation13": {
                "display-name": "list all UsageRecordGroups under the given organization",
                "docs": undefined,
                "method": "GET",
                "path": "/org/{orgId}/usageRecordGroup",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                },
                "request": {
                  "query-parameters": {
                    "limit": {
                      "docs": "List pagination size, default 20",
                      "type": "optional<integer>",
                    },
                    "offset": {
                      "docs": "List pagination offset, default 0",
                      "type": "optional<integer>",
                    },
                  },
                },
                "response": "commons.shared.ListUsageRecordGroupsResponse",
              },
              "_unnamedOperation14": {
                "display-name": "get an UsageRecordGroup by organization_entitlement_usageRecordGroup id",
                "docs": undefined,
                "method": "GET",
                "path": "/org/{orgId}/usageRecordGroup/{usageRecordGroupId}",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                  "usageRecordGroupId": {
                    "docs": "UsageRecordGroup ID",
                    "type": "string",
                  },
                },
                "response": "commons.shared.MeteringUsageRecordGroup",
              },
            },
          },
        },
      },
      "types": {
        "shared.CreateUsageRecordGroupParams": {
          "extends": undefined,
          "properties": {
            "entitlementID": "string",
            "id": "optional<string>",
            "organizationID": "string",
          },
        },
        "shared.ListUsageRecordReportsResponse": {
          "extends": undefined,
          "properties": {
            "usageRecordReports": "optional<list<commons.shared.MeteringUsageRecordReport>>",
          },
        },
      },
    },
    "offer.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "services": {
        "http": {
          "OfferService": {
            "auth": true,
            "base-path": "",
            "endpoints": {
              "": {
                "display-name": "List all offers under the organization",
                "docs": undefined,
                "method": "GET",
                "path": "/org/{orgId}/offer",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                },
                "response": "list<commons.shared.WorkloadOffer>",
              },
              "_unnamedOperation20": {
                "display-name": "Create a private offer.",
                "docs": undefined,
                "method": "POST",
                "path": "/org/{orgId}/offer",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                },
                "request": {
                  "body": "shared.CreateOfferParams",
                },
                "response": "commons.shared.WorkloadOffer",
              },
              "_unnamedOperation21": {
                "display-name": "Get the offer.",
                "docs": undefined,
                "method": "GET",
                "path": "/org/{orgId}/offer/{offerId}",
                "path-parameters": {
                  "offerId": {
                    "docs": "Offer ID",
                    "type": "string",
                  },
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                },
                "response": "commons.shared.WorkloadOffer",
              },
              "_unnamedOperation22": {
                "display-name": "Delete the offer.",
                "docs": "Currently only the offer with status = "CREATE_PENDING" or "CREATE_FAILED" is allowed to be deleted.",
                "method": "DELETE",
                "path": "/org/{orgId}/offer/{offerId}",
                "path-parameters": {
                  "offerId": {
                    "docs": "Offer ID",
                    "type": "string",
                  },
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                },
                "response": "string",
              },
              "_unnamedOperation23": {
                "display-name": "List all offers under the cloud partner.",
                "docs": undefined,
                "method": "GET",
                "path": "/org/{orgId}/partner/{partner}/offer",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                  "partner": {
                    "docs": "Cloud Partner",
                    "type": "string",
                  },
                },
                "response": "list<commons.shared.WorkloadOffer>",
              },
              "_unnamedOperation24": {
                "display-name": "List all offers under the product.",
                "docs": undefined,
                "method": "GET",
                "path": "/org/{orgId}/product/{productId}/offer",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                  "productId": {
                    "docs": "Product ID",
                    "type": "string",
                  },
                },
                "response": "list<commons.shared.WorkloadOffer>",
              },
            },
          },
        },
      },
      "types": {
        "shared.CreateOfferParams": {
          "extends": undefined,
          "properties": {
            "creationTime": "optional<string>",
            "endTime": "optional<string>",
            "expireTime": "optional<string>",
            "externalID": "optional<string>",
            "id": "optional<string>",
            "info": "commons.shared.OfferInfo",
            "name": "string",
            "offerType": "optional<string>",
            "organizationID": "string",
            "partner": "string",
            "productID": "string",
            "service": "string",
            "status": "optional<string>",
          },
        },
      },
    },
    "operation.yml": {
      "services": {
        "http": {
          "OperationService": {
            "auth": true,
            "base-path": "",
            "endpoints": {
              "": {
                "display-name": "list all long running operations under the given organization, offer or entitlement.",
                "docs": "The operations can be filtered by offerId or entitlementId. If both of them are provided, then it is filtered by entitlementId only.",
                "method": "GET",
                "path": "/org/{orgId}/operation",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                },
                "request": {
                  "query-parameters": {
                    "entitlementId": {
                      "docs": "filter by entitlementId",
                      "type": "optional<string>",
                    },
                    "offerId": {
                      "docs": "filter by offerId",
                      "type": "optional<string>",
                    },
                  },
                },
                "response": "list<shared.Operation>",
              },
            },
          },
        },
      },
      "types": {
        "shared.Operation": {
          "extends": undefined,
          "properties": {
            "endTime": "optional<string>",
            "id": "optional<string>",
            "message": "optional<string>",
            "name": "optional<string>",
            "startTime": "optional<string>",
            "status": "optional<string>",
            "type": "optional<string>",
          },
        },
      },
    },
    "product.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "services": {
        "http": {
          "ProductService": {
            "auth": true,
            "base-path": "",
            "endpoints": {
              "": {
                "display-name": "List all products under the cloud partner",
                "docs": undefined,
                "method": "GET",
                "path": "/org/{orgId}/partner/{partner}/product",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                  "partner": {
                    "docs": "Cloud Partner",
                    "type": "string",
                  },
                },
                "response": "list<commons.shared.WorkloadProduct>",
              },
              "_unnamedOperation25": {
                "display-name": "List all products under the organization",
                "docs": undefined,
                "method": "GET",
                "path": "/org/{orgId}/product",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                },
                "response": "list<commons.shared.WorkloadProduct>",
              },
              "_unnamedOperation26": {
                "display-name": "Create an Product & List it to the Partner's marketplace.",
                "docs": undefined,
                "method": "POST",
                "path": "/org/{orgId}/product",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                },
                "request": {
                  "body": "shared.CreateProductParams",
                },
                "response": "commons.shared.WorkloadProduct",
              },
              "_unnamedOperation27": {
                "display-name": "Get the Product",
                "docs": undefined,
                "method": "GET",
                "path": "/org/{orgId}/product/{productId}",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                  "productId": {
                    "docs": "Product ID",
                    "type": "string",
                  },
                },
                "response": "commons.shared.WorkloadProduct",
              },
              "_unnamedOperation28": {
                "display-name": "Delete the product.",
                "docs": "Currently only the product with status = "CREATE_PENDING" or "CREATE_FAILED" is allowed to be deleted.",
                "method": "DELETE",
                "path": "/org/{orgId}/product/{productId}",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                  "productId": {
                    "docs": "Product ID",
                    "type": "string",
                  },
                },
                "response": "string",
              },
              "_unnamedOperation29": {
                "display-name": "Currently, only the Fulfillment URL is allowed to update.",
                "docs": undefined,
                "method": "PATCH",
                "path": "/org/{orgId}/product/{productId}",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                  "productId": {
                    "docs": "Product ID",
                    "type": "string",
                  },
                },
                "request": {
                  "body": "shared.UpdateProductParams",
                },
                "response": "commons.shared.WorkloadProduct",
              },
              "_unnamedOperation30": {
                "display-name": "List the Metering Dimensions of the Product",
                "docs": undefined,
                "method": "GET",
                "path": "/org/{orgId}/product/{productId}/dimension",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                  "productId": {
                    "docs": "Product ID",
                    "type": "string",
                  },
                },
                "response": "list<commons.shared.AwsSaasProductDimension>",
              },
            },
          },
        },
      },
      "types": {
        "shared.CreateProductParams": {
          "extends": undefined,
          "properties": {
            "externalID": "optional<string>",
            "fulfillmentUrl": "optional<string>",
            "id": "optional<string>",
            "info": "optional<commons.shared.ProductInfo>",
            "name": "optional<string>",
            "organizationID": "optional<string>",
            "partner": "optional<string>",
            "productType": "optional<string>",
            "service": "optional<string>",
            "status": "optional<string>",
          },
        },
        "shared.UpdateProductParams": {
          "extends": undefined,
          "properties": {
            "fulfillmentUrl": "string",
            "id": "string",
            "organizationID": "string",
          },
        },
      },
    },
    "report.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "services": {
        "http": {
          "ReportService": {
            "auth": true,
            "base-path": "",
            "endpoints": {
              "": {
                "display-name": "Get the revenue report.",
                "docs": "Get the revenue report of the given organization, product, entitlement, or buyer.",
                "method": "POST",
                "path": "/org/{orgId}/revenueReport",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                },
                "request": {
                  "body": "shared.GetRevenueReportParams",
                },
                "response": "shared.RevenueReport",
              },
              "_unnamedOperation31": {
                "display-name": "Get the usage report.",
                "docs": "Get the daily usage report of the given entitlement, the default timespan is lifetime.",
                "method": "POST",
                "path": "/org/{orgId}/usageReport",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                },
                "request": {
                  "body": "shared.GetUsageReportParams",
                },
                "response": "shared.UsageReport",
              },
            },
          },
        },
      },
      "types": {
        "shared.EntitlementUsageRecord": {
          "extends": undefined,
          "properties": {
            "amounts": "optional<list<double>>",
            "date": "optional<string>",
            "keys": "optional<list<string>>",
            "quantities": "optional<list<double>>",
          },
        },
        "shared.GetRevenueReportParams": {
          "extends": undefined,
          "properties": {
            "buyerID": "optional<string>",
            "entitlementID": "optional<string>",
            "organizationID": "string",
            "partner": "string",
            "productID": "optional<string>",
            "reportType": "string",
            "service": "string",
          },
        },
        "shared.GetUsageReportParams": {
          "extends": undefined,
          "properties": {
            "entitlementID": "string",
            "organizationID": "string",
          },
        },
        "shared.RevenueReport": {
          "extends": undefined,
          "properties": {
            "buyerID": "optional<string>",
            "entitlementID": "optional<string>",
            "organizationID": "optional<string>",
            "partner": "optional<string>",
            "productID": "optional<string>",
            "reportDate": "optional<string>",
            "reportType": "optional<string>",
            "revenueRecords": "optional<list<commons.shared.RevenueRecord>>",
            "service": "optional<string>",
          },
        },
        "shared.UsageReport": {
          "extends": undefined,
          "properties": {
            "entitlementID": "optional<string>",
            "organizationID": "optional<string>",
            "reportDate": "optional<string>",
            "usageRecords": "optional<list<shared.EntitlementUsageRecord>>",
          },
        },
      },
    },
  },
}
`;

exports[`open api converter telematica simple 1`] = `
{
  "rootApiFile": {
    "headers": {},
    "name": "api",
  },
  "serviceFiles": {
    "commons.yml": {
      "types": {
        "ChargingStatus_ResponseDTO": {
          "extends": undefined,
          "properties": {
            "isCharging": "boolean",
          },
        },
        "Location_ResponseDTO": {
          "extends": undefined,
          "properties": {
            "location": "_InlinedType0",
          },
        },
        "Odo_ResponseDTO": {
          "extends": undefined,
          "properties": {
            "odo": "double",
          },
        },
        "RangeSoc_ResponseDTO": {
          "extends": undefined,
          "properties": {
            "range": "double",
            "soc": "double",
          },
        },
        "Range_ResponseDTO": {
          "extends": undefined,
          "properties": {
            "range": "double",
          },
        },
        "SOC_ResponseDTO": {
          "extends": undefined,
          "properties": {
            "soc": "double",
          },
        },
        "StaticAttributes_ResponseDTO": {
          "extends": undefined,
          "properties": {
            "make": "string",
            "model": "string",
            "registration": "string",
            "vin": "string",
            "year": "double",
          },
        },
        "_InlinedType0": {
          "extends": [
            "ILocation",
          ],
        },
      },
    },
    "sampleCallback.yml": {
      "services": {
        "http": {
          "SampleCallbackService": {
            "auth": true,
            "base-path": "",
            "endpoints": {
              "appControllerCallback": {
                "display-name": "Dummy callback endpoint",
                "docs": "This is a dummy callback endpoint.
Please share the POST callback endpoint created in your app's backend with Telematica to get callback requests of this format.",
                "method": "POST",
                "path": "/callback",
                "request": {
                  "body": {
                    "extends": undefined,
                    "properties": {
                      "user": "optional<string>",
                      "vehicles": "optional<list<Callback_DTO>>",
                    },
                  },
                },
              },
            },
          },
        },
      },
      "types": {
        "Callback_DTO": {
          "extends": undefined,
          "properties": {
            "id": "string",
            "registration": "string",
          },
        },
      },
    },
    "testingEndpoints.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "services": {
        "http": {
          "TestingEndpointsService": {
            "auth": true,
            "base-path": "",
            "endpoints": {
              "getChargingStatusTest": {
                "display-name": "Test charging status",
                "docs": undefined,
                "method": "GET",
                "path": "/vehicle-data/charging-status/test",
                "request": {
                  "query-parameters": {
                    "vehicleId": {
                      "docs": "24-char hex identifier for the vehicle. The owner must have provided consent through Telematica consent flow",
                      "type": "string",
                    },
                  },
                },
                "response": "commons.ChargingStatus_ResponseDTO",
              },
              "getLocationTest": {
                "display-name": "Test location",
                "docs": undefined,
                "method": "GET",
                "path": "/vehicle-data/location/test",
                "request": {
                  "query-parameters": {
                    "vehicleId": {
                      "docs": "24-char hex identifier for the vehicle. The owner must have provided consent through Telematica consent flow",
                      "type": "string",
                    },
                  },
                },
                "response": "commons.Location_ResponseDTO",
              },
              "getOdoTest": {
                "display-name": "Test odo",
                "docs": undefined,
                "method": "GET",
                "path": "/vehicle-data/odo/test",
                "request": {
                  "query-parameters": {
                    "vehicleId": {
                      "docs": "24-char hex identifier for the vehicle. The owner must have provided consent through Telematica consent flow",
                      "type": "string",
                    },
                  },
                },
                "response": "commons.Odo_ResponseDTO",
              },
              "getRangeSocTest": {
                "display-name": "Test range-soc",
                "docs": undefined,
                "method": "GET",
                "path": "/vehicle-data/range-soc/test",
                "request": {
                  "query-parameters": {
                    "vehicleId": {
                      "docs": "24-char hex identifier for the vehicle. The owner must have provided consent through Telematica consent flow",
                      "type": "string",
                    },
                  },
                },
                "response": "commons.RangeSoc_ResponseDTO",
              },
              "getRangeTest": {
                "display-name": "Test range",
                "docs": undefined,
                "method": "GET",
                "path": "/vehicle-data/range/test",
                "request": {
                  "query-parameters": {
                    "vehicleId": {
                      "docs": "24-char hex identifier for the vehicle. The owner must have provided consent through Telematica consent flow",
                      "type": "string",
                    },
                  },
                },
                "response": "commons.Range_ResponseDTO",
              },
              "getSocTest": {
                "display-name": "Test SOC (battery level)",
                "docs": undefined,
                "method": "GET",
                "path": "/vehicle-data/soc/test",
                "request": {
                  "query-parameters": {
                    "vehicleId": {
                      "docs": "24-char hex identifier for the vehicle. The owner must have provided consent through Telematica consent flow",
                      "type": "string",
                    },
                  },
                },
                "response": "commons.SOC_ResponseDTO",
              },
              "getStaticAttributesTest": {
                "display-name": "Test static attributes",
                "docs": undefined,
                "method": "GET",
                "path": "/vehicle-data/static-attributes/test",
                "request": {
                  "query-parameters": {
                    "vehicleId": {
                      "docs": "24-char hex identifier for the vehicle. The owner must have provided consent through Telematica consent flow",
                      "type": "string",
                    },
                  },
                },
                "response": "commons.StaticAttributes_ResponseDTO",
              },
            },
          },
        },
      },
    },
    "vehicleData.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "services": {
        "http": {
          "VehicleDataService": {
            "auth": true,
            "base-path": "",
            "endpoints": {
              "getChargingStatus": {
                "display-name": "Charging Status",
                "docs": undefined,
                "method": "GET",
                "path": "/vehicle-data/charging-status",
                "request": {
                  "query-parameters": {
                    "vehicleId": {
                      "docs": "24-char hex identifier for the vehicle. The owner must have provided consent through Telematica consent flow",
                      "type": "string",
                    },
                  },
                },
                "response": "commons.ChargingStatus_ResponseDTO",
              },
              "getLocation": {
                "display-name": "Location",
                "docs": undefined,
                "method": "GET",
                "path": "/vehicle-data/location",
                "request": {
                  "query-parameters": {
                    "vehicleId": {
                      "docs": "24-char hex identifier for the vehicle. The owner must have provided consent through Telematica consent flow",
                      "type": "string",
                    },
                  },
                },
                "response": "commons.Location_ResponseDTO",
              },
              "getOdo": {
                "display-name": "Odometer",
                "docs": undefined,
                "method": "GET",
                "path": "/vehicle-data/odo",
                "request": {
                  "query-parameters": {
                    "vehicleId": {
                      "docs": "24-char hex identifier for the vehicle. The owner must have provided consent through Telematica consent flow",
                      "type": "string",
                    },
                  },
                },
                "response": "commons.Odo_ResponseDTO",
              },
              "getRange": {
                "display-name": "Range",
                "docs": undefined,
                "method": "GET",
                "path": "/vehicle-data/range",
                "request": {
                  "query-parameters": {
                    "vehicleId": {
                      "docs": "24-char hex identifier for the vehicle. The owner must have provided consent through Telematica consent flow",
                      "type": "string",
                    },
                  },
                },
                "response": "commons.Range_ResponseDTO",
              },
              "getRangeSoc": {
                "display-name": "Range-SOC",
                "docs": "This endpoint returns the SOC and range for the vehicle in a single call",
                "method": "GET",
                "path": "/vehicle-data/range-soc",
                "request": {
                  "query-parameters": {
                    "vehicleId": {
                      "docs": "24-char hex identifier for the vehicle. The owner must have provided consent through Telematica consent flow",
                      "type": "string",
                    },
                  },
                },
                "response": "commons.RangeSoc_ResponseDTO",
              },
              "getSoc": {
                "display-name": "SOC (battery level)",
                "docs": undefined,
                "method": "GET",
                "path": "/vehicle-data/soc",
                "request": {
                  "query-parameters": {
                    "vehicleId": {
                      "docs": "24-char hex identifier for the vehicle. The owner must have provided consent through Telematica consent flow",
                      "type": "string",
                    },
                  },
                },
                "response": "commons.SOC_ResponseDTO",
              },
              "getStaticAttributes": {
                "display-name": "Static attributes",
                "docs": "Static vehicle attributes like VIN, registration number, model, year and make",
                "method": "GET",
                "path": "/vehicle-data/static-attributes",
                "request": {
                  "query-parameters": {
                    "vehicleId": {
                      "docs": "24-char hex identifier for the vehicle. The owner must have provided consent through Telematica consent flow",
                      "type": "string",
                    },
                  },
                },
                "response": "commons.StaticAttributes_ResponseDTO",
              },
            },
          },
        },
      },
    },
  },
}
`;
