// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`open api converter rivet simple 1`] = `
{
  "rootApiFile": {
    "headers": {},
    "name": "api",
  },
  "serviceFiles": {
    "commons.yml": {
      "services": {
        "http": {
          "CommonsService": {
            "auth": false,
            "base-path": "",
            "endpoints": {},
          },
        },
      },
      "types": {
        "MatchmakerLobbyJoinInfo": {
          "docs": "A matchmaker lobby.",
          "extends": undefined,
          "properties": {
            "lobby_id": "string",
            "player": "commons.MatchmakerLobbyJoinInfoPlayer",
            "ports": "commons.MatchmakerLobbyJoinInfoPorts",
            "region": "commons.MatchmakerLobbyJoinInfoRegion",
          },
        },
        "MatchmakerLobbyJoinInfoPlayer": {
          "docs": "A matchmaker lobby player.",
          "extends": undefined,
          "properties": {
            "token": "string",
          },
        },
        "MatchmakerLobbyJoinInfoRegion": {
          "docs": "A matchmaker lobby region.",
          "extends": undefined,
          "properties": {
            "display_name": "string",
            "region_id": "string",
          },
        },
      },
    },
    "lobby.yml": {
      "services": {
        "http": {
          "LobbyService": {
            "auth": false,
            "base-path": "",
            "endpoints": {
              "LobbyReady": {
                "display-name": undefined,
                "docs": "Marks the current lobby as ready to accept connections. Players will not be
able to connect to this lobby until the lobby is flagged as ready.",
                "method": "POST",
                "path": "/lobbies/ready",
                "path-parameters": {},
                "request": {
                  "body": undefined,
                  "headers": {},
                  "query-parameters": {},
                },
                "response": undefined,
              },
              "PlayerConnected": {
                "display-name": undefined,
                "docs": "Validates the player token is valid and has not already been consumed then
marks the player as connected.

# Player Tokens and Reserved Slots

Player tokens reserve a spot in the lobby until they expire. This allows for
precise matchmaking up to exactly the lobby's player limit, which is
important for games with small lobbies and a high influx of players.

By calling this endpoint with the player token, the player's spot is marked
as connected and will not expire. If this endpoint is never called, the
player's token will expire and this spot will be filled by another player.

# Anti-Botting

Player tokens are only issued by caling \`rivet.api.matchmaker#JoinLobby\`, calling \`rivet.api.matchmaker#FindLobby\`, or
from the \`rivet.api.identity.common#GlobalEventMatchmakerLobbyJoin\` event.
These endpoints have anti-botting measures (i.e. enforcing max player
limits, captchas, and detecting bots), so valid player tokens provide some
confidence that the player is not a bot.

Therefore, it's important to make sure the token is valid by waiting for
this endpoint to return OK before allowing the connected socket to do
anything else. If this endpoint returns an error, the socket should be
disconnected immediately.

# How to Transmit the Player Token

The client is responsible for acquiring the player token by caling
\`rivet.api.matchmaker#JoinLobby\`, calling \`rivet.api.matchmaker#FindLobby\`,
or from the \`rivet.api.identity.common#GlobalEventMatchmakerLobbyJoin\`
event.  Beyond that, it's up to the developer how the player token is
transmitted to the lobby.

If using WebSockets, the player token can be transmitted as a query
paramter.

Otherwise, the player token will likely be automatically sent by the client
once the socket opens. As mentioned above, nothing else should happen until
the player token is validated.",
                "method": "POST",
                "path": "/players/connected",
                "path-parameters": {},
                "request": {
                  "body": "lobby.PlayerConnectedRequestContent",
                  "headers": {},
                  "query-parameters": {},
                },
                "response": undefined,
              },
              "PlayerDisconnected": {
                "display-name": undefined,
                "docs": "Marks a player as disconnected.

# Ghost Players

If players are not marked as disconnected, lobbies will result with "ghost
players" that the matchmaker thinks exist but are no longer connected to the
lobby.",
                "method": "POST",
                "path": "/players/disconnected",
                "path-parameters": {},
                "request": {
                  "body": "lobby.PlayerDisconnectedRequestContent",
                  "headers": {},
                  "query-parameters": {},
                },
                "response": undefined,
              },
            },
          },
        },
      },
      "types": {
        "PlayerConnectedRequestContent": {
          "extends": undefined,
          "properties": {
            "player_token": "string",
          },
        },
        "PlayerDisconnectedRequestContent": {
          "extends": undefined,
          "properties": {
            "player_token": "string",
          },
        },
      },
    },
    "public.yml": {
      "services": {
        "http": {
          "PublicService": {
            "auth": false,
            "base-path": "",
            "endpoints": {
              "FindLobby": {
                "display-name": undefined,
                "docs": "Finds a lobby based on the given criteria.

If a lobby is not found and \`prevent_auto_create_lobby\` is \`true\`, a new lobby will be created.",
                "method": "POST",
                "path": "/lobbies/find",
                "path-parameters": {},
                "request": {
                  "body": "public.FindLobbyRequestContent",
                  "headers": undefined,
                  "query-parameters": {},
                },
                "response": "public.FindLobbyResponseContent",
              },
              "JoinLobby": {
                "display-name": undefined,
                "docs": "Joins a specific lobby.

This request will use the direct player count configured for the lobby
group.",
                "method": "POST",
                "path": "/lobbies/join",
                "path-parameters": {},
                "request": {
                  "body": "public.JoinLobbyRequestContent",
                  "headers": {},
                  "query-parameters": {},
                },
                "response": "public.JoinLobbyResponseContent",
              },
              "ListLobbies": {
                "display-name": undefined,
                "docs": "Lists all open lobbies.",
                "method": "GET",
                "path": "/lobbies/list",
                "path-parameters": {},
                "request": {
                  "body": undefined,
                  "headers": {},
                  "query-parameters": {},
                },
                "response": "public.ListLobbiesResponseContent",
              },
              "ListRegions": {
                "display-name": undefined,
                "docs": "Returns a list of regions available to this namespace.

Regions are sorted by most optimal to least optimal. The player's IP address
is used to calculate the regions' optimality.",
                "method": "GET",
                "path": "/regions",
                "path-parameters": {},
                "request": {
                  "body": undefined,
                  "headers": {},
                  "query-parameters": {},
                },
                "response": "public.ListRegionsResponseContent",
              },
              "SetLobbyClosed": {
                "display-name": undefined,
                "docs": "If \`is_closed\` is \`true\`, players will be prevented from joining the lobby.

Does not shutdown the lobby.",
                "method": "PUT",
                "path": "/lobbies/closed",
                "path-parameters": {},
                "request": {
                  "body": "public.SetLobbyClosedRequestContent",
                  "headers": {},
                  "query-parameters": {},
                },
                "response": undefined,
              },
            },
          },
        },
      },
      "types": {
        "FindLobbyRequestContent": {
          "extends": undefined,
          "properties": {
            "captcha": "optional<commons.CaptchaConfig>",
            "game_modes": "list<string>",
            "prevent_auto_create_lobby": "optional<boolean>",
            "regions": "optional<list<string>>",
          },
        },
        "FindLobbyResponseContent": {
          "extends": undefined,
          "properties": {
            "lobby": "commons.MatchmakerLobbyJoinInfo",
          },
        },
        "JoinLobbyRequestContent": {
          "extends": undefined,
          "properties": {
            "captcha": "optional<commons.CaptchaConfig>",
            "lobby_id": "string",
          },
        },
        "JoinLobbyResponseContent": {
          "extends": undefined,
          "properties": {
            "lobby": "commons.MatchmakerLobbyJoinInfo",
          },
        },
        "ListLobbiesResponseContent": {
          "extends": undefined,
          "properties": {
            "game_modes": "list<commons.GameModeInfo>",
            "lobbies": "list<commons.LobbyInfo>",
            "regions": "list<commons.RegionInfo>",
          },
        },
        "ListRegionsResponseContent": {
          "extends": undefined,
          "properties": {
            "regions": "list<commons.RegionInfo>",
          },
        },
        "SetLobbyClosedRequestContent": {
          "extends": undefined,
          "properties": {
            "is_closed": "boolean",
          },
        },
      },
    },
  },
}
`;

exports[`open api converter telematica simple 1`] = `
{
  "rootApiFile": {
    "headers": {},
    "name": "api",
  },
  "serviceFiles": {
    "commons.yml": {
      "services": {
        "http": {
          "CommonsService": {
            "auth": false,
            "base-path": "",
            "endpoints": {},
          },
        },
      },
      "types": {
        "ChargingStatus_ResponseDTO": {
          "extends": undefined,
          "properties": {
            "isCharging": "boolean",
          },
        },
        "Location_ResponseDTO": {
          "extends": undefined,
          "properties": {
            "location": "_InlinedType0",
          },
        },
        "Odo_ResponseDTO": {
          "extends": undefined,
          "properties": {
            "odo": "double",
          },
        },
        "RangeSoc_ResponseDTO": {
          "extends": undefined,
          "properties": {
            "range": "double",
            "soc": "double",
          },
        },
        "Range_ResponseDTO": {
          "extends": undefined,
          "properties": {
            "range": "double",
          },
        },
        "SOC_ResponseDTO": {
          "extends": undefined,
          "properties": {
            "soc": "double",
          },
        },
        "StaticAttributes_ResponseDTO": {
          "extends": undefined,
          "properties": {
            "make": "string",
            "model": "string",
            "registration": "string",
            "vin": "string",
            "year": "double",
          },
        },
        "_InlinedType0": {
          "extends": [
            "commons.ILocation",
          ],
        },
      },
    },
    "sampleCallback.yml": {
      "services": {
        "http": {
          "SampleCallbackService": {
            "auth": false,
            "base-path": "",
            "endpoints": {
              "AppController_callback": {
                "display-name": "Dummy callback endpoint",
                "docs": "This is a dummy callback endpoint.
Please share the POST callback endpoint created in your app's backend with Telematica to get callback requests of this format.",
                "method": "POST",
                "path": "/callback",
                "path-parameters": {},
                "request": {
                  "body": {
                    "extends": undefined,
                    "properties": {
                      "user": "optional<string>",
                      "vehicles": "optional<list<commons.Callback_DTO>>",
                    },
                  },
                  "headers": {},
                  "query-parameters": {},
                },
                "response": undefined,
              },
            },
          },
        },
      },
      "types": {},
    },
    "testingEndpoints.yml": {
      "services": {
        "http": {
          "TestingEndpointsService": {
            "auth": false,
            "base-path": "",
            "endpoints": {
              "getChargingStatusTest": {
                "display-name": "Test charging status",
                "docs": undefined,
                "method": "GET",
                "path": "/vehicle-data/charging-status/test",
                "path-parameters": {},
                "request": {
                  "body": undefined,
                  "headers": undefined,
                  "query-parameters": {},
                },
                "response": "commons.ChargingStatus_ResponseDTO",
              },
              "getLocationTest": {
                "display-name": "Test location",
                "docs": undefined,
                "method": "GET",
                "path": "/vehicle-data/location/test",
                "path-parameters": {},
                "request": {
                  "body": undefined,
                  "headers": undefined,
                  "query-parameters": {},
                },
                "response": "commons.Location_ResponseDTO",
              },
              "getOdoTest": {
                "display-name": "Test odo",
                "docs": undefined,
                "method": "GET",
                "path": "/vehicle-data/odo/test",
                "path-parameters": {},
                "request": {
                  "body": undefined,
                  "headers": undefined,
                  "query-parameters": {},
                },
                "response": "commons.Odo_ResponseDTO",
              },
              "getRangeSocTest": {
                "display-name": "Test range-soc",
                "docs": undefined,
                "method": "GET",
                "path": "/vehicle-data/range-soc/test",
                "path-parameters": {},
                "request": {
                  "body": undefined,
                  "headers": undefined,
                  "query-parameters": {},
                },
                "response": "commons.RangeSoc_ResponseDTO",
              },
              "getRangeTest": {
                "display-name": "Test range",
                "docs": undefined,
                "method": "GET",
                "path": "/vehicle-data/range/test",
                "path-parameters": {},
                "request": {
                  "body": undefined,
                  "headers": undefined,
                  "query-parameters": {},
                },
                "response": "commons.Range_ResponseDTO",
              },
              "getSOCTest": {
                "display-name": "Test SOC (battery level)",
                "docs": undefined,
                "method": "GET",
                "path": "/vehicle-data/soc/test",
                "path-parameters": {},
                "request": {
                  "body": undefined,
                  "headers": undefined,
                  "query-parameters": {},
                },
                "response": "commons.SOC_ResponseDTO",
              },
              "getStaticAttributesTest": {
                "display-name": "Test static attributes",
                "docs": undefined,
                "method": "GET",
                "path": "/vehicle-data/static-attributes/test",
                "path-parameters": {},
                "request": {
                  "body": undefined,
                  "headers": undefined,
                  "query-parameters": {},
                },
                "response": "commons.StaticAttributes_ResponseDTO",
              },
            },
          },
        },
      },
      "types": {},
    },
    "vehicleData.yml": {
      "services": {
        "http": {
          "VehicleDataService": {
            "auth": false,
            "base-path": "",
            "endpoints": {
              "getChargingStatus": {
                "display-name": "Charging Status",
                "docs": undefined,
                "method": "GET",
                "path": "/vehicle-data/charging-status",
                "path-parameters": {},
                "request": {
                  "body": undefined,
                  "headers": undefined,
                  "query-parameters": {},
                },
                "response": "commons.ChargingStatus_ResponseDTO",
              },
              "getLocation": {
                "display-name": "Location",
                "docs": undefined,
                "method": "GET",
                "path": "/vehicle-data/location",
                "path-parameters": {},
                "request": {
                  "body": undefined,
                  "headers": undefined,
                  "query-parameters": {},
                },
                "response": "commons.Location_ResponseDTO",
              },
              "getOdo": {
                "display-name": "Odometer",
                "docs": undefined,
                "method": "GET",
                "path": "/vehicle-data/odo",
                "path-parameters": {},
                "request": {
                  "body": undefined,
                  "headers": undefined,
                  "query-parameters": {},
                },
                "response": "commons.Odo_ResponseDTO",
              },
              "getRange": {
                "display-name": "Range",
                "docs": undefined,
                "method": "GET",
                "path": "/vehicle-data/range",
                "path-parameters": {},
                "request": {
                  "body": undefined,
                  "headers": undefined,
                  "query-parameters": {},
                },
                "response": "commons.Range_ResponseDTO",
              },
              "getRangeSoc": {
                "display-name": "Range-SOC",
                "docs": "This endpoint returns the SOC and range for the vehicle in a single call",
                "method": "GET",
                "path": "/vehicle-data/range-soc",
                "path-parameters": {},
                "request": {
                  "body": undefined,
                  "headers": undefined,
                  "query-parameters": {},
                },
                "response": "commons.RangeSoc_ResponseDTO",
              },
              "getSOC": {
                "display-name": "SOC (battery level)",
                "docs": undefined,
                "method": "GET",
                "path": "/vehicle-data/soc",
                "path-parameters": {},
                "request": {
                  "body": undefined,
                  "headers": undefined,
                  "query-parameters": {},
                },
                "response": "commons.SOC_ResponseDTO",
              },
              "getStaticAttributes": {
                "display-name": "Static attributes",
                "docs": "Static vehicle attributes like VIN, registration number, model, year and make",
                "method": "GET",
                "path": "/vehicle-data/static-attributes",
                "path-parameters": {},
                "request": {
                  "body": undefined,
                  "headers": undefined,
                  "query-parameters": {},
                },
                "response": "commons.StaticAttributes_ResponseDTO",
              },
            },
          },
        },
      },
      "types": {},
    },
  },
}
`;
