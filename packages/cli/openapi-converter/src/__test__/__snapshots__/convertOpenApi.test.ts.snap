// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`open api converter covie simple 1`] = `
{
  "rootApiFile": {
    "headers": {},
    "name": "api",
  },
  "serviceFiles": {
    "account.yml": {
      "services": {
        "http": {
          "AccountService": {
            "auth": true,
            "base-path": "",
            "endpoints": {
              "disableAccountMfaRequired": {
                "display-name": "Disable Account MFA Requirement",
                "docs": "Remove requirement for all account users to have an MFA application configured",
                "method": "DELETE",
                "path": "/accounts/{account_id}/mfa_requirements",
              },
              "enableAccountMfaRequired": {
                "display-name": "Enable Account MFA Requirement",
                "docs": "Require all account users to have an MFA application configured",
                "method": "POST",
                "path": "/accounts/{account_id}/mfa_requirements",
                "response": "AccountWithConfig",
              },
            },
          },
        },
      },
      "types": {
        "AccountWithConfig": {
          "extends": undefined,
          "properties": {},
        },
      },
    },
    "application.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "services": {
        "http": {
          "ApplicationService": {
            "auth": true,
            "base-path": "",
            "endpoints": {
              "getApplicationLinks": {
                "display-name": "List Application Links",
                "docs": "Lists an application's links.",
                "method": "GET",
                "path": "/applications/{application_id}/links",
                "request": {
                  "query-parameters": {
                    "created_since": {
                      "docs": "Limit results to links created on or after this date.",
                      "type": "optional<string>",
                    },
                    "created_until": {
                      "docs": "Limit results to links created on or before this date.",
                      "type": "optional<string>",
                    },
                    "has_metadata": {
                      "docs": "Filter whether a link has metadata attached",
                      "type": "optional<boolean>",
                    },
                    "integration_ids": {
                      "docs": "If provided, only show items with any of the specified integration IDs, comma-separated.",
                      "type": "optional<string>",
                    },
                    "limit": {
                      "docs": "Number of results to return.",
                      "type": "optional<integer>",
                    },
                    "offset": {
                      "docs": "Specifies the offset of the first result to return.",
                      "type": "optional<integer>",
                    },
                    "policy_type": {
                      "docs": "The type of policy linked.",
                      "type": "optional<string>",
                    },
                    "provider": {
                      "docs": "Partial name of a provider to search against",
                      "type": "optional<string>",
                    },
                    "q": {
                      "docs": "Search for link via ID",
                      "type": "optional<string>",
                    },
                    "status": {
                      "docs": "Filter link status; separate multiple statuses (OR'd) with commas",
                      "type": "optional<string>",
                    },
                    "synced_since": {
                      "docs": "Limit results to links last synced on or after this date.",
                      "type": "optional<string>",
                    },
                    "synced_until": {
                      "docs": "Limit results to links last synced on or before this date.",
                      "type": "optional<string>",
                    },
                    "updated_since": {
                      "docs": "Limit results to links last updated on or since this date.",
                      "type": "optional<string>",
                    },
                    "updated_until": {
                      "docs": "Limit results to links last updated on or before this date.",
                      "type": "optional<string>",
                    },
                  },
                },
                "response": "commons.Links",
              },
              "getApplicationPolicies": {
                "display-name": "List Application Policies",
                "docs": "Lists an application's policies.",
                "method": "GET",
                "path": "/applications/{application_id}/policies",
                "request": {
                  "query-parameters": {
                    "integration_ids": {
                      "docs": "If provided, only show items with any of the specified integration IDs, comma-separated.",
                      "type": "optional<string>",
                    },
                    "limit": {
                      "docs": "Number of results to return.",
                      "type": "optional<integer>",
                    },
                    "offset": {
                      "docs": "Specifies the offset of the first result to return.",
                      "type": "optional<integer>",
                    },
                  },
                },
                "response": "commons.Policies",
              },
            },
          },
        },
      },
    },
    "commons.yml": {
      "types": {
        "Carrier": {
          "docs": "A basic object describing the individual insurance company which has issued a policy.",
          "extends": undefined,
          "properties": {
            "name": "optional<string>",
          },
        },
        "Events": {
          "extends": undefined,
          "properties": {
            "_embedded": "optional<_InlinedType25>",
            "count": "optional<integer>",
            "filtered_count": "optional<integer>",
          },
        },
        "Integration": {
          "docs": "Represents a connection between a client application and Covie's systems allowing a client users to create and process links.",
          "extends": undefined,
          "properties": {
            "configuration": "optional<_InlinedType30>",
            "created_at": "optional<string>",
            "id": "optional<string>",
            "key": "optional<string>",
            "name": "optional<string>",
            "status": "optional<string>",
            "updated_at": "optional<string>",
          },
        },
        "Link_2": {
          "docs": "Represents the individual connections between Covie and a Policyholder's account with a carrier and wraps the policies retrieved from it that have been made available to the consumer.",
          "extends": undefined,
          "properties": {
            "_links": "optional<_InlinedType36>",
            "created_at": "optional<string>",
            "id": "optional<string>",
            "integration_id": "optional<string>",
            "is_tracked": "optional<boolean>",
            "object": "optional<string>",
            "policy_count": "optional<integer>",
            "status": "optional<string>",
            "tracking_frequency": "optional<_InlinedType32>",
            "updated_at": "optional<string>",
          },
        },
        "Links": {
          "extends": undefined,
          "properties": {
            "_embedded": "optional<_InlinedType37>",
            "count": "optional<integer>",
            "filtered_count": "optional<integer>",
          },
        },
        "PeriodValue": {
          "docs": "Describes a value that represents a period of time, such as days, weeks, or months.",
          "extends": undefined,
          "properties": {
            "unit": "optional<string>",
            "value": "optional<integer>",
          },
        },
        "Policies": {
          "extends": undefined,
          "properties": {
            "_embedded": "optional<_InlinedType31>",
            "count": "optional<integer>",
            "filtered_count": "optional<integer>",
          },
        },
        "Webhook": {
          "docs": "Represents a webhook in the Covie system.",
          "extends": undefined,
          "properties": {
            "created_at": "optional<string>",
            "event_types": "optional<list<string>>",
            "id": "optional<string>",
            "is_enabled": "optional<boolean>",
            "last_called_at": "optional<string>",
            "last_response_body": "optional<string>",
            "last_response_code": "optional<string>",
            "updated_at": "optional<string>",
            "uri": "optional<string>",
          },
        },
        "_InlinedType25": {
          "extends": undefined,
          "properties": {
            "events": "optional<list<Event>>",
          },
        },
        "_InlinedType26": {
          "extends": undefined,
          "properties": {
            "primary": "optional<string>",
          },
        },
        "_InlinedType27": {
          "docs": "Branding configuration for the embed.",
          "extends": undefined,
          "properties": {
            "colors": "optional<_InlinedType26>",
            "hide_logo": "optional<boolean>",
            "logo": "optional<string>",
          },
        },
        "_InlinedType28": {
          "extends": undefined,
          "properties": {
            "agency_logo": "optional<string>",
            "agency_photo": "optional<string>",
          },
        },
        "_InlinedType29": {
          "extends": undefined,
          "properties": {
            "agency_name": "optional<string>",
            "agent_email": "optional<string>",
            "agent_name": "optional<string>",
            "image_urls": "optional<_InlinedType28>",
          },
        },
        "_InlinedType30": {
          "extends": undefined,
          "properties": {
            "brand": "optional<_InlinedType27>",
            "display_name": "optional<string>",
            "hosted": "optional<_InlinedType29>",
            "use_name_as_display_name": "optional<boolean>",
          },
        },
        "_InlinedType31": {
          "extends": undefined,
          "properties": {
            "policies": "optional<list<Policy>>",
          },
        },
        "_InlinedType32": {
          "docs": "The frequency of which tracking should be performed. This value is \`never\` when tracking is disabled.",
          "enum": [
            "daily",
            "weekly",
            "monthly",
            "never",
            "on_demand",
          ],
        },
        "_InlinedType33": {
          "docs": "Link to retrieve the link's details.",
          "extends": undefined,
          "properties": {
            "href": "optional<string>",
          },
        },
        "_InlinedType34": {
          "docs": "Link to the carrier's logo.",
          "extends": undefined,
          "properties": {
            "href": "optional<string>",
          },
        },
        "_InlinedType35": {
          "extends": undefined,
          "properties": {
            "content_type": "optional<string>",
            "href": "optional<string>",
          },
        },
        "_InlinedType36": {
          "extends": undefined,
          "properties": {
            "carrier_logo": "optional<_InlinedType34>",
            "self": "optional<_InlinedType33>",
            "uploaded_documents": "optional<list<_InlinedType35>>",
          },
        },
        "_InlinedType37": {
          "extends": undefined,
          "properties": {
            "links": "optional<list<Link_2>>",
          },
        },
      },
    },
    "event.yml": {
      "services": {
        "http": {
          "EventService": {
            "auth": true,
            "base-path": "",
            "endpoints": {
              "postEventsEventIdBroadcasts": {
                "display-name": "Rebroadcast Event",
                "docs": "Rebroadcast an event.",
                "method": "POST",
                "path": "/events/{event_id}/broadcasts",
                "response": "_InlinedType24",
              },
            },
          },
        },
      },
      "types": {
        "_InlinedType23": {
          "extends": undefined,
          "properties": {
            "broadcasts": "optional<list<commons.EventBroadcast>>",
          },
        },
        "_InlinedType24": {
          "extends": undefined,
          "properties": {
            "_embedded": "optional<_InlinedType23>",
            "count": "optional<integer>",
          },
        },
      },
    },
    "integration.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "services": {
        "http": {
          "IntegrationService": {
            "auth": true,
            "base-path": "",
            "endpoints": {
              "createIntegration": {
                "display-name": "Create Integration",
                "docs": "Creates a new integration.",
                "method": "POST",
                "path": "/integrations",
                "request": {
                  "body": {
                    "extends": undefined,
                    "properties": {
                      "configuration": "optional<_InlinedType13>",
                      "name": "string",
                      "policyRequirements": "optional<_InlinedType10>",
                    },
                  },
                },
              },
              "deleteIntegration": {
                "display-name": "Delete Integration",
                "docs": "Deletes an integration.",
                "method": "DELETE",
                "path": "/integrations/{integration_id}",
              },
              "deleteIntegrationsIntegrationIdAgencyLogo": {
                "display-name": "Delete Agency Logo",
                "docs": "Delete the agency logo and/or config if present.",
                "method": "DELETE",
                "path": "/integrations/{integration_id}/agency_logo",
              },
              "deleteIntegrationsIntegrationIdAgentPhoto": {
                "display-name": "Delete Agent Photo",
                "docs": "Delete the agent photo and/or config if present.",
                "method": "DELETE",
                "path": "/integrations/{integration_id}/agent_photo",
              },
              "deleteIntegrationsIntegrationIdBrandLogo": {
                "display-name": "Delete Brand Logo",
                "docs": "Delete the brand logo and/or config if present.",
                "method": "DELETE",
                "path": "/integrations/{integration_id}/brand_logo",
              },
              "getIntegration": {
                "display-name": "Get Integration",
                "docs": "Retrieve the details of an integration.",
                "method": "GET",
                "path": "/integrations/{integration_id}",
                "response": "commons.Integration_2",
              },
              "getIntegrationPolicies": {
                "display-name": "List Integration Policies",
                "docs": "List all policies that have been linked to an integration.",
                "method": "GET",
                "path": "/integrations/{integration_id}/policies",
                "request": {
                  "query-parameters": {
                    "limit": {
                      "docs": "Number of results to return.",
                      "type": "optional<integer>",
                    },
                    "offset": {
                      "docs": "Specifies the offset of the first result to return.",
                      "type": "optional<integer>",
                    },
                  },
                },
                "response": "commons.Policies",
              },
              "getIntegrationProviders": {
                "display-name": "Supported Providers List",
                "docs": "Retrieve a list of supported carriers for a given integration, along with their identifiers.",
                "method": "GET",
                "path": "/integrations/{integration_id}/providers",
                "request": {
                  "query-parameters": {
                    "required_policy_types": {
                      "docs": "A pipe delineated list of policy types desired. Providers who do not support at least one required policy type will be excluded. ",
                      "type": "optional<string>",
                    },
                  },
                },
                "response": "Providers",
              },
              "getIntegrationsIntegrationIdAgencyLogo": {
                "display-name": "View Agency Logo",
                "docs": "View the agency logo for the hosted integration.",
                "method": "GET",
                "path": "/integrations/{integration_id}/agency_logo",
              },
              "getIntegrationsIntegrationIdAgentPhoto": {
                "display-name": "View Agent Photo",
                "docs": "View the agent photo for the hosted integration.",
                "method": "GET",
                "path": "/integrations/{integration_id}/agent_photo",
              },
              "getIntegrationsIntegrationIdBrandLogo": {
                "display-name": "View Brand Logo",
                "docs": "View the brand logo for the integration.",
                "method": "GET",
                "path": "/integrations/{integration_id}/brand_logo",
              },
              "listIntegrations": {
                "display-name": "List Integrations",
                "docs": "List integrations associated to an application",
                "method": "GET",
                "path": "/integrations",
                "request": {
                  "query-parameters": {
                    "q": {
                      "docs": "Partial integration name, ID, or integration key to search against, with or without leading in_/ik_",
                      "type": "optional<string>",
                    },
                    "status": {
                      "docs": "Filter active or archived integrations",
                      "type": "optional<string>",
                    },
                  },
                },
                "response": "Integrations",
              },
              "putIntegrationsIntegrationIdAgencyLogo": {
                "display-name": "Update Agency Logo",
                "docs": "Upload the agency logo for the hosted integration.",
                "method": "PUT",
                "path": "/integrations/{integration_id}/agency_logo",
                "response": "_InlinedType18",
              },
              "putIntegrationsIntegrationIdAgentPhoto": {
                "display-name": "Update Agent Photo",
                "docs": "Upload an agent photo for the hosted integration.",
                "method": "PUT",
                "path": "/integrations/{integration_id}/agent_photo",
                "response": "_InlinedType19",
              },
              "putIntegrationsIntegrationIdBrandLogo": {
                "display-name": "Update Brand Logo",
                "docs": "Upload the brand logo for the hosted integration.",
                "method": "PUT",
                "path": "/integrations/{integration_id}/brand_logo",
                "response": "_InlinedType20",
              },
              "regenerateIntegrationKey": {
                "display-name": "Regenerate Integration Key",
                "docs": "Replaces the existing integration key with a new randomly generated key.",
                "method": "POST",
                "path": "/integrations/{integration_id}/regenerate_key",
                "response": "commons.Integration_2",
              },
              "updateIntegration": {
                "display-name": "Update Integration",
                "docs": "Edit the name and archived status of an integration.",
                "method": "PATCH",
                "path": "/integrations/{integration_id}",
                "request": {
                  "body": {
                    "extends": undefined,
                    "properties": {
                      "configuration": "optional<_InlinedType16>",
                      "name": "optional<string>",
                      "policy_requirements": "optional<_InlinedType17>",
                      "status": "optional<string>",
                    },
                  },
                },
                "response": "commons.Integration_2",
              },
            },
          },
        },
      },
      "types": {
        "Integrations": {
          "extends": undefined,
          "properties": {
            "_embedded": "optional<_InlinedType6>",
            "_links": "optional<_InlinedType5>",
            "count": "optional<integer>",
          },
        },
        "Providers": {
          "extends": undefined,
          "properties": {
            "_embedded": "optional<_InlinedType9>",
            "_links": "optional<_InlinedType8>",
            "count": "optional<integer>",
          },
        },
        "_InlinedType10": {
          "extends": undefined,
          "properties": {
            "allow_inactive": "optional<boolean>",
            "effective_date": "optional<string>",
          },
        },
        "_InlinedType11": {
          "extends": undefined,
          "properties": {
            "primary": "optional<string>",
          },
        },
        "_InlinedType12": {
          "docs": "Branding configuration for the embed.",
          "extends": undefined,
          "properties": {
            "colors": "optional<_InlinedType11>",
            "hide_logo": "optional<boolean>",
            "logo": "optional<string>",
          },
        },
        "_InlinedType13": {
          "extends": undefined,
          "properties": {
            "brand": "optional<_InlinedType12>",
            "display_name": "optional<string>",
            "use_name_as_display_name": "optional<boolean>",
          },
        },
        "_InlinedType14": {
          "extends": undefined,
          "properties": {
            "primary": "optional<string>",
          },
        },
        "_InlinedType15": {
          "docs": "Branding configuration for the embed.",
          "extends": undefined,
          "properties": {
            "colors": "optional<_InlinedType14>",
            "hide_logo": "optional<boolean>",
            "logo": "optional<string>",
          },
        },
        "_InlinedType16": {
          "extends": undefined,
          "properties": {
            "brand": "optional<_InlinedType15>",
            "display_name": "optional<string>",
            "use_name_as_display_name": "optional<boolean>",
          },
        },
        "_InlinedType17": {
          "extends": undefined,
          "properties": {
            "allow_inactive": "optional<boolean>",
            "effective_date": "optional<string>",
          },
        },
        "_InlinedType18": {
          "extends": undefined,
          "properties": {
            "href": "optional<string>",
          },
        },
        "_InlinedType19": {
          "extends": undefined,
          "properties": {
            "href": "optional<string>",
          },
        },
        "_InlinedType20": {
          "extends": undefined,
          "properties": {
            "href": "optional<string>",
          },
        },
        "_InlinedType4": {
          "extends": undefined,
          "properties": {
            "href": "optional<string>",
          },
        },
        "_InlinedType5": {
          "extends": undefined,
          "properties": {
            "self": "optional<_InlinedType4>",
          },
        },
        "_InlinedType6": {
          "extends": undefined,
          "properties": {
            "integrations": "optional<list<commons.Integration>>",
          },
        },
        "_InlinedType7": {
          "extends": undefined,
          "properties": {
            "href": "optional<string>",
          },
        },
        "_InlinedType8": {
          "extends": undefined,
          "properties": {
            "self": "optional<_InlinedType7>",
          },
        },
        "_InlinedType9": {
          "extends": undefined,
          "properties": {
            "providers": "optional<list<commons.Provider>>",
          },
        },
      },
    },
    "link.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "services": {
        "http": {
          "LinkService": {
            "auth": true,
            "base-path": "",
            "endpoints": {
              "attachLinkDocument": {
                "display-name": "Upload Document To Link",
                "docs": "Attach a policy document to a Link. If the document can be parsed, select the parsed policy for sharing.",
                "method": "POST",
                "path": "/links/{id}/documents",
              },
              "deleteLink": {
                "display-name": "Delete Link",
                "docs": "Deletes a link.",
                "method": "DELETE",
                "path": "/links/{id}",
              },
              "getIntegrationLinks": {
                "display-name": "List Integration Links",
                "docs": "Retrieves a list of links associated to the requested integration",
                "method": "GET",
                "path": "/integrations/{integration_id}/links",
                "request": {
                  "query-parameters": {
                    "created_since": {
                      "docs": "Limit results to links created on or after this date.",
                      "type": "optional<string>",
                    },
                    "created_until": {
                      "docs": "Limit results to links created on or before this date.",
                      "type": "optional<string>",
                    },
                    "has_metadata": {
                      "docs": "Filter whether a link has metadata attached",
                      "type": "optional<boolean>",
                    },
                    "limit": {
                      "docs": "Number of results to return.",
                      "type": "optional<integer>",
                    },
                    "offset": {
                      "docs": "Specifies the offset of the first result to return.",
                      "type": "optional<integer>",
                    },
                    "policy_type": {
                      "docs": "The type of policy linked.",
                      "type": "optional<string>",
                    },
                    "provider": {
                      "docs": "Partial name of a provider to search against",
                      "type": "optional<string>",
                    },
                    "q": {
                      "docs": "Search for link via ID",
                      "type": "optional<string>",
                    },
                    "status": {
                      "docs": "Filter link status; separate multiple statuses (OR'd) with commas",
                      "type": "optional<string>",
                    },
                    "synced_since": {
                      "docs": "Limit results to links last synced on or after this date.",
                      "type": "optional<string>",
                    },
                    "synced_until": {
                      "docs": "Limit results to links last synced on or before this date.",
                      "type": "optional<string>",
                    },
                    "updated_since": {
                      "docs": "Limit results to links last updated on or since this date.",
                      "type": "optional<string>",
                    },
                    "updated_until": {
                      "docs": "Limit results to links last updated on or before this date.",
                      "type": "optional<string>",
                    },
                  },
                },
                "response": "commons.Links",
              },
              "getIntegrationLinksWithPolicies": {
                "display-name": "List Integration Links With Policies",
                "docs": "Retrieves a list of links and selected policies associated to the requested integration",
                "method": "GET",
                "path": "/integrations/{integration_id}/links_with_policies",
                "request": {
                  "query-parameters": {
                    "created_since": {
                      "docs": "Limit results to links created on or after this date.",
                      "type": "optional<string>",
                    },
                    "created_until": {
                      "docs": "Limit results to links created on or before this date.",
                      "type": "optional<string>",
                    },
                    "limit": {
                      "docs": "Number of results to return.",
                      "type": "optional<integer>",
                    },
                    "offset": {
                      "docs": "Specifies the offset of the first result to return.",
                      "type": "optional<integer>",
                    },
                    "policy_filter_type": {
                      "docs": "Show only these types of policies within each link. Does not affect which links are shown. Comma-separate to allow multiple policy types.",
                      "type": "optional<string>",
                    },
                    "policy_type": {
                      "docs": "The type of policy linked.",
                      "type": "optional<string>",
                    },
                    "provider": {
                      "docs": "Partial name of a provider to search against",
                      "type": "optional<string>",
                    },
                    "synced_since": {
                      "docs": "Limit results to links last synced on or after this date.",
                      "type": "optional<string>",
                    },
                    "synced_until": {
                      "docs": "Limit results to links last synced on or before this date.",
                      "type": "optional<string>",
                    },
                    "updated_since": {
                      "docs": "Limit results to links last updated on or since this date.",
                      "type": "optional<string>",
                    },
                    "updated_until": {
                      "docs": "Limit results to links last updated on or before this date.",
                      "type": "optional<string>",
                    },
                  },
                },
                "response": "LinksWithPolicies",
              },
              "getLink": {
                "display-name": "Retrieve link",
                "docs": "Retrieves a Link",
                "method": "GET",
                "path": "/links/{id}",
                "response": "commons.Link",
              },
              "getLinkEvents": {
                "display-name": "List Link Events",
                "docs": "Retrieves a list of events triggered for the requested link",
                "method": "GET",
                "path": "/links/{id}/events",
                "request": {
                  "query-parameters": {
                    "event_type": {
                      "docs": "Filter events by type.",
                      "type": "optional<string>",
                    },
                    "limit": {
                      "docs": "Number of results to return.",
                      "type": "optional<integer>",
                    },
                    "offset": {
                      "docs": "Specifies the offset of the first result to return.",
                      "type": "optional<integer>",
                    },
                  },
                },
                "response": "commons.Events",
              },
              "getLinkPolicies": {
                "display-name": "List Link Policies",
                "docs": "Retrieves a list of policies associated with the requested link",
                "method": "GET",
                "path": "/links/{id}/policies",
                "request": {
                  "query-parameters": {
                    "limit": {
                      "docs": "Number of results to return.",
                      "type": "optional<integer>",
                    },
                    "offset": {
                      "docs": "Specifies the offset of the first result to return.",
                      "type": "optional<integer>",
                    },
                  },
                },
                "response": "commons.Policies",
              },
              "initializeLinkViaIntegration": {
                "display-name": "Initialize link",
                "docs": "Creates a link and optionally sets metadata and selects a carrier, allowing for seeding initial data before an insured continues the linking process via the embed",
                "method": "POST",
                "path": "/integrations/{integration_id}/links",
                "request": {
                  "body": {
                    "extends": undefined,
                    "properties": {
                      "provider_id": "optional<string>",
                    },
                  },
                },
                "response": "commons.Link",
              },
              "syncLinkManually": {
                "display-name": "Manually Sync Link",
                "docs": "Sync a tracked link with the provider using the stored user credentials",
                "method": "POST",
                "path": "/links/{id}/syncs",
              },
              "updateLinkSettings": {
                "display-name": "Update Link Settings",
                "docs": undefined,
                "method": "PATCH",
                "path": "/links/{id}",
                "request": {
                  "body": {
                    "extends": undefined,
                    "properties": {
                      "tracking_frequency": "optional<string>",
                    },
                  },
                },
                "response": "commons.Link",
              },
            },
          },
        },
      },
      "types": {
        "LinksWithPolicies": {
          "extends": undefined,
          "properties": {
            "_embedded": "optional<_InlinedType21>",
            "count": "optional<integer>",
            "filtered_count": "optional<integer>",
          },
        },
        "_InlinedType21": {
          "extends": undefined,
          "properties": {
            "links": "optional<list<commons.LinkWithPolicies>>",
          },
        },
      },
    },
    "policy.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "services": {
        "http": {
          "PolicyService": {
            "auth": true,
            "base-path": "",
            "endpoints": {
              "getPoliciesPolicyId": {
                "display-name": "Retrieve Policy",
                "docs": "Retrieve a Policy object that was previously connected via a Link",
                "method": "GET",
                "path": "/policies/{policy_id}",
                "response": "Policy_2",
              },
              "getPolicyDocument": {
                "display-name": "Retrieve Policy Document",
                "docs": "Retrieve the contents of a Policy document",
                "method": "GET",
                "path": "/policies/{policy_id}/documents/{document_type}",
                "response": "FileContents",
              },
              "listPolicyEvents": {
                "display-name": "List Policy Events",
                "docs": "List all events that have been triggered for the selected policy",
                "method": "GET",
                "path": "/policies/{policy_id}/events",
                "request": {
                  "query-parameters": {
                    "event_type": {
                      "docs": "Filter events by type.",
                      "type": "optional<string>",
                    },
                    "limit": {
                      "docs": "Number of results to return.",
                      "type": "optional<integer>",
                    },
                    "offset": {
                      "docs": "Specifies the offset of the first result to return.",
                      "type": "optional<integer>",
                    },
                  },
                },
                "response": "commons.Events",
              },
            },
          },
        },
      },
      "types": {
        "Policy": {
          "docs": "This describes, in high level, the insurance policy record that is provided by a link. This object encapsulates all the necessary details to understand the policy's status, policyholders, and covered persons or properties. ",
          "extends": undefined,
          "properties": {
            "_embedded": "optional<_InlinedType3>",
            "_links": "optional<_InlinedType2>",
            "cancellation_date": "optional<string>",
            "cancellation_reason": "optional<_InlinedType0>",
            "carrier": "optional<commons.Carrier>",
            "expiration_date": "optional<string>",
            "fingerprint": "optional<string>",
            "id": "optional<string>",
            "inception_date": "optional<string>",
            "last_synced_at": "optional<string>",
            "line": "optional<string>",
            "link_id": "optional<string>",
            "linked_at": "optional<string>",
            "locations": "optional<list<commons.Location>>",
            "masked_number": "optional<string>",
            "number": "optional<string>",
            "object": "optional<string>",
            "policyholders": "optional<list<commons.Policyholder>>",
            "status": "optional<string>",
            "term_length": "optional<commons.PeriodValue>",
            "vehicles": "optional<list<commons.Vehicle>>",
          },
        },
        "_InlinedType0": {
          "docs": "The determined reason for the cancellation, such as insured_non_payment or carrier_non_renew or insured_action. This value is null when cancellation is not active or not explicitly indicated by the carrier systems and is not guaranteed to be provided in any circumstance.",
          "enum": [
            "carrier_non_renew",
            "insured_non_payment",
            "insured_requested",
            "other",
          ],
        },
        "_InlinedType1": {
          "docs": "A link to the logo for the carrier on the policy.",
          "extends": undefined,
          "properties": {
            "href": "optional<string>",
          },
        },
        "_InlinedType2": {
          "docs": "A polymorphic list of externally linked resources related to this policy such as documents or logos for carriers.",
          "extends": undefined,
          "properties": {
            "carrier_logo": "optional<_InlinedType1>",
            "documents": "optional<list<commons.DocumentRef>>",
          },
        },
        "_InlinedType3": {
          "docs": "A container for objects wrapped by the current object.",
          "extends": undefined,
          "properties": {
            "missing_fields": "optional<list<string>>",
          },
        },
      },
    },
    "webhook.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "services": {
        "http": {
          "WebhookService": {
            "auth": true,
            "base-path": "",
            "endpoints": {
              "createWebhook": {
                "display-name": "Create Webhook",
                "docs": "Create a new webhook",
                "method": "POST",
                "path": "/webhooks",
                "request": {
                  "body": {
                    "extends": undefined,
                    "properties": {
                      "event_types": "optional<list<string>>",
                      "uri": "optional<string>",
                    },
                  },
                },
              },
              "getWebhook": {
                "display-name": "Get Webhook",
                "docs": "Get the details of a webhook.",
                "method": "GET",
                "path": "/webhooks/{webhook_id}",
                "response": "commons.Webhook_2",
              },
              "listWebhookEvents": {
                "display-name": "List Webhook Events",
                "docs": "List the events that have been triggered for a webhook.",
                "method": "GET",
                "path": "/webhooks/{webhook_id}/events",
                "request": {
                  "query-parameters": {
                    "event_type": {
                      "docs": "Filter events by type.",
                      "type": "optional<string>",
                    },
                    "limit": {
                      "docs": "Number of results to return.",
                      "type": "optional<integer>",
                    },
                    "offset": {
                      "docs": "Specifies the offset of the first result to return.",
                      "type": "optional<integer>",
                    },
                  },
                },
                "response": "commons.Events",
              },
              "listWebhooks": {
                "display-name": "List Webhooks",
                "docs": "List an application's configured webhooks.",
                "method": "GET",
                "path": "/webhooks",
                "request": {
                  "query-parameters": {
                    "event_type": {
                      "docs": "Filter events by type.",
                      "type": "optional<string>",
                    },
                    "limit": {
                      "docs": "Number of results to return.",
                      "type": "optional<integer>",
                    },
                    "offset": {
                      "docs": "Specifies the offset of the first result to return.",
                      "type": "optional<integer>",
                    },
                  },
                },
                "response": "Webhooks",
              },
              "updateWebhook": {
                "display-name": "Update Webhook",
                "docs": "Update a webhook.",
                "method": "PATCH",
                "path": "/webhooks/{webhook_id}",
                "request": {
                  "body": {
                    "extends": undefined,
                    "properties": {
                      "event_types": "optional<list<string>>",
                      "is_enabled": "optional<boolean>",
                      "uri": "optional<string>",
                    },
                  },
                },
                "response": "commons.Webhook_2",
              },
            },
          },
        },
      },
      "types": {
        "Webhooks": {
          "extends": undefined,
          "properties": {
            "_embedded": "optional<_InlinedType22>",
            "count": "optional<integer>",
            "filtered_count": "optional<integer>",
          },
        },
        "_InlinedType22": {
          "extends": undefined,
          "properties": {
            "webhooks": "optional<list<commons.Webhook>>",
          },
        },
      },
    },
  },
}
`;

exports[`open api converter partnerstack simple 1`] = `
{
  "rootApiFile": {
    "headers": {},
    "name": "api",
  },
  "serviceFiles": {
    "actions.yml": {
      "services": {
        "http": {
          "ActionsService": {
            "auth": true,
            "base-path": "",
            "endpoints": {
              "": {
                "display-name": "List all actions",
                "docs": "Returns a list of your actions. The actions are returned sorted by creation date by default, with the most recent actions appearing first.",
                "method": "GET",
                "path": "/v2/actions",
                "request": {
                  "query-parameters": {
                    "action_type": {
                      "docs": "Will filter for actions with the specified name.",
                      "type": "optional<string>",
                    },
                    "ending_before": {
                      "docs": "A cursor for use in pagination, \`ending_before\` takes in an item key and the subsequent call will return the prior items in the list. This is mutually exclusive with \`starting_after\`.",
                      "type": "optional<string>",
                    },
                    "limit": {
                      "docs": "A limit on the number of items to be returned. Limits can range between 1 and 250, and the default is 10.",
                      "type": "optional<integer>",
                    },
                    "max_created": {
                      "docs": "Applies a maximum epoch timestamp (ms) filter to the response \`created_at\`.",
                      "type": "optional<integer>",
                    },
                    "max_updated": {
                      "docs": "Applies a maximum epoch timestamp (ms) filter to the response \`updated_at\`.",
                      "type": "optional<integer>",
                    },
                    "min_created": {
                      "docs": "Applies a minimum epoch timestamp (ms) filter to the response \`created_at\`.",
                      "type": "optional<integer>",
                    },
                    "min_updated": {
                      "docs": "Applies a minimum epoch timestamp (ms) filter to the response \`updated_at\`.",
                      "type": "optional<integer>",
                    },
                    "order_by": {
                      "docs": "The field in which the results are ordered by. A \`-\` prefix denotes that the results are in descending order.",
                      "type": "optional<string>",
                    },
                    "partnership_key": {
                      "docs": "Partnership key in which the results are filtered by.",
                      "type": "optional<string>",
                    },
                    "starting_after": {
                      "docs": "A cursor for use in pagination, \`starting_after\` takes in an item key and the subsequent call will return the following items in the list. This is mutually exclusive with \`ending_before\`.",
                      "type": "optional<string>",
                    },
                  },
                },
                "response": "_InlinedType82",
              },
              "_unnamedOperation10": {
                "display-name": "Archive an action",
                "docs": "Archives an action. Any associated rewards or drip rewards will be archived as well.",
                "method": "DELETE",
                "path": "/v2/actions/{action_key}",
                "path-parameters": {
                  "action_key": {
                    "docs": "Unique identifier for actions",
                    "type": "string",
                  },
                },
                "response": "_InlinedType89",
              },
              "_unnamedOperation9": {
                "display-name": "Record action",
                "docs": "Records a new action taken by a given partner or customer, and the number of times that action was performed.",
                "method": "POST",
                "path": "/v2/actions",
                "request": {
                  "body": {
                    "extends": [
                      "_InlinedType83",
                    ],
                  },
                },
                "response": "_InlinedType88",
              },
            },
          },
        },
      },
      "types": {
        "_InlinedType76": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": "optional<integer>",
            "key": "optional<string>",
            "updated_at": "optional<integer>",
          },
        },
        "_InlinedType77": {
          "docs": "An **Action** represents a specific action a partner or customer took on your platform",
          "extends": undefined,
          "properties": {
            "archived": "optional<boolean>",
            "company": "optional<_InlinedType78>",
            "customer": "optional<_InlinedType79>",
            "partnership_key": "optional<string>",
            "type": "optional<string>",
            "value": "optional<integer>",
          },
        },
        "_InlinedType80": {
          "extends": [
            "_InlinedType76",
            "_InlinedType77",
          ],
        },
        "_InlinedType81": {
          "extends": undefined,
          "properties": {
            "has_more": "optional<boolean>",
            "items": "optional<list<_InlinedType80>>",
            "total": "optional<integer>",
          },
        },
        "_InlinedType82": {
          "extends": undefined,
          "properties": {
            "data": "_InlinedType81",
            "message": "string",
            "status": "integer",
          },
        },
        "_InlinedType83": {
          "docs": "**Actions** represent a specific action a partner or customer took on your platform",
          "extends": undefined,
          "properties": {
            "external_key": "optional<string>",
            "target_key": "optional<string>",
            "target_type": "optional<string>",
            "type": "optional<string>",
            "value": "optional<integer>",
          },
        },
        "_InlinedType85": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": "optional<integer>",
            "key": "optional<string>",
            "updated_at": "optional<integer>",
          },
        },
        "_InlinedType86": {
          "docs": "**Actions** represent a specific action a partner or customer took on your platform",
          "extends": undefined,
          "properties": {
            "external_key": "optional<string>",
            "target_key": "optional<string>",
            "target_type": "optional<string>",
            "type": "optional<string>",
            "value": "optional<integer>",
          },
        },
        "_InlinedType87": {
          "extends": [
            "_InlinedType85",
            "_InlinedType86",
          ],
        },
        "_InlinedType88": {
          "extends": undefined,
          "properties": {
            "data": "_InlinedType87",
            "message": "string",
            "status": "integer",
          },
        },
        "_InlinedType89": {
          "extends": undefined,
          "properties": {
            "message": "string",
            "status": "integer",
          },
        },
      },
    },
    "applications.yml": {
      "services": {
        "http": {
          "ApplicationsService": {
            "auth": true,
            "base-path": "",
            "endpoints": {
              "": {
                "display-name": "Bulk Decision Applications",
                "docs": "Update the decision of the given Applications provided",
                "method": "PATCH",
                "path": "/v2/applications/decision",
                "request": {
                  "body": {
                    "extends": undefined,
                    "properties": {
                      "application_keys": "optional<list<unknown>>",
                      "approved": "optional<boolean>",
                      "decline_reason": "optional<string>",
                      "group_id_override": "optional<integer>",
                    },
                  },
                },
                "response": "_InlinedType95",
              },
              "_unnamedOperation11": {
                "display-name": "Decision an Application",
                "docs": "Update the decision of the given Application",
                "method": "PATCH",
                "path": "/v2/applications/{application_key}/decision",
                "path-parameters": {
                  "application_key": {
                    "docs": "The key of the application we're applying a decision to",
                    "type": "string",
                  },
                },
                "request": {
                  "body": {
                    "extends": undefined,
                    "properties": {
                      "approved": "optional<boolean>",
                      "decline_reason": "optional<string>",
                      "group_id_override": "optional<integer>",
                      "group_key_override": "optional<string>",
                    },
                  },
                },
                "response": "_InlinedType100",
              },
            },
          },
        },
      },
      "types": {
        "_InlinedType100": {
          "extends": undefined,
          "properties": {
            "data": "_InlinedType99",
            "message": "string",
            "status": "integer",
          },
        },
        "_InlinedType90": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": "optional<integer>",
            "key": "optional<string>",
            "updated_at": "optional<integer>",
          },
        },
        "_InlinedType91": {
          "docs": "Applications represent partnerstack partners attempting to join vendor programs via public form",
          "extends": undefined,
          "properties": {
            "actioned_by": "optional<string>",
            "approved": "optional<boolean>",
            "content": "optional<_InlinedType92>",
            "decline_reason": "optional<string>",
            "flag_reasons": "optional<list<unknown>>",
            "fraud_flagged": "optional<boolean>",
            "group_name": "optional<string>",
            "team_blocked": "optional<boolean>",
            "team_key": "optional<string>",
            "team_name": "optional<string>",
          },
        },
        "_InlinedType93": {
          "extends": [
            "_InlinedType90",
            "_InlinedType91",
          ],
        },
        "_InlinedType94": {
          "extends": undefined,
          "properties": {
            "items": "optional<list<_InlinedType93>>",
          },
        },
        "_InlinedType95": {
          "extends": undefined,
          "properties": {
            "data": "_InlinedType94",
            "message": "string",
            "status": "integer",
          },
        },
        "_InlinedType96": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": "optional<integer>",
            "key": "optional<string>",
            "updated_at": "optional<integer>",
          },
        },
        "_InlinedType97": {
          "docs": "Applications represent partnerstack partners attempting to join vendor programs via public form",
          "extends": undefined,
          "properties": {
            "actioned_by": "optional<string>",
            "approved": "optional<boolean>",
            "content": "optional<_InlinedType98>",
            "decline_reason": "optional<string>",
            "flag_reasons": "optional<list<unknown>>",
            "fraud_flagged": "optional<boolean>",
            "group_name": "optional<string>",
            "team_blocked": "optional<boolean>",
            "team_key": "optional<string>",
            "team_name": "optional<string>",
          },
        },
        "_InlinedType99": {
          "extends": [
            "_InlinedType96",
            "_InlinedType97",
          ],
        },
      },
    },
    "commons.yml": {},
    "customers.yml": {
      "services": {
        "http": {
          "CustomersService": {
            "auth": true,
            "base-path": "",
            "endpoints": {
              "": {
                "display-name": "List all customers",
                "docs": "Returns a list of your customers. The customers are returned sorted by creation date by default, with the most recent customers appearing first.",
                "method": "GET",
                "path": "/v2/customers",
                "request": {
                  "query-parameters": {
                    "ending_before": {
                      "docs": "A cursor for use in pagination, \`ending_before\` takes in an item key and the subsequent call will return the prior items in the list. This is mutually exclusive with \`starting_after\`.",
                      "type": "optional<string>",
                    },
                    "group": {
                      "docs": "Will filter for partnerships who are in a group with the specified name. Name must have spaces and special characters removed.",
                      "type": "optional<string>",
                    },
                    "limit": {
                      "docs": "A limit on the number of items to be returned. Limits can range between 1 and 250, and the default is 10.",
                      "type": "optional<integer>",
                    },
                    "max_created": {
                      "docs": "Applies a maximum epoch timestamp (ms) filter to the response \`created_at\`.",
                      "type": "optional<integer>",
                    },
                    "max_updated": {
                      "docs": "Applies a maximum epoch timestamp (ms) filter to the response \`updated_at\`.",
                      "type": "optional<integer>",
                    },
                    "min_created": {
                      "docs": "Applies a minimum epoch timestamp (ms) filter to the response \`created_at\`.",
                      "type": "optional<integer>",
                    },
                    "min_updated": {
                      "docs": "Applies a minimum epoch timestamp (ms) filter to the response \`updated_at\`.",
                      "type": "optional<integer>",
                    },
                    "partner_key": {
                      "docs": "Will filter to a specific partnership's \`partner_key\`, which can be found using the partnership's get endpoint or from the partnership view in your PartnerStack dashboard.",
                      "type": "optional<string>",
                    },
                    "starting_after": {
                      "docs": "A cursor for use in pagination, \`starting_after\` takes in an item key and the subsequent call will return the following items in the list. This is mutually exclusive with \`ending_before\`.",
                      "type": "optional<string>",
                    },
                  },
                },
                "response": "_InlinedType108",
              },
              "_unnamedOperation12": {
                "display-name": "Create a customer",
                "docs": "Creates a new customer with the data provided.",
                "method": "POST",
                "path": "/v2/customers",
                "request": {
                  "body": {
                    "extends": [
                      "_InlinedType109",
                      "_InlinedType110",
                    ],
                  },
                },
                "response": "_InlinedType118",
              },
              "_unnamedOperation13": {
                "display-name": "Retrieve a customer",
                "docs": "Gets a customer with a given customer key.",
                "method": "GET",
                "path": "/v2/customers/{customer_key}",
                "path-parameters": {
                  "customer_key": {
                    "docs": "Unique identifier for customers. This is the same as the \`customer_key\` that can be assigned using PartnerStackJS.",
                    "type": "string",
                  },
                },
                "response": "_InlinedType125",
              },
              "_unnamedOperation14": {
                "display-name": "Delete a customer",
                "docs": "Deletes a customer with a given customer key.",
                "method": "DELETE",
                "path": "/v2/customers/{customer_key}",
                "path-parameters": {
                  "customer_key": {
                    "docs": "Unique identifier for customers. This is the same as the \`customer_key\` that can be assigned using PartnerStackJS.",
                    "type": "string",
                  },
                },
                "response": "_InlinedType127",
              },
              "_unnamedOperation15": {
                "display-name": "Update a customer",
                "docs": "Updates a customer with the data provided. Any parameters not passed will not be updated.",
                "method": "PATCH",
                "path": "/v2/customers/{customer_key}",
                "path-parameters": {
                  "customer_key": {
                    "docs": "Unique identifier for customers. This is the same as the \`customer_key\` that can be assigned using PartnerStackJS.",
                    "type": "string",
                  },
                },
                "request": {
                  "body": {
                    "extends": undefined,
                    "properties": {
                      "customer_key": "optional<string>",
                      "email": "optional<string>",
                      "name": "optional<string>",
                      "provider_key": "optional<string>",
                    },
                  },
                },
                "response": "_InlinedType134",
              },
            },
          },
        },
      },
      "types": {
        "_InlinedType101": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": "optional<integer>",
            "key": "optional<string>",
            "updated_at": "optional<integer>",
          },
        },
        "_InlinedType102": {
          "docs": "**Customers** represent the users who have been referred by a **Partner**.

**Customers** are linked to the **Partner** that referred them through a **partner_key** which must be provided on the Create Customer endpoint.

The **partner_key** is retrievable from \`growsumo.data.partner_key\`, which is created by the \`PartnerStackJS\` snippet.",
          "extends": [
            "_InlinedType103",
            "_InlinedType104",
          ],
        },
        "_InlinedType106": {
          "extends": [
            "_InlinedType101",
            "_InlinedType102",
          ],
        },
        "_InlinedType107": {
          "extends": undefined,
          "properties": {
            "has_more": "optional<boolean>",
            "items": "optional<list<_InlinedType106>>",
            "total": "optional<integer>",
          },
        },
        "_InlinedType108": {
          "extends": undefined,
          "properties": {
            "data": "_InlinedType107",
            "message": "string",
            "status": "integer",
          },
        },
        "_InlinedType109": {
          "extends": undefined,
          "properties": {
            "customer_key": "optional<string>",
            "email": "optional<string>",
            "name": "optional<string>",
            "provider_key": "optional<string>",
          },
        },
        "_InlinedType110": {
          "extends": undefined,
          "properties": {
            "partner_key": "optional<string>",
          },
        },
        "_InlinedType112": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": "optional<integer>",
            "key": "optional<string>",
            "updated_at": "optional<integer>",
          },
        },
        "_InlinedType113": {
          "docs": "**Customers** represent the users who have been referred by a **Partner**.

**Customers** are linked to the **Partner** that referred them through a **partner_key** which must be provided on the Create Customer endpoint.

The **partner_key** is retrievable from \`growsumo.data.partner_key\`, which is created by the \`PartnerStackJS\` snippet.",
          "extends": [
            "_InlinedType114",
            "_InlinedType115",
          ],
        },
        "_InlinedType117": {
          "extends": [
            "_InlinedType112",
            "_InlinedType113",
          ],
        },
        "_InlinedType118": {
          "extends": undefined,
          "properties": {
            "data": "_InlinedType117",
            "message": "string",
            "status": "integer",
          },
        },
        "_InlinedType119": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": "optional<integer>",
            "key": "optional<string>",
            "updated_at": "optional<integer>",
          },
        },
        "_InlinedType120": {
          "docs": "**Customers** represent the users who have been referred by a **Partner**.

**Customers** are linked to the **Partner** that referred them through a **partner_key** which must be provided on the Create Customer endpoint.

The **partner_key** is retrievable from \`growsumo.data.partner_key\`, which is created by the \`PartnerStackJS\` snippet.",
          "extends": [
            "_InlinedType121",
            "_InlinedType122",
          ],
        },
        "_InlinedType124": {
          "extends": [
            "_InlinedType119",
            "_InlinedType120",
          ],
        },
        "_InlinedType125": {
          "extends": undefined,
          "properties": {
            "data": "_InlinedType124",
            "message": "string",
            "status": "integer",
          },
        },
        "_InlinedType126": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": "optional<integer>",
            "key": "optional<string>",
            "updated_at": "optional<integer>",
          },
        },
        "_InlinedType127": {
          "extends": undefined,
          "properties": {
            "data": "_InlinedType126",
            "message": "string",
            "status": "integer",
          },
        },
        "_InlinedType128": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": "optional<integer>",
            "key": "optional<string>",
            "updated_at": "optional<integer>",
          },
        },
        "_InlinedType129": {
          "docs": "**Customers** represent the users who have been referred by a **Partner**.

**Customers** are linked to the **Partner** that referred them through a **partner_key** which must be provided on the Create Customer endpoint.

The **partner_key** is retrievable from \`growsumo.data.partner_key\`, which is created by the \`PartnerStackJS\` snippet.",
          "extends": [
            "_InlinedType130",
            "_InlinedType131",
          ],
        },
        "_InlinedType133": {
          "extends": [
            "_InlinedType128",
            "_InlinedType129",
          ],
        },
        "_InlinedType134": {
          "extends": undefined,
          "properties": {
            "data": "_InlinedType133",
            "message": "string",
            "status": "integer",
          },
        },
      },
    },
    "deals.yml": {
      "services": {
        "http": {
          "DealsService": {
            "auth": true,
            "base-path": "",
            "endpoints": {
              "": {
                "display-name": "Assign partnership to deal",
                "docs": "Assign the provided partnership to the provided deal.",
                "method": "POST",
                "path": "/deals/{deal_key}/assignment/{partnership_key}/{stack_key}",
                "path-parameters": {
                  "deal_key": {
                    "docs": "Unique identifier of the deal",
                    "type": "string",
                  },
                  "partnership_key": {
                    "docs": "Unique identifier of the partnership",
                    "type": "string",
                  },
                  "stack_key": {
                    "docs": "Personal stack key",
                    "type": "string",
                  },
                },
                "response": "_InlinedType0",
              },
              "_unnamedOperation0": {
                "display-name": "Get deal file",
                "docs": "Get the file for the deal.",
                "method": "GET",
                "path": "/deals/{deal_key}/file/{file_key}",
                "path-parameters": {
                  "deal_key": {
                    "docs": "Unique identifier of the deal",
                    "type": "string",
                  },
                  "file_key": {
                    "docs": "Unique identifier of the file",
                    "type": "string",
                  },
                },
                "response": "_InlinedType2",
              },
              "_unnamedOperation1": {
                "display-name": "List all deals",
                "docs": "Returns a list of your deals. The deals are
    returned sorted by creation date, with the most recent deals
    appearing first.",
                "method": "GET",
                "path": "/v2/deals",
                "request": {
                  "query-parameters": {
                    "ending_before": {
                      "docs": "A cursor for use in pagination, \`ending_before\` takes in an item key and the subsequent call will return the prior items in the list. This is mutually exclusive with \`starting_after\`.",
                      "type": "optional<string>",
                    },
                    "group": {
                      "docs": "Will filter for partnerships who are in a group with the specified name. Name must have spaces and special characters removed.",
                      "type": "optional<string>",
                    },
                    "limit": {
                      "docs": "A limit on the number of items to be returned. Limits can range between 1 and 250, and the default is 10.",
                      "type": "optional<integer>",
                    },
                    "max_created": {
                      "docs": "Applies a maximum epoch timestamp (ms) filter to the response \`created_at\`.",
                      "type": "optional<integer>",
                    },
                    "max_updated": {
                      "docs": "Applies a maximum epoch timestamp (ms) filter to the response \`updated_at\`.",
                      "type": "optional<integer>",
                    },
                    "min_created": {
                      "docs": "Applies a minimum epoch timestamp (ms) filter to the response \`created_at\`.",
                      "type": "optional<integer>",
                    },
                    "min_updated": {
                      "docs": "Applies a minimum epoch timestamp (ms) filter to the response \`updated_at\`.",
                      "type": "optional<integer>",
                    },
                    "partner_key": {
                      "docs": "Will filter to a specific partnership's \`partner_key\`, which can be found using the partnership's get endpoint or from the partnership view in your PartnerStack dashboard.",
                      "type": "optional<string>",
                    },
                    "starting_after": {
                      "docs": "A cursor for use in pagination, \`starting_after\` takes in an item key and the subsequent call will return the following items in the list. This is mutually exclusive with \`ending_before\`.",
                      "type": "optional<string>",
                    },
                  },
                },
                "response": "_InlinedType14",
              },
              "_unnamedOperation2": {
                "display-name": "Create a deal",
                "docs": "Creates a deal with desired params.",
                "method": "POST",
                "path": "/v2/deals",
                "request": {
                  "body": {
                    "extends": [
                      "_InlinedType15",
                    ],
                  },
                },
                "response": "_InlinedType27",
              },
              "_unnamedOperation3": {
                "display-name": "Retrieve the form templates for a deal",
                "docs": "Fetches the specified form templates for a deal.",
                "method": "GET",
                "path": "/v2/deals/form-templates",
                "request": {
                  "query-parameters": {
                    "group_key": "optional<string>",
                    "mold_key": "optional<string>",
                    "partner_key": "optional<string>",
                  },
                },
                "response": "_InlinedType35",
              },
              "_unnamedOperation4": {
                "display-name": "Retrieve a deal",
                "docs": "Retrieves the details of an existing deal. You need only supply the unique deal key that was returned upon deal creation.",
                "method": "GET",
                "path": "/v2/deals/{deal_key}",
                "path-parameters": {
                  "deal_key": {
                    "docs": "Unique identifier of deal. Can be \`external_key\`, if one configured for deal.",
                    "type": "string",
                  },
                },
                "response": "_InlinedType46",
              },
              "_unnamedOperation5": {
                "display-name": "Archive a deal",
                "docs": "Archives the specified deal",
                "method": "DELETE",
                "path": "/v2/deals/{deal_key}",
                "path-parameters": {
                  "deal_key": {
                    "docs": "Unique identifier of deal.",
                    "type": "string",
                  },
                },
                "response": "_InlinedType47",
              },
              "_unnamedOperation6": {
                "display-name": "Update a deal",
                "docs": "Updates the specified deal by setting the values of
    the parameters passed. Any parameters not provided will be left
    unchanged.",
                "method": "PATCH",
                "path": "/v2/deals/{deal_key}",
                "path-parameters": {
                  "deal_key": {
                    "docs": "Unique identifier of deal. Can be \`external_key\`, if one configured for deal.",
                    "type": "string",
                  },
                },
                "request": {
                  "body": {
                    "docs": "**Deals** allow your partners to submit accounts they are working to your sales team to avoid channel conflicts and earn commissions for closed accounts.

Typically the Deals experience is handled through a CRM integration like Salesforce. However you may opt to use the Deals API to have PartnerStack interact with a custom data warehouse rather than directly with your CRM.",
                    "extends": undefined,
                    "properties": {
                      "account_name": "optional<string>",
                      "amount": "optional<integer>",
                      "close_date": "optional<string>",
                      "contact_first_name": "optional<string>",
                      "contact_last_name": "optional<string>",
                      "external_key": "optional<string>",
                      "fields": "optional<list<_InlinedType48>>",
                      "group_key": "optional<string>",
                      "lost_reason": "optional<string>",
                      "mold_key": "optional<string>",
                      "partner_key": "optional<string>",
                      "source": "optional<string>",
                      "stage": "optional<string>",
                      "team": "optional<_InlinedType51>",
                      "team_member": "optional<_InlinedType54>",
                    },
                  },
                },
                "response": "_InlinedType65",
              },
              "_unnamedOperation7": {
                "display-name": "Convert a deal",
                "docs": "Converts a deal to a customer",
                "method": "POST",
                "path": "/v2/deals/{deal_key}/convert",
                "path-parameters": {
                  "deal_key": {
                    "docs": "Unique identifier of deal.",
                    "type": "string",
                  },
                },
                "request": {
                  "body": {
                    "extends": undefined,
                    "properties": {
                      "customer_key": "optional<string>",
                      "email": "string",
                    },
                  },
                },
                "response": "_InlinedType72",
              },
              "_unnamedOperation8": {
                "display-name": "Get files attached to a deal",
                "docs": "Gets the files attached to the specified deal",
                "method": "GET",
                "path": "/v2/deals/{deal_key}/files",
                "path-parameters": {
                  "deal_key": {
                    "docs": "Unique identifier of the deal",
                    "type": "string",
                  },
                },
                "response": "_InlinedType75",
              },
            },
          },
        },
      },
      "types": {
        "_InlinedType0": {
          "extends": undefined,
          "properties": {
            "message": "string",
            "status": "integer",
          },
        },
        "_InlinedType1": {
          "extends": undefined,
          "properties": {
            "url": "optional<string>",
          },
        },
        "_InlinedType12": {
          "extends": [
            "_InlinedType3",
            "_InlinedType4",
          ],
        },
        "_InlinedType13": {
          "extends": undefined,
          "properties": {
            "has_more": "optional<boolean>",
            "items": "optional<list<_InlinedType12>>",
          },
        },
        "_InlinedType14": {
          "extends": undefined,
          "properties": {
            "data": "_InlinedType13",
            "message": "string",
            "status": "integer",
          },
        },
        "_InlinedType15": {
          "extends": undefined,
          "properties": {
            "account_name": "string",
            "amount": "integer",
            "close_date": "string",
            "contact_first_name": "string",
            "contact_last_name": "string",
            "fields": "optional<list<_InlinedType16>>",
            "source": "optional<string>",
            "stage": "string",
          },
        },
        "_InlinedType17": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": "optional<integer>",
            "key": "optional<string>",
            "updated_at": "optional<integer>",
          },
        },
        "_InlinedType18": {
          "docs": "**Deals** allow your partners to submit accounts they are working to your sales team to avoid channel conflicts and earn commissions for closed accounts.

Typically the Deals experience is handled through a CRM integration like Salesforce. However you may opt to use the Deals API to have PartnerStack interact with a custom data warehouse rather than directly with your CRM.",
          "extends": undefined,
          "properties": {
            "account_name": "optional<string>",
            "amount": "optional<integer>",
            "close_date": "optional<string>",
            "contact_first_name": "optional<string>",
            "contact_last_name": "optional<string>",
            "external_key": "optional<string>",
            "fields": "optional<list<_InlinedType19>>",
            "group_key": "optional<string>",
            "lost_reason": "optional<string>",
            "mold_key": "optional<string>",
            "partner_key": "optional<string>",
            "source": "optional<string>",
            "stage": "optional<string>",
            "team": "optional<_InlinedType22>",
            "team_member": "optional<_InlinedType25>",
          },
        },
        "_InlinedType2": {
          "extends": undefined,
          "properties": {
            "data": "_InlinedType1",
            "message": "string",
            "status": "integer",
          },
        },
        "_InlinedType26": {
          "extends": [
            "_InlinedType17",
            "_InlinedType18",
          ],
        },
        "_InlinedType27": {
          "extends": undefined,
          "properties": {
            "data": "_InlinedType26",
            "message": "string",
            "status": "integer",
          },
        },
        "_InlinedType28": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": "optional<integer>",
            "key": "optional<string>",
            "updated_at": "optional<integer>",
          },
        },
        "_InlinedType29": {
          "docs": "**FormTemplates** are configurable on many of our supported objects. These forms act as a way to collect additional information on object create",
          "extends": undefined,
          "properties": {
            "description": "optional<string>",
            "fields": "optional<list<_InlinedType30>>",
            "groups": "optional<list<_InlinedType33>>",
            "name": "optional<string>",
            "title": "optional<string>",
            "type": "optional<string>",
          },
        },
        "_InlinedType3": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": "optional<integer>",
            "key": "optional<string>",
            "updated_at": "optional<integer>",
          },
        },
        "_InlinedType34": {
          "extends": [
            "_InlinedType28",
            "_InlinedType29",
          ],
        },
        "_InlinedType35": {
          "extends": undefined,
          "properties": {
            "data": "list<_InlinedType34>",
            "message": "string",
            "status": "integer",
          },
        },
        "_InlinedType36": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": "optional<integer>",
            "key": "optional<string>",
            "updated_at": "optional<integer>",
          },
        },
        "_InlinedType37": {
          "docs": "**Deals** allow your partners to submit accounts they are working to your sales team to avoid channel conflicts and earn commissions for closed accounts.

Typically the Deals experience is handled through a CRM integration like Salesforce. However you may opt to use the Deals API to have PartnerStack interact with a custom data warehouse rather than directly with your CRM.",
          "extends": undefined,
          "properties": {
            "account_name": "optional<string>",
            "amount": "optional<integer>",
            "close_date": "optional<string>",
            "contact_first_name": "optional<string>",
            "contact_last_name": "optional<string>",
            "external_key": "optional<string>",
            "fields": "optional<list<_InlinedType38>>",
            "group_key": "optional<string>",
            "lost_reason": "optional<string>",
            "mold_key": "optional<string>",
            "partner_key": "optional<string>",
            "source": "optional<string>",
            "stage": "optional<string>",
            "team": "optional<_InlinedType41>",
            "team_member": "optional<_InlinedType44>",
          },
        },
        "_InlinedType4": {
          "docs": "**Deals** allow your partners to submit accounts they are working to your sales team to avoid channel conflicts and earn commissions for closed accounts.

Typically the Deals experience is handled through a CRM integration like Salesforce. However you may opt to use the Deals API to have PartnerStack interact with a custom data warehouse rather than directly with your CRM.",
          "extends": undefined,
          "properties": {
            "account_name": "optional<string>",
            "amount": "optional<integer>",
            "close_date": "optional<string>",
            "contact_first_name": "optional<string>",
            "contact_last_name": "optional<string>",
            "external_key": "optional<string>",
            "fields": "optional<list<_InlinedType5>>",
            "group_key": "optional<string>",
            "lost_reason": "optional<string>",
            "mold_key": "optional<string>",
            "partner_key": "optional<string>",
            "source": "optional<string>",
            "stage": "optional<string>",
            "team": "optional<_InlinedType8>",
            "team_member": "optional<_InlinedType11>",
          },
        },
        "_InlinedType45": {
          "extends": [
            "_InlinedType36",
            "_InlinedType37",
          ],
        },
        "_InlinedType46": {
          "extends": undefined,
          "properties": {
            "data": "_InlinedType45",
            "message": "string",
            "status": "integer",
          },
        },
        "_InlinedType47": {
          "extends": undefined,
          "properties": {
            "message": "string",
            "status": "integer",
          },
        },
        "_InlinedType48": {
          "docs": "**FieldData** combines attributes about a field with its submitted value on target object",
          "extends": undefined,
          "properties": {
            "api_name": "optional<string>",
            "external_type": "optional<string>",
            "field_key": "optional<string>",
            "help_text": "optional<string>",
            "hidden": "optional<boolean>",
            "internal_name": "optional<string>",
            "name": "optional<string>",
            "placeholder_text": "optional<string>",
            "position": "optional<integer>",
            "required": "optional<boolean>",
            "type": "optional<string>",
          },
        },
        "_InlinedType49": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": "optional<integer>",
            "key": "optional<string>",
            "updated_at": "optional<integer>",
          },
        },
        "_InlinedType50": {
          "docs": "Details of team used in public API.",
          "extends": undefined,
          "properties": {
            "name": "optional<string>",
          },
        },
        "_InlinedType51": {
          "extends": [
            "_InlinedType49",
            "_InlinedType50",
          ],
        },
        "_InlinedType52": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": "optional<integer>",
            "key": "optional<string>",
            "updated_at": "optional<integer>",
          },
        },
        "_InlinedType53": {
          "docs": "Details of team member used in public API.",
          "extends": undefined,
          "properties": {
            "email": "optional<string>",
            "first_name": "optional<string>",
            "last_name": "optional<string>",
          },
        },
        "_InlinedType54": {
          "extends": [
            "_InlinedType52",
            "_InlinedType53",
          ],
        },
        "_InlinedType55": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": "optional<integer>",
            "key": "optional<string>",
            "updated_at": "optional<integer>",
          },
        },
        "_InlinedType56": {
          "docs": "**Deals** allow your partners to submit accounts they are working to your sales team to avoid channel conflicts and earn commissions for closed accounts.

Typically the Deals experience is handled through a CRM integration like Salesforce. However you may opt to use the Deals API to have PartnerStack interact with a custom data warehouse rather than directly with your CRM.",
          "extends": undefined,
          "properties": {
            "account_name": "optional<string>",
            "amount": "optional<integer>",
            "close_date": "optional<string>",
            "contact_first_name": "optional<string>",
            "contact_last_name": "optional<string>",
            "external_key": "optional<string>",
            "fields": "optional<list<_InlinedType57>>",
            "group_key": "optional<string>",
            "lost_reason": "optional<string>",
            "mold_key": "optional<string>",
            "partner_key": "optional<string>",
            "source": "optional<string>",
            "stage": "optional<string>",
            "team": "optional<_InlinedType60>",
            "team_member": "optional<_InlinedType63>",
          },
        },
        "_InlinedType64": {
          "extends": [
            "_InlinedType55",
            "_InlinedType56",
          ],
        },
        "_InlinedType65": {
          "extends": undefined,
          "properties": {
            "data": "_InlinedType64",
            "message": "string",
            "status": "integer",
          },
        },
        "_InlinedType66": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": "optional<integer>",
            "key": "optional<string>",
            "updated_at": "optional<integer>",
          },
        },
        "_InlinedType67": {
          "docs": "**Customers** represent the users who have been referred by a **Partner**.

**Customers** are linked to the **Partner** that referred them through a **partner_key** which must be provided on the Create Customer endpoint.

The **partner_key** is retrievable from \`growsumo.data.partner_key\`, which is created by the \`PartnerStackJS\` snippet.",
          "extends": [
            "_InlinedType68",
            "_InlinedType69",
          ],
        },
        "_InlinedType71": {
          "extends": [
            "_InlinedType66",
            "_InlinedType67",
          ],
        },
        "_InlinedType72": {
          "extends": undefined,
          "properties": {
            "data": "_InlinedType71",
            "message": "string",
            "status": "integer",
          },
        },
        "_InlinedType73": {
          "extends": undefined,
          "properties": {
            "field_key": "optional<string>",
            "key": "optional<string>",
            "name": "optional<string>",
          },
        },
        "_InlinedType74": {
          "extends": undefined,
          "properties": {
            "deal_files": "optional<list<_InlinedType73>>",
          },
        },
        "_InlinedType75": {
          "extends": undefined,
          "properties": {
            "data": "_InlinedType74",
            "message": "string",
            "status": "integer",
          },
        },
      },
    },
    "formTemplates.yml": {
      "services": {
        "http": {
          "FormTemplatesService": {
            "auth": true,
            "base-path": "",
            "endpoints": {
              "getFormTemplates": {
                "display-name": "List all form templates",
                "docs": "Returns a list of your form templates. The form templates are returned sorted by creation date, with the most recent form templates appearing first.",
                "method": "GET",
                "path": "/v2/form-templates",
                "request": {
                  "query-parameters": {
                    "ending_before": {
                      "docs": "A cursor for use in pagination, \`ending_before\` takes in an item key and the subsequent call will return the prior items in the list. This is mutually exclusive with \`starting_after\`.",
                      "type": "optional<string>",
                    },
                    "group": {
                      "docs": "Will filter for partnerships who are in a group with the specified name. Name must have spaces and special characters removed.",
                      "type": "optional<string>",
                    },
                    "limit": {
                      "docs": "A limit on the number of items to be returned. Limits can range between 1 and 250, and the default is 10.",
                      "type": "optional<integer>",
                    },
                    "max_created": {
                      "docs": "Applies a maximum epoch timestamp (ms) filter to the response \`created_at\`.",
                      "type": "optional<integer>",
                    },
                    "max_updated": {
                      "docs": "Applies a maximum epoch timestamp (ms) filter to the response \`updated_at\`.",
                      "type": "optional<integer>",
                    },
                    "min_created": {
                      "docs": "Applies a minimum epoch timestamp (ms) filter to the response \`created_at\`.",
                      "type": "optional<integer>",
                    },
                    "min_updated": {
                      "docs": "Applies a minimum epoch timestamp (ms) filter to the response \`updated_at\`.",
                      "type": "optional<integer>",
                    },
                    "mold_keys": {
                      "docs": "The keys of the molds to filter by. If empty, returns fields for all molds.",
                      "type": "optional<string>",
                    },
                    "starting_after": {
                      "docs": "A cursor for use in pagination, \`starting_after\` takes in an item key and the subsequent call will return the following items in the list. This is mutually exclusive with \`ending_before\`.",
                      "type": "optional<string>",
                    },
                    "target_type": {
                      "docs": "The molds' target type. If empty, filter by all types.",
                      "type": "optional<string>",
                    },
                  },
                },
                "response": "_InlinedType143",
              },
            },
          },
        },
      },
      "types": {
        "_InlinedType135": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": "optional<integer>",
            "key": "optional<string>",
            "updated_at": "optional<integer>",
          },
        },
        "_InlinedType136": {
          "docs": "**FormTemplates** are configurable on many of our supported objects. These forms act as a way to collect additional information on object create",
          "extends": undefined,
          "properties": {
            "description": "optional<string>",
            "fields": "optional<list<_InlinedType137>>",
            "groups": "optional<list<_InlinedType140>>",
            "name": "optional<string>",
            "title": "optional<string>",
            "type": "optional<string>",
          },
        },
        "_InlinedType141": {
          "extends": [
            "_InlinedType135",
            "_InlinedType136",
          ],
        },
        "_InlinedType142": {
          "extends": undefined,
          "properties": {
            "has_more": "optional<boolean>",
            "items": "optional<list<_InlinedType141>>",
          },
        },
        "_InlinedType143": {
          "extends": undefined,
          "properties": {
            "data": "_InlinedType142",
            "message": "string",
            "status": "integer",
          },
        },
      },
    },
    "groups.yml": {
      "services": {
        "http": {
          "GroupsService": {
            "auth": true,
            "base-path": "",
            "endpoints": {
              "": {
                "display-name": "List all groups",
                "docs": "Returns a list of your groups. The groups are returned sorted by creation date, with the most recent groups appearing first.",
                "method": "GET",
                "path": "/v2/groups",
                "request": {
                  "query-parameters": {
                    "ending_before": {
                      "docs": "A cursor for use in pagination, \`ending_before\` takes in an item key and the subsequent call will return the prior items in the list. This is mutually exclusive with \`starting_after\`.",
                      "type": "optional<string>",
                    },
                    "limit": {
                      "docs": "A limit on the number of items to be returned. Limits can range between 1 and 250, and the default is 10.",
                      "type": "optional<integer>",
                    },
                    "max_created": {
                      "docs": "Applies a maximum epoch timestamp (ms) filter to the response \`created_at\`.",
                      "type": "optional<integer>",
                    },
                    "max_updated": {
                      "docs": "Applies a maximum epoch timestamp (ms) filter to the response \`updated_at\`.",
                      "type": "optional<integer>",
                    },
                    "min_created": {
                      "docs": "Applies a minimum epoch timestamp (ms) filter to the response \`created_at\`.",
                      "type": "optional<integer>",
                    },
                    "min_updated": {
                      "docs": "Applies a minimum epoch timestamp (ms) filter to the response \`updated_at\`.",
                      "type": "optional<integer>",
                    },
                    "starting_after": {
                      "docs": "A cursor for use in pagination, \`starting_after\` takes in an item key and the subsequent call will return the following items in the list. This is mutually exclusive with \`ending_before\`.",
                      "type": "optional<string>",
                    },
                  },
                },
                "response": "_InlinedType148",
              },
            },
          },
        },
      },
      "types": {
        "_InlinedType144": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": "optional<integer>",
            "key": "optional<string>",
            "updated_at": "optional<integer>",
          },
        },
        "_InlinedType145": {
          "docs": "**Groups** are a way to segment partners within PartnerStack to selectively distribute access to things such as Campaigns, Marketing Assets, and Rewards",
          "extends": undefined,
          "properties": {
            "archived": "optional<boolean>",
            "default": "optional<boolean>",
            "name": "optional<string>",
            "slug": "optional<string>",
          },
        },
        "_InlinedType146": {
          "extends": [
            "_InlinedType144",
            "_InlinedType145",
          ],
        },
        "_InlinedType147": {
          "extends": undefined,
          "properties": {
            "has_more": "optional<boolean>",
            "items": "optional<list<_InlinedType146>>",
          },
        },
        "_InlinedType148": {
          "extends": undefined,
          "properties": {
            "data": "_InlinedType147",
            "message": "string",
            "status": "integer",
          },
        },
      },
    },
    "leads.yml": {
      "services": {
        "http": {
          "LeadsService": {
            "auth": true,
            "base-path": "",
            "endpoints": {
              "": {
                "display-name": "List all leads",
                "docs": "Returns a list of your leads. The leads are
    returned sorted by creation date, with the most recent leads
    appearing first.",
                "method": "GET",
                "path": "/v2/leads",
                "request": {
                  "query-parameters": {
                    "group": {
                      "docs": "Will filter for partnerships who are in a group with the specified name. Name must have spaces and special characters removed.",
                      "type": "optional<string>",
                    },
                    "max_created": {
                      "docs": "Applies a maximum epoch timestamp (ms) filter to the response \`created_at\`.",
                      "type": "optional<integer>",
                    },
                    "max_updated": {
                      "docs": "Applies a maximum epoch timestamp (ms) filter to the response \`updated_at\`.",
                      "type": "optional<integer>",
                    },
                    "min_created": {
                      "docs": "Applies a minimum epoch timestamp (ms) filter to the response \`created_at\`.",
                      "type": "optional<integer>",
                    },
                    "min_updated": {
                      "docs": "Applies a minimum epoch timestamp (ms) filter to the response \`updated_at\`.",
                      "type": "optional<integer>",
                    },
                    "partner_key": {
                      "docs": "Will filter to a specific partnership's \`partner_key\`, which can be found using the partnership's get endpoint or from the partnership view in your PartnerStack dashboard.",
                      "type": "optional<string>",
                    },
                  },
                },
                "response": "_InlinedType155",
              },
              "_unnamedOperation16": {
                "display-name": "Create a lead",
                "docs": "Creates a lead with desired params.",
                "method": "POST",
                "path": "/v2/leads",
                "request": {
                  "body": {
                    "extends": [
                      "_InlinedType156",
                    ],
                  },
                },
                "response": "_InlinedType164",
              },
              "_unnamedOperation17": {
                "display-name": "Retrieve the form templates for a lead",
                "docs": "Fetches the specified form templates for a lead.",
                "method": "GET",
                "path": "/v2/leads/form-templates",
                "request": {
                  "query-parameters": {
                    "group_key": "optional<string>",
                    "mold_key": "optional<string>",
                  },
                },
                "response": "_InlinedType172",
              },
              "_unnamedOperation18": {
                "display-name": "Retrieve a lead",
                "docs": "Retrieves the details of an existing
    lead. You need only supply the unique lead key that was returned
    upon lead creation.",
                "method": "GET",
                "path": "/v2/leads/{lead_key}",
                "path-parameters": {
                  "lead_key": {
                    "docs": "A unique key that identifies this lead. Can be either the lead's \`external_key\` or \`key\` value.",
                    "type": "string",
                  },
                },
                "response": "_InlinedType178",
              },
              "_unnamedOperation19": {
                "display-name": "Archive a lead",
                "docs": "Archives the specified lead.",
                "method": "DELETE",
                "path": "/v2/leads/{lead_key}",
                "path-parameters": {
                  "lead_key": {
                    "docs": "A unique key that identifies this lead. Can be either the lead's \`external_key\` or \`key\` value.",
                    "type": "string",
                  },
                },
                "response": "_InlinedType179",
              },
              "_unnamedOperation20": {
                "display-name": "Update a lead",
                "docs": "Updates the specified lead by setting the values
    of the parameters passed. Any parameters not provided will be left
    unchanged.",
                "method": "PATCH",
                "path": "/v2/leads/{lead_key}",
                "path-parameters": {
                  "lead_key": {
                    "docs": "A unique key that identifies this lead. Can be either the lead's \`external_key\` or \`key\` value.",
                    "type": "string",
                  },
                },
                "request": {
                  "body": {
                    "docs": "**Leads** are submitted by your partners to let your sales team know of potential accounts that they may wish to work. Partners may earn comission for qualified leads, or leads that eventually become closed accounts.",
                    "extends": undefined,
                    "properties": {
                      "amount": "optional<integer>",
                      "approved": "optional<boolean>",
                      "customer_key": "optional<string>",
                      "external_key": "optional<string>",
                      "fields": "optional<list<_InlinedType180>>",
                      "group_key": "optional<string>",
                      "meta": "optional<_InlinedType181>",
                      "mold_key": "optional<string>",
                      "partner_key": "optional<string>",
                      "status": "optional<string>",
                    },
                  },
                },
                "response": "_InlinedType187",
              },
              "_unnamedOperation21": {
                "display-name": "Convert a lead",
                "docs": "Converts a lead to a customer",
                "method": "POST",
                "path": "/v2/leads/{lead_key}/convert",
                "path-parameters": {
                  "lead_key": {
                    "docs": "A unique key that identifies this lead. Can be either the lead's \`external_key\` or \`key\` value.",
                    "type": "string",
                  },
                },
                "request": {
                  "body": {
                    "extends": undefined,
                    "properties": {
                      "customer_key": "optional<string>",
                      "email": "optional<string>",
                    },
                  },
                },
                "response": "_InlinedType194",
              },
            },
          },
        },
      },
      "types": {
        "_InlinedType149": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": "optional<integer>",
            "key": "optional<string>",
            "updated_at": "optional<integer>",
          },
        },
        "_InlinedType150": {
          "docs": "**Leads** are submitted by your partners to let your sales team know of potential accounts that they may wish to work. Partners may earn comission for qualified leads, or leads that eventually become closed accounts.",
          "extends": undefined,
          "properties": {
            "amount": "optional<integer>",
            "approved": "optional<boolean>",
            "customer_key": "optional<string>",
            "external_key": "optional<string>",
            "fields": "optional<list<_InlinedType151>>",
            "group_key": "optional<string>",
            "meta": "optional<_InlinedType152>",
            "mold_key": "optional<string>",
            "partner_key": "optional<string>",
            "status": "optional<string>",
          },
        },
        "_InlinedType153": {
          "extends": [
            "_InlinedType149",
            "_InlinedType150",
          ],
        },
        "_InlinedType154": {
          "extends": undefined,
          "properties": {
            "has_more": "optional<boolean>",
            "items": "optional<list<_InlinedType153>>",
          },
        },
        "_InlinedType155": {
          "extends": undefined,
          "properties": {
            "data": "_InlinedType154",
            "message": "string",
            "status": "integer",
          },
        },
        "_InlinedType156": {
          "docs": "**Leads** are submitted by your partners to let your sales team know of potential accounts that they may wish to work. Partners may earn comission for qualified leads, or leads that eventually become closed accounts.",
          "extends": undefined,
          "properties": {
            "amount": "optional<integer>",
            "approved": "optional<boolean>",
            "external_key": "string",
            "fields": "optional<list<_InlinedType157>>",
            "group_key": "optional<string>",
            "meta": "_InlinedType158",
            "mold_key": "optional<string>",
            "partner_key": "string",
            "status": "string",
          },
        },
        "_InlinedType159": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": "optional<integer>",
            "key": "optional<string>",
            "updated_at": "optional<integer>",
          },
        },
        "_InlinedType160": {
          "docs": "**Leads** are submitted by your partners to let your sales team know of potential accounts that they may wish to work. Partners may earn comission for qualified leads, or leads that eventually become closed accounts.",
          "extends": undefined,
          "properties": {
            "amount": "optional<integer>",
            "approved": "optional<boolean>",
            "customer_key": "optional<string>",
            "external_key": "optional<string>",
            "fields": "optional<list<_InlinedType161>>",
            "group_key": "optional<string>",
            "meta": "optional<_InlinedType162>",
            "mold_key": "optional<string>",
            "partner_key": "optional<string>",
            "status": "optional<string>",
          },
        },
        "_InlinedType163": {
          "extends": [
            "_InlinedType159",
            "_InlinedType160",
          ],
        },
        "_InlinedType164": {
          "extends": undefined,
          "properties": {
            "data": "_InlinedType163",
            "message": "string",
            "status": "integer",
          },
        },
        "_InlinedType165": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": "optional<integer>",
            "key": "optional<string>",
            "updated_at": "optional<integer>",
          },
        },
        "_InlinedType166": {
          "docs": "**FormTemplates** are configurable on many of our supported objects. These forms act as a way to collect additional information on object create",
          "extends": undefined,
          "properties": {
            "description": "optional<string>",
            "fields": "optional<list<_InlinedType167>>",
            "groups": "optional<list<_InlinedType170>>",
            "name": "optional<string>",
            "title": "optional<string>",
            "type": "optional<string>",
          },
        },
        "_InlinedType171": {
          "extends": [
            "_InlinedType165",
            "_InlinedType166",
          ],
        },
        "_InlinedType172": {
          "extends": undefined,
          "properties": {
            "data": "list<_InlinedType171>",
            "message": "string",
            "status": "integer",
          },
        },
        "_InlinedType173": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": "optional<integer>",
            "key": "optional<string>",
            "updated_at": "optional<integer>",
          },
        },
        "_InlinedType174": {
          "docs": "**Leads** are submitted by your partners to let your sales team know of potential accounts that they may wish to work. Partners may earn comission for qualified leads, or leads that eventually become closed accounts.",
          "extends": undefined,
          "properties": {
            "amount": "optional<integer>",
            "approved": "optional<boolean>",
            "customer_key": "optional<string>",
            "external_key": "optional<string>",
            "fields": "optional<list<_InlinedType175>>",
            "group_key": "optional<string>",
            "meta": "optional<_InlinedType176>",
            "mold_key": "optional<string>",
            "partner_key": "optional<string>",
            "status": "optional<string>",
          },
        },
        "_InlinedType177": {
          "extends": [
            "_InlinedType173",
            "_InlinedType174",
          ],
        },
        "_InlinedType178": {
          "extends": undefined,
          "properties": {
            "data": "_InlinedType177",
            "message": "string",
            "status": "integer",
          },
        },
        "_InlinedType179": {
          "extends": undefined,
          "properties": {
            "message": "string",
            "status": "integer",
          },
        },
        "_InlinedType180": {
          "docs": "**FieldData** combines attributes about a field with its submitted value on target object",
          "extends": undefined,
          "properties": {
            "api_name": "optional<string>",
            "external_type": "optional<string>",
            "field_key": "optional<string>",
            "help_text": "optional<string>",
            "hidden": "optional<boolean>",
            "internal_name": "optional<string>",
            "name": "optional<string>",
            "placeholder_text": "optional<string>",
            "position": "optional<integer>",
            "required": "optional<boolean>",
            "type": "optional<string>",
          },
        },
        "_InlinedType181": {
          "docs": "Key value pairs that store additional information about this lead. First and last name required. Other eligible keys are based on Lead forms created. Use the /leads/form-template to view field names",
          "extends": undefined,
          "properties": {
            "company": "optional<string>",
            "email": "optional<string>",
            "first_name": "optional<string>",
            "last_name": "optional<string>",
          },
        },
        "_InlinedType182": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": "optional<integer>",
            "key": "optional<string>",
            "updated_at": "optional<integer>",
          },
        },
        "_InlinedType183": {
          "docs": "**Leads** are submitted by your partners to let your sales team know of potential accounts that they may wish to work. Partners may earn comission for qualified leads, or leads that eventually become closed accounts.",
          "extends": undefined,
          "properties": {
            "amount": "optional<integer>",
            "approved": "optional<boolean>",
            "customer_key": "optional<string>",
            "external_key": "optional<string>",
            "fields": "optional<list<_InlinedType184>>",
            "group_key": "optional<string>",
            "meta": "optional<_InlinedType185>",
            "mold_key": "optional<string>",
            "partner_key": "optional<string>",
            "status": "optional<string>",
          },
        },
        "_InlinedType186": {
          "extends": [
            "_InlinedType182",
            "_InlinedType183",
          ],
        },
        "_InlinedType187": {
          "extends": undefined,
          "properties": {
            "data": "_InlinedType186",
            "message": "string",
            "status": "integer",
          },
        },
        "_InlinedType188": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": "optional<integer>",
            "key": "optional<string>",
            "updated_at": "optional<integer>",
          },
        },
        "_InlinedType189": {
          "docs": "**Customers** represent the users who have been referred by a **Partner**.

**Customers** are linked to the **Partner** that referred them through a **partner_key** which must be provided on the Create Customer endpoint.

The **partner_key** is retrievable from \`growsumo.data.partner_key\`, which is created by the \`PartnerStackJS\` snippet.",
          "extends": [
            "_InlinedType190",
            "_InlinedType191",
          ],
        },
        "_InlinedType193": {
          "extends": [
            "_InlinedType188",
            "_InlinedType189",
          ],
        },
        "_InlinedType194": {
          "extends": undefined,
          "properties": {
            "data": "_InlinedType193",
            "message": "string",
            "status": "integer",
          },
        },
      },
    },
    "marketplace.yml": {
      "services": {
        "http": {
          "MarketplaceService": {
            "auth": true,
            "base-path": "",
            "endpoints": {
              "": {
                "display-name": "List all programs",
                "docs": "Returns a list of all active marketplace-listed programs and their details. The programs are returned sorted by creation date by default, with the most recent programs appearing first.",
                "method": "GET",
                "path": "/v2/marketplace/programs",
                "request": {
                  "query-parameters": {
                    "category": {
                      "docs": "Marketplace category of the programs",
                      "type": "optional<string>",
                    },
                    "ending_before": {
                      "docs": "A cursor for use in pagination, \`ending_before\` takes in an item key and the subsequent call will return the prior items in the list. This is mutually exclusive with \`starting_after\`.",
                      "type": "optional<string>",
                    },
                    "limit": {
                      "docs": "A limit on the number of items to be returned. Limits can range between 1 and 250, and the default is 10.",
                      "type": "optional<integer>",
                    },
                    "max_created": {
                      "docs": "Applies a maximum epoch timestamp (ms) filter to the response \`created_at\`.",
                      "type": "optional<integer>",
                    },
                    "min_created": {
                      "docs": "Applies a minimum epoch timestamp (ms) filter to the response \`created_at\`.",
                      "type": "optional<integer>",
                    },
                    "starting_after": {
                      "docs": "A cursor for use in pagination, \`starting_after\` takes in an item key and the subsequent call will return the following items in the list. This is mutually exclusive with \`ending_before\`.",
                      "type": "optional<string>",
                    },
                  },
                },
                "response": "_InlinedType199",
              },
              "_unnamedOperation22": {
                "display-name": "Retrieve a marketplace program",
                "docs": "Retrieves a marketplace program given its program key.",
                "method": "GET",
                "path": "/v2/marketplace/programs/{company_key}",
                "path-parameters": {
                  "company_key": {
                    "docs": "Unique identifier of the program.",
                    "type": "string",
                  },
                },
                "response": "_InlinedType203",
              },
            },
          },
        },
      },
      "types": {
        "_InlinedType195": {
          "docs": "Returns a list of all marketplace-listed programs and their details",
          "extends": undefined,
          "properties": {
            "category": "optional<list<unknown>>",
            "country": "optional<string>",
            "created_at": "optional<integer>",
            "description": "optional<string>",
            "key": "optional<string>",
            "logo": "optional<string>",
            "name": "optional<string>",
            "offers": "optional<list<_InlinedType196>>",
            "website": "optional<string>",
          },
        },
        "_InlinedType197": {
          "extends": [
            "_InlinedType195",
          ],
        },
        "_InlinedType198": {
          "extends": undefined,
          "properties": {
            "has_more": "optional<boolean>",
            "items": "optional<list<_InlinedType197>>",
            "total": "optional<integer>",
          },
        },
        "_InlinedType199": {
          "extends": undefined,
          "properties": {
            "data": "_InlinedType198",
            "message": "string",
            "status": "integer",
          },
        },
        "_InlinedType200": {
          "docs": "Returns a list of all marketplace-listed programs and their details",
          "extends": undefined,
          "properties": {
            "category": "optional<list<unknown>>",
            "country": "optional<string>",
            "created_at": "optional<integer>",
            "description": "optional<string>",
            "key": "optional<string>",
            "logo": "optional<string>",
            "name": "optional<string>",
            "offers": "optional<list<_InlinedType201>>",
            "website": "optional<string>",
          },
        },
        "_InlinedType202": {
          "extends": [
            "_InlinedType200",
          ],
        },
        "_InlinedType203": {
          "extends": undefined,
          "properties": {
            "data": "_InlinedType202",
            "message": "string",
            "status": "integer",
          },
        },
      },
    },
    "partnerships.yml": {
      "services": {
        "http": {
          "PartnershipsService": {
            "auth": true,
            "base-path": "",
            "endpoints": {
              "": {
                "display-name": "List all partnerships",
                "docs": "Returns a list of your partnerships. The partnerships are returned sorted by creation date by default, with the most recent partnerships appearing first.",
                "method": "GET",
                "path": "/v2/partnerships",
                "request": {
                  "query-parameters": {
                    "email": {
                      "docs": "The email of the user with the partnership you're looking for.",
                      "type": "optional<string>",
                    },
                    "ending_before": {
                      "docs": "A cursor for use in pagination, \`ending_before\` takes in an item key and the subsequent call will return the prior items in the list. This is mutually exclusive with \`starting_after\`.",
                      "type": "optional<string>",
                    },
                    "group": {
                      "docs": "Will filter for partnerships who are in a group with the specified name. Name must have spaces and special characters removed.",
                      "type": "optional<string>",
                    },
                    "limit": {
                      "docs": "A limit on the number of items to be returned. Limits can range between 1 and 250, and the default is 10.",
                      "type": "optional<integer>",
                    },
                    "max_created": {
                      "docs": "Applies a maximum epoch timestamp (ms) filter to the response \`created_at\`.",
                      "type": "optional<integer>",
                    },
                    "max_updated": {
                      "docs": "Applies a maximum epoch timestamp (ms) filter to the response \`updated_at\`.",
                      "type": "optional<integer>",
                    },
                    "min_created": {
                      "docs": "Applies a minimum epoch timestamp (ms) filter to the response \`created_at\`.",
                      "type": "optional<integer>",
                    },
                    "min_updated": {
                      "docs": "Applies a minimum epoch timestamp (ms) filter to the response \`updated_at\`.",
                      "type": "optional<integer>",
                    },
                    "order_by": {
                      "docs": "The field in which the results are ordered by. A \`-\` prefix denotes that the results are in descending order.",
                      "type": "optional<string>",
                    },
                    "starting_after": {
                      "docs": "A cursor for use in pagination, \`starting_after\` takes in an item key and the subsequent call will return the following items in the list. This is mutually exclusive with \`ending_before\`.",
                      "type": "optional<string>",
                    },
                  },
                },
                "response": "_InlinedType213",
              },
              "_unnamedOperation23": {
                "display-name": "Create a partnership",
                "docs": "Creates a new partnership with the data provided.",
                "method": "POST",
                "path": "/v2/partnerships",
                "request": {
                  "body": {
                    "extends": [
                      "_InlinedType214",
                      "_InlinedType216",
                    ],
                  },
                },
                "response": "_InlinedType227",
              },
              "_unnamedOperation24": {
                "display-name": "Retrieve a partnership",
                "docs": "Retrieves the details of an existing partnership.",
                "method": "GET",
                "path": "/v2/partnerships/{partnership_key}",
                "path-parameters": {
                  "partnership_key": {
                    "docs": "Unique identifier of partnership. Can be \`partner_key\`, if one configured for partnership.",
                    "type": "string",
                  },
                },
                "response": "_InlinedType241",
              },
              "_unnamedOperation25": {
                "display-name": "Archive a partnership",
                "docs": "Archives a partnership.",
                "method": "DELETE",
                "path": "/v2/partnerships/{partnership_key}",
                "path-parameters": {
                  "partnership_key": {
                    "docs": "The specific internal key that identifies the partnership.",
                    "type": "string",
                  },
                },
                "response": "_InlinedType242",
              },
              "_unnamedOperation26": {
                "display-name": "Update a partnership",
                "docs": "Updates the specific partnership by setting the values of the parameters passed.",
                "method": "PATCH",
                "path": "/v2/partnerships/{partnership_key}",
                "path-parameters": {
                  "partnership_key": {
                    "docs": "The specific key for the partnership",
                    "type": "string",
                  },
                },
                "request": {
                  "body": {
                    "docs": "UpdateTarget",
                    "extends": undefined,
                    "properties": {
                      "fields": "optional<list<_InlinedType243>>",
                      "group_key": "optional<string>",
                      "manager_email": "optional<string>",
                      "tier_key": "optional<string>",
                    },
                  },
                },
                "response": "_InlinedType252",
              },
              "_unnamedOperation27": {
                "display-name": "Updates a partnership's tags",
                "docs": "Add or remove tags from the specified partnership.",
                "method": "PATCH",
                "path": "/v2/partnerships/{partnership_key}/tags",
                "path-parameters": {
                  "partnership_key": {
                    "docs": "The specific key for the partnership",
                    "type": "string",
                  },
                },
                "request": {
                  "body": {
                    "docs": "UpdateTagsForTarget",
                    "extends": undefined,
                    "properties": {
                      "add": "optional<list<string>>",
                      "remove": "optional<list<string>>",
                    },
                  },
                },
                "response": "_InlinedType264",
              },
            },
          },
        },
      },
      "types": {
        "_InlinedType204": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": "optional<integer>",
            "key": "optional<string>",
            "updated_at": "optional<integer>",
          },
        },
        "_InlinedType205": {
          "docs": "Partnerships represent companies that you are partnered with and promoting on PartnerStack",
          "extends": undefined,
          "properties": {
            "address": "optional<_InlinedType206>",
            "email": "optional<string>",
            "first_name": "optional<string>",
            "group": "optional<_InlinedType207>",
            "joined_at": "optional<integer>",
            "last_name": "optional<string>",
            "manager": "optional<_InlinedType208>",
            "partner_key": "optional<string>",
            "tags": "optional<list<string>>",
          },
        },
        "_InlinedType209": {
          "extends": undefined,
          "properties": {
            "team": "optional<_InlinedType210>",
          },
        },
        "_InlinedType211": {
          "extends": [
            "_InlinedType204",
            "_InlinedType205",
            "_InlinedType209",
          ],
        },
        "_InlinedType212": {
          "extends": undefined,
          "properties": {
            "has_more": "optional<boolean>",
            "items": "optional<list<_InlinedType211>>",
            "total": "optional<integer>",
          },
        },
        "_InlinedType213": {
          "extends": undefined,
          "properties": {
            "data": "_InlinedType212",
            "message": "string",
            "status": "integer",
          },
        },
        "_InlinedType214": {
          "docs": "**Partners** represent users on PartnerStack that will be promoting your company.",
          "extends": undefined,
          "properties": {
            "email": "optional<string>",
            "fields": "optional<list<_InlinedType215>>",
            "first_name": "optional<string>",
            "last_name": "optional<string>",
            "manager_email": "optional<string>",
            "manager_name": "optional<string>",
            "partner_key": "optional<string>",
            "tags": "optional<list<string>>",
          },
        },
        "_InlinedType216": {
          "extends": undefined,
          "properties": {
            "group_key": "optional<string>",
          },
        },
        "_InlinedType217": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": "optional<integer>",
            "key": "optional<string>",
            "updated_at": "optional<integer>",
          },
        },
        "_InlinedType218": {
          "extends": [
            "_InlinedType219",
            "_InlinedType221",
          ],
        },
        "_InlinedType226": {
          "extends": [
            "_InlinedType217",
            "_InlinedType218",
          ],
        },
        "_InlinedType227": {
          "extends": undefined,
          "properties": {
            "data": "_InlinedType226",
            "message": "string",
            "status": "integer",
          },
        },
        "_InlinedType228": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": "optional<integer>",
            "key": "optional<string>",
            "updated_at": "optional<integer>",
          },
        },
        "_InlinedType229": {
          "extends": [
            "_InlinedType230",
            "_InlinedType232",
          ],
        },
        "_InlinedType237": {
          "extends": undefined,
          "properties": {
            "address": "optional<_InlinedType238>",
            "team": "optional<_InlinedType239>",
          },
        },
        "_InlinedType240": {
          "extends": [
            "_InlinedType228",
            "_InlinedType229",
            "_InlinedType237",
          ],
        },
        "_InlinedType241": {
          "extends": undefined,
          "properties": {
            "data": "_InlinedType240",
            "message": "string",
            "status": "integer",
          },
        },
        "_InlinedType242": {
          "extends": undefined,
          "properties": {
            "message": "string",
            "status": "integer",
          },
        },
        "_InlinedType243": {
          "extends": undefined,
          "properties": {
            "api_name": "optional<string>",
          },
        },
        "_InlinedType244": {
          "docs": "**Partners** represent users on PartnerStack that will be promoting your company.",
          "extends": undefined,
          "properties": {
            "email": "optional<string>",
            "fields": "optional<list<_InlinedType245>>",
            "first_name": "optional<string>",
            "last_name": "optional<string>",
            "manager_email": "optional<string>",
            "manager_name": "optional<string>",
            "partner_key": "optional<string>",
            "tags": "optional<list<string>>",
          },
        },
        "_InlinedType246": {
          "extends": undefined,
          "properties": {
            "group": "optional<_InlinedType249>",
            "tier": "optional<_InlinedType250>",
          },
        },
        "_InlinedType251": {
          "extends": [
            "_InlinedType244",
            "_InlinedType246",
          ],
        },
        "_InlinedType252": {
          "extends": undefined,
          "properties": {
            "data": "_InlinedType251",
            "message": "string",
            "status": "integer",
          },
        },
        "_InlinedType253": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": "optional<integer>",
            "key": "optional<string>",
            "updated_at": "optional<integer>",
          },
        },
        "_InlinedType254": {
          "extends": [
            "_InlinedType255",
            "_InlinedType257",
          ],
        },
        "_InlinedType262": {
          "extends": [
            "_InlinedType253",
            "_InlinedType254",
          ],
        },
        "_InlinedType263": {
          "docs": "Response schema for the PatchUpdateTagsForPartnership endpoint",
          "extends": undefined,
          "properties": {
            "partnership": "optional<_InlinedType262>",
            "tags_added": "optional<list<string>>",
            "tags_not_found": "optional<list<string>>",
            "tags_removed": "optional<list<string>>",
          },
        },
        "_InlinedType264": {
          "extends": undefined,
          "properties": {
            "data": "_InlinedType263",
            "message": "string",
            "status": "integer",
          },
        },
      },
    },
    "rewards.yml": {
      "services": {
        "http": {
          "RewardsService": {
            "auth": true,
            "base-path": "",
            "endpoints": {
              "": {
                "display-name": "List all rewards",
                "docs": "Returns a list of your rewards. The rewards are returned sorted by creation date by default, with the most recent rewards appearing first.",
                "method": "GET",
                "path": "/v2/rewards",
                "request": {
                  "query-parameters": {
                    "customer_key": {
                      "docs": "Customer key in which the results are filtered by",
                      "type": "optional<string>",
                    },
                    "decline_reason": {
                      "docs": "Text that the decline_reason must contain",
                      "type": "optional<string>",
                    },
                    "description": {
                      "docs": "Text that the description must contain",
                      "type": "optional<string>",
                    },
                    "distinct_decline_reason": {
                      "docs": "Flag the returned results should have distinct decline reasons or not",
                      "type": "optional<boolean>",
                    },
                    "distinct_description": {
                      "docs": "Flag the returned results should have distinct descriptions or not",
                      "type": "optional<boolean>",
                    },
                    "empty_line_id": {
                      "docs": "Flag if drip rewards returned have a line_id (invoice) attached or not",
                      "type": "optional<boolean>",
                    },
                    "ending_before": {
                      "docs": "A cursor for use in pagination, \`ending_before\` takes in an item key and the subsequent call will return the prior items in the list. This is mutually exclusive with \`starting_after\`.",
                      "type": "optional<string>",
                    },
                    "exclude_drip_rewards": {
                      "docs": "Flag if drip rewards should be included into the results",
                      "type": "optional<string>",
                    },
                    "group_key": {
                      "docs": "Group key in which the results are filtered by",
                      "type": "optional<string>",
                    },
                    "hide_archived_rewards": {
                      "docs": "Flag to hide rewards that have been archived",
                      "type": "optional<boolean>",
                    },
                    "invoice_key": {
                      "docs": "Invoice key in which the results are filtered by",
                      "type": "optional<string>",
                    },
                    "invoiceable": {
                      "docs": "Flag if the returned results should have only pending and approved rewards which do not have an associated payment line.",
                      "type": "optional<boolean>",
                    },
                    "keywords": {
                      "docs": "Free keywords that will filter on the followingReward key, Customer name, Partner first name, Partner last name, Partner email, Partner key",
                      "type": "optional<string>",
                    },
                    "limit": {
                      "docs": "A limit on the number of items to be returned. Limits can range between 1 and 250, and the default is 10.",
                      "type": "optional<integer>",
                    },
                    "max_created": {
                      "docs": "Applies a maximum epoch timestamp (ms) filter to the response \`created_at\`.",
                      "type": "optional<integer>",
                    },
                    "min_created": {
                      "docs": "Applies a minimum epoch timestamp (ms) filter to the response \`created_at\`.",
                      "type": "optional<integer>",
                    },
                    "order_by": {
                      "docs": "The field in which the results are ordered by. A \`-\` prefix denotes that the results are in descending order.",
                      "type": "optional<string>",
                    },
                    "partnership_key": {
                      "docs": "Partnership key in which the results are filtered by.",
                      "type": "optional<string>",
                    },
                    "starting_after": {
                      "docs": "A cursor for use in pagination, \`starting_after\` takes in an item key and the subsequent call will return the following items in the list. This is mutually exclusive with \`ending_before\`.",
                      "type": "optional<string>",
                    },
                    "status": {
                      "docs": "The status of the rewards",
                      "type": "optional<string>",
                    },
                  },
                },
                "response": "_InlinedType280",
              },
              "_unnamedOperation28": {
                "display-name": "Create a reward",
                "docs": "Creates a new reward for a given target.",
                "method": "POST",
                "path": "/v2/rewards",
                "request": {
                  "body": {
                    "docs": "Reward is what the Partner earns.",
                    "extends": undefined,
                    "properties": {
                      "amount": "integer",
                      "description": "string",
                      "target": "_InlinedType281",
                    },
                  },
                },
                "response": "_InlinedType286",
              },
            },
          },
        },
      },
      "types": {
        "_InlinedType265": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": "optional<integer>",
            "key": "optional<string>",
            "updated_at": "optional<integer>",
          },
        },
        "_InlinedType266": {
          "extends": [
            "_InlinedType267",
            "_InlinedType268",
          ],
        },
        "_InlinedType278": {
          "extends": [
            "_InlinedType265",
            "_InlinedType266",
          ],
        },
        "_InlinedType279": {
          "extends": undefined,
          "properties": {
            "has_more": "optional<boolean>",
            "items": "optional<list<_InlinedType278>>",
            "total": "optional<integer>",
          },
        },
        "_InlinedType280": {
          "extends": undefined,
          "properties": {
            "data": "_InlinedType279",
            "message": "string",
            "status": "integer",
          },
        },
        "_InlinedType281": {
          "extends": undefined,
          "properties": {
            "key": "string",
            "type": "string",
          },
        },
        "_InlinedType282": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": "optional<integer>",
            "key": "optional<string>",
            "updated_at": "optional<integer>",
          },
        },
        "_InlinedType283": {
          "docs": "Reward is what the Partner earns.",
          "extends": undefined,
          "properties": {
            "amount": "integer",
            "description": "string",
            "target": "_InlinedType284",
          },
        },
        "_InlinedType285": {
          "extends": [
            "_InlinedType282",
            "_InlinedType283",
          ],
        },
        "_InlinedType286": {
          "extends": undefined,
          "properties": {
            "data": "_InlinedType285",
            "message": "string",
            "status": "integer",
          },
        },
      },
    },
    "transactions.yml": {
      "services": {
        "http": {
          "TransactionsService": {
            "auth": true,
            "base-path": "",
            "endpoints": {
              "": {
                "display-name": "List all transactions",
                "docs": "Returns a list of your transactions. The transactions are returned sorted by creation date, with the most recent transactions appearing first. ",
                "method": "GET",
                "path": "/v2/transactions",
                "request": {
                  "query-parameters": {
                    "customer_email": {
                      "docs": "Customer's email address.",
                      "type": "optional<string>",
                    },
                    "customer_external_key": {
                      "docs": "An external key that can be used to reference the customer.                 This is the same as the \`customer_key\` value used when creating the customer                 with PartnerStackJS.",
                      "type": "optional<string>",
                    },
                    "customer_key": {
                      "docs": "Key of customer who made the transaction.",
                      "type": "optional<string>",
                    },
                    "ending_before": {
                      "docs": "A cursor for use in pagination, \`ending_before\` takes in an item key and the subsequent call will return the prior items in the list. This is mutually exclusive with \`starting_after\`.",
                      "type": "optional<string>",
                    },
                    "limit": {
                      "docs": "A limit on the number of items to be returned. Limits can range between 1 and 250, and the default is 10.",
                      "type": "optional<integer>",
                    },
                    "starting_after": {
                      "docs": "A cursor for use in pagination, \`starting_after\` takes in an item key and the subsequent call will return the following items in the list. This is mutually exclusive with \`ending_before\`.",
                      "type": "optional<string>",
                    },
                  },
                },
                "response": "_InlinedType295",
              },
              "_unnamedOperation29": {
                "display-name": "Create a transaction",
                "docs": "Creates a new transaction

Note that \`customer_external_key\` or \`customer_email\` can be provided in
place of \`customer_key\` to reference the customer.

These customer reference fields are required, but mutually exclusive
(i.e. you must provide exactly and only one of the three).",
                "method": "POST",
                "path": "/v2/transactions",
                "request": {
                  "body": {
                    "extends": [
                      "_InlinedType296",
                    ],
                  },
                },
                "response": "_InlinedType307",
              },
            },
          },
        },
      },
      "types": {
        "_InlinedType287": {
          "docs": "Transaction",
          "extends": [
            "_InlinedType288",
            "_InlinedType289",
            "_InlinedType290",
          ],
        },
        "_InlinedType291": {
          "extends": undefined,
          "properties": {
            "approved": "optional<boolean>",
            "customer": "optional<_InlinedType292>",
          },
        },
        "_InlinedType293": {
          "docs": "Transaction",
          "extends": [
            "_InlinedType287",
            "_InlinedType291",
          ],
        },
        "_InlinedType294": {
          "extends": undefined,
          "properties": {
            "has_more": "optional<boolean>",
            "items": "optional<list<_InlinedType293>>",
            "total": "optional<integer>",
          },
        },
        "_InlinedType295": {
          "extends": undefined,
          "properties": {
            "data": "_InlinedType294",
            "message": "string",
            "status": "integer",
          },
        },
        "_InlinedType296": {
          "docs": "Transaction Base",
          "extends": undefined,
          "properties": {
            "amount": "optional<integer>",
            "category_key": "optional<string>",
            "currency": "optional<string>",
            "customer_key": "optional<string>",
            "key": "optional<string>",
            "product_key": "optional<string>",
          },
        },
        "_InlinedType299": {
          "docs": "Transaction",
          "extends": [
            "_InlinedType300",
            "_InlinedType304",
          ],
        },
        "_InlinedType306": {
          "extends": [
            "_InlinedType299",
          ],
        },
        "_InlinedType307": {
          "extends": undefined,
          "properties": {
            "data": "_InlinedType306",
            "message": "string",
            "status": "integer",
          },
        },
      },
    },
    "webhooks.yml": {
      "services": {
        "http": {
          "WebhooksService": {
            "auth": true,
            "base-path": "",
            "endpoints": {
              "": {
                "display-name": "List all webhooks",
                "docs": "Returns a list of your webhooks. The webhooks are
    returned sorted by creation date, with the most recent webhooks
    appearing first.",
                "method": "GET",
                "path": "/v2/webhooks",
                "request": {
                  "query-parameters": {
                    "ending_before": {
                      "docs": "A cursor for use in pagination, \`ending_before\` takes in an item key and the subsequent call will return the prior items in the list. This is mutually exclusive with \`starting_after\`.",
                      "type": "optional<string>",
                    },
                    "limit": {
                      "docs": "A limit on the number of items to be returned. Limits can range between 1 and 250, and the default is 10.",
                      "type": "optional<integer>",
                    },
                    "starting_after": {
                      "docs": "A cursor for use in pagination, \`starting_after\` takes in an item key and the subsequent call will return the following items in the list. This is mutually exclusive with \`ending_before\`.",
                      "type": "optional<string>",
                    },
                  },
                },
                "response": "_InlinedType312",
              },
              "_unnamedOperation30": {
                "display-name": "Create a webhook",
                "docs": "Webhooks deliver POST requests to the target URL when the specified events are triggered.",
                "method": "POST",
                "path": "/v2/webhooks",
                "request": {
                  "body": {
                    "extends": [
                      "_InlinedType313",
                    ],
                  },
                },
                "response": "_InlinedType318",
              },
              "_unnamedOperation31": {
                "display-name": "Retrieve a webhook",
                "docs": "Retrieves the details of an existing webhook. You
    need only supply the unique webhook key that was returned upon
    webhook creation.",
                "method": "GET",
                "path": "/v2/webhooks/{webhook_key}",
                "path-parameters": {
                  "webhook_key": {
                    "docs": "Unique identifier of a webhook.",
                    "type": "string",
                  },
                },
                "response": "_InlinedType322",
              },
              "_unnamedOperation32": {
                "display-name": "Archive a webhook",
                "docs": "Webhook events will no longer be delivered to the attached endpoints.",
                "method": "DELETE",
                "path": "/v2/webhooks/{webhook_key}",
                "path-parameters": {
                  "webhook_key": {
                    "docs": "Unique identifier of a webhook.",
                    "type": "string",
                  },
                },
                "response": "_InlinedType326",
              },
              "_unnamedOperation33": {
                "display-name": "Update a webhook",
                "docs": "Updates the specified webhook by setting the values of the parameters passed.",
                "method": "PATCH",
                "path": "/v2/webhooks/{webhook_key}",
                "path-parameters": {
                  "webhook_key": {
                    "docs": "Unique identifier of a webhook.",
                    "type": "string",
                  },
                },
                "request": {
                  "body": {
                    "extends": [
                      "_InlinedType327",
                    ],
                  },
                },
                "response": "_InlinedType332",
              },
            },
          },
        },
      },
      "types": {
        "_InlinedType308": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": "optional<integer>",
            "key": "optional<string>",
            "updated_at": "optional<integer>",
          },
        },
        "_InlinedType309": {
          "docs": "Webhook Base",
          "extends": undefined,
          "properties": {
            "events": "optional<list<string>>",
            "target_url": "optional<string>",
          },
        },
        "_InlinedType310": {
          "docs": "Webhook",
          "extends": [
            "_InlinedType308",
            "_InlinedType309",
          ],
        },
        "_InlinedType311": {
          "extends": undefined,
          "properties": {
            "has_more": "boolean",
            "items": "list<_InlinedType310>",
          },
        },
        "_InlinedType312": {
          "extends": undefined,
          "properties": {
            "data": "_InlinedType311",
            "message": "string",
            "status": "integer",
          },
        },
        "_InlinedType313": {
          "docs": "Webhook Base",
          "extends": undefined,
          "properties": {
            "events": "optional<list<string>>",
            "target_url": "optional<string>",
          },
        },
        "_InlinedType315": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": "optional<integer>",
            "key": "optional<string>",
            "updated_at": "optional<integer>",
          },
        },
        "_InlinedType316": {
          "docs": "Webhook Base",
          "extends": undefined,
          "properties": {
            "events": "optional<list<string>>",
            "target_url": "optional<string>",
          },
        },
        "_InlinedType317": {
          "docs": "Webhook",
          "extends": [
            "_InlinedType315",
            "_InlinedType316",
          ],
        },
        "_InlinedType318": {
          "extends": undefined,
          "properties": {
            "data": "_InlinedType317",
            "message": "string",
            "status": "integer",
          },
        },
        "_InlinedType319": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": "optional<integer>",
            "key": "optional<string>",
            "updated_at": "optional<integer>",
          },
        },
        "_InlinedType320": {
          "docs": "Webhook Base",
          "extends": undefined,
          "properties": {
            "events": "optional<list<string>>",
            "target_url": "optional<string>",
          },
        },
        "_InlinedType321": {
          "docs": "Webhook",
          "extends": [
            "_InlinedType319",
            "_InlinedType320",
          ],
        },
        "_InlinedType322": {
          "extends": undefined,
          "properties": {
            "data": "_InlinedType321",
            "message": "string",
            "status": "integer",
          },
        },
        "_InlinedType323": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": "optional<integer>",
            "key": "optional<string>",
            "updated_at": "optional<integer>",
          },
        },
        "_InlinedType324": {
          "docs": "Webhook Base",
          "extends": undefined,
          "properties": {
            "events": "optional<list<string>>",
            "target_url": "optional<string>",
          },
        },
        "_InlinedType325": {
          "docs": "Webhook",
          "extends": [
            "_InlinedType323",
            "_InlinedType324",
          ],
        },
        "_InlinedType326": {
          "extends": undefined,
          "properties": {
            "data": "_InlinedType325",
            "message": "string",
            "status": "integer",
          },
        },
        "_InlinedType327": {
          "docs": "Webhook Base",
          "extends": undefined,
          "properties": {
            "events": "optional<list<string>>",
            "target_url": "optional<string>",
          },
        },
        "_InlinedType329": {
          "docs": "Standard fields that are present on all database objects.",
          "extends": undefined,
          "properties": {
            "created_at": "optional<integer>",
            "key": "optional<string>",
            "updated_at": "optional<integer>",
          },
        },
        "_InlinedType330": {
          "docs": "Webhook Base",
          "extends": undefined,
          "properties": {
            "events": "optional<list<string>>",
            "target_url": "optional<string>",
          },
        },
        "_InlinedType331": {
          "docs": "Webhook",
          "extends": [
            "_InlinedType329",
            "_InlinedType330",
          ],
        },
        "_InlinedType332": {
          "extends": undefined,
          "properties": {
            "data": "_InlinedType331",
            "message": "string",
            "status": "integer",
          },
        },
      },
    },
  },
}
`;

exports[`open api converter rivet simple 1`] = `
{
  "rootApiFile": {
    "headers": {},
    "name": "api",
  },
  "serviceFiles": {
    "commons.yml": {
      "types": {
        "MatchmakerLobbyJoinInfo": {
          "docs": "A matchmaker lobby.",
          "extends": undefined,
          "properties": {
            "lobby_id": "string",
            "player": "MatchmakerLobbyJoinInfoPlayer",
            "ports": "MatchmakerLobbyJoinInfoPorts",
            "region": "MatchmakerLobbyJoinInfoRegion",
          },
        },
        "MatchmakerLobbyJoinInfoPlayer": {
          "docs": "A matchmaker lobby player.",
          "extends": undefined,
          "properties": {
            "token": "string",
          },
        },
        "MatchmakerLobbyJoinInfoRegion": {
          "docs": "A matchmaker lobby region.",
          "extends": undefined,
          "properties": {
            "display_name": "string",
            "region_id": "string",
          },
        },
      },
    },
    "lobby.yml": {
      "services": {
        "http": {
          "LobbyService": {
            "auth": true,
            "base-path": "",
            "endpoints": {
              "lobbyReady": {
                "display-name": undefined,
                "docs": "Marks the current lobby as ready to accept connections. Players will not be
able to connect to this lobby until the lobby is flagged as ready.",
                "method": "POST",
                "path": "/lobbies/ready",
              },
              "playerConnected": {
                "display-name": undefined,
                "docs": "Validates the player token is valid and has not already been consumed then
marks the player as connected.

# Player Tokens and Reserved Slots

Player tokens reserve a spot in the lobby until they expire. This allows for
precise matchmaking up to exactly the lobby's player limit, which is
important for games with small lobbies and a high influx of players.

By calling this endpoint with the player token, the player's spot is marked
as connected and will not expire. If this endpoint is never called, the
player's token will expire and this spot will be filled by another player.

# Anti-Botting

Player tokens are only issued by caling \`rivet.api.matchmaker#JoinLobby\`, calling \`rivet.api.matchmaker#FindLobby\`, or
from the \`rivet.api.identity.common#GlobalEventMatchmakerLobbyJoin\` event.
These endpoints have anti-botting measures (i.e. enforcing max player
limits, captchas, and detecting bots), so valid player tokens provide some
confidence that the player is not a bot.

Therefore, it's important to make sure the token is valid by waiting for
this endpoint to return OK before allowing the connected socket to do
anything else. If this endpoint returns an error, the socket should be
disconnected immediately.

# How to Transmit the Player Token

The client is responsible for acquiring the player token by caling
\`rivet.api.matchmaker#JoinLobby\`, calling \`rivet.api.matchmaker#FindLobby\`,
or from the \`rivet.api.identity.common#GlobalEventMatchmakerLobbyJoin\`
event.  Beyond that, it's up to the developer how the player token is
transmitted to the lobby.

If using WebSockets, the player token can be transmitted as a query
paramter.

Otherwise, the player token will likely be automatically sent by the client
once the socket opens. As mentioned above, nothing else should happen until
the player token is validated.",
                "method": "POST",
                "path": "/players/connected",
                "request": {
                  "body": "PlayerConnectedRequestContent",
                },
              },
              "playerDisconnected": {
                "display-name": undefined,
                "docs": "Marks a player as disconnected.

# Ghost Players

If players are not marked as disconnected, lobbies will result with "ghost
players" that the matchmaker thinks exist but are no longer connected to the
lobby.",
                "method": "POST",
                "path": "/players/disconnected",
                "request": {
                  "body": "PlayerDisconnectedRequestContent",
                },
              },
            },
          },
        },
      },
      "types": {
        "PlayerConnectedRequestContent": {
          "extends": undefined,
          "properties": {
            "player_token": "string",
          },
        },
        "PlayerDisconnectedRequestContent": {
          "extends": undefined,
          "properties": {
            "player_token": "string",
          },
        },
      },
    },
    "public.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "services": {
        "http": {
          "PublicService": {
            "auth": true,
            "base-path": "",
            "endpoints": {
              "findLobby": {
                "display-name": undefined,
                "docs": "Finds a lobby based on the given criteria.

If a lobby is not found and \`prevent_auto_create_lobby\` is \`true\`, a new lobby will be created.",
                "method": "POST",
                "path": "/lobbies/find",
                "request": {
                  "body": "FindLobbyRequestContent",
                  "headers": {
                    "origin": "optional<string>",
                  },
                },
                "response": "FindLobbyResponseContent",
              },
              "joinLobby": {
                "display-name": undefined,
                "docs": "Joins a specific lobby.

This request will use the direct player count configured for the lobby
group.",
                "method": "POST",
                "path": "/lobbies/join",
                "request": {
                  "body": "JoinLobbyRequestContent",
                },
                "response": "JoinLobbyResponseContent",
              },
              "listLobbies": {
                "display-name": undefined,
                "docs": "Lists all open lobbies.",
                "method": "GET",
                "path": "/lobbies/list",
                "response": "ListLobbiesResponseContent",
              },
              "listRegions": {
                "display-name": undefined,
                "docs": "Returns a list of regions available to this namespace.

Regions are sorted by most optimal to least optimal. The player's IP address
is used to calculate the regions' optimality.",
                "method": "GET",
                "path": "/regions",
                "response": "ListRegionsResponseContent",
              },
              "setLobbyClosed": {
                "display-name": undefined,
                "docs": "If \`is_closed\` is \`true\`, players will be prevented from joining the lobby.

Does not shutdown the lobby.",
                "method": "PUT",
                "path": "/lobbies/closed",
                "request": {
                  "body": "SetLobbyClosedRequestContent",
                },
              },
            },
          },
        },
      },
      "types": {
        "FindLobbyRequestContent": {
          "extends": undefined,
          "properties": {
            "captcha": "optional<commons.CaptchaConfig>",
            "game_modes": "list<string>",
            "prevent_auto_create_lobby": "optional<boolean>",
            "regions": "optional<list<string>>",
          },
        },
        "FindLobbyResponseContent": {
          "extends": undefined,
          "properties": {
            "lobby": "commons.MatchmakerLobbyJoinInfo",
          },
        },
        "JoinLobbyRequestContent": {
          "extends": undefined,
          "properties": {
            "captcha": "optional<commons.CaptchaConfig>",
            "lobby_id": "string",
          },
        },
        "JoinLobbyResponseContent": {
          "extends": undefined,
          "properties": {
            "lobby": "commons.MatchmakerLobbyJoinInfo",
          },
        },
        "ListLobbiesResponseContent": {
          "extends": undefined,
          "properties": {
            "game_modes": "list<commons.GameModeInfo>",
            "lobbies": "list<commons.LobbyInfo>",
            "regions": "list<commons.RegionInfo>",
          },
        },
        "ListRegionsResponseContent": {
          "extends": undefined,
          "properties": {
            "regions": "list<commons.RegionInfo>",
          },
        },
        "SetLobbyClosedRequestContent": {
          "extends": undefined,
          "properties": {
            "is_closed": "boolean",
          },
        },
      },
    },
  },
}
`;

exports[`open api converter suger simple 1`] = `
{
  "rootApiFile": {
    "headers": {},
    "name": "api",
  },
  "serviceFiles": {
    "apiAuth.yml": {
      "services": {
        "http": {
          "ApiAuthService": {
            "auth": true,
            "base-path": "",
            "endpoints": {
              "": {
                "display-name": "Get the Bearer Access Token to access Suger API",
                "docs": "Get the Bearer Access Token by giving the Suger API Client ID & Client Secret.",
                "method": "POST",
                "path": "/public/apiClient/accessToken",
                "request": {
                  "body": "shared.GetApiClientAccessTokenParams",
                },
                "response": "shared.ApiClientAccessToken",
              },
            },
          },
        },
      },
      "types": {
        "shared.ApiClientAccessToken": {
          "extends": undefined,
          "properties": {
            "access_token": "optional<string>",
            "expires_in": "optional<integer>",
            "token_type": "optional<string>",
          },
        },
        "shared.GetApiClientAccessTokenParams": {
          "extends": undefined,
          "properties": {
            "id": "string",
            "organizationID": "string",
            "secret": "string",
          },
        },
      },
    },
    "buyer.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "services": {
        "http": {
          "BuyerService": {
            "auth": true,
            "base-path": "",
            "endpoints": {
              "": {
                "display-name": "List all buyers under the organization",
                "docs": undefined,
                "method": "GET",
                "path": "/org/{orgId}/buyer",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                },
                "response": "list<commons.shared.IdentityBuyer>",
              },
              "_unnamedOperation7": {
                "display-name": "Get the buyer",
                "docs": undefined,
                "method": "GET",
                "path": "/org/{orgId}/buyer/{buyerId}",
                "path-parameters": {
                  "buyerId": {
                    "docs": "Buyer ID",
                    "type": "string",
                  },
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                },
                "response": "commons.shared.IdentityBuyer",
              },
              "_unnamedOperation8": {
                "display-name": "Update the name & description of the buyer",
                "docs": undefined,
                "method": "PATCH",
                "path": "/org/{orgId}/buyer/{buyerId}",
                "path-parameters": {
                  "buyerId": {
                    "docs": "Buyer ID",
                    "type": "string",
                  },
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                },
                "request": {
                  "body": "lib.UpdateBuyerNameDescriptionParams",
                },
                "response": "commons.shared.IdentityBuyer",
              },
            },
          },
        },
      },
      "types": {
        "lib.UpdateBuyerNameDescriptionParams": {
          "extends": undefined,
          "properties": {
            "description": "optional<string>",
            "id": "optional<string>",
            "name": "optional<string>",
            "organizationID": "optional<string>",
          },
        },
      },
    },
    "commons.yml": {
      "imports": {
        "Product": "Product.yml",
      },
      "types": {
        "partnercentersubmission.AzureProduct": {
          "extends": undefined,
          "properties": {
            "availabilities": "optional<list<partnercentersubmission.AzureProductAvailability>>",
            "branches": "optional<list<partnercentersubmission.AzureProductBranch>>",
            "externalIDs": "optional<list<partnercentersubmission.TypeValue>>",
            "id": "optional<string>",
            "isModularPublishing": "optional<boolean>",
            "listings": "optional<list<partnercentersubmission.AzureProductListing>>",
            "name": "optional<string>",
            "packageConfigurations": "optional<list<partnercentersubmission.AzureProductPackageConfiguration>>",
            "properties": "optional<list<partnercentersubmission.AzureProductProperty>>",
            "resourceType": "optional<string>",
            "setup": "optional<partnercentersubmission.AzureProductSetup>",
            "submissions": "optional<list<partnercentersubmission.AzureProductSubmission>>",
            "variants": "optional<list<partnercentersubmission.AzureProductVariant>>",
          },
        },
        "partnercentersubmission.AzureProductSetup": {
          "extends": undefined,
          "properties": {
            "callToAction": "optional<string>",
            "channelStates": "optional<list<partnercentersubmission.TypeValue>>",
            "enableTestDrive": "optional<boolean>",
            "resourceType": "optional<string>",
            "sellingOption": "optional<string>",
            "testDriveType": "optional<string>",
            "trialUri": "optional<string>",
          },
        },
        "partnercentersubmission.AzureProductVariant": {
          "extends": undefined,
          "properties": {
            "azureGovernmentCertifications": "optional<list<partnercentersubmission.AzureGovernmentCertification>>",
            "cloudAvailabilities": "optional<list<string>>",
            "conversionPaths": "optional<string>",
            "extendedProperties": "optional<list<partnercentersubmission.TypeValue>>",
            "externalID": "optional<string>",
            "featureAvailabilities": "optional<list<partnercentersubmission.AzureProductFeatureAvailability>>",
            "friendlyName": "optional<string>",
            "id": "optional<string>",
            "leadGenID": "optional<string>",
            "referenceVariantID": "optional<string>",
            "resourceType": "optional<string>",
            "state": "optional<string>",
          },
        },
        "shared.AwsAccountIdentifier": {
          "extends": undefined,
          "properties": {
            "awsAccountID": "optional<string>",
            "awsCustomerID": "optional<string>",
            "companyInfo": "optional<shared.CompanyInfo>",
            "dataFeedAccountID": "optional<string>",
          },
        },
        "shared.AwsIntegration": {
          "docs": "The data struct to store integration info for Suger service to access the client's AWS services.",
          "extends": undefined,
          "properties": {
            "externalID": "optional<string>",
            "iamRoleArn": "optional<string>",
            "marketplaceStartDate": "optional<string>",
            "mcasFullSyncDone": "optional<boolean>",
            "mcasIamRoleArn": "optional<string>",
            "mcasS3Bucket": "optional<string>",
            "mcasSnsTopic": "optional<string>",
            "mdfsFullSyncDone": "optional<boolean>",
            "mdfsKmsKeyArn": "optional<string>",
            "mdfsS3BucketArn": "optional<string>",
            "policyArns": "optional<list<string>>",
          },
        },
        "shared.AwsSaasProduct": {
          "extends": undefined,
          "properties": {
            "Description": "optional<shared.AwsSaasProductDescription>",
            "Dimensions": "optional<list<Product.shared.AwsSaasProductDimension>>",
            "PromotionalResources": "optional<shared.AwsSaasProductPromotionalResources>",
            "SupportInformation": "optional<shared.AwsSaasProductSupportInformation>",
            "Versions": "optional<list<shared.AwsSaasProductVersion>>",
            "dataFeedProductId": "optional<string>",
            "productId": "optional<string>",
          },
        },
        "shared.AwsSaasProductDescription": {
          "extends": undefined,
          "properties": {
            "AssociatedProducts": "optional<string>",
            "Categories": "optional<list<string>>",
            "EuW8Submitted": "optional<boolean>",
            "Highlights": "optional<list<string>>",
            "LongDescription": "optional<string>",
            "Manufacturer": "optional<string>",
            "ProductCode": "optional<string>",
            "ProductTitle": "optional<string>",
            "Registered": "optional<boolean>",
            "SearchKeywords": "optional<list<string>>",
            "ShortDescription": "optional<string>",
            "Sku": "optional<string>",
            "UsW9Submitted": "optional<boolean>",
            "Visibility": "optional<string>",
          },
        },
        "shared.AwsSaasProductPromotionalResources": {
          "extends": undefined,
          "properties": {
            "AdditionalResources": "optional<list<shared.AwsSaasProductAdditionalResource>>",
            "LogoUrl": "optional<string>",
          },
        },
        "shared.AwsSaasProductSupportInformation": {
          "extends": undefined,
          "properties": {
            "Description": "optional<string>",
          },
        },
        "shared.AzureADIdentifier": {
          "extends": undefined,
          "properties": {
            "buyerInfo": "optional<shared.AzureBuyerInfo>",
            "companyInfo": "optional<shared.CompanyInfo>",
            "emailId": "optional<string>",
            "objectId": "optional<string>",
            "puid": "optional<string>",
            "tenantId": "optional<string>",
          },
        },
        "shared.AzureBuyerInfo": {
          "extends": undefined,
          "properties": {
            "billingAccountId": "optional<string>",
            "customerId": "optional<string>",
            "firstName": "optional<string>",
            "lastName": "optional<string>",
          },
        },
        "shared.AzureCredential": {
          "extends": undefined,
          "properties": {
            "clientID": "optional<string>",
            "clientSecret": "optional<string>",
            "clientSecretKey": "optional<string>",
            "resourceID": "optional<string>",
            "tenantID": "optional<string>",
          },
        },
        "shared.AzureIntegration": {
          "extends": undefined,
          "properties": {
            "cmaFullSyncDone": "optional<boolean>",
            "credential": "optional<shared.AzureCredential>",
          },
        },
        "shared.BuyerInfo": {
          "extends": undefined,
          "properties": {
            "awsBuyer": "optional<shared.AwsAccountIdentifier>",
            "azureBuyer": "optional<shared.AzureADIdentifier>",
            "collectableAmount": "optional<double>",
            "disbursedAmount": "optional<double>",
            "gcpBuyer": "optional<shared.GcpMarketplaceUserAccount>",
            "invoicedAmount": "optional<double>",
          },
        },
        "shared.CompanyInfo": {
          "extends": undefined,
          "properties": {
            "addressLine1": "optional<string>",
            "addressLine2": "optional<string>",
            "city": "optional<string>",
            "country": "optional<string>",
            "emailDomain": "optional<string>",
            "name": "optional<string>",
            "postalCode": "optional<string>",
            "state": "optional<string>",
          },
        },
        "shared.EntitlementInfo": {
          "extends": undefined,
          "properties": {
            "autoRenew": "optional<boolean>",
            "awsEntitlements": "optional<list<types.Entitlement>>",
            "azureSubscriptions": "optional<list<shared.AzureMarketplaceSubscription>>",
            "collectableAmount": "optional<double>",
            "commits": "optional<list<shared.CommitDimension>>",
            "currency": "optional<string>",
            "dimensions": "optional<list<shared.MeteringDimension>>",
            "disbursedAmount": "optional<double>",
            "discount": "optional<double>",
            "eulaType": "optional<string>",
            "eulaUrl": "optional<string>",
            "gcpEntitlements": "optional<list<shared.GcpMarketplaceEntitlement>>",
            "gcpPlans": "optional<list<shared.GcpPurchasePlan>>",
            "invoicedAmount": "optional<double>",
            "paymentInstallments": "optional<list<shared.PaymentInstallment>>",
            "refundCancelationPolicy": "optional<string>",
            "sellerNotes": "optional<string>",
          },
        },
        "shared.EntitlementTermInfo": {
          "extends": undefined,
          "properties": {
            "type": "optional<string>",
          },
        },
        "shared.GcpCommerceProducerExternalAccountSpec": {
          "extends": undefined,
          "properties": {
            "loginUri": "optional<string>",
            "signupUri": "optional<string>",
            "singleSignOnUri": "optional<string>",
          },
        },
        "shared.GcpCommerceProducerListingSpec": {
          "extends": undefined,
          "properties": {
            "externalAccountSpec": "optional<shared.GcpCommerceProducerExternalAccountSpec>",
            "listingType": "optional<string>",
            "marketingSpec": "optional<shared.GcpCommerceProducerMarketingSpec>",
            "purchaseSpec": "optional<shared.GcpCommerceProducerPurchaseSpec>",
          },
        },
        "shared.GcpCommerceProducerMarketingSpec": {
          "extends": undefined,
          "properties": {
            "description": "optional<string>",
            "displayNames": "optional<list<string>>",
            "eulaUrl": "optional<string>",
            "externalMarketingUrl": "optional<string>",
            "icon": "optional<string>",
            "searchCategories": "optional<list<string>>",
            "searchDescription": "optional<string>",
            "searchKeywords": "optional<list<string>>",
            "shortTitle": "optional<string>",
            "supportSpec": "optional<shared.GcpCommerceProducerSupportSpec>",
            "title": "optional<string>",
          },
        },
        "shared.GcpCommerceProducerPurchaseSpec": {
          "extends": undefined,
          "properties": {
            "metrics": "optional<list<shared.GcpCommerceProducerPurchaseMetric>>",
            "purchaseOptionSpecs": "optional<list<shared.GcpPurchasePlan>>",
          },
        },
        "shared.GcpCommerceProducerServiceBilling": {
          "extends": undefined,
          "properties": {
            "metrics": "optional<list<string>>",
          },
        },
        "shared.GcpCommerceProducerServiceConfig": {
          "extends": undefined,
          "properties": {
            "billing": "optional<shared.GcpCommerceProducerServiceBilling>",
            "metrics": "optional<list<shared.GcpCommerceProducerPurchaseMetric>>",
            "name": "optional<string>",
            "producerProjectId": "optional<string>",
            "title": "optional<string>",
          },
        },
        "shared.GcpCommerceProducerSupportSpec": {
          "extends": undefined,
          "properties": {
            "description": "optional<string>",
            "email": "optional<string>",
            "uri": "optional<string>",
          },
        },
        "shared.GcpIntegration": {
          "extends": undefined,
          "properties": {
            "gcpProjectId": "optional<string>",
            "gcpProjectNumber": "optional<string>",
            "identityProviderId": "optional<string>",
            "partnerId": "optional<string>",
            "pubsubTopic": "optional<string>",
            "reportBucket": "optional<string>",
            "reportFullSyncDone": "optional<boolean>",
            "reportStartDate": "optional<string>",
            "serviceAccountEmail": "optional<string>",
            "serviceNames": "optional<list<string>>",
            "workloadIdentityPoolId": "optional<string>",
          },
        },
        "shared.GcpMarketplaceUserAccount": {
          "extends": undefined,
          "properties": {
            "approvals": "optional<list<shared.GcpMarketplaceUserAccountApproval>>",
            "createTime": "optional<string>",
            "id": "optional<string>",
            "inputProperties": "optional<list<integer>>",
            "name": "optional<string>",
            "provider": "optional<string>",
            "state": "optional<string>",
            "updateTime": "optional<string>",
            "userInfo": "optional<shared.GcpUserInfo>",
          },
        },
        "shared.GcpProduct": {
          "extends": undefined,
          "properties": {
            "createTime": "optional<string>",
            "id": "optional<string>",
            "listingSpec": "optional<shared.GcpCommerceProducerListingSpec>",
            "marketplace": "optional<string>",
            "name": "optional<string>",
            "service": "optional<string>",
            "serviceConfig": "optional<shared.GcpCommerceProducerServiceConfig>",
          },
        },
        "shared.GcpUserInfo": {
          "extends": undefined,
          "properties": {
            "roles": "optional<list<string>>",
            "user_identity": "optional<string>",
          },
        },
        "shared.IdentityBuyer": {
          "extends": undefined,
          "properties": {
            "creationTime": "optional<string>",
            "description": "optional<string>",
            "externalID": "optional<string>",
            "id": "optional<string>",
            "info": "optional<shared.BuyerInfo>",
            "lastUpdateTime": "optional<string>",
            "name": "optional<string>",
            "organizationID": "optional<string>",
            "partner": "optional<string>",
          },
        },
        "shared.IdentityIntegration": {
          "extends": undefined,
          "properties": {
            "createdBy": "optional<string>",
            "creationTime": "optional<string>",
            "info": "optional<shared.IntegrationInfo>",
            "lastUpdateTime": "optional<string>",
            "lastUpdatedBy": "optional<string>",
            "organizationID": "optional<string>",
            "partner": "optional<string>",
            "service": "optional<string>",
            "status": "optional<string>",
          },
        },
        "shared.IntegrationInfo": {
          "extends": undefined,
          "properties": {
            "awsIntegration": "optional<shared.AwsIntegration>",
            "azureIntegration": "optional<shared.AzureIntegration>",
            "gcpIntegration": "optional<shared.GcpIntegration>",
          },
        },
        "shared.ListUsageRecordGroupsResponse": {
          "extends": undefined,
          "properties": {
            "nextOffset": "optional<integer>",
            "usageRecordGroups": "optional<list<shared.MeteringUsageRecordGroup>>",
          },
        },
        "shared.MeteringUsageRecordGroup": {
          "extends": undefined,
          "properties": {
            "creationTime": "optional<string>",
            "entitlementID": "optional<string>",
            "id": "optional<string>",
            "lastUpdateTime": "optional<string>",
            "organizationID": "optional<string>",
            "serialID": "optional<integer>",
            "status": "optional<string>",
            "usageRecordReportID": "optional<string>",
          },
        },
        "shared.OfferInfo": {
          "extends": undefined,
          "properties": {
            "azureProductVariant": "optional<partnercentersubmission.AzureProductVariant>",
            "baseAgreementId": "optional<string>",
            "buyerAwsAccountIds": "optional<list<string>>",
            "buyerAzureTenants": "optional<list<partnercentersubmission.AzureAudience>>",
            "commits": "optional<list<shared.CommitDimension>>",
            "currency": "optional<string>",
            "dimensions": "optional<list<shared.MeteringDimension>>",
            "discount": "optional<double>",
            "eulaType": "optional<string>",
            "eulaUrl": "optional<string>",
            "gcpMetrics": "optional<list<shared.GcpCommerceProducerPurchaseMetric>>",
            "gcpPlans": "optional<list<shared.GcpPurchasePlan>>",
            "isAgreementBasedOffer": "optional<boolean>",
            "paymentInstallments": "optional<list<shared.PaymentInstallment>>",
            "refundCancelationPolicy": "optional<string>",
            "sellerNotes": "optional<string>",
            "visibility": "optional<string>",
          },
        },
        "shared.ProductInfo": {
          "extends": undefined,
          "properties": {
            "awsSaasProduct": "optional<shared.AwsSaasProduct>",
            "awsSnsSubscriptions": "optional<list<shared.AwsSnsSubscription>>",
            "azureProduct": "optional<partnercentersubmission.AzureProduct>",
            "commits": "optional<list<shared.CommitDimension>>",
            "currency": "optional<string>",
            "dimensions": "optional<list<shared.MeteringDimension>>",
            "eulaUrl": "optional<string>",
            "gcpProduct": "optional<shared.GcpProduct>",
            "refundCancelationPolicy": "optional<string>",
            "sellerNotes": "optional<string>",
          },
        },
        "shared.WorkloadEntitlement": {
          "extends": undefined,
          "properties": {
            "buyerID": "optional<string>",
            "creationTime": "optional<string>",
            "endTime": "optional<string>",
            "entitlementTermID": "optional<string>",
            "externalBuyerID": "optional<string>",
            "externalID": "optional<string>",
            "externalProductID": "optional<string>",
            "id": "optional<string>",
            "info": "optional<shared.EntitlementInfo>",
            "lastUpdateTime": "optional<string>",
            "name": "optional<string>",
            "offerID": "optional<string>",
            "organizationID": "optional<string>",
            "partner": "optional<string>",
            "productID": "optional<string>",
            "service": "optional<string>",
            "startTime": "optional<string>",
            "status": "optional<string>",
            "type": "optional<string>",
          },
        },
        "shared.WorkloadEntitlementTerm": {
          "extends": undefined,
          "properties": {
            "buyerID": "optional<string>",
            "commitAmount": "optional<double>",
            "creditAmount": "optional<double>",
            "endTime": "optional<string>",
            "entitlementID": "optional<string>",
            "entitlementInfo": "optional<shared.EntitlementInfo>",
            "externalEntitlementID": "optional<string>",
            "id": "optional<string>",
            "info": "optional<shared.EntitlementTermInfo>",
            "offerID": "optional<string>",
            "organizationID": "optional<string>",
            "partner": "optional<string>",
            "productID": "optional<string>",
            "service": "optional<string>",
            "startTime": "optional<string>",
            "usedCommitAmount": "optional<double>",
            "usedCreditAmount": "optional<double>",
          },
        },
        "shared.WorkloadOffer": {
          "extends": undefined,
          "properties": {
            "createdBy": "optional<string>",
            "creationTime": "optional<string>",
            "endTime": "optional<string>",
            "expireTime": "optional<string>",
            "externalID": "optional<string>",
            "id": "optional<string>",
            "info": "optional<shared.OfferInfo>",
            "lastUpdateTime": "optional<string>",
            "lastUpdatedBy": "optional<string>",
            "name": "optional<string>",
            "offerType": "optional<string>",
            "organizationID": "optional<string>",
            "partner": "optional<string>",
            "productID": "optional<string>",
            "service": "optional<string>",
            "status": "optional<string>",
          },
        },
        "shared.WorkloadProduct": {
          "extends": undefined,
          "properties": {
            "createdBy": "optional<string>",
            "creationTime": "optional<string>",
            "externalID": "optional<string>",
            "fulfillmentUrl": "optional<string>",
            "id": "optional<string>",
            "info": "optional<shared.ProductInfo>",
            "lastUpdateTime": "optional<string>",
            "lastUpdatedBy": "optional<string>",
            "name": "optional<string>",
            "organizationID": "optional<string>",
            "partner": "optional<string>",
            "productType": "optional<string>",
            "service": "optional<string>",
            "status": "optional<string>",
          },
        },
      },
    },
    "entitlement.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "services": {
        "http": {
          "EntitlementService": {
            "auth": true,
            "base-path": "",
            "endpoints": {
              "": {
                "display-name": "Add Credit Amount in Entitlement.",
                "docs": "Add Credit Amount to the given Entitlement. The credit amount is accumulated & saved in the current Entitlement Term of the gvien Entitlement.",
                "method": "POST",
                "path": "/org/{orgId}/addEntitlementCredit",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                },
                "request": {
                  "body": "shared.AddEntitlementCreditParams",
                },
                "response": "shared.AddEntitlementCreditResponse",
              },
              "_unnamedOperation0": {
                "display-name": "List all entitlements of the buyer",
                "docs": undefined,
                "method": "GET",
                "path": "/org/{orgId}/buyer/{buyerId}/entitlement",
                "path-parameters": {
                  "buyerId": {
                    "docs": "Buyer ID",
                    "type": "string",
                  },
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                },
                "response": "list<commons.shared.WorkloadEntitlement>",
              },
              "_unnamedOperation1": {
                "display-name": "List all entitlements under the organization",
                "docs": undefined,
                "method": "GET",
                "path": "/org/{orgId}/entitlement",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                },
                "response": "list<commons.shared.WorkloadEntitlement>",
              },
              "_unnamedOperation2": {
                "display-name": "Get entitlement",
                "docs": undefined,
                "method": "GET",
                "path": "/org/{orgId}/entitlement/{entitlementId}",
                "path-parameters": {
                  "entitlementId": {
                    "docs": "Entitlement ID",
                    "type": "string",
                  },
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                },
                "response": "commons.shared.WorkloadEntitlement",
              },
              "_unnamedOperation3": {
                "display-name": "Update entitlement name",
                "docs": undefined,
                "method": "PATCH",
                "path": "/org/{orgId}/entitlement/{entitlementId}/entitlementName",
                "path-parameters": {
                  "entitlementId": {
                    "docs": "Entitlement ID",
                    "type": "string",
                  },
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                },
                "request": {
                  "body": "lib.UpdateEntitlementNameParams",
                },
                "response": "commons.shared.WorkloadEntitlement",
              },
              "_unnamedOperation4": {
                "display-name": "List all entitlements under the offer",
                "docs": undefined,
                "method": "GET",
                "path": "/org/{orgId}/offer/{offerId}/entitlement",
                "path-parameters": {
                  "offerId": {
                    "docs": "Offer ID",
                    "type": "string",
                  },
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                },
                "response": "list<commons.shared.WorkloadEntitlement>",
              },
              "_unnamedOperation5": {
                "display-name": "List all entitlements under the partner",
                "docs": undefined,
                "method": "GET",
                "path": "/org/{orgId}/partner/{partner}/entitlement",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                  "partner": {
                    "docs": "Cloud Partner",
                    "type": "string",
                  },
                },
                "response": "list<commons.shared.WorkloadEntitlement>",
              },
              "_unnamedOperation6": {
                "display-name": "List all entitlements under the product",
                "docs": undefined,
                "method": "GET",
                "path": "/org/{orgId}/product/{productId}/entitlement",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                  "productId": {
                    "docs": "Product ID",
                    "type": "string",
                  },
                },
                "response": "list<commons.shared.WorkloadEntitlement>",
              },
            },
          },
        },
      },
      "types": {
        "lib.UpdateEntitlementNameParams": {
          "extends": undefined,
          "properties": {
            "id": "optional<string>",
            "name": "optional<string>",
            "organizationID": "optional<string>",
          },
        },
        "shared.AddEntitlementCreditParams": {
          "extends": undefined,
          "properties": {
            "creditAmountIncrement": "double",
            "entitlementID": "string",
            "organizationID": "string",
          },
        },
        "shared.AddEntitlementCreditResponse": {
          "extends": undefined,
          "properties": {
            "creditAmountIncrement": "optional<double>",
            "entitlementID": "optional<string>",
            "entitlementTermID": "optional<string>",
            "newCreditAmount": "optional<double>",
            "organizationID": "optional<string>",
          },
        },
      },
    },
    "entitlementTerm.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "services": {
        "http": {
          "EntitlementTermService": {
            "auth": true,
            "base-path": "",
            "endpoints": {
              "": {
                "display-name": "List all Entitlement Terms of the Entitlement.",
                "docs": undefined,
                "method": "GET",
                "path": "/org/{orgId}/entitlement/{entitlementId}/entitlementTerm",
                "path-parameters": {
                  "entitlementId": {
                    "docs": "Entitlement ID",
                    "type": "string",
                  },
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                },
                "response": "list<commons.shared.WorkloadEntitlementTerm>",
              },
              "_unnamedOperation9": {
                "display-name": "Get an Entitlement Term.",
                "docs": undefined,
                "method": "GET",
                "path": "/org/{orgId}/entitlement/{entitlementId}/entitlementTerm/{entitlementTermId}",
                "path-parameters": {
                  "entitlementId": {
                    "docs": "Entitlement ID",
                    "type": "string",
                  },
                  "entitlementTermId": {
                    "docs": "Entitlement Term ID",
                    "type": "string",
                  },
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                },
                "response": "commons.shared.WorkloadEntitlementTerm",
              },
            },
          },
        },
      },
    },
    "integration.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "services": {
        "http": {
          "IntegrationService": {
            "auth": true,
            "base-path": "",
            "endpoints": {
              "": {
                "display-name": "List all integrations under the organization",
                "docs": undefined,
                "method": "GET",
                "path": "/org/{orgId}/integration",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                },
                "response": "list<commons.shared.IdentityIntegration>",
              },
              "_unnamedOperation15": {
                "display-name": "Create an integration.",
                "docs": "For each organization, partner & service, there should be at most one integration.",
                "method": "POST",
                "path": "/org/{orgId}/integration",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                },
                "request": {
                  "body": "shared.CreateIntegrationParams",
                },
                "response": "commons.shared.IdentityIntegration",
              },
              "_unnamedOperation16": {
                "display-name": "Get the integration for the given organization, partner & service.",
                "docs": undefined,
                "method": "GET",
                "path": "/org/{orgId}/integration/{partner}/{service}",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                  "partner": {
                    "docs": "Cloud Partner",
                    "type": "string",
                  },
                  "service": {
                    "docs": "Partner Service",
                    "type": "string",
                  },
                },
                "response": "commons.shared.IdentityIntegration",
              },
              "_unnamedOperation17": {
                "display-name": "Delete the integration.",
                "docs": undefined,
                "method": "DELETE",
                "path": "/org/{orgId}/integration/{partner}/{service}",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                  "partner": {
                    "docs": "Cloud Partner",
                    "type": "string",
                  },
                  "service": {
                    "docs": "Partner Service",
                    "type": "string",
                  },
                },
                "response": "string",
              },
              "_unnamedOperation18": {
                "display-name": "Update the integration.",
                "docs": undefined,
                "method": "PATCH",
                "path": "/org/{orgId}/integration/{partner}/{service}",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                  "partner": {
                    "docs": "Cloud Partner",
                    "type": "string",
                  },
                  "service": {
                    "docs": "Partner Service",
                    "type": "string",
                  },
                },
                "request": {
                  "body": "shared.UpdateIntegrationParams",
                },
                "response": "commons.shared.IdentityIntegration",
              },
              "_unnamedOperation19": {
                "display-name": "Verify the integration, check whether it works correctly.",
                "docs": undefined,
                "method": "POST",
                "path": "/org/{orgId}/integration/{partner}/{service}/verify",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                  "partner": {
                    "docs": "Cloud Partner",
                    "type": "string",
                  },
                  "service": {
                    "docs": "Partner Service",
                    "type": "string",
                  },
                },
                "response": "boolean",
              },
            },
          },
        },
      },
      "types": {
        "shared.CreateIntegrationParams": {
          "extends": undefined,
          "properties": {
            "info": "commons.shared.IntegrationInfo",
            "organizationID": "string",
            "partner": "string",
            "service": "string",
          },
        },
        "shared.UpdateIntegrationParams": {
          "extends": undefined,
          "properties": {
            "info": "commons.shared.IntegrationInfo",
            "organizationID": "string",
            "partner": "string",
            "service": "string",
          },
        },
      },
    },
    "metering.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "services": {
        "http": {
          "MeteringService": {
            "auth": true,
            "base-path": "",
            "endpoints": {
              "": {
                "display-name": "list all UsageRecordGroups under the given entitlement",
                "docs": undefined,
                "method": "GET",
                "path": "/org/{orgId}/entitlement/{entitlementId}/usageRecordGroup",
                "path-parameters": {
                  "entitlementId": {
                    "docs": "Entitlement ID",
                    "type": "string",
                  },
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                },
                "request": {
                  "query-parameters": {
                    "limit": {
                      "docs": "List pagination size, default 20",
                      "type": "optional<integer>",
                    },
                    "offset": {
                      "docs": "List pagination offset, default 0",
                      "type": "optional<integer>",
                    },
                  },
                },
                "response": "commons.shared.ListUsageRecordGroupsResponse",
              },
              "_unnamedOperation10": {
                "display-name": "Report new UsageRecordGroup.",
                "docs": "It is recommended to provide the ID in the request body CreateUsageRecordGroupParams, so the report can be deduplicated. All duplicate report will return error code 409.",
                "method": "POST",
                "path": "/org/{orgId}/entitlement/{entitlementId}/usageRecordGroup",
                "path-parameters": {
                  "entitlementId": {
                    "docs": "Entitlement ID",
                    "type": "string",
                  },
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                },
                "request": {
                  "body": "shared.CreateUsageRecordGroupParams",
                },
                "response": "commons.shared.MeteringUsageRecordGroup",
              },
              "_unnamedOperation11": {
                "display-name": "list all UsageRecordReports under the given entitlement",
                "docs": undefined,
                "method": "GET",
                "path": "/org/{orgId}/entitlement/{entitlementId}/usageRecordReport",
                "path-parameters": {
                  "entitlementId": {
                    "docs": "Entitlement ID",
                    "type": "string",
                  },
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                },
                "request": {
                  "query-parameters": {
                    "entitlementTermId": {
                      "docs": "The Entitlement Term ID, if not given, return the UsageRecordReports of all Entitlement Terms under the Entitlement",
                      "type": "optional<string>",
                    },
                  },
                },
                "response": "shared.ListUsageRecordReportsResponse",
              },
              "_unnamedOperation12": {
                "display-name": "list all UsageRecordGroups under the given product",
                "docs": undefined,
                "method": "GET",
                "path": "/org/{orgId}/product/{productId}/usageRecordGroup",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                  "productId": {
                    "docs": "Product ID",
                    "type": "string",
                  },
                },
                "request": {
                  "query-parameters": {
                    "limit": {
                      "docs": "List pagination size, default 20",
                      "type": "optional<integer>",
                    },
                    "offset": {
                      "docs": "List pagination offset, default 0",
                      "type": "optional<integer>",
                    },
                  },
                },
                "response": "commons.shared.ListUsageRecordGroupsResponse",
              },
              "_unnamedOperation13": {
                "display-name": "list all UsageRecordGroups under the given organization",
                "docs": undefined,
                "method": "GET",
                "path": "/org/{orgId}/usageRecordGroup",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                },
                "request": {
                  "query-parameters": {
                    "limit": {
                      "docs": "List pagination size, default 20",
                      "type": "optional<integer>",
                    },
                    "offset": {
                      "docs": "List pagination offset, default 0",
                      "type": "optional<integer>",
                    },
                  },
                },
                "response": "commons.shared.ListUsageRecordGroupsResponse",
              },
              "_unnamedOperation14": {
                "display-name": "get an UsageRecordGroup by organization_entitlement_usageRecordGroup id",
                "docs": undefined,
                "method": "GET",
                "path": "/org/{orgId}/usageRecordGroup/{usageRecordGroupId}",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                  "usageRecordGroupId": {
                    "docs": "UsageRecordGroup ID",
                    "type": "string",
                  },
                },
                "response": "commons.shared.MeteringUsageRecordGroup",
              },
            },
          },
        },
      },
      "types": {
        "shared.CreateUsageRecordGroupParams": {
          "extends": undefined,
          "properties": {
            "entitlementID": "string",
            "id": "optional<string>",
            "organizationID": "string",
          },
        },
        "shared.ListUsageRecordReportsResponse": {
          "extends": undefined,
          "properties": {
            "usageRecordReports": "optional<list<commons.shared.MeteringUsageRecordReport>>",
          },
        },
      },
    },
    "offer.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "services": {
        "http": {
          "OfferService": {
            "auth": true,
            "base-path": "",
            "endpoints": {
              "": {
                "display-name": "List all offers under the organization",
                "docs": undefined,
                "method": "GET",
                "path": "/org/{orgId}/offer",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                },
                "response": "list<commons.shared.WorkloadOffer>",
              },
              "_unnamedOperation20": {
                "display-name": "Create a private offer.",
                "docs": undefined,
                "method": "POST",
                "path": "/org/{orgId}/offer",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                },
                "request": {
                  "body": "shared.CreateOfferParams",
                },
                "response": "commons.shared.WorkloadOffer",
              },
              "_unnamedOperation21": {
                "display-name": "Get the offer.",
                "docs": undefined,
                "method": "GET",
                "path": "/org/{orgId}/offer/{offerId}",
                "path-parameters": {
                  "offerId": {
                    "docs": "Offer ID",
                    "type": "string",
                  },
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                },
                "response": "commons.shared.WorkloadOffer",
              },
              "_unnamedOperation22": {
                "display-name": "Delete the offer.",
                "docs": "Currently only the offer with status = "CREATE_PENDING" or "CREATE_FAILED" is allowed to be deleted.",
                "method": "DELETE",
                "path": "/org/{orgId}/offer/{offerId}",
                "path-parameters": {
                  "offerId": {
                    "docs": "Offer ID",
                    "type": "string",
                  },
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                },
                "response": "string",
              },
              "_unnamedOperation23": {
                "display-name": "List all offers under the cloud partner.",
                "docs": undefined,
                "method": "GET",
                "path": "/org/{orgId}/partner/{partner}/offer",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                  "partner": {
                    "docs": "Cloud Partner",
                    "type": "string",
                  },
                },
                "response": "list<commons.shared.WorkloadOffer>",
              },
              "_unnamedOperation24": {
                "display-name": "List all offers under the product.",
                "docs": undefined,
                "method": "GET",
                "path": "/org/{orgId}/product/{productId}/offer",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                  "productId": {
                    "docs": "Product ID",
                    "type": "string",
                  },
                },
                "response": "list<commons.shared.WorkloadOffer>",
              },
            },
          },
        },
      },
      "types": {
        "shared.CreateOfferParams": {
          "extends": undefined,
          "properties": {
            "creationTime": "optional<string>",
            "endTime": "optional<string>",
            "expireTime": "optional<string>",
            "externalID": "optional<string>",
            "id": "optional<string>",
            "info": "commons.shared.OfferInfo",
            "name": "string",
            "offerType": "optional<string>",
            "organizationID": "string",
            "partner": "string",
            "productID": "string",
            "service": "string",
            "status": "optional<string>",
          },
        },
      },
    },
    "operation.yml": {
      "services": {
        "http": {
          "OperationService": {
            "auth": true,
            "base-path": "",
            "endpoints": {
              "": {
                "display-name": "list all long running operations under the given organization, offer or entitlement.",
                "docs": "The operations can be filtered by offerId or entitlementId. If both of them are provided, then it is filtered by entitlementId only.",
                "method": "GET",
                "path": "/org/{orgId}/operation",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                },
                "request": {
                  "query-parameters": {
                    "entitlementId": {
                      "docs": "filter by entitlementId",
                      "type": "optional<string>",
                    },
                    "offerId": {
                      "docs": "filter by offerId",
                      "type": "optional<string>",
                    },
                  },
                },
                "response": "list<shared.Operation>",
              },
            },
          },
        },
      },
      "types": {
        "shared.Operation": {
          "extends": undefined,
          "properties": {
            "endTime": "optional<string>",
            "id": "optional<string>",
            "message": "optional<string>",
            "name": "optional<string>",
            "startTime": "optional<string>",
            "status": "optional<string>",
            "type": "optional<string>",
          },
        },
      },
    },
    "product.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "services": {
        "http": {
          "ProductService": {
            "auth": true,
            "base-path": "",
            "endpoints": {
              "": {
                "display-name": "List all products under the cloud partner",
                "docs": undefined,
                "method": "GET",
                "path": "/org/{orgId}/partner/{partner}/product",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                  "partner": {
                    "docs": "Cloud Partner",
                    "type": "string",
                  },
                },
                "response": "list<commons.shared.WorkloadProduct>",
              },
              "_unnamedOperation25": {
                "display-name": "List all products under the organization",
                "docs": undefined,
                "method": "GET",
                "path": "/org/{orgId}/product",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                },
                "response": "list<commons.shared.WorkloadProduct>",
              },
              "_unnamedOperation26": {
                "display-name": "Create an Product & List it to the Partner's marketplace.",
                "docs": undefined,
                "method": "POST",
                "path": "/org/{orgId}/product",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                },
                "request": {
                  "body": "shared.CreateProductParams",
                },
                "response": "commons.shared.WorkloadProduct",
              },
              "_unnamedOperation27": {
                "display-name": "Get the Product",
                "docs": undefined,
                "method": "GET",
                "path": "/org/{orgId}/product/{productId}",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                  "productId": {
                    "docs": "Product ID",
                    "type": "string",
                  },
                },
                "response": "commons.shared.WorkloadProduct",
              },
              "_unnamedOperation28": {
                "display-name": "Delete the product.",
                "docs": "Currently only the product with status = "CREATE_PENDING" or "CREATE_FAILED" is allowed to be deleted.",
                "method": "DELETE",
                "path": "/org/{orgId}/product/{productId}",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                  "productId": {
                    "docs": "Product ID",
                    "type": "string",
                  },
                },
                "response": "string",
              },
              "_unnamedOperation29": {
                "display-name": "Currently, only the Fulfillment URL is allowed to update.",
                "docs": undefined,
                "method": "PATCH",
                "path": "/org/{orgId}/product/{productId}",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                  "productId": {
                    "docs": "Product ID",
                    "type": "string",
                  },
                },
                "request": {
                  "body": "shared.UpdateProductParams",
                },
                "response": "commons.shared.WorkloadProduct",
              },
              "_unnamedOperation30": {
                "display-name": "List the Metering Dimensions of the Product",
                "docs": undefined,
                "method": "GET",
                "path": "/org/{orgId}/product/{productId}/dimension",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                  "productId": {
                    "docs": "Product ID",
                    "type": "string",
                  },
                },
                "response": "list<shared.AwsSaasProductDimension>",
              },
            },
          },
        },
      },
      "types": {
        "shared.AwsSaasProductDimension": {
          "extends": undefined,
          "properties": {
            "Description": "optional<string>",
            "Key": "optional<string>",
            "Name": "optional<string>",
            "Types": "optional<list<string>>",
            "Unit": "optional<string>",
          },
        },
        "shared.CreateProductParams": {
          "extends": undefined,
          "properties": {
            "externalID": "optional<string>",
            "fulfillmentUrl": "optional<string>",
            "id": "optional<string>",
            "info": "optional<commons.shared.ProductInfo>",
            "name": "optional<string>",
            "organizationID": "optional<string>",
            "partner": "optional<string>",
            "productType": "optional<string>",
            "service": "optional<string>",
            "status": "optional<string>",
          },
        },
        "shared.UpdateProductParams": {
          "extends": undefined,
          "properties": {
            "fulfillmentUrl": "string",
            "id": "string",
            "organizationID": "string",
          },
        },
      },
    },
    "report.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "services": {
        "http": {
          "ReportService": {
            "auth": true,
            "base-path": "",
            "endpoints": {
              "": {
                "display-name": "Get the revenue report.",
                "docs": "Get the revenue report of the given organization, product, entitlement, or buyer.",
                "method": "POST",
                "path": "/org/{orgId}/revenueReport",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                },
                "request": {
                  "body": "shared.GetRevenueReportParams",
                },
                "response": "shared.RevenueReport",
              },
              "_unnamedOperation31": {
                "display-name": "Get the usage report.",
                "docs": "Get the daily usage report of the given entitlement, the default timespan is lifetime.",
                "method": "POST",
                "path": "/org/{orgId}/usageReport",
                "path-parameters": {
                  "orgId": {
                    "docs": "Organization ID",
                    "type": "string",
                  },
                },
                "request": {
                  "body": "shared.GetUsageReportParams",
                },
                "response": "shared.UsageReport",
              },
            },
          },
        },
      },
      "types": {
        "shared.GetRevenueReportParams": {
          "extends": undefined,
          "properties": {
            "buyerID": "optional<string>",
            "entitlementID": "optional<string>",
            "organizationID": "string",
            "partner": "string",
            "productID": "optional<string>",
            "reportType": "string",
            "service": "string",
          },
        },
        "shared.GetUsageReportParams": {
          "extends": undefined,
          "properties": {
            "entitlementID": "string",
            "organizationID": "string",
          },
        },
        "shared.RevenueReport": {
          "extends": undefined,
          "properties": {
            "buyerID": "optional<string>",
            "entitlementID": "optional<string>",
            "organizationID": "optional<string>",
            "partner": "optional<string>",
            "productID": "optional<string>",
            "reportDate": "optional<string>",
            "reportType": "optional<string>",
            "revenueRecords": "optional<list<commons.shared.RevenueRecord>>",
            "service": "optional<string>",
          },
        },
        "shared.UsageReport": {
          "extends": undefined,
          "properties": {
            "entitlementID": "optional<string>",
            "organizationID": "optional<string>",
            "reportDate": "optional<string>",
            "usageRecords": "optional<list<commons.shared.EntitlementUsageRecord>>",
          },
        },
      },
    },
  },
}
`;

exports[`open api converter telematica simple 1`] = `
{
  "rootApiFile": {
    "headers": {},
    "name": "api",
  },
  "serviceFiles": {
    "commons.yml": {
      "types": {
        "ChargingStatus_ResponseDTO": {
          "extends": undefined,
          "properties": {
            "isCharging": "boolean",
          },
        },
        "Location_ResponseDTO": {
          "extends": undefined,
          "properties": {
            "location": "_InlinedType0",
          },
        },
        "Odo_ResponseDTO": {
          "extends": undefined,
          "properties": {
            "odo": "double",
          },
        },
        "RangeSoc_ResponseDTO": {
          "extends": undefined,
          "properties": {
            "range": "double",
            "soc": "double",
          },
        },
        "Range_ResponseDTO": {
          "extends": undefined,
          "properties": {
            "range": "double",
          },
        },
        "SOC_ResponseDTO": {
          "extends": undefined,
          "properties": {
            "soc": "double",
          },
        },
        "StaticAttributes_ResponseDTO": {
          "extends": undefined,
          "properties": {
            "make": "string",
            "model": "string",
            "registration": "string",
            "vin": "string",
            "year": "double",
          },
        },
        "_InlinedType0": {
          "extends": [
            "ILocation",
          ],
        },
      },
    },
    "sampleCallback.yml": {
      "services": {
        "http": {
          "SampleCallbackService": {
            "auth": true,
            "base-path": "",
            "endpoints": {
              "appControllerCallback": {
                "display-name": "Dummy callback endpoint",
                "docs": "This is a dummy callback endpoint.
Please share the POST callback endpoint created in your app's backend with Telematica to get callback requests of this format.",
                "method": "POST",
                "path": "/callback",
                "request": {
                  "body": {
                    "extends": undefined,
                    "properties": {
                      "user": "optional<string>",
                      "vehicles": "optional<list<commons.Callback_DTO>>",
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
    "testingEndpoints.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "services": {
        "http": {
          "TestingEndpointsService": {
            "auth": true,
            "base-path": "",
            "endpoints": {
              "getChargingStatusTest": {
                "display-name": "Test charging status",
                "docs": undefined,
                "method": "GET",
                "path": "/vehicle-data/charging-status/test",
                "request": {
                  "query-parameters": {
                    "vehicleId": {
                      "docs": "24-char hex identifier for the vehicle. The owner must have provided consent through Telematica consent flow",
                      "type": "string",
                    },
                  },
                },
                "response": "commons.ChargingStatus_ResponseDTO",
              },
              "getLocationTest": {
                "display-name": "Test location",
                "docs": undefined,
                "method": "GET",
                "path": "/vehicle-data/location/test",
                "request": {
                  "query-parameters": {
                    "vehicleId": {
                      "docs": "24-char hex identifier for the vehicle. The owner must have provided consent through Telematica consent flow",
                      "type": "string",
                    },
                  },
                },
                "response": "commons.Location_ResponseDTO",
              },
              "getOdoTest": {
                "display-name": "Test odo",
                "docs": undefined,
                "method": "GET",
                "path": "/vehicle-data/odo/test",
                "request": {
                  "query-parameters": {
                    "vehicleId": {
                      "docs": "24-char hex identifier for the vehicle. The owner must have provided consent through Telematica consent flow",
                      "type": "string",
                    },
                  },
                },
                "response": "commons.Odo_ResponseDTO",
              },
              "getRangeSocTest": {
                "display-name": "Test range-soc",
                "docs": undefined,
                "method": "GET",
                "path": "/vehicle-data/range-soc/test",
                "request": {
                  "query-parameters": {
                    "vehicleId": {
                      "docs": "24-char hex identifier for the vehicle. The owner must have provided consent through Telematica consent flow",
                      "type": "string",
                    },
                  },
                },
                "response": "commons.RangeSoc_ResponseDTO",
              },
              "getRangeTest": {
                "display-name": "Test range",
                "docs": undefined,
                "method": "GET",
                "path": "/vehicle-data/range/test",
                "request": {
                  "query-parameters": {
                    "vehicleId": {
                      "docs": "24-char hex identifier for the vehicle. The owner must have provided consent through Telematica consent flow",
                      "type": "string",
                    },
                  },
                },
                "response": "commons.Range_ResponseDTO",
              },
              "getSocTest": {
                "display-name": "Test SOC (battery level)",
                "docs": undefined,
                "method": "GET",
                "path": "/vehicle-data/soc/test",
                "request": {
                  "query-parameters": {
                    "vehicleId": {
                      "docs": "24-char hex identifier for the vehicle. The owner must have provided consent through Telematica consent flow",
                      "type": "string",
                    },
                  },
                },
                "response": "commons.SOC_ResponseDTO",
              },
              "getStaticAttributesTest": {
                "display-name": "Test static attributes",
                "docs": undefined,
                "method": "GET",
                "path": "/vehicle-data/static-attributes/test",
                "request": {
                  "query-parameters": {
                    "vehicleId": {
                      "docs": "24-char hex identifier for the vehicle. The owner must have provided consent through Telematica consent flow",
                      "type": "string",
                    },
                  },
                },
                "response": "commons.StaticAttributes_ResponseDTO",
              },
            },
          },
        },
      },
    },
    "vehicleData.yml": {
      "imports": {
        "commons": "commons.yml",
      },
      "services": {
        "http": {
          "VehicleDataService": {
            "auth": true,
            "base-path": "",
            "endpoints": {
              "getChargingStatus": {
                "display-name": "Charging Status",
                "docs": undefined,
                "method": "GET",
                "path": "/vehicle-data/charging-status",
                "request": {
                  "query-parameters": {
                    "vehicleId": {
                      "docs": "24-char hex identifier for the vehicle. The owner must have provided consent through Telematica consent flow",
                      "type": "string",
                    },
                  },
                },
                "response": "commons.ChargingStatus_ResponseDTO",
              },
              "getLocation": {
                "display-name": "Location",
                "docs": undefined,
                "method": "GET",
                "path": "/vehicle-data/location",
                "request": {
                  "query-parameters": {
                    "vehicleId": {
                      "docs": "24-char hex identifier for the vehicle. The owner must have provided consent through Telematica consent flow",
                      "type": "string",
                    },
                  },
                },
                "response": "commons.Location_ResponseDTO",
              },
              "getOdo": {
                "display-name": "Odometer",
                "docs": undefined,
                "method": "GET",
                "path": "/vehicle-data/odo",
                "request": {
                  "query-parameters": {
                    "vehicleId": {
                      "docs": "24-char hex identifier for the vehicle. The owner must have provided consent through Telematica consent flow",
                      "type": "string",
                    },
                  },
                },
                "response": "commons.Odo_ResponseDTO",
              },
              "getRange": {
                "display-name": "Range",
                "docs": undefined,
                "method": "GET",
                "path": "/vehicle-data/range",
                "request": {
                  "query-parameters": {
                    "vehicleId": {
                      "docs": "24-char hex identifier for the vehicle. The owner must have provided consent through Telematica consent flow",
                      "type": "string",
                    },
                  },
                },
                "response": "commons.Range_ResponseDTO",
              },
              "getRangeSoc": {
                "display-name": "Range-SOC",
                "docs": "This endpoint returns the SOC and range for the vehicle in a single call",
                "method": "GET",
                "path": "/vehicle-data/range-soc",
                "request": {
                  "query-parameters": {
                    "vehicleId": {
                      "docs": "24-char hex identifier for the vehicle. The owner must have provided consent through Telematica consent flow",
                      "type": "string",
                    },
                  },
                },
                "response": "commons.RangeSoc_ResponseDTO",
              },
              "getSoc": {
                "display-name": "SOC (battery level)",
                "docs": undefined,
                "method": "GET",
                "path": "/vehicle-data/soc",
                "request": {
                  "query-parameters": {
                    "vehicleId": {
                      "docs": "24-char hex identifier for the vehicle. The owner must have provided consent through Telematica consent flow",
                      "type": "string",
                    },
                  },
                },
                "response": "commons.SOC_ResponseDTO",
              },
              "getStaticAttributes": {
                "display-name": "Static attributes",
                "docs": "Static vehicle attributes like VIN, registration number, model, year and make",
                "method": "GET",
                "path": "/vehicle-data/static-attributes",
                "request": {
                  "query-parameters": {
                    "vehicleId": {
                      "docs": "24-char hex identifier for the vehicle. The owner must have provided consent through Telematica consent flow",
                      "type": "string",
                    },
                  },
                },
                "response": "commons.StaticAttributes_ResponseDTO",
              },
            },
          },
        },
      },
    },
  },
}
`;
