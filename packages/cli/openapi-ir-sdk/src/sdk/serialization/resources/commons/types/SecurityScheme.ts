/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as FernOpenapiIr from "../../../../api/index";
import * as core from "../../../../core";
import { BasicSecurityScheme } from "./BasicSecurityScheme";
import { BearerSecurityScheme } from "./BearerSecurityScheme";
import { HeaderSecurityScheme } from "./HeaderSecurityScheme";
import { QuerySecurityScheme } from "./QuerySecurityScheme";
import { OauthSecurityScheme } from "./OauthSecurityScheme";

export const SecurityScheme: core.serialization.Schema<serializers.SecurityScheme.Raw, FernOpenapiIr.SecurityScheme> =
    core.serialization
        .union("type", {
            basic: BasicSecurityScheme,
            bearer: BearerSecurityScheme,
            header: HeaderSecurityScheme,
            query: QuerySecurityScheme,
            oauth: OauthSecurityScheme,
        })
        .transform<FernOpenapiIr.SecurityScheme>({
            transform: (value) => {
                switch (value.type) {
                    case "basic":
                        return FernOpenapiIr.SecurityScheme.basic(value);
                    case "bearer":
                        return FernOpenapiIr.SecurityScheme.bearer(value);
                    case "header":
                        return FernOpenapiIr.SecurityScheme.header(value);
                    case "query":
                        return FernOpenapiIr.SecurityScheme.query(value);
                    case "oauth":
                        return FernOpenapiIr.SecurityScheme.oauth(value);
                    default:
                        return value as FernOpenapiIr.SecurityScheme;
                }
            },
            untransform: ({ _visit, ...value }) => value as any,
        });

export declare namespace SecurityScheme {
    type Raw =
        | SecurityScheme.Basic
        | SecurityScheme.Bearer
        | SecurityScheme.Header
        | SecurityScheme.Query
        | SecurityScheme.Oauth;

    interface Basic extends BasicSecurityScheme.Raw {
        type: "basic";
    }

    interface Bearer extends BearerSecurityScheme.Raw {
        type: "bearer";
    }

    interface Header extends HeaderSecurityScheme.Raw {
        type: "header";
    }

    interface Query extends QuerySecurityScheme.Raw {
        type: "query";
    }

    interface Oauth extends OauthSecurityScheme.Raw {
        type: "oauth";
    }
}
