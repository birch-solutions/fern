// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`open api parser axle simple 1`] = `
{
  "definitionFiles": {
    "accounts.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "GetAccount": {
            "auth": false,
            "display-name": "Get Account",
            "docs": "The Get Account method will return an Account object including high-level account information (e.g., name) and any children objects (e.g., Policies) associated with the Account. Please note that this method will NOT refresh the Account object.",
            "examples": [
              {
                "headers": {},
                "path-parameters": {
                  "id": "string",
                },
                "response": {
                  "body": {
                    "data": {
                      "carrier": "string",
                      "createdAt": "string",
                      "firstName": "string",
                      "id": "string",
                      "lastName": "string",
                      "modifiedAt": "string",
                      "policies": [],
                      "refreshedAt": "string",
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/accounts/{id}",
            "path-parameters": {
              "id": {
                "docs": "The unique ID for the requested account. Returned as part of the Token Exchange flow in exchangeToken.",
                "type": "string",
              },
            },
            "request": {
              "name": "GetAccountRequest",
              "query-parameters": {
                "expand": {
                  "docs": "Set to *true* if you would like to expand related entities (e.g., account, policy). Defaults to *false*.",
                  "type": "optional<boolean>",
                },
              },
            },
            "response": {
              "docs": "",
              "type": "GetAccountResponse",
            },
          },
        },
      },
      "types": {
        "GetAccountResponse": {
          "docs": undefined,
          "properties": {
            "data": "optional<root.Account>",
            "success": "optional<root.Success>",
          },
        },
      },
    },
    "carriers.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "GetCarrier": {
            "auth": false,
            "display-name": "Get Carrier",
            "docs": "The Get Carrier method returns a Carrier object that include additional details about an Axle-supported insurance carrier.",
            "examples": [
              {
                "headers": {},
                "path-parameters": {
                  "id": "string",
                },
                "response": {
                  "body": {
                    "data": {
                      "address": {},
                      "domain": "string",
                      "id": "string",
                      "modifiedAt": "string",
                      "name": "string",
                      "phone": "string",
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/carriers/{id}",
            "path-parameters": {
              "id": {
                "docs": "The unique ID for the requested carrier. Returned in Account and Policy objects as \`carrier\`.",
                "type": "string",
              },
            },
            "response": {
              "docs": "",
              "type": "GetCarrierResponse",
            },
          },
          "GetCarriers": {
            "auth": false,
            "display-name": "Get Carriers",
            "docs": "The Get Carriers method returns an array of Carrier objects.",
            "examples": [
              {
                "headers": {},
                "response": {
                  "body": {},
                },
              },
            ],
            "method": "GET",
            "path": "/carriers",
            "response": {
              "docs": "",
              "type": "GetCarriersResponse",
            },
          },
        },
      },
      "types": {
        "GetCarrierResponse": {
          "docs": undefined,
          "properties": {
            "data": "optional<root.Carrier>",
            "success": "optional<root.Success>",
          },
        },
        "GetCarriersResponse": {
          "docs": undefined,
          "properties": {
            "data": "optional<list<root.Carrier>>",
            "success": "optional<root.Success>",
          },
        },
      },
    },
    "ignition.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "StartIgnition": {
            "auth": false,
            "display-name": "Start Ignition",
            "docs": "Start an Ignition session. Returns the ignitionUri to direct the user to authenticate.",
            "examples": [
              {
                "headers": {},
                "request": {
                  "redirectUri": "https://example.com/redirect",
                  "user": {
                    "id": "string",
                  },
                  "webhookUri": "https://example.com/webhook",
                },
                "response": {
                  "body": {
                    "data": {
                      "ignitionToken": "ur7EPeAa0km4wRlDrPJ4Z",
                      "ignitionUri": "https://ignition.dev.axle.insure/?token=ur7EPeAa0km4wRlDrPJ4Z",
                    },
                    "success": true,
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/ignition",
            "request": {
              "body": {
                "properties": {
                  "metadata": {
                    "docs": "Optional object to store ephermeral information about the session, such as \`reservationTime\`. Will be returned in webhook events.",
                    "type": "optional<map<string, unknown>>",
                  },
                  "redirectUri": {
                    "docs": "The URI we should direct the user to after authenticating successfully.",
                    "type": "optional<string>",
                  },
                  "user": "optional<root.User>",
                  "webhookUri": {
                    "docs": "The URI we should send updates about this session or the resulting account to.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "StartIgnitionRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "",
              "type": "StartIgnitionResponse",
            },
          },
        },
      },
      "types": {
        "StartIgnitionResponse": {
          "docs": "",
          "properties": {
            "data": "StartIgnitionResponseData",
            "success": "root.Success",
          },
        },
        "StartIgnitionResponseData": {
          "docs": undefined,
          "properties": {
            "ignitionToken": {
              "docs": "The unique ID for the ignition session.",
              "type": "string",
            },
            "ignitionUri": {
              "docs": "The url you should direct the user to to link their account.",
              "type": "string",
            },
          },
        },
      },
    },
    "policies.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "GetPolicy": {
            "auth": false,
            "display-name": "Get Policy",
            "docs": "The Get Policy method returns a Policy object including high-level policy information (e.g., policy number) and any children objects (e.g., Coverages) associated with the Policy. Please note that this method will NOT refresh the Policy object.",
            "examples": [
              {
                "headers": {},
                "path-parameters": {
                  "id": "string",
                },
                "response": {
                  "body": {
                    "data": {
                      "account": "string",
                      "address": {},
                      "carrier": "string",
                      "coverages": [],
                      "createdAt": "string",
                      "effectiveDate": "string",
                      "expirationDate": "string",
                      "id": "string",
                      "insureds": [],
                      "isActive": true,
                      "modifiedAt": "string",
                      "policyNumber": "string",
                      "properties": [],
                      "refreshedAt": "string",
                      "thirdParties": [],
                      "type": "auto",
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/policies/{id}",
            "path-parameters": {
              "id": {
                "docs": "The unique ID for the requested policy. Returned by Get Account for each Policy associated with the Account.",
                "type": "string",
              },
            },
            "request": {
              "name": "GetPolicyRequest",
              "query-parameters": {
                "expand": {
                  "docs": "Set to *true* if you would like to expand related entities (e.g., account, policy). Defaults to *false*.",
                  "type": "optional<boolean>",
                },
              },
            },
            "response": {
              "docs": "",
              "type": "GetPolicyResponse",
            },
          },
        },
      },
      "types": {
        "GetPolicyResponse": {
          "docs": undefined,
          "properties": {
            "data": "optional<root.Policy>",
            "success": "optional<root.Success>",
          },
        },
      },
    },
    "tokens.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "ExchangeToken": {
            "auth": false,
            "display-name": "Exchange Token",
            "docs": "Exchange an authorization code for an access token. Ignition returns an authCode as a query parameter at the redirectUrl upon successful completion of the Ignition flow.

Auth codes are ephemeral and expire after 10 minutes, while accessTokens do not expire.",
            "examples": [
              {
                "headers": {},
                "name": "example-1",
                "request": {
                  "authCode": "string",
                },
                "response": {
                  "body": {
                    "data": {
                      "accessToken": "string",
                      "account": "string",
                      "policies": [],
                    },
                    "success": true,
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/token/exchange",
            "request": {
              "body": {
                "properties": {
                  "authCode": {
                    "docs": "The authorization code obtained after a user successfully links their account via Ignition. Returned as a query parameter at the redirectUri.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "ExchangeTokenRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "",
              "type": "ExchangeTokenResponse",
            },
          },
        },
      },
      "types": {
        "ExchangeTokenResponse": {
          "docs": "",
          "properties": {
            "data": "ExchangeTokenResponseData",
            "success": "root.Success",
          },
        },
        "ExchangeTokenResponseData": {
          "docs": undefined,
          "properties": {
            "accessToken": {
              "docs": "The token required for access to the requested Account and Policy objects.",
              "type": "string",
            },
            "account": {
              "docs": "The unique id for the Account object.",
              "type": "string",
            },
            "policies": {
              "docs": "List of unique ids for the Policy objects. If Ignition is configured to select a single policy (as is the default), the list will only contain 1 item.",
              "type": "list<unknown>",
            },
          },
        },
      },
    },
  },
  "packageMarkerFile": {
    "types": {
      "Account": {
        "docs": "An Account represents an account with an insurance carrier and includes high-level account information (e.g. name) and any Policy objects associated with the Account.",
        "properties": {
          "carrier": "string",
          "createdAt": "string",
          "email": "optional<string>",
          "firstName": "string",
          "id": "string",
          "lastName": "string",
          "modifiedAt": "string",
          "phone": "optional<string>",
          "policies": "list<string>",
          "refreshedAt": "string",
        },
      },
      "Address": {
        "docs": undefined,
        "properties": {
          "addressLine1": "optional<string>",
          "addressLine2": "optional<string>",
          "city": "optional<string>",
          "country": "optional<string>",
          "postalCode": "optional<string>",
          "state": "optional<string>",
        },
      },
      "Carrier": {
        "docs": undefined,
        "properties": {
          "address": "Address",
          "domain": "string",
          "id": "string",
          "logoUrl": "optional<string>",
          "modifiedAt": "string",
          "name": "string",
          "phone": "string",
        },
      },
      "Coverage": {
        "docs": undefined,
        "properties": {
          "code": "CoverageCode",
          "deductible": "optional<integer>",
          "label": "string",
          "limitPerAccident": "optional<integer>",
          "limitPerPerson": "optional<integer>",
          "property": "optional<string>",
        },
      },
      "CoverageCode": {
        "enum": [
          "BI",
          "PD",
          "UMBI",
          "UMPD",
          "UIMBI",
          "UIMPD",
          "COLL",
          "COMP",
        ],
      },
      "Error": {
        "docs": undefined,
        "properties": {
          "message": {
            "docs": "Provides a reason for why the operation failed, if available.",
            "type": "optional<string>",
          },
          "success": "optional<Success>",
        },
      },
      "Insured": {
        "docs": undefined,
        "properties": {
          "dateOfBirth": "optional<string>",
          "dateOfBirthYear": "optional<string>",
          "firstName": "string",
          "lastName": "string",
          "licenseNo": "optional<string>",
          "licenseState": "optional<string>",
          "licenseStatus": "optional<string>",
          "property": "optional<string>",
          "type": "optional<string>",
        },
      },
      "Policy": {
        "docs": "A Policy represents a specific policy associated with an Account and includes high-level policy information (e.g. policy number) and any children objects (e.g., coverages) associated with the policy.",
        "properties": {
          "account": "string",
          "address": "Address",
          "carrier": "string",
          "coverages": {
            "docs": "",
            "type": "list<Coverage>",
          },
          "createdAt": "string",
          "effectiveDate": "string",
          "expirationDate": "string",
          "id": "string",
          "insureds": {
            "docs": "",
            "type": "list<Insured>",
          },
          "isActive": "boolean",
          "modifiedAt": "string",
          "policyNumber": "string",
          "properties": {
            "docs": "",
            "type": "list<Property>",
          },
          "refreshedAt": "string",
          "thirdParties": {
            "docs": "",
            "type": "list<ThirdParty>",
          },
          "type": "PolicyType",
        },
      },
      "PolicyType": {
        "enum": [
          "auto",
          "motorcycle",
        ],
      },
      "Property": {
        "docs": undefined,
        "properties": {
          "data": "Vehicle",
          "id": "string",
          "type": "literal<"vehicle">",
        },
      },
      "Success": {
        "docs": "Indicates whether the operation was performed successfully.",
        "type": "boolean",
      },
      "ThirdParty": {
        "docs": undefined,
        "properties": {
          "address": "optional<Address>",
          "name": "string",
          "property": "optional<string>",
          "type": "ThirdPartyType",
        },
      },
      "ThirdPartyType": {
        "enum": [
          "lienholder",
          "lessor",
          "interest",
        ],
      },
      "User": {
        "docs": "User to attach to Ignition session. If user is set, unique \`id\` must be provided.",
        "properties": {
          "email": {
            "docs": "User's email address.",
            "type": "optional<string>",
          },
          "firstName": {
            "docs": "User's first name.",
            "type": "optional<string>",
          },
          "id": {
            "docs": "Your application's unique user id.",
            "type": "string",
          },
          "lastName": {
            "docs": "User's last name.",
            "type": "optional<string>",
          },
          "phone": {
            "docs": "User's phone number in E.164 format.",
            "type": "optional<string>",
          },
        },
      },
      "Vehicle": {
        "docs": undefined,
        "properties": {
          "bodyStyle": "optional<string>",
          "make": "string",
          "model": "string",
          "vin": "string",
          "year": "string",
        },
      },
    },
  },
  "rootApiFile": {
    "auth": "apiKeyAuth",
    "auth-schemes": {
      "apiKeyAuth": {
        "header": "x-access-token",
        "name": "apiKey",
        "prefix": undefined,
        "type": "string",
      },
    },
    "default-environment": "Production",
    "display-name": "Axle API",
    "environments": {
      "Production": "https://api.axle.insure",
      "Sandbox": "https://sandbox.axle.insure",
    },
    "error-discrimination": {
      "strategy": "status-code",
    },
    "headers": {
      "x-client-id": {
        "docs": "Your client ID. This will be shared with you during onboarding.",
        "name": "clientId",
        "type": "string",
      },
      "x-client-secret": {
        "docs": "Your secret API key. This will be shared with you during onboarding and should be considered sensitive - it’s a password after all!",
        "name": "clientSecret",
        "type": "string",
      },
    },
    "name": "api",
  },
}
`;
