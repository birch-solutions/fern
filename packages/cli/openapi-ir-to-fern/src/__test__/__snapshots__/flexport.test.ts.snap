// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`open api parser flexport simple 1`] = `
{
  "definitionFiles": {
    "__package__.yml": {
      "errors": {
        "BadRequestError": {
          "status-code": 400,
          "type": "unknown",
        },
      },
      "service": undefined,
      "types": {
        "AdditionalDates": {
          "docs": undefined,
          "properties": {
            "cargo_ready_date": {
              "docs": "Represents the date when the cargo on the leg is ready for pickup.",
              "type": "optional<string>",
            },
            "delivery_appointment_requested_at_date": {
              "docs": "Date at which the appointment was first requested",
              "type": "optional<string>",
            },
            "delivery_appointment_requested_date": {
              "docs": "Date of the actual appointment date that was requested in that initial request",
              "type": "optional<string>",
            },
            "delivery_appointment_scheduled_at_date": {
              "docs": "Date at which the appointment was confirmed by the DC",
              "type": "optional<string>",
            },
            "delivery_appointment_scheduled_date": {
              "docs": "Date of the actual confirmed appointment",
              "type": "optional<string>",
            },
            "delivery_completed": {
              "docs": "Date when the cargo for this leg was unloaded and fully received at the final destination",
              "type": "optional<string>",
            },
            "loaded_on_truck_date": {
              "docs": "Date when the cargo has been transloaded from an ocean container to a truck",
              "type": "optional<string>",
            },
          },
        },
        "Address": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": "Type of the object",
              "type": "optional<string>",
            },
            "city": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "country": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "country_code": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "ref": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "state": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "street_address": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "street_address2": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "timezone": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "unlocode": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "zip": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "AddressForRequestBody": {
          "docs": undefined,
          "properties": {
            "city": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "country_code": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "state": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "street_address": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "street_address2": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "unlocode": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "zip": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "AirBookingDetail": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": "Type of the object",
              "type": "optional<string>",
            },
            "destination_port": {
              "docs": undefined,
              "type": "optional<Place>",
            },
            "incoterm": {
              "docs": undefined,
              "type": "optional<AirBookingDetailIncoterm>",
            },
            "origin_port": {
              "docs": undefined,
              "type": "optional<Place>",
            },
            "product_descriptions": {
              "docs": undefined,
              "type": "optional<list<BookingHsCode>>",
            },
            "wants_delivery_service": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "wants_pickup_service": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
          },
        },
        "AirBookingDetailIncoterm": {
          "docs": undefined,
          "enum": [
            {
              "docs": undefined,
              "name": "EXW",
              "value": "EXW",
            },
            {
              "docs": undefined,
              "name": "FOB",
              "value": "FOB",
            },
            {
              "docs": undefined,
              "name": "FAS",
              "value": "FAS",
            },
            {
              "docs": undefined,
              "name": "FCA",
              "value": "FCA",
            },
            {
              "docs": undefined,
              "name": "CPT",
              "value": "CPT",
            },
            {
              "docs": undefined,
              "name": "CFR",
              "value": "CFR",
            },
            {
              "docs": undefined,
              "name": "CIF",
              "value": "CIF",
            },
            {
              "docs": undefined,
              "name": "CIP",
              "value": "CIP",
            },
            {
              "docs": undefined,
              "name": "DAT",
              "value": "DAT",
            },
            {
              "docs": undefined,
              "name": "DAP",
              "value": "DAP",
            },
            {
              "docs": undefined,
              "name": "DDP",
              "value": "DDP",
            },
            {
              "docs": undefined,
              "name": "DPU",
              "value": "DPU",
            },
          ],
        },
        "AirShipmentDetail": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": "Type of the object",
              "type": "optional<string>",
            },
            "chargeable_volume": {
              "docs": undefined,
              "type": "optional<Volume>",
            },
            "chargeable_weight": {
              "docs": undefined,
              "type": "optional<Weight>",
            },
            "house_airway_bill": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "master_airway_bill": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "AirShipmentLeg": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "flight_number": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "iata_code": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "icao_code": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "Airport": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": "Type of the object",
              "type": "optional<string>",
            },
            "country_code": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "iata_code": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "icao_code": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "port_code": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "Booking": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": "Type of the object",
              "type": "optional<string>",
            },
            "air_booking": {
              "docs": undefined,
              "type": "optional<AirBookingDetail>",
            },
            "booking_line_items": {
              "docs": undefined,
              "type": "optional<BookingLineItemCollectionRef>",
            },
            "cargo": {
              "docs": undefined,
              "type": "optional<Cargo>",
            },
            "cargo_ready_date": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "consignee_entity": {
              "docs": undefined,
              "type": "optional<CompanyEntity>",
            },
            "created_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "delivery_date": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "destination_address": {
              "docs": undefined,
              "type": "optional<Address>",
            },
            "id": {
              "docs": "Unique identifier for the booking",
              "type": "optional<integer>",
            },
            "metadata": {
              "docs": undefined,
              "type": "optional<Metadata>",
            },
            "name": {
              "docs": "The name of the booking",
              "type": "optional<string>",
            },
            "notify_party": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "ocean_booking": {
              "docs": undefined,
              "type": "optional<OceanBookingDetail>",
            },
            "origin_address": {
              "docs": undefined,
              "type": "optional<Address>",
            },
            "quote_status": {
              "docs": undefined,
              "type": "optional<BookingQuoteStatus>",
            },
            "shipment": {
              "docs": undefined,
              "type": "optional<ShipmentRef>",
            },
            "shipper_entity": {
              "docs": undefined,
              "type": "optional<CompanyEntity>",
            },
            "special_instructions": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "status": {
              "docs": undefined,
              "type": "optional<BookingStatus>",
            },
            "transportation_mode": {
              "docs": undefined,
              "type": "optional<TransportationMode>",
            },
            "trucking_booking": {
              "docs": undefined,
              "type": "optional<TruckingBookingDetail>",
            },
            "wants_export_customs_service": {
              "docs": "Determines if the booking requires Flexport to provide export customs services.",
              "type": "optional<boolean>",
            },
            "wants_import_customs_service": {
              "docs": "Determines if the booking requires Flexport to provide import customs services.",
              "type": "optional<boolean>",
            },
          },
        },
        "BookingAmendment": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": "Type of the object",
              "type": "optional<string>",
            },
            "booking_id": {
              "docs": "Unique identifier for the booking that this amendment is for",
              "type": "optional<integer>",
            },
            "id": {
              "docs": "Unique identifier for the booking amendment",
              "type": "optional<integer>",
            },
            "is_pending": {
              "docs": "Depending on various conditions, the requested booking amendment may either be accepted and applied instantly, or it may require Flexport approval. 'is_pending' is set to true if approval is required.",
              "type": "optional<boolean>",
            },
            "new_cargo": {
              "docs": "The requested new cargo, possibly including package details",
              "type": "optional<Cargo>",
            },
            "new_cargo_ready_date": {
              "docs": "The requested new cargo ready date",
              "type": "optional<string>",
            },
            "new_container_counts": {
              "docs": "The requested new container count values",
              "type": "optional<ContainerCounts>",
            },
            "new_metadata": {
              "docs": "The requested new metadata",
              "type": "optional<Metadata>",
            },
            "new_name": {
              "docs": "The requested new name of the booking",
              "type": "optional<string>",
            },
            "new_origin_address": {
              "docs": "The requested new origin address",
              "type": "optional<Address>",
            },
            "new_port_of_loading": {
              "docs": "The requested new origin port (port of loading)",
              "type": "optional<Address>",
            },
            "new_port_of_unloading": {
              "docs": "The requested new destination port (port of unloading)",
              "type": "optional<Address>",
            },
            "new_product_descriptions": {
              "docs": "New product (HS code) information",
              "type": "optional<list<BookingAmendmentHsCode>>",
            },
            "new_wants_bco": {
              "docs": "The requested new wants-bco value",
              "type": "optional<boolean>",
            },
            "new_wants_flexport_freight": {
              "docs": "The requested new wants-flexport-freight value",
              "type": "optional<boolean>",
            },
            "new_wants_import_customs_service": {
              "docs": "The requested new wants-import-customs-service value",
              "type": "optional<boolean>",
            },
            "new_wants_pickup_service": {
              "docs": "The requested new wants-pickup value",
              "type": "optional<boolean>",
            },
          },
        },
        "BookingAmendmentCreateResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<BookingAmendment>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "BookingAmendmentHsCode": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": "String representing the object’s type. Always \`/booking_amendment_product_description\` for this object.",
              "type": "optional<string>",
            },
            "description": {
              "docs": "Always required. English description of product in booking.",
              "type": "optional<string>",
            },
            "description_for_export_customs": {
              "docs": "Required if booking if origin address or origin port is in Mainland China. Chinese description of product in booking.",
              "type": "optional<string>",
            },
            "hs_code": {
              "docs": undefined,
              "type": "optional<HsCode>",
            },
          },
        },
        "BookingCreateResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<Booking>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "BookingHsCode": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": "String representing the object’s type. Always \`/product_descriptions\` for this object.",
              "type": "optional<string>",
            },
            "description": {
              "docs": "Always required. English description of product in booking.",
              "type": "optional<string>",
            },
            "description_for_export_customs": {
              "docs": "Required if booking if origin address or origin port is in Mainland China. Chinese description of product in booking.",
              "type": "optional<string>",
            },
            "description_for_export_customs_locale": {
              "docs": "Required if booking if origin address or origin port is in Mainland China. Code for the locale for description_for_export_customs. Currently only \`zh_CN\`.",
              "type": "optional<string>",
            },
            "hs_code": {
              "docs": undefined,
              "type": "optional<HsCode>",
            },
          },
        },
        "BookingLineItem": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": "Type of the object",
              "type": "optional<string>",
            },
            "booking": {
              "docs": undefined,
              "type": "optional<BookingRef>",
            },
            "id": {
              "docs": "Unique identifier for the booking line item",
              "type": "optional<integer>",
            },
            "purchase_order_line_item": {
              "docs": undefined,
              "type": "optional<PurchaseOrderLineItemRef>",
            },
            "units": {
              "docs": "Number of units of purchase_order_line_item booked on booking",
              "type": "optional<integer>",
            },
          },
        },
        "BookingLineItemCollectionRef": {
          "docs": "[Expandable API link.](https://apidocs.flexport.com/v3/tag/Expansion)",
          "properties": {
            "_object": {
              "docs": "Type of the object",
              "type": "optional<string>",
            },
            "link": {
              "docs": "URL to fetch list of objects.",
              "type": "optional<string>",
            },
            "ref_type": {
              "docs": "Type of the object in this list.",
              "type": "optional<string>",
            },
          },
        },
        "BookingLineItemCreateResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<BookingLineItem>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "BookingLineItemIndexRequestDirection": {
          "docs": undefined,
          "enum": [
            {
              "docs": undefined,
              "name": "asc",
              "value": "asc",
            },
            {
              "docs": undefined,
              "name": "desc",
              "value": "desc",
            },
          ],
        },
        "BookingLineItemIndexResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<BookingLineItemIndexResponseData>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "BookingLineItemIndexResponseData": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<list<BookingLineItem>>",
            },
            "next": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "prev": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "BookingLineItemShowResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<BookingLineItem>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "BookingQuoteStatus": {
          "docs": undefined,
          "enum": [
            {
              "docs": undefined,
              "name": "pending_quote",
              "value": "pending_quote",
            },
            {
              "docs": undefined,
              "name": "sent_quote",
              "value": "sent_quote",
            },
            {
              "docs": undefined,
              "name": "received_quote",
              "value": "received_quote",
            },
            {
              "docs": undefined,
              "name": "shared_quote",
              "value": "shared_quote",
            },
            {
              "docs": undefined,
              "name": "expired_quote",
              "value": "expired_quote",
            },
            {
              "docs": undefined,
              "name": "ready_to_share_quote",
              "value": "ready_to_share_quote",
            },
            {
              "docs": undefined,
              "name": "accepted_quote",
              "value": "accepted_quote",
            },
            {
              "docs": undefined,
              "name": "rejected_quote",
              "value": "rejected_quote",
            },
            {
              "docs": undefined,
              "name": "requoted_quote",
              "value": "requoted_quote",
            },
            {
              "docs": undefined,
              "name": "archived_quote",
              "value": "archived_quote",
            },
          ],
        },
        "BookingRef": {
          "docs": "[Expandable API link.](https://apidocs.flexport.com/v3/tag/Expansion)",
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "link": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "ref_type": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "BookingShowResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<Booking>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "BookingStatus": {
          "docs": undefined,
          "enum": [
            {
              "docs": undefined,
              "name": "archived",
              "value": "archived",
            },
            {
              "docs": undefined,
              "name": "draft",
              "value": "draft",
            },
            {
              "docs": undefined,
              "name": "submitted",
              "value": "submitted",
            },
            {
              "docs": undefined,
              "name": "booked",
              "value": "booked",
            },
            {
              "docs": undefined,
              "name": "shipment",
              "value": "shipment",
            },
          ],
        },
        "BookingsIndexRequestDirection": {
          "docs": undefined,
          "enum": [
            {
              "docs": undefined,
              "name": "asc",
              "value": "asc",
            },
            {
              "docs": undefined,
              "name": "desc",
              "value": "desc",
            },
          ],
        },
        "BookingsIndexRequestFStatus": {
          "docs": undefined,
          "enum": [
            {
              "docs": undefined,
              "name": "booked",
              "value": "booked",
            },
            {
              "docs": undefined,
              "name": "submitted",
              "value": "submitted",
            },
          ],
        },
        "BookingsIndexRequestSort": {
          "docs": undefined,
          "enum": [
            {
              "docs": undefined,
              "name": "cargo_ready_date",
              "value": "cargo_ready_date",
            },
            {
              "docs": undefined,
              "name": "created_at",
              "value": "created_at",
            },
          ],
        },
        "BookingsIndexResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<BookingsIndexResponseData>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "BookingsIndexResponseData": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<list<Booking>>",
            },
            "next": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "prev": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "CarbonCalculation": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": "Type of the object",
              "type": "optional<string>",
            },
            "co2e_emissions": {
              "docs": undefined,
              "type": "optional<Weight>",
            },
          },
        },
        "CarbonCalculationCreateResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<CarbonCalculation>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "Cargo": {
          "docs": "With cargo you have two options, detailed or simple. These are both expressed directly on the cargo object. For detailed cargo, \`shipping_units\` is required, and \`weight\` and \`volume\` is required in the \`cargo\` object or the \`shipping_units\` object. For simple cargo, \`shipping_units\` is required, but only one should be specified, and \`weight\` and \`volume\` are required in the \`cargo\` object.",
          "properties": {
            "_object": {
              "docs": "String representing the object’s type. Always \`/cargo\` for this object.",
              "type": "optional<string>",
            },
            "contains_hazmat": {
              "docs": "Required. Whether the cargo contains hazardous materials.",
              "type": "optional<boolean>",
            },
            "contains_li_ion": {
              "docs": "Required. Whether the cargo contains lithium-ion batteries.",
              "type": "optional<boolean>",
            },
            "contains_magnets": {
              "docs": "Required. Whether the cargo contains magnets.",
              "type": "optional<boolean>",
            },
            "contains_non_li_ion_battery": {
              "docs": "Required. Whether the cargo contains non-lithium-ion batteries, e.g. lithium batteries.",
              "type": "optional<boolean>",
            },
            "contains_other_dangerous_goods": {
              "docs": "Required. Whether the cargo contains other non-hazmat, non-magnet, non-battery dangerous goods.",
              "type": "optional<boolean>",
            },
            "lithium_batteries_packing_types": {
              "docs": "Required if \`contains_li_ion\` is \`true\`. List of ways in which lithium-ion batteries will be packed for this booking. This can be a subset of \`packed_loose\`, \`packed_with_equipment\`, \`contained_in_equipment\`, and \`contained_in_battery_powered_vehicle\`.",
              "type": "optional<list<CargoLithiumBatteriesPackingTypesItem>>",
            },
            "marks_and_numbers": {
              "docs": "Optional. Identifying markings and numbers that are visible on the cargo.",
              "type": "optional<string>",
            },
            "shipping_units": {
              "docs": undefined,
              "type": "optional<list<ShippingUnit>>",
            },
            "volume": {
              "docs": undefined,
              "type": "optional<Volume>",
            },
            "weight": {
              "docs": undefined,
              "type": "optional<Weight>",
            },
          },
        },
        "CargoLithiumBatteriesPackingTypesItem": {
          "docs": undefined,
          "enum": [
            {
              "docs": undefined,
              "name": "packed_loose",
              "value": "packed_loose",
            },
            {
              "docs": undefined,
              "name": "packed_with_equipment",
              "value": "packed_with_equipment",
            },
            {
              "docs": undefined,
              "name": "contained_in_equipment",
              "value": "contained_in_equipment",
            },
            {
              "docs": undefined,
              "name": "contained_in_battery_powered_vehicles",
              "value": "contained_in_battery_powered_vehicles",
            },
          ],
        },
        "CommercialInvoice": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": "Type of the object. Always /commercial_invoice for this object.",
              "type": "optional<string>",
            },
            "currency": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "digitization_status": {
              "docs": "Status about if the digitization process for this commercial invoice is complete. If it is not complete, then the commercial invoice should be considered a draft that can change.",
              "type": "optional<CommercialInvoiceDigitizationStatus>",
            },
            "id": {
              "docs": "Unique identifier for the commercial invoice.",
              "type": "optional<string>",
            },
            "invoice_date": {
              "docs": "Represents date of the invoice. This can be null.",
              "type": "optional<string>",
            },
            "invoice_number": {
              "docs": "Invoice number on the commercial invoice, typically used for display purposes.",
              "type": "optional<string>",
            },
            "involved_parties": {
              "docs": undefined,
              "type": "optional<list<CustomsInvolvedParty>>",
            },
            "is_related_parties": {
              "docs": "Whether there was a related parties transaction as defined by CBP.",
              "type": "optional<boolean>",
            },
            "line_items": {
              "docs": undefined,
              "type": "optional<list<CommercialInvoiceLineItem>>",
            },
            "manufacturer_addresses": {
              "docs": undefined,
              "type": "optional<list<Address>>",
            },
            "metadata": {
              "docs": undefined,
              "type": "optional<Metadata>",
            },
            "order_number": {
              "docs": "Represents the which order the invoice is linked to. This can be null.",
              "type": "optional<string>",
            },
            "shipment": {
              "docs": undefined,
              "type": "optional<ShipmentRef>",
            },
            "total_unit_count": {
              "docs": "Total units on this commercial invoice.",
              "type": "optional<string>",
            },
            "total_value": {
              "docs": undefined,
              "type": "optional<Money>",
            },
            "total_volume": {
              "docs": undefined,
              "type": "optional<Volume>",
            },
            "total_weight": {
              "docs": undefined,
              "type": "optional<Weight>",
            },
          },
        },
        "CommercialInvoiceCollectionRef": {
          "docs": "[Expandable API link.](https://apidocs.flexport.com/v3/tag/Expansion)",
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "link": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "ref_type": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "CommercialInvoiceDigitizationStatus": {
          "docs": "Status about if the digitization process for this commercial invoice is complete. If it is not complete, then the commercial invoice should be considered a draft that can change.",
          "enum": [
            {
              "docs": undefined,
              "name": "pending",
              "value": "pending",
            },
            {
              "docs": undefined,
              "name": "reviewed",
              "value": "reviewed",
            },
            {
              "docs": undefined,
              "name": "complete",
              "value": "complete",
            },
          ],
        },
        "CommercialInvoiceLineItem": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": "Type of the object. Always /commercial_invoice_line_item for this object.",
              "type": "optional<string>",
            },
            "container_number": {
              "docs": undefined,
              "type": "optional<CommercialInvoiceLineItemContainerNumber>",
            },
            "document_line_number": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "first_sale_value": {
              "docs": undefined,
              "type": "optional<Money>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "manufacturer_address": {
              "docs": undefined,
              "type": "optional<Address>",
            },
            "manufacturer_name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "metadata": {
              "docs": undefined,
              "type": "optional<Metadata>",
            },
            "net_net_weight": {
              "docs": "Weight excluding packaging, tags, labels, instruction manuals, etc.",
              "type": "optional<Weight>",
            },
            "net_value": {
              "docs": undefined,
              "type": "optional<Money>",
            },
            "net_weight": {
              "docs": "Weight excluding packaging.",
              "type": "optional<Weight>",
            },
            "po_line_item_number": {
              "docs": "Purchase order line item number",
              "type": "optional<string>",
            },
            "price_per_unit": {
              "docs": undefined,
              "type": "optional<Money>",
            },
            "product": {
              "docs": undefined,
              "type": "optional<ProductRef>",
            },
            "purchase_order_number": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "total_units": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "value": {
              "docs": undefined,
              "type": "optional<Money>",
            },
            "volume": {
              "docs": undefined,
              "type": "optional<Volume>",
            },
            "weight": {
              "docs": "Weight including any associated packaging (padding, foam, etc).",
              "type": "optional<Weight>",
            },
          },
        },
        "CommercialInvoiceLineItemContainerNumber": {
          "docs": undefined,
          "properties": {
            "commercial_invoice_line_item_id": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "container_number": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "created_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "deleted_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "updated_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "CommercialInvoicesCreateResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<CommercialInvoice>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "CommercialInvoicesIndexResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<CommercialInvoicesIndexResponseData>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "CommercialInvoicesIndexResponseData": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<list<CommercialInvoice>>",
            },
            "next": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "prev": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "CommercialInvoicesShowResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<CommercialInvoice>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "CommercialInvoicesUpdateResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<CommercialInvoice>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "Company": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": "Type of the object. Always /network/company for this object.",
              "type": "optional<string>",
            },
            "contacts": {
              "docs": undefined,
              "type": "optional<GenericCollectionRef>",
            },
            "editable": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "entities": {
              "docs": undefined,
              "type": "optional<list<CompanyEntity>>",
            },
            "id": {
              "docs": "Unique identifier for the company",
              "type": "optional<string>",
            },
            "locations": {
              "docs": undefined,
              "type": "optional<GenericCollectionRef>",
            },
            "metadata": {
              "docs": undefined,
              "type": "optional<Metadata>",
            },
            "name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "ref": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "CompanyEntity": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": "Type of the object",
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "mailing_address": {
              "docs": undefined,
              "type": "optional<Address>",
            },
            "name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "ref": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "vat_numbers": {
              "docs": undefined,
              "type": "optional<list<VatNumber>>",
            },
          },
        },
        "CompanyEntityIndexResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<CompanyEntityIndexResponseData>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "CompanyEntityIndexResponseData": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<list<CompanyEntity>>",
            },
            "next": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "prev": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "total_count": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "CompanyEntityRef": {
          "docs": "[Expandable API link.](https://apidocs.flexport.com/v3/tag/Expansion)",
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "link": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "ref_type": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "Contact": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": "Type of the object. Always /network/contact for this object.",
              "type": "optional<string>",
            },
            "company": {
              "docs": "[Expandable API link.](https://apidocs.flexport.com/v3/tag/Expansion)",
              "type": "optional<ContactCompany>",
            },
            "email": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": "Unique identifier for the contact",
              "type": "optional<string>",
            },
            "locations": {
              "docs": undefined,
              "type": "optional<GenericCollectionRef>",
            },
            "name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "phone_number": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "ContactCompany": {
          "docs": "[Expandable API link.](https://apidocs.flexport.com/v3/tag/Expansion)",
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "link": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "ref_type": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "ContainerCollectionRef": {
          "docs": "[Expandable API link.](https://apidocs.flexport.com/v3/tag/Expansion)",
          "properties": {
            "_object": {
              "docs": "Type of the object",
              "type": "optional<string>",
            },
            "link": {
              "docs": "URL to fetch list of objects.",
              "type": "optional<string>",
            },
            "ref_type": {
              "docs": "Type of the object in this list.",
              "type": "optional<string>",
            },
          },
        },
        "ContainerCounts": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": "String representing the object’s type. Always \`/container_counts\` for this object.",
              "type": "optional<string>",
            },
            "forty_five_ft_hc": {
              "docs": "Quantity of 45 ft HC containers requested.",
              "type": "optional<integer>",
            },
            "forty_ft": {
              "docs": "Quantity of 40 ft containers requested.",
              "type": "optional<integer>",
            },
            "forty_ft_hc": {
              "docs": "Quantity of 40 ft HC containers requested.",
              "type": "optional<integer>",
            },
            "twenty_ft": {
              "docs": "Quantity of 20 ft containers requested.",
              "type": "optional<integer>",
            },
          },
        },
        "ContainerLegCollectionRef": {
          "docs": "[Expandable API link.](https://apidocs.flexport.com/v3/tag/Expansion)",
          "properties": {
            "_object": {
              "docs": "Type of the object",
              "type": "optional<string>",
            },
            "link": {
              "docs": "URL to fetch list of objects.",
              "type": "optional<string>",
            },
            "ref_type": {
              "docs": "Type of the object in this list.",
              "type": "optional<string>",
            },
          },
        },
        "ContainerListResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<ContainerListResponseData>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "ContainerListResponseData": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<list<ShipmentContainer>>",
            },
            "next": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "prev": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "ContainerRef": {
          "docs": "[Expandable API link.](https://apidocs.flexport.com/v3/tag/Expansion)",
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "link": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "ref_type": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "ContainerShowResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<ShipmentContainer>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "CoordinatesCreate": {
          "docs": undefined,
          "properties": {
            "latitude": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "longitude": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "CreateAirBooking": {
          "docs": "If a non-null value is passed in for 'air_booking', then the new booking will be assumed to be an air booking, even if the 'ocean_booking' or 'trucking_booking' fields are set.",
          "properties": {
            "destination_port_iata_code": {
              "docs": "Optional, provide one of \`destination_port_us_cbp_port_code\`, \`destination_port_loc_code\`, \`destination_port_iata_code\`, or \`destination_port_icao_code\`. Unique airport reference code used by IATA.",
              "type": "optional<string>",
            },
            "destination_port_icao_code": {
              "docs": "Optional, provide one of \`destination_port_us_cbp_port_code\`, \`destination_port_loc_code\`, \`destination_port_iata_code\`, or \`destination_port_icao_code\`. Unique airport reference code used by ICAO.",
              "type": "optional<string>",
            },
            "destination_port_loc_code": {
              "docs": "Optional, provide one of \`destination_port_us_cbp_port_code\`, \`destination_port_loc_code\`, \`destination_port_iata_code\`, or \`destination_port_icao_code\`. Unique port reference code published in the UN/LOCODE.",
              "type": "optional<string>",
            },
            "destination_port_us_cbp_port_code": {
              "docs": "Optional, provide one of \`destination_port_us_cbp_port_code\`, \`destination_port_loc_code\`, \`destination_port_iata_code\`, or \`destination_port_icao_code\`. Unique port reference code used by US CBP, not applicable for non-US airports.",
              "type": "optional<string>",
            },
            "incoterm": {
              "docs": undefined,
              "type": "CreateAirBookingIncoterm",
            },
            "origin_port_iata_code": {
              "docs": "One of \`origin_port_us_cbp_port_code\`, \`origin_port_loc_code\`, \`origin_port_iata_code\`, or \`origin_port_icao_code\` is required if \`pickup_service\` = \`no\`. Unique airport reference code used by IATA.",
              "type": "optional<string>",
            },
            "origin_port_icao_code": {
              "docs": "One of \`origin_port_us_cbp_port_code\`, \`origin_port_loc_code\`, \`origin_port_iata_code\`, or \`origin_port_icao_code\` is required if \`pickup_service\` = \`no\`. Unique airport reference code used by ICAO.",
              "type": "optional<string>",
            },
            "origin_port_loc_code": {
              "docs": "One of \`origin_port_us_cbp_port_code\`, \`origin_port_loc_code\`, \`origin_port_iata_code\`, or \`origin_port_icao_code\` is required if \`pickup_service\` = \`no\`. Unique port reference code published in the UN/LOCODE.",
              "type": "optional<string>",
            },
            "origin_port_us_cbp_port_code": {
              "docs": "One of \`origin_port_us_cbp_port_code\`, \`origin_port_loc_code\`, \`origin_port_iata_code\`, or \`origin_port_icao_code\` is required if \`pickup_service\` = \`no\`. Unique port reference code used by US CBP, not applicable for non-US airports.",
              "type": "optional<string>",
            },
            "product_descriptions": {
              "docs": undefined,
              "type": "list<CreateBookingHsCode>",
            },
            "wants_delivery_service": {
              "docs": "Optional. Whether transportation is requested from the destination port to destination address. If unknown, then leave as \`null\`.",
              "type": "optional<boolean>",
            },
            "wants_pickup_service": {
              "docs": "Always required. Whether transportation is requested from the origin location to the port.",
              "type": "boolean",
            },
          },
        },
        "CreateAirBookingIncoterm": {
          "docs": undefined,
          "enum": [
            {
              "docs": undefined,
              "name": "EXW",
              "value": "EXW",
            },
            {
              "docs": undefined,
              "name": "FOB",
              "value": "FOB",
            },
            {
              "docs": undefined,
              "name": "FAS",
              "value": "FAS",
            },
            {
              "docs": undefined,
              "name": "FCA",
              "value": "FCA",
            },
            {
              "docs": undefined,
              "name": "CPT",
              "value": "CPT",
            },
            {
              "docs": undefined,
              "name": "CFR",
              "value": "CFR",
            },
            {
              "docs": undefined,
              "name": "CIF",
              "value": "CIF",
            },
            {
              "docs": undefined,
              "name": "CIP",
              "value": "CIP",
            },
            {
              "docs": undefined,
              "name": "DAT",
              "value": "DAT",
            },
            {
              "docs": undefined,
              "name": "DAP",
              "value": "DAP",
            },
            {
              "docs": undefined,
              "name": "DDP",
              "value": "DDP",
            },
            {
              "docs": undefined,
              "name": "DPU",
              "value": "DPU",
            },
          ],
        },
        "CreateBookingAmendmentHsCode": {
          "docs": undefined,
          "properties": {
            "description": {
              "docs": "Always required. English description of product in booking.",
              "type": "string",
            },
            "description_for_export_customs": {
              "docs": "Required if booking if origin address or origin port is in Mainland China. Chinese description of product in booking.",
              "type": "optional<string>",
            },
            "hs_code": {
              "docs": "The six digit code under which the product should be classified for export customs.",
              "type": "string",
            },
          },
        },
        "CreateBookingDeclaredAsStrategy": {
          "docs": "Required when origin or destination port is Hong Kong. Does your shipment contain goods subject to export control regulations? Export Control Regulations include dual use item control, Hong Kong strategic commodity control, US and EU export control, etc.",
          "enum": [
            {
              "docs": undefined,
              "name": "yes",
              "value": "yes",
            },
            {
              "docs": undefined,
              "name": "no",
              "value": "no",
            },
            {
              "docs": undefined,
              "name": "notsure",
              "value": "notsure",
            },
          ],
        },
        "CreateBookingHsCode": {
          "docs": undefined,
          "properties": {
            "description": {
              "docs": "Always required. English description of product in booking.",
              "type": "string",
            },
            "description_for_export_customs": {
              "docs": "Required if booking if origin address or origin port is in Mainland China. Chinese description of product in booking.",
              "type": "optional<string>",
            },
            "description_for_export_customs_locale": {
              "docs": "Required if booking if origin address or origin port is in Mainland China. Code for the locale for description_for_export_customs. Currently only \`zh_CN\`.",
              "type": "optional<string>",
            },
            "hs_code": {
              "docs": "The six digit code under which the product should be classified for export customs.",
              "type": "string",
            },
          },
        },
        "CreateCarbonCalculationFlightType": {
          "docs": "For \`transportation_mode: air\`, the type of plane used. One of \`freighter\`, \`belly_freighter\`, or \`unknown\`. Defaults to \`unknown\`.",
          "enum": [
            {
              "docs": undefined,
              "name": "freighter",
              "value": "freighter",
            },
            {
              "docs": undefined,
              "name": "belly_freighter",
              "value": "belly_freighter",
            },
            {
              "docs": undefined,
              "name": "unknown",
              "value": "unknown",
            },
          ],
        },
        "CreateCarbonCalculationTransportationMode": {
          "docs": "The mode of transportation for calculation. One of \`air\`, \`ocean\`, \`truck\`, or \`rail\`. If \`transportation_mode\` is \`truck\`, \`ocean\`, or \`rail\`, \`country_code\` in both \`origin_address\` and \`destination_address\` is required.",
          "enum": [
            {
              "docs": undefined,
              "name": "air",
              "value": "air",
            },
            {
              "docs": undefined,
              "name": "ocean",
              "value": "ocean",
            },
            {
              "docs": undefined,
              "name": "truck",
              "value": "truck",
            },
            {
              "docs": undefined,
              "name": "rail",
              "value": "rail",
            },
          ],
        },
        "CreateCarbonCalculationTruckingServiceType": {
          "docs": "For \`transportation_mode: truck\`, the type of service used. One of \`ftl\`, \`ltl\`, \`drayage\`, \`cartage\`, \`last_mile\`, \`airport_transfer\`, or \`air_cartage\`.",
          "enum": [
            {
              "docs": undefined,
              "name": "ftl",
              "value": "ftl",
            },
            {
              "docs": undefined,
              "name": "ltl",
              "value": "ltl",
            },
            {
              "docs": undefined,
              "name": "drayage",
              "value": "drayage",
            },
            {
              "docs": undefined,
              "name": "cartage",
              "value": "cartage",
            },
            {
              "docs": undefined,
              "name": "last_mile",
              "value": "last_mile",
            },
            {
              "docs": undefined,
              "name": "airport_transfer",
              "value": "airport_transfer",
            },
            {
              "docs": undefined,
              "name": "air_cartage",
              "value": "air_cartage",
            },
          ],
        },
        "CreateCargo": {
          "docs": "With cargo you have two options, detailed or simple. These are both expressed directly on the cargo object. For detailed cargo, \`shipping_units\` is required, and \`weight\` and \`volume\` is required in the \`cargo\` object or the \`shipping_units\` object. For simple cargo, \`shipping_units\` is required, but only one should be specified, and \`weight\` and \`volume\` are required in the \`cargo\` object.",
          "properties": {
            "contains_hazmat": {
              "docs": "Required. Whether the cargo contains hazardous materials.",
              "type": "optional<boolean>",
            },
            "contains_li_ion": {
              "docs": "Required. Whether the cargo contains lithium-ion batteries.",
              "type": "optional<boolean>",
            },
            "contains_magnets": {
              "docs": "Required. Whether the cargo contains magnets.",
              "type": "optional<boolean>",
            },
            "contains_non_li_ion_battery": {
              "docs": "Required. Whether the cargo contains non-lithium-ion batteries, e.g. lithium batteries.",
              "type": "optional<boolean>",
            },
            "contains_other_dangerous_goods": {
              "docs": "Required. Whether the cargo contains other non-hazmat, non-magnet, non-battery dangerous goods.",
              "type": "optional<boolean>",
            },
            "lithium_batteries_packing_types": {
              "docs": "Required if \`contains_li_ion\` is \`true\`. List of ways in which lithium-ion batteries will be packed for this booking. This can be a subset of \`packed_loose\`, \`packed_with_equipment\`, \`contained_in_equipment\`, and \`contained_in_battery_powered_vehicle\`.",
              "type": "optional<list<CreateCargoLithiumBatteriesPackingTypesItem>>",
            },
            "marks_and_numbers": {
              "docs": "Optional. Identifying markings and numbers that are visible on the cargo.",
              "type": "optional<string>",
            },
            "shipping_units": {
              "docs": undefined,
              "type": "optional<list<ShippingUnitCreate>>",
            },
            "volume": {
              "docs": undefined,
              "type": "optional<VolumeCreate>",
            },
            "weight": {
              "docs": undefined,
              "type": "optional<WeightCreate>",
            },
          },
        },
        "CreateCargoLithiumBatteriesPackingTypesItem": {
          "docs": undefined,
          "enum": [
            {
              "docs": undefined,
              "name": "packed_loose",
              "value": "packed_loose",
            },
            {
              "docs": undefined,
              "name": "packed_with_equipment",
              "value": "packed_with_equipment",
            },
            {
              "docs": undefined,
              "name": "contained_in_equipment",
              "value": "contained_in_equipment",
            },
            {
              "docs": undefined,
              "name": "contained_in_battery_powered_vehicles",
              "value": "contained_in_battery_powered_vehicles",
            },
          ],
        },
        "CreateCommercialInvoiceLineItem": {
          "docs": undefined,
          "properties": {
            "container_number": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "country_of_origin": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "document_line_number": {
              "docs": "Document line number that this data represents. Counting from 1.",
              "type": "optional<integer>",
            },
            "first_sale_value": {
              "docs": undefined,
              "type": "optional<MoneyCreate>",
            },
            "gross_weight": {
              "docs": undefined,
              "type": "optional<WeightCreate>",
            },
            "manufacturer_ref": {
              "docs": "[DEPRECATED] Your custom string used to refer to a manufacturer location.",
              "type": "optional<string>",
            },
            "metadata": {
              "docs": undefined,
              "type": "optional<MetadataCreate>",
            },
            "net_net_weight": {
              "docs": undefined,
              "type": "optional<WeightCreate>",
            },
            "net_value": {
              "docs": undefined,
              "type": "optional<MoneyCreate>",
            },
            "net_weight": {
              "docs": undefined,
              "type": "optional<WeightCreate>",
            },
            "po_line_item_number": {
              "docs": "Purchase order line item number",
              "type": "optional<string>",
            },
            "price_per_unit": {
              "docs": undefined,
              "type": "MoneyCreate",
            },
            "product_sku": {
              "docs": "The SKU of the product associated with this line item as it is stored in Flexport's system.",
              "type": "string",
            },
            "purchase_order_number": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "quantity": {
              "docs": undefined,
              "type": "CreateQuantity",
            },
            "value": {
              "docs": undefined,
              "type": "MoneyCreate",
            },
            "volume": {
              "docs": undefined,
              "type": "optional<VolumeCreate>",
            },
          },
        },
        "CreateContainerCounts": {
          "docs": undefined,
          "properties": {
            "forty_five_ft_hc": {
              "docs": "Quantity of 45 ft HC containers requested.",
              "type": "optional<integer>",
            },
            "forty_ft": {
              "docs": "Quantity of 40 ft containers requested.",
              "type": "optional<integer>",
            },
            "forty_ft_hc": {
              "docs": "Quantity of 40 ft HC containers requested.",
              "type": "optional<integer>",
            },
            "twenty_ft": {
              "docs": "Quantity of 20 ft containers requested.",
              "type": "optional<integer>",
            },
          },
        },
        "CreateDocument": {
          "docs": undefined,
          "properties": {
            "document": {
              "docs": "Document represented in a strict Base64-encoded string.",
              "type": "string",
            },
            "document_type": {
              "docs": "Type of document.",
              "type": "string",
            },
            "file_name": {
              "docs": "Name of the document.",
              "type": "string",
            },
            "memo": {
              "docs": "Document memo or message.",
              "type": "optional<string>",
            },
            "mime_type": {
              "docs": "A two type descriptor describing the media type associated with the document.",
              "type": "string",
            },
            "shipment_id": {
              "docs": "Corresponding shipment for the document.",
              "type": "integer",
            },
            "user_email": {
              "docs": "Email of the user that will be listed as the document's uploader. If omitted, it will default to the company's admin.",
              "type": "optional<string>",
            },
          },
        },
        "CreateInvolvedParty": {
          "docs": undefined,
          "properties": {
            "company_entity_ref": {
              "docs": "Your custom string used to refer to the company entity. Can be used to look up or reference the company entity later on.",
              "type": "string",
            },
            "type": {
              "docs": undefined,
              "type": "string",
            },
          },
        },
        "CreateLineItem": {
          "docs": undefined,
          "properties": {
            "assigned_party_ref": {
              "docs": "The party that this line item is assigned to. Useful if assigning line items to different factories under a vendor, for example.",
              "type": "optional<string>",
            },
            "cargo_ready_date": {
              "docs": "Required if there is no cargo_ready_date in the line item's purchase order. Date when cargo is ready for pickup at the origin location.",
              "type": "optional<string>",
            },
            "destination_locations": {
              "docs": "List of destinations locations for this line item and the number of units to be sent",
              "type": "optional<list<CreateLineItemDestinationLocation>>",
            },
            "destination_port": {
              "docs": undefined,
              "type": "optional<CreatePurchaseOrderPort>",
            },
            "hs_codes": {
              "docs": "A list of the hs codes in this line item",
              "type": "optional<list<CreatePurchaseOrderHsCode>>",
            },
            "incoterm": {
              "docs": "Required if there is no incoterm in the line item's purchase order. The Incoterm of your line item.",
              "type": "optional<CreateLineItemIncoterm>",
            },
            "item_key": {
              "docs": "Value uniquely identifying a line item within a Purchase Order.",
              "type": "string",
            },
            "line_item_number": {
              "docs": "Integer used to sequence the order of line items. Line items will appear in the UX in this order. Assigned automatically if not provided",
              "type": "optional<integer>",
            },
            "line_type": {
              "docs": "type of the line item",
              "type": "optional<CreateLineItemLineType>",
            },
            "measurements": {
              "docs": "Measurements for the unit of measure provided on the line item. For example, if the unit of measure on the line is barrels, these are the measurements for a barrel",
              "type": "optional<list<CreateLineItemMeasurement>>",
            },
            "metadata": {
              "docs": undefined,
              "type": "optional<MetadataCreate>",
            },
            "must_arrive_date": {
              "docs": "Required if there is no must_arrive_date in the line item's purchase order. The must arrive date for this purchase order.",
              "type": "optional<string>",
            },
            "origin_location_ref": {
              "docs": "Optional. Customizable reference ID of network location that is the origin location.",
              "type": "optional<string>",
            },
            "origin_port": {
              "docs": undefined,
              "type": "optional<CreatePurchaseOrderPort>",
            },
            "parent_line_key": {
              "docs": "The line_item_key of the parent line item. This can not be set if this line item is a main line item.",
              "type": "optional<string>",
            },
            "product": {
              "docs": undefined,
              "type": "CreatePurchaseOrderProduct",
            },
            "transportation_mode": {
              "docs": "Required if there is no transportation_mode in purchase order",
              "type": "optional<CreateLineItemTransportationMode>",
            },
            "unit_cost": {
              "docs": undefined,
              "type": "optional<MoneyCreate>",
            },
            "unit_of_measure": {
              "docs": "The measurement per unit for this line item.",
              "type": "optional<CreateLineItemUnitOfMeasure>",
            },
            "units": {
              "docs": "Always required. The number of units for this line item.",
              "type": "integer",
            },
          },
        },
        "CreateLineItemDestinationLocation": {
          "docs": undefined,
          "properties": {
            "location_ref": {
              "docs": "Location ref",
              "type": "string",
            },
            "units": {
              "docs": "Number of units to go to this location",
              "type": "optional<integer>",
            },
          },
        },
        "CreateLineItemIncoterm": {
          "docs": "Required if there is no incoterm in the line item's purchase order. The Incoterm of your line item.",
          "enum": [
            {
              "docs": undefined,
              "name": "EXW",
              "value": "EXW",
            },
            {
              "docs": undefined,
              "name": "FOB",
              "value": "FOB",
            },
            {
              "docs": undefined,
              "name": "FAS",
              "value": "FAS",
            },
            {
              "docs": undefined,
              "name": "FCA",
              "value": "FCA",
            },
            {
              "docs": undefined,
              "name": "CPT",
              "value": "CPT",
            },
            {
              "docs": undefined,
              "name": "CFR",
              "value": "CFR",
            },
            {
              "docs": undefined,
              "name": "CIF",
              "value": "CIF",
            },
            {
              "docs": undefined,
              "name": "CIP",
              "value": "CIP",
            },
            {
              "docs": undefined,
              "name": "DAT",
              "value": "DAT",
            },
            {
              "docs": undefined,
              "name": "DAP",
              "value": "DAP",
            },
            {
              "docs": undefined,
              "name": "DDP",
              "value": "DDP",
            },
          ],
        },
        "CreateLineItemLineType": {
          "docs": "type of the line item",
          "enum": [
            {
              "docs": undefined,
              "name": "main_line",
              "value": "main_line",
            },
            {
              "docs": undefined,
              "name": "sub_line",
              "value": "sub_line",
            },
            {
              "docs": undefined,
              "name": "component_line",
              "value": "component_line",
            },
          ],
        },
        "CreateLineItemMeasurement": {
          "docs": undefined,
          "properties": {
            "measure_type": {
              "docs": "The type of measure",
              "type": "CreateLineItemMeasurementMeasureType",
            },
            "unit_of_measure": {
              "docs": "The unit of measure that corresponds to the measure_type used. For example, measure_type might be length, and unit_of_measure might be meters.",
              "type": "string",
            },
            "value": {
              "docs": "The numeric value",
              "type": "string",
            },
          },
        },
        "CreateLineItemMeasurementMeasureType": {
          "docs": "The type of measure",
          "enum": [
            {
              "docs": undefined,
              "name": "length",
              "value": "length",
            },
            {
              "docs": undefined,
              "name": "width",
              "value": "width",
            },
            {
              "docs": undefined,
              "name": "height",
              "value": "height",
            },
            {
              "docs": undefined,
              "name": "gross_weight",
              "value": "gross_weight",
            },
            {
              "docs": undefined,
              "name": "net_weight",
              "value": "net_weight",
            },
            {
              "docs": undefined,
              "name": "net_net_weight",
              "value": "net_net_weight",
            },
            {
              "docs": undefined,
              "name": "gross_volume",
              "value": "gross_volume",
            },
            {
              "docs": undefined,
              "name": "volume_weight",
              "value": "volume_weight",
            },
          ],
        },
        "CreateLineItemTransportationMode": {
          "docs": "Required if there is no transportation_mode in purchase order",
          "enum": [
            {
              "docs": undefined,
              "name": "air",
              "value": "air",
            },
            {
              "docs": undefined,
              "name": "ocean",
              "value": "ocean",
            },
            {
              "docs": undefined,
              "name": "truck",
              "value": "truck",
            },
            {
              "docs": undefined,
              "name": "rail",
              "value": "rail",
            },
          ],
        },
        "CreateLineItemUnitOfMeasure": {
          "docs": "The measurement per unit for this line item.",
          "enum": [
            {
              "docs": undefined,
              "name": "BBL",
              "value": "BBL",
            },
            {
              "docs": undefined,
              "name": "CAR",
              "value": "CAR",
            },
            {
              "docs": undefined,
              "name": "CGM",
              "value": "CGM",
            },
            {
              "docs": undefined,
              "name": "CKG",
              "value": "CKG",
            },
            {
              "docs": undefined,
              "name": "CM",
              "value": "CM",
            },
            {
              "docs": undefined,
              "name": "CM2",
              "value": "CM2",
            },
            {
              "docs": undefined,
              "name": "CTN",
              "value": "CTN",
            },
            {
              "docs": undefined,
              "name": "CYK",
              "value": "CYK",
            },
            {
              "docs": undefined,
              "name": "DOZ",
              "value": "DOZ",
            },
            {
              "docs": undefined,
              "name": "DPC",
              "value": "DPC",
            },
            {
              "docs": undefined,
              "name": "DPR",
              "value": "DPR",
            },
            {
              "docs": undefined,
              "name": "DS",
              "value": "DS",
            },
            {
              "docs": undefined,
              "name": "FBM",
              "value": "FBM",
            },
            {
              "docs": undefined,
              "name": "G",
              "value": "G",
            },
            {
              "docs": undefined,
              "name": "GBQ",
              "value": "GBQ",
            },
            {
              "docs": undefined,
              "name": "GR",
              "value": "GR",
            },
            {
              "docs": undefined,
              "name": "GRL",
              "value": "GRL",
            },
            {
              "docs": undefined,
              "name": "HUN",
              "value": "HUN",
            },
            {
              "docs": undefined,
              "name": "IRG",
              "value": "IRG",
            },
            {
              "docs": undefined,
              "name": "JWL",
              "value": "JWL",
            },
            {
              "docs": undefined,
              "name": "K",
              "value": "K",
            },
            {
              "docs": undefined,
              "name": "KG",
              "value": "KG",
            },
            {
              "docs": undefined,
              "name": "KM3",
              "value": "KM3",
            },
            {
              "docs": undefined,
              "name": "KM",
              "value": "KM",
            },
            {
              "docs": undefined,
              "name": "KWH",
              "value": "KWH",
            },
            {
              "docs": undefined,
              "name": "L",
              "value": "L",
            },
            {
              "docs": undefined,
              "name": "LNM",
              "value": "LNM",
            },
            {
              "docs": undefined,
              "name": "M",
              "value": "M",
            },
            {
              "docs": undefined,
              "name": "M2",
              "value": "M2",
            },
            {
              "docs": undefined,
              "name": "M3",
              "value": "M3",
            },
            {
              "docs": undefined,
              "name": "MBQ",
              "value": "MBQ",
            },
            {
              "docs": undefined,
              "name": "NO",
              "value": "NO",
            },
            {
              "docs": undefined,
              "name": "OSG",
              "value": "OSG",
            },
            {
              "docs": undefined,
              "name": "PCS",
              "value": "PCS",
            },
            {
              "docs": undefined,
              "name": "PDG",
              "value": "PDG",
            },
            {
              "docs": undefined,
              "name": "PFL",
              "value": "PFL",
            },
            {
              "docs": undefined,
              "name": "PK",
              "value": "PK",
            },
            {
              "docs": undefined,
              "name": "PRS",
              "value": "PRS",
            },
            {
              "docs": undefined,
              "name": "PTG",
              "value": "PTG",
            },
            {
              "docs": undefined,
              "name": "PX",
              "value": "PX",
            },
            {
              "docs": undefined,
              "name": "RHG",
              "value": "RHG",
            },
            {
              "docs": undefined,
              "name": "RUG",
              "value": "RUG",
            },
            {
              "docs": undefined,
              "name": "T",
              "value": "T",
            },
            {
              "docs": undefined,
              "name": "TDWB",
              "value": "TDWB",
            },
            {
              "docs": undefined,
              "name": "THS",
              "value": "THS",
            },
            {
              "docs": undefined,
              "name": "W",
              "value": "W",
            },
            {
              "docs": undefined,
              "name": "X",
              "value": "X",
            },
            {
              "docs": undefined,
              "name": "Twenty",
              "value": "20",
            },
            {
              "docs": undefined,
              "name": "TwentyOne",
              "value": "21",
            },
            {
              "docs": undefined,
              "name": "TwoW",
              "value": "2W",
            },
            {
              "docs": undefined,
              "name": "FortyThree",
              "value": "43",
            },
            {
              "docs": undefined,
              "name": "AS",
              "value": "AS",
            },
            {
              "docs": undefined,
              "name": "BA",
              "value": "BA",
            },
            {
              "docs": undefined,
              "name": "BC",
              "value": "BC",
            },
            {
              "docs": undefined,
              "name": "BD",
              "value": "BD",
            },
            {
              "docs": undefined,
              "name": "BG",
              "value": "BG",
            },
            {
              "docs": undefined,
              "name": "BJ",
              "value": "BJ",
            },
            {
              "docs": undefined,
              "name": "BK",
              "value": "BK",
            },
            {
              "docs": undefined,
              "name": "BN",
              "value": "BN",
            },
            {
              "docs": undefined,
              "name": "BO",
              "value": "BO",
            },
            {
              "docs": undefined,
              "name": "BU",
              "value": "BU",
            },
            {
              "docs": undefined,
              "name": "BX",
              "value": "BX",
            },
            {
              "docs": undefined,
              "name": "CA",
              "value": "CA",
            },
            {
              "docs": undefined,
              "name": "CB",
              "value": "CB",
            },
            {
              "docs": undefined,
              "name": "CC",
              "value": "CC",
            },
            {
              "docs": undefined,
              "name": "CF",
              "value": "CF",
            },
            {
              "docs": undefined,
              "name": "CI",
              "value": "CI",
            },
            {
              "docs": undefined,
              "name": "CN",
              "value": "CN",
            },
            {
              "docs": undefined,
              "name": "CP",
              "value": "CP",
            },
            {
              "docs": undefined,
              "name": "CQ",
              "value": "CQ",
            },
            {
              "docs": undefined,
              "name": "CR",
              "value": "CR",
            },
            {
              "docs": undefined,
              "name": "CS",
              "value": "CS",
            },
            {
              "docs": undefined,
              "name": "CT",
              "value": "CT",
            },
            {
              "docs": undefined,
              "name": "CX",
              "value": "CX",
            },
            {
              "docs": undefined,
              "name": "CY",
              "value": "CY",
            },
            {
              "docs": undefined,
              "name": "DF",
              "value": "DF",
            },
            {
              "docs": undefined,
              "name": "DH",
              "value": "DH",
            },
            {
              "docs": undefined,
              "name": "DR",
              "value": "DR",
            },
            {
              "docs": undefined,
              "name": "DZ",
              "value": "DZ",
            },
            {
              "docs": undefined,
              "name": "EA",
              "value": "EA",
            },
            {
              "docs": undefined,
              "name": "FT",
              "value": "FT",
            },
            {
              "docs": undefined,
              "name": "GA",
              "value": "GA",
            },
            {
              "docs": undefined,
              "name": "GRAM",
              "value": "GRAM",
            },
            {
              "docs": undefined,
              "name": "GS",
              "value": "GS",
            },
            {
              "docs": undefined,
              "name": "IN",
              "value": "IN",
            },
            {
              "docs": undefined,
              "name": "JO",
              "value": "JO",
            },
            {
              "docs": undefined,
              "name": "JR",
              "value": "JR",
            },
            {
              "docs": undefined,
              "name": "LB",
              "value": "LB",
            },
            {
              "docs": undefined,
              "name": "LT",
              "value": "LT",
            },
            {
              "docs": undefined,
              "name": "MP",
              "value": "MP",
            },
            {
              "docs": undefined,
              "name": "MR",
              "value": "MR",
            },
            {
              "docs": undefined,
              "name": "MT",
              "value": "MT",
            },
            {
              "docs": undefined,
              "name": "OZ",
              "value": "OZ",
            },
            {
              "docs": undefined,
              "name": "PC",
              "value": "PC",
            },
            {
              "docs": undefined,
              "name": "PQ",
              "value": "PQ",
            },
            {
              "docs": undefined,
              "name": "PR",
              "value": "PR",
            },
            {
              "docs": undefined,
              "name": "PS",
              "value": "PS",
            },
            {
              "docs": undefined,
              "name": "PT",
              "value": "PT",
            },
            {
              "docs": undefined,
              "name": "QT",
              "value": "QT",
            },
            {
              "docs": undefined,
              "name": "RA",
              "value": "RA",
            },
            {
              "docs": undefined,
              "name": "RL",
              "value": "RL",
            },
            {
              "docs": undefined,
              "name": "RM",
              "value": "RM",
            },
            {
              "docs": undefined,
              "name": "RO",
              "value": "RO",
            },
            {
              "docs": undefined,
              "name": "SC",
              "value": "SC",
            },
            {
              "docs": undefined,
              "name": "SF",
              "value": "SF",
            },
            {
              "docs": undefined,
              "name": "SH",
              "value": "SH",
            },
            {
              "docs": undefined,
              "name": "SI",
              "value": "SI",
            },
            {
              "docs": undefined,
              "name": "SJ",
              "value": "SJ",
            },
            {
              "docs": undefined,
              "name": "SL",
              "value": "SL",
            },
            {
              "docs": undefined,
              "name": "SM",
              "value": "SM",
            },
            {
              "docs": undefined,
              "name": "SO",
              "value": "SO",
            },
            {
              "docs": undefined,
              "name": "SQ",
              "value": "SQ",
            },
            {
              "docs": undefined,
              "name": "ST",
              "value": "ST",
            },
            {
              "docs": undefined,
              "name": "SV",
              "value": "SV",
            },
            {
              "docs": undefined,
              "name": "SX",
              "value": "SX",
            },
            {
              "docs": undefined,
              "name": "SY",
              "value": "SY",
            },
            {
              "docs": undefined,
              "name": "TE",
              "value": "TE",
            },
            {
              "docs": undefined,
              "name": "TN",
              "value": "TN",
            },
            {
              "docs": undefined,
              "name": "TO",
              "value": "TO",
            },
            {
              "docs": undefined,
              "name": "UN",
              "value": "UN",
            },
            {
              "docs": undefined,
              "name": "YD",
              "value": "YD",
            },
            {
              "docs": undefined,
              "name": "Z3",
              "value": "Z3",
            },
          ],
        },
        "CreateOceanBooking": {
          "docs": undefined,
          "properties": {
            "container_counts": {
              "docs": undefined,
              "type": "CreateContainerCounts",
            },
            "destination_port_loc_code": {
              "docs": "Optional, provide one of \`destination_port_us_cbp_port_code\` or \`destination_port_loc_code\`. Unique port reference code published in the United Nations Code for Trade and Transport Locations (UN/LOCODE).",
              "type": "optional<string>",
            },
            "destination_port_us_cbp_port_code": {
              "docs": "Optional, provide one of \`destination_port_us_cbp_port_code\` or \`destination_port_loc_code\`. Unique port reference code published in the United Nations Code for Trade and Transport Locations (UN/LOCODE).",
              "type": "optional<string>",
            },
            "incoterm": {
              "docs": "Always required. The Incoterm of your shipment",
              "type": "CreateOceanBookingIncoterm",
            },
            "is_lcl": {
              "docs": "Always required. Whether the booking is for an LCL shipment. If false, the booking is FCL. If true, the booking is LCL.",
              "type": "boolean",
            },
            "origin_port_loc_code": {
              "docs": "One of \`origin_port_us_cbp_port_code\` or  \`origin_port_loc_code\` is required if \`pickup_service\` = \`no\`. Unique port reference code used by US CBP.",
              "type": "optional<string>",
            },
            "origin_port_us_cbp_port_code": {
              "docs": "One of \`origin_port_us_cbp_port_code\` or  \`origin_port_loc_code\` is required if \`pickup_service\` = \`no\`. Unique port reference code used by US Customs and Border Protection.",
              "type": "optional<string>",
            },
            "product_descriptions": {
              "docs": undefined,
              "type": "list<CreateBookingHsCode>",
            },
            "wants_delivery_service": {
              "docs": "Optional. Whether transportation is requested from the destination port to destination address. If unknown, then leave as \`null\`.",
              "type": "optional<boolean>",
            },
            "wants_pickup_service": {
              "docs": "Always required. Whether transportation is requested from the origin location to the port.",
              "type": "boolean",
            },
          },
        },
        "CreateOceanBookingIncoterm": {
          "docs": "Always required. The Incoterm of your shipment",
          "enum": [
            {
              "docs": undefined,
              "name": "EXW",
              "value": "EXW",
            },
            {
              "docs": undefined,
              "name": "FOB",
              "value": "FOB",
            },
            {
              "docs": undefined,
              "name": "FAS",
              "value": "FAS",
            },
            {
              "docs": undefined,
              "name": "FCA",
              "value": "FCA",
            },
            {
              "docs": undefined,
              "name": "CPT",
              "value": "CPT",
            },
            {
              "docs": undefined,
              "name": "CFR",
              "value": "CFR",
            },
            {
              "docs": undefined,
              "name": "CIF",
              "value": "CIF",
            },
            {
              "docs": undefined,
              "name": "CIP",
              "value": "CIP",
            },
            {
              "docs": undefined,
              "name": "DAT",
              "value": "DAT",
            },
            {
              "docs": undefined,
              "name": "DAP",
              "value": "DAP",
            },
            {
              "docs": undefined,
              "name": "DDP",
              "value": "DDP",
            },
            {
              "docs": undefined,
              "name": "DPU",
              "value": "DPU",
            },
          ],
        },
        "CreateOrUpdatePurchaseOrder": {
          "docs": undefined,
          "properties": {
            "cargo_ready_date": {
              "docs": "Required if there is no cargo_ready_date in each line item. Date when cargo is ready for pickup at the origin location.",
              "type": "optional<string>",
            },
            "currency_code": {
              "docs": "Required if there is no currency_code in each line item. The currency code being used in this purchase order.",
              "type": "optional<string>",
            },
            "destination_location_refs": {
              "docs": "Reference ID of the network locations that are the destination locations. Multiple values are allowed, which would signify that this order is going to be shipped to multiple locations.",
              "type": "optional<list<string>>",
            },
            "destination_port": {
              "docs": undefined,
              "type": "optional<CreatePurchaseOrderPort>",
            },
            "freight_payment_terms": {
              "docs": "The freight payment term for the purchase order",
              "type": "optional<CreateOrUpdatePurchaseOrderFreightPaymentTerms>",
            },
            "incoterm": {
              "docs": "Required if there is no incoterm in each line item. The incoterm of your purchase order.",
              "type": "optional<CreateOrUpdatePurchaseOrderIncoterm>",
            },
            "issue_date": {
              "docs": "The issue date for this purchase order.",
              "type": "optional<string>",
            },
            "line_items": {
              "docs": "A list of the line items in this purchase order",
              "type": "list<CreateLineItem>",
            },
            "memo": {
              "docs": "Your notes or instructions on this purchase order.",
              "type": "optional<string>",
            },
            "metadata": {
              "docs": undefined,
              "type": "optional<MetadataCreate>",
            },
            "must_arrive_date": {
              "docs": "Required if there is no must_arrive_date in each line item. The must arrive date for this purchase order.",
              "type": "optional<string>",
            },
            "name": {
              "docs": "Always required. Name of the purchase order.",
              "type": "string",
            },
            "order_class": {
              "docs": "Class of the purchase order.",
              "type": "optional<CreateOrUpdatePurchaseOrderOrderClass>",
            },
            "order_type": {
              "docs": "Type of purchase order, which is used for rules, searching, and reporting",
              "type": "optional<string>",
            },
            "origin_location_ref": {
              "docs": "Customizable reference ID of the network location that is the origin location.",
              "type": "optional<string>",
            },
            "origin_port": {
              "docs": undefined,
              "type": "optional<CreatePurchaseOrderPort>",
            },
            "parties": {
              "docs": "A list of the parties in this purchase order. Buyer and seller are required parties. Owner is the owner of this order and will default to the buyer if not specified.",
              "type": "list<CreateParty>",
            },
            "priority": {
              "docs": "priority of the purchase order.",
              "type": "optional<CreateOrUpdatePurchaseOrderPriority>",
            },
            "status": {
              "docs": "The status of the purchase order. Open POs denote POs that are ready to be booked. Closed POs are ones that you'd like to mark as done (typically because they've finished shipping), while Cancelled POs denote POs that were mistakenly uploaded or that should not be used",
              "type": "optional<CreateOrUpdatePurchaseOrderStatus>",
            },
            "transportation_mode": {
              "docs": "Required if there is no transportation_mode in purchase order",
              "type": "optional<CreateOrUpdatePurchaseOrderTransportationMode>",
            },
          },
        },
        "CreateOrUpdatePurchaseOrderFreightPaymentTerms": {
          "docs": "The freight payment term for the purchase order",
          "enum": [
            {
              "docs": undefined,
              "name": "freight_collect",
              "value": "freight_collect",
            },
            {
              "docs": undefined,
              "name": "freight_prepaid",
              "value": "freight_prepaid",
            },
          ],
        },
        "CreateOrUpdatePurchaseOrderIncoterm": {
          "docs": "Required if there is no incoterm in each line item. The incoterm of your purchase order.",
          "enum": [
            {
              "docs": undefined,
              "name": "EXW",
              "value": "EXW",
            },
            {
              "docs": undefined,
              "name": "FOB",
              "value": "FOB",
            },
            {
              "docs": undefined,
              "name": "FAS",
              "value": "FAS",
            },
            {
              "docs": undefined,
              "name": "FCA",
              "value": "FCA",
            },
            {
              "docs": undefined,
              "name": "CPT",
              "value": "CPT",
            },
            {
              "docs": undefined,
              "name": "CFR",
              "value": "CFR",
            },
            {
              "docs": undefined,
              "name": "CIF",
              "value": "CIF",
            },
            {
              "docs": undefined,
              "name": "CIP",
              "value": "CIP",
            },
            {
              "docs": undefined,
              "name": "DAT",
              "value": "DAT",
            },
            {
              "docs": undefined,
              "name": "DAP",
              "value": "DAP",
            },
            {
              "docs": undefined,
              "name": "DDP",
              "value": "DDP",
            },
          ],
        },
        "CreateOrUpdatePurchaseOrderOrderClass": {
          "docs": "Class of the purchase order.",
          "enum": [
            {
              "docs": undefined,
              "name": "purchase_order",
              "value": "purchase_order",
            },
            {
              "docs": undefined,
              "name": "sales_order",
              "value": "sales_order",
            },
            {
              "docs": undefined,
              "name": "transfer_order",
              "value": "transfer_order",
            },
            {
              "docs": undefined,
              "name": "delivery_order",
              "value": "delivery_order",
            },
            {
              "docs": undefined,
              "name": "work_order",
              "value": "work_order",
            },
          ],
        },
        "CreateOrUpdatePurchaseOrderPriority": {
          "docs": "priority of the purchase order.",
          "enum": [
            {
              "docs": undefined,
              "name": "high",
              "value": "high",
            },
            {
              "docs": undefined,
              "name": "standard",
              "value": "standard",
            },
          ],
        },
        "CreateOrUpdatePurchaseOrderStatus": {
          "docs": "The status of the purchase order. Open POs denote POs that are ready to be booked. Closed POs are ones that you'd like to mark as done (typically because they've finished shipping), while Cancelled POs denote POs that were mistakenly uploaded or that should not be used",
          "enum": [
            {
              "docs": undefined,
              "name": "open",
              "value": "open",
            },
            {
              "docs": undefined,
              "name": "cancelled",
              "value": "cancelled",
            },
            {
              "docs": undefined,
              "name": "closed",
              "value": "closed",
            },
          ],
        },
        "CreateOrUpdatePurchaseOrderTransportationMode": {
          "docs": "Required if there is no transportation_mode in purchase order",
          "enum": [
            {
              "docs": undefined,
              "name": "air",
              "value": "air",
            },
            {
              "docs": undefined,
              "name": "ocean",
              "value": "ocean",
            },
            {
              "docs": undefined,
              "name": "truck",
              "value": "truck",
            },
            {
              "docs": undefined,
              "name": "rail",
              "value": "rail",
            },
          ],
        },
        "CreateParty": {
          "docs": "A party is a company entity that is tied to a purchase order and has a specific role.",
          "properties": {
            "contacts": {
              "docs": "A list of contact data for who should be contacted should there be questions about this order. For example, if your supplier needs to contact someone, who should they contact?",
              "type": "optional<list<CreatePartyContactsItem>>",
            },
            "external_ref": {
              "docs": "The external ref of the company entity that you wish to tie to this party",
              "type": "string",
            },
            "location_ref": {
              "docs": "The external ref of the location that you wish to tie to this party. This should be the address that would be associated with the party at the top of a purchase order document. Used for order delivery to suppliers, not in the booking process.",
              "type": "optional<string>",
            },
            "role": {
              "docs": "The role that the party has",
              "type": "CreatePartyRole",
            },
          },
        },
        "CreatePartyContactsItem": {
          "docs": undefined,
          "properties": {
            "department": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "email": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "fax": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "phone": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "CreatePartyRole": {
          "docs": "The role that the party has",
          "enum": [
            {
              "docs": undefined,
              "name": "buyer",
              "value": "buyer",
            },
            {
              "docs": undefined,
              "name": "seller",
              "value": "seller",
            },
            {
              "docs": undefined,
              "name": "owner",
              "value": "owner",
            },
            {
              "docs": undefined,
              "name": "shipper",
              "value": "shipper",
            },
            {
              "docs": undefined,
              "name": "consignee",
              "value": "consignee",
            },
            {
              "docs": undefined,
              "name": "freight_forwarder",
              "value": "freight_forwarder",
            },
            {
              "docs": undefined,
              "name": "notify_party",
              "value": "notify_party",
            },
            {
              "docs": undefined,
              "name": "customs_broker",
              "value": "customs_broker",
            },
            {
              "docs": undefined,
              "name": "carrier",
              "value": "carrier",
            },
            {
              "docs": undefined,
              "name": "manufacturer",
              "value": "manufacturer",
            },
            {
              "docs": undefined,
              "name": "buyers_agent",
              "value": "buyers_agent",
            },
            {
              "docs": undefined,
              "name": "sellers_agent",
              "value": "sellers_agent",
            },
          ],
        },
        "CreatePurchaseOrderHsCode": {
          "docs": undefined,
          "properties": {
            "code": {
              "docs": "The indentifying code on the hs code",
              "type": "string",
            },
            "country_code": {
              "docs": "The country code of the country that the hs code belongs to",
              "type": "string",
            },
          },
        },
        "CreatePurchaseOrderPort": {
          "docs": undefined,
          "properties": {
            "code": {
              "docs": "A unique identifier for this port",
              "type": "string",
            },
            "code_type": {
              "docs": "The code type of the port",
              "type": "CreatePurchaseOrderPortCodeType",
            },
          },
        },
        "CreatePurchaseOrderPortCodeType": {
          "docs": "The code type of the port",
          "enum": [
            {
              "docs": undefined,
              "name": "unlocode",
              "value": "unlocode",
            },
            {
              "docs": undefined,
              "name": "iata",
              "value": "iata",
            },
            {
              "docs": undefined,
              "name": "icao",
              "value": "icao",
            },
            {
              "docs": undefined,
              "name": "us_cbp",
              "value": "us_cbp",
            },
          ],
        },
        "CreatePurchaseOrderProduct": {
          "docs": undefined,
          "properties": {
            "color": {
              "docs": "The color of the product",
              "type": "optional<string>",
            },
            "country_of_origin": {
              "docs": "The country the product was manufactured in",
              "type": "optional<string>",
            },
            "dangerous": {
              "docs": "Whether or not the product is a dangerous good.",
              "type": "optional<boolean>",
            },
            "ean_ucc_13": {
              "docs": "The EAN/UCC-13 of the product.",
              "type": "optional<string>",
            },
            "ean_ucc_8": {
              "docs": "The EAN/UCC-8 of the product.",
              "type": "optional<string>",
            },
            "lot_number": {
              "docs": "The lot number of the product",
              "type": "optional<string>",
            },
            "name": {
              "docs": "The name of product",
              "type": "string",
            },
            "product_category": {
              "docs": "The category to group this product under",
              "type": "optional<string>",
            },
            "size": {
              "docs": "The size of the product",
              "type": "optional<string>",
            },
            "sku": {
              "docs": "SKU of the product. Required when line item is bookable, there is no sub line item on this line item",
              "type": "optional<string>",
            },
            "style": {
              "docs": "The style of the product",
              "type": "optional<string>",
            },
            "upc": {
              "docs": "Universal product code",
              "type": "optional<string>",
            },
          },
        },
        "CreateQuantity": {
          "docs": undefined,
          "properties": {
            "unit": {
              "docs": "Required. Unit of measurement.",
              "type": "CreateQuantityUnit",
            },
            "value": {
              "docs": "Required. The number of units in the units of measurement.",
              "type": "double",
            },
          },
        },
        "CreateQuantityUnit": {
          "docs": "Required. Unit of measurement.",
          "enum": [
            {
              "docs": undefined,
              "name": "pcs",
              "value": "pcs",
            },
            {
              "docs": undefined,
              "name": "dpc",
              "value": "dpc",
            },
            {
              "docs": undefined,
              "name": "doz",
              "value": "doz",
            },
            {
              "docs": undefined,
              "name": "hun",
              "value": "hun",
            },
            {
              "docs": undefined,
              "name": "ths",
              "value": "ths",
            },
            {
              "docs": undefined,
              "name": "prs",
              "value": "prs",
            },
            {
              "docs": undefined,
              "name": "dpr",
              "value": "dpr",
            },
          ],
        },
        "CreateTruckingBooking": {
          "docs": undefined,
          "properties": {
            "description_of_products": {
              "docs": "General description of the products in the shipment.",
              "type": "optional<string>",
            },
            "is_ltl": {
              "docs": "Whether the booking is for an LTL shipment. If false, the booking is FTL. If true, then the booking is LTL.",
              "type": "boolean",
            },
            "payment_terms": {
              "docs": "Whether the shipper or consignee is responsible for payment of trucking freight. This can be \`collect\` (consignee) or \`prepaid\` (shipper).",
              "type": "CreateTruckingBookingPaymentTerms",
            },
          },
        },
        "CreateTruckingBookingPaymentTerms": {
          "docs": "Whether the shipper or consignee is responsible for payment of trucking freight. This can be \`collect\` (consignee) or \`prepaid\` (shipper).",
          "enum": [
            {
              "docs": undefined,
              "name": "collect",
              "value": "collect",
            },
            {
              "docs": undefined,
              "name": "prepaid",
              "value": "prepaid",
            },
          ],
        },
        "CreditMemo": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": "The type of the object",
              "type": "optional<string>",
            },
            "amount": {
              "docs": undefined,
              "type": "optional<Money>",
            },
            "categories": {
              "docs": "List of categories of the credited line items",
              "type": "optional<list<string>>",
            },
            "category": {
              "docs": "DEPRECATED - Not available after v3. Please use \`categories\`.",
              "type": "optional<string>",
            },
            "credited_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "reason": {
              "docs": "DEPRECATED - Not available after v3. Please use \`reasons\`.",
              "type": "optional<string>",
            },
            "reasons": {
              "docs": "List of reasons why the credit was applied to the line items",
              "type": "optional<list<string>>",
            },
          },
        },
        "CustomsEntriesShowResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<CustomsEntry>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "CustomsEntry": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": "Type of the object. Always /customs_entry for this object.",
              "type": "optional<string>",
            },
            "entry_number": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": "Unique identifier for the customs entry.",
              "type": "optional<string>",
            },
            "release_date": {
              "docs": "The cargo release date for this entry.",
              "type": "optional<string>",
            },
            "release_status": {
              "docs": "The release status for this entry.",
              "type": "optional<CustomsEntryReleaseStatus>",
            },
            "shipment": {
              "docs": undefined,
              "type": "optional<ShipmentRef>",
            },
          },
        },
        "CustomsEntryCollectionRef": {
          "docs": "[Expandable API link.](https://apidocs.flexport.com/v3/tag/Expansion)",
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "link": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "ref_type": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "CustomsEntryIndexResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<CustomsEntryIndexResponseData>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "CustomsEntryIndexResponseData": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<list<CustomsEntry>>",
            },
            "next": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "prev": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "CustomsEntryReleaseStatus": {
          "docs": "The release status for this entry.",
          "enum": [
            {
              "docs": undefined,
              "name": "cleared",
              "value": "cleared",
            },
            {
              "docs": undefined,
              "name": "customs_hold",
              "value": "customs_hold",
            },
            {
              "docs": undefined,
              "name": "pending",
              "value": "pending",
            },
          ],
        },
        "CustomsInvolvedParty": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": "Type of the object",
              "type": "optional<string>",
            },
            "address": {
              "docs": undefined,
              "type": "optional<Address>",
            },
            "company_entity": {
              "docs": undefined,
              "type": "optional<CompanyEntityRef>",
            },
            "name": {
              "docs": "The name of involved party.",
              "type": "optional<string>",
            },
            "type": {
              "docs": "The type of involved party.",
              "type": "optional<string>",
            },
          },
        },
        "DistanceCreate": {
          "docs": undefined,
          "properties": {
            "unit": {
              "docs": "Required. Unit of measurement. "km" for kilometers. "mi" for miles.",
              "type": "optional<DistanceCreateUnit>",
            },
            "value": {
              "docs": "Required. Specifies the distance as a float.",
              "type": "optional<double>",
            },
          },
        },
        "DistanceCreateUnit": {
          "docs": "Required. Unit of measurement. "km" for kilometers. "mi" for miles.",
          "enum": [
            {
              "docs": undefined,
              "name": "km",
              "value": "km",
            },
            {
              "docs": undefined,
              "name": "mi",
              "value": "mi",
            },
          ],
        },
        "Document": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": "Type of the object. Always /document for this object.",
              "type": "optional<string>",
            },
            "archived_at": {
              "docs": "Date-time string when this document was archived. Null if not archived.",
              "type": "optional<string>",
            },
            "document_type": {
              "docs": "Type of the document.",
              "type": "optional<string>",
            },
            "file_link": {
              "docs": "The link that can be used to download the file.",
              "type": "optional<string>",
            },
            "file_metadata": {
              "docs": undefined,
              "type": "optional<FileMetadata>",
            },
            "file_name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": "Unique identifier for the document",
              "type": "optional<string>",
            },
            "memo": {
              "docs": "A short message or description about the document",
              "type": "optional<string>",
            },
            "shipment": {
              "docs": undefined,
              "type": "optional<ShipmentRef>",
            },
          },
        },
        "DocumentCollectionRef": {
          "docs": "[Expandable API link.](https://apidocs.flexport.com/v3/tag/Expansion)",
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "link": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "ref_type": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "DocumentsCreateResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<CreateDocument>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "DocumentsIndexResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<DocumentsIndexResponseData>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "DocumentsIndexResponseData": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<list<Document>>",
            },
            "next": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "prev": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "total_count": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "DocumentsShowResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<Document>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "Error": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": "String representing the object’s type. Always /api/error for this object.",
              "type": "optional<string>",
            },
            "code": {
              "docs": "Specialized identifier for this type of error in our API",
              "type": "optional<string>",
            },
            "message": {
              "docs": "Human readable error message",
              "type": "optional<string>",
            },
            "status": {
              "docs": "The HTTP status code (client or server error) made available for consumption from the body of the response.",
              "type": "optional<integer>",
            },
          },
        },
        "EventsIndexRequestFDataResourceObject": {
          "docs": undefined,
          "enum": [
            {
              "docs": undefined,
              "name": "Document",
              "value": "/document",
            },
            {
              "docs": undefined,
              "name": "Invoice",
              "value": "/invoice",
            },
            {
              "docs": undefined,
              "name": "OceanShipmentContainer",
              "value": "/ocean/shipment_container",
            },
            {
              "docs": undefined,
              "name": "OceanShipmentContainerLeg",
              "value": "/ocean/shipment_container_leg",
            },
            {
              "docs": undefined,
              "name": "Shipment",
              "value": "/shipment",
            },
            {
              "docs": undefined,
              "name": "ShipmentLeg",
              "value": "/shipment_leg",
            },
          ],
        },
        "EventsIndexResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<EventsIndexResponseData>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "EventsIndexResponseData": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<list<WebhookEvent>>",
            },
            "next": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "prev": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "EventsShowResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<WebhookEvent>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "Exception": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "message": {
              "docs": "Description of the exceptional event.",
              "type": "optional<string>",
            },
            "root_cause_name": {
              "docs": "The main reason for the exception as human-friendly text.",
              "type": "optional<string>",
            },
            "root_cause_slug": {
              "docs": "The main reason for the exception as an identifier.",
              "type": "optional<ExceptionRootCauseSlug>",
            },
          },
        },
        "ExceptionRootCauseSlug": {
          "docs": "The main reason for the exception as an identifier.",
          "enum": [
            {
              "docs": undefined,
              "name": "carrier",
              "value": "carrier",
            },
            {
              "docs": undefined,
              "name": "client",
              "value": "client",
            },
            {
              "docs": undefined,
              "name": "consignee",
              "value": "consignee",
            },
            {
              "docs": undefined,
              "name": "destination_agent",
              "value": "destination_agent",
            },
            {
              "docs": undefined,
              "name": "destination_trucking_carrier",
              "value": "destination_trucking_carrier",
            },
            {
              "docs": undefined,
              "name": "export_customs_agent",
              "value": "export_customs_agent",
            },
            {
              "docs": undefined,
              "name": "flexport",
              "value": "flexport",
            },
            {
              "docs": undefined,
              "name": "government_agency",
              "value": "government_agency",
            },
            {
              "docs": undefined,
              "name": "import_customs_agent",
              "value": "import_customs_agent",
            },
            {
              "docs": undefined,
              "name": "natural_event",
              "value": "natural_event",
            },
            {
              "docs": undefined,
              "name": "origin_agent",
              "value": "origin_agent",
            },
            {
              "docs": undefined,
              "name": "origin_trucking_carrier",
              "value": "origin_trucking_carrier",
            },
            {
              "docs": undefined,
              "name": "shipper",
              "value": "shipper",
            },
            {
              "docs": undefined,
              "name": "terminal",
              "value": "terminal",
            },
            {
              "docs": undefined,
              "name": "unknown",
              "value": "unknown",
            },
          ],
        },
        "FileMetadata": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": "Type of the object. Always /file_metadata for this object.",
              "type": "optional<string>",
            },
            "size": {
              "docs": "Size of the file in bytes",
              "type": "optional<integer>",
            },
            "uploaded_at": {
              "docs": "Date this document was uploaded.",
              "type": "optional<string>",
            },
          },
        },
        "FreightType": {
          "docs": undefined,
          "enum": [
            {
              "docs": undefined,
              "name": "port_to_door",
              "value": "port_to_door",
            },
            {
              "docs": undefined,
              "name": "port_to_port",
              "value": "port_to_port",
            },
            {
              "docs": undefined,
              "name": "door_to_door",
              "value": "door_to_door",
            },
            {
              "docs": undefined,
              "name": "door_to_port",
              "value": "door_to_port",
            },
          ],
        },
        "GenericCollectionRef": {
          "docs": "[Expandable API link.](https://apidocs.flexport.com/v3/tag/Expansion)",
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "link": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "ref_type": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "GenericObjectRef": {
          "docs": "[Expandable API link.](https://apidocs.flexport.com/v3/tag/Expansion)",
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<GenericObjectRefId>",
            },
            "link": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "ref_type": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "GenericObjectRefId": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "string",
            },
            {
              "docs": undefined,
              "type": "integer",
            },
          ],
        },
        "HsCode": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": "String representing the object’s type. Always \`/hs_code\` for this object.",
              "type": "optional<string>",
            },
            "code": {
              "docs": "6 digit (international HS) or 10 digit (US HTS) code.",
              "type": "optional<string>",
            },
            "country_code": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "description": {
              "docs": "Description of HS or HTS code classification.",
              "type": "optional<string>",
            },
          },
        },
        "Invoice": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": "Type of the object. Always '/invoice' for this object.",
              "type": "optional<string>",
            },
            "balance": {
              "docs": undefined,
              "type": "optional<Money>",
            },
            "credit_memos": {
              "docs": "List of any credits applied to this invoice.",
              "type": "optional<list<CreditMemo>>",
            },
            "due_date": {
              "docs": "Due date of the invoice",
              "type": "optional<string>",
            },
            "id": {
              "docs": "Unique ID for the invoice",
              "type": "optional<string>",
            },
            "issued_at": {
              "docs": "When the invoice was issued",
              "type": "optional<string>",
            },
            "issuer": {
              "docs": undefined,
              "type": "optional<CompanyEntity>",
            },
            "items": {
              "docs": undefined,
              "type": "optional<list<InvoiceItem>>",
            },
            "last_updated_at": {
              "docs": "Time of the last adjustment to in invoice",
              "type": "optional<string>",
            },
            "name": {
              "docs": "Unique name for the invoice",
              "type": "optional<string>",
            },
            "notes": {
              "docs": undefined,
              "type": "optional<list<string>>",
            },
            "recipient": {
              "docs": undefined,
              "type": "optional<CompanyEntity>",
            },
            "shipments": {
              "docs": undefined,
              "type": "optional<ShipmentRef>",
            },
            "status": {
              "docs": "Status of the invoice",
              "type": "optional<InvoiceStatus>",
            },
            "total": {
              "docs": undefined,
              "type": "optional<Money>",
            },
            "type": {
              "docs": "What the invoice is being issued for. Shipment related charges are type \`Shipment\` and non-shipment related charges are type \`Client\`",
              "type": "optional<InvoiceType>",
            },
            "voided_at": {
              "docs": "When the invoice was voided (if applicable)",
              "type": "optional<string>",
            },
          },
        },
        "InvoiceIndexRequestDirection": {
          "docs": undefined,
          "enum": [
            {
              "docs": undefined,
              "name": "asc",
              "value": "asc",
            },
            {
              "docs": undefined,
              "name": "desc",
              "value": "desc",
            },
          ],
        },
        "InvoiceIndexRequestFStatus": {
          "docs": undefined,
          "enum": [
            {
              "docs": undefined,
              "name": "outstanding",
              "value": "outstanding",
            },
            {
              "docs": undefined,
              "name": "past_due",
              "value": "past_due",
            },
            {
              "docs": undefined,
              "name": "void",
              "value": "void",
            },
            {
              "docs": undefined,
              "name": "paid",
              "value": "paid",
            },
          ],
        },
        "InvoiceIndexResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<InvoiceIndexResponseData>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "InvoiceIndexResponseData": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<list<Invoice>>",
            },
            "next": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "prev": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "InvoiceItem": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": "Type of the object.",
              "type": "optional<string>",
            },
            "amount": {
              "docs": undefined,
              "type": "optional<Money>",
            },
            "category": {
              "docs": "Category of the charge.",
              "type": "optional<InvoiceItemCategory>",
            },
            "container_numbers": {
              "docs": "Containers this charge is related to",
              "type": "optional<list<string>>",
            },
            "name": {
              "docs": "Description of charge.",
              "type": "optional<string>",
            },
            "quantity": {
              "docs": undefined,
              "type": "optional<InvoiceQuantity>",
            },
            "rate": {
              "docs": undefined,
              "type": "optional<InvoiceRate>",
            },
            "slug": {
              "docs": "Code describing the charge.",
              "type": "optional<string>",
            },
          },
        },
        "InvoiceItemCategory": {
          "docs": "Category of the charge.",
          "enum": [
            {
              "docs": undefined,
              "name": "freight",
              "value": "freight",
            },
            {
              "docs": undefined,
              "name": "origin",
              "value": "origin",
            },
            {
              "docs": undefined,
              "name": "destination",
              "value": "destination",
            },
            {
              "docs": undefined,
              "name": "customs",
              "value": "customs",
            },
            {
              "docs": undefined,
              "name": "additional",
              "value": "additional",
            },
            {
              "docs": undefined,
              "name": "capital",
              "value": "capital",
            },
          ],
        },
        "InvoiceQuantity": {
          "docs": "Describes the number of units used to calculate the price of a line item",
          "properties": {
            "_object": {
              "docs": "The type of the object",
              "type": "optional<string>",
            },
            "qualifier": {
              "docs": "describes what the value represents",
              "type": "optional<string>",
            },
            "value": {
              "docs": "numeric value described by qualifier",
              "type": "optional<string>",
            },
          },
        },
        "InvoiceRate": {
          "docs": "Describes the rate per unit used to calculate the price of a line item",
          "properties": {
            "_object": {
              "docs": "The type of the object",
              "type": "optional<string>",
            },
            "qualifier": {
              "docs": "describes what the value represents",
              "type": "optional<string>",
            },
            "value": {
              "docs": "numeric value described by qualifier",
              "type": "optional<string>",
            },
          },
        },
        "InvoiceStatus": {
          "docs": "Status of the invoice",
          "enum": [
            {
              "docs": undefined,
              "name": "outstanding",
              "value": "outstanding",
            },
            {
              "docs": undefined,
              "name": "past_due",
              "value": "past_due",
            },
            {
              "docs": undefined,
              "name": "void",
              "value": "void",
            },
            {
              "docs": undefined,
              "name": "paid",
              "value": "paid",
            },
            {
              "docs": undefined,
              "name": "payment_pending",
              "value": "payment_pending",
            },
          ],
        },
        "InvoiceType": {
          "docs": "What the invoice is being issued for. Shipment related charges are type \`Shipment\` and non-shipment related charges are type \`Client\`",
          "enum": [
            {
              "docs": undefined,
              "name": "Shipment",
              "value": "Shipment",
            },
            {
              "docs": undefined,
              "name": "Client",
              "value": "Client",
            },
          ],
        },
        "InvoicesShowResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<Invoice>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "LegCollectionRef": {
          "docs": "[Expandable API link.](https://apidocs.flexport.com/v3/tag/Expansion)",
          "properties": {
            "_object": {
              "docs": "Type of the object",
              "type": "optional<string>",
            },
            "link": {
              "docs": "URL to fetch list of objects.",
              "type": "optional<string>",
            },
            "ref_type": {
              "docs": "Type of the object in this list.",
              "type": "optional<string>",
            },
          },
        },
        "LegRef": {
          "docs": "[Expandable API link.](https://apidocs.flexport.com/v3/tag/Expansion)",
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "link": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "ref_type": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "Length": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": "String representing the object’s type. Always \`/quantity/length\` for this object.",
              "type": "optional<string>",
            },
            "unit": {
              "docs": "Required. Unit of measurement. "cm" for centimeters. "in" for inches.",
              "type": "optional<LengthUnit>",
            },
            "value": {
              "docs": "Required. Specifies the length as a float.",
              "type": "optional<double>",
            },
          },
        },
        "LengthCreate": {
          "docs": undefined,
          "properties": {
            "unit": {
              "docs": "Required. Unit of measurement. "cm" for centimeters. "in" for inches.",
              "type": "optional<LengthCreateUnit>",
            },
            "value": {
              "docs": "Required. Specifies the length as a float.",
              "type": "optional<double>",
            },
          },
        },
        "LengthCreateUnit": {
          "docs": "Required. Unit of measurement. "cm" for centimeters. "in" for inches.",
          "enum": [
            {
              "docs": undefined,
              "name": "cm",
              "value": "cm",
            },
            {
              "docs": undefined,
              "name": "in",
              "value": "in",
            },
          ],
        },
        "LengthUnit": {
          "docs": "Required. Unit of measurement. "cm" for centimeters. "in" for inches.",
          "enum": [
            {
              "docs": undefined,
              "name": "cm",
              "value": "cm",
            },
            {
              "docs": undefined,
              "name": "in",
              "value": "in",
            },
          ],
        },
        "LineItemMeasurement": {
          "docs": undefined,
          "properties": {
            "measure_type": {
              "docs": "The type of measure",
              "type": "optional<LineItemMeasurementMeasureType>",
            },
            "unit_of_measure": {
              "docs": "The cost per unit for this line item.",
              "type": "optional<string>",
            },
            "value": {
              "docs": "The numeric value",
              "type": "optional<string>",
            },
          },
        },
        "LineItemMeasurementMeasureType": {
          "docs": "The type of measure",
          "enum": [
            {
              "docs": undefined,
              "name": "length",
              "value": "length",
            },
            {
              "docs": undefined,
              "name": "width",
              "value": "width",
            },
            {
              "docs": undefined,
              "name": "height",
              "value": "height",
            },
            {
              "docs": undefined,
              "name": "gross_weight",
              "value": "gross_weight",
            },
            {
              "docs": undefined,
              "name": "net_weight",
              "value": "net_weight",
            },
            {
              "docs": undefined,
              "name": "net_net_weight",
              "value": "net_net_weight",
            },
            {
              "docs": undefined,
              "name": "gross_volume",
              "value": "gross_volume",
            },
            {
              "docs": undefined,
              "name": "volume_weight",
              "value": "volume_weight",
            },
          ],
        },
        "Location": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": "Type of the object. Always /network/location for this object.",
              "type": "optional<string>",
            },
            "address": {
              "docs": undefined,
              "type": "optional<Address>",
            },
            "company": {
              "docs": undefined,
              "type": "optional<GenericObjectRef>",
            },
            "contacts": {
              "docs": undefined,
              "type": "optional<GenericObjectRef>",
            },
            "editable": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "id": {
              "docs": "Unique identifier for the location",
              "type": "optional<string>",
            },
            "metadata": {
              "docs": undefined,
              "type": "optional<Metadata>",
            },
            "name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "ref": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "LocationIndexResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<LocationIndexResponseData>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "LocationIndexResponseData": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<list<Location>>",
            },
            "next": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "prev": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "total_count": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "LocationUpdateResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<Location>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "Manufacturer": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": "Type of the object",
              "type": "optional<string>",
            },
            "manufacturer_code": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "Metadata": {
          "docs": "Set of custom key-values specific to the object. The keys are strings and values are arrays of strings. The set of valid keys is always the consignee's list of keys, even if call was made by a different party.
",
          "type": "map<string, unknown>",
        },
        "MetadataCreate": {
          "discriminated": false,
          "docs": "Metadata has two allowed formats. Either array format or object format. Refer to the metadata section in this documentation for more information.",
          "union": [
            {
              "docs": "Object format.",
              "type": "MetadataCreateMetadataCreate",
            },
            {
              "docs": "Array format.",
              "type": "list<MetadataCreateMetadataCreateItem>",
            },
          ],
        },
        "MetadataCreateMetadataCreate": {
          "docs": "Object format.",
          "properties": {
            "example_key": {
              "docs": undefined,
              "type": "optional<list<string>>",
            },
          },
        },
        "MetadataCreateMetadataCreateItem": {
          "docs": undefined,
          "properties": {
            "name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "value": {
              "docs": undefined,
              "type": "optional<list<string>>",
            },
          },
        },
        "Money": {
          "docs": undefined,
          "extends": [
            "MoneyCreate",
          ],
          "properties": {
            "_object": {
              "docs": "Type of the object. Always /money for this object.",
              "type": "optional<string>",
            },
          },
        },
        "MoneyCreate": {
          "docs": undefined,
          "properties": {
            "amount": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "currency_code": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "NetworkCompanyCreateResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<Company>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "NetworkCompanyEntityCreateResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<CompanyEntity>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "NetworkCompanyEntityShowResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<CompanyEntity>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "NetworkCompanyEntityUpdateResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<CompanyEntity>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "NetworkCompanyIndexResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<NetworkCompanyIndexResponseData>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "NetworkCompanyIndexResponseData": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<list<Company>>",
            },
            "next": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "prev": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "total_count": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "NetworkCompanyMeResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<Company>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "NetworkCompanyShowResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<Company>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "NetworkCompanyUpdateResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<Company>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "NetworkContactCreateResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<Contact>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "NetworkContactIndexResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<NetworkContactIndexResponseData>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "NetworkContactIndexResponseData": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<list<Contact>>",
            },
            "next": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "prev": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "total_count": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "NetworkContactShowResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<Contact>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "NetworkContactUpdateResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<Contact>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "NetworkLocationCreateResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<Location>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "NetworkLocationShowResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<Location>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "OceanBookingDetail": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": "Type of the object",
              "type": "optional<string>",
            },
            "container_counts": {
              "docs": undefined,
              "type": "optional<ContainerCounts>",
            },
            "destination_port": {
              "docs": undefined,
              "type": "optional<Place>",
            },
            "incoterm": {
              "docs": undefined,
              "type": "optional<OceanBookingDetailIncoterm>",
            },
            "is_lcl": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "origin_port": {
              "docs": undefined,
              "type": "optional<Place>",
            },
            "product_descriptions": {
              "docs": undefined,
              "type": "optional<list<BookingHsCode>>",
            },
            "wants_delivery_service": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "wants_pickup_service": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
          },
        },
        "OceanBookingDetailIncoterm": {
          "docs": undefined,
          "enum": [
            {
              "docs": undefined,
              "name": "EXW",
              "value": "EXW",
            },
            {
              "docs": undefined,
              "name": "FOB",
              "value": "FOB",
            },
            {
              "docs": undefined,
              "name": "FAS",
              "value": "FAS",
            },
            {
              "docs": undefined,
              "name": "FCA",
              "value": "FCA",
            },
            {
              "docs": undefined,
              "name": "CPT",
              "value": "CPT",
            },
            {
              "docs": undefined,
              "name": "CFR",
              "value": "CFR",
            },
            {
              "docs": undefined,
              "name": "CIF",
              "value": "CIF",
            },
            {
              "docs": undefined,
              "name": "CIP",
              "value": "CIP",
            },
            {
              "docs": undefined,
              "name": "DAT",
              "value": "DAT",
            },
            {
              "docs": undefined,
              "name": "DAP",
              "value": "DAP",
            },
            {
              "docs": undefined,
              "name": "DDP",
              "value": "DDP",
            },
            {
              "docs": undefined,
              "name": "DPU",
              "value": "DPU",
            },
          ],
        },
        "OceanContainerLegsIndexResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<OceanContainerLegsIndexResponseData>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "OceanContainerLegsIndexResponseData": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<list<OceanShipmentContainerLeg>>",
            },
            "next": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "prev": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "OceanContainerLegsShowResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<OceanShipmentContainerLeg>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "OceanShipmentContainerLeg": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": "Type of the object",
              "type": "optional<string>",
            },
            "dates": {
              "docs": undefined,
              "type": "optional<list<map<string, unknown>>>",
            },
            "leg": {
              "docs": undefined,
              "type": "optional<LegRef>",
            },
            "shipment_container": {
              "docs": undefined,
              "type": "optional<ContainerRef>",
            },
          },
        },
        "OceanShipmentDetail": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": "Type of the object",
              "type": "optional<string>",
            },
            "carrier_booking_number": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "confirmed_space_released_at": {
              "docs": "the date-time at which the carrier confirms space release related to the shipping order",
              "type": "optional<string>",
            },
            "containers": {
              "docs": undefined,
              "type": "optional<ContainerCollectionRef>",
            },
            "house_bill_number": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "is_lcl": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "master_bill_number": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "OceanShipmentLeg": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "container_legs": {
              "docs": undefined,
              "type": "optional<ContainerLegCollectionRef>",
            },
            "scac_code": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "vessel_imo": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "vessel_name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "voyage_number": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "Parties": {
          "docs": "A party is a company entity that is tied to a purchase order that has a specific role.",
          "properties": {
            "company_entity": {
              "docs": undefined,
              "type": "optional<CompanyEntity>",
            },
            "contacts": {
              "docs": "A list of contact data for who should be contacted should there be questions about this order. For example, if your supplier needs to contact someone, who should they contact?",
              "type": "optional<list<PartiesContactsItem>>",
            },
            "location": {
              "docs": undefined,
              "type": "optional<Address>",
            },
            "role": {
              "docs": "The role that the party has",
              "type": "optional<PartiesRole>",
            },
          },
        },
        "PartiesContactsItem": {
          "docs": undefined,
          "properties": {
            "department": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "email": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "fax": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "phone": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "PartiesRole": {
          "docs": "The role that the party has",
          "enum": [
            {
              "docs": undefined,
              "name": "buyer",
              "value": "buyer",
            },
            {
              "docs": undefined,
              "name": "seller",
              "value": "seller",
            },
            {
              "docs": undefined,
              "name": "owner",
              "value": "owner",
            },
            {
              "docs": undefined,
              "name": "shipper",
              "value": "shipper",
            },
            {
              "docs": undefined,
              "name": "consignee",
              "value": "consignee",
            },
            {
              "docs": undefined,
              "name": "freight_forwarder",
              "value": "freight_forwarder",
            },
            {
              "docs": undefined,
              "name": "notify_party",
              "value": "notify_party",
            },
            {
              "docs": undefined,
              "name": "customs_broker",
              "value": "customs_broker",
            },
            {
              "docs": undefined,
              "name": "carrier",
              "value": "carrier",
            },
            {
              "docs": undefined,
              "name": "manufacturer",
              "value": "manufacturer",
            },
            {
              "docs": undefined,
              "name": "buyers_agent",
              "value": "buyers_agent",
            },
            {
              "docs": undefined,
              "name": "sellers_agent",
              "value": "sellers_agent",
            },
          ],
        },
        "Place": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": "Type of the object",
              "type": "optional<string>",
            },
            "address": {
              "docs": undefined,
              "type": "optional<Address>",
            },
            "details": {
              "docs": undefined,
              "type": "optional<list<PlaceDetailsItem>>",
            },
            "name": {
              "docs": "Name of the place",
              "type": "optional<string>",
            },
          },
        },
        "PlaceDetailsItem": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "Airport",
            },
            {
              "docs": undefined,
              "type": "Placeport",
            },
            {
              "docs": undefined,
              "type": "Manufacturer",
            },
          ],
        },
        "Placeport": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": "Type of the object",
              "type": "optional<PlaceportObject>",
            },
            "port_code": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "PlaceportObject": {
          "docs": "Type of the object",
          "enum": [
            {
              "docs": undefined,
              "name": "OceanRailport",
              "value": "/ocean/railport",
            },
            {
              "docs": undefined,
              "name": "TruckingPort",
              "value": "/trucking/port",
            },
            {
              "docs": undefined,
              "name": "OceanPort",
              "value": "/ocean/port",
            },
          ],
        },
        "PortsIndexRequestFPortType": {
          "docs": undefined,
          "enum": [
            {
              "docs": undefined,
              "name": "airport",
              "value": "airport",
            },
            {
              "docs": undefined,
              "name": "railport",
              "value": "railport",
            },
            {
              "docs": undefined,
              "name": "roadport",
              "value": "roadport",
            },
            {
              "docs": undefined,
              "name": "seaport",
              "value": "seaport",
            },
          ],
        },
        "PortsIndexResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<PortsIndexResponseData>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "PortsIndexResponseData": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<list<optional<Place>>>",
            },
            "next": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "prev": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "total_count": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "Product": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": "Type of the object",
              "type": "optional<string>",
            },
            "archived_at": {
              "docs": "If the product has been archived, the time it was archived. If the product is still active this will be null.",
              "type": "optional<string>",
            },
            "classifications": {
              "docs": undefined,
              "type": "optional<list<ProductClassification>>",
            },
            "client_verified": {
              "docs": "Indicates whether Client has verified this Product.",
              "type": "optional<boolean>",
            },
            "country_of_origin": {
              "docs": "[DEPRECATED] - Use the country_of_origin on the supplier field. The country the product was manufactured",
              "type": "optional<string>",
            },
            "description": {
              "docs": "Description of product",
              "type": "optional<string>",
            },
            "hs_codes": {
              "docs": "DEPRECATED - HS codes can be found in the classifications array",
              "type": "optional<list<HsCode>>",
            },
            "id": {
              "docs": "The Flexport id used to refer to the product",
              "type": "optional<integer>",
            },
            "name": {
              "docs": "The name of the product",
              "type": "optional<string>",
            },
            "product_category": {
              "docs": "The category to group this product under",
              "type": "optional<string>",
            },
            "product_properties": {
              "docs": "A user defined set of key-value objects to describe the product",
              "type": "optional<list<ProductProperty>>",
            },
            "sku": {
              "docs": "The SKU used to refer to the product",
              "type": "optional<string>",
            },
          },
        },
        "ProductClassification": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": "Type of the object",
              "type": "optional<string>",
            },
            "codes": {
              "docs": "An array of HS codes for this product in the provided region",
              "type": "optional<list<string>>",
            },
            "region": {
              "docs": "The region for this classification. Currently only 2-character ISO codes and "EU" are supported",
              "type": "optional<string>",
            },
          },
        },
        "ProductCreateResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<Product>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "ProductIndexResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<ProductIndexResponseData>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "ProductIndexResponseData": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<list<Product>>",
            },
            "next": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "prev": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "ProductProperty": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": "Type of the object",
              "type": "optional<string>",
            },
            "type": {
              "docs": "Type of this property",
              "type": "optional<string>",
            },
            "value": {
              "docs": "Value of this property",
              "type": "optional<string>",
            },
          },
        },
        "ProductRef": {
          "docs": "[Expandable API link.](https://apidocs.flexport.com/v3/tag/Expansion)",
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "link": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "ref_type": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "ProductShowResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<Product>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "ProductUpdateResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<Product>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "PurchaseOrder": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": "Type of the object",
              "type": "optional<string>",
            },
            "archived_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "cargo_ready_date": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "created_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "destination_addresses": {
              "docs": undefined,
              "type": "optional<list<Address>>",
            },
            "destination_port": {
              "docs": undefined,
              "type": "optional<Place>",
            },
            "freight_paymnet_terms": {
              "docs": undefined,
              "type": "optional<PurchaseOrderFreightPaymnetTerms>",
            },
            "id": {
              "docs": "A unique identifier for the purchase order",
              "type": "optional<integer>",
            },
            "incoterm": {
              "docs": undefined,
              "type": "optional<PurchaseOrderIncoterm>",
            },
            "issue_date": {
              "docs": "the date that the order was issued",
              "type": "optional<string>",
            },
            "line_items": {
              "docs": undefined,
              "type": "optional<PurchaseOrderLineItemCollectionRef>",
            },
            "memo": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "metadata": {
              "docs": undefined,
              "type": "optional<Metadata>",
            },
            "must_arrive_date": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "name": {
              "docs": "The name of the purchase order",
              "type": "optional<string>",
            },
            "order_class": {
              "docs": "Class of the purchase order.",
              "type": "optional<PurchaseOrderOrderClass>",
            },
            "order_type": {
              "docs": "Type of purchase order, which is used for rules, searching, and reporting",
              "type": "optional<string>",
            },
            "origin_address": {
              "docs": undefined,
              "type": "optional<Address>",
            },
            "origin_port": {
              "docs": undefined,
              "type": "optional<Place>",
            },
            "parties": {
              "docs": "A list of the parties in this purchase order. Buyer, Seller and Owner parties will always be returned.",
              "type": "optional<list<Parties>>",
            },
            "priority": {
              "docs": undefined,
              "type": "optional<PurchaseOrderPriority>",
            },
            "status": {
              "docs": "The status of the purchase order. Open POs denote POs that are ready to be booked. Closed POs are ones that you'd like to mark as done (typically because they've finished shipping), while Cancelled POs denote POs that were mistakenly uploaded or that should not be used.",
              "type": "optional<PurchaseOrderStatus>",
            },
            "transportation_mode": {
              "docs": undefined,
              "type": "optional<TransportationMode>",
            },
            "updated_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "PurchaseOrderFreightPaymnetTerms": {
          "docs": undefined,
          "enum": [
            {
              "docs": undefined,
              "name": "freight_collect",
              "value": "freight_collect",
            },
            {
              "docs": undefined,
              "name": "freight_prepaid",
              "value": "freight_prepaid",
            },
          ],
        },
        "PurchaseOrderIncoterm": {
          "docs": undefined,
          "enum": [
            {
              "docs": undefined,
              "name": "EXW",
              "value": "EXW",
            },
            {
              "docs": undefined,
              "name": "FOB",
              "value": "FOB",
            },
            {
              "docs": undefined,
              "name": "FAS",
              "value": "FAS",
            },
            {
              "docs": undefined,
              "name": "FCA",
              "value": "FCA",
            },
            {
              "docs": undefined,
              "name": "CPT",
              "value": "CPT",
            },
            {
              "docs": undefined,
              "name": "CFR",
              "value": "CFR",
            },
            {
              "docs": undefined,
              "name": "CIF",
              "value": "CIF",
            },
            {
              "docs": undefined,
              "name": "CIP",
              "value": "CIP",
            },
            {
              "docs": undefined,
              "name": "DAT",
              "value": "DAT",
            },
            {
              "docs": undefined,
              "name": "DAP",
              "value": "DAP",
            },
            {
              "docs": undefined,
              "name": "DDP",
              "value": "DDP",
            },
            {
              "docs": undefined,
              "name": "DPU",
              "value": "DPU",
            },
          ],
        },
        "PurchaseOrderIndexRequestDirection": {
          "docs": undefined,
          "enum": [
            {
              "docs": undefined,
              "name": "asc",
              "value": "asc",
            },
            {
              "docs": undefined,
              "name": "desc",
              "value": "desc",
            },
          ],
        },
        "PurchaseOrderIndexRequestFRolesItem": {
          "docs": undefined,
          "enum": [
            {
              "docs": undefined,
              "name": "buyer",
              "value": "buyer",
            },
            {
              "docs": undefined,
              "name": "seller",
              "value": "seller",
            },
            {
              "docs": undefined,
              "name": "owner",
              "value": "owner",
            },
            {
              "docs": undefined,
              "name": "shipper",
              "value": "shipper",
            },
            {
              "docs": undefined,
              "name": "consignee",
              "value": "consignee",
            },
            {
              "docs": undefined,
              "name": "freight_forwarder",
              "value": "freight_forwarder",
            },
            {
              "docs": undefined,
              "name": "notify_party",
              "value": "notify_party",
            },
            {
              "docs": undefined,
              "name": "customs_broker",
              "value": "customs_broker",
            },
            {
              "docs": undefined,
              "name": "carrier",
              "value": "carrier",
            },
            {
              "docs": undefined,
              "name": "manufacturer",
              "value": "manufacturer",
            },
            {
              "docs": undefined,
              "name": "buyers_agent",
              "value": "buyers_agent",
            },
            {
              "docs": undefined,
              "name": "sellers_agent",
              "value": "sellers_agent",
            },
          ],
        },
        "PurchaseOrderIndexRequestFStatus": {
          "docs": undefined,
          "enum": [
            {
              "docs": undefined,
              "name": "open",
              "value": "open",
            },
            {
              "docs": undefined,
              "name": "closed",
              "value": "closed",
            },
            {
              "docs": undefined,
              "name": "cancelled",
              "value": "cancelled",
            },
          ],
        },
        "PurchaseOrderIndexResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<PurchaseOrderIndexResponseData>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "PurchaseOrderIndexResponseData": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<list<PurchaseOrder>>",
            },
            "next": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "prev": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "PurchaseOrderLineItem": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": "Type of the object",
              "type": "optional<string>",
            },
            "assigned_party": {
              "docs": undefined,
              "type": "optional<CompanyEntity>",
            },
            "booking_line_items": {
              "docs": undefined,
              "type": "optional<BookingLineItemCollectionRef>",
            },
            "destination_addresses": {
              "docs": undefined,
              "type": "optional<list<PurchaseOrderLineItemDestinationAddress>>",
            },
            "destination_port": {
              "docs": undefined,
              "type": "optional<Place>",
            },
            "hs_codes": {
              "docs": undefined,
              "type": "optional<list<HsCode>>",
            },
            "id": {
              "docs": "Unique identifier for the line item on the latest version of the PO",
              "type": "optional<integer>",
            },
            "incoterm": {
              "docs": undefined,
              "type": "optional<PurchaseOrderLineItemIncoterm>",
            },
            "item_key": {
              "docs": "Value uniquely identifying a line item within a Purchase Order.",
              "type": "optional<string>",
            },
            "line_item_number": {
              "docs": "Integer used to sequence the order of line items. Line items will appear in the UX in this order. Assigned automatically if not provided.",
              "type": "optional<integer>",
            },
            "line_type": {
              "docs": undefined,
              "type": "optional<PurchaseOrderLineItemLineType>",
            },
            "measurements": {
              "docs": "line item measurement group",
              "type": "optional<list<LineItemMeasurement>>",
            },
            "metadata": {
              "docs": undefined,
              "type": "optional<Metadata>",
            },
            "must_arrive_date": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "origin_location": {
              "docs": undefined,
              "type": "optional<Address>",
            },
            "origin_port": {
              "docs": undefined,
              "type": "optional<Place>",
            },
            "parent_line_key": {
              "docs": "The line_item_key of this line items parent",
              "type": "optional<string>",
            },
            "product": {
              "docs": undefined,
              "type": "optional<PurchaseOrderProduct>",
            },
            "purchase_order": {
              "docs": undefined,
              "type": "optional<PurchaseOrderRef>",
            },
            "transportation_mode": {
              "docs": undefined,
              "type": "optional<TransportationMode>",
            },
            "unit_cost": {
              "docs": undefined,
              "type": "optional<Money>",
            },
            "unit_of_measure": {
              "docs": undefined,
              "type": "optional<PurchaseOrderLineItemUnitOfMeasure>",
            },
            "units": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "PurchaseOrderLineItemCollectionRef": {
          "docs": "[Expandable API link.](https://apidocs.flexport.com/v3/tag/Expansion)",
          "properties": {
            "_object": {
              "docs": "Type of the object",
              "type": "optional<string>",
            },
            "link": {
              "docs": "URL to fetch list of objects",
              "type": "optional<string>",
            },
            "ref_type": {
              "docs": "Type of the object in this list",
              "type": "optional<string>",
            },
          },
        },
        "PurchaseOrderLineItemDestinationAddress": {
          "docs": undefined,
          "properties": {
            "location_ref": {
              "docs": "Location ref",
              "type": "optional<string>",
            },
            "units": {
              "docs": "Number of units to go to this location",
              "type": "optional<integer>",
            },
          },
        },
        "PurchaseOrderLineItemIncoterm": {
          "docs": undefined,
          "enum": [
            {
              "docs": undefined,
              "name": "EXW",
              "value": "EXW",
            },
            {
              "docs": undefined,
              "name": "FOB",
              "value": "FOB",
            },
            {
              "docs": undefined,
              "name": "FAS",
              "value": "FAS",
            },
            {
              "docs": undefined,
              "name": "FCA",
              "value": "FCA",
            },
            {
              "docs": undefined,
              "name": "CPT",
              "value": "CPT",
            },
            {
              "docs": undefined,
              "name": "CFR",
              "value": "CFR",
            },
            {
              "docs": undefined,
              "name": "CIF",
              "value": "CIF",
            },
            {
              "docs": undefined,
              "name": "CIP",
              "value": "CIP",
            },
            {
              "docs": undefined,
              "name": "DAT",
              "value": "DAT",
            },
            {
              "docs": undefined,
              "name": "DAP",
              "value": "DAP",
            },
            {
              "docs": undefined,
              "name": "DDP",
              "value": "DDP",
            },
            {
              "docs": undefined,
              "name": "DPU",
              "value": "DPU",
            },
          ],
        },
        "PurchaseOrderLineItemIndexRequestDirection": {
          "docs": undefined,
          "enum": [
            {
              "docs": undefined,
              "name": "asc",
              "value": "asc",
            },
            {
              "docs": undefined,
              "name": "desc",
              "value": "desc",
            },
          ],
        },
        "PurchaseOrderLineItemIndexResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<PurchaseOrderLineItemIndexResponseData>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "PurchaseOrderLineItemIndexResponseData": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<list<PurchaseOrderLineItem>>",
            },
            "next": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "prev": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "PurchaseOrderLineItemLineType": {
          "docs": undefined,
          "enum": [
            {
              "docs": undefined,
              "name": "main_line",
              "value": "main_line",
            },
            {
              "docs": undefined,
              "name": "sub_line",
              "value": "sub_line",
            },
            {
              "docs": undefined,
              "name": "component_line",
              "value": "component_line",
            },
          ],
        },
        "PurchaseOrderLineItemRef": {
          "docs": "[Expandable API link.](https://apidocs.flexport.com/v3/tag/Expansion)",
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "link": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "ref_type": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "PurchaseOrderLineItemShowResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<PurchaseOrderLineItem>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "PurchaseOrderLineItemUnitOfMeasure": {
          "docs": undefined,
          "enum": [
            {
              "docs": undefined,
              "name": "BBL",
              "value": "BBL",
            },
            {
              "docs": undefined,
              "name": "CAR",
              "value": "CAR",
            },
            {
              "docs": undefined,
              "name": "CGM",
              "value": "CGM",
            },
            {
              "docs": undefined,
              "name": "CKG",
              "value": "CKG",
            },
            {
              "docs": undefined,
              "name": "CM",
              "value": "CM",
            },
            {
              "docs": undefined,
              "name": "CM2",
              "value": "CM2",
            },
            {
              "docs": undefined,
              "name": "CTN",
              "value": "CTN",
            },
            {
              "docs": undefined,
              "name": "CYK",
              "value": "CYK",
            },
            {
              "docs": undefined,
              "name": "DPC",
              "value": "DPC",
            },
            {
              "docs": undefined,
              "name": "DPR",
              "value": "DPR",
            },
            {
              "docs": undefined,
              "name": "DS",
              "value": "DS",
            },
            {
              "docs": undefined,
              "name": "FBM",
              "value": "FBM",
            },
            {
              "docs": undefined,
              "name": "G",
              "value": "G",
            },
            {
              "docs": undefined,
              "name": "GBQ",
              "value": "GBQ",
            },
            {
              "docs": undefined,
              "name": "GR",
              "value": "GR",
            },
            {
              "docs": undefined,
              "name": "GRL",
              "value": "GRL",
            },
            {
              "docs": undefined,
              "name": "HUN",
              "value": "HUN",
            },
            {
              "docs": undefined,
              "name": "IRG",
              "value": "IRG",
            },
            {
              "docs": undefined,
              "name": "JWL",
              "value": "JWL",
            },
            {
              "docs": undefined,
              "name": "K",
              "value": "K",
            },
            {
              "docs": undefined,
              "name": "KG",
              "value": "KG",
            },
            {
              "docs": undefined,
              "name": "KM",
              "value": "KM",
            },
            {
              "docs": undefined,
              "name": "KM3",
              "value": "KM3",
            },
            {
              "docs": undefined,
              "name": "KWH",
              "value": "KWH",
            },
            {
              "docs": undefined,
              "name": "L",
              "value": "L",
            },
            {
              "docs": undefined,
              "name": "LNM",
              "value": "LNM",
            },
            {
              "docs": undefined,
              "name": "M",
              "value": "M",
            },
            {
              "docs": undefined,
              "name": "M2",
              "value": "M2",
            },
            {
              "docs": undefined,
              "name": "M3",
              "value": "M3",
            },
            {
              "docs": undefined,
              "name": "MBQ",
              "value": "MBQ",
            },
            {
              "docs": undefined,
              "name": "NO",
              "value": "NO",
            },
            {
              "docs": undefined,
              "name": "OSG",
              "value": "OSG",
            },
            {
              "docs": undefined,
              "name": "PCS",
              "value": "PCS",
            },
            {
              "docs": undefined,
              "name": "PDG",
              "value": "PDG",
            },
            {
              "docs": undefined,
              "name": "PFL",
              "value": "PFL",
            },
            {
              "docs": undefined,
              "name": "PK",
              "value": "PK",
            },
            {
              "docs": undefined,
              "name": "PRS",
              "value": "PRS",
            },
            {
              "docs": undefined,
              "name": "PTG",
              "value": "PTG",
            },
            {
              "docs": undefined,
              "name": "PX",
              "value": "PX",
            },
            {
              "docs": undefined,
              "name": "RHG",
              "value": "RHG",
            },
            {
              "docs": undefined,
              "name": "RUG",
              "value": "RUG",
            },
            {
              "docs": undefined,
              "name": "T",
              "value": "T",
            },
            {
              "docs": undefined,
              "name": "TDWB",
              "value": "TDWB",
            },
            {
              "docs": undefined,
              "name": "W",
              "value": "W",
            },
            {
              "docs": undefined,
              "name": "X",
              "value": "X",
            },
          ],
        },
        "PurchaseOrderOrderClass": {
          "docs": "Class of the purchase order.",
          "enum": [
            {
              "docs": undefined,
              "name": "purchase_order",
              "value": "purchase_order",
            },
            {
              "docs": undefined,
              "name": "sales_order",
              "value": "sales_order",
            },
            {
              "docs": undefined,
              "name": "transfer_order",
              "value": "transfer_order",
            },
            {
              "docs": undefined,
              "name": "delivery_order",
              "value": "delivery_order",
            },
            {
              "docs": undefined,
              "name": "work_order",
              "value": "work_order",
            },
          ],
        },
        "PurchaseOrderPriority": {
          "docs": undefined,
          "enum": [
            {
              "docs": undefined,
              "name": "standard",
              "value": "standard",
            },
            {
              "docs": undefined,
              "name": "high",
              "value": "high",
            },
          ],
        },
        "PurchaseOrderProduct": {
          "docs": undefined,
          "properties": {
            "color": {
              "docs": "The color of the product",
              "type": "optional<string>",
            },
            "country_of_origin": {
              "docs": "The country the product was manufactured in",
              "type": "optional<string>",
            },
            "dangerous": {
              "docs": "Whether or not the product is a dangerous good.",
              "type": "optional<boolean>",
            },
            "ean_ucc_13": {
              "docs": "The EAN/UCC-13 of the product.",
              "type": "optional<string>",
            },
            "ean_ucc_8": {
              "docs": "The EAN/UCC-8 of the product.",
              "type": "optional<string>",
            },
            "lot_number": {
              "docs": "The lot number of the product",
              "type": "optional<string>",
            },
            "name": {
              "docs": "The name of product",
              "type": "optional<string>",
            },
            "product_category": {
              "docs": "The category to group this product under",
              "type": "optional<string>",
            },
            "size": {
              "docs": "The size of the product",
              "type": "optional<string>",
            },
            "sku": {
              "docs": "SKU of the product.",
              "type": "optional<string>",
            },
            "style": {
              "docs": "The style of the product",
              "type": "optional<string>",
            },
            "upc": {
              "docs": "Universal product code",
              "type": "optional<string>",
            },
          },
        },
        "PurchaseOrderRef": {
          "docs": "[Expandable API link.](https://apidocs.flexport.com/v3/tag/Expansion)",
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "link": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "ref_type": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "PurchaseOrderShowResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<PurchaseOrder>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "PurchaseOrderStatus": {
          "docs": "The status of the purchase order. Open POs denote POs that are ready to be booked. Closed POs are ones that you'd like to mark as done (typically because they've finished shipping), while Cancelled POs denote POs that were mistakenly uploaded or that should not be used.",
          "enum": [
            {
              "docs": undefined,
              "name": "open",
              "value": "open",
            },
            {
              "docs": undefined,
              "name": "closed",
              "value": "closed",
            },
            {
              "docs": undefined,
              "name": "cancelled",
              "value": "cancelled",
            },
          ],
        },
        "RailShipmentLeg": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "container_legs": {
              "docs": undefined,
              "type": "optional<ContainerLegCollectionRef>",
            },
          },
        },
        "Shipment": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": "Type of the object",
              "type": "optional<string>",
            },
            "actual_arrival_date": {
              "docs": "Actual arrival date to the last port of the main voyage",
              "type": "optional<string>",
            },
            "actual_delivered_in_full_date": {
              "docs": "Actual delivery date to the destination location. For ocean shipments with multiple containers, this is the date of last delivered container",
              "type": "optional<string>",
            },
            "actual_departure_date": {
              "docs": "Actual departure date from the first port of the main voyage",
              "type": "optional<string>",
            },
            "actual_picked_up_in_full_date": {
              "docs": "Actual pickup date from the origin location. For ocean shipments with multiple containers, this is the date of last picked up container",
              "type": "optional<string>",
            },
            "air_shipment": {
              "docs": undefined,
              "type": "optional<AirShipmentDetail>",
            },
            "arrival_date": {
              "docs": "DEPRECATED date field",
              "type": "optional<string>",
            },
            "belongs_to_a_buyers_consol": {
              "docs": "Indicated whether the shipment is part of a buyer's consol.",
              "type": "optional<boolean>",
            },
            "booking": {
              "docs": undefined,
              "type": "optional<GenericObjectRef>",
            },
            "buyers": {
              "docs": undefined,
              "type": "optional<list<CompanyEntity>>",
            },
            "calculated_volume": {
              "docs": undefined,
              "type": "optional<Volume>",
            },
            "calculated_weight": {
              "docs": undefined,
              "type": "optional<Weight>",
            },
            "cargo_ready_date": {
              "docs": "Date when cargo is ready for pickup at the origin location",
              "type": "optional<string>",
            },
            "child_shipments": {
              "docs": "Links to the child shipments if the shipment is the parent shipment in a buyer's consol.",
              "type": "optional<list<ShipmentRef>>",
            },
            "commercial_invoices": {
              "docs": undefined,
              "type": "optional<CommercialInvoiceCollectionRef>",
            },
            "consignees": {
              "docs": undefined,
              "type": "optional<list<CompanyEntity>>",
            },
            "created_date": {
              "docs": "Date the user confirmed the Flexport quote for this Shipment",
              "type": "optional<string>",
            },
            "customs_entries": {
              "docs": undefined,
              "type": "optional<CustomsEntryCollectionRef>",
            },
            "dangerous_goods": {
              "docs": undefined,
              "type": "optional<ShipmentDangerousGoods>",
            },
            "delivered_in_full_date": {
              "docs": "DEPRECATED date field",
              "type": "optional<string>",
            },
            "departure_date": {
              "docs": "DEPRECATED date field",
              "type": "optional<string>",
            },
            "documents": {
              "docs": undefined,
              "type": "optional<DocumentCollectionRef>",
            },
            "estimated_arrival_date": {
              "docs": "Estimated arrival date to the last port of the main voyage",
              "type": "optional<string>",
            },
            "estimated_delivered_in_full_date": {
              "docs": "Estimated delivery date to the destination location. For ocean shipments with multiple containers, this is the date of last delivered container",
              "type": "optional<string>",
            },
            "estimated_departure_date": {
              "docs": "Estimated departure date from the first port of the main voyage",
              "type": "optional<string>",
            },
            "estimated_picked_up_in_full_date": {
              "docs": "Estimated pickup date from the origin location. For ocean shipments with multiple containers, this is the date of last picked up container",
              "type": "optional<string>",
            },
            "freight_type": {
              "docs": undefined,
              "type": "optional<FreightType>",
            },
            "id": {
              "docs": "Unique identifier for the shipment",
              "type": "optional<integer>",
            },
            "importers_of_record": {
              "docs": undefined,
              "type": "optional<list<CompanyEntity>>",
            },
            "incoterm": {
              "docs": undefined,
              "type": "optional<ShipmentIncoterm>",
            },
            "it_number": {
              "docs": "Inbond Transit number used for US Customs",
              "type": "optional<string>",
            },
            "items": {
              "docs": undefined,
              "type": "optional<list<ShipmentItem>>",
            },
            "legs": {
              "docs": undefined,
              "type": "optional<LegCollectionRef>",
            },
            "metadata": {
              "docs": undefined,
              "type": "optional<Metadata>",
            },
            "name": {
              "docs": "The name of the shipment",
              "type": "optional<string>",
            },
            "ocean_shipment": {
              "docs": undefined,
              "type": "optional<OceanShipmentDetail>",
            },
            "parent_shipment": {
              "docs": undefined,
              "type": "optional<ShipmentRef>",
            },
            "picked_up_in_full_date": {
              "docs": "DEPRECATED date field",
              "type": "optional<string>",
            },
            "pieces": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "priority": {
              "docs": "The level of attention Flexport should give to this shipment",
              "type": "optional<ShipmentPriority>",
            },
            "sellers": {
              "docs": undefined,
              "type": "optional<list<CompanyEntity>>",
            },
            "shippers": {
              "docs": undefined,
              "type": "optional<list<CompanyEntity>>",
            },
            "status": {
              "docs": undefined,
              "type": "optional<ShipmentStatus>",
            },
            "target_delivery_date": {
              "docs": "Target date for when the shipment will be fully delivered. This date is set when the shipment's booking is confirmed. This value may be different from estimated_delivered_in_full_date, which is updated when there is new information about the progress of a shipment.",
              "type": "optional<string>",
            },
            "transportation_mode": {
              "docs": undefined,
              "type": "optional<TransportationMode>",
            },
            "updated_at": {
              "docs": "Date when the shipment object was last updated",
              "type": "optional<string>",
            },
            "visibility_only": {
              "docs": "Indicates if a shipment was requested for tracking via the Flexport visibility-only service.",
              "type": "optional<boolean>",
            },
            "wants_commercial_invoice_transcription": {
              "docs": "Determines if a shipment is using Flexport’s commercial invoice transcription service.",
              "type": "optional<boolean>",
            },
            "wants_delivery_service": {
              "docs": "Determines if Flexport is responsible for door delivery on a shipment.",
              "type": "optional<boolean>",
            },
            "wants_export_customs_service": {
              "docs": "Determines if the shipment requires Flexport to provide export customs services.",
              "type": "optional<boolean>",
            },
            "wants_flexport_freight": {
              "docs": "Determines if a shipment is using Flexport services for a combination of import customs clearance or final leg delivery.",
              "type": "optional<boolean>",
            },
            "wants_flexport_insurance": {
              "docs": "Determines if a shipment is using Flexport’s insurance service.",
              "type": "optional<boolean>",
            },
            "wants_freight_management_bco": {
              "docs": "Determines if a shipment bypasses a freight forwader and is booked directly with a steamship line.",
              "type": "optional<boolean>",
            },
            "wants_import_customs_service": {
              "docs": "Determines if the shipment requires Flexport to provide import customs services.",
              "type": "optional<boolean>",
            },
            "wants_pickup_service": {
              "docs": "Determines if a shipment uses Flexport trucking services from origin location to port.",
              "type": "optional<boolean>",
            },
            "wants_trade_declaration_service": {
              "docs": "Determines if a shipment uses trade declaration service for HK exports.",
              "type": "optional<boolean>",
            },
          },
        },
        "ShipmentContainer": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": "Type of the object",
              "type": "optional<string>",
            },
            "actual_arrival_date": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "actual_delivery_date": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "actual_departure_date": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "actual_pickup_date": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "available_for_pickup_date": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "cargo_ready_date": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "container_legs": {
              "docs": undefined,
              "type": "optional<ContainerLegCollectionRef>",
            },
            "container_number": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "container_size": {
              "docs": undefined,
              "type": "optional<ShipmentContainerContainerSize>",
            },
            "container_type": {
              "docs": undefined,
              "type": "optional<ShipmentContainerContainerType>",
            },
            "empty_ready_date": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "empty_returned_date": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "estimated_arrival_date": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "estimated_available_for_pickup_date": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "estimated_delivery_date": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "estimated_departure_date": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "estimated_pickup_date": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "items": {
              "docs": undefined,
              "type": "optional<list<ShipmentItem>>",
            },
            "last_free_day_date": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "metadata": {
              "docs": undefined,
              "type": "optional<Metadata>",
            },
            "pickup_number": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "seal_number": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "shipment": {
              "docs": undefined,
              "type": "optional<ShipmentRef>",
            },
          },
        },
        "ShipmentContainerContainerSize": {
          "docs": undefined,
          "enum": [
            {
              "docs": undefined,
              "name": "twenty_ft",
              "value": "twenty_ft",
            },
            {
              "docs": undefined,
              "name": "fourty_ft",
              "value": "fourty_ft",
            },
            {
              "docs": undefined,
              "name": "fourty_ft_hc",
              "value": "fourty_ft_hc",
            },
            {
              "docs": undefined,
              "name": "fourty_five_ft_hc",
              "value": "fourty_five_ft_hc",
            },
            {
              "docs": undefined,
              "name": "fifty_three_ft",
              "value": "fifty_three_ft",
            },
            {
              "docs": undefined,
              "name": "fifty_three_ft_hc",
              "value": "fifty_three_ft_hc",
            },
          ],
        },
        "ShipmentContainerContainerType": {
          "docs": undefined,
          "enum": [
            {
              "docs": undefined,
              "name": "dry",
              "value": "dry",
            },
            {
              "docs": undefined,
              "name": "flat_rack",
              "value": "flat_rack",
            },
            {
              "docs": undefined,
              "name": "headload",
              "value": "headload",
            },
            {
              "docs": undefined,
              "name": "open",
              "value": "open",
            },
            {
              "docs": undefined,
              "name": "reefer",
              "value": "reefer",
            },
            {
              "docs": undefined,
              "name": "lcl",
              "value": "lcl",
            },
            {
              "docs": undefined,
              "name": "tank",
              "value": "tank",
            },
            {
              "docs": undefined,
              "name": "ventilated",
              "value": "ventilated",
            },
            {
              "docs": undefined,
              "name": "bulk",
              "value": "bulk",
            },
            {
              "docs": undefined,
              "name": "special",
              "value": "special",
            },
          ],
        },
        "ShipmentDangerousGoods": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": "Type of this object",
              "type": "optional<string>",
            },
            "classifications": {
              "docs": "Array of numeric UN codes that combine both the class and the division of the dangerous good classification",
              "type": "optional<list<string>>",
            },
            "review_status": {
              "docs": undefined,
              "type": "optional<ShipmentDangerousGoodsReviewStatus>",
            },
          },
        },
        "ShipmentDangerousGoodsReviewStatus": {
          "docs": undefined,
          "enum": [
            {
              "docs": undefined,
              "name": "pending",
              "value": "pending",
            },
            {
              "docs": undefined,
              "name": "in_progress",
              "value": "in_progress",
            },
            {
              "docs": undefined,
              "name": "complete",
              "value": "complete",
            },
            {
              "docs": undefined,
              "name": "denied",
              "value": "denied",
            },
            {
              "docs": undefined,
              "name": "not_applicable",
              "value": "not_applicable",
            },
            {
              "docs": undefined,
              "name": "misflagged",
              "value": "misflagged",
            },
          ],
        },
        "ShipmentEventData": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": "Type of the object",
              "type": "optional<string>",
            },
            "containers": {
              "docs": "An array of the containers associated with this event.  Array is empty for shipment-level events.",
              "type": "optional<list<ShipmentContainer>>",
            },
            "exception": {
              "docs": undefined,
              "type": "optional<Exception>",
            },
            "location": {
              "docs": "Possibly null. Location associated with the event.",
              "type": "optional<ShipmentNode>",
            },
            "resource": {
              "docs": undefined,
              "type": "optional<ShipmentEventDataResource>",
            },
            "shipment": {
              "docs": undefined,
              "type": "optional<Shipment>",
            },
          },
        },
        "ShipmentEventDataResource": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "Shipment",
            },
            {
              "docs": undefined,
              "type": "ShipmentLeg",
            },
            {
              "docs": undefined,
              "type": "OceanShipmentContainerLeg",
            },
          ],
        },
        "ShipmentIncoterm": {
          "docs": undefined,
          "enum": [
            {
              "docs": undefined,
              "name": "EXW",
              "value": "EXW",
            },
            {
              "docs": undefined,
              "name": "FOB",
              "value": "FOB",
            },
            {
              "docs": undefined,
              "name": "FAS",
              "value": "FAS",
            },
            {
              "docs": undefined,
              "name": "FCA",
              "value": "FCA",
            },
            {
              "docs": undefined,
              "name": "CPT",
              "value": "CPT",
            },
            {
              "docs": undefined,
              "name": "CFR",
              "value": "CFR",
            },
            {
              "docs": undefined,
              "name": "CIF",
              "value": "CIF",
            },
            {
              "docs": undefined,
              "name": "CIP",
              "value": "CIP",
            },
            {
              "docs": undefined,
              "name": "DAT",
              "value": "DAT",
            },
            {
              "docs": undefined,
              "name": "DAP",
              "value": "DAP",
            },
            {
              "docs": undefined,
              "name": "DDP",
              "value": "DDP",
            },
            {
              "docs": undefined,
              "name": "DPU",
              "value": "DPU",
            },
          ],
        },
        "ShipmentIndexRequestDirection": {
          "docs": undefined,
          "enum": [
            {
              "docs": undefined,
              "name": "asc",
              "value": "asc",
            },
            {
              "docs": undefined,
              "name": "desc",
              "value": "desc",
            },
          ],
        },
        "ShipmentIndexRequestSort": {
          "docs": undefined,
          "enum": [
            {
              "docs": undefined,
              "name": "id",
              "value": "id",
            },
            {
              "docs": undefined,
              "name": "transportation_mode",
              "value": "transportation_mode",
            },
            {
              "docs": undefined,
              "name": "status",
              "value": "status",
            },
            {
              "docs": undefined,
              "name": "updated_at",
              "value": "updated_at",
            },
            {
              "docs": undefined,
              "name": "archived_at",
              "value": "archived_at",
            },
          ],
        },
        "ShipmentIndexResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<ShipmentIndexResponseData>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "ShipmentIndexResponseData": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<list<Shipment>>",
            },
            "next": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "prev": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "ShipmentItem": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": "Type of the object",
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "product": {
              "docs": undefined,
              "type": "optional<Product>",
            },
            "purchase_order_number": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "total_units": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "total_volume": {
              "docs": undefined,
              "type": "optional<Volume>",
            },
            "total_weight": {
              "docs": undefined,
              "type": "optional<Weight>",
            },
          },
        },
        "ShipmentLeg": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": "Type of the object",
              "type": "optional<string>",
            },
            "actual_arrival_date": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "actual_departure_date": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "additional_dates": {
              "docs": undefined,
              "type": "optional<AdditionalDates>",
            },
            "air_leg": {
              "docs": undefined,
              "type": "optional<AirShipmentLeg>",
            },
            "cargo_ready_date": {
              "docs": "[DEPRECATED] See additional_dates",
              "type": "optional<string>",
            },
            "carrier_name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "deleted_at": {
              "docs": "Date-time string when this leg was deleted. Null if not deleted.",
              "type": "optional<string>",
            },
            "destination": {
              "docs": undefined,
              "type": "optional<ShipmentNode>",
            },
            "estimated_arrival_date": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "estimated_departure_date": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "ocean_leg": {
              "docs": undefined,
              "type": "optional<OceanShipmentLeg>",
            },
            "origin": {
              "docs": undefined,
              "type": "optional<ShipmentNode>",
            },
            "rail_leg": {
              "docs": undefined,
              "type": "optional<RailShipmentLeg>",
            },
            "shipment": {
              "docs": undefined,
              "type": "optional<ShipmentRef>",
            },
            "transportation_mode": {
              "docs": undefined,
              "type": "optional<TransportationMode>",
            },
            "trucking_leg": {
              "docs": undefined,
              "type": "optional<TruckingShipmentLeg>",
            },
          },
        },
        "ShipmentLegIndexResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<ShipmentLegIndexResponseData>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "ShipmentLegIndexResponseData": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<list<ShipmentLeg>>",
            },
            "next": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "prev": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "ShipmentLegShowResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<ShipmentLeg>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "ShipmentNode": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": "Type of the object",
              "type": "optional<string>",
            },
            "place": {
              "docs": undefined,
              "type": "optional<Place>",
            },
            "tags": {
              "docs": undefined,
              "type": "optional<list<string>>",
            },
            "terminal": {
              "docs": undefined,
              "type": "optional<Terminal>",
            },
          },
        },
        "ShipmentPriority": {
          "docs": "The level of attention Flexport should give to this shipment",
          "enum": [
            {
              "docs": undefined,
              "name": "standard",
              "value": "standard",
            },
            {
              "docs": undefined,
              "name": "high",
              "value": "high",
            },
          ],
        },
        "ShipmentRef": {
          "docs": "[Expandable API link.](https://apidocs.flexport.com/v3/tag/Expansion)",
          "properties": {
            "_object": {
              "docs": "Type of Object Returned. In this case, /api/refs/object.",
              "type": "optional<string>",
            },
            "id": {
              "docs": "Unique identifier for the shipment",
              "type": "optional<integer>",
            },
            "link": {
              "docs": "Link to the shipment",
              "type": "optional<string>",
            },
            "ref_type": {
              "docs": "Type of Object Referenced. In this case, /shipment.",
              "type": "optional<string>",
            },
          },
        },
        "ShipmentShowResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<Shipment>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "ShipmentStatus": {
          "docs": undefined,
          "enum": [
            {
              "docs": undefined,
              "name": "seller_location",
              "value": "seller_location",
            },
            {
              "docs": undefined,
              "name": "origin_stop_off",
              "value": "origin_stop_off",
            },
            {
              "docs": undefined,
              "name": "in_transit_to_departure_port",
              "value": "in_transit_to_departure_port",
            },
            {
              "docs": undefined,
              "name": "departure_port",
              "value": "departure_port",
            },
            {
              "docs": undefined,
              "name": "in_transit_to_intermediary_port",
              "value": "in_transit_to_intermediary_port",
            },
            {
              "docs": undefined,
              "name": "intermediary_port",
              "value": "intermediary_port",
            },
            {
              "docs": undefined,
              "name": "in_transit_to_arrival_port",
              "value": "in_transit_to_arrival_port",
            },
            {
              "docs": undefined,
              "name": "arrival_port",
              "value": "arrival_port",
            },
            {
              "docs": undefined,
              "name": "deconsolidation",
              "value": "deconsolidation",
            },
            {
              "docs": undefined,
              "name": "in_transit_to_final_destination",
              "value": "in_transit_to_final_destination",
            },
            {
              "docs": undefined,
              "name": "destination_stop_off",
              "value": "destination_stop_off",
            },
            {
              "docs": undefined,
              "name": "gated_out",
              "value": "gated_out",
            },
            {
              "docs": undefined,
              "name": "final_destination",
              "value": "final_destination",
            },
          ],
        },
        "ShipmentUpdateResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<Shipment>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "ShipmentsShareableResponse": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<ShipmentsShareableResponseData>",
            },
            "self": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "ShipmentsShareableResponseData": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "shipments": {
              "docs": undefined,
              "type": "optional<list<ShipmentsShareableResponseDataShipmentsItem>>",
            },
          },
        },
        "ShipmentsShareableResponseDataShipmentsItem": {
          "docs": undefined,
          "properties": {
            "expiration_date": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "shareable_url": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "shipment_id": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "ShippingUnit": {
          "docs": "For detailed cargo, \`shipping_units\` is required. For simple cargo, \`shipping_units\` is required, but only one should be specified.",
          "properties": {
            "_object": {
              "docs": "String representing the object’s type. Always \`/shipping_unit\` for this object.",
              "type": "optional<string>",
            },
            "atomic_count": {
              "docs": "Required if \`unit_type\` = \`pallet\`. The number of atomic units, i.e. units that will not be unpacked and broken up during shipping, contained in each shipping unit.",
              "type": "optional<integer>",
            },
            "count": {
              "docs": "Required. Total number of this shipping unit.",
              "type": "optional<integer>",
            },
            "height": {
              "docs": undefined,
              "type": "optional<Length>",
            },
            "length": {
              "docs": undefined,
              "type": "optional<Length>",
            },
            "name": {
              "docs": "Optional. Name of the unit of cargo.",
              "type": "optional<string>",
            },
            "unit_type": {
              "docs": "Required. Packing method of the shipping. This can be \`bag\`, \`bale\`, \`barrel\`, \`carton\`, \`crate\`, \`package\`, \`pallet\`, or \`roll\`.",
              "type": "optional<string>",
            },
            "volume": {
              "docs": undefined,
              "type": "optional<Volume>",
            },
            "weight": {
              "docs": undefined,
              "type": "optional<Weight>",
            },
            "width": {
              "docs": undefined,
              "type": "optional<Length>",
            },
          },
        },
        "ShippingUnitCreate": {
          "docs": "For detailed cargo, \`shipping_units\` is required. For simple cargo, \`shipping_units\` is required, but only one should be specified.",
          "properties": {
            "atomic_count": {
              "docs": "Required if \`unit_type\` = \`pallet\`. The number of atomic units, i.e. units that will not be unpacked and broken up during shipping, contained in each shipping unit.",
              "type": "optional<integer>",
            },
            "count": {
              "docs": "Required. Total number of this shipping unit.",
              "type": "optional<integer>",
            },
            "height": {
              "docs": undefined,
              "type": "optional<LengthCreate>",
            },
            "length": {
              "docs": undefined,
              "type": "optional<LengthCreate>",
            },
            "name": {
              "docs": "Optional. Name of the unit of cargo.",
              "type": "optional<string>",
            },
            "unit_type": {
              "docs": "Required. Packing method of the shipping. This can be \`bag\`, \`bale\`, \`barrel\`, \`carton\`, \`crate\`, \`package\`, \`pallet\`, or \`roll\`.",
              "type": "optional<string>",
            },
            "volume": {
              "docs": undefined,
              "type": "optional<VolumeCreate>",
            },
            "weight": {
              "docs": undefined,
              "type": "optional<WeightCreate>",
            },
            "width": {
              "docs": undefined,
              "type": "optional<LengthCreate>",
            },
          },
        },
        "Terminal": {
          "docs": "Name and address of a specific terminal within a port or airport.  Possibly null",
          "properties": {
            "_object": {
              "docs": "Type of the object",
              "type": "optional<string>",
            },
            "address": {
              "docs": undefined,
              "type": "optional<Address>",
            },
            "firms_code": {
              "docs": "Four digit alpha-numeric identifier assigned by U.S. Customs and Border Protection to bonded facilities;  available prior to shipment arrival at location tagged 'customs_entry'",
              "type": "optional<string>",
            },
            "name": {
              "docs": "Name of the terminal",
              "type": "optional<string>",
            },
          },
        },
        "TransportationMode": {
          "docs": undefined,
          "enum": [
            {
              "docs": undefined,
              "name": "ocean",
              "value": "ocean",
            },
            {
              "docs": undefined,
              "name": "air",
              "value": "air",
            },
            {
              "docs": undefined,
              "name": "truck",
              "value": "truck",
            },
            {
              "docs": undefined,
              "name": "rail",
              "value": "rail",
            },
            {
              "docs": undefined,
              "name": "unknown_transportation",
              "value": "unknown_transportation",
            },
            {
              "docs": undefined,
              "name": "ocean_air",
              "value": "ocean_air",
            },
            {
              "docs": undefined,
              "name": "truck_intl",
              "value": "truck_intl",
            },
            {
              "docs": undefined,
              "name": "warehouse_storage",
              "value": "warehouse_storage",
            },
          ],
        },
        "TruckingBookingDetail": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": "Type of the object",
              "type": "optional<string>",
            },
            "description_of_products": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "is_ftl": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "payment_terms": {
              "docs": undefined,
              "type": "optional<TruckingBookingDetailPaymentTerms>",
            },
          },
        },
        "TruckingBookingDetailPaymentTerms": {
          "docs": undefined,
          "enum": [
            {
              "docs": undefined,
              "name": "collect",
              "value": "collect",
            },
            {
              "docs": undefined,
              "name": "prepaid",
              "value": "prepaid",
            },
          ],
        },
        "TruckingShipmentLeg": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "container_legs": {
              "docs": undefined,
              "type": "optional<ContainerLegCollectionRef>",
            },
            "pieces": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "scac_code": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "service_type": {
              "docs": undefined,
              "type": "optional<TruckingShipmentLegServiceType>",
            },
            "tracking_number": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "TruckingShipmentLegServiceType": {
          "docs": undefined,
          "enum": [
            {
              "docs": undefined,
              "name": "ltl",
              "value": "ltl",
            },
            {
              "docs": undefined,
              "name": "ftl",
              "value": "ftl",
            },
            {
              "docs": undefined,
              "name": "drayage",
              "value": "drayage",
            },
            {
              "docs": undefined,
              "name": "cartage",
              "value": "cartage",
            },
          ],
        },
        "VatNumber": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": "Type of the object",
              "type": "optional<string>",
            },
            "country_code": {
              "docs": "ISO 3166 two-letter country code",
              "type": "optional<string>",
            },
            "number": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "Volume": {
          "docs": undefined,
          "extends": [
            "VolumeCreate",
          ],
          "properties": {
            "_object": {
              "docs": "Type of the object",
              "type": "optional<string>",
            },
          },
        },
        "VolumeCreate": {
          "docs": undefined,
          "properties": {
            "unit": {
              "docs": "unit of measurement. "cbm" for cubic meters. "cbft" for cubic feet.",
              "type": "optional<VolumeCreateUnit>",
            },
            "value": {
              "docs": "total volume",
              "type": "optional<double>",
            },
          },
        },
        "VolumeCreateUnit": {
          "docs": "unit of measurement. "cbm" for cubic meters. "cbft" for cubic feet.",
          "enum": [
            {
              "docs": undefined,
              "name": "cbm",
              "value": "cbm",
            },
            {
              "docs": undefined,
              "name": "cbft",
              "value": "cbft",
            },
          ],
        },
        "WebhookEvent": {
          "docs": undefined,
          "properties": {
            "_object": {
              "docs": "Type of the object",
              "type": "optional<string>",
            },
            "created_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "data": {
              "docs": undefined,
              "type": "optional<ShipmentEventData>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "occurred_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "type": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "version": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "Weight": {
          "docs": undefined,
          "extends": [
            "WeightCreate",
          ],
          "properties": {
            "_object": {
              "docs": "String representing the object’s type. Always \`/quantity/weight\` for this object.",
              "type": "optional<string>",
            },
          },
        },
        "WeightCreate": {
          "docs": undefined,
          "properties": {
            "unit": {
              "docs": "Required. Unit of measurement. "kg" for kilograms, "lbs" for pounds",
              "type": "optional<WeightCreateUnit>",
            },
            "value": {
              "docs": "Required. Specifies the weight as a float.",
              "type": "optional<double>",
            },
          },
        },
        "WeightCreateUnit": {
          "docs": "Required. Unit of measurement. "kg" for kilograms, "lbs" for pounds",
          "enum": [
            {
              "docs": undefined,
              "name": "kg",
              "value": "kg",
            },
            {
              "docs": undefined,
              "name": "lbs",
              "value": "lbs",
            },
          ],
        },
        "WriteProductClassification": {
          "docs": undefined,
          "properties": {
            "codes": {
              "docs": "Always required. An array of HS codes for this product in the provided region",
              "type": "list<string>",
            },
            "region": {
              "docs": "Always required. The region for this classification. Currently only 2-character ISO codes and "EU" are supported",
              "type": "string",
            },
          },
        },
        "WriteProductProperty": {
          "docs": undefined,
          "properties": {
            "type": {
              "docs": "Always required. User defined type of this property",
              "type": "string",
            },
            "value": {
              "docs": "Always required. Value of this property",
              "type": "string",
            },
          },
        },
        "WriteProductSupplier": {
          "docs": undefined,
          "properties": {
            "country_of_origin": {
              "docs": "Always required. ISO Alpha-2 country in which the product is manufactured",
              "type": "string",
            },
            "id": {
              "docs": "The supplier location ID. Either id or ref is required.",
              "type": "optional<integer>",
            },
            "ref": {
              "docs": "Your custom string used to refer to the supplier location. Either id or ref is required.",
              "type": "optional<string>",
            },
          },
        },
        "WriteVatNumber": {
          "docs": undefined,
          "properties": {
            "country_code": {
              "docs": "ISO 3166 two-letter country code",
              "type": "string",
            },
            "number": {
              "docs": "Full VAT number, including the country code",
              "type": "string",
            },
          },
        },
      },
    },
    "booking.yml": {
      "docs": "Endpoints relating to Booking objects",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Booking",
        "endpoints": {
          "bookings_index": {
            "auth": false,
            "display-name": "List all bookings",
            "docs": "Returns a list of bookings.",
            "errors": [
              "root.BadRequestError",
            ],
            "method": "GET",
            "path": "/bookings",
            "request": {
              "name": "BookingsIndexRequest",
              "query-parameters": {
                "direction": {
                  "allow-multiple": undefined,
                  "docs": "Set sort order. Allows "asc"(ascending) or "desc" (descending).",
                  "type": "optional<root.BookingsIndexRequestDirection>",
                },
                "f.cargo_ready_date": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list for bookings with the specified cargo ready date",
                  "type": "optional<string>",
                },
                "f.cargo_ready_date.gt": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list for bookings with cargo ready date after the specified date",
                  "type": "optional<string>",
                },
                "f.cargo_ready_date.gte": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list for bookings with cargo ready date after the specified date, inclusive",
                  "type": "optional<string>",
                },
                "f.cargo_ready_date.lt": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list for bookings with cargo ready date before the specified date",
                  "type": "optional<string>",
                },
                "f.cargo_ready_date.lte": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list for bookings with cargo ready date before the specified date, inclusive",
                  "type": "optional<string>",
                },
                "f.consignee_entity_ref": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list based on the booking's consignee",
                  "type": "optional<string>",
                },
                "f.created_at": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list for bookings with the specified created_at",
                  "type": "optional<string>",
                },
                "f.created_at.gt": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list for bookings created after the specified date",
                  "type": "optional<string>",
                },
                "f.created_at.gte": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list for bookings created after the specified date, inclusive",
                  "type": "optional<string>",
                },
                "f.created_at.lt": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list for bookings created before the specified date",
                  "type": "optional<string>",
                },
                "f.created_at.lte": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list for bookings created before the specified date, inclusive",
                  "type": "optional<string>",
                },
                "f.metadata.YOUR_METADATA_KEY": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list for bookings that have a specific metadata key-value pair. Multiple metadata filters can be added to a single query. If there are multiple metadata filters each with the same metadata key, then the filter will return bookings matching any of the specified metadata values for that metadata key. Note that keys must be URL encoded; e.g.: \`f.metadata.PO #=123\` is invalid. It should instead be \`f.metadata.PO%20%23\`
",
                  "type": "optional<string>",
                },
                "f.name": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "f.shipment.id": {
                  "allow-multiple": undefined,
                  "docs": "Filter by the shipment resulting from the booking",
                  "type": "optional<integer>",
                },
                "f.shipper_entity_ref": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list based on the booking's shipper",
                  "type": "optional<string>",
                },
                "f.status": {
                  "allow-multiple": undefined,
                  "docs": "Filter the list based on status of the booking",
                  "type": "optional<root.BookingsIndexRequestFStatus>",
                },
                "page": {
                  "allow-multiple": undefined,
                  "docs": "Page number of the page to retrieve",
                  "type": "optional<integer>",
                },
                "per": {
                  "allow-multiple": undefined,
                  "docs": "Count of items in each page. Should be between 1 and 100 (inclusive).",
                  "type": "optional<integer>",
                },
                "sort": {
                  "allow-multiple": undefined,
                  "docs": "Sort results by the specified field.",
                  "type": "optional<root.BookingsIndexRequestSort>",
                },
              },
            },
            "response": {
              "docs": "collection of bookings",
              "type": "root.BookingsIndexResponse",
            },
          },
          "create": {
            "auth": false,
            "display-name": "Create and return a booking",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
            ],
            "method": "POST",
            "path": "/bookings",
            "request": {
              "body": {
                "properties": {
                  "air_booking": {
                    "docs": undefined,
                    "type": "optional<root.CreateAirBooking>",
                  },
                  "cargo": {
                    "docs": undefined,
                    "type": "root.CreateCargo",
                  },
                  "cargo_ready_date": {
                    "docs": "Always required. Date when cargo is ready for pickup at the origin location.",
                    "type": "string",
                  },
                  "consignee_entity_ref": {
                    "docs": "Always required. Customizable reference ID of company entity that is the consignee of the booking.",
                    "type": "string",
                  },
                  "declared_as_strategy": {
                    "docs": "Required when origin or destination port is Hong Kong. Does your shipment contain goods subject to export control regulations? Export Control Regulations include dual use item control, Hong Kong strategic commodity control, US and EU export control, etc.",
                    "type": "optional<root.CreateBookingDeclaredAsStrategy>",
                  },
                  "delivery_date": {
                    "docs": "Optional. Target date by when cargo must be delivered.",
                    "type": "optional<string>",
                  },
                  "destination_address_ref": {
                    "docs": "Always required for trucking bookings. Always required for air and ocean bookings if \`wants_delivery_service\` is TRUE. Customizable reference ID of network location that is the delivery location.",
                    "type": "string",
                  },
                  "eccn_codes": {
                    "docs": "Required when declared_as_strategy is "yes". Please provide the ECCN codes (Export Control Classification Number) of the products subject to export control regulations. Make sure you find the right ECCN codes in the Commerce Control List. Make sure you provide the correct format of the ECCN code (five character alpha-numeric such as 3A001, 5A002, etc) seperated by commas. According to the laws, providing the wrong ECCN information might cause fines.",
                    "type": "optional<string>",
                  },
                  "flow_direct": {
                    "docs": "Optional. Whether to create Flow Direct Quote for the Booking. Currently, only Ocean LCL Booking is supported",
                    "type": "optional<boolean>",
                  },
                  "metadata": {
                    "docs": undefined,
                    "type": "optional<root.MetadataCreate>",
                  },
                  "name": {
                    "docs": "Always required. Name of the booking.",
                    "type": "string",
                  },
                  "notify_party": {
                    "docs": "Optional. Name and address of company that is the notify party of the booking. If null, then this is the same as consignee.",
                    "type": "optional<string>",
                  },
                  "ocean_booking": {
                    "docs": undefined,
                    "type": "optional<root.CreateOceanBooking>",
                  },
                  "origin_address_ref": {
                    "docs": "Always required. Customizable reference ID of network location that is the pickup location.",
                    "type": "string",
                  },
                  "shipper_entity_ref": {
                    "docs": "Always required. Customizable reference ID of company entity that is the shipper of the booking.",
                    "type": "string",
                  },
                  "special_instructions": {
                    "docs": "Additional instructions not included in rest of booking form.",
                    "type": "optional<string>",
                  },
                  "trucking_booking": {
                    "docs": undefined,
                    "type": "optional<root.CreateTruckingBooking>",
                  },
                  "wants_bco": {
                    "docs": "Optional. Whether the booking requires Flexport to provide BCO services.",
                    "type": "optional<boolean>",
                  },
                  "wants_export_customs_service": {
                    "docs": "Always required. Whether the booking requires Flexport to provide export customs services.",
                    "type": "boolean",
                  },
                  "wants_flexport_freight": {
                    "docs": "Optional. Whether the booking requires Flexport to provide freight services.",
                    "type": "optional<boolean>",
                  },
                  "wants_import_customs_service": {
                    "docs": "Optional. Whether the booking requires Flexport to provide import customs services.",
                    "type": "optional<boolean>",
                  },
                },
              },
              "headers": undefined,
              "name": "CreateBooking",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "The created booking",
              "type": "root.BookingCreateResponse",
            },
          },
          "show": {
            "auth": false,
            "display-name": "Retrieve a booking",
            "docs": "Retrieves the details of a single booking.
",
            "errors": [
              "root.BadRequestError",
            ],
            "method": "GET",
            "path": "/bookings/{id}",
            "path-parameters": {
              "id": {
                "docs": "The unique id for the booking to be retrieved",
                "type": "integer",
              },
            },
            "response": {
              "docs": "Success",
              "type": "root.BookingShowResponse",
            },
          },
        },
      },
    },
    "bookingAmendment.yml": {
      "docs": "Endpoints relating to BookingAmendment objects. An existing booking is required to create booking amendments for.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "BookingAmendment",
        "endpoints": {
          "booking_amendment_create": {
            "auth": false,
            "display-name": "Create a new booking amendment.",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
            ],
            "method": "POST",
            "path": "/booking_amendments",
            "request": {
              "body": {
                "properties": {
                  "amendment_note": {
                    "docs": "Additional message to Flexport regarding the booking amendment.",
                    "type": "optional<string>",
                  },
                  "booking_id": {
                    "docs": "Identifier of the existing booking to be modified",
                    "type": "integer",
                  },
                  "new_cargo": {
                    "docs": undefined,
                    "type": "optional<root.CreateCargo>",
                  },
                  "new_cargo_ready_date": {
                    "docs": "Date when cargo is ready for pickup at the origin location.",
                    "type": "optional<string>",
                  },
                  "new_container_counts": {
                    "docs": undefined,
                    "type": "optional<root.CreateContainerCounts>",
                  },
                  "new_destination_address_ref": {
                    "docs": "Customizable reference ID of network location that is the delivery location.",
                    "type": "optional<string>",
                  },
                  "new_destination_port_loc_code": {
                    "docs": "At most one of \`new_destination_port_us_cbp_port_code\` or \`new_destination_port_loc_code\` may be specified. UN code for the destination port.",
                    "type": "optional<string>",
                  },
                  "new_destination_port_us_cbp_port_code": {
                    "docs": "At most one of \`new_destination_port_us_cbp_port_code\` or \`new_destination_port_loc_code\` may be specified. Unique port reference code used by US Customs and Border Protection.",
                    "type": "optional<string>",
                  },
                  "new_metadata": {
                    "docs": undefined,
                    "type": "optional<root.MetadataCreate>",
                  },
                  "new_name": {
                    "docs": "Name of the booking.",
                    "type": "optional<string>",
                  },
                  "new_origin_address_ref": {
                    "docs": "Customizable reference ID of network location that is the pickup location.",
                    "type": "optional<string>",
                  },
                  "new_origin_port_loc_code": {
                    "docs": "At most one of \`origin_port_us_cbp_port_code\` or  \`origin_port_loc_code\` may be specified. UN code for the origin port.",
                    "type": "optional<string>",
                  },
                  "new_origin_port_us_cbp_port_code": {
                    "docs": "At most one of \`origin_port_us_cbp_port_code\` or  \`origin_port_loc_code\` may be specified. Unique port reference code used by US Customs and Border Protection.",
                    "type": "optional<string>",
                  },
                  "new_product_descriptions": {
                    "docs": "New product (HS code) information",
                    "type": "optional<list<root.CreateBookingAmendmentHsCode>>",
                  },
                  "new_wants_bco": {
                    "docs": undefined,
                    "type": "optional<boolean>",
                  },
                  "new_wants_flexport_freight": {
                    "docs": undefined,
                    "type": "optional<boolean>",
                  },
                  "new_wants_import_customs_service": {
                    "docs": undefined,
                    "type": "optional<boolean>",
                  },
                  "new_wants_pickup_service": {
                    "docs": undefined,
                    "type": "optional<boolean>",
                  },
                },
              },
              "headers": undefined,
              "name": "CreateBookingAmendment",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "The created booking amendment",
              "type": "root.BookingAmendmentCreateResponse",
            },
          },
        },
      },
    },
    "bookingLineItem.yml": {
      "docs": "Endpoints relating to BookingLineItem objects. **The Booking Line Item endpoints need special permission to access. Please contact
  your Flexport Sales representative if you are interested in using these endpoints.**",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "BookingLineItem",
        "endpoints": {
          "booking_line_item_create": {
            "auth": false,
            "display-name": "Create a booking line item",
            "docs": "Creates and returns a booking line item",
            "errors": [
              "root.BadRequestError",
            ],
            "method": "POST",
            "path": "/booking_line_items",
            "request": {
              "body": {
                "properties": {
                  "booking_id": {
                    "docs": "Always required. The identifier of the booking to add the PO line item to",
                    "type": "integer",
                  },
                  "purchase_order_line_item_id": {
                    "docs": "Always required. The identifier of the PO line item to book",
                    "type": "integer",
                  },
                  "units": {
                    "docs": "Always required. Number of units to book",
                    "type": "integer",
                  },
                },
              },
              "headers": undefined,
              "name": "CreateBookingLineItem",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "The created booking line item",
              "type": "root.BookingLineItemCreateResponse",
            },
          },
          "booking_line_item_index": {
            "auth": false,
            "display-name": "List all booking line items",
            "docs": "Returns a list of booking line items linked to submitted bookings",
            "errors": [
              "root.BadRequestError",
            ],
            "method": "GET",
            "path": "/booking_line_items",
            "request": {
              "name": "BookingLineItemIndexRequest",
              "query-parameters": {
                "direction": {
                  "allow-multiple": undefined,
                  "docs": "Set sort order. Allows "asc" (ascending) or "desc"  (descending)",
                  "type": "optional<root.BookingLineItemIndexRequestDirection>",
                },
                "f.booking.id": {
                  "allow-multiple": undefined,
                  "docs": "Filters for all booking line items from a specific booking",
                  "type": "optional<integer>",
                },
                "f.purchase_order.id": {
                  "allow-multiple": undefined,
                  "docs": "Filters for all booking line items from a purchase order",
                  "type": "optional<integer>",
                },
                "f.purchase_order_line_item.id": {
                  "allow-multiple": undefined,
                  "docs": "Filters for all booking line items from a specific purchase order line item.",
                  "type": "optional<integer>",
                },
                "page": {
                  "allow-multiple": undefined,
                  "docs": "Page number of the page to retrieve",
                  "type": "optional<integer>",
                },
                "per": {
                  "allow-multiple": undefined,
                  "docs": "Count of items in each page. Should be between 1 and 100 (inclusive)",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "collection of booking line items",
              "type": "root.BookingLineItemIndexResponse",
            },
          },
          "booking_line_item_show": {
            "auth": false,
            "display-name": "Retrieves the details of a single booking line item.",
            "docs": "Returns a list of booking line items",
            "errors": [
              "root.BadRequestError",
            ],
            "method": "GET",
            "path": "/booking_line_items/{id}",
            "path-parameters": {
              "id": {
                "docs": "The unique id for the booking line item to be retrieved",
                "type": "integer",
              },
            },
            "response": {
              "docs": "A collection of booking line items",
              "type": "root.BookingLineItemShowResponse",
            },
          },
        },
      },
    },
    "carbonCalculation.yml": {
      "docs": "Endpoints relating to Carbon Calculations",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Carbon Calculation",
        "endpoints": {
          "create": {
            "auth": false,
            "display-name": "Calculate carbon emissions",
            "docs": "Rate limited to 2,000 requests per hour",
            "errors": [
              "root.BadRequestError",
            ],
            "method": "POST",
            "path": "/carbon_calculation",
            "request": {
              "body": {
                "properties": {
                  "destination_address": {
                    "docs": undefined,
                    "type": "optional<root.AddressForRequestBody>",
                  },
                  "destination_coordinates": {
                    "docs": undefined,
                    "type": "optional<root.CoordinatesCreate>",
                  },
                  "destination_port": {
                    "docs": "Port of destination, used if no more specific destination location is provided.",
                    "type": "optional<string>",
                  },
                  "distance": {
                    "docs": undefined,
                    "type": "optional<root.DistanceCreate>",
                  },
                  "flight_type": {
                    "docs": "For \`transportation_mode: air\`, the type of plane used. One of \`freighter\`, \`belly_freighter\`, or \`unknown\`. Defaults to \`unknown\`.",
                    "type": "optional<root.CreateCarbonCalculationFlightType>",
                  },
                  "is_inland": {
                    "docs": "For \`transportation_mode: ocean\`, indicates if the calculation was inland or not. Defaults to false.",
                    "type": "optional<boolean>",
                  },
                  "is_lcl": {
                    "docs": "For \`transportation_mode: ocean\`, indicates if the calculation is less than container load or not. Defaults to false.",
                    "type": "optional<boolean>",
                  },
                  "is_reefer": {
                    "docs": "For \`transportation_mode: ocean\`, indicates if the calculation is a reefer shipment. Defaults to false.",
                    "type": "optional<boolean>",
                  },
                  "origin_address": {
                    "docs": undefined,
                    "type": "optional<root.AddressForRequestBody>",
                  },
                  "origin_coordinates": {
                    "docs": undefined,
                    "type": "optional<root.CoordinatesCreate>",
                  },
                  "origin_port": {
                    "docs": "Port of origin, used if no more specific origin location is provided.",
                    "type": "optional<string>",
                  },
                  "teus": {
                    "docs": "The number of TEUs (Twenty-foot Equivalent Units) moved in the calculation. Either \`weight\` or \`teus\` is required.",
                    "type": "optional<string>",
                  },
                  "transportation_mode": {
                    "docs": "The mode of transportation for calculation. One of \`air\`, \`ocean\`, \`truck\`, or \`rail\`. If \`transportation_mode\` is \`truck\`, \`ocean\`, or \`rail\`, \`country_code\` in both \`origin_address\` and \`destination_address\` is required.",
                    "type": "root.CreateCarbonCalculationTransportationMode",
                  },
                  "trucking_service_type": {
                    "docs": "For \`transportation_mode: truck\`, the type of service used. One of \`ftl\`, \`ltl\`, \`drayage\`, \`cartage\`, \`last_mile\`, \`airport_transfer\`, or \`air_cartage\`.",
                    "type": "optional<root.CreateCarbonCalculationTruckingServiceType>",
                  },
                  "weight": {
                    "docs": undefined,
                    "type": "optional<root.WeightCreate>",
                  },
                },
              },
              "headers": undefined,
              "name": "CreateCarbonCalculation",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success",
              "type": "root.CarbonCalculationCreateResponse",
            },
          },
        },
      },
    },
    "commercialInvoices.yml": {
      "docs": "Endpoints relating to Commercial Invoice objects",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Commercial Invoices",
        "endpoints": {
          "create": {
            "auth": false,
            "display-name": "Create and return a new commercial invoice",
            "docs": "**The Commercial Invoices POST endpoint needs special permission to access. Please contact your Flexport Sales representative if you are interested in using this endpoint.**",
            "errors": [
              "root.BadRequestError",
            ],
            "method": "POST",
            "path": "/commercial_invoices",
            "request": {
              "body": {
                "properties": {
                  "currency_code": {
                    "docs": "The currency being used on the commercial invoice.",
                    "type": "string",
                  },
                  "invoice_number": {
                    "docs": "Invoice number on the commercial invoice, typically used for display purposes. Uniqueness is based on the supplier Involved Party. There can be multiple commercial invoices with the same invoice_number only if they have different suppliers.",
                    "type": "string",
                  },
                  "involved_parties": {
                    "docs": undefined,
                    "type": "optional<list<root.CreateInvolvedParty>>",
                  },
                  "is_related_parties": {
                    "docs": "Whether there was a related parties transaction as defined by CBP.",
                    "type": "optional<boolean>",
                  },
                  "line_items": {
                    "docs": undefined,
                    "type": "list<root.CreateCommercialInvoiceLineItem>",
                  },
                  "manufacturer_refs": {
                    "docs": "[DEPRECATED] Array of your custom strings used to refer to a manufacturer location.",
                    "type": "optional<list<string>>",
                  },
                  "metadata": {
                    "docs": undefined,
                    "type": "optional<root.MetadataCreate>",
                  },
                  "proration_amount": {
                    "docs": undefined,
                    "type": "root.MoneyCreate",
                  },
                  "shipment_id": {
                    "docs": "Flexport's unique identifier for the shipment. Either shipment_id or shipment_ref is required.",
                    "type": "optional<integer>",
                  },
                  "shipment_ref": {
                    "docs": "Your custom string used to refer to the shipment. Can be used to look up or reference the shipment later on. Either shipment_id or shipment_ref is required.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "CreateCommercialInvoice",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "The created commercial invoice",
              "type": "root.CommercialInvoicesCreateResponse",
            },
          },
          "index": {
            "auth": false,
            "display-name": "List commercial invoices",
            "docs": "Returns a list of commercial invoices",
            "errors": [],
            "method": "GET",
            "path": "/commercial_invoices",
            "request": {
              "name": "CommercialInvoicesIndexRequest",
              "query-parameters": {
                "f.invoice_number": {
                  "allow-multiple": undefined,
                  "docs": "Filters results based on the invoice number.",
                  "type": "optional<string>",
                },
                "f.involved_party_seller_id": {
                  "allow-multiple": undefined,
                  "docs": "Filters results based on the involved party seller ID.",
                  "type": "optional<string>",
                },
                "f.involved_party_seller_ref": {
                  "allow-multiple": undefined,
                  "docs": "Filters results based on the invoolved party seller ref.",
                  "type": "optional<string>",
                },
                "f.shipment.id": {
                  "allow-multiple": undefined,
                  "docs": "The unique id for the shipment.",
                  "type": "optional<string>",
                },
                "page": {
                  "allow-multiple": undefined,
                  "docs": "Page number of the page to retrieve",
                  "type": "optional<integer>",
                },
                "per": {
                  "allow-multiple": undefined,
                  "docs": "Count of items in each page. Should be between 1 and 100 (inclusive)",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Success",
              "type": "root.CommercialInvoicesIndexResponse",
            },
          },
          "show": {
            "auth": false,
            "display-name": "Retrieve a commercial invoice",
            "docs": "Retrieves the details of a single commercial invoice.",
            "errors": [
              "root.BadRequestError",
            ],
            "method": "GET",
            "path": "/commercial_invoices/{id}",
            "path-parameters": {
              "id": {
                "docs": "The unique id for the requested commercial invoice",
                "type": "string",
              },
            },
            "response": {
              "docs": "Success",
              "type": "root.CommercialInvoicesShowResponse",
            },
          },
          "update": {
            "auth": false,
            "display-name": "Update an existing commercial invoice",
            "docs": "**The Commercial Invoices PATCH endpoint needs special permission to access. Please contact your Flexport Sales representative if you are interested in using this endpoint.**",
            "errors": [
              "root.BadRequestError",
            ],
            "method": "PATCH",
            "path": "/commercial_invoices",
            "request": {
              "body": {
                "properties": {
                  "currency_code": {
                    "docs": "The currency being used on the commercial invoice.",
                    "type": "optional<string>",
                  },
                  "invoice_number": {
                    "docs": "Invoice number on the commercial invoice, typically used for display purposes. Uniqueness is based on the supplier Involved Party. There can be multiple commercial invoices with the same invoice_number only if they have different suppliers.",
                    "type": "optional<string>",
                  },
                  "is_related_parties": {
                    "docs": "Whether there was a related parties transaction as defined by CBP.",
                    "type": "optional<boolean>",
                  },
                  "line_items": {
                    "docs": undefined,
                    "type": "optional<list<root.CreateCommercialInvoiceLineItem>>",
                  },
                  "manufacturer_refs": {
                    "docs": undefined,
                    "type": "optional<list<string>>",
                  },
                  "metadata": {
                    "docs": undefined,
                    "type": "optional<root.Metadata>",
                  },
                  "proration_amount": {
                    "docs": undefined,
                    "type": "optional<root.Money>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateCommercialInvoice",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "The updated commercial invoice",
              "type": "root.CommercialInvoicesUpdateResponse",
            },
          },
        },
      },
    },
    "company.yml": {
      "docs": "Endpoints relating to Company objects",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Company",
        "endpoints": {
          "network_company_create": {
            "auth": false,
            "display-name": "Create a new company object",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
            ],
            "method": "POST",
            "path": "/network/companies",
            "request": {
              "body": {
                "properties": {
                  "name": {
                    "docs": "Always required. Name of the company.",
                    "type": "string",
                  },
                  "ref": {
                    "docs": "Your custom string used to refer to the company",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "CreateCompany",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "The created company",
              "type": "root.NetworkCompanyCreateResponse",
            },
          },
          "network_company_index": {
            "auth": false,
            "display-name": "List company objects",
            "docs": "Returns a list of companies in the network.",
            "errors": [
              "root.BadRequestError",
            ],
            "method": "GET",
            "path": "/network/companies",
            "request": {
              "name": "NetworkCompanyIndexRequest",
              "query-parameters": {
                "f.metadata.YOUR_METADATA_KEY": {
                  "allow-multiple": undefined,
                  "docs": "Only return companies that have a specific metadata key-value pair. Multiple metadata filters can be added to a single query. If there are multiple metadata filters each with the same metadata key, then the filter will return companies matching any of the specified metadata values for that metadata key.",
                  "type": "optional<string>",
                },
                "f.ref": {
                  "allow-multiple": undefined,
                  "docs": "The ref for the company.",
                  "type": "optional<string>",
                },
                "page": {
                  "allow-multiple": undefined,
                  "docs": "Page number of the page to retrieve",
                  "type": "optional<integer>",
                },
                "per": {
                  "allow-multiple": undefined,
                  "docs": "Count of items in each page. Should be between 1 and 100 (inclusive)",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "collection of companies",
              "type": "root.NetworkCompanyIndexResponse",
            },
          },
          "network_company_me": {
            "auth": false,
            "display-name": "Retrieve your company",
            "docs": "Retrieves the details of your own organization.",
            "errors": [
              "root.BadRequestError",
            ],
            "method": "GET",
            "path": "/network/me/companies",
            "response": {
              "docs": "Success",
              "type": "root.NetworkCompanyMeResponse",
            },
          },
          "network_company_show": {
            "auth": false,
            "display-name": "Retrieve a company",
            "docs": "Retrieves the details of a single company.",
            "errors": [],
            "method": "GET",
            "path": "/network/companies/{id}",
            "path-parameters": {
              "id": {
                "docs": "The unique id for the requested company",
                "type": "string",
              },
            },
            "response": {
              "docs": "Success",
              "type": "root.NetworkCompanyShowResponse",
            },
          },
          "network_company_update": {
            "auth": false,
            "display-name": "Update an existing company",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
            ],
            "method": "PATCH",
            "path": "/network/companies/{id}",
            "path-parameters": {
              "id": {
                "docs": "The unique id for the requested company",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "name": {
                    "docs": "Updated name of the company.",
                    "type": "optional<string>",
                  },
                  "ref": {
                    "docs": "Updated ref of the company",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateCompany",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "The updated company",
              "type": "root.NetworkCompanyUpdateResponse",
            },
          },
        },
      },
    },
    "companyEntity.yml": {
      "docs": "Endpoints relating to CompanyEntity objects",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "CompanyEntity",
        "endpoints": {
          "company_entity_index": {
            "auth": false,
            "display-name": "List of company entity objects",
            "docs": "Returns a list of the company entity objects in the network.",
            "errors": [
              "root.BadRequestError",
            ],
            "method": "GET",
            "path": "/network/company_entities",
            "request": {
              "name": "CompanyEntityIndexRequest",
              "query-parameters": {
                "f.company_id": {
                  "allow-multiple": undefined,
                  "docs": "The id for the company entity's parent company",
                  "type": "optional<string>",
                },
                "f.company_ref": {
                  "allow-multiple": undefined,
                  "docs": "The ref for the company entity's parent company",
                  "type": "optional<string>",
                },
                "f.ref": {
                  "allow-multiple": undefined,
                  "docs": "The ref for the company entity",
                  "type": "optional<string>",
                },
                "page": {
                  "allow-multiple": undefined,
                  "docs": "Page number of the page to retrieve",
                  "type": "optional<integer>",
                },
                "per": {
                  "allow-multiple": undefined,
                  "docs": "Count of items in each page. Should be between 1 and 100 (inclusive)",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "collection of company entities",
              "type": "root.CompanyEntityIndexResponse",
            },
          },
          "network_company_entity_create": {
            "auth": false,
            "display-name": "Create and return a new company entity",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
            ],
            "method": "POST",
            "path": "/network/company_entities",
            "request": {
              "body": {
                "properties": {
                  "company_id": {
                    "docs": "The id of the new company entity's parent company. Either company_id or company_ref is required",
                    "type": "optional<string>",
                  },
                  "company_ref": {
                    "docs": "The ref of the new company entity's parent company. Either company_id or company_ref is required",
                    "type": "optional<string>",
                  },
                  "mailing_address": {
                    "docs": "Always Required. The object representing the mailing address of the company entity.",
                    "type": "root.AddressForRequestBody",
                  },
                  "name": {
                    "docs": "Always required. Legal name of the new company entity",
                    "type": "string",
                  },
                  "ref": {
                    "docs": "Not required. The ref that will be created for the new company entity",
                    "type": "optional<string>",
                  },
                  "vat_numbers": {
                    "docs": "Not required. An array of VAT Numbers for the new company entity.",
                    "type": "optional<list<root.WriteVatNumber>>",
                  },
                },
              },
              "headers": undefined,
              "name": "CreateCompanyEntity",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "The created company entity",
              "type": "root.NetworkCompanyEntityCreateResponse",
            },
          },
          "network_company_entity_show": {
            "auth": false,
            "display-name": "Retrieve a company entity",
            "docs": "Retrieves the details of a single company entity",
            "errors": [
              "root.BadRequestError",
            ],
            "method": "GET",
            "path": "/network/company_entities/{id}",
            "path-parameters": {
              "id": {
                "docs": "The unique id for the requested company entity",
                "type": "string",
              },
            },
            "response": {
              "docs": "Success",
              "type": "root.NetworkCompanyEntityShowResponse",
            },
          },
          "network_company_entity_update": {
            "auth": false,
            "display-name": "Update a company entity",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
            ],
            "method": "PATCH",
            "path": "/network/company_entities/{id}",
            "path-parameters": {
              "id": {
                "docs": "The unique id for the requested company entity",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "mailing_address": {
                    "docs": undefined,
                    "type": "optional<root.AddressForRequestBody>",
                  },
                  "name": {
                    "docs": "The new legal name of the company entity",
                    "type": "optional<string>",
                  },
                  "ref": {
                    "docs": "The new ref that will be used for the company entity",
                    "type": "optional<string>",
                  },
                  "vat_numbers": {
                    "docs": "If a value for vat_numbers is specified, the array specified will replace all the existing VAT numbers of the company entity",
                    "type": "optional<list<root.WriteVatNumber>>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateCompanyEntity",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success",
              "type": "root.NetworkCompanyEntityUpdateResponse",
            },
          },
        },
      },
    },
    "contact.yml": {
      "docs": "Endpoints relating to Contact objects",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Contact",
        "endpoints": {
          "network_contact_create": {
            "auth": false,
            "display-name": "Create a new contact object",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
            ],
            "method": "POST",
            "path": "/network/contacts",
            "request": {
              "body": {
                "properties": {
                  "company_id": {
                    "docs": "ID of the new contact's company. If not specified, the contact will be created for your company.",
                    "type": "optional<string>",
                  },
                  "email": {
                    "docs": "Always required. Email address of the new contact.",
                    "type": "string",
                  },
                  "name": {
                    "docs": "Always required. Name of the new contact.",
                    "type": "string",
                  },
                  "phone_number": {
                    "docs": "Always required. Phone number of the new contact.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "CreateContact",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "The created contact",
              "type": "root.NetworkContactCreateResponse",
            },
          },
          "network_contact_index": {
            "auth": false,
            "display-name": "List contact objects",
            "docs": "Returns a list of contacts in the network.",
            "errors": [
              "root.BadRequestError",
            ],
            "method": "GET",
            "path": "/network/contacts",
            "request": {
              "name": "NetworkContactIndexRequest",
              "query-parameters": {
                "f.company.id": {
                  "allow-multiple": undefined,
                  "docs": "The id for the company.",
                  "type": "optional<string>",
                },
                "f.company_ref": {
                  "allow-multiple": undefined,
                  "docs": "The ref for the company.",
                  "type": "optional<string>",
                },
                "f.location.id": {
                  "allow-multiple": undefined,
                  "docs": "Filters out all contacts not related to this location.",
                  "type": "optional<string>",
                },
                "page": {
                  "allow-multiple": undefined,
                  "docs": "Page number of the page to retrieve",
                  "type": "optional<integer>",
                },
                "per": {
                  "allow-multiple": undefined,
                  "docs": "Count of items in each page. Should be between 1 and 100 (inclusive)",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "collection of contacts",
              "type": "root.NetworkContactIndexResponse",
            },
          },
          "network_contact_show": {
            "auth": false,
            "display-name": "Retrieve a contact",
            "docs": "Retrieves the details of a single contact.",
            "errors": [
              "root.BadRequestError",
            ],
            "method": "GET",
            "path": "/network/contacts/{id}",
            "path-parameters": {
              "id": {
                "docs": "The unique id for the requested contact",
                "type": "string",
              },
            },
            "response": {
              "docs": "Success",
              "type": "root.NetworkContactShowResponse",
            },
          },
          "network_contact_update": {
            "auth": false,
            "display-name": "Update an existing contact",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
            ],
            "method": "PATCH",
            "path": "/network/contacts/{id}",
            "path-parameters": {
              "id": {
                "docs": "The unique id for the requested contact",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "email": {
                    "docs": "Updated email address of the contact.",
                    "type": "optional<string>",
                  },
                  "name": {
                    "docs": "Updated name of the contact.",
                    "type": "optional<string>",
                  },
                  "phone_number": {
                    "docs": "Updated phone number of the contact.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateContact",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "The updated contact",
              "type": "root.NetworkContactUpdateResponse",
            },
          },
        },
      },
    },
    "container.yml": {
      "docs": "Endpoints relating to Container objects",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Container",
        "endpoints": {
          "list": {
            "auth": false,
            "display-name": "List all containers.",
            "docs": "Returns a list of containers. The containers are sorted descending by creation date.",
            "errors": [
              "root.BadRequestError",
            ],
            "method": "GET",
            "path": "/ocean/shipment_containers",
            "request": {
              "name": "ContainerListRequest",
              "query-parameters": {
                "f.container_number": {
                  "allow-multiple": undefined,
                  "docs": "Only return containers associated with the given container number.",
                  "type": "optional<string>",
                },
                "f.metadata.YOUR_METADATA_KEY": {
                  "allow-multiple": undefined,
                  "docs": "Only return containers that have a specific metadata key-value pair. Multiple metadata filters can be added to a single query. If there are multiple metadata filters each with the same metadata key, then the filter will return containers matching any of the specified metadata values for that metadata key.",
                  "type": "optional<string>",
                },
                "f.shipment.id": {
                  "allow-multiple": undefined,
                  "docs": "Only return containers associated with the shipment specified by this id.",
                  "type": "optional<integer>",
                },
                "page": {
                  "allow-multiple": undefined,
                  "docs": "Page number of the page to retrieve",
                  "type": "optional<integer>",
                },
                "per": {
                  "allow-multiple": undefined,
                  "docs": "Count of items in each page. Should be between 1 and 100 (inclusive).",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Success",
              "type": "root.ContainerListResponse",
            },
          },
          "show": {
            "auth": false,
            "display-name": "Retrieve a container.",
            "docs": "Retrieves the details of a single container.",
            "errors": [
              "root.BadRequestError",
            ],
            "method": "GET",
            "path": "/ocean/shipment_containers/{id}",
            "path-parameters": {
              "id": {
                "docs": "The unique id for the shipment to be retrieved.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Success",
              "type": "root.ContainerShowResponse",
            },
          },
        },
      },
    },
    "containerLeg.yml": {
      "docs": "Endpoints relating to ContainerLeg objects",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "ContainerLeg",
        "endpoints": {
          "ocean_container_legs_index": {
            "auth": false,
            "display-name": "List all container legs",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
            ],
            "method": "GET",
            "path": "/ocean/shipment_container_legs",
            "request": {
              "name": "OceanContainerLegsIndexRequest",
              "query-parameters": {
                "f.leg.id": {
                  "allow-multiple": undefined,
                  "docs": "Only return containers legs associated with the shipment leg specified by this id.",
                  "type": "optional<integer>",
                },
                "f.shipment_container.container_number": {
                  "allow-multiple": undefined,
                  "docs": "Only return containers legs associated with the given container number.",
                  "type": "optional<string>",
                },
                "f.shipment_container.id": {
                  "allow-multiple": undefined,
                  "docs": "Only return containers legs associated with the shipment container specified by this id.",
                  "type": "optional<integer>",
                },
                "page": {
                  "allow-multiple": undefined,
                  "docs": "Page number of the page to retrieve",
                  "type": "optional<integer>",
                },
                "per": {
                  "allow-multiple": undefined,
                  "docs": "Count of items in each page. Should be between 1 and 100 (inclusive).",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Success",
              "type": "root.OceanContainerLegsIndexResponse",
            },
          },
          "ocean_container_legs_show": {
            "auth": false,
            "display-name": "Retrieve a container leg on an Ocean shipment",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
            ],
            "method": "GET",
            "path": "/ocean/shipment_container_legs/{id}",
            "path-parameters": {
              "id": {
                "docs": "The unique id for the ContainerLeg to be retrieved",
                "type": "integer",
              },
            },
            "response": {
              "docs": "Success",
              "type": "root.OceanContainerLegsShowResponse",
            },
          },
        },
      },
    },
    "customsEntries.yml": {
      "docs": "Endpoints relating to Customs Entry objects",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Customs Entries",
        "endpoints": {
          "customs_entry_index": {
            "auth": false,
            "display-name": "List customs entry objects",
            "docs": "Returns a list of customs entries.",
            "errors": [
              "root.BadRequestError",
            ],
            "method": "GET",
            "path": "/customs_entries",
            "request": {
              "name": "CustomsEntryIndexRequest",
              "query-parameters": {
                "f.shipment.id": {
                  "allow-multiple": undefined,
                  "docs": "The unique id for the shipment.",
                  "type": "optional<string>",
                },
                "page": {
                  "allow-multiple": undefined,
                  "docs": "Page number of the page to retrieve",
                  "type": "optional<integer>",
                },
                "per": {
                  "allow-multiple": undefined,
                  "docs": "Count of items in each page. Should be between 1 and 100 (inclusive)",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "collection of customs entries",
              "type": "root.CustomsEntryIndexResponse",
            },
          },
          "show": {
            "auth": false,
            "display-name": "Retrieve a customs entry",
            "docs": "Retrieves the details of a single customs entry.",
            "errors": [
              "root.BadRequestError",
            ],
            "method": "GET",
            "path": "/customs_entries/{id}",
            "path-parameters": {
              "id": {
                "docs": "The unique id for the requested customs entry",
                "type": "string",
              },
            },
            "response": {
              "docs": "Success",
              "type": "root.CustomsEntriesShowResponse",
            },
          },
        },
      },
    },
    "document.yml": {
      "docs": "Endpoints relating to Document objects",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Document",
        "endpoints": {
          "documents_create": {
            "auth": false,
            "display-name": "Create a document",
            "docs": "Create a new document for this client using the request payload",
            "errors": [
              "root.BadRequestError",
            ],
            "method": "POST",
            "path": "/documents",
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.CreateDocument",
              },
            },
            "response": {
              "docs": "Created",
              "type": "root.DocumentsCreateResponse",
            },
          },
          "documents_download": {
            "auth": false,
            "display-name": "Download a document",
            "docs": "Retrieves the contents of a specified file. Returns the file as a stream of bytes.",
            "errors": [],
            "method": "GET",
            "path": "/documents/{id}/download",
            "path-parameters": {
              "id": {
                "docs": "The unique id for the requested document",
                "type": "string",
              },
            },
            "response": {
              "docs": "Success",
              "type": "file",
            },
          },
          "documents_index": {
            "auth": false,
            "display-name": "List document objects",
            "docs": "Returns a list of all documents associated with shipments.",
            "errors": [
              "root.BadRequestError",
            ],
            "method": "GET",
            "path": "/documents",
            "request": {
              "name": "DocumentsIndexRequest",
              "query-parameters": {
                "f.archived_at.exists": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list for documents that have been archived",
                  "type": "optional<string>",
                },
                "f.document_type": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list for documents that are the given type",
                  "type": "optional<string>",
                },
                "f.shipment.id": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list for documents that belong to the given shipment",
                  "type": "optional<string>",
                },
                "f.uploaded_at.gt": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list for documents that where uploaded after the given time",
                  "type": "optional<string>",
                },
                "f.uploaded_at.gte": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list for documents that where uploaded on or after the given time",
                  "type": "optional<string>",
                },
                "f.uploaded_at.lt": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list for documents that where uploaded before the given time",
                  "type": "optional<string>",
                },
                "f.uploaded_at.lte": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list for documents that where uploaded on or before the given time",
                  "type": "optional<string>",
                },
                "page": {
                  "allow-multiple": undefined,
                  "docs": "Page number of the page to retrieve",
                  "type": "optional<integer>",
                },
                "per": {
                  "allow-multiple": undefined,
                  "docs": "Count of items in each page. Should be between 1 and 100 (inclusive)",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "collection of documents",
              "type": "root.DocumentsIndexResponse",
            },
          },
          "documents_show": {
            "auth": false,
            "display-name": "Retrieve a document",
            "docs": "Retrieves the details of a single document.",
            "errors": [
              "root.BadRequestError",
            ],
            "method": "GET",
            "path": "/documents/{id}",
            "path-parameters": {
              "id": {
                "docs": "The unique id for the requested document",
                "type": "string",
              },
            },
            "response": {
              "docs": "Success",
              "type": "root.DocumentsShowResponse",
            },
          },
        },
      },
    },
    "event.yml": {
      "docs": "Endpoints relating to Event objects",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Event",
        "endpoints": {
          "events_index": {
            "auth": false,
            "display-name": "List all webhook events",
            "docs": "Returns a list of all events delivered to any webhook registered by this client",
            "errors": [
              "root.BadRequestError",
            ],
            "method": "GET",
            "path": "/events",
            "request": {
              "name": "EventsIndexRequest",
              "query-parameters": {
                "f.data.resource._object": {
                  "allow-multiple": undefined,
                  "docs": "Get all events which involved a resource of this type. The key for this filter will be the '_object' value for your target resource",
                  "type": "optional<root.EventsIndexRequestFDataResourceObject>",
                },
                "f.data.shipment.id": {
                  "allow-multiple": undefined,
                  "docs": "Get all events which involved the shipment with this ID",
                  "type": "optional<integer>",
                },
                "f.occurred_at.gte": {
                  "allow-multiple": undefined,
                  "docs": "Filter by events which occurred on or after this datetime",
                  "type": "optional<string>",
                },
                "f.occurred_at.lte": {
                  "allow-multiple": undefined,
                  "docs": "Filter by events which occurred on or before this datetime",
                  "type": "optional<string>",
                },
                "f.type": {
                  "allow-multiple": undefined,
                  "docs": "Filter by the type of the event",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Success",
              "type": "root.EventsIndexResponse",
            },
          },
          "events_show": {
            "auth": false,
            "display-name": "Retrieve a single webhook event",
            "docs": "Returns the webhook event with ID ":id"",
            "errors": [
              "root.BadRequestError",
            ],
            "method": "GET",
            "path": "/events/{id}",
            "path-parameters": {
              "id": {
                "docs": "The unique id for the event object to be retrieved",
                "type": "integer",
              },
            },
            "response": {
              "docs": "Success",
              "type": "root.EventsShowResponse",
            },
          },
        },
      },
    },
    "invoices.yml": {
      "docs": "Endpoints relating to Invoice objects",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Invoices",
        "endpoints": {
          "invoice_index": {
            "auth": false,
            "display-name": "List all invoices",
            "docs": "Returns a list of invoices.",
            "errors": [
              "root.BadRequestError",
            ],
            "method": "GET",
            "path": "/invoices",
            "request": {
              "name": "InvoiceIndexRequest",
              "query-parameters": {
                "direction": {
                  "allow-multiple": undefined,
                  "docs": "Set sort order. Allows "asc"(ascending) or "desc" (descending).",
                  "type": "optional<root.InvoiceIndexRequestDirection>",
                },
                "f.billed_directly_to_client": {
                  "allow-multiple": undefined,
                  "docs": "Filters for invoices that are billed directly to the client, rather than invoices that are billed to a shipment.
This parameter is mutually exclusive with the f.shipment.id filter.
",
                  "type": "optional<boolean>",
                },
                "f.client_id": {
                  "allow-multiple": undefined,
                  "docs": "[DEPRECATED] Filters the list for invoices billed directly to a client",
                  "type": "optional<integer>",
                },
                "f.entity.id": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list based on the ID of the company entity that receives the invoice",
                  "type": "optional<integer>",
                },
                "f.entity.ref": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list based on the ref of the company entity that receives the invoice",
                  "type": "optional<string>",
                },
                "f.issued_at.gt": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list for invoices issued after the specified date",
                  "type": "optional<string>",
                },
                "f.issued_at.lt": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list for invoices issued before the specified date",
                  "type": "optional<string>",
                },
                "f.last_updated_at.gt": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list for invoices last updated after the specified date",
                  "type": "optional<string>",
                },
                "f.last_updated_at.lt": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list for invoices last updated before the specified date",
                  "type": "optional<string>",
                },
                "f.name": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list based on the name of the invoice",
                  "type": "optional<string>",
                },
                "f.shipment.id": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list for invoices associated with a shipment",
                  "type": "optional<integer>",
                },
                "f.shipment_id": {
                  "allow-multiple": undefined,
                  "docs": "[DEPRECATED] Filters the list for invoices associated with a shipment",
                  "type": "optional<integer>",
                },
                "f.status": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list based on the status of the invoice",
                  "type": "optional<root.InvoiceIndexRequestFStatus>",
                },
                "page": {
                  "allow-multiple": undefined,
                  "docs": "Page number of the page to retrieve",
                  "type": "optional<integer>",
                },
                "per": {
                  "allow-multiple": undefined,
                  "docs": "Count of items in each page. Should be between 1 and 100 (inclusive).",
                  "type": "optional<integer>",
                },
                "sort": {
                  "allow-multiple": undefined,
                  "docs": "Sort results by the specified field.",
                  "type": "optional<literal<"due_date">>",
                },
              },
            },
            "response": {
              "docs": "collection of invoices",
              "type": "root.InvoiceIndexResponse",
            },
          },
          "show": {
            "auth": false,
            "display-name": "Retrieve an invoice",
            "docs": "Retrieves the details of a single invoice",
            "errors": [
              "root.BadRequestError",
            ],
            "method": "GET",
            "path": "/invoices/{id}",
            "path-parameters": {
              "id": {
                "docs": "The unique id for the invoice to be retrieved",
                "type": "string",
              },
            },
            "response": {
              "docs": "Success",
              "type": "root.InvoicesShowResponse",
            },
          },
        },
      },
    },
    "location.yml": {
      "docs": "Endpoints relating to Location objects",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Location",
        "endpoints": {
          "index": {
            "auth": false,
            "display-name": "List of location objects",
            "docs": "Returns a list of location objects in the network.",
            "errors": [
              "root.BadRequestError",
            ],
            "method": "GET",
            "path": "/network/locations",
            "request": {
              "name": "LocationIndexRequest",
              "query-parameters": {
                "f.company.id": {
                  "allow-multiple": undefined,
                  "docs": "The id for a company.",
                  "type": "optional<string>",
                },
                "f.company_ref": {
                  "allow-multiple": undefined,
                  "docs": "The ref for a company.",
                  "type": "optional<string>",
                },
                "f.contact.id": {
                  "allow-multiple": undefined,
                  "docs": "The id for a contact at this location.",
                  "type": "optional<string>",
                },
                "f.metadata.YOUR_METADATA_KEY": {
                  "allow-multiple": undefined,
                  "docs": "Only return locations that have a specific metadata key-value pair. Multiple metadata filters can be added to a single query. If there are multiple metadata filters each with the same metadata key, then the filter will return locations matching any of the specified metadata values for that metadata key.",
                  "type": "optional<string>",
                },
                "f.ref": {
                  "allow-multiple": undefined,
                  "docs": "The ref for the location.",
                  "type": "optional<string>",
                },
                "page": {
                  "allow-multiple": undefined,
                  "docs": "Page number of the page to retrieve",
                  "type": "optional<integer>",
                },
                "per": {
                  "allow-multiple": undefined,
                  "docs": "Count of items in each page. Should be between 1 and 100 (inclusive)",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "collection of locations",
              "type": "root.LocationIndexResponse",
            },
          },
          "network_location_create": {
            "auth": false,
            "display-name": "Create and return a new location",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
            ],
            "method": "POST",
            "path": "/network/locations",
            "request": {
              "body": {
                "properties": {
                  "address": {
                    "docs": undefined,
                    "type": "root.AddressForRequestBody",
                  },
                  "company_id": {
                    "docs": "The id of the company entity to create this location for",
                    "type": "string",
                  },
                  "contact_ids": {
                    "docs": "Array of contact id's to assign to this location",
                    "type": "optional<list<string>>",
                  },
                  "metadata": {
                    "docs": "Optional metadata to add to a location. Keys must be strings and values should be arrays of strings.",
                    "type": "optional<map<string, unknown>>",
                  },
                  "name": {
                    "docs": "Name of the location",
                    "type": "string",
                  },
                  "ref": {
                    "docs": "Not required. The ref that will be created for the new location",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "CreateLocation",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "The created location",
              "type": "root.NetworkLocationCreateResponse",
            },
          },
          "network_location_show": {
            "auth": false,
            "display-name": "Retrieve a location by id",
            "docs": "Retrieves the details of a single location",
            "errors": [
              "root.BadRequestError",
            ],
            "method": "GET",
            "path": "/network/locations/{id}",
            "path-parameters": {
              "id": {
                "docs": "The unique id for the requested location",
                "type": "string",
              },
            },
            "response": {
              "docs": "Success",
              "type": "root.NetworkLocationShowResponse",
            },
          },
          "update": {
            "auth": false,
            "display-name": "Update a network location",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
            ],
            "method": "PATCH",
            "path": "/network/locations/{id}",
            "path-parameters": {
              "id": {
                "docs": "The unique id for the requested location",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "address": {
                    "docs": undefined,
                    "type": "optional<root.AddressForRequestBody>",
                  },
                  "contact_ids": {
                    "docs": "If a value for contact_ids is specified, the array specified will replace all the existing contacts at the location",
                    "type": "optional<list<string>>",
                  },
                  "metadata": {
                    "docs": "Metadata to replace existing metadata. Keys must be strings and values should be arrays.",
                    "type": "optional<map<string, unknown>>",
                  },
                  "name": {
                    "docs": "New name of the location",
                    "type": "optional<string>",
                  },
                  "ref": {
                    "docs": "The new ref for the location",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateLocation",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success",
              "type": "root.LocationUpdateResponse",
            },
          },
        },
      },
    },
    "ports.yml": {
      "docs": "Endpoints relating to Ports objects",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Ports",
        "endpoints": {
          "index": {
            "auth": false,
            "display-name": "List of ports",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
            ],
            "method": "GET",
            "path": "/ports",
            "request": {
              "name": "PortsIndexRequest",
              "query-parameters": {
                "f.port_type": {
                  "allow-multiple": undefined,
                  "docs": "Filter by the type of port. Ports can have more than one type",
                  "type": "optional<root.PortsIndexRequestFPortType>",
                },
                "f.unlocode": {
                  "allow-multiple": undefined,
                  "docs": "Filter by unlocode.",
                  "type": "optional<string>",
                },
                "page": {
                  "allow-multiple": undefined,
                  "docs": "Page number of the page to retrieve",
                  "type": "optional<integer>",
                },
                "per": {
                  "allow-multiple": undefined,
                  "docs": "Count of items in each page. Should be between 1 and 100 (inclusive)",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "collection of ports",
              "type": "root.PortsIndexResponse",
            },
          },
        },
      },
    },
    "product.yml": {
      "docs": "Endpoints relating to Product objects",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Product",
        "endpoints": {
          "create": {
            "auth": false,
            "display-name": "Create a product",
            "docs": "Create a new product for this client using the request payload",
            "errors": [
              "root.BadRequestError",
            ],
            "method": "POST",
            "path": "/products",
            "request": {
              "body": {
                "properties": {
                  "classifications": {
                    "docs": "Array of product classifications. If a value is specified, the array of product classifications will replace the existing set of product classifications.",
                    "type": "optional<list<root.WriteProductClassification>>",
                  },
                  "client_verified": {
                    "docs": "Indicates whether Client has verified this Product.",
                    "type": "optional<boolean>",
                  },
                  "country_of_origin": {
                    "docs": "Nation in which the product is manufactured",
                    "type": "string",
                  },
                  "description": {
                    "docs": "Description of product",
                    "type": "optional<string>",
                  },
                  "name": {
                    "docs": "Always required. Name of product",
                    "type": "string",
                  },
                  "product_category": {
                    "docs": "The category of the product",
                    "type": "string",
                  },
                  "product_properties": {
                    "docs": "Array of product properties, custom key value pairs that describe the product",
                    "type": "optional<list<root.WriteProductProperty>>",
                  },
                  "sku": {
                    "docs": "Always required. SKU of product",
                    "type": "string",
                  },
                  "suppliers": {
                    "docs": "Array of suppliers. If a value is specified, the array of suppliers will replace the existing set of suppliers.",
                    "type": "optional<list<root.WriteProductSupplier>>",
                  },
                },
              },
              "headers": undefined,
              "name": "CreateProduct",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Created",
              "type": "root.ProductCreateResponse",
            },
          },
          "index": {
            "auth": false,
            "display-name": "List all products for a client",
            "docs": "Returns a list of all products belonging to this client",
            "errors": [
              "root.BadRequestError",
            ],
            "method": "GET",
            "path": "/products",
            "request": {
              "name": "ProductIndexRequest",
              "query-parameters": {
                "f.archived_at.exists": {
                  "allow-multiple": undefined,
                  "docs": "Filter out all archived products (f.archived_at.exists=false) or filter out all unarchived products (f.archived_at.exists=true)",
                  "type": "optional<boolean>",
                },
                "f.product_properties.TYPE": {
                  "allow-multiple": undefined,
                  "docs": "Search for product properties that are key-value pairs. The key (TYPE) is appended at the end of the parameter name. Multiple property filters can be added to the same query. E.G. f.product_properties.color=blue",
                  "type": "optional<string>",
                },
                "f.sku": {
                  "allow-multiple": undefined,
                  "docs": "Find the products having this SKU. SKUs are unique among active products, but there may be archived products that share the same sku.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Success",
              "type": "root.ProductIndexResponse",
            },
          },
          "show": {
            "auth": false,
            "display-name": "Retrieve a single product",
            "docs": "Returns the client's product with this ID",
            "errors": [
              "root.BadRequestError",
            ],
            "method": "GET",
            "path": "/products/{id}",
            "path-parameters": {
              "id": {
                "docs": "Unique id for the product to be retrieved",
                "type": "string",
              },
            },
            "response": {
              "docs": "Success",
              "type": "root.ProductShowResponse",
            },
          },
          "update": {
            "auth": false,
            "display-name": "Update a product",
            "docs": "Update this product to represent the request payload",
            "errors": [
              "root.BadRequestError",
            ],
            "method": "PATCH",
            "path": "/products/{id}",
            "path-parameters": {
              "id": {
                "docs": "Unique id for the product to be updated",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "classifications": {
                    "docs": "Array of product classifications. If a value is specified, the array of product classifications will replace the existing set of product classifications.",
                    "type": "optional<list<root.WriteProductClassification>>",
                  },
                  "client_verified": {
                    "docs": "Indicates whether Client has verified this Product.",
                    "type": "optional<boolean>",
                  },
                  "country_of_origin": {
                    "docs": "Nation in which the product is manufactured",
                    "type": "optional<string>",
                  },
                  "description": {
                    "docs": "Description of product",
                    "type": "optional<string>",
                  },
                  "name": {
                    "docs": "Name of product",
                    "type": "optional<string>",
                  },
                  "product_category": {
                    "docs": "The category of the product",
                    "type": "optional<string>",
                  },
                  "product_properties": {
                    "docs": "Array of product properties, custom key value pairs that describe the product",
                    "type": "optional<list<root.WriteProductProperty>>",
                  },
                  "sku": {
                    "docs": "SKU of product",
                    "type": "optional<string>",
                  },
                  "suppliers": {
                    "docs": "Array of suppliers. If a value is specified, the array of suppliers will replace the existing set of suppliers.",
                    "type": "optional<list<root.WriteProductSupplier>>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateProduct",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Updated",
              "type": "root.ProductUpdateResponse",
            },
          },
        },
      },
    },
    "purchaseOrder.yml": {
      "docs": "Endpoints relating to PurchaseOrder objects. **The Purchase Order endpoints need special permission to access. Please contact your Flexport Sales representative if you are interested in using these endpoints.**",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "PurchaseOrder",
        "endpoints": {
          "purchase_order_create": {
            "auth": false,
            "display-name": "Create and return a purchase order",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
            ],
            "method": "POST",
            "path": "/purchase_orders",
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.CreateOrUpdatePurchaseOrder",
              },
            },
            "response": {
              "docs": "The created purchase order",
              "type": "root.PurchaseOrder",
            },
          },
          "purchase_order_index": {
            "auth": false,
            "display-name": "List all purchase orders",
            "docs": "Returns a list of purchase orders",
            "errors": [
              "root.BadRequestError",
            ],
            "method": "GET",
            "path": "/purchase_orders",
            "request": {
              "name": "PurchaseOrderIndexRequest",
              "query-parameters": {
                "direction": {
                  "allow-multiple": undefined,
                  "docs": "Set sort order. Allows "asc"(ascending) or "desc" (descending)",
                  "type": "optional<root.PurchaseOrderIndexRequestDirection>",
                },
                "f.archived_at.exists": {
                  "allow-multiple": undefined,
                  "docs": "Filter out all archived purchase orders (f.archived_at.exists=false) or filter out all unarchived purchase orders (f.archived_at.exists=true)",
                  "type": "optional<boolean>",
                },
                "f.buyer_entity_ref": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list based on the PO buyer entity",
                  "type": "optional<string>",
                },
                "f.buyer_ref": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list based on PO buyer",
                  "type": "optional<string>",
                },
                "f.name": {
                  "allow-multiple": undefined,
                  "docs": "Filter the list based on PO name",
                  "type": "optional<string>",
                },
                "f.roles": {
                  "allow-multiple": true,
                  "docs": "Filters the list based on which role you take in the PO. You can state multiple roles with a comma.",
                  "type": "optional<root.PurchaseOrderIndexRequestFRolesItem>",
                },
                "f.seller_entity_ref": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list based on the PO seller entity",
                  "type": "optional<string>",
                },
                "f.seller_ref": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list based on the PO seller",
                  "type": "optional<string>",
                },
                "f.shipment.id": {
                  "allow-multiple": undefined,
                  "docs": "Filter the list based on whether a PO is on the shipment matching the provided ID",
                  "type": "optional<integer>",
                },
                "f.status": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list based on the PO status",
                  "type": "optional<root.PurchaseOrderIndexRequestFStatus>",
                },
                "f.updated_at.gt": {
                  "allow-multiple": undefined,
                  "docs": "Filter the list for POs last updated after the provided time",
                  "type": "optional<string>",
                },
                "f.updated_at.lt": {
                  "allow-multiple": undefined,
                  "docs": "Filter the list for POs last updated before the provided time",
                  "type": "optional<string>",
                },
                "page": {
                  "allow-multiple": undefined,
                  "docs": "Page number of the page to retrieve",
                  "type": "optional<integer>",
                },
                "per": {
                  "allow-multiple": undefined,
                  "docs": "Count of items in each page Should be between 1 and 100 (inclusive)",
                  "type": "optional<integer>",
                },
                "sort": {
                  "allow-multiple": undefined,
                  "docs": "Sort results by the specified field (only \`id\` is supported at this time)",
                  "type": "optional<literal<"id">>",
                },
              },
            },
            "response": {
              "docs": "collection of purchase orders",
              "type": "root.PurchaseOrderIndexResponse",
            },
          },
          "purchase_order_show": {
            "auth": false,
            "display-name": "Retrieve a purchase order",
            "docs": "Retrieves the details of a single purchase order.
",
            "errors": [
              "root.BadRequestError",
            ],
            "method": "GET",
            "path": "/purchase_orders/{id}",
            "path-parameters": {
              "id": {
                "docs": "The unique id for the purchase order to be retrieved",
                "type": "integer",
              },
            },
            "request": {
              "name": "PurchaseOrderShowRequest",
              "query-parameters": {
                "f.purchase_order_version.id": {
                  "allow-multiple": undefined,
                  "docs": "The id of the version of a purchase order. By default, the latest version of the purchase order is used.",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Success",
              "type": "root.PurchaseOrderShowResponse",
            },
          },
          "purchase_order_update": {
            "auth": false,
            "display-name": "Update and return a purchase order",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
            ],
            "method": "POST",
            "path": "/purchase_orders/{id}",
            "path-parameters": {
              "id": {
                "docs": "The unique id for the purchase order to be updated",
                "type": "integer",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.CreateOrUpdatePurchaseOrder",
              },
            },
            "response": {
              "docs": "The update purchase order",
              "type": "root.PurchaseOrder",
            },
          },
        },
      },
    },
    "purchaseOrderLineItem.yml": {
      "docs": "Endpoints relating to PurchaseOrderLineItem objects. **The Purchase Order Line Item endpoints need special permission to access. Please contact your Flexport Sales representative if you are interested in using these endpoints.**",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "PurchaseOrderLineItem",
        "endpoints": {
          "purchase_order_line_item_index": {
            "auth": false,
            "display-name": "List all purchase order line items.",
            "docs": "Returns a list of purchase order line items",
            "errors": [
              "root.BadRequestError",
            ],
            "method": "GET",
            "path": "/purchase_order_line_items",
            "request": {
              "name": "PurchaseOrderLineItemIndexRequest",
              "query-parameters": {
                "direction": {
                  "allow-multiple": undefined,
                  "docs": "Set sort order. Allows "asc"(ascending) or "desc" (descending)",
                  "type": "optional<root.PurchaseOrderLineItemIndexRequestDirection>",
                },
                "f.item_key": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list based on item key",
                  "type": "optional<string>",
                },
                "f.line_item_number": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list based on line item number",
                  "type": "optional<string>",
                },
                "f.purchase_order.id": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list based on the purchase order id",
                  "type": "optional<integer>",
                },
                "f.purchase_order_version.id": {
                  "allow-multiple": undefined,
                  "docs": "The id of the version of a purchase order. By default, the latest version of the purchase order is used.",
                  "type": "optional<integer>",
                },
                "page": {
                  "allow-multiple": undefined,
                  "docs": "Page number of the page to retrieve",
                  "type": "optional<integer>",
                },
                "per": {
                  "allow-multiple": undefined,
                  "docs": "Count of items in each page. Should be between 1 and 100 (inclusive)",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "collection of purchase order line items",
              "type": "root.PurchaseOrderLineItemIndexResponse",
            },
          },
          "purchase_order_line_item_show": {
            "auth": false,
            "display-name": "Retrieve a purchase order line item",
            "docs": "Returns the details of a purchase order line item",
            "errors": [
              "root.BadRequestError",
            ],
            "method": "GET",
            "path": "/purchase_order_line_items/{id}",
            "path-parameters": {
              "id": {
                "docs": "The unique id for the PO line item to be retrieved",
                "type": "integer",
              },
            },
            "response": {
              "docs": "collection of purchase order line items",
              "type": "root.PurchaseOrderLineItemShowResponse",
            },
          },
        },
      },
    },
    "shipment.yml": {
      "docs": "Endpoints relating to Shipment objects",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Shipment",
        "endpoints": {
          "index": {
            "auth": false,
            "display-name": "List all shipments",
            "docs": "Returns a list of shipments.",
            "errors": [
              "root.BadRequestError",
            ],
            "method": "GET",
            "path": "/shipments",
            "request": {
              "name": "ShipmentIndexRequest",
              "query-parameters": {
                "direction": {
                  "allow-multiple": undefined,
                  "docs": "Set sort order. Allows "asc" (ascending) or "desc" (descending).",
                  "type": "optional<root.ShipmentIndexRequestDirection>",
                },
                "f.archived_at.gt": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list for shipments that where archived after the given time",
                  "type": "optional<string>",
                },
                "f.archived_at.lt": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list for shipments that where archived before the given time",
                  "type": "optional<string>",
                },
                "f.belongs_to_a_buyers_consol": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list based on whether the shipment belongs to a buyer's consolidation",
                  "type": "optional<boolean>",
                },
                "f.consignee_external_ref": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list for shipments that have the specified company entity (denoted by external ref) as a consignee",
                  "type": "optional<string>",
                },
                "f.container_number": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list for shipments that are associated with a container specified by the given container number.",
                  "type": "optional<string>",
                },
                "f.destination_address_ref": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list for shipments that have a shipment leg with the same destination address ref",
                  "type": "optional<string>",
                },
                "f.house_bill_number": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list for shipments that are associated with the given house bill number",
                  "type": "optional<string>",
                },
                "f.master_bill_number": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list for shipments that are associated with the given master bill number",
                  "type": "optional<string>",
                },
                "f.metadata.YOUR_METADATA_KEY": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list for shipments that have a specific metadata key-value pair. Multiple metadata filters can be added to a single query. If there are multiple metadata filters each with the same metadata key, then the filter will return shipments matching any of the specified metadata values for that metadata key. Note that keys must be URL encoded; e.g.: \`f.metadata.PO #=123\` is invalid. It should instead be \`f.metadata.PO%20%23\`
",
                  "type": "optional<string>",
                },
                "f.origin_address_ref": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list for shipments that have a shipment leg with the same origin address ref",
                  "type": "optional<string>",
                },
                "f.purchase_order": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list for shipments that are associated with the given purchase order number",
                  "type": "optional<string>",
                },
                "f.sku": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list for shipments that are associated a product identified by the given SKU.",
                  "type": "optional<string>",
                },
                "f.status": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list based on the shipment's \`status\`. Cannot be used with \`f.statuses.any\`",
                  "type": "optional<root.ShipmentStatus>",
                },
                "f.statuses.any": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list for all shipments whose \`status\` is one of the passed in statuses. Can pass in multiple comma-separated statuses.",
                  "type": "optional<root.ShipmentStatus>",
                },
                "f.transportation_mode": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list based on the shipment's \`transportation_mode\`. One of \`ocean\` or \`air\`.",
                  "type": "optional<root.TransportationMode>",
                },
                "f.updated_at.gt": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list for shipments that where updated after the given time",
                  "type": "optional<string>",
                },
                "f.updated_at.lt": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list for shipments that where updated before the given time",
                  "type": "optional<string>",
                },
                "f.visibility_only": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list based on shipment's visibility_only flag",
                  "type": "optional<boolean>",
                },
                "f.wants_commercial_invoice_transcription": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list based on shipment's wants_commercial_invoice_transcription",
                  "type": "optional<boolean>",
                },
                "f.wants_delivery_service": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list based on shipment's wants_delivery_service flag",
                  "type": "optional<boolean>",
                },
                "f.wants_export_customs_service": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list based on shipment's wants_export_customs_service",
                  "type": "optional<boolean>",
                },
                "f.wants_flexport_freight": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list based on shipment's wants_flexport_freight",
                  "type": "optional<boolean>",
                },
                "f.wants_flexport_insurance": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list based on shipment's wants_flexport_insurance",
                  "type": "optional<boolean>",
                },
                "f.wants_freight_management_bco": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list based on shipment's wants_freight_management_bco",
                  "type": "optional<boolean>",
                },
                "f.wants_import_customs_service": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list based on shipment's wants_import_customs_service",
                  "type": "optional<boolean>",
                },
                "f.wants_pickup_service": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list based on shipment's wants_pickup_service",
                  "type": "optional<boolean>",
                },
                "f.wants_trade_declaration_service": {
                  "allow-multiple": undefined,
                  "docs": "Filters the list based on shipment's wants_trade_declaration_service",
                  "type": "optional<boolean>",
                },
                "page": {
                  "allow-multiple": undefined,
                  "docs": "Page number of the page to retrieve",
                  "type": "optional<integer>",
                },
                "per": {
                  "allow-multiple": undefined,
                  "docs": "Count of items in each page. Should be between 1 and 100 (inclusive).",
                  "type": "optional<integer>",
                },
                "sort": {
                  "allow-multiple": undefined,
                  "docs": "Sort results by the specified field.",
                  "type": "optional<root.ShipmentIndexRequestSort>",
                },
              },
            },
            "response": {
              "docs": "collection of shipments",
              "type": "root.ShipmentIndexResponse",
            },
          },
          "shipments_shareable": {
            "auth": false,
            "display-name": "Create shareable URLs for shipments",
            "docs": "Returns a list of shipments status shareable url",
            "errors": [
              "root.BadRequestError",
            ],
            "method": "POST",
            "path": "/shipments_shareable",
            "request": {
              "body": {
                "properties": {
                  "shipment_ids": {
                    "docs": "A list (length < 10) of the unique id for the shipment to be retrieved.",
                    "type": "optional<list<integer>>",
                  },
                },
              },
              "headers": undefined,
              "name": "ShipmentsShareableRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "collection of shipments shareable status url",
              "type": "root.ShipmentsShareableResponse",
            },
          },
          "show": {
            "auth": false,
            "display-name": "Retrieve a shipment",
            "docs": "Retrieves the details of a single shipment.
",
            "errors": [
              "root.BadRequestError",
            ],
            "method": "GET",
            "path": "/shipments/{id}",
            "path-parameters": {
              "id": {
                "docs": "The unique id for the shipment to be retrieved.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Success",
              "type": "root.ShipmentShowResponse",
            },
          },
          "update": {
            "auth": false,
            "display-name": "Update an existing shipment",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
            ],
            "method": "PATCH",
            "path": "/shipments/{id}",
            "path-parameters": {
              "id": {
                "docs": "The unique id for the shipment to be updated",
                "type": "integer",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "metadata": {
                    "docs": "Metadata to replace existing metadata. Keys should be strings and values should be arrays. All existing metadata will be replaced by the passed in object.",
                    "type": "optional<map<string, unknown>>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateShipment",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "The updated shipment",
              "type": "root.ShipmentUpdateResponse",
            },
          },
        },
      },
    },
    "shipmentLeg.yml": {
      "docs": "Endpoints relating to ShipmentLeg objects",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "ShipmentLeg",
        "endpoints": {
          "shipment_leg_index": {
            "auth": false,
            "display-name": "List all shipment route legs",
            "docs": "Returns a list of shipment route legs. The legs are sorted descending by creation date.",
            "errors": [
              "root.BadRequestError",
            ],
            "method": "GET",
            "path": "/shipment_legs",
            "request": {
              "name": "ShipmentLegIndexRequest",
              "query-parameters": {
                "f.include_deleted": {
                  "allow-multiple": undefined,
                  "docs": "Returns legs including deleted legs",
                  "type": "optional<boolean>",
                },
                "f.shipment.id": {
                  "allow-multiple": undefined,
                  "docs": "Only return legs for the shipment specified by this id.",
                  "type": "optional<integer>",
                },
                "f.transportation_mode": {
                  "allow-multiple": undefined,
                  "docs": "Only return legs that match the given transportation mode",
                  "type": "optional<integer>",
                },
                "page": {
                  "allow-multiple": undefined,
                  "docs": "Page number of the page to retrieve",
                  "type": "optional<integer>",
                },
                "per": {
                  "allow-multiple": undefined,
                  "docs": "Count of items in each page. Should be between 1 and 100 (inclusive).",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Success",
              "type": "root.ShipmentLegIndexResponse",
            },
          },
          "shipment_leg_show": {
            "auth": false,
            "display-name": "Retrieve a shipment route leg",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
            ],
            "method": "GET",
            "path": "/shipment_legs/{id}",
            "path-parameters": {
              "id": {
                "docs": "The unique id for the ShipmentLeg object to be retrieved",
                "type": "integer",
              },
            },
            "request": {
              "name": "ShipmentLegShowRequest",
              "query-parameters": {
                "f.include_deleted": {
                  "allow-multiple": undefined,
                  "docs": "Retrieves the leg even if it was deleted",
                  "type": "optional<boolean>",
                },
              },
            },
            "response": {
              "docs": "Success",
              "type": "root.ShipmentLegShowResponse",
            },
          },
        },
      },
    },
  },
  "rootApiFile": {
    "default-environment": "default",
    "display-name": "Flexport API",
    "environments": {
      "default": "https://api.flexport.com",
    },
    "error-discrimination": {
      "strategy": "status-code",
    },
    "imports": {
      "root": "__package__.yml",
    },
    "name": "api",
  },
}
`;
