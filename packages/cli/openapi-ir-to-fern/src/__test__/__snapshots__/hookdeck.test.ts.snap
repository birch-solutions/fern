// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`open api parser hookdeck simple 1`] = `
{
  "definitionFiles": {
    "attempts.yml": {
      "docs": "An attempt is any request that Hookdeck makes on behalf of an event.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Attempts",
        "endpoints": {
          "getAttempt": {
            "auth": true,
            "display-name": "Get a single attempt",
            "docs": "",
            "errors": [
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/attempts/{id}",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "A single attempt",
              "type": "optional<root.EventAttempt>",
            },
          },
          "getAttempts": {
            "auth": true,
            "display-name": "Get attempts",
            "docs": "",
            "errors": [
              "root.BadRequestError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "headers": undefined,
                "path-parameters": undefined,
                "query-parameters": undefined,
                "request": undefined,
                "response": {
                  "body": {},
                },
              },
            ],
            "method": "GET",
            "path": "/attempts",
            "request": {
              "name": "GetAttemptsRequest",
              "query-parameters": {
                "dir": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.GetAttemptsRequestDir>",
                },
                "event_id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "next": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "order_by": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<literal<"created_at">>",
                },
                "prev": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "List of attempts",
              "type": "root.EventAttemptPaginatedResult",
            },
          },
        },
      },
    },
    "bookmarks.yml": {
      "docs": "A bookmark lets you conveniently store and replay a specific request.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Bookmarks",
        "endpoints": {
          "createBookmark": {
            "auth": true,
            "display-name": "Create a bookmark",
            "docs": "",
            "errors": [
              "root.BadRequestError",
              "root.UnprocessableEntityError",
            ],
            "method": "POST",
            "path": "/bookmarks",
            "request": {
              "body": {
                "properties": {
                  "event_data_id": {
                    "docs": "ID of the event data to bookmark",
                    "type": "string",
                  },
                  "label": {
                    "docs": "Descriptive name of the bookmark",
                    "type": "string",
                  },
                  "name": {
                    "docs": "A unique, human-friendly name for the bookmark",
                    "type": "optional<string>",
                  },
                  "webhook_id": {
                    "docs": "ID of the associated connection",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "CreateBookmarkRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "A single bookmark",
              "type": "root.Bookmark",
            },
          },
          "deleteBookmark": {
            "auth": true,
            "display-name": "Delete a bookmark",
            "docs": "",
            "errors": [
              "root.NotFoundError",
            ],
            "method": "DELETE",
            "path": "/bookmarks/{id}",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "An object with deleted bookmark's id",
              "type": "root.DeletedBookmarkResponse",
            },
          },
          "getBookmark": {
            "auth": true,
            "display-name": "Get a single bookmark",
            "docs": "",
            "errors": [
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/bookmarks/{id}",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "A single bookmark",
              "type": "root.Bookmark",
            },
          },
          "getBookmarks": {
            "auth": true,
            "display-name": "Get bookmarks",
            "docs": "",
            "errors": [
              "root.BadRequestError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "headers": undefined,
                "path-parameters": undefined,
                "query-parameters": undefined,
                "request": undefined,
                "response": {
                  "body": {},
                },
              },
            ],
            "method": "GET",
            "path": "/bookmarks",
            "request": {
              "name": "GetBookmarksRequest",
              "query-parameters": {
                "dir": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.GetBookmarksRequestDir>",
                },
                "event_data_id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "label": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "last_used_at": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<datetime>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "name": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "next": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "order_by": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<literal<"created_at">>",
                },
                "prev": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "webhook_id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "List of bookmarks",
              "type": "root.BookmarkPaginatedResult",
            },
          },
          "triggerBookmark": {
            "auth": true,
            "display-name": "Trigger a bookmark",
            "docs": "",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "headers": undefined,
                "path-parameters": {
                  "id": "id",
                },
                "query-parameters": undefined,
                "request": {
                  "target": "http",
                },
                "response": {
                  "body": [],
                },
              },
            ],
            "method": "POST",
            "path": "/bookmarks/{id}/trigger",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "target": {
                    "docs": "Bookmark target",
                    "type": "optional<root.TriggerBookmarkRequestTarget>",
                  },
                },
              },
              "headers": undefined,
              "name": "TriggerBookmarkRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Array of created events",
              "type": "root.EventArray",
            },
          },
          "updateBookmark": {
            "auth": true,
            "display-name": "Update a bookmark",
            "docs": "",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.UnprocessableEntityError",
            ],
            "method": "PUT",
            "path": "/bookmarks/{id}",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "event_data_id": {
                    "docs": "ID of the event data to bookmark",
                    "type": "optional<string>",
                  },
                  "label": {
                    "docs": "Descriptive name of the bookmark",
                    "type": "optional<string>",
                  },
                  "name": {
                    "docs": "A unique, human-friendly name for the bookmark",
                    "type": "optional<string>",
                  },
                  "webhook_id": {
                    "docs": "ID of the associated connection",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateBookmarkRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "A single bookmark",
              "type": "root.Bookmark",
            },
          },
        },
      },
    },
    "bulkRetryEvents.yml": {
      "docs": "",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Bulk retry events",
        "endpoints": {
          "cancelEventBulkRetry": {
            "auth": true,
            "display-name": "Cancel an events bulk retry",
            "docs": "",
            "errors": [
              "root.NotFoundError",
            ],
            "method": "POST",
            "path": "/bulk/events/retry/{id}/cancel",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "A single events bulk retry",
              "type": "root.BatchOperation",
            },
          },
          "createEventBulkRetry": {
            "auth": true,
            "display-name": "Create an events bulk retry",
            "docs": "",
            "errors": [
              "root.BadRequestError",
              "root.UnprocessableEntityError",
            ],
            "method": "POST",
            "path": "/bulk/events/retry",
            "request": {
              "body": {
                "properties": {
                  "query": {
                    "docs": "Filter properties for the events to be included in the bulk retry",
                    "type": "optional<root.CreateEventBulkRetryRequestQuery>",
                  },
                },
              },
              "headers": undefined,
              "name": "CreateEventBulkRetryRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "A single events bulk retry",
              "type": "root.BatchOperation",
            },
          },
          "generateEventBulkRetryPlan": {
            "auth": true,
            "display-name": "Generate an events bulk retry plan",
            "docs": "",
            "errors": [
              "root.BadRequestError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "headers": undefined,
                "path-parameters": undefined,
                "query-parameters": undefined,
                "request": undefined,
                "response": {
                  "body": {},
                },
              },
            ],
            "method": "GET",
            "path": "/bulk/events/retry/plan",
            "response": {
              "docs": "Events bulk retry plan",
              "type": "root.BatchOperationPlan",
            },
          },
          "getEventBulkRetries": {
            "auth": true,
            "display-name": "Get events bulk retries",
            "docs": "",
            "errors": [
              "root.BadRequestError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "headers": undefined,
                "path-parameters": undefined,
                "query-parameters": {
                  "query": {
                    "include": "data",
                  },
                },
                "request": undefined,
                "response": {
                  "body": {},
                },
              },
            ],
            "method": "GET",
            "path": "/bulk/events/retry",
            "request": {
              "name": "GetEventBulkRetriesRequest",
              "query-parameters": {
                "cancelled_at": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<datetime>",
                },
                "completed_at": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<datetime>",
                },
                "created_at": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<datetime>",
                },
                "dir": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.GetEventBulkRetriesRequestDir>",
                },
                "id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "in_progress": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<boolean>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "next": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "order_by": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<literal<"created_at">>",
                },
                "prev": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "query_partial_match": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<boolean>",
                },
              },
            },
            "response": {
              "docs": "List of events bulk retries",
              "type": "root.BatchOperationPaginatedResult",
            },
          },
          "getEventBulkRetry": {
            "auth": true,
            "display-name": "Get an events bulk retry",
            "docs": "",
            "errors": [
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/bulk/events/retry/{id}",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "A single events bulk retry",
              "type": "root.BatchOperation",
            },
          },
        },
      },
    },
    "bulkRetryIgnoredEvents.yml": {
      "docs": "",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Bulk retry ignored events",
        "endpoints": {
          "cancelIgnoredEventBulkRetry": {
            "auth": true,
            "display-name": "Cancel an ignored events bulk retry",
            "docs": "",
            "errors": [
              "root.NotFoundError",
            ],
            "method": "POST",
            "path": "/bulk/ignored-events/retry/{id}/cancel",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "A single ignored events bulk retry",
              "type": "root.BatchOperation",
            },
          },
          "createIgnoredEventBulkRetry": {
            "auth": true,
            "display-name": "Create an ignored events bulk retry",
            "docs": "",
            "errors": [
              "root.BadRequestError",
              "root.UnprocessableEntityError",
            ],
            "method": "POST",
            "path": "/bulk/ignored-events/retry",
            "request": {
              "body": {
                "properties": {
                  "query": {
                    "docs": "Filter by the bulk retry ignored event query object",
                    "type": "optional<root.CreateIgnoredEventBulkRetryRequestQuery>",
                  },
                },
              },
              "headers": undefined,
              "name": "CreateIgnoredEventBulkRetryRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "A single ignored events bulk retry",
              "type": "root.BatchOperation",
            },
          },
          "generateIgnoredEventBulkRetryPlan": {
            "auth": true,
            "display-name": "Generate an ignored events bulk retry plan",
            "docs": "",
            "errors": [
              "root.BadRequestError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "headers": undefined,
                "path-parameters": undefined,
                "query-parameters": undefined,
                "request": undefined,
                "response": {
                  "body": {},
                },
              },
            ],
            "method": "GET",
            "path": "/bulk/ignored-events/retry/plan",
            "response": {
              "docs": "Ignored events bulk retry plan",
              "type": "root.BatchOperationPlan",
            },
          },
          "getIgnoredEventBulkRetries": {
            "auth": true,
            "display-name": "Get ignored events bulk retries",
            "docs": "",
            "errors": [
              "root.BadRequestError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "headers": undefined,
                "path-parameters": undefined,
                "query-parameters": undefined,
                "request": undefined,
                "response": {
                  "body": {},
                },
              },
            ],
            "method": "GET",
            "path": "/bulk/ignored-events/retry",
            "request": {
              "name": "GetIgnoredEventBulkRetriesRequest",
              "query-parameters": {
                "cancelled_at": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<datetime>",
                },
                "completed_at": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<datetime>",
                },
                "created_at": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<datetime>",
                },
                "dir": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.GetIgnoredEventBulkRetriesRequestDir>",
                },
                "id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "in_progress": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<boolean>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "next": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "order_by": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<literal<"created_at">>",
                },
                "prev": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "query_partial_match": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<boolean>",
                },
              },
            },
            "response": {
              "docs": "List of ignored events bulk retries",
              "type": "root.BatchOperationPaginatedResult",
            },
          },
          "getIgnoredEventBulkRetry": {
            "auth": true,
            "display-name": "Get an ignored events bulk retry",
            "docs": "",
            "errors": [
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/bulk/ignored-events/retry/{id}",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "A single ignored events bulk retry",
              "type": "root.BatchOperation",
            },
          },
        },
      },
    },
    "bulkRetryRequests.yml": {
      "docs": "",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Bulk retry requests",
        "endpoints": {
          "cancelRequestBulkRetry": {
            "auth": true,
            "display-name": "Cancel a requests bulk retry",
            "docs": "",
            "errors": [
              "root.NotFoundError",
            ],
            "method": "POST",
            "path": "/bulk/requests/retry/{id}/cancel",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "A single requests bulk retry",
              "type": "root.BatchOperation",
            },
          },
          "createRequestBulkRetry": {
            "auth": true,
            "display-name": "Create a requests bulk retry",
            "docs": "",
            "errors": [
              "root.BadRequestError",
              "root.UnprocessableEntityError",
            ],
            "method": "POST",
            "path": "/bulk/requests/retry",
            "request": {
              "body": {
                "properties": {
                  "query": {
                    "docs": "Filter properties for the events to be included in the bulk retry, use query parameters of [Requests](#requests)",
                    "type": "optional<root.CreateRequestBulkRetryRequestQuery>",
                  },
                },
              },
              "headers": undefined,
              "name": "CreateRequestBulkRetryRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "A single requests bulk retry",
              "type": "root.BatchOperation",
            },
          },
          "generateRequestBulkRetryPlan": {
            "auth": true,
            "display-name": "Generate a requests bulk retry plan",
            "docs": "",
            "errors": [
              "root.BadRequestError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "headers": undefined,
                "path-parameters": undefined,
                "query-parameters": {
                  "query": {
                    "status": "accepted",
                  },
                },
                "request": undefined,
                "response": {
                  "body": {},
                },
              },
            ],
            "method": "GET",
            "path": "/bulk/requests/retry/plan",
            "response": {
              "docs": "Requests bulk retry plan",
              "type": "root.BatchOperationPlan",
            },
          },
          "getRequestBulkRetries": {
            "auth": true,
            "display-name": "Get request bulk retries",
            "docs": "",
            "errors": [
              "root.BadRequestError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "headers": undefined,
                "path-parameters": undefined,
                "query-parameters": {
                  "query": {
                    "include": "data",
                    "status": "accepted",
                  },
                },
                "request": undefined,
                "response": {
                  "body": {},
                },
              },
            ],
            "method": "GET",
            "path": "/bulk/requests/retry",
            "request": {
              "name": "GetRequestBulkRetriesRequest",
              "query-parameters": {
                "cancelled_at": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<datetime>",
                },
                "completed_at": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<datetime>",
                },
                "created_at": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<datetime>",
                },
                "dir": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.GetRequestBulkRetriesRequestDir>",
                },
                "id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "in_progress": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<boolean>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "next": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "order_by": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<literal<"created_at">>",
                },
                "prev": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "query_partial_match": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<boolean>",
                },
              },
            },
            "response": {
              "docs": "List of request bulk retries",
              "type": "root.BatchOperationPaginatedResult",
            },
          },
          "getRequestBulkRetry": {
            "auth": true,
            "display-name": "Get a requests bulk retry",
            "docs": "",
            "errors": [
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/bulk/requests/retry/{id}",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "A single requests bulk retry",
              "type": "root.BatchOperation",
            },
          },
        },
      },
    },
    "connections.yml": {
      "docs": "A connection lets you route webhooks from a source to a destination, using a ruleset.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Connections",
        "endpoints": {
          "archiveConnection": {
            "auth": true,
            "display-name": "Archive a connection",
            "docs": "",
            "errors": [
              "root.NotFoundError",
            ],
            "method": "PUT",
            "path": "/webhooks/{id}/archive",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "A single connection",
              "type": "root.Connection",
            },
          },
          "createConnection": {
            "auth": true,
            "display-name": "Create a connection",
            "docs": "",
            "errors": [
              "root.BadRequestError",
              "root.UnprocessableEntityError",
            ],
            "method": "POST",
            "path": "/webhooks",
            "request": {
              "body": {
                "properties": {
                  "destination": {
                    "docs": "Destination input object",
                    "type": "optional<root.CreateConnectionRequestDestination>",
                  },
                  "destination_id": {
                    "docs": "ID of a destination to bind to the connection",
                    "type": "optional<string>",
                  },
                  "name": {
                    "docs": "A unique name of the connection for the source",
                    "type": "string",
                  },
                  "rules": {
                    "docs": "Array of rules to apply",
                    "type": "optional<list<root.Rule>>",
                  },
                  "ruleset": {
                    "docs": "Ruleset input object",
                    "type": "optional<root.CreateConnectionRequestRuleset>",
                  },
                  "ruleset_id": {
                    "docs": "ID of a rule to bind to the connection. Default to the Workspace default ruleset",
                    "type": "optional<string>",
                  },
                  "source": {
                    "docs": "Source input object",
                    "type": "optional<root.CreateConnectionRequestSource>",
                  },
                  "source_id": {
                    "docs": "ID of a source to bind to the connection",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "CreateConnectionRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "A single connection",
              "type": "root.Connection",
            },
          },
          "getConnection": {
            "auth": true,
            "display-name": "Get a single connection",
            "docs": "",
            "errors": [
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/webhooks/{id}",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "A single connection",
              "type": "root.Connection",
            },
          },
          "getConnections": {
            "auth": true,
            "display-name": "Get connections",
            "docs": "",
            "errors": [
              "root.BadRequestError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "headers": undefined,
                "path-parameters": undefined,
                "query-parameters": undefined,
                "request": undefined,
                "response": {
                  "body": {},
                },
              },
            ],
            "method": "GET",
            "path": "/webhooks",
            "request": {
              "name": "GetConnectionsRequest",
              "query-parameters": {
                "archived": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<boolean>",
                },
                "archived_at": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<datetime>",
                },
                "destination_id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "dir": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.GetConnectionsRequestDir>",
                },
                "full_name": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "name": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "next": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "order_by": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<literal<"created_at">>",
                },
                "paused_at": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<datetime>",
                },
                "prev": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "source_id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "List of connections",
              "type": "root.ConnectionPaginatedResult",
            },
          },
          "pauseConnection": {
            "auth": true,
            "display-name": "Pause a connection",
            "docs": "",
            "errors": [
              "root.NotFoundError",
            ],
            "method": "PUT",
            "path": "/webhooks/{id}/pause",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "A single connection",
              "type": "root.Connection",
            },
          },
          "unarchiveConnection": {
            "auth": true,
            "display-name": "Unarchive a connection",
            "docs": "",
            "errors": [
              "root.NotFoundError",
            ],
            "method": "PUT",
            "path": "/webhooks/{id}/unarchive",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "A single connection",
              "type": "root.Connection",
            },
          },
          "unpauseConnection": {
            "auth": true,
            "display-name": "Unpause a connection",
            "docs": "",
            "errors": [
              "root.NotFoundError",
            ],
            "method": "PUT",
            "path": "/webhooks/{id}/unpause",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "A single connection",
              "type": "root.Connection",
            },
          },
          "updateConnection": {
            "auth": true,
            "display-name": "Update a connection",
            "docs": "",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.UnprocessableEntityError",
            ],
            "method": "PUT",
            "path": "/webhooks/{id}",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "name": {
                    "docs": "Unique name of the connection for the source",
                    "type": "optional<string>",
                  },
                  "rules": {
                    "docs": "Array of rules to apply",
                    "type": "optional<list<root.Rule>>",
                  },
                  "ruleset": {
                    "docs": "Ruleset input object",
                    "type": "optional<root.UpdateConnectionRequestRuleset>",
                  },
                  "ruleset_id": {
                    "docs": "ID of a rule to bind to the connection. Default to the Workspace default ruleset",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateConnectionRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "A single connection",
              "type": "root.Connection",
            },
          },
          "upsertConnection": {
            "auth": true,
            "display-name": "Update or create a connection",
            "docs": "",
            "errors": [
              "root.BadRequestError",
              "root.UnprocessableEntityError",
            ],
            "method": "PUT",
            "path": "/webhooks",
            "request": {
              "body": {
                "properties": {
                  "destination": {
                    "docs": "Destination input object",
                    "type": "optional<root.UpsertConnectionRequestDestination>",
                  },
                  "destination_id": {
                    "docs": "ID of a destination to bind to the connection",
                    "type": "optional<string>",
                  },
                  "name": {
                    "docs": "A unique name of the connection for the source",
                    "type": "string",
                  },
                  "rules": {
                    "docs": "Array of rules to apply",
                    "type": "optional<list<root.Rule>>",
                  },
                  "ruleset": {
                    "docs": "Ruleset input object",
                    "type": "optional<root.UpsertConnectionRequestRuleset>",
                  },
                  "ruleset_id": {
                    "docs": "ID of a rule to bind to the connection. Default to the Workspace default ruleset",
                    "type": "optional<string>",
                  },
                  "source": {
                    "docs": "Source input object",
                    "type": "optional<root.UpsertConnectionRequestSource>",
                  },
                  "source_id": {
                    "docs": "ID of a source to bind to the connection",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpsertConnectionRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "A single connection",
              "type": "root.Connection",
            },
          },
        },
      },
    },
    "destinations.yml": {
      "docs": "A destination is any endpoint to which your webhooks can be routed.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Destinations",
        "endpoints": {
          "archiveDestination": {
            "auth": true,
            "display-name": "Archive a destination",
            "docs": "",
            "errors": [
              "root.NotFoundError",
            ],
            "method": "PUT",
            "path": "/destinations/{id}/archive",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "A single destination",
              "type": "root.Destination",
            },
          },
          "createDestination": {
            "auth": true,
            "display-name": "Create a destination",
            "docs": "",
            "errors": [
              "root.BadRequestError",
              "root.UnprocessableEntityError",
            ],
            "method": "POST",
            "path": "/destinations",
            "request": {
              "body": {
                "properties": {
                  "cli_path": {
                    "docs": "Path for the CLI destination",
                    "type": "optional<string>",
                  },
                  "name": {
                    "docs": "Name for the destination",
                    "type": "string",
                  },
                  "path_forwarding_disabled": {
                    "docs": undefined,
                    "type": "optional<boolean>",
                  },
                  "rate_limit": {
                    "docs": "Limit event attempts to receive per period",
                    "type": "optional<integer>",
                  },
                  "rate_limit_period": {
                    "docs": "Period to rate limit attempts",
                    "type": "optional<root.CreateDestinationRequestRateLimitPeriod>",
                  },
                  "url": {
                    "docs": "Endpoint of the destination",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "CreateDestinationRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "A single destination",
              "type": "root.Destination",
            },
          },
          "getDestination": {
            "auth": true,
            "display-name": "Get a destination",
            "docs": "",
            "errors": [
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/destinations/{id}",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "A single destination",
              "type": "root.Destination",
            },
          },
          "getDestinations": {
            "auth": true,
            "display-name": "Get destinations",
            "docs": "",
            "errors": [
              "root.BadRequestError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "headers": undefined,
                "path-parameters": undefined,
                "query-parameters": undefined,
                "request": undefined,
                "response": {
                  "body": {},
                },
              },
            ],
            "method": "GET",
            "path": "/destinations",
            "request": {
              "name": "GetDestinationsRequest",
              "query-parameters": {
                "archived": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<boolean>",
                },
                "archived_at": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<datetime>",
                },
                "cli_path": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "dir": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.GetDestinationsRequestDir>",
                },
                "id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "name": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "next": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "order_by": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<literal<"created_at">>",
                },
                "prev": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "url": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "List of destinations",
              "type": "root.DestinationPaginatedResult",
            },
          },
          "unarchiveDestination": {
            "auth": true,
            "display-name": "Unarchive a destination",
            "docs": "",
            "errors": [
              "root.NotFoundError",
            ],
            "method": "PUT",
            "path": "/destinations/{id}/unarchive",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "A single destination",
              "type": "root.Destination",
            },
          },
          "updateDestination": {
            "auth": true,
            "display-name": "Update a destination",
            "docs": "",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.UnprocessableEntityError",
            ],
            "method": "PUT",
            "path": "/destinations/{id}",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "archived_at": {
                    "docs": "Date the destination was archived",
                    "type": "optional<datetime>",
                  },
                  "cli_path": {
                    "docs": "Path for the CLI destination",
                    "type": "optional<string>",
                  },
                  "name": {
                    "docs": "Name for the destination",
                    "type": "string",
                  },
                  "path_forwarding_disabled": {
                    "docs": undefined,
                    "type": "optional<boolean>",
                  },
                  "rate_limit": {
                    "docs": "Limit event attempts to receive per period",
                    "type": "optional<integer>",
                  },
                  "rate_limit_period": {
                    "docs": "Period to rate limit attempts",
                    "type": "optional<root.UpdateDestinationRequestRateLimitPeriod>",
                  },
                  "url": {
                    "docs": "Endpoint of the destination",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateDestinationRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "A single destination",
              "type": "root.Destination",
            },
          },
          "upsertDestination": {
            "auth": true,
            "display-name": "Update or create a destination",
            "docs": "",
            "errors": [
              "root.BadRequestError",
              "root.UnprocessableEntityError",
            ],
            "method": "PUT",
            "path": "/destinations",
            "request": {
              "body": {
                "properties": {
                  "cli_path": {
                    "docs": "Path for the CLI destination",
                    "type": "optional<string>",
                  },
                  "name": {
                    "docs": "Name for the destination",
                    "type": "string",
                  },
                  "path_forwarding_disabled": {
                    "docs": undefined,
                    "type": "optional<boolean>",
                  },
                  "rate_limit": {
                    "docs": "Limit event attempts to receive per period",
                    "type": "optional<integer>",
                  },
                  "rate_limit_period": {
                    "docs": "Period to rate limit attempts",
                    "type": "optional<root.UpsertDestinationRequestRateLimitPeriod>",
                  },
                  "url": {
                    "docs": "Endpoint of the destination",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpsertDestinationRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "A single destination",
              "type": "root.Destination",
            },
          },
        },
      },
    },
    "events.yml": {
      "docs": "An event is any request that Hookdeck receives from a source.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Events",
        "endpoints": {
          "getEvent": {
            "auth": true,
            "display-name": "Get an event",
            "docs": "",
            "errors": [
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/events/{id}",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "A single event",
              "type": "root.Event",
            },
          },
          "getEvents": {
            "auth": true,
            "display-name": "Get events",
            "docs": "",
            "errors": [
              "root.BadRequestError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "headers": undefined,
                "path-parameters": undefined,
                "query-parameters": {
                  "include": "data",
                },
                "request": undefined,
                "response": {
                  "body": {},
                },
              },
            ],
            "method": "GET",
            "path": "/events",
            "request": {
              "name": "GetEventsRequest",
              "query-parameters": {
                "attempts": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "body": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "bulk_retry_id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "cli_id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "cli_user_id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "created_at": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<datetime>",
                },
                "destination_id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "dir": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.GetEventsRequestDir>",
                },
                "error_code": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "event_data_id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "headers": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "include": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<literal<"data">>",
                },
                "issue_id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "last_attempt_at": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<datetime>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "next": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "order_by": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.GetEventsRequestOrderBy>",
                },
                "parsed_query": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "path": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "prev": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "response_status": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "source_id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "status": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.EventStatus>",
                },
                "successful_at": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<datetime>",
                },
                "webhook_id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "List of events",
              "type": "root.EventPaginatedResult",
            },
          },
          "getRequestRawBody": {
            "auth": true,
            "display-name": "Get a event raw body data",
            "docs": "",
            "errors": [
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/events/{id}/raw_body",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "A request raw body data",
              "type": "root.RawBody",
            },
          },
          "muteEvent": {
            "auth": true,
            "display-name": "Mute an event",
            "docs": "",
            "errors": [
              "root.NotFoundError",
            ],
            "method": "PUT",
            "path": "/events/{id}/mute",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "A single event",
              "type": "root.Event",
            },
          },
          "retryEvent": {
            "auth": true,
            "display-name": "Retry an event",
            "docs": "",
            "errors": [
              "root.NotFoundError",
            ],
            "method": "POST",
            "path": "/events/{id}/retry",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Retried event with event attempt",
              "type": "root.RetriedEvent",
            },
          },
        },
      },
    },
    "integrations.yml": {
      "docs": "An integration configures platform-specific behaviors, such as signature verification.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Integrations",
        "endpoints": {
          "attachIntegrationToSource": {
            "auth": true,
            "display-name": "Attach an integration to a source",
            "docs": "",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
            ],
            "method": "PUT",
            "path": "/integrations/{id}/attach/{source_id}",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
              "source_id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Attach operation success status",
              "type": "root.AttachedIntegrationToSource",
            },
          },
          "createIntegration": {
            "auth": true,
            "display-name": "Create an integration",
            "docs": "",
            "errors": [
              "root.BadRequestError",
              "root.UnprocessableEntityError",
            ],
            "method": "POST",
            "path": "/integrations",
            "request": {
              "body": {
                "properties": {
                  "configs": {
                    "docs": "Decrypted Key/Value object of the associated configuration for that provider",
                    "type": "root.CreateIntegrationRequestConfigs",
                  },
                  "features": {
                    "docs": "List of features to enable (see features list above)",
                    "type": "list<root.IntegrationFeature>",
                  },
                  "label": {
                    "docs": "Label of the integration",
                    "type": "string",
                  },
                  "provider": {
                    "docs": undefined,
                    "type": "root.IntegrationProvider",
                  },
                },
              },
              "headers": undefined,
              "name": "CreateIntegrationRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "A single integration",
              "type": "root.Integration",
            },
          },
          "deleteIntegration": {
            "auth": true,
            "display-name": "Delete an integration",
            "docs": "",
            "errors": [
              "root.NotFoundError",
            ],
            "method": "DELETE",
            "path": "/integrations/{id}",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "An object with deleted integration id",
              "type": "root.DeletedIntegration",
            },
          },
          "detachIntegrationToSource": {
            "auth": true,
            "display-name": "Detach an integration from a source",
            "docs": "",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
            ],
            "examples": [
              {
                "headers": undefined,
                "path-parameters": {
                  "id": "id",
                  "source_id": "source-id",
                },
                "query-parameters": undefined,
                "request": undefined,
                "response": {
                  "body": {},
                },
              },
            ],
            "method": "PUT",
            "path": "/integrations/{id}/detach/{source_id}",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
              "source_id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Detach operation success status",
              "type": "root.DetachedIntegrationFromSource",
            },
          },
          "getIntegration": {
            "auth": true,
            "display-name": "Get an integration",
            "docs": "",
            "errors": [
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/integrations/{id}",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "A single integration",
              "type": "root.Integration",
            },
          },
          "getIntegrations": {
            "auth": true,
            "display-name": "Get integrations",
            "docs": "",
            "errors": [
              "root.BadRequestError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "headers": undefined,
                "path-parameters": undefined,
                "query-parameters": {
                  "provider": "twitter",
                },
                "request": undefined,
                "response": {
                  "body": {},
                },
              },
            ],
            "method": "GET",
            "path": "/integrations",
            "request": {
              "name": "GetIntegrationsRequest",
              "query-parameters": {
                "label": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "provider": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.IntegrationProvider>",
                },
              },
            },
            "response": {
              "docs": "List of integrations",
              "type": "root.IntegrationPaginatedResult",
            },
          },
          "updateIntegration": {
            "auth": true,
            "display-name": "Update an integration",
            "docs": "",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.UnprocessableEntityError",
            ],
            "method": "PUT",
            "path": "/integrations/{id}",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "configs": {
                    "docs": "Decrypted Key/Value object of the associated configuration for that provider",
                    "type": "optional<root.UpdateIntegrationRequestConfigs>",
                  },
                  "features": {
                    "docs": "List of features to enable (see features list above)",
                    "type": "optional<list<root.IntegrationFeature>>",
                  },
                  "label": {
                    "docs": "Label of the integration",
                    "type": "optional<string>",
                  },
                  "provider": {
                    "docs": undefined,
                    "type": "optional<root.IntegrationProvider>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateIntegrationRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "A single integration",
              "type": "root.Integration",
            },
          },
        },
      },
    },
    "issueTriggers.yml": {
      "docs": "Issue Triggers lets you setup rules that trigger issues when certain conditions are met.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Issue Triggers",
        "endpoints": {
          "createIssueTrigger": {
            "auth": true,
            "display-name": "Create an issue trigger",
            "docs": "",
            "errors": [
              "root.BadRequestError",
              "root.UnprocessableEntityError",
            ],
            "method": "POST",
            "path": "/issue-triggers",
            "request": {
              "body": {
                "properties": {
                  "channels": {
                    "docs": undefined,
                    "type": "optional<root.IssueTriggerChannels>",
                  },
                  "configs": {
                    "docs": "Configuration object for the specific issue type selected",
                    "type": "optional<root.CreateIssueTriggerRequestConfigs>",
                  },
                  "name": {
                    "docs": "Optional unique name to use as reference when using the API",
                    "type": "optional<string>",
                  },
                  "type": {
                    "docs": undefined,
                    "type": "root.IssueType",
                  },
                },
              },
              "headers": undefined,
              "name": "CreateIssueTriggerRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "A single issue trigger",
              "type": "root.IssueTrigger",
            },
          },
          "deleteIssueTrigger": {
            "auth": true,
            "display-name": "Delete an issue trigger",
            "docs": "",
            "errors": [
              "root.NotFoundError",
            ],
            "method": "DELETE",
            "path": "/issue-triggers/{id}",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "An object with deleted issue trigger's id",
              "type": "root.DeletedIssueTriggerResponse",
            },
          },
          "disableIssueTrigger": {
            "auth": true,
            "display-name": "Disable an issue trigger",
            "docs": "",
            "errors": [
              "root.NotFoundError",
            ],
            "method": "PUT",
            "path": "/issue-triggers/{id}/disable",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "A single issue trigger",
              "type": "root.IssueTrigger",
            },
          },
          "enableIssueTrigger": {
            "auth": true,
            "display-name": "Enable an issue trigger",
            "docs": "",
            "errors": [
              "root.NotFoundError",
            ],
            "method": "PUT",
            "path": "/issue-triggers/{id}/enable",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "A single issue trigger",
              "type": "root.IssueTrigger",
            },
          },
          "getIssueTrigger": {
            "auth": true,
            "display-name": "Get a single issue trigger",
            "docs": "",
            "errors": [
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/issue-triggers/{id}",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "A single issue trigger",
              "type": "root.IssueTrigger",
            },
          },
          "getIssueTriggers": {
            "auth": true,
            "display-name": "Get issue triggers",
            "docs": "",
            "errors": [
              "root.BadRequestError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "headers": undefined,
                "path-parameters": undefined,
                "query-parameters": {
                  "type": "delivery",
                },
                "request": undefined,
                "response": {
                  "body": {},
                },
              },
            ],
            "method": "GET",
            "path": "/issue-triggers",
            "request": {
              "name": "GetIssueTriggersRequest",
              "query-parameters": {
                "dir": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.GetIssueTriggersRequestDir>",
                },
                "disabled_at": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<datetime>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "name": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "next": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "order_by": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.GetIssueTriggersRequestOrderBy>",
                },
                "prev": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "type": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.IssueType>",
                },
              },
            },
            "response": {
              "docs": "List of issue triggers",
              "type": "root.IssueTriggerPaginatedResult",
            },
          },
          "updateIssueTrigger": {
            "auth": true,
            "display-name": "Update an issue trigger",
            "docs": "",
            "errors": [
              "root.BadRequestError",
              "root.UnprocessableEntityError",
            ],
            "method": "PUT",
            "path": "/issue-triggers/{id}",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "channels": {
                    "docs": undefined,
                    "type": "optional<root.IssueTriggerChannels>",
                  },
                  "configs": {
                    "docs": "Configuration object for the specific issue type selected",
                    "type": "optional<root.UpdateIssueTriggerRequestConfigs>",
                  },
                  "disabled_at": {
                    "docs": "Date when the issue trigger was disabled",
                    "type": "optional<datetime>",
                  },
                  "name": {
                    "docs": "Optional unique name to use as reference when using the API",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateIssueTriggerRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "A single issue trigger",
              "type": "root.IssueTrigger",
            },
          },
          "upsertIssueTrigger": {
            "auth": true,
            "display-name": "Create or update an issue trigger",
            "docs": "",
            "errors": [
              "root.BadRequestError",
              "root.UnprocessableEntityError",
            ],
            "method": "PUT",
            "path": "/issue-triggers",
            "request": {
              "body": {
                "properties": {
                  "channels": {
                    "docs": undefined,
                    "type": "optional<root.IssueTriggerChannels>",
                  },
                  "configs": {
                    "docs": "Configuration object for the specific issue type selected",
                    "type": "optional<root.UpsertIssueTriggerRequestConfigs>",
                  },
                  "name": {
                    "docs": "Required unique name to use as reference when using the API",
                    "type": "string",
                  },
                  "type": {
                    "docs": undefined,
                    "type": "root.IssueType",
                  },
                },
              },
              "headers": undefined,
              "name": "UpsertIssueTriggerRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "A single issue trigger",
              "type": "root.IssueTrigger",
            },
          },
        },
      },
    },
    "issues.yml": {
      "docs": "Issues lets you track problems in your workspace and communicate resolution steps with your team.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Issues",
        "endpoints": {
          "dismissIssue": {
            "auth": true,
            "display-name": "Dismiss an issue",
            "docs": "",
            "errors": [
              "root.NotFoundError",
            ],
            "method": "DELETE",
            "path": "/issues/{id}",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Dismissed issue",
              "type": "root.Issue",
            },
          },
          "getIssue": {
            "auth": true,
            "display-name": "Get a single issue",
            "docs": "",
            "errors": [
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/issues/{id}",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "A single issue",
              "type": "root.IssueWithData",
            },
          },
          "getIssueCount": {
            "auth": true,
            "display-name": "Get the number of issues",
            "docs": "",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "headers": undefined,
                "path-parameters": undefined,
                "query-parameters": undefined,
                "request": undefined,
                "response": {
                  "body": {
                    "count": 5,
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/issues/count",
            "request": {
              "name": "GetIssueCountRequest",
              "query-parameters": {
                "created_at": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<datetime>",
                },
                "dir": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.GetIssueCountRequestDir>",
                },
                "dismissed_at": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<datetime>",
                },
                "first_seen_at": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<datetime>",
                },
                "id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "issue_trigger_id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "last_seen_at": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<datetime>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "merged_with": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "next": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "order_by": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.GetIssueCountRequestOrderBy>",
                },
                "prev": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "status": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.GetIssueCountRequestStatus>",
                },
                "type": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.GetIssueCountRequestType>",
                },
              },
            },
            "response": {
              "docs": "Issue count",
              "type": "root.IssueCount",
            },
          },
          "getIssues": {
            "auth": true,
            "display-name": "Get issues",
            "docs": "",
            "errors": [
              "root.BadRequestError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "headers": undefined,
                "path-parameters": undefined,
                "query-parameters": undefined,
                "request": undefined,
                "response": {
                  "body": {},
                },
              },
            ],
            "method": "GET",
            "path": "/issues",
            "request": {
              "name": "GetIssuesRequest",
              "query-parameters": {
                "created_at": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<datetime>",
                },
                "dir": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.GetIssuesRequestDir>",
                },
                "dismissed_at": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<datetime>",
                },
                "first_seen_at": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<datetime>",
                },
                "id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "issue_trigger_id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "last_seen_at": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<datetime>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "merged_with": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "next": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "order_by": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.GetIssuesRequestOrderBy>",
                },
                "prev": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "status": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.GetIssuesRequestStatus>",
                },
                "type": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.GetIssuesRequestType>",
                },
              },
            },
            "response": {
              "docs": "List of issues",
              "type": "root.IssueWithDataPaginatedResult",
            },
          },
          "updateIssue": {
            "auth": true,
            "display-name": "Update issue",
            "docs": "",
            "errors": [
              "root.BadRequestError",
              "root.UnprocessableEntityError",
            ],
            "method": "PUT",
            "path": "/issues/{id}",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "status": {
                    "docs": "New status",
                    "type": "root.UpdateIssueRequestStatus",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateIssueRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Updated issue",
              "type": "root.Issue",
            },
          },
        },
      },
    },
    "notifications.yml": {
      "docs": "Notifications let your team receive alerts anytime an issue changes.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Notifications",
        "endpoints": {
          "toggleWebhookNotifications": {
            "auth": true,
            "display-name": "Toggle webhook notifications for the workspace",
            "docs": "",
            "errors": [],
            "method": "PUT",
            "path": "/notifications/webhooks",
            "request": {
              "body": {
                "properties": {
                  "enabled": {
                    "docs": "Enable or disable webhook notifications on the workspace",
                    "type": "optional<boolean>",
                  },
                  "source_id": {
                    "docs": "The Hookdeck Source to send the webhook to",
                    "type": "optional<string>",
                  },
                  "topics": {
                    "docs": "List of topics to send notifications for",
                    "type": "optional<list<root.TopicsValue>>",
                  },
                },
              },
              "headers": undefined,
              "name": "ToggleWebhookNotificationsRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Toggle operation status response",
              "type": "root.ToggleWebhookNotifications",
            },
          },
        },
      },
    },
    "requests.yml": {
      "docs": "A request represent a webhook received by Hookdeck.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Requests",
        "endpoints": {
          "getRequest": {
            "auth": true,
            "display-name": "Get a request",
            "docs": "",
            "errors": [
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/requests/{id}",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "A single request",
              "type": "root.Request",
            },
          },
          "getRequestEvents": {
            "auth": true,
            "display-name": "Get request events",
            "docs": "",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "headers": undefined,
                "path-parameters": {
                  "id": "id",
                },
                "query-parameters": {
                  "include": "data",
                },
                "request": undefined,
                "response": {
                  "body": {},
                },
              },
            ],
            "method": "GET",
            "path": "/requests/{id}/events",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "name": "GetRequestEventsRequest",
              "query-parameters": {
                "attempts": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "body": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "bulk_retry_id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "cli_id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "cli_user_id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "created_at": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<datetime>",
                },
                "destination_id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "dir": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.GetRequestEventsRequestDir>",
                },
                "error_code": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "event_data_id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "headers": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "include": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<literal<"data">>",
                },
                "issue_id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "last_attempt_at": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<datetime>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "next": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "order_by": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.GetRequestEventsRequestOrderBy>",
                },
                "parsed_query": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "path": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "prev": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "response_status": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "source_id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "status": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.EventStatus>",
                },
                "successful_at": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<datetime>",
                },
                "webhook_id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "List of events",
              "type": "root.EventPaginatedResult",
            },
          },
          "getRequestIgnoredEvents": {
            "auth": true,
            "display-name": "Get request ignored events",
            "docs": "",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "headers": undefined,
                "path-parameters": {
                  "id": "id",
                },
                "query-parameters": undefined,
                "request": undefined,
                "response": {
                  "body": {},
                },
              },
            ],
            "method": "GET",
            "path": "/requests/{id}/ignored_events",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "name": "GetRequestIgnoredEventsRequest",
              "query-parameters": {
                "dir": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.GetRequestIgnoredEventsRequestDir>",
                },
                "id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "next": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "order_by": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<literal<"created_at">>",
                },
                "prev": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "List of ignored events",
              "type": "root.IgnoredEventPaginatedResult",
            },
          },
          "getRequestRawBody": {
            "auth": true,
            "display-name": "Get a request raw body data",
            "docs": "",
            "errors": [
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/requests/{id}/raw_body",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "A request raw body data",
              "type": "root.RawBody",
            },
          },
          "getRequests": {
            "auth": true,
            "display-name": "Get requests",
            "docs": "",
            "errors": [
              "root.BadRequestError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "headers": undefined,
                "path-parameters": undefined,
                "query-parameters": {
                  "include": "data",
                  "status": "accepted",
                },
                "request": undefined,
                "response": {
                  "body": {},
                },
              },
            ],
            "method": "GET",
            "path": "/requests",
            "request": {
              "name": "GetRequestsRequest",
              "query-parameters": {
                "body": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "bulk_retry_id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "created_at": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<datetime>",
                },
                "dir": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.GetRequestsRequestDir>",
                },
                "events_count": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "headers": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "ignored_count": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "include": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<literal<"data">>",
                },
                "ingested_at": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<datetime>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "next": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "order_by": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.GetRequestsRequestOrderBy>",
                },
                "parsed_query": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "path": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "prev": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "rejection_cause": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.RequestRejectionCause>",
                },
                "source_id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "status": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.GetRequestsRequestStatus>",
                },
                "verified": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<boolean>",
                },
              },
            },
            "response": {
              "docs": "List of requests",
              "type": "root.RequestPaginatedResult",
            },
          },
          "retryRequest": {
            "auth": true,
            "display-name": "Retry a request",
            "docs": "",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.UnprocessableEntityError",
            ],
            "method": "POST",
            "path": "/requests/{id}/retry",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "webhook_ids": {
                    "docs": "Subset of webhook_ids to re-run the event logic on. Useful to retry only specific ignored_events",
                    "type": "list<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "RetryRequestRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Retry request operation result",
              "type": "root.RetryRequest",
            },
          },
        },
      },
    },
    "rulesets.yml": {
      "docs": "A ruleset defines a group of rules that can be used across many connections.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Rulesets",
        "endpoints": {
          "archiveRuleset": {
            "auth": true,
            "display-name": "Archive a ruleset",
            "docs": "",
            "errors": [
              "root.NotFoundError",
            ],
            "method": "PUT",
            "path": "/rulesets/{id}/archive",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "A single ruleset",
              "type": "optional<root.Ruleset>",
            },
          },
          "createRuleset": {
            "auth": true,
            "display-name": "Create a ruleset",
            "docs": "",
            "errors": [
              "root.BadRequestError",
              "root.UnprocessableEntityError",
            ],
            "method": "POST",
            "path": "/rulesets",
            "request": {
              "body": {
                "properties": {
                  "is_team_default": {
                    "docs": undefined,
                    "type": "optional<boolean>",
                  },
                  "name": {
                    "docs": "Name for the ruleset",
                    "type": "string",
                  },
                  "rules": {
                    "docs": "Array of rules to apply",
                    "type": "optional<list<root.Rule>>",
                  },
                },
              },
              "headers": undefined,
              "name": "CreateRulesetRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "A single ruleset",
              "type": "optional<root.Ruleset>",
            },
          },
          "getRuleset": {
            "auth": true,
            "display-name": "Get a ruleset",
            "docs": "",
            "errors": [
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/rulesets/{id}",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "A single ruleset",
              "type": "optional<root.Ruleset>",
            },
          },
          "getRulesets": {
            "auth": true,
            "display-name": "Get rulesets",
            "docs": "",
            "errors": [
              "root.BadRequestError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "headers": undefined,
                "path-parameters": undefined,
                "query-parameters": undefined,
                "request": undefined,
                "response": {
                  "body": {},
                },
              },
            ],
            "method": "GET",
            "path": "/rulesets",
            "request": {
              "name": "GetRulesetsRequest",
              "query-parameters": {
                "archived": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<boolean>",
                },
                "archived_at": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<datetime>",
                },
                "dir": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.GetRulesetsRequestDir>",
                },
                "id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "name": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "next": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "order_by": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<literal<"created_at">>",
                },
                "prev": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "List of rulesets",
              "type": "root.RulesetPaginatedResult",
            },
          },
          "unarchiveRuleset": {
            "auth": true,
            "display-name": "Unarchive a ruleset",
            "docs": "",
            "errors": [
              "root.NotFoundError",
            ],
            "method": "PUT",
            "path": "/rulesets/{id}/unarchive",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "A single ruleset",
              "type": "optional<root.Ruleset>",
            },
          },
          "updateRuleset": {
            "auth": true,
            "display-name": "Update a ruleset",
            "docs": "",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.UnprocessableEntityError",
            ],
            "method": "PUT",
            "path": "/rulesets/{id}",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "archived_at": {
                    "docs": "Date the ruleset was archived",
                    "type": "optional<datetime>",
                  },
                  "is_team_default": {
                    "docs": undefined,
                    "type": "optional<boolean>",
                  },
                  "name": {
                    "docs": "Name for the ruleset",
                    "type": "optional<string>",
                  },
                  "rules": {
                    "docs": "Array of rules to apply",
                    "type": "optional<list<root.Rule>>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateRulesetRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "A single ruleset",
              "type": "optional<root.Ruleset>",
            },
          },
          "upsertRuleset": {
            "auth": true,
            "display-name": "Update or create a ruleset",
            "docs": "",
            "errors": [
              "root.BadRequestError",
              "root.UnprocessableEntityError",
            ],
            "method": "PUT",
            "path": "/rulesets",
            "request": {
              "body": {
                "properties": {
                  "is_team_default": {
                    "docs": undefined,
                    "type": "optional<boolean>",
                  },
                  "name": {
                    "docs": "Name for the ruleset",
                    "type": "string",
                  },
                  "rules": {
                    "docs": "Array of rules to apply",
                    "type": "optional<list<root.Rule>>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpsertRulesetRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "A single ruleset",
              "type": "optional<root.Ruleset>",
            },
          },
        },
      },
    },
    "sources.yml": {
      "docs": "A source represents any third party that sends webhooks to Hookdeck.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Sources",
        "endpoints": {
          "archiveSource": {
            "auth": true,
            "display-name": "Archive a source",
            "docs": "",
            "errors": [
              "root.NotFoundError",
            ],
            "method": "PUT",
            "path": "/sources/{id}/archive",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "A single source",
              "type": "root.Source",
            },
          },
          "createSource": {
            "auth": true,
            "display-name": "Create a source",
            "docs": "",
            "errors": [
              "root.BadRequestError",
              "root.UnprocessableEntityError",
            ],
            "method": "POST",
            "path": "/sources",
            "request": {
              "body": {
                "properties": {
                  "name": {
                    "docs": "A unique name for the source",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "CreateSourceRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "A single source",
              "type": "root.Source",
            },
          },
          "getSource": {
            "auth": true,
            "display-name": "Get a source",
            "docs": "",
            "errors": [
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/sources/{id}",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "A single source",
              "type": "root.Source",
            },
          },
          "getSources": {
            "auth": true,
            "display-name": "Get sources",
            "docs": "",
            "errors": [
              "root.BadRequestError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "headers": undefined,
                "path-parameters": undefined,
                "query-parameters": undefined,
                "request": undefined,
                "response": {
                  "body": {},
                },
              },
            ],
            "method": "GET",
            "path": "/sources",
            "request": {
              "name": "GetSourcesRequest",
              "query-parameters": {
                "archived": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<boolean>",
                },
                "archived_at": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<datetime>",
                },
                "dir": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.GetSourcesRequestDir>",
                },
                "id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "integration_id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "name": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "next": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "order_by": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<literal<"created_at">>",
                },
                "prev": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "List of sources",
              "type": "root.SourcePaginatedResult",
            },
          },
          "unarchiveSource": {
            "auth": true,
            "display-name": "Unarchive a source",
            "docs": "",
            "errors": [
              "root.NotFoundError",
            ],
            "method": "PUT",
            "path": "/sources/{id}/unarchive",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "A single source",
              "type": "root.Source",
            },
          },
          "updateSource": {
            "auth": true,
            "display-name": "Update a source",
            "docs": "",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.UnprocessableEntityError",
            ],
            "method": "PUT",
            "path": "/sources/{id}",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "archived_at": {
                    "docs": "Date the source was archived",
                    "type": "optional<datetime>",
                  },
                  "name": {
                    "docs": "A unique name for the source",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateSourceRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "A single source",
              "type": "root.Source",
            },
          },
          "upsertSource": {
            "auth": true,
            "display-name": "Update or create a source",
            "docs": "",
            "errors": [
              "root.BadRequestError",
              "root.UnprocessableEntityError",
            ],
            "method": "PUT",
            "path": "/sources",
            "request": {
              "body": {
                "properties": {
                  "name": {
                    "docs": "A unique name for the source",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "UpsertSourceRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "A single source",
              "type": "root.Source",
            },
          },
        },
      },
    },
    "transformations.yml": {
      "docs": "A transformation represents JavaScript code that will be executed on a connection's requests. Transformations are applied to connections using Rules.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Transformations",
        "endpoints": {
          "createTransformation": {
            "auth": true,
            "display-name": "Create a transformation",
            "docs": "",
            "errors": [
              "root.BadRequestError",
              "root.UnprocessableEntityError",
            ],
            "method": "POST",
            "path": "/transformations",
            "request": {
              "body": {
                "properties": {
                  "code": {
                    "docs": "JavaScript code to be executed",
                    "type": "string",
                  },
                  "env": {
                    "docs": "Key-value environment variables to be passed to the transformation",
                    "type": "optional<map<string, root.CreateTransformationRequestEnvValue>>",
                  },
                  "name": {
                    "docs": "A unique, human-friendly name for the transformation",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "CreateTransformationRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "A single transformation",
              "type": "root.Transformation",
            },
          },
          "getTransformation": {
            "auth": true,
            "display-name": "Get a transformation",
            "docs": "",
            "errors": [
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/transformations/{id}",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "A single transformation",
              "type": "root.Transformation",
            },
          },
          "getTransformationExecution": {
            "auth": true,
            "display-name": "Get a transformation execution",
            "docs": "",
            "errors": [
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/transformations/{id}/executions/{execution_id}",
            "path-parameters": {
              "execution_id": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "A single transformation execution",
              "type": "root.TransformationExecution",
            },
          },
          "getTransformationExecutions": {
            "auth": true,
            "display-name": "Get transformation executions",
            "docs": "",
            "errors": [
              "root.BadRequestError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "headers": undefined,
                "path-parameters": {
                  "id": "id",
                },
                "query-parameters": undefined,
                "request": undefined,
                "response": {
                  "body": {},
                },
              },
            ],
            "method": "GET",
            "path": "/transformations/{id}/executions",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "name": "GetTransformationExecutionsRequest",
              "query-parameters": {
                "created_at": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<datetime>",
                },
                "dir": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.GetTransformationExecutionsRequestDir>",
                },
                "issue_id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "log_level": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.GetTransformationExecutionsRequestLogLevel>",
                },
                "next": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "order_by": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<literal<"created_at">>",
                },
                "prev": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "webhook_id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "List of transformation executions",
              "type": "root.TransformationExecutionPaginatedResult",
            },
          },
          "getTransformations": {
            "auth": true,
            "display-name": "Get transformations",
            "docs": "",
            "errors": [
              "root.BadRequestError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "headers": undefined,
                "path-parameters": undefined,
                "query-parameters": undefined,
                "request": undefined,
                "response": {
                  "body": {},
                },
              },
            ],
            "method": "GET",
            "path": "/transformations",
            "request": {
              "name": "GetTransformationsRequest",
              "query-parameters": {
                "dir": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.GetTransformationsRequestDir>",
                },
                "id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "name": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "next": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "order_by": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<literal<"created_at">>",
                },
                "prev": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "List of transformations",
              "type": "root.TransformationPaginatedResult",
            },
          },
          "testTransformation": {
            "auth": true,
            "display-name": "Test a transformation code",
            "docs": "",
            "errors": [
              "root.BadRequestError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "headers": undefined,
                "path-parameters": undefined,
                "query-parameters": undefined,
                "request": {
                  "request": {
                    "headers": {},
                  },
                },
                "response": {
                  "body": {
                    "log_level": "debug",
                  },
                },
              },
            ],
            "method": "PUT",
            "path": "/transformations/run",
            "request": {
              "body": {
                "properties": {
                  "code": {
                    "docs": "JavaScript code to be executed",
                    "type": "optional<string>",
                  },
                  "env": {
                    "docs": "Key-value environment variables to be passed to the transformation",
                    "type": "optional<root.TestTransformationRequestEnv>",
                  },
                  "event_id": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                  "request": {
                    "docs": "Request input to use for the transformation execution",
                    "type": "optional<root.TestTransformationRequestRequest>",
                  },
                  "transformation_id": {
                    "docs": "Transformation ID",
                    "type": "optional<string>",
                  },
                  "webhook_id": {
                    "docs": "ID of the connection to use for the execution \`context\`",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "TestTransformationRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Transformation run output",
              "type": "root.TransformationExecutorOutput",
            },
          },
          "updateTransformation": {
            "auth": true,
            "display-name": "Update a transformation",
            "docs": "",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.UnprocessableEntityError",
            ],
            "method": "PUT",
            "path": "/transformations/{id}",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "code": {
                    "docs": "JavaScript code to be executed",
                    "type": "optional<string>",
                  },
                  "env": {
                    "docs": "Key-value environment variables to be passed to the transformation",
                    "type": "optional<map<string, root.UpdateTransformationRequestEnvValue>>",
                  },
                  "name": {
                    "docs": "A unique, human-friendly name for the transformation",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateTransformationRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "A single transformation",
              "type": "root.Transformation",
            },
          },
          "upsertTransformation": {
            "auth": true,
            "display-name": "Update or create a transformation",
            "docs": "",
            "errors": [
              "root.BadRequestError",
              "root.UnprocessableEntityError",
            ],
            "method": "PUT",
            "path": "/transformations",
            "request": {
              "body": {
                "properties": {
                  "code": {
                    "docs": "JavaScript code to be executed",
                    "type": "string",
                  },
                  "env": {
                    "docs": "Key-value environment variables to be passed to the transformation",
                    "type": "optional<map<string, root.UpsertTransformationRequestEnvValue>>",
                  },
                  "name": {
                    "docs": "A unique, human-friendly name for the transformation",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "UpsertTransformationRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "A single transformation",
              "type": "root.Transformation",
            },
          },
        },
      },
    },
  },
  "packageMarkerFile": {
    "errors": {
      "BadRequestError": {
        "status-code": 400,
        "type": "ApiErrorResponse",
      },
      "NotFoundError": {
        "status-code": 404,
        "type": "ApiErrorResponse",
      },
      "UnprocessableEntityError": {
        "status-code": 422,
        "type": "ApiErrorResponse",
      },
    },
    "navigation": [],
    "service": undefined,
    "types": {
      "AlertRule": {
        "docs": undefined,
        "properties": {
          "strategy": {
            "docs": undefined,
            "type": "AlertStrategy",
          },
          "type": "literal<"alert">",
        },
      },
      "AlertStrategy": {
        "docs": "Alert strategy to use",
        "enum": [
          {
            "docs": undefined,
            "name": "each_attempt",
            "value": "each_attempt",
          },
          {
            "docs": undefined,
            "name": "last_attempt",
            "value": "last_attempt",
          },
        ],
      },
      "ApiErrorResponse": {
        "docs": "Error response model",
        "properties": {
          "code": {
            "docs": "Error code",
            "type": "string",
          },
          "data": {
            "docs": undefined,
            "type": "optional<ApiErrorResponseData>",
          },
          "message": {
            "docs": "Error description",
            "type": "string",
          },
          "status": {
            "docs": "Status code",
            "type": "double",
          },
        },
      },
      "ApiErrorResponseData": {
        "docs": undefined,
        "properties": {},
      },
      "ApiKeyIntegrationConfigs": {
        "docs": undefined,
        "properties": {
          "api_key": "string",
          "header_key": "string",
        },
      },
      "AttachedIntegrationToSource": {
        "docs": undefined,
        "properties": {
          "success": "boolean",
        },
      },
      "AttemptErrorCodes": {
        "docs": "Attempt could not complete because of an error",
        "enum": [
          {
            "docs": undefined,
            "name": "TIMEOUT",
            "value": "TIMEOUT",
          },
          {
            "docs": undefined,
            "name": "NOT_FOUND",
            "value": "NOT_FOUND",
          },
          {
            "docs": undefined,
            "name": "CONNECTION_REFUSED",
            "value": "CONNECTION_REFUSED",
          },
          {
            "docs": undefined,
            "name": "CONNECTION_RESET",
            "value": "CONNECTION_RESET",
          },
          {
            "docs": undefined,
            "name": "MISSING_URL",
            "value": "MISSING_URL",
          },
          {
            "docs": undefined,
            "name": "CLI",
            "value": "CLI",
          },
          {
            "docs": undefined,
            "name": "CLI_UNAVAILABLE",
            "value": "CLI_UNAVAILABLE",
          },
          {
            "docs": undefined,
            "name": "SELF_SIGNED_CERT",
            "value": "SELF_SIGNED_CERT",
          },
          {
            "docs": undefined,
            "name": "ERR_TLS_CERT_ALTNAME_INVALID",
            "value": "ERR_TLS_CERT_ALTNAME_INVALID",
          },
          {
            "docs": undefined,
            "name": "SSL_ERROR_CA_UNKNOWN",
            "value": "SSL_ERROR_CA_UNKNOWN",
          },
          {
            "docs": undefined,
            "name": "TTL_EXPIRED",
            "value": "TTL_EXPIRED",
          },
          {
            "docs": undefined,
            "name": "DATA_ARCHIVED",
            "value": "DATA_ARCHIVED",
          },
          {
            "docs": undefined,
            "name": "SSL_CERT_EXPIRED",
            "value": "SSL_CERT_EXPIRED",
          },
          {
            "docs": undefined,
            "name": "BULK_RETRY_CANCELLED",
            "value": "BULK_RETRY_CANCELLED",
          },
          {
            "docs": undefined,
            "name": "DNS_LOOKUP_FAILED",
            "value": "DNS_LOOKUP_FAILED",
          },
          {
            "docs": undefined,
            "name": "HOST_UNREACHABLE",
            "value": "HOST_UNREACHABLE",
          },
          {
            "docs": undefined,
            "name": "PROTOCOL_ERROR",
            "value": "PROTOCOL_ERROR",
          },
          {
            "docs": undefined,
            "name": "SOCKET_CLOSED",
            "value": "SOCKET_CLOSED",
          },
          {
            "docs": undefined,
            "name": "UNKNOWN",
            "value": "UNKNOWN",
          },
        ],
      },
      "AttemptState": {
        "docs": undefined,
        "enum": [
          {
            "docs": undefined,
            "name": "DELIVERING",
            "value": "DELIVERING",
          },
          {
            "docs": undefined,
            "name": "QUEUED",
            "value": "QUEUED",
          },
          {
            "docs": undefined,
            "name": "PENDING",
            "value": "PENDING",
          },
          {
            "docs": undefined,
            "name": "COMPLETED",
            "value": "COMPLETED",
          },
          {
            "docs": undefined,
            "name": "HOLD",
            "value": "HOLD",
          },
        ],
      },
      "AttemptStatus": {
        "docs": "Attempt status",
        "enum": [
          {
            "docs": undefined,
            "name": "QUEUED",
            "value": "QUEUED",
          },
          {
            "docs": undefined,
            "name": "FAILED",
            "value": "FAILED",
          },
          {
            "docs": undefined,
            "name": "SUCCESSFUL",
            "value": "SUCCESSFUL",
          },
          {
            "docs": undefined,
            "name": "HOLD",
            "value": "HOLD",
          },
        ],
      },
      "AttemptTrigger": {
        "docs": "How the attempt was triggered",
        "enum": [
          {
            "docs": undefined,
            "name": "INITIAL",
            "value": "INITIAL",
          },
          {
            "docs": undefined,
            "name": "MANUAL",
            "value": "MANUAL",
          },
          {
            "docs": undefined,
            "name": "BULK_RETRY",
            "value": "BULK_RETRY",
          },
          {
            "docs": undefined,
            "name": "UNPAUSE",
            "value": "UNPAUSE",
          },
          {
            "docs": undefined,
            "name": "AUTOMATIC",
            "value": "AUTOMATIC",
          },
        ],
      },
      "BasicAuthIntegrationConfigs": {
        "docs": undefined,
        "properties": {
          "name": "string",
          "password": "string",
        },
      },
      "BatchOperation": {
        "docs": undefined,
        "properties": {
          "cancelled_at": {
            "docs": "Date the bulk retry was cancelled",
            "type": "optional<datetime>",
          },
          "completed_at": {
            "docs": "Date the bulk retry was completed",
            "type": "optional<datetime>",
          },
          "completed_count": {
            "docs": "Number of events that were successfully delivered",
            "type": "optional<integer>",
          },
          "created_at": {
            "docs": "Date the bulk retry was created",
            "type": "datetime",
          },
          "estimated_batch": {
            "docs": "Number of batches required to complete the bulk retry",
            "type": "optional<integer>",
          },
          "estimated_count": {
            "docs": "Number of estimated events to be retried",
            "type": "optional<integer>",
          },
          "failed_count": {
            "docs": "Number of events that failed to be delivered",
            "type": "optional<integer>",
          },
          "id": {
            "docs": "ID of the bulk retry",
            "type": "string",
          },
          "in_progress": {
            "docs": "Indicates if the bulk retry is currently in progress",
            "type": "boolean",
          },
          "number": {
            "docs": undefined,
            "type": "optional<double>",
          },
          "processed_batch": {
            "docs": "Number of batches currently processed",
            "type": "optional<integer>",
          },
          "progress": {
            "docs": "Progression of the batch operations, values 0 - 1",
            "type": "optional<double>",
          },
          "query": {
            "docs": "Query object to filter records",
            "type": "optional<BatchOperationQuery>",
          },
          "team_id": {
            "docs": "ID of the workspace",
            "type": "string",
          },
          "updated_at": {
            "docs": "Last time the bulk retry was updated",
            "type": "datetime",
          },
        },
      },
      "BatchOperationPaginatedResult": {
        "docs": undefined,
        "properties": {
          "count": {
            "docs": undefined,
            "type": "optional<integer>",
          },
          "models": {
            "docs": undefined,
            "type": "optional<list<BatchOperation>>",
          },
          "pagination": {
            "docs": undefined,
            "type": "optional<SeekPagination>",
          },
        },
      },
      "BatchOperationPlan": {
        "docs": undefined,
        "properties": {
          "estimated_batch": {
            "docs": "Number of batches required to complete the bulk retry",
            "type": "optional<integer>",
          },
          "estimated_count": {
            "docs": "Number of estimated events to be retried",
            "type": "optional<integer>",
          },
          "progress": {
            "docs": "Progression of the batch operations, values 0 - 1",
            "type": "optional<double>",
          },
        },
      },
      "BatchOperationQuery": {
        "discriminated": false,
        "docs": "Query object to filter records",
        "union": [
          {
            "docs": undefined,
            "type": "map<string, unknown>",
          },
          {
            "docs": undefined,
            "type": "optional<string>",
          },
        ],
      },
      "Bookmark": {
        "docs": undefined,
        "properties": {
          "alias": {
            "docs": "Alternate alias for the bookmark",
            "type": "optional<string>",
          },
          "created_at": {
            "docs": "Date the bookmark was created",
            "type": "datetime",
          },
          "data": {
            "docs": undefined,
            "type": "optional<ShortEventData>",
          },
          "event_data_id": {
            "docs": "ID of the bookmarked event data",
            "type": "string",
          },
          "id": {
            "docs": "ID of the bookmark",
            "type": "string",
          },
          "label": {
            "docs": "Descriptive name of the bookmark",
            "type": "string",
          },
          "last_used_at": {
            "docs": "Date the bookmark was last manually triggered",
            "type": "optional<datetime>",
          },
          "team_id": {
            "docs": "ID of the workspace",
            "type": "string",
          },
          "updated_at": {
            "docs": "Date the bookmark was last updated",
            "type": "datetime",
          },
          "webhook_id": {
            "docs": "ID of the associated connection",
            "type": "string",
          },
        },
      },
      "BookmarkPaginatedResult": {
        "docs": undefined,
        "properties": {
          "count": {
            "docs": undefined,
            "type": "optional<integer>",
          },
          "models": {
            "docs": undefined,
            "type": "optional<list<Bookmark>>",
          },
          "pagination": {
            "docs": undefined,
            "type": "optional<SeekPagination>",
          },
        },
      },
      "Connection": {
        "docs": undefined,
        "properties": {
          "archived_at": {
            "docs": "Date the connection was archived",
            "type": "optional<datetime>",
          },
          "created_at": {
            "docs": "Date the connection was created",
            "type": "datetime",
          },
          "destination": {
            "docs": undefined,
            "type": "Destination",
          },
          "id": {
            "docs": "ID of the connection",
            "type": "string",
          },
          "name": {
            "docs": "Unique name of the connection for this source",
            "type": "string",
          },
          "paused_at": {
            "docs": "Date the connection was paused",
            "type": "optional<datetime>",
          },
          "resolved_rules": {
            "docs": "Array of rules applied to connection after factoring for the ruleset",
            "type": "optional<list<Rule>>",
          },
          "rules": {
            "docs": "Array of rules configured on the connection",
            "type": "optional<list<Rule>>",
          },
          "ruleset": {
            "docs": undefined,
            "type": "optional<Ruleset>",
          },
          "source": {
            "docs": undefined,
            "type": "Source",
          },
          "team_id": {
            "docs": "ID of the workspace",
            "type": "string",
          },
          "updated_at": {
            "docs": "Date the connection was last updated",
            "type": "datetime",
          },
        },
      },
      "ConnectionFilterProperty": {
        "discriminated": false,
        "docs": "JSON using our filter syntax to filter on request headers",
        "union": [
          {
            "docs": undefined,
            "type": "optional<string>",
          },
          "double",
          "boolean",
          {
            "docs": undefined,
            "type": "ConnectionFilterPropertyThree",
          },
        ],
      },
      "ConnectionFilterPropertyThree": {
        "docs": undefined,
        "properties": {},
      },
      "ConnectionPaginatedResult": {
        "docs": undefined,
        "properties": {
          "count": {
            "docs": undefined,
            "type": "optional<integer>",
          },
          "models": {
            "docs": undefined,
            "type": "optional<list<Connection>>",
          },
          "pagination": {
            "docs": undefined,
            "type": "optional<SeekPagination>",
          },
        },
      },
      "ConsoleLine": {
        "docs": undefined,
        "properties": {
          "message": "string",
          "type": {
            "docs": undefined,
            "type": "ConsoleLineType",
          },
        },
      },
      "ConsoleLineType": {
        "docs": undefined,
        "enum": [
          {
            "docs": undefined,
            "name": "error",
            "value": "error",
          },
          {
            "docs": undefined,
            "name": "log",
            "value": "log",
          },
          {
            "docs": undefined,
            "name": "warn",
            "value": "warn",
          },
          {
            "docs": undefined,
            "name": "info",
            "value": "info",
          },
          {
            "docs": undefined,
            "name": "debug",
            "value": "debug",
          },
        ],
      },
      "CreateConnectionRequestDestination": {
        "docs": "Destination input object",
        "properties": {
          "cli_path": {
            "docs": "Path for the CLI destination",
            "type": "optional<string>",
          },
          "name": {
            "docs": "Name for the destination",
            "type": "string",
          },
          "path_forwarding_disabled": {
            "docs": undefined,
            "type": "optional<boolean>",
          },
          "rate_limit": {
            "docs": "Limit event attempts to receive per period",
            "type": "optional<integer>",
          },
          "rate_limit_period": {
            "docs": "Period to rate limit attempts",
            "type": "optional<CreateConnectionRequestDestinationRateLimitPeriod>",
          },
          "url": {
            "docs": "Endpoint of the destination",
            "type": "optional<string>",
          },
        },
      },
      "CreateConnectionRequestDestinationRateLimitPeriod": {
        "docs": "Period to rate limit attempts",
        "enum": [
          {
            "docs": undefined,
            "name": "second",
            "value": "second",
          },
          {
            "docs": undefined,
            "name": "minute",
            "value": "minute",
          },
          {
            "docs": undefined,
            "name": "hour",
            "value": "hour",
          },
        ],
      },
      "CreateConnectionRequestRuleset": {
        "docs": "Ruleset input object",
        "properties": {
          "is_team_default": {
            "docs": undefined,
            "type": "optional<boolean>",
          },
          "name": {
            "docs": "Name for the ruleset",
            "type": "string",
          },
          "rules": {
            "docs": "Array of rules to apply",
            "type": "optional<list<Rule>>",
          },
        },
      },
      "CreateConnectionRequestSource": {
        "docs": "Source input object",
        "properties": {
          "name": {
            "docs": "A unique name for the source",
            "type": "string",
          },
        },
      },
      "CreateDestinationRequestRateLimitPeriod": {
        "docs": "Period to rate limit attempts",
        "enum": [
          {
            "docs": undefined,
            "name": "second",
            "value": "second",
          },
          {
            "docs": undefined,
            "name": "minute",
            "value": "minute",
          },
          {
            "docs": undefined,
            "name": "hour",
            "value": "hour",
          },
        ],
      },
      "CreateEventBulkRetryRequestQuery": {
        "docs": "Filter properties for the events to be included in the bulk retry",
        "properties": {
          "attempts": {
            "docs": "Filter by number of attempts",
            "type": "optional<CreateEventBulkRetryRequestQueryAttempts>",
          },
          "body": {
            "docs": "URL Encoded string of the JSON to match to the data body",
            "type": "optional<CreateEventBulkRetryRequestQueryBody>",
          },
          "bulk_retry_id": {
            "docs": undefined,
            "type": "optional<CreateEventBulkRetryRequestQueryBulkRetryId>",
          },
          "cli_id": {
            "docs": "Filter by CLI IDs. \`?[any]=true\` operator for any CLI.",
            "type": "optional<CreateEventBulkRetryRequestQueryCliId>",
          },
          "cli_user_id": {
            "docs": undefined,
            "type": "optional<CreateEventBulkRetryRequestQueryCliUserId>",
          },
          "created_at": {
            "docs": "Filter by \`created_at\` date using a date operator",
            "type": "optional<CreateEventBulkRetryRequestQueryCreatedAt>",
          },
          "destination_id": {
            "docs": "Filter by destination IDs",
            "type": "optional<CreateEventBulkRetryRequestQueryDestinationId>",
          },
          "error_code": {
            "docs": undefined,
            "type": "optional<CreateEventBulkRetryRequestQueryErrorCode>",
          },
          "event_data_id": {
            "docs": undefined,
            "type": "optional<CreateEventBulkRetryRequestQueryEventDataId>",
          },
          "headers": {
            "docs": "URL Encoded string of the JSON to match to the data headers",
            "type": "optional<CreateEventBulkRetryRequestQueryHeaders>",
          },
          "id": {
            "docs": "Filter by event IDs",
            "type": "optional<CreateEventBulkRetryRequestQueryId>",
          },
          "issue_id": {
            "docs": undefined,
            "type": "optional<CreateEventBulkRetryRequestQueryIssueId>",
          },
          "last_attempt_at": {
            "docs": "Filter by \`last_attempt_at\` date using a date operator",
            "type": "optional<CreateEventBulkRetryRequestQueryLastAttemptAt>",
          },
          "parsed_query": {
            "docs": "URL Encoded string of the JSON to match to the parsed query (JSON representation of the query)",
            "type": "optional<CreateEventBulkRetryRequestQueryParsedQuery>",
          },
          "path": {
            "docs": "URL Encoded string of the string to match partially to the path",
            "type": "optional<string>",
          },
          "response_status": {
            "docs": "Filter by HTTP response status code",
            "type": "optional<CreateEventBulkRetryRequestQueryResponseStatus>",
          },
          "source_id": {
            "docs": "Filter by source IDs",
            "type": "optional<CreateEventBulkRetryRequestQuerySourceId>",
          },
          "status": {
            "docs": "Lifecyle status of the event",
            "type": "optional<CreateEventBulkRetryRequestQueryStatus>",
          },
          "successful_at": {
            "docs": "Filter by \`successful_at\` date using a date operator",
            "type": "optional<CreateEventBulkRetryRequestQuerySuccessfulAt>",
          },
          "webhook_id": {
            "docs": "Filter by webhook connection IDs",
            "type": "optional<CreateEventBulkRetryRequestQueryWebhookId>",
          },
        },
      },
      "CreateEventBulkRetryRequestQueryAttempts": {
        "discriminated": false,
        "docs": "Filter by number of attempts",
        "union": [
          "integer",
          {
            "docs": undefined,
            "type": "CreateEventBulkRetryRequestQueryAttemptsAny",
          },
        ],
      },
      "CreateEventBulkRetryRequestQueryAttemptsAny": {
        "docs": undefined,
        "properties": {
          "any": {
            "docs": undefined,
            "type": "optional<boolean>",
          },
          "contains": {
            "docs": undefined,
            "type": "optional<integer>",
          },
          "gt": {
            "docs": undefined,
            "type": "optional<integer>",
          },
          "gte": {
            "docs": undefined,
            "type": "optional<integer>",
          },
          "le": {
            "docs": undefined,
            "type": "optional<integer>",
          },
          "lte": {
            "docs": undefined,
            "type": "optional<integer>",
          },
        },
      },
      "CreateEventBulkRetryRequestQueryBody": {
        "discriminated": false,
        "docs": "URL Encoded string of the JSON to match to the data body",
        "union": [
          "string",
          {
            "docs": undefined,
            "type": "CreateEventBulkRetryRequestQueryBodyOne",
          },
        ],
      },
      "CreateEventBulkRetryRequestQueryBodyOne": {
        "docs": undefined,
        "properties": {},
      },
      "CreateEventBulkRetryRequestQueryBulkRetryId": {
        "discriminated": false,
        "docs": undefined,
        "union": [
          "string",
          {
            "docs": undefined,
            "type": "list<string>",
          },
        ],
      },
      "CreateEventBulkRetryRequestQueryCliId": {
        "discriminated": false,
        "docs": "Filter by CLI IDs. \`?[any]=true\` operator for any CLI.",
        "union": [
          "string",
          {
            "docs": undefined,
            "type": "CreateEventBulkRetryRequestQueryCliIdAny",
          },
          {
            "docs": undefined,
            "type": "list<string>",
          },
        ],
      },
      "CreateEventBulkRetryRequestQueryCliIdAny": {
        "docs": undefined,
        "properties": {
          "any": {
            "docs": undefined,
            "type": "optional<boolean>",
          },
        },
      },
      "CreateEventBulkRetryRequestQueryCliUserId": {
        "discriminated": false,
        "docs": undefined,
        "union": [
          "string",
          {
            "docs": undefined,
            "type": "list<string>",
          },
        ],
      },
      "CreateEventBulkRetryRequestQueryCreatedAt": {
        "discriminated": false,
        "docs": "Filter by \`created_at\` date using a date operator",
        "union": [
          "datetime",
          {
            "docs": undefined,
            "type": "CreateEventBulkRetryRequestQueryCreatedAtAny",
          },
        ],
      },
      "CreateEventBulkRetryRequestQueryCreatedAtAny": {
        "docs": undefined,
        "properties": {
          "any": {
            "docs": undefined,
            "type": "optional<boolean>",
          },
          "gt": {
            "docs": undefined,
            "type": "optional<datetime>",
          },
          "gte": {
            "docs": undefined,
            "type": "optional<datetime>",
          },
          "le": {
            "docs": undefined,
            "type": "optional<datetime>",
          },
          "lte": {
            "docs": undefined,
            "type": "optional<datetime>",
          },
        },
      },
      "CreateEventBulkRetryRequestQueryDestinationId": {
        "discriminated": false,
        "docs": "Filter by destination IDs",
        "union": [
          {
            "docs": "Destination ID",
            "type": "string",
          },
          {
            "docs": undefined,
            "type": "list<string>",
          },
        ],
      },
      "CreateEventBulkRetryRequestQueryErrorCode": {
        "discriminated": false,
        "docs": undefined,
        "union": [
          "string",
          {
            "docs": undefined,
            "type": "list<string>",
          },
        ],
      },
      "CreateEventBulkRetryRequestQueryEventDataId": {
        "discriminated": false,
        "docs": undefined,
        "union": [
          "string",
          {
            "docs": undefined,
            "type": "list<string>",
          },
        ],
      },
      "CreateEventBulkRetryRequestQueryHeaders": {
        "discriminated": false,
        "docs": "URL Encoded string of the JSON to match to the data headers",
        "union": [
          "string",
          {
            "docs": undefined,
            "type": "CreateEventBulkRetryRequestQueryHeadersOne",
          },
        ],
      },
      "CreateEventBulkRetryRequestQueryHeadersOne": {
        "docs": undefined,
        "properties": {},
      },
      "CreateEventBulkRetryRequestQueryId": {
        "discriminated": false,
        "docs": "Filter by event IDs",
        "union": [
          {
            "docs": "Event ID",
            "type": "string",
          },
          {
            "docs": undefined,
            "type": "list<string>",
          },
        ],
      },
      "CreateEventBulkRetryRequestQueryIssueId": {
        "discriminated": false,
        "docs": undefined,
        "union": [
          "string",
          {
            "docs": undefined,
            "type": "list<string>",
          },
        ],
      },
      "CreateEventBulkRetryRequestQueryLastAttemptAt": {
        "discriminated": false,
        "docs": "Filter by \`last_attempt_at\` date using a date operator",
        "union": [
          "datetime",
          {
            "docs": undefined,
            "type": "CreateEventBulkRetryRequestQueryLastAttemptAtAny",
          },
        ],
      },
      "CreateEventBulkRetryRequestQueryLastAttemptAtAny": {
        "docs": undefined,
        "properties": {
          "any": {
            "docs": undefined,
            "type": "optional<boolean>",
          },
          "gt": {
            "docs": undefined,
            "type": "optional<datetime>",
          },
          "gte": {
            "docs": undefined,
            "type": "optional<datetime>",
          },
          "le": {
            "docs": undefined,
            "type": "optional<datetime>",
          },
          "lte": {
            "docs": undefined,
            "type": "optional<datetime>",
          },
        },
      },
      "CreateEventBulkRetryRequestQueryParsedQuery": {
        "discriminated": false,
        "docs": "URL Encoded string of the JSON to match to the parsed query (JSON representation of the query)",
        "union": [
          "string",
          {
            "docs": undefined,
            "type": "CreateEventBulkRetryRequestQueryParsedQueryOne",
          },
        ],
      },
      "CreateEventBulkRetryRequestQueryParsedQueryOne": {
        "docs": undefined,
        "properties": {},
      },
      "CreateEventBulkRetryRequestQueryResponseStatus": {
        "discriminated": false,
        "docs": "Filter by HTTP response status code",
        "union": [
          "integer",
          {
            "docs": undefined,
            "type": "CreateEventBulkRetryRequestQueryResponseStatusAny",
          },
          {
            "docs": undefined,
            "type": "list<integer>",
          },
        ],
      },
      "CreateEventBulkRetryRequestQueryResponseStatusAny": {
        "docs": undefined,
        "properties": {
          "any": {
            "docs": undefined,
            "type": "optional<boolean>",
          },
          "contains": {
            "docs": undefined,
            "type": "optional<integer>",
          },
          "gt": {
            "docs": undefined,
            "type": "optional<integer>",
          },
          "gte": {
            "docs": undefined,
            "type": "optional<integer>",
          },
          "le": {
            "docs": undefined,
            "type": "optional<integer>",
          },
          "lte": {
            "docs": undefined,
            "type": "optional<integer>",
          },
        },
      },
      "CreateEventBulkRetryRequestQuerySourceId": {
        "discriminated": false,
        "docs": "Filter by source IDs",
        "union": [
          {
            "docs": "Source ID",
            "type": "string",
          },
          {
            "docs": undefined,
            "type": "list<string>",
          },
        ],
      },
      "CreateEventBulkRetryRequestQueryStatus": {
        "discriminated": false,
        "docs": "Lifecyle status of the event",
        "union": [
          {
            "docs": undefined,
            "type": "EventStatus",
          },
          {
            "docs": undefined,
            "type": "list<EventStatus>",
          },
        ],
      },
      "CreateEventBulkRetryRequestQuerySuccessfulAt": {
        "discriminated": false,
        "docs": "Filter by \`successful_at\` date using a date operator",
        "union": [
          "datetime",
          {
            "docs": undefined,
            "type": "CreateEventBulkRetryRequestQuerySuccessfulAtAny",
          },
        ],
      },
      "CreateEventBulkRetryRequestQuerySuccessfulAtAny": {
        "docs": undefined,
        "properties": {
          "any": {
            "docs": undefined,
            "type": "optional<boolean>",
          },
          "gt": {
            "docs": undefined,
            "type": "optional<datetime>",
          },
          "gte": {
            "docs": undefined,
            "type": "optional<datetime>",
          },
          "le": {
            "docs": undefined,
            "type": "optional<datetime>",
          },
          "lte": {
            "docs": undefined,
            "type": "optional<datetime>",
          },
        },
      },
      "CreateEventBulkRetryRequestQueryWebhookId": {
        "discriminated": false,
        "docs": "Filter by webhook connection IDs",
        "union": [
          {
            "docs": "Webhook ID",
            "type": "string",
          },
          {
            "docs": undefined,
            "type": "list<string>",
          },
        ],
      },
      "CreateIgnoredEventBulkRetryRequestQuery": {
        "docs": "Filter by the bulk retry ignored event query object",
        "properties": {
          "cause": {
            "docs": "The cause of the ignored event",
            "type": "optional<CreateIgnoredEventBulkRetryRequestQueryCause>",
          },
          "transformation_id": {
            "docs": "The associated transformation ID (only applicable to the cause \`TRANSFORMATION_FAILED\`)",
            "type": "optional<string>",
          },
          "webhook_id": {
            "docs": "Connection ID of the ignored event",
            "type": "optional<CreateIgnoredEventBulkRetryRequestQueryWebhookId>",
          },
        },
      },
      "CreateIgnoredEventBulkRetryRequestQueryCause": {
        "discriminated": false,
        "docs": "The cause of the ignored event",
        "union": [
          "string",
          {
            "docs": undefined,
            "type": "list<string>",
          },
        ],
      },
      "CreateIgnoredEventBulkRetryRequestQueryWebhookId": {
        "discriminated": false,
        "docs": "Connection ID of the ignored event",
        "union": [
          "string",
          {
            "docs": undefined,
            "type": "list<string>",
          },
        ],
      },
      "CreateIntegrationRequestConfigs": {
        "discriminated": false,
        "docs": "Decrypted Key/Value object of the associated configuration for that provider",
        "union": [
          {
            "docs": undefined,
            "type": "HmacIntegrationConfigs",
          },
          {
            "docs": undefined,
            "type": "ApiKeyIntegrationConfigs",
          },
          {
            "docs": undefined,
            "type": "HandledHmacConfigs",
          },
          {
            "docs": undefined,
            "type": "BasicAuthIntegrationConfigs",
          },
          {
            "docs": undefined,
            "type": "ShopifyIntegrationConfigs",
          },
        ],
      },
      "CreateIssueTriggerRequestConfigs": {
        "discriminated": false,
        "docs": "Configuration object for the specific issue type selected",
        "union": [
          {
            "docs": undefined,
            "type": "IssueTriggerDeliveryConfigs",
          },
          {
            "docs": undefined,
            "type": "IssueTriggerTransformationConfigs",
          },
          {
            "docs": undefined,
            "type": "IssueTriggerBackpressureConfigs",
          },
        ],
      },
      "CreateRequestBulkRetryRequestQuery": {
        "docs": "Filter properties for the events to be included in the bulk retry, use query parameters of [Requests](#requests)",
        "properties": {
          "body": {
            "docs": "URL Encoded string of the JSON to match to the data body",
            "type": "optional<CreateRequestBulkRetryRequestQueryBody>",
          },
          "bulk_retry_id": {
            "docs": undefined,
            "type": "optional<CreateRequestBulkRetryRequestQueryBulkRetryId>",
          },
          "created_at": {
            "docs": undefined,
            "type": "optional<CreateRequestBulkRetryRequestQueryCreatedAt>",
          },
          "events_count": {
            "docs": undefined,
            "type": "optional<CreateRequestBulkRetryRequestQueryEventsCount>",
          },
          "headers": {
            "docs": "URL Encoded string of the JSON to match to the data headers",
            "type": "optional<CreateRequestBulkRetryRequestQueryHeaders>",
          },
          "id": {
            "docs": "Filter by requests IDs",
            "type": "optional<CreateRequestBulkRetryRequestQueryId>",
          },
          "ignored_count": {
            "docs": undefined,
            "type": "optional<CreateRequestBulkRetryRequestQueryIgnoredCount>",
          },
          "ingested_at": {
            "docs": undefined,
            "type": "optional<CreateRequestBulkRetryRequestQueryIngestedAt>",
          },
          "parsed_query": {
            "docs": "URL Encoded string of the JSON to match to the parsed query (JSON representation of the query)",
            "type": "optional<CreateRequestBulkRetryRequestQueryParsedQuery>",
          },
          "path": {
            "docs": "URL Encoded string of the string to match partially to the path",
            "type": "optional<string>",
          },
          "rejection_cause": {
            "docs": "Filter by rejection cause",
            "type": "optional<CreateRequestBulkRetryRequestQueryRejectionCause>",
          },
          "source_id": {
            "docs": "Filter by source IDs",
            "type": "optional<CreateRequestBulkRetryRequestQuerySourceId>",
          },
          "status": {
            "docs": undefined,
            "type": "optional<CreateRequestBulkRetryRequestQueryStatus>",
          },
          "verified": {
            "docs": "Filter by verification status",
            "type": "optional<boolean>",
          },
        },
      },
      "CreateRequestBulkRetryRequestQueryBody": {
        "discriminated": false,
        "docs": "URL Encoded string of the JSON to match to the data body",
        "union": [
          "string",
          {
            "docs": undefined,
            "type": "CreateRequestBulkRetryRequestQueryBodyOne",
          },
        ],
      },
      "CreateRequestBulkRetryRequestQueryBodyOne": {
        "docs": undefined,
        "properties": {},
      },
      "CreateRequestBulkRetryRequestQueryBulkRetryId": {
        "discriminated": false,
        "docs": undefined,
        "union": [
          "string",
          {
            "docs": undefined,
            "type": "list<string>",
          },
        ],
      },
      "CreateRequestBulkRetryRequestQueryCreatedAt": {
        "discriminated": false,
        "docs": undefined,
        "union": [
          "datetime",
          {
            "docs": undefined,
            "type": "CreateRequestBulkRetryRequestQueryCreatedAtAny",
          },
        ],
      },
      "CreateRequestBulkRetryRequestQueryCreatedAtAny": {
        "docs": undefined,
        "properties": {
          "any": {
            "docs": undefined,
            "type": "optional<boolean>",
          },
          "gt": {
            "docs": undefined,
            "type": "optional<datetime>",
          },
          "gte": {
            "docs": undefined,
            "type": "optional<datetime>",
          },
          "le": {
            "docs": undefined,
            "type": "optional<datetime>",
          },
          "lte": {
            "docs": undefined,
            "type": "optional<datetime>",
          },
        },
      },
      "CreateRequestBulkRetryRequestQueryEventsCount": {
        "discriminated": false,
        "docs": undefined,
        "union": [
          "integer",
          {
            "docs": undefined,
            "type": "CreateRequestBulkRetryRequestQueryEventsCountAny",
          },
          {
            "docs": undefined,
            "type": "list<integer>",
          },
        ],
      },
      "CreateRequestBulkRetryRequestQueryEventsCountAny": {
        "docs": undefined,
        "properties": {
          "any": {
            "docs": undefined,
            "type": "optional<boolean>",
          },
          "contains": {
            "docs": undefined,
            "type": "optional<integer>",
          },
          "gt": {
            "docs": undefined,
            "type": "optional<integer>",
          },
          "gte": {
            "docs": undefined,
            "type": "optional<integer>",
          },
          "le": {
            "docs": undefined,
            "type": "optional<integer>",
          },
          "lte": {
            "docs": undefined,
            "type": "optional<integer>",
          },
        },
      },
      "CreateRequestBulkRetryRequestQueryHeaders": {
        "discriminated": false,
        "docs": "URL Encoded string of the JSON to match to the data headers",
        "union": [
          "string",
          {
            "docs": undefined,
            "type": "CreateRequestBulkRetryRequestQueryHeadersOne",
          },
        ],
      },
      "CreateRequestBulkRetryRequestQueryHeadersOne": {
        "docs": undefined,
        "properties": {},
      },
      "CreateRequestBulkRetryRequestQueryId": {
        "discriminated": false,
        "docs": "Filter by requests IDs",
        "union": [
          {
            "docs": "Request ID",
            "type": "string",
          },
          {
            "docs": undefined,
            "type": "list<string>",
          },
        ],
      },
      "CreateRequestBulkRetryRequestQueryIgnoredCount": {
        "discriminated": false,
        "docs": undefined,
        "union": [
          "integer",
          {
            "docs": undefined,
            "type": "CreateRequestBulkRetryRequestQueryIgnoredCountAny",
          },
          {
            "docs": undefined,
            "type": "list<integer>",
          },
        ],
      },
      "CreateRequestBulkRetryRequestQueryIgnoredCountAny": {
        "docs": undefined,
        "properties": {
          "any": {
            "docs": undefined,
            "type": "optional<boolean>",
          },
          "contains": {
            "docs": undefined,
            "type": "optional<integer>",
          },
          "gt": {
            "docs": undefined,
            "type": "optional<integer>",
          },
          "gte": {
            "docs": undefined,
            "type": "optional<integer>",
          },
          "le": {
            "docs": undefined,
            "type": "optional<integer>",
          },
          "lte": {
            "docs": undefined,
            "type": "optional<integer>",
          },
        },
      },
      "CreateRequestBulkRetryRequestQueryIngestedAt": {
        "discriminated": false,
        "docs": undefined,
        "union": [
          "datetime",
          {
            "docs": undefined,
            "type": "CreateRequestBulkRetryRequestQueryIngestedAtAny",
          },
        ],
      },
      "CreateRequestBulkRetryRequestQueryIngestedAtAny": {
        "docs": undefined,
        "properties": {
          "any": {
            "docs": undefined,
            "type": "optional<boolean>",
          },
          "gt": {
            "docs": undefined,
            "type": "optional<datetime>",
          },
          "gte": {
            "docs": undefined,
            "type": "optional<datetime>",
          },
          "le": {
            "docs": undefined,
            "type": "optional<datetime>",
          },
          "lte": {
            "docs": undefined,
            "type": "optional<datetime>",
          },
        },
      },
      "CreateRequestBulkRetryRequestQueryParsedQuery": {
        "discriminated": false,
        "docs": "URL Encoded string of the JSON to match to the parsed query (JSON representation of the query)",
        "union": [
          "string",
          {
            "docs": undefined,
            "type": "CreateRequestBulkRetryRequestQueryParsedQueryOne",
          },
        ],
      },
      "CreateRequestBulkRetryRequestQueryParsedQueryOne": {
        "docs": undefined,
        "properties": {},
      },
      "CreateRequestBulkRetryRequestQueryRejectionCause": {
        "discriminated": false,
        "docs": "Filter by rejection cause",
        "union": [
          {
            "docs": undefined,
            "type": "RequestRejectionCause",
          },
          {
            "docs": undefined,
            "type": "CreateRequestBulkRetryRequestQueryRejectionCauseAny",
          },
          {
            "docs": undefined,
            "type": "list<RequestRejectionCause>",
          },
        ],
      },
      "CreateRequestBulkRetryRequestQueryRejectionCauseAny": {
        "docs": undefined,
        "properties": {
          "any": {
            "docs": undefined,
            "type": "optional<boolean>",
          },
          "contains": {
            "docs": undefined,
            "type": "optional<RequestRejectionCause>",
          },
          "gt": {
            "docs": undefined,
            "type": "optional<RequestRejectionCause>",
          },
          "gte": {
            "docs": undefined,
            "type": "optional<RequestRejectionCause>",
          },
          "le": {
            "docs": undefined,
            "type": "optional<RequestRejectionCause>",
          },
          "lte": {
            "docs": undefined,
            "type": "optional<RequestRejectionCause>",
          },
        },
      },
      "CreateRequestBulkRetryRequestQuerySourceId": {
        "discriminated": false,
        "docs": "Filter by source IDs",
        "union": [
          {
            "docs": "Source ID",
            "type": "string",
          },
          {
            "docs": undefined,
            "type": "list<string>",
          },
        ],
      },
      "CreateRequestBulkRetryRequestQueryStatus": {
        "docs": undefined,
        "enum": [
          {
            "docs": undefined,
            "name": "accepted",
            "value": "accepted",
          },
          {
            "docs": undefined,
            "name": "rejected",
            "value": "rejected",
          },
        ],
      },
      "CreateTransformationRequestEnvValue": {
        "discriminated": false,
        "docs": undefined,
        "union": [
          "string",
          "double",
        ],
      },
      "DelayRule": {
        "docs": undefined,
        "properties": {
          "delay": {
            "docs": "Delay to introduce in MS",
            "type": "integer",
          },
          "type": "literal<"delay">",
        },
      },
      "DeletedBookmarkResponse": {
        "docs": undefined,
        "properties": {
          "id": {
            "docs": "Bookmark ID",
            "type": "string",
          },
        },
      },
      "DeletedIntegration": {
        "docs": undefined,
        "properties": {
          "id": "string",
        },
      },
      "DeletedIssueTriggerResponse": {
        "docs": undefined,
        "properties": {
          "id": "string",
        },
      },
      "DeliveryIssue": {
        "docs": "Delivery issue",
        "properties": {
          "aggregation_keys": {
            "docs": undefined,
            "type": "DeliveryIssueAggregationKeys",
          },
          "auto_resolved_at": {
            "docs": undefined,
            "type": "optional<datetime>",
          },
          "created_at": {
            "docs": "ISO timestamp for when the issue was created",
            "type": "string",
          },
          "dismissed_at": {
            "docs": "ISO timestamp for when the issue was dismissed",
            "type": "optional<datetime>",
          },
          "first_seen_at": {
            "docs": "ISO timestamp for when the issue was first opened",
            "type": "datetime",
          },
          "id": {
            "docs": "Issue ID",
            "type": "string",
          },
          "last_seen_at": {
            "docs": "ISO timestamp for when the issue last occured",
            "type": "datetime",
          },
          "last_updated_by": {
            "docs": "ID of the team member who last updated the issue status",
            "type": "optional<string>",
          },
          "merged_with": {
            "docs": undefined,
            "type": "optional<string>",
          },
          "opened_at": {
            "docs": "ISO timestamp for when the issue was last opened",
            "type": "datetime",
          },
          "reference": {
            "docs": undefined,
            "type": "DeliveryIssueReference",
          },
          "status": {
            "docs": undefined,
            "type": "IssueStatus",
          },
          "team_id": {
            "docs": "ID of the workspace",
            "type": "string",
          },
          "updated_at": {
            "docs": "ISO timestamp for when the issue was last updated",
            "type": "string",
          },
        },
      },
      "DeliveryIssueAggregationKeys": {
        "docs": "Keys used as the aggregation keys a 'delivery' type issue",
        "properties": {
          "error_code": {
            "docs": undefined,
            "type": "list<AttemptErrorCodes>",
          },
          "response_status": {
            "docs": undefined,
            "type": "list<double>",
          },
          "webhook_id": {
            "docs": undefined,
            "type": "list<string>",
          },
        },
      },
      "DeliveryIssueData": {
        "docs": "Delivery issue data",
        "properties": {
          "trigger_attempt": {
            "docs": undefined,
            "type": "optional<EventAttempt>",
          },
          "trigger_event": {
            "docs": undefined,
            "type": "optional<Event>",
          },
        },
      },
      "DeliveryIssueReference": {
        "docs": "Reference to the event and attempt an issue is being created for.",
        "properties": {
          "attempt_id": "string",
          "event_id": "string",
        },
      },
      "DeliveryIssueWithData": {
        "docs": "Delivery issue",
        "properties": {
          "aggregation_keys": {
            "docs": undefined,
            "type": "DeliveryIssueAggregationKeys",
          },
          "auto_resolved_at": {
            "docs": undefined,
            "type": "optional<datetime>",
          },
          "created_at": {
            "docs": "ISO timestamp for when the issue was created",
            "type": "string",
          },
          "data": {
            "docs": undefined,
            "type": "optional<DeliveryIssueData>",
          },
          "dismissed_at": {
            "docs": "ISO timestamp for when the issue was dismissed",
            "type": "optional<datetime>",
          },
          "first_seen_at": {
            "docs": "ISO timestamp for when the issue was first opened",
            "type": "datetime",
          },
          "id": {
            "docs": "Issue ID",
            "type": "string",
          },
          "last_seen_at": {
            "docs": "ISO timestamp for when the issue last occured",
            "type": "datetime",
          },
          "last_updated_by": {
            "docs": "ID of the team member who last updated the issue status",
            "type": "optional<string>",
          },
          "merged_with": {
            "docs": undefined,
            "type": "optional<string>",
          },
          "opened_at": {
            "docs": "ISO timestamp for when the issue was last opened",
            "type": "datetime",
          },
          "reference": {
            "docs": undefined,
            "type": "DeliveryIssueReference",
          },
          "status": {
            "docs": undefined,
            "type": "IssueStatus",
          },
          "team_id": {
            "docs": "ID of the workspace",
            "type": "string",
          },
          "updated_at": {
            "docs": "ISO timestamp for when the issue was last updated",
            "type": "string",
          },
        },
      },
      "Destination": {
        "docs": "Associated [Destination](#destination-object) object",
        "properties": {
          "archived_at": {
            "docs": "Date the destination was archived",
            "type": "optional<datetime>",
          },
          "cli_path": {
            "docs": "Path for the CLI destination",
            "type": "optional<string>",
          },
          "created_at": {
            "docs": "Date the destination was created",
            "type": "datetime",
          },
          "id": {
            "docs": "ID of the destination",
            "type": "string",
          },
          "name": {
            "docs": "A unique, human-friendly name for the destination",
            "type": "string",
          },
          "path_forwarding_disabled": {
            "docs": undefined,
            "type": "optional<boolean>",
          },
          "rate_limit": {
            "docs": "Limit event attempts to receive per period. Max value is workspace plan's max attempts thoughput.",
            "type": "optional<integer>",
          },
          "rate_limit_period": {
            "docs": undefined,
            "type": "optional<DestinationRateLimitPeriod>",
          },
          "team_id": {
            "docs": "ID of the workspace",
            "type": "string",
          },
          "updated_at": {
            "docs": "Date the destination was last updated",
            "type": "datetime",
          },
          "url": {
            "docs": "HTTP endpoint of the destination",
            "type": "optional<string>",
          },
        },
      },
      "DestinationPaginatedResult": {
        "docs": undefined,
        "properties": {
          "count": {
            "docs": undefined,
            "type": "optional<integer>",
          },
          "models": {
            "docs": undefined,
            "type": "optional<list<Destination>>",
          },
          "pagination": {
            "docs": undefined,
            "type": "optional<SeekPagination>",
          },
        },
      },
      "DestinationRateLimitPeriod": {
        "docs": "Period to rate limit attempts",
        "enum": [
          {
            "docs": undefined,
            "name": "second",
            "value": "second",
          },
          {
            "docs": undefined,
            "name": "minute",
            "value": "minute",
          },
          {
            "docs": undefined,
            "name": "hour",
            "value": "hour",
          },
        ],
      },
      "DetachedIntegrationFromSource": {
        "docs": undefined,
        "properties": {},
      },
      "Event": {
        "docs": undefined,
        "properties": {
          "attempts": {
            "docs": "Number of delivery attempts made",
            "type": "integer",
          },
          "cli_id": {
            "docs": "ID of the CLI the event is sent to",
            "type": "optional<string>",
          },
          "created_at": {
            "docs": "Date the event was created",
            "type": "datetime",
          },
          "created_at_id": {
            "docs": undefined,
            "type": "optional<string>",
          },
          "data": {
            "docs": undefined,
            "type": "optional<EventData>",
          },
          "destination_id": {
            "docs": "ID of the associated destination",
            "type": "string",
          },
          "event_data_id": {
            "docs": "ID of the request data",
            "type": "string",
          },
          "id": {
            "docs": "ID of the event",
            "type": "string",
          },
          "last_attempt_at": {
            "docs": "Date of the most recently attempted retry",
            "type": "optional<datetime>",
          },
          "last_attempt_at_id": {
            "docs": undefined,
            "type": "optional<string>",
          },
          "next_attempt_at": {
            "docs": "Date of the next scheduled retry",
            "type": "optional<datetime>",
          },
          "request_id": {
            "docs": "ID of the request that created the event",
            "type": "string",
          },
          "response_status": {
            "docs": "Event status",
            "type": "optional<integer>",
          },
          "source_id": {
            "docs": "ID of the associated source",
            "type": "string",
          },
          "status": {
            "docs": undefined,
            "type": "EventStatus",
          },
          "successful_at": {
            "docs": "Date of the latest successful attempt",
            "type": "optional<datetime>",
          },
          "team_id": {
            "docs": "ID of the workspace",
            "type": "string",
          },
          "updated_at": {
            "docs": "Date the event was last updated",
            "type": "datetime",
          },
          "webhook_id": {
            "docs": "ID of the associated connection",
            "type": "string",
          },
        },
      },
      "EventArray": {
        "docs": undefined,
        "type": "list<Event>",
      },
      "EventAttempt": {
        "docs": undefined,
        "properties": {
          "archived_at": {
            "docs": "Date the attempt was archived",
            "type": "optional<string>",
          },
          "attempt_number": {
            "docs": "Sequential number of attempts (up to and including this one) made for the associated event",
            "type": "optional<integer>",
          },
          "body": {
            "docs": "Response body from the destination",
            "type": "optional<EventAttemptBody>",
          },
          "bulk_retry_id": {
            "docs": "ID of associated bulk retry",
            "type": "optional<string>",
          },
          "created_at": {
            "docs": "Date the attempt was created",
            "type": "datetime",
          },
          "delivered_at": {
            "docs": "Date the attempt was delivered",
            "type": "optional<datetime>",
          },
          "delivery_latency": {
            "docs": "Time elapsed between attempt initiation and final delivery (in ms)",
            "type": "optional<integer>",
          },
          "destination_id": {
            "docs": undefined,
            "type": "optional<string>",
          },
          "error_code": {
            "docs": undefined,
            "type": "optional<AttemptErrorCodes>",
          },
          "event_id": {
            "docs": "Event ID",
            "type": "string",
          },
          "id": {
            "docs": "Attempt ID",
            "type": "string",
          },
          "requested_url": {
            "docs": "URL of the destination where delivery was attempted",
            "type": "optional<string>",
          },
          "responded_at": {
            "docs": "Date the destination responded to this attempt",
            "type": "optional<datetime>",
          },
          "response_latency": {
            "docs": "Time elapsed between attempt initiation and a response from the destination (in ms)",
            "type": "optional<integer>",
          },
          "response_status": {
            "docs": "Attempt's HTTP response code",
            "type": "optional<integer>",
          },
          "state": {
            "docs": undefined,
            "type": "optional<AttemptState>",
          },
          "status": {
            "docs": undefined,
            "type": "AttemptStatus",
          },
          "successful_at": {
            "docs": "Date the attempt was successful",
            "type": "optional<datetime>",
          },
          "team_id": {
            "docs": "Team ID",
            "type": "string",
          },
          "trigger": {
            "docs": undefined,
            "type": "optional<AttemptTrigger>",
          },
          "updated_at": {
            "docs": "Date the attempt was last updated",
            "type": "datetime",
          },
        },
      },
      "EventAttemptBody": {
        "docs": "Response body from the destination",
        "properties": {},
      },
      "EventAttemptPaginatedResult": {
        "docs": undefined,
        "properties": {
          "count": {
            "docs": undefined,
            "type": "optional<integer>",
          },
          "models": {
            "docs": undefined,
            "type": "optional<list<optional<EventAttempt>>>",
          },
          "pagination": {
            "docs": undefined,
            "type": "optional<SeekPagination>",
          },
        },
      },
      "EventData": {
        "docs": undefined,
        "properties": {
          "body": {
            "docs": undefined,
            "type": "optional<EventDataBody>",
          },
          "headers": {
            "docs": undefined,
            "type": "optional<EventDataHeaders>",
          },
          "is_large_payload": {
            "docs": undefined,
            "type": "optional<boolean>",
          },
          "parsed_query": {
            "docs": undefined,
            "type": "optional<EventDataParsedQuery>",
          },
          "path": "string",
          "query": {
            "docs": undefined,
            "type": "optional<string>",
          },
        },
      },
      "EventDataBody": {
        "discriminated": false,
        "docs": undefined,
        "union": [
          "string",
          {
            "docs": undefined,
            "type": "EventDataBodyOne",
          },
          {
            "docs": undefined,
            "type": "list<unknown>",
          },
        ],
      },
      "EventDataBodyOne": {
        "docs": undefined,
        "properties": {},
      },
      "EventDataHeaders": {
        "discriminated": false,
        "docs": undefined,
        "union": [
          "string",
          {
            "docs": undefined,
            "type": "map<string, optional<string>>",
          },
        ],
      },
      "EventDataParsedQuery": {
        "discriminated": false,
        "docs": undefined,
        "union": [
          {
            "docs": undefined,
            "type": "optional<string>",
          },
          {
            "docs": undefined,
            "type": "EventDataParsedQueryOne",
          },
        ],
      },
      "EventDataParsedQueryOne": {
        "docs": undefined,
        "properties": {},
      },
      "EventPaginatedResult": {
        "docs": undefined,
        "properties": {
          "count": {
            "docs": undefined,
            "type": "optional<integer>",
          },
          "models": {
            "docs": undefined,
            "type": "optional<list<Event>>",
          },
          "pagination": {
            "docs": undefined,
            "type": "optional<SeekPagination>",
          },
        },
      },
      "EventStatus": {
        "docs": undefined,
        "enum": [
          {
            "docs": undefined,
            "name": "SCHEDULED",
            "value": "SCHEDULED",
          },
          {
            "docs": undefined,
            "name": "QUEUED",
            "value": "QUEUED",
          },
          {
            "docs": undefined,
            "name": "HOLD",
            "value": "HOLD",
          },
          {
            "docs": undefined,
            "name": "SUCCESSFUL",
            "value": "SUCCESSFUL",
          },
          {
            "docs": undefined,
            "name": "FAILED",
            "value": "FAILED",
          },
        ],
      },
      "FilterRule": {
        "docs": undefined,
        "properties": {
          "body": {
            "docs": undefined,
            "type": "optional<ConnectionFilterProperty>",
          },
          "headers": {
            "docs": undefined,
            "type": "optional<ConnectionFilterProperty>",
          },
          "path": {
            "docs": undefined,
            "type": "optional<ConnectionFilterProperty>",
          },
          "query": {
            "docs": undefined,
            "type": "optional<ConnectionFilterProperty>",
          },
          "type": "literal<"filter">",
        },
      },
      "FilteredMeta": {
        "docs": undefined,
        "enum": [
          {
            "docs": undefined,
            "name": "body",
            "value": "body",
          },
          {
            "docs": undefined,
            "name": "headers",
            "value": "headers",
          },
          {
            "docs": undefined,
            "name": "path",
            "value": "path",
          },
          {
            "docs": undefined,
            "name": "query",
            "value": "query",
          },
        ],
      },
      "GetAttemptsRequestDir": {
        "docs": undefined,
        "enum": [
          {
            "docs": undefined,
            "name": "asc",
            "value": "asc",
          },
          {
            "docs": undefined,
            "name": "desc",
            "value": "desc",
          },
        ],
      },
      "GetBookmarksRequestDir": {
        "docs": undefined,
        "enum": [
          {
            "docs": undefined,
            "name": "asc",
            "value": "asc",
          },
          {
            "docs": undefined,
            "name": "desc",
            "value": "desc",
          },
        ],
      },
      "GetConnectionsRequestDir": {
        "docs": undefined,
        "enum": [
          {
            "docs": undefined,
            "name": "asc",
            "value": "asc",
          },
          {
            "docs": undefined,
            "name": "desc",
            "value": "desc",
          },
        ],
      },
      "GetDestinationsRequestDir": {
        "docs": undefined,
        "enum": [
          {
            "docs": undefined,
            "name": "asc",
            "value": "asc",
          },
          {
            "docs": undefined,
            "name": "desc",
            "value": "desc",
          },
        ],
      },
      "GetEventBulkRetriesRequestDir": {
        "docs": undefined,
        "enum": [
          {
            "docs": undefined,
            "name": "asc",
            "value": "asc",
          },
          {
            "docs": undefined,
            "name": "desc",
            "value": "desc",
          },
        ],
      },
      "GetEventsRequestDir": {
        "docs": undefined,
        "enum": [
          {
            "docs": undefined,
            "name": "asc",
            "value": "asc",
          },
          {
            "docs": undefined,
            "name": "desc",
            "value": "desc",
          },
        ],
      },
      "GetEventsRequestOrderBy": {
        "docs": undefined,
        "enum": [
          {
            "docs": undefined,
            "name": "last_attempt_at",
            "value": "last_attempt_at",
          },
          {
            "docs": undefined,
            "name": "next_attempt_at",
            "value": "next_attempt_at",
          },
          {
            "docs": undefined,
            "name": "created_at",
            "value": "created_at",
          },
        ],
      },
      "GetIgnoredEventBulkRetriesRequestDir": {
        "docs": undefined,
        "enum": [
          {
            "docs": undefined,
            "name": "asc",
            "value": "asc",
          },
          {
            "docs": undefined,
            "name": "desc",
            "value": "desc",
          },
        ],
      },
      "GetIssueCountRequestDir": {
        "docs": undefined,
        "enum": [
          {
            "docs": undefined,
            "name": "asc",
            "value": "asc",
          },
          {
            "docs": undefined,
            "name": "desc",
            "value": "desc",
          },
        ],
      },
      "GetIssueCountRequestOrderBy": {
        "docs": undefined,
        "enum": [
          {
            "docs": undefined,
            "name": "created_at",
            "value": "created_at",
          },
          {
            "docs": undefined,
            "name": "first_seen_at",
            "value": "first_seen_at",
          },
          {
            "docs": undefined,
            "name": "last_seen_at",
            "value": "last_seen_at",
          },
          {
            "docs": undefined,
            "name": "opened_at",
            "value": "opened_at",
          },
          {
            "docs": undefined,
            "name": "status",
            "value": "status",
          },
        ],
      },
      "GetIssueCountRequestStatus": {
        "docs": "Issue status",
        "enum": [
          {
            "docs": undefined,
            "name": "OPENED",
            "value": "OPENED",
          },
          {
            "docs": undefined,
            "name": "IGNORED",
            "value": "IGNORED",
          },
          {
            "docs": undefined,
            "name": "ACKNOWLEDGED",
            "value": "ACKNOWLEDGED",
          },
          {
            "docs": undefined,
            "name": "RESOLVED",
            "value": "RESOLVED",
          },
        ],
      },
      "GetIssueCountRequestType": {
        "docs": "Issue type",
        "enum": [
          {
            "docs": undefined,
            "name": "delivery",
            "value": "delivery",
          },
          {
            "docs": undefined,
            "name": "transformation",
            "value": "transformation",
          },
          {
            "docs": undefined,
            "name": "backpressure",
            "value": "backpressure",
          },
        ],
      },
      "GetIssueTriggersRequestDir": {
        "docs": undefined,
        "enum": [
          {
            "docs": undefined,
            "name": "asc",
            "value": "asc",
          },
          {
            "docs": undefined,
            "name": "desc",
            "value": "desc",
          },
        ],
      },
      "GetIssueTriggersRequestOrderBy": {
        "docs": undefined,
        "enum": [
          {
            "docs": undefined,
            "name": "created_at",
            "value": "created_at",
          },
          {
            "docs": undefined,
            "name": "type",
            "value": "type",
          },
        ],
      },
      "GetIssuesRequestDir": {
        "docs": undefined,
        "enum": [
          {
            "docs": undefined,
            "name": "asc",
            "value": "asc",
          },
          {
            "docs": undefined,
            "name": "desc",
            "value": "desc",
          },
        ],
      },
      "GetIssuesRequestOrderBy": {
        "docs": undefined,
        "enum": [
          {
            "docs": undefined,
            "name": "created_at",
            "value": "created_at",
          },
          {
            "docs": undefined,
            "name": "first_seen_at",
            "value": "first_seen_at",
          },
          {
            "docs": undefined,
            "name": "last_seen_at",
            "value": "last_seen_at",
          },
          {
            "docs": undefined,
            "name": "opened_at",
            "value": "opened_at",
          },
          {
            "docs": undefined,
            "name": "status",
            "value": "status",
          },
        ],
      },
      "GetIssuesRequestStatus": {
        "docs": "Issue status",
        "enum": [
          {
            "docs": undefined,
            "name": "OPENED",
            "value": "OPENED",
          },
          {
            "docs": undefined,
            "name": "IGNORED",
            "value": "IGNORED",
          },
          {
            "docs": undefined,
            "name": "ACKNOWLEDGED",
            "value": "ACKNOWLEDGED",
          },
          {
            "docs": undefined,
            "name": "RESOLVED",
            "value": "RESOLVED",
          },
        ],
      },
      "GetIssuesRequestType": {
        "docs": "Issue type",
        "enum": [
          {
            "docs": undefined,
            "name": "delivery",
            "value": "delivery",
          },
          {
            "docs": undefined,
            "name": "transformation",
            "value": "transformation",
          },
          {
            "docs": undefined,
            "name": "backpressure",
            "value": "backpressure",
          },
        ],
      },
      "GetRequestBulkRetriesRequestDir": {
        "docs": undefined,
        "enum": [
          {
            "docs": undefined,
            "name": "asc",
            "value": "asc",
          },
          {
            "docs": undefined,
            "name": "desc",
            "value": "desc",
          },
        ],
      },
      "GetRequestEventsRequestDir": {
        "docs": undefined,
        "enum": [
          {
            "docs": undefined,
            "name": "asc",
            "value": "asc",
          },
          {
            "docs": undefined,
            "name": "desc",
            "value": "desc",
          },
        ],
      },
      "GetRequestEventsRequestOrderBy": {
        "docs": undefined,
        "enum": [
          {
            "docs": undefined,
            "name": "last_attempt_at",
            "value": "last_attempt_at",
          },
          {
            "docs": undefined,
            "name": "next_attempt_at",
            "value": "next_attempt_at",
          },
          {
            "docs": undefined,
            "name": "created_at",
            "value": "created_at",
          },
        ],
      },
      "GetRequestIgnoredEventsRequestDir": {
        "docs": undefined,
        "enum": [
          {
            "docs": undefined,
            "name": "asc",
            "value": "asc",
          },
          {
            "docs": undefined,
            "name": "desc",
            "value": "desc",
          },
        ],
      },
      "GetRequestsRequestDir": {
        "docs": undefined,
        "enum": [
          {
            "docs": undefined,
            "name": "asc",
            "value": "asc",
          },
          {
            "docs": undefined,
            "name": "desc",
            "value": "desc",
          },
        ],
      },
      "GetRequestsRequestOrderBy": {
        "docs": undefined,
        "enum": [
          {
            "docs": undefined,
            "name": "ingested_at",
            "value": "ingested_at",
          },
          {
            "docs": undefined,
            "name": "created_at",
            "value": "created_at",
          },
        ],
      },
      "GetRequestsRequestStatus": {
        "docs": undefined,
        "enum": [
          {
            "docs": undefined,
            "name": "accepted",
            "value": "accepted",
          },
          {
            "docs": undefined,
            "name": "rejected",
            "value": "rejected",
          },
        ],
      },
      "GetRulesetsRequestDir": {
        "docs": undefined,
        "enum": [
          {
            "docs": undefined,
            "name": "asc",
            "value": "asc",
          },
          {
            "docs": undefined,
            "name": "desc",
            "value": "desc",
          },
        ],
      },
      "GetSourcesRequestDir": {
        "docs": undefined,
        "enum": [
          {
            "docs": undefined,
            "name": "asc",
            "value": "asc",
          },
          {
            "docs": undefined,
            "name": "desc",
            "value": "desc",
          },
        ],
      },
      "GetTransformationExecutionsRequestDir": {
        "docs": undefined,
        "enum": [
          {
            "docs": undefined,
            "name": "asc",
            "value": "asc",
          },
          {
            "docs": undefined,
            "name": "desc",
            "value": "desc",
          },
        ],
      },
      "GetTransformationExecutionsRequestLogLevel": {
        "docs": undefined,
        "enum": [
          {
            "docs": undefined,
            "name": "debug",
            "value": "debug",
          },
          {
            "docs": undefined,
            "name": "info",
            "value": "info",
          },
          {
            "docs": undefined,
            "name": "warn",
            "value": "warn",
          },
          {
            "docs": undefined,
            "name": "error",
            "value": "error",
          },
          {
            "docs": undefined,
            "name": "fatal",
            "value": "fatal",
          },
        ],
      },
      "GetTransformationsRequestDir": {
        "docs": undefined,
        "enum": [
          {
            "docs": undefined,
            "name": "asc",
            "value": "asc",
          },
          {
            "docs": undefined,
            "name": "desc",
            "value": "desc",
          },
        ],
      },
      "HandledHmacConfigs": {
        "docs": undefined,
        "properties": {
          "webhook_secret_key": "string",
        },
      },
      "HmacAlgorithms": {
        "docs": undefined,
        "enum": [
          {
            "docs": undefined,
            "name": "md5",
            "value": "md5",
          },
          {
            "docs": undefined,
            "name": "sha1",
            "value": "sha1",
          },
          {
            "docs": undefined,
            "name": "sha256",
            "value": "sha256",
          },
          {
            "docs": undefined,
            "name": "sha512",
            "value": "sha512",
          },
        ],
      },
      "HmacIntegrationConfigs": {
        "docs": undefined,
        "properties": {
          "algorithm": {
            "docs": undefined,
            "type": "HmacAlgorithms",
          },
          "encoding": {
            "docs": undefined,
            "type": "HmacIntegrationConfigsEncoding",
          },
          "header_key": "string",
          "webhook_secret_key": "string",
        },
      },
      "HmacIntegrationConfigsEncoding": {
        "docs": undefined,
        "enum": [
          {
            "docs": undefined,
            "name": "base64",
            "value": "base64",
          },
          {
            "docs": undefined,
            "name": "hex",
            "value": "hex",
          },
        ],
      },
      "IgnoredEvent": {
        "docs": undefined,
        "properties": {
          "cause": {
            "docs": undefined,
            "type": "IgnoredEventCause",
          },
          "created_at": "datetime",
          "id": "string",
          "meta": {
            "docs": undefined,
            "type": "optional<IgnoredEventMeta>",
          },
          "request_id": "string",
          "team_id": "string",
          "updated_at": "datetime",
          "webhook_id": "string",
        },
      },
      "IgnoredEventCause": {
        "docs": undefined,
        "enum": [
          {
            "docs": undefined,
            "name": "ARCHIVED",
            "value": "ARCHIVED",
          },
          {
            "docs": undefined,
            "name": "FILTERED",
            "value": "FILTERED",
          },
          {
            "docs": undefined,
            "name": "TRANSFORMATION_FAILED",
            "value": "TRANSFORMATION_FAILED",
          },
          {
            "docs": undefined,
            "name": "CLI_DISCONNECTED",
            "value": "CLI_DISCONNECTED",
          },
        ],
      },
      "IgnoredEventMeta": {
        "discriminated": false,
        "docs": undefined,
        "union": [
          {
            "docs": undefined,
            "type": "FilteredMeta",
          },
          {
            "docs": undefined,
            "type": "TransformationFailedMeta",
          },
        ],
      },
      "IgnoredEventPaginatedResult": {
        "docs": undefined,
        "properties": {
          "count": {
            "docs": undefined,
            "type": "optional<integer>",
          },
          "models": {
            "docs": undefined,
            "type": "optional<list<IgnoredEvent>>",
          },
          "pagination": {
            "docs": undefined,
            "type": "optional<SeekPagination>",
          },
        },
      },
      "Integration": {
        "docs": undefined,
        "properties": {
          "configs": {
            "docs": "Decrypted Key/Value object of the associated configuration for that provider",
            "type": "IntegrationConfigs",
          },
          "created_at": {
            "docs": "Date the integration was created",
            "type": "datetime",
          },
          "features": {
            "docs": "List of features to enable (see features list below)",
            "type": "list<IntegrationFeature>",
          },
          "id": {
            "docs": "ID of the integration",
            "type": "string",
          },
          "label": {
            "docs": "Label of the integration",
            "type": "string",
          },
          "provider": {
            "docs": undefined,
            "type": "IntegrationProvider",
          },
          "sources": {
            "docs": "List of source IDs the integration is attached to",
            "type": "list<string>",
          },
          "team_id": {
            "docs": "ID of the workspace",
            "type": "string",
          },
          "updated_at": {
            "docs": "Date the integration was last updated",
            "type": "datetime",
          },
        },
      },
      "IntegrationConfigs": {
        "discriminated": false,
        "docs": "Decrypted Key/Value object of the associated configuration for that provider",
        "union": [
          {
            "docs": undefined,
            "type": "HmacIntegrationConfigs",
          },
          {
            "docs": undefined,
            "type": "ApiKeyIntegrationConfigs",
          },
          {
            "docs": undefined,
            "type": "HandledHmacConfigs",
          },
          {
            "docs": undefined,
            "type": "BasicAuthIntegrationConfigs",
          },
          {
            "docs": undefined,
            "type": "ShopifyIntegrationConfigs",
          },
        ],
      },
      "IntegrationFeature": {
        "docs": undefined,
        "enum": [
          {
            "docs": undefined,
            "name": "VERIFICATION",
            "value": "VERIFICATION",
          },
          {
            "docs": undefined,
            "name": "HANDSHAKE",
            "value": "HANDSHAKE",
          },
          {
            "docs": undefined,
            "name": "POLLING",
            "value": "POLLING",
          },
        ],
      },
      "IntegrationPaginatedResult": {
        "docs": undefined,
        "properties": {
          "count": {
            "docs": undefined,
            "type": "optional<integer>",
          },
          "models": {
            "docs": undefined,
            "type": "optional<list<Integration>>",
          },
          "pagination": {
            "docs": undefined,
            "type": "optional<SeekPagination>",
          },
        },
      },
      "IntegrationProvider": {
        "docs": "The provider name",
        "enum": [
          {
            "docs": undefined,
            "name": "twitter",
            "value": "twitter",
          },
          {
            "docs": undefined,
            "name": "stripe",
            "value": "stripe",
          },
          {
            "docs": undefined,
            "name": "recharge",
            "value": "recharge",
          },
          {
            "docs": undefined,
            "name": "github",
            "value": "github",
          },
          {
            "docs": undefined,
            "name": "shopify",
            "value": "shopify",
          },
          {
            "docs": undefined,
            "name": "postmark",
            "value": "postmark",
          },
          {
            "docs": undefined,
            "name": "typeform",
            "value": "typeform",
          },
          {
            "docs": undefined,
            "name": "hmac",
            "value": "hmac",
          },
          {
            "docs": undefined,
            "name": "basic_auth",
            "value": "basic_auth",
          },
          {
            "docs": undefined,
            "name": "api_key",
            "value": "api_key",
          },
          {
            "docs": undefined,
            "name": "xero",
            "value": "xero",
          },
          {
            "docs": undefined,
            "name": "svix",
            "value": "svix",
          },
          {
            "docs": undefined,
            "name": "zoom",
            "value": "zoom",
          },
          {
            "docs": undefined,
            "name": "akeneo",
            "value": "akeneo",
          },
          {
            "docs": undefined,
            "name": "adyen",
            "value": "adyen",
          },
          {
            "docs": undefined,
            "name": "gitlab",
            "value": "gitlab",
          },
          {
            "docs": undefined,
            "name": "PropertyFinder",
            "value": "property-finder",
          },
          {
            "docs": undefined,
            "name": "woocommerce",
            "value": "woocommerce",
          },
          {
            "docs": undefined,
            "name": "oura",
            "value": "oura",
          },
          {
            "docs": undefined,
            "name": "commercelayer",
            "value": "commercelayer",
          },
          {
            "docs": undefined,
            "name": "mailgun",
            "value": "mailgun",
          },
          {
            "docs": undefined,
            "name": "pipedrive",
            "value": "pipedrive",
          },
          {
            "docs": undefined,
            "name": "sendgrid",
            "value": "sendgrid",
          },
        ],
      },
      "Issue": {
        "base-properties": {},
        "discriminant": "type",
        "docs": "Issue",
        "union": {
          "delivery": {
            "docs": undefined,
            "type": "DeliveryIssue",
          },
          "transformation": {
            "docs": undefined,
            "type": "TransformationIssue",
          },
        },
      },
      "IssueCount": {
        "docs": undefined,
        "properties": {
          "count": {
            "docs": "Number of issues",
            "type": "integer",
          },
        },
      },
      "IssueStatus": {
        "docs": "Issue status",
        "enum": [
          {
            "docs": undefined,
            "name": "OPENED",
            "value": "OPENED",
          },
          {
            "docs": undefined,
            "name": "IGNORED",
            "value": "IGNORED",
          },
          {
            "docs": undefined,
            "name": "ACKNOWLEDGED",
            "value": "ACKNOWLEDGED",
          },
          {
            "docs": undefined,
            "name": "RESOLVED",
            "value": "RESOLVED",
          },
        ],
      },
      "IssueTrigger": {
        "docs": undefined,
        "properties": {
          "channels": {
            "docs": undefined,
            "type": "optional<IssueTriggerChannels>",
          },
          "configs": {
            "docs": undefined,
            "type": "IssueTriggerReference",
          },
          "created_at": {
            "docs": "ISO timestamp for when the issue trigger was created",
            "type": "datetime",
          },
          "deleted_at": {
            "docs": "ISO timestamp for when the issue trigger was deleted",
            "type": "optional<datetime>",
          },
          "disabled_at": {
            "docs": "ISO timestamp for when the issue trigger was disabled",
            "type": "optional<datetime>",
          },
          "id": {
            "docs": "ID of the issue trigger",
            "type": "string",
          },
          "name": {
            "docs": "Optional unique name to use as reference when using the API",
            "type": "optional<string>",
          },
          "team_id": {
            "docs": "ID of the workspace",
            "type": "optional<string>",
          },
          "type": {
            "docs": undefined,
            "type": "IssueType",
          },
          "updated_at": {
            "docs": "ISO timestamp for when the issue trigger was last updated",
            "type": "datetime",
          },
        },
      },
      "IssueTriggerBackpressureConfigs": {
        "docs": "Configurations for a 'Backpressure' issue trigger",
        "properties": {
          "delay": {
            "docs": undefined,
            "type": "IssueTriggerBackpressureDelay",
          },
          "destinations": {
            "docs": "A pattern to match on the destination name or array of destination IDs. Use \`*\` as wildcard.",
            "type": "IssueTriggerBackpressureConfigsDestinations",
          },
        },
      },
      "IssueTriggerBackpressureConfigsDestinations": {
        "discriminated": false,
        "docs": "A pattern to match on the destination name or array of destination IDs. Use \`*\` as wildcard.",
        "union": [
          "string",
          {
            "docs": undefined,
            "type": "list<string>",
          },
        ],
      },
      "IssueTriggerBackpressureDelay": {
        "docs": "The minimum delay (backpressure) to open the issue for min of 1 minute (60000) and max of 1 day (86400000)",
        "type": "integer",
      },
      "IssueTriggerChannels": {
        "docs": "Notification channels object for the specific channel type",
        "properties": {
          "email": {
            "docs": undefined,
            "type": "optional<IssueTriggerEmailChannel>",
          },
          "opsgenie": {
            "docs": undefined,
            "type": "optional<IssueTriggerIntegrationChannel>",
          },
          "slack": {
            "docs": undefined,
            "type": "optional<IssueTriggerSlackChannel>",
          },
        },
      },
      "IssueTriggerDeliveryConfigs": {
        "docs": "Configurations for a 'delivery' issue trigger",
        "properties": {
          "connections": {
            "docs": "A pattern to match on the connection name or array of connection IDs. Use \`*\` as wildcard.",
            "type": "IssueTriggerDeliveryConfigsConnections",
          },
          "strategy": {
            "docs": undefined,
            "type": "IssueTriggerStrategy",
          },
        },
      },
      "IssueTriggerDeliveryConfigsConnections": {
        "discriminated": false,
        "docs": "A pattern to match on the connection name or array of connection IDs. Use \`*\` as wildcard.",
        "union": [
          "string",
          {
            "docs": undefined,
            "type": "list<string>",
          },
        ],
      },
      "IssueTriggerEmailChannel": {
        "docs": "Email channel for an issue trigger",
        "properties": {},
      },
      "IssueTriggerIntegrationChannel": {
        "docs": "Integration channel for an issue trigger",
        "properties": {},
      },
      "IssueTriggerPaginatedResult": {
        "docs": undefined,
        "properties": {
          "count": {
            "docs": undefined,
            "type": "optional<integer>",
          },
          "models": {
            "docs": undefined,
            "type": "optional<list<IssueTrigger>>",
          },
          "pagination": {
            "docs": undefined,
            "type": "optional<SeekPagination>",
          },
        },
      },
      "IssueTriggerReference": {
        "discriminated": false,
        "docs": "Configuration object for the specific issue type selected",
        "union": [
          {
            "docs": undefined,
            "type": "IssueTriggerDeliveryConfigs",
          },
          {
            "docs": undefined,
            "type": "IssueTriggerTransformationConfigs",
          },
          {
            "docs": undefined,
            "type": "IssueTriggerBackpressureConfigs",
          },
        ],
      },
      "IssueTriggerSlackChannel": {
        "docs": "Slack channel for an issue trigger",
        "properties": {
          "channel_name": {
            "docs": "Channel name",
            "type": "string",
          },
        },
      },
      "IssueTriggerStrategy": {
        "docs": "The strategy uses to open the issue",
        "enum": [
          {
            "docs": undefined,
            "name": "first_attempt",
            "value": "first_attempt",
          },
          {
            "docs": undefined,
            "name": "final_attempt",
            "value": "final_attempt",
          },
        ],
      },
      "IssueTriggerTransformationConfigs": {
        "docs": "Configurations for a 'Transformation' issue trigger",
        "properties": {
          "log_level": {
            "docs": undefined,
            "type": "TransformationExecutionLogLevel",
          },
          "transformations": {
            "docs": "A pattern to match on the transformation name or array of transformation IDs. Use \`*\` as wildcard.",
            "type": "IssueTriggerTransformationConfigsTransformations",
          },
        },
      },
      "IssueTriggerTransformationConfigsTransformations": {
        "discriminated": false,
        "docs": "A pattern to match on the transformation name or array of transformation IDs. Use \`*\` as wildcard.",
        "union": [
          "string",
          {
            "docs": undefined,
            "type": "list<string>",
          },
        ],
      },
      "IssueType": {
        "docs": "Issue type",
        "enum": [
          {
            "docs": undefined,
            "name": "delivery",
            "value": "delivery",
          },
          {
            "docs": undefined,
            "name": "transformation",
            "value": "transformation",
          },
          {
            "docs": undefined,
            "name": "backpressure",
            "value": "backpressure",
          },
        ],
      },
      "IssueWithData": {
        "base-properties": {},
        "discriminant": "type",
        "docs": undefined,
        "union": {
          "delivery": {
            "docs": undefined,
            "type": "DeliveryIssueWithData",
          },
          "transformation": {
            "docs": undefined,
            "type": "TransformationIssueWithData",
          },
        },
      },
      "IssueWithDataPaginatedResult": {
        "docs": undefined,
        "properties": {
          "count": {
            "docs": undefined,
            "type": "optional<integer>",
          },
          "models": {
            "docs": undefined,
            "type": "optional<list<IssueWithData>>",
          },
          "pagination": {
            "docs": undefined,
            "type": "optional<SeekPagination>",
          },
        },
      },
      "OrderByDirection": {
        "docs": undefined,
        "enum": [
          {
            "docs": undefined,
            "name": "asc",
            "value": "asc",
          },
          {
            "docs": undefined,
            "name": "desc",
            "value": "desc",
          },
          {
            "docs": undefined,
            "name": "ASC",
            "value": "ASC",
          },
          {
            "docs": undefined,
            "name": "DESC",
            "value": "DESC",
          },
        ],
      },
      "RawBody": {
        "docs": undefined,
        "properties": {
          "body": "string",
        },
      },
      "Request": {
        "docs": undefined,
        "properties": {
          "cli_events_count": {
            "docs": "The count of CLI events created from this request",
            "type": "optional<integer>",
          },
          "created_at": {
            "docs": "	Date the event was created",
            "type": "datetime",
          },
          "data": {
            "docs": undefined,
            "type": "optional<RequestData>",
          },
          "duplicate_hash": {
            "docs": "Hash of the request data payload used to check for duplicates",
            "type": "optional<string>",
          },
          "duplicate_hits": {
            "docs": "Count of duplicate hits found",
            "type": "optional<integer>",
          },
          "events_count": {
            "docs": "The count of events created from this request (CLI events not included)",
            "type": "optional<integer>",
          },
          "id": {
            "docs": "ID of the request",
            "type": "string",
          },
          "ignored_count": {
            "docs": undefined,
            "type": "optional<integer>",
          },
          "ingest_priority": {
            "docs": "The priority attributed to the request when received",
            "type": "optional<RequestIngestPriority>",
          },
          "ingested_at": {
            "docs": "The time the request was originally received",
            "type": "optional<datetime>",
          },
          "ingested_at_id": {
            "docs": undefined,
            "type": "optional<string>",
          },
          "original_event_data_id": {
            "docs": "ID of the request data",
            "type": "optional<string>",
          },
          "rejection_cause": {
            "docs": undefined,
            "type": "optional<RequestRejectionCause>",
          },
          "source_id": {
            "docs": "ID of the associated source",
            "type": "string",
          },
          "team_id": {
            "docs": "ID of the workspace",
            "type": "string",
          },
          "updated_at": {
            "docs": "Date the event was last updated",
            "type": "datetime",
          },
          "verified": {
            "docs": "Whether or not the request was verified when received",
            "type": "optional<boolean>",
          },
        },
      },
      "RequestData": {
        "docs": undefined,
        "properties": {
          "body": {
            "docs": undefined,
            "type": "optional<RequestDataBody>",
          },
          "headers": {
            "docs": undefined,
            "type": "optional<RequestDataHeaders>",
          },
          "is_large_payload": {
            "docs": undefined,
            "type": "optional<boolean>",
          },
          "parsed_query": {
            "docs": undefined,
            "type": "optional<RequestDataParsedQuery>",
          },
          "path": "string",
          "query": {
            "docs": undefined,
            "type": "optional<string>",
          },
        },
      },
      "RequestDataBody": {
        "discriminated": false,
        "docs": undefined,
        "union": [
          "string",
          {
            "docs": undefined,
            "type": "RequestDataBodyOne",
          },
          {
            "docs": undefined,
            "type": "list<unknown>",
          },
        ],
      },
      "RequestDataBodyOne": {
        "docs": undefined,
        "properties": {},
      },
      "RequestDataHeaders": {
        "discriminated": false,
        "docs": undefined,
        "union": [
          "string",
          {
            "docs": undefined,
            "type": "map<string, optional<string>>",
          },
        ],
      },
      "RequestDataParsedQuery": {
        "discriminated": false,
        "docs": undefined,
        "union": [
          {
            "docs": undefined,
            "type": "optional<string>",
          },
          {
            "docs": undefined,
            "type": "RequestDataParsedQueryOne",
          },
        ],
      },
      "RequestDataParsedQueryOne": {
        "docs": undefined,
        "properties": {},
      },
      "RequestIngestPriority": {
        "docs": "The priority attributed to the request when received",
        "enum": [
          {
            "docs": undefined,
            "name": "NORMAL",
            "value": "NORMAL",
          },
          {
            "docs": undefined,
            "name": "LOW",
            "value": "LOW",
          },
        ],
      },
      "RequestPaginatedResult": {
        "docs": undefined,
        "properties": {
          "count": {
            "docs": undefined,
            "type": "optional<integer>",
          },
          "models": {
            "docs": undefined,
            "type": "optional<list<Request>>",
          },
          "pagination": {
            "docs": undefined,
            "type": "optional<SeekPagination>",
          },
        },
      },
      "RequestRejectionCause": {
        "docs": undefined,
        "enum": [
          {
            "docs": undefined,
            "name": "SOURCE_ARCHIVED",
            "value": "SOURCE_ARCHIVED",
          },
          {
            "docs": undefined,
            "name": "NO_WEBHOOK",
            "value": "NO_WEBHOOK",
          },
          {
            "docs": undefined,
            "name": "VERIFICATION_FAILED",
            "value": "VERIFICATION_FAILED",
          },
          {
            "docs": undefined,
            "name": "UNSUPPORTED_HTTP_METHOD",
            "value": "UNSUPPORTED_HTTP_METHOD",
          },
          {
            "docs": undefined,
            "name": "UNSUPPORTED_CONTENT_TYPE",
            "value": "UNSUPPORTED_CONTENT_TYPE",
          },
          {
            "docs": undefined,
            "name": "UNPARSABLE_JSON",
            "value": "UNPARSABLE_JSON",
          },
          {
            "docs": undefined,
            "name": "PAYLOAD_TOO_LARGE",
            "value": "PAYLOAD_TOO_LARGE",
          },
          {
            "docs": undefined,
            "name": "INGESTION_FATAL",
            "value": "INGESTION_FATAL",
          },
          {
            "docs": undefined,
            "name": "UNKNOWN",
            "value": "UNKNOWN",
          },
        ],
      },
      "RetriedEvent": {
        "docs": undefined,
        "properties": {
          "attempt": {
            "docs": undefined,
            "type": "optional<EventAttempt>",
          },
          "event": {
            "docs": undefined,
            "type": "Event",
          },
        },
      },
      "RetryRequest": {
        "docs": undefined,
        "properties": {
          "events": {
            "docs": undefined,
            "type": "optional<list<Event>>",
          },
          "request": {
            "docs": undefined,
            "type": "Request",
          },
        },
      },
      "RetryRule": {
        "docs": undefined,
        "properties": {
          "count": {
            "docs": "Maximum number of retries to attempt",
            "type": "optional<integer>",
          },
          "interval": {
            "docs": "Time in MS between each retry",
            "type": "optional<integer>",
          },
          "strategy": {
            "docs": undefined,
            "type": "RetryStrategy",
          },
          "type": "literal<"retry">",
        },
      },
      "RetryStrategy": {
        "docs": "Algorithm to use when calculating delay between retries",
        "enum": [
          {
            "docs": undefined,
            "name": "linear",
            "value": "linear",
          },
          {
            "docs": undefined,
            "name": "exponential",
            "value": "exponential",
          },
        ],
      },
      "Rule": {
        "discriminated": false,
        "docs": undefined,
        "union": [
          {
            "docs": undefined,
            "type": "RetryRule",
          },
          {
            "docs": undefined,
            "type": "AlertRule",
          },
          {
            "docs": undefined,
            "type": "FilterRule",
          },
          {
            "docs": undefined,
            "type": "TransformRule",
          },
          {
            "docs": undefined,
            "type": "DelayRule",
          },
        ],
      },
      "Ruleset": {
        "docs": "Associated [Ruleset](#ruleset-object) object",
        "properties": {
          "archived_at": {
            "docs": "Date the ruleset was archived",
            "type": "optional<datetime>",
          },
          "created_at": {
            "docs": "Date the ruleset was created",
            "type": "datetime",
          },
          "id": {
            "docs": "ID of the ruleset",
            "type": "string",
          },
          "is_team_default": {
            "docs": "Default ruleset of Workspace",
            "type": "boolean",
          },
          "name": {
            "docs": "A unique name for the ruleset",
            "type": "string",
          },
          "rules": {
            "docs": "Array of rules to apply",
            "type": "list<Rule>",
          },
          "team_id": {
            "docs": "ID of the workspace",
            "type": "string",
          },
          "updated_at": {
            "docs": "Date the ruleset was last updated",
            "type": "datetime",
          },
        },
      },
      "RulesetPaginatedResult": {
        "docs": undefined,
        "properties": {
          "count": {
            "docs": undefined,
            "type": "optional<integer>",
          },
          "models": {
            "docs": undefined,
            "type": "optional<list<optional<Ruleset>>>",
          },
          "pagination": {
            "docs": undefined,
            "type": "optional<SeekPagination>",
          },
        },
      },
      "SeekPagination": {
        "docs": undefined,
        "properties": {
          "dir": {
            "docs": undefined,
            "type": "optional<SeekPaginationDir>",
          },
          "limit": {
            "docs": undefined,
            "type": "optional<integer>",
          },
          "next": {
            "docs": undefined,
            "type": "optional<string>",
          },
          "order_by": {
            "docs": undefined,
            "type": "optional<SeekPaginationOrderBy>",
          },
          "prev": {
            "docs": undefined,
            "type": "optional<string>",
          },
        },
      },
      "SeekPaginationDir": {
        "discriminated": false,
        "docs": undefined,
        "union": [
          {
            "docs": undefined,
            "type": "OrderByDirection",
          },
          {
            "docs": undefined,
            "type": "list<OrderByDirection>",
          },
        ],
      },
      "SeekPaginationOrderBy": {
        "discriminated": false,
        "docs": undefined,
        "union": [
          "string",
          {
            "docs": undefined,
            "type": "list<string>",
          },
        ],
      },
      "ShopifyIntegrationConfigs": {
        "docs": undefined,
        "properties": {
          "api_key": {
            "docs": undefined,
            "type": "optional<string>",
          },
          "api_secret": {
            "docs": undefined,
            "type": "optional<string>",
          },
          "rate_limit": {
            "docs": undefined,
            "type": "optional<double>",
          },
          "rate_limit_period": {
            "docs": undefined,
            "type": "optional<ShopifyIntegrationConfigsRateLimitPeriod>",
          },
          "shop": {
            "docs": undefined,
            "type": "optional<string>",
          },
          "webhook_secret_key": "string",
        },
      },
      "ShopifyIntegrationConfigsRateLimitPeriod": {
        "docs": undefined,
        "enum": [
          {
            "docs": undefined,
            "name": "minute",
            "value": "minute",
          },
          {
            "docs": undefined,
            "name": "second",
            "value": "second",
          },
        ],
      },
      "ShortEventData": {
        "docs": undefined,
        "properties": {
          "body": {
            "docs": undefined,
            "type": "optional<ShortEventDataBody>",
          },
          "headers": {
            "docs": undefined,
            "type": "optional<ShortEventDataHeaders>",
          },
          "is_large_payload": {
            "docs": undefined,
            "type": "optional<boolean>",
          },
          "parsed_query": {
            "docs": undefined,
            "type": "optional<ShortEventDataParsedQuery>",
          },
          "path": "string",
          "query": {
            "docs": undefined,
            "type": "optional<string>",
          },
        },
      },
      "ShortEventDataBody": {
        "discriminated": false,
        "docs": undefined,
        "union": [
          "string",
          {
            "docs": undefined,
            "type": "ShortEventDataBodyOne",
          },
          {
            "docs": undefined,
            "type": "list<unknown>",
          },
        ],
      },
      "ShortEventDataBodyOne": {
        "docs": undefined,
        "properties": {},
      },
      "ShortEventDataHeaders": {
        "discriminated": false,
        "docs": undefined,
        "union": [
          "string",
          {
            "docs": undefined,
            "type": "map<string, optional<string>>",
          },
        ],
      },
      "ShortEventDataParsedQuery": {
        "discriminated": false,
        "docs": undefined,
        "union": [
          {
            "docs": undefined,
            "type": "optional<string>",
          },
          {
            "docs": undefined,
            "type": "ShortEventDataParsedQueryOne",
          },
        ],
      },
      "ShortEventDataParsedQueryOne": {
        "docs": undefined,
        "properties": {},
      },
      "Source": {
        "docs": "Associated [Source](#source-object) object",
        "properties": {
          "archived_at": {
            "docs": "Date the source was archived",
            "type": "optional<datetime>",
          },
          "created_at": {
            "docs": "Date the source was created",
            "type": "datetime",
          },
          "id": {
            "docs": "ID of the source",
            "type": "string",
          },
          "integration": {
            "docs": "Integration object",
            "type": "optional<SourceIntegration>",
          },
          "integration_id": {
            "docs": "ID of the integration",
            "type": "optional<string>",
          },
          "name": {
            "docs": "Name for the source",
            "type": "string",
          },
          "team_id": {
            "docs": "ID of the workspace",
            "type": "string",
          },
          "updated_at": {
            "docs": "Date the source was last updated",
            "type": "datetime",
          },
          "url": {
            "docs": "A unique URL that must be supplied to your webhook's provider",
            "type": "string",
          },
        },
      },
      "SourceIntegration": {
        "docs": "Integration object",
        "properties": {
          "features": {
            "docs": "List of enabled features",
            "type": "list<IntegrationFeature>",
          },
          "id": {
            "docs": "ID of the integration",
            "type": "string",
          },
          "label": {
            "docs": "Label of the integration",
            "type": "string",
          },
          "provider": {
            "docs": undefined,
            "type": "IntegrationProvider",
          },
        },
      },
      "SourcePaginatedResult": {
        "docs": undefined,
        "properties": {
          "count": {
            "docs": undefined,
            "type": "optional<integer>",
          },
          "models": {
            "docs": undefined,
            "type": "optional<list<Source>>",
          },
          "pagination": {
            "docs": undefined,
            "type": "optional<SeekPagination>",
          },
        },
      },
      "TestTransformationRequestEnv": {
        "docs": "Key-value environment variables to be passed to the transformation",
        "properties": {},
      },
      "TestTransformationRequestRequest": {
        "docs": "Request input to use for the transformation execution",
        "properties": {
          "body": {
            "docs": "Body of the request",
            "type": "optional<TestTransformationRequestRequestBody>",
          },
          "headers": {
            "docs": "Headers of the request",
            "type": "map<string, string>",
          },
          "parsed_query": {
            "docs": "JSON representation of the query params",
            "type": "optional<TestTransformationRequestRequestParsedQuery>",
          },
          "path": {
            "docs": "Path of the request",
            "type": "optional<string>",
          },
          "query": {
            "docs": "String representation of the query params of the request",
            "type": "optional<string>",
          },
        },
      },
      "TestTransformationRequestRequestBody": {
        "discriminated": false,
        "docs": "Body of the request",
        "union": [
          {
            "docs": undefined,
            "type": "TestTransformationRequestRequestBodyZero",
          },
          "string",
        ],
      },
      "TestTransformationRequestRequestBodyZero": {
        "docs": undefined,
        "properties": {},
      },
      "TestTransformationRequestRequestParsedQuery": {
        "docs": "JSON representation of the query params",
        "properties": {},
      },
      "ToggleWebhookNotifications": {
        "docs": undefined,
        "properties": {
          "enabled": "boolean",
          "source_id": "string",
          "topics": {
            "docs": undefined,
            "type": "optional<list<TopicsValue>>",
          },
        },
      },
      "TopicsValue": {
        "docs": "Supported topics",
        "enum": [
          {
            "docs": undefined,
            "name": "IssueOpened",
            "value": "issue.opened",
          },
          {
            "docs": undefined,
            "name": "IssueUpdated",
            "value": "issue.updated",
          },
          {
            "docs": undefined,
            "name": "DeprecatedAttemptFailed",
            "value": "deprecated.attempt-failed",
          },
          {
            "docs": undefined,
            "name": "EventSuccessful",
            "value": "event.successful",
          },
        ],
      },
      "TransformFull": {
        "docs": undefined,
        "properties": {
          "transformation": {
            "docs": "You can optionally define a new transformation while creating a transform rule",
            "type": "optional<TransformFullTransformation>",
          },
          "transformation_id": {
            "docs": "ID of the attached transformation object. Optional input, always set once the rule is defined",
            "type": "optional<string>",
          },
          "type": "literal<"transform">",
        },
      },
      "TransformFullTransformation": {
        "docs": "You can optionally define a new transformation while creating a transform rule",
        "properties": {
          "code": {
            "docs": "A string representation of your JavaScript (ES6) code to run",
            "type": "string",
          },
          "env": {
            "docs": "A key-value object of environment variables to encrypt and expose to your transformation code",
            "type": "optional<map<string, optional<string>>>",
          },
          "name": {
            "docs": "The unique name of the transformation",
            "type": "string",
          },
        },
      },
      "TransformReference": {
        "docs": undefined,
        "properties": {
          "transformation_id": {
            "docs": "ID of the attached transformation object. Optional input, always set once the rule is defined",
            "type": "string",
          },
          "type": "literal<"transform">",
        },
      },
      "TransformRule": {
        "discriminated": false,
        "docs": undefined,
        "union": [
          {
            "docs": undefined,
            "type": "TransformReference",
          },
          {
            "docs": undefined,
            "type": "TransformFull",
          },
        ],
      },
      "Transformation": {
        "docs": undefined,
        "properties": {
          "code": {
            "docs": "JavaScript code to be executed",
            "type": "string",
          },
          "created_at": {
            "docs": "Date the transformation was created",
            "type": "datetime",
          },
          "encrypted_env": {
            "docs": undefined,
            "type": "optional<string>",
          },
          "env": {
            "docs": "Key-value environment variables to be passed to the transformation",
            "type": "optional<map<string, optional<string>>>",
          },
          "id": {
            "docs": "ID of the transformation",
            "type": "string",
          },
          "iv": {
            "docs": undefined,
            "type": "optional<string>",
          },
          "name": {
            "docs": "A unique, human-friendly name for the transformation",
            "type": "string",
          },
          "team_id": {
            "docs": "ID of the workspace",
            "type": "string",
          },
          "updated_at": {
            "docs": "Date the transformation was last updated",
            "type": "datetime",
          },
        },
      },
      "TransformationExecution": {
        "docs": undefined,
        "properties": {
          "created_at": "datetime",
          "id": "string",
          "issue_id": {
            "docs": undefined,
            "type": "optional<string>",
          },
          "log_level": {
            "docs": undefined,
            "type": "TransformationExecutionLogLevel",
          },
          "logs": {
            "docs": undefined,
            "type": "list<ConsoleLine>",
          },
          "original_event_data": {
            "docs": undefined,
            "type": "optional<ShortEventData>",
          },
          "original_event_data_id": "string",
          "team_id": "string",
          "transformation_id": "string",
          "transformed_event_data": {
            "docs": undefined,
            "type": "optional<ShortEventData>",
          },
          "transformed_event_data_id": "string",
          "updated_at": "datetime",
          "webhook_id": "string",
        },
      },
      "TransformationExecutionLogLevel": {
        "docs": "The minimum log level to open the issue on",
        "enum": [
          {
            "docs": undefined,
            "name": "debug",
            "value": "debug",
          },
          {
            "docs": undefined,
            "name": "info",
            "value": "info",
          },
          {
            "docs": undefined,
            "name": "warn",
            "value": "warn",
          },
          {
            "docs": undefined,
            "name": "error",
            "value": "error",
          },
          {
            "docs": undefined,
            "name": "fatal",
            "value": "fatal",
          },
        ],
      },
      "TransformationExecutionPaginatedResult": {
        "docs": undefined,
        "properties": {
          "count": {
            "docs": undefined,
            "type": "optional<integer>",
          },
          "models": {
            "docs": undefined,
            "type": "optional<list<TransformationExecution>>",
          },
          "pagination": {
            "docs": undefined,
            "type": "optional<SeekPagination>",
          },
        },
      },
      "TransformationExecutorOutput": {
        "docs": undefined,
        "properties": {
          "console": {
            "docs": undefined,
            "type": "optional<list<ConsoleLine>>",
          },
          "execution_id": {
            "docs": undefined,
            "type": "optional<string>",
          },
          "log_level": {
            "docs": undefined,
            "type": "TransformationExecutionLogLevel",
          },
          "request": {
            "docs": undefined,
            "type": "optional<TransformationExecutorOutputRequest>",
          },
          "request_id": {
            "docs": undefined,
            "type": "optional<string>",
          },
          "transformation_id": {
            "docs": undefined,
            "type": "optional<string>",
          },
        },
      },
      "TransformationExecutorOutputRequest": {
        "docs": undefined,
        "properties": {
          "body": {
            "docs": undefined,
            "type": "optional<TransformationExecutorOutputRequestBody>",
          },
          "headers": {
            "docs": undefined,
            "type": "optional<TransformationExecutorOutputRequestHeaders>",
          },
          "parsed_query": {
            "docs": undefined,
            "type": "optional<TransformationExecutorOutputRequestParsedQuery>",
          },
          "path": "string",
          "query": {
            "docs": undefined,
            "type": "optional<TransformationExecutorOutputRequestQuery>",
          },
        },
      },
      "TransformationExecutorOutputRequestBody": {
        "discriminated": false,
        "docs": undefined,
        "union": [
          {
            "docs": undefined,
            "type": "optional<string>",
          },
          {
            "docs": undefined,
            "type": "TransformationExecutorOutputRequestBodyOne",
          },
        ],
      },
      "TransformationExecutorOutputRequestBodyOne": {
        "docs": undefined,
        "properties": {},
      },
      "TransformationExecutorOutputRequestHeaders": {
        "discriminated": false,
        "docs": undefined,
        "union": [
          "string",
          {
            "docs": undefined,
            "type": "map<string, unknown>",
          },
        ],
      },
      "TransformationExecutorOutputRequestParsedQuery": {
        "discriminated": false,
        "docs": undefined,
        "union": [
          {
            "docs": undefined,
            "type": "optional<string>",
          },
          {
            "docs": undefined,
            "type": "TransformationExecutorOutputRequestParsedQueryOne",
          },
        ],
      },
      "TransformationExecutorOutputRequestParsedQueryOne": {
        "docs": undefined,
        "properties": {},
      },
      "TransformationExecutorOutputRequestQuery": {
        "discriminated": false,
        "docs": undefined,
        "union": [
          {
            "docs": undefined,
            "type": "optional<TransformationExecutorOutputRequestQueryZero>",
          },
          "string",
        ],
      },
      "TransformationExecutorOutputRequestQueryZero": {
        "docs": undefined,
        "properties": {},
      },
      "TransformationFailedMeta": {
        "docs": undefined,
        "properties": {
          "transformation_id": "string",
        },
      },
      "TransformationIssue": {
        "docs": "Transformation issue",
        "properties": {
          "aggregation_keys": {
            "docs": undefined,
            "type": "TransformationIssueAggregationKeys",
          },
          "auto_resolved_at": {
            "docs": undefined,
            "type": "optional<datetime>",
          },
          "created_at": {
            "docs": "ISO timestamp for when the issue was created",
            "type": "string",
          },
          "dismissed_at": {
            "docs": "ISO timestamp for when the issue was dismissed",
            "type": "optional<datetime>",
          },
          "first_seen_at": {
            "docs": "ISO timestamp for when the issue was first opened",
            "type": "datetime",
          },
          "id": {
            "docs": "Issue ID",
            "type": "string",
          },
          "last_seen_at": {
            "docs": "ISO timestamp for when the issue last occured",
            "type": "datetime",
          },
          "last_updated_by": {
            "docs": "ID of the team member who last updated the issue status",
            "type": "optional<string>",
          },
          "merged_with": {
            "docs": undefined,
            "type": "optional<string>",
          },
          "opened_at": {
            "docs": "ISO timestamp for when the issue was last opened",
            "type": "datetime",
          },
          "reference": {
            "docs": undefined,
            "type": "TransformationIssueReference",
          },
          "status": {
            "docs": undefined,
            "type": "IssueStatus",
          },
          "team_id": {
            "docs": "ID of the workspace",
            "type": "string",
          },
          "updated_at": {
            "docs": "ISO timestamp for when the issue was last updated",
            "type": "string",
          },
        },
      },
      "TransformationIssueAggregationKeys": {
        "docs": "Keys used as the aggregation keys a 'transformation' type issue",
        "properties": {
          "log_level": {
            "docs": undefined,
            "type": "TransformationExecutionLogLevel",
          },
          "transformation_id": {
            "docs": undefined,
            "type": "list<string>",
          },
        },
      },
      "TransformationIssueData": {
        "docs": "Transformation issue data",
        "properties": {
          "transformation_execution": {
            "docs": undefined,
            "type": "TransformationExecution",
          },
          "trigger_attempt": {
            "docs": undefined,
            "type": "optional<EventAttempt>",
          },
        },
      },
      "TransformationIssueReference": {
        "docs": "Reference to the event request transformation an issue is being created for.",
        "properties": {
          "transformation_execution_id": "string",
          "trigger_event_request_transformation_id": {
            "docs": "Deprecated but still found on historical issues",
            "type": "optional<string>",
          },
        },
      },
      "TransformationIssueWithData": {
        "docs": "Transformation issue",
        "properties": {
          "aggregation_keys": {
            "docs": undefined,
            "type": "TransformationIssueAggregationKeys",
          },
          "auto_resolved_at": {
            "docs": undefined,
            "type": "optional<datetime>",
          },
          "created_at": {
            "docs": "ISO timestamp for when the issue was created",
            "type": "string",
          },
          "data": {
            "docs": undefined,
            "type": "optional<TransformationIssueData>",
          },
          "dismissed_at": {
            "docs": "ISO timestamp for when the issue was dismissed",
            "type": "optional<datetime>",
          },
          "first_seen_at": {
            "docs": "ISO timestamp for when the issue was first opened",
            "type": "datetime",
          },
          "id": {
            "docs": "Issue ID",
            "type": "string",
          },
          "last_seen_at": {
            "docs": "ISO timestamp for when the issue last occured",
            "type": "datetime",
          },
          "last_updated_by": {
            "docs": "ID of the team member who last updated the issue status",
            "type": "optional<string>",
          },
          "merged_with": {
            "docs": undefined,
            "type": "optional<string>",
          },
          "opened_at": {
            "docs": "ISO timestamp for when the issue was last opened",
            "type": "datetime",
          },
          "reference": {
            "docs": undefined,
            "type": "TransformationIssueReference",
          },
          "status": {
            "docs": undefined,
            "type": "IssueStatus",
          },
          "team_id": {
            "docs": "ID of the workspace",
            "type": "string",
          },
          "updated_at": {
            "docs": "ISO timestamp for when the issue was last updated",
            "type": "string",
          },
        },
      },
      "TransformationPaginatedResult": {
        "docs": undefined,
        "properties": {
          "count": {
            "docs": undefined,
            "type": "optional<integer>",
          },
          "models": {
            "docs": undefined,
            "type": "optional<list<Transformation>>",
          },
          "pagination": {
            "docs": undefined,
            "type": "optional<SeekPagination>",
          },
        },
      },
      "TriggerBookmarkRequestTarget": {
        "docs": "Bookmark target",
        "enum": [
          {
            "docs": undefined,
            "name": "http",
            "value": "http",
          },
          {
            "docs": undefined,
            "name": "cli",
            "value": "cli",
          },
        ],
      },
      "UpdateConnectionRequestRuleset": {
        "docs": "Ruleset input object",
        "properties": {
          "is_team_default": {
            "docs": undefined,
            "type": "optional<boolean>",
          },
          "name": {
            "docs": "Name for the ruleset",
            "type": "string",
          },
          "rules": {
            "docs": "Array of rules to apply",
            "type": "optional<list<Rule>>",
          },
        },
      },
      "UpdateDestinationRequestRateLimitPeriod": {
        "docs": "Period to rate limit attempts",
        "enum": [
          {
            "docs": undefined,
            "name": "second",
            "value": "second",
          },
          {
            "docs": undefined,
            "name": "minute",
            "value": "minute",
          },
          {
            "docs": undefined,
            "name": "hour",
            "value": "hour",
          },
        ],
      },
      "UpdateIntegrationRequestConfigs": {
        "discriminated": false,
        "docs": "Decrypted Key/Value object of the associated configuration for that provider",
        "union": [
          {
            "docs": undefined,
            "type": "HmacIntegrationConfigs",
          },
          {
            "docs": undefined,
            "type": "ApiKeyIntegrationConfigs",
          },
          {
            "docs": undefined,
            "type": "HandledHmacConfigs",
          },
          {
            "docs": undefined,
            "type": "BasicAuthIntegrationConfigs",
          },
          {
            "docs": undefined,
            "type": "ShopifyIntegrationConfigs",
          },
        ],
      },
      "UpdateIssueRequestStatus": {
        "docs": "New status",
        "enum": [
          {
            "docs": undefined,
            "name": "OPENED",
            "value": "OPENED",
          },
          {
            "docs": undefined,
            "name": "IGNORED",
            "value": "IGNORED",
          },
          {
            "docs": undefined,
            "name": "ACKNOWLEDGED",
            "value": "ACKNOWLEDGED",
          },
          {
            "docs": undefined,
            "name": "RESOLVED",
            "value": "RESOLVED",
          },
        ],
      },
      "UpdateIssueTriggerRequestConfigs": {
        "discriminated": false,
        "docs": "Configuration object for the specific issue type selected",
        "union": [
          {
            "docs": undefined,
            "type": "IssueTriggerDeliveryConfigs",
          },
          {
            "docs": undefined,
            "type": "IssueTriggerTransformationConfigs",
          },
          {
            "docs": undefined,
            "type": "IssueTriggerBackpressureConfigs",
          },
        ],
      },
      "UpdateTransformationRequestEnvValue": {
        "discriminated": false,
        "docs": undefined,
        "union": [
          "string",
          "double",
        ],
      },
      "UpsertConnectionRequestDestination": {
        "docs": "Destination input object",
        "properties": {
          "cli_path": {
            "docs": "Path for the CLI destination",
            "type": "optional<string>",
          },
          "name": {
            "docs": "Name for the destination",
            "type": "string",
          },
          "path_forwarding_disabled": {
            "docs": undefined,
            "type": "optional<boolean>",
          },
          "rate_limit": {
            "docs": "Limit event attempts to receive per period",
            "type": "optional<integer>",
          },
          "rate_limit_period": {
            "docs": "Period to rate limit attempts",
            "type": "optional<UpsertConnectionRequestDestinationRateLimitPeriod>",
          },
          "url": {
            "docs": "Endpoint of the destination",
            "type": "optional<string>",
          },
        },
      },
      "UpsertConnectionRequestDestinationRateLimitPeriod": {
        "docs": "Period to rate limit attempts",
        "enum": [
          {
            "docs": undefined,
            "name": "second",
            "value": "second",
          },
          {
            "docs": undefined,
            "name": "minute",
            "value": "minute",
          },
          {
            "docs": undefined,
            "name": "hour",
            "value": "hour",
          },
        ],
      },
      "UpsertConnectionRequestRuleset": {
        "docs": "Ruleset input object",
        "properties": {
          "is_team_default": {
            "docs": undefined,
            "type": "optional<boolean>",
          },
          "name": {
            "docs": "Name for the ruleset",
            "type": "string",
          },
          "rules": {
            "docs": "Array of rules to apply",
            "type": "optional<list<Rule>>",
          },
        },
      },
      "UpsertConnectionRequestSource": {
        "docs": "Source input object",
        "properties": {
          "name": {
            "docs": "A unique name for the source",
            "type": "string",
          },
        },
      },
      "UpsertDestinationRequestRateLimitPeriod": {
        "docs": "Period to rate limit attempts",
        "enum": [
          {
            "docs": undefined,
            "name": "second",
            "value": "second",
          },
          {
            "docs": undefined,
            "name": "minute",
            "value": "minute",
          },
          {
            "docs": undefined,
            "name": "hour",
            "value": "hour",
          },
        ],
      },
      "UpsertIssueTriggerRequestConfigs": {
        "discriminated": false,
        "docs": "Configuration object for the specific issue type selected",
        "union": [
          {
            "docs": undefined,
            "type": "IssueTriggerDeliveryConfigs",
          },
          {
            "docs": undefined,
            "type": "IssueTriggerTransformationConfigs",
          },
          {
            "docs": undefined,
            "type": "IssueTriggerBackpressureConfigs",
          },
        ],
      },
      "UpsertTransformationRequestEnvValue": {
        "discriminated": false,
        "docs": undefined,
        "union": [
          "string",
          "double",
        ],
      },
    },
  },
  "rootApiFile": {
    "auth": "bearer",
    "default-environment": "default",
    "display-name": "Hookdeck Admin REST API",
    "environments": {
      "default": "https://api.hookdeck.com/2023-01-01",
    },
    "error-discrimination": {
      "strategy": "status-code",
    },
    "imports": {
      "root": "__package__.yml",
    },
    "name": "api",
  },
}
`;
