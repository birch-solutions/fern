// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`open api parser permit simple 1`] = `
{
  "definitionFiles": {
    "__package__.yml": {
      "errors": {
        "UnprocessableEntityError": {
          "status-code": 422,
          "type": "HttpValidationError",
        },
      },
      "service": undefined,
      "types": {
        "ActionBlockEditable": {
          "docs": undefined,
          "properties": {
            "attributes": {
              "docs": undefined,
              "type": "optional<map<string, unknown>>",
            },
            "description": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "name": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "ActionBlockRead": {
          "docs": undefined,
          "properties": {
            "attributes": {
              "docs": undefined,
              "type": "optional<map<string, unknown>>",
            },
            "description": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": "string",
            "key": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "name": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "AddRolePermissions": {
          "docs": undefined,
          "properties": {
            "permissions": {
              "docs": "List of permissions to assign to the role. If a permission is already granted to the role it is skipped. Each permission can be either a resource action id, or \`{resource_key}:{action_key}\`, i.e: the "permission name".",
              "type": "list<string>",
            },
          },
        },
        "AttributeBlockEditable": {
          "docs": undefined,
          "properties": {
            "description": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "type": {
              "docs": "The type of the attribute, we currently support: \`bool\`, \`number\` (ints, floats), \`time\` (a timestamp), \`string\`, and \`json\`.",
              "type": "AttributeType",
            },
          },
        },
        "AttributeBlockRead": {
          "docs": undefined,
          "properties": {
            "description": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": "string",
            "key": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "type": {
              "docs": "The type of the attribute, we currently support: \`bool\`, \`number\` (ints, floats), \`time\` (a timestamp), \`string\`, and \`json\`.",
              "type": "AttributeType",
            },
          },
        },
        "AttributeType": {
          "docs": "supported attribute primitives",
          "enum": [
            {
              "docs": undefined,
              "name": "bool",
              "value": "bool",
            },
            {
              "docs": undefined,
              "name": "number",
              "value": "number",
            },
            {
              "docs": undefined,
              "name": "string",
              "value": "string",
            },
            {
              "docs": undefined,
              "name": "time",
              "value": "time",
            },
            {
              "docs": undefined,
              "name": "array",
              "value": "array",
            },
            {
              "docs": undefined,
              "name": "json",
              "value": "json",
            },
          ],
        },
        "BulkRoleAssignmentReport": {
          "docs": undefined,
          "properties": {
            "assignments_created": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "BulkRoleUnAssignmentReport": {
          "docs": undefined,
          "properties": {
            "assignments_removed": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "ConditionSetRead": {
          "docs": undefined,
          "properties": {
            "autogenerated": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "conditions": {
              "docs": "a boolean expression that consists of multiple conditions, with and/or logic.",
              "type": "optional<map<string, unknown>>",
            },
            "created_at": "datetime",
            "description": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "environment_id": "string",
            "id": "string",
            "key": "string",
            "name": "string",
            "organization_id": "string",
            "parent_id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "project_id": "string",
            "resource": {
              "docs": undefined,
              "type": "optional<ResourceRead>",
            },
            "resource_id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "type": {
              "docs": "the type of the set: UserSet or ResourceSet",
              "type": "optional<ConditionSetType>",
            },
            "updated_at": "datetime",
          },
        },
        "ConditionSetRuleRead": {
          "docs": undefined,
          "properties": {
            "created_at": "datetime",
            "environment_id": "string",
            "id": "string",
            "key": "string",
            "organization_id": "string",
            "permission": "string",
            "project_id": "string",
            "resource_set": "string",
            "updated_at": "datetime",
            "user_set": "string",
          },
        },
        "ConditionSetType": {
          "docs": "An enumeration.",
          "enum": [
            {
              "docs": undefined,
              "name": "userset",
              "value": "userset",
            },
            {
              "docs": undefined,
              "name": "resourceset",
              "value": "resourceset",
            },
          ],
        },
        "EnvironmentCopyConflictStrategy": {
          "docs": "Action to take when detecting a conflict when copying. Only applies to copying into an existing environment",
          "enum": [
            {
              "docs": undefined,
              "name": "fail",
              "value": "fail",
            },
            {
              "docs": undefined,
              "name": "overwrite",
              "value": "overwrite",
            },
          ],
        },
        "EnvironmentCopyScope": {
          "docs": undefined,
          "properties": {
            "resource_sets": {
              "docs": "Resource sets to copy",
              "type": "optional<EnvironmentCopyScopeFilters>",
            },
            "resources": {
              "docs": "Resources to copy",
              "type": "optional<EnvironmentCopyScopeFilters>",
            },
            "roles": {
              "docs": "Roles to copy",
              "type": "optional<EnvironmentCopyScopeFilters>",
            },
            "user_sets": {
              "docs": "User sets to copy",
              "type": "optional<EnvironmentCopyScopeFilters>",
            },
          },
        },
        "EnvironmentCopyScopeFilters": {
          "docs": undefined,
          "properties": {
            "exclude": {
              "docs": "Object to exclude (use * as wildcard)",
              "type": "optional<list<string>>",
            },
            "include": {
              "docs": "Objects to include (use * as wildcard)",
              "type": "optional<list<string>>",
            },
          },
        },
        "EnvironmentCopyTarget": {
          "docs": undefined,
          "properties": {
            "existing": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "new": {
              "docs": "Description of the environment to create. This environment must not already exist.",
              "type": "optional<EnvironmentCreate>",
            },
          },
        },
        "EnvironmentCreate": {
          "docs": undefined,
          "properties": {
            "custom_branch_name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "description": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "jwks": {
              "docs": "jwks for element frontend only login",
              "type": "optional<JwksObj>",
            },
            "key": "string",
            "name": "string",
            "settings": {
              "docs": "the settings for this environment",
              "type": "optional<map<string, unknown>>",
            },
          },
        },
        "EnvironmentRead": {
          "docs": undefined,
          "properties": {
            "created_at": "datetime",
            "custom_branch_name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "description": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": "string",
            "jwks": {
              "docs": "jwks for element frontend only login",
              "type": "optional<JwksObj>",
            },
            "key": "string",
            "name": "string",
            "organization_id": "string",
            "project_id": "string",
            "settings": {
              "docs": "the settings for this environment",
              "type": "optional<map<string, unknown>>",
            },
            "updated_at": "datetime",
          },
        },
        "EnvironmentStats": {
          "docs": undefined,
          "properties": {
            "created_at": "datetime",
            "custom_branch_name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "description": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": "string",
            "jwks": {
              "docs": "jwks for element frontend only login",
              "type": "optional<JwksObj>",
            },
            "key": "string",
            "name": "string",
            "organization_id": "string",
            "pdp_configs": {
              "docs": undefined,
              "type": "list<PdpConfigRead>",
            },
            "project_id": "string",
            "settings": {
              "docs": "the settings for this environment",
              "type": "optional<map<string, unknown>>",
            },
            "stats": {
              "docs": undefined,
              "type": "Statistics",
            },
            "updated_at": "datetime",
          },
        },
        "HttpValidationError": {
          "docs": undefined,
          "properties": {
            "detail": {
              "docs": undefined,
              "type": "optional<list<ValidationError>>",
            },
          },
        },
        "IdentityRead": {
          "docs": undefined,
          "properties": {
            "auth0_info": {
              "docs": "Raw user info json coming from our identity provider and matching a specific account identity",
              "type": "map<string, unknown>",
            },
            "email": "string",
            "email_verified": "boolean",
            "provider": "string",
            "sub": "string",
            "user_id": "string",
          },
        },
        "InviteRead": {
          "docs": undefined,
          "properties": {
            "created_at": "datetime",
            "email": "string",
            "failed_reason": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": "string",
            "invite_code": "string",
            "member_id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "organization_id": "string",
            "role": {
              "docs": "The role the member will be assigned with",
              "type": "optional<MemberAccessLevel>",
            },
            "status": {
              "docs": "The status of the invite (pending, failed, etc)",
              "type": "InviteStatus",
            },
          },
        },
        "InviteStatus": {
          "docs": "An enumeration.",
          "enum": [
            {
              "docs": undefined,
              "name": "pending",
              "value": "pending",
            },
            {
              "docs": undefined,
              "name": "accepted",
              "value": "accepted",
            },
            {
              "docs": undefined,
              "name": "failed",
              "value": "failed",
            },
            {
              "docs": undefined,
              "name": "canceled",
              "value": "canceled",
            },
          ],
        },
        "JwksObj": {
          "docs": undefined,
          "properties": {
            "keys": {
              "docs": "The keys to match against the request headers",
              "type": "list<map<string, unknown>>",
            },
          },
        },
        "ListConditionSetsResponse": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "PaginatedResultConditionSetRead",
            },
            {
              "docs": undefined,
              "type": "list<ConditionSetRead>",
            },
          ],
        },
        "ListResourcesResponse": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "PaginatedResultResourceRead",
            },
            {
              "docs": undefined,
              "type": "list<ResourceRead>",
            },
          ],
        },
        "ListRolesResponse": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "PaginatedResultRoleRead",
            },
            {
              "docs": undefined,
              "type": "list<RoleRead>",
            },
          ],
        },
        "ListTenantsResponse": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "PaginatedResultTenantRead",
            },
            {
              "docs": undefined,
              "type": "list<TenantRead>",
            },
          ],
        },
        "MemberAccessLevel": {
          "docs": "An enumeration.",
          "enum": [
            {
              "docs": undefined,
              "name": "admin",
              "value": "admin",
            },
            {
              "docs": undefined,
              "name": "write",
              "value": "write",
            },
            {
              "docs": undefined,
              "name": "read",
              "value": "read",
            },
            {
              "docs": undefined,
              "name": "no_access",
              "value": "no_access",
            },
          ],
        },
        "MemberAccessObj": {
          "docs": "An enumeration.",
          "enum": [
            {
              "docs": undefined,
              "name": "org",
              "value": "org",
            },
            {
              "docs": undefined,
              "name": "project",
              "value": "project",
            },
            {
              "docs": undefined,
              "name": "env",
              "value": "env",
            },
          ],
        },
        "OnboardingStep": {
          "docs": "An enumeration.",
          "enum": [
            {
              "docs": undefined,
              "name": "create_organization",
              "value": "create_organization",
            },
            {
              "docs": undefined,
              "name": "create_project",
              "value": "create_project",
            },
            {
              "docs": undefined,
              "name": "create_resource",
              "value": "create_resource",
            },
            {
              "docs": undefined,
              "name": "create_actions",
              "value": "create_actions",
            },
            {
              "docs": undefined,
              "name": "assign_permissions",
              "value": "assign_permissions",
            },
            {
              "docs": undefined,
              "name": "assign_user_roles",
              "value": "assign_user_roles",
            },
            {
              "docs": undefined,
              "name": "connect_sdk",
              "value": "connect_sdk",
            },
            {
              "docs": undefined,
              "name": "done",
              "value": "done",
            },
          ],
        },
        "OrgMemberReadWithGrants": {
          "docs": undefined,
          "properties": {
            "created_at": "datetime",
            "email": "string",
            "email_verified": "boolean",
            "family_name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "given_name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "grants": {
              "docs": undefined,
              "type": "list<Permission>",
            },
            "id": "string",
            "identities": {
              "docs": undefined,
              "type": "list<IdentityRead>",
            },
            "invite": {
              "docs": undefined,
              "type": "optional<InviteRead>",
            },
            "is_onboarding": "boolean",
            "is_superuser": "boolean",
            "last_ip": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "last_login": {
              "docs": undefined,
              "type": "optional<datetime>",
            },
            "logins_count": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "onboarding_step": {
              "docs": "the step the user is currently going through in onboarding",
              "type": "OnboardingStep",
            },
            "picture": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "settings": {
              "docs": "Custom permit.io dashboard settings, such as preferred theme, etc.",
              "type": "map<string, unknown>",
            },
          },
        },
        "OrganizationRead": {
          "docs": undefined,
          "properties": {
            "created_at": "datetime",
            "id": "string",
            "is_enterprise": "boolean",
            "key": "string",
            "name": "string",
            "settings": {
              "docs": "the settings for this project",
              "type": "optional<map<string, unknown>>",
            },
            "updated_at": "datetime",
          },
        },
        "OrganizationReadWithApiKey": {
          "docs": undefined,
          "properties": {
            "api_key_id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "api_key_secret": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "created_at": "datetime",
            "id": "string",
            "is_enterprise": "boolean",
            "key": "string",
            "name": "string",
            "settings": {
              "docs": "the settings for this project",
              "type": "optional<map<string, unknown>>",
            },
            "updated_at": "datetime",
          },
        },
        "PaginatedResultConditionSetRead": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": "List of Condition Sets",
              "type": "list<ConditionSetRead>",
            },
            "page_count": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "total_count": "integer",
          },
        },
        "PaginatedResultResourceRead": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": "List of Resources",
              "type": "list<ResourceRead>",
            },
            "page_count": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "total_count": "integer",
          },
        },
        "PaginatedResultResourceRoleRead": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": "List of Resource Roles",
              "type": "list<ResourceRoleRead>",
            },
            "page_count": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "total_count": "integer",
          },
        },
        "PaginatedResultRoleRead": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": "List of Roles",
              "type": "list<RoleRead>",
            },
            "page_count": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "total_count": "integer",
          },
        },
        "PaginatedResultTenantRead": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": "List of Tenants",
              "type": "list<TenantRead>",
            },
            "page_count": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "total_count": "integer",
          },
        },
        "PaginatedResultUserRead": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": "List of Users",
              "type": "list<UserRead>",
            },
            "page_count": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "total_count": "integer",
          },
        },
        "PdpConfigRead": {
          "docs": undefined,
          "properties": {
            "client_secret": "string",
            "environment_id": "string",
            "id": "string",
            "name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "organization_id": "string",
            "project_id": "string",
          },
        },
        "Permission": {
          "docs": undefined,
          "properties": {
            "access_level": {
              "docs": undefined,
              "type": "MemberAccessLevel",
            },
            "environment_id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "environment_key": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "environment_name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "object_type": {
              "docs": undefined,
              "type": "MemberAccessObj",
            },
            "organization_id": "string",
            "organization_key": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "organization_name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "project_id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "project_key": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "project_name": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "ProjectRead": {
          "docs": undefined,
          "properties": {
            "active_policy_repo_id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "created_at": "datetime",
            "description": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": "string",
            "key": "string",
            "name": "string",
            "organization_id": "string",
            "settings": {
              "docs": "the settings for this project",
              "type": "optional<map<string, unknown>>",
            },
            "updated_at": "datetime",
            "urn_namespace": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "RelationsBlock": {
          "docs": "A actions definition block, typically contained within a resource type definition block.
The actions represents the ways you can interact with a protected resource.",
          "type": "map<string, unknown>",
        },
        "RemoveRolePermissions": {
          "docs": undefined,
          "properties": {
            "permissions": {
              "docs": "List of permissions to remove from the role. If a permission is not found it is skipped. Each permission can be either a resource action id, or \`{resource_key}:{action_key}\`,i.e: the "permission name".",
              "type": "list<string>",
            },
          },
        },
        "ResourceActionGroupRead": {
          "docs": undefined,
          "properties": {
            "actions": {
              "docs": undefined,
              "type": "optional<list<string>>",
            },
            "attributes": {
              "docs": "optional dictionary of key-value pairs that can be used to store arbitrary metadata about this action group. This metadata can be used to filter action groups using query parameters with attr_ prefix",
              "type": "optional<map<string, unknown>>",
            },
            "created_at": "datetime",
            "description": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "environment_id": "string",
            "id": "string",
            "key": "string",
            "name": "string",
            "organization_id": "string",
            "project_id": "string",
            "resource_id": "string",
            "updated_at": "datetime",
          },
        },
        "ResourceActionRead": {
          "docs": undefined,
          "properties": {
            "attributes": {
              "docs": "optional dictionary of key-value pairs that can be used to store arbitrary metadata about this action. This metadata can be used to filter actions using query parameters with attr_ prefix",
              "type": "optional<map<string, unknown>>",
            },
            "created_at": "datetime",
            "description": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "environment_id": "string",
            "id": "string",
            "key": "string",
            "name": "string",
            "organization_id": "string",
            "permission_name": "string",
            "project_id": "string",
            "resource_id": "string",
            "updated_at": "datetime",
          },
        },
        "ResourceAttributeCreate": {
          "docs": undefined,
          "properties": {
            "description": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "key": "string",
            "type": {
              "docs": "The type of the attribute, we currently support: \`bool\`, \`number\` (ints, floats), \`time\` (a timestamp), \`string\`, and \`json\`.",
              "type": "AttributeType",
            },
          },
        },
        "ResourceAttributeRead": {
          "docs": undefined,
          "properties": {
            "built_in": "boolean",
            "created_at": "datetime",
            "description": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "environment_id": "string",
            "id": "string",
            "key": "string",
            "organization_id": "string",
            "project_id": "string",
            "resource_id": "string",
            "resource_key": "string",
            "type": {
              "docs": "The type of the attribute, we currently support: \`bool\`, \`number\` (ints, floats), \`time\` (a timestamp), \`string\`, and \`json\`.",
              "type": "AttributeType",
            },
            "updated_at": "datetime",
          },
        },
        "ResourceAttributeUpdate": {
          "docs": undefined,
          "properties": {
            "description": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "type": {
              "docs": "The type of the attribute, we currently support: \`bool\`, \`number\` (ints, floats), \`time\` (a timestamp), \`string\`, and \`json\`.",
              "type": "optional<AttributeType>",
            },
          },
        },
        "ResourceInstanceRead": {
          "docs": undefined,
          "properties": {
            "attributes": {
              "docs": "Arbitraty resource attributes that will be used to enforce attribute-based access control policies.",
              "type": "optional<map<string, unknown>>",
            },
            "created_at": "datetime",
            "environment_id": "string",
            "id": "string",
            "key": "string",
            "organization_id": "string",
            "project_id": "string",
            "resource": "string",
            "resource_id": "string",
            "tenant": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "tenant_id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "updated_at": "datetime",
          },
        },
        "ResourceRead": {
          "docs": undefined,
          "properties": {
            "action_groups": {
              "docs": undefined,
              "type": "optional<map<string, list<string>>>",
            },
            "actions": {
              "docs": "
        A actions definition block, typically contained within a resource type definition block.
        The actions represents the ways you can interact with a protected resource.
        ",
              "type": "optional<map<string, ActionBlockRead>>",
            },
            "attributes": {
              "docs": "Attributes that each resource of this type defines, and can be used in your ABAC policies.",
              "type": "optional<map<string, AttributeBlockRead>>",
            },
            "created_at": "datetime",
            "description": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "environment_id": "string",
            "id": "string",
            "key": "string",
            "name": "string",
            "organization_id": "string",
            "project_id": "string",
            "updated_at": "datetime",
            "urn": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "ResourceRoleList": {
          "docs": undefined,
          "properties": {
            "roles": {
              "docs": undefined,
              "type": "ResourceRoleListRoles",
            },
          },
        },
        "ResourceRoleListRoles": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "list<ResourceRoleRead>",
            },
            {
              "docs": undefined,
              "type": "PaginatedResultResourceRoleRead",
            },
          ],
        },
        "ResourceRoleRead": {
          "docs": undefined,
          "properties": {
            "attributes": {
              "docs": "optional dictionary of key-value pairs that can be used to store arbitrary metadata about this role. This metadata can be used to filter role using query parameters with attr_ prefix, currently supports only 'equals' operator",
              "type": "optional<map<string, unknown>>",
            },
            "created_at": "datetime",
            "description": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "environment_id": "string",
            "extends": {
              "docs": "list of role keys that define what roles this role extends. In other words: this role will automatically inherit all the permissions of the given roles in this list.",
              "type": "optional<list<string>>",
            },
            "id": "string",
            "key": "string",
            "name": "string",
            "organization_id": "string",
            "permissions": {
              "docs": "list of action keys that define what actions this resource role is permitted to do",
              "type": "optional<list<string>>",
            },
            "project_id": "string",
            "resource_id": "string",
            "updated_at": "datetime",
          },
        },
        "RoleAssignmentCreate": {
          "docs": undefined,
          "properties": {
            "role": "string",
            "tenant": "string",
            "user": "string",
          },
        },
        "RoleAssignmentRead": {
          "docs": undefined,
          "properties": {
            "created_at": "datetime",
            "environment_id": "string",
            "id": "string",
            "organization_id": "string",
            "project_id": "string",
            "role": "string",
            "role_id": "string",
            "tenant": "string",
            "tenant_id": "string",
            "user": "string",
            "user_id": "string",
          },
        },
        "RoleAssignmentRemove": {
          "docs": undefined,
          "properties": {
            "role": "string",
            "tenant": "string",
            "user": "string",
          },
        },
        "RoleBlock": {
          "docs": undefined,
          "properties": {
            "description": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "permissions": {
              "docs": "list of action keys that define what actions this resource role is permitted to do",
              "type": "optional<list<string>>",
            },
          },
        },
        "RoleList": {
          "docs": undefined,
          "properties": {
            "roles": {
              "docs": undefined,
              "type": "RoleListRoles",
            },
          },
        },
        "RoleListRoles": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "list<RoleRead>",
            },
            {
              "docs": undefined,
              "type": "PaginatedResultRoleRead",
            },
          ],
        },
        "RoleRead": {
          "docs": undefined,
          "properties": {
            "attributes": {
              "docs": "optional dictionary of key-value pairs that can be used to store arbitrary metadata about this role. This metadata can be used to filter role using query parameters with attr_ prefix, currently supports only 'equals' operator",
              "type": "optional<map<string, unknown>>",
            },
            "created_at": "datetime",
            "description": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "environment_id": "string",
            "extends": {
              "docs": "list of role keys that define what roles this role extends. In other words: this role will automatically inherit all the permissions of the given roles in this list.",
              "type": "optional<list<string>>",
            },
            "id": "string",
            "key": "string",
            "name": "string",
            "organization_id": "string",
            "permissions": {
              "docs": "list of action keys that define what actions this resource role is permitted to do",
              "type": "optional<list<string>>",
            },
            "project_id": "string",
            "updated_at": "datetime",
          },
        },
        "RolesBlock": {
          "docs": "Resource roles definition block, defines all the roles on the resource.",
          "type": "map<string, unknown>",
        },
        "Statistics": {
          "docs": undefined,
          "properties": {
            "has_decision_logs": "boolean",
            "members": {
              "docs": undefined,
              "type": "list<OrgMemberReadWithGrants>",
            },
            "policies": "integer",
            "resources": "integer",
            "roles": "integer",
            "tenants": "integer",
            "users": "integer",
          },
        },
        "TenantCreate": {
          "docs": undefined,
          "properties": {
            "attributes": {
              "docs": "Arbitraty tenant attributes that will be used to enforce attribute-based access control policies.",
              "type": "optional<map<string, unknown>>",
            },
            "description": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "key": "string",
            "name": "string",
          },
        },
        "TenantCreateBulkOperationResult": {
          "docs": undefined,
          "properties": {},
        },
        "TenantDeleteBulkOperationResult": {
          "docs": undefined,
          "properties": {},
        },
        "TenantRead": {
          "docs": undefined,
          "properties": {
            "attributes": {
              "docs": "Arbitraty tenant attributes that will be used to enforce attribute-based access control policies.",
              "type": "optional<map<string, unknown>>",
            },
            "created_at": "datetime",
            "description": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "environment_id": "string",
            "id": "string",
            "key": "string",
            "last_action_at": "datetime",
            "name": "string",
            "organization_id": "string",
            "project_id": "string",
            "updated_at": "datetime",
          },
        },
        "UserCreate": {
          "docs": undefined,
          "properties": {
            "attributes": {
              "docs": "Arbitrary user attributes that will be used to enforce attribute-based access control policies.",
              "type": "optional<map<string, unknown>>",
            },
            "email": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "first_name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "key": "string",
            "last_name": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "UserCreateBulkOperationResult": {
          "docs": undefined,
          "properties": {},
        },
        "UserDeleteBulkOperationResult": {
          "docs": undefined,
          "properties": {},
        },
        "UserInTenant": {
          "docs": undefined,
          "properties": {
            "roles": {
              "docs": "List of roles assigned to the user in that tenant",
              "type": "list<string>",
            },
            "status": {
              "docs": "Whether the user has signed in or not",
              "type": "UserStatus",
            },
            "tenant": "string",
          },
        },
        "UserRead": {
          "docs": undefined,
          "properties": {
            "associated_tenants": {
              "docs": undefined,
              "type": "optional<list<UserInTenant>>",
            },
            "attributes": {
              "docs": "Arbitrary user attributes that will be used to enforce attribute-based access control policies.",
              "type": "optional<map<string, unknown>>",
            },
            "email": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "environment_id": "string",
            "first_name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": "string",
            "key": "string",
            "last_name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "organization_id": "string",
            "project_id": "string",
            "roles": {
              "docs": undefined,
              "type": "optional<list<UserRole>>",
            },
          },
        },
        "UserReplaceBulkOperationResult": {
          "docs": undefined,
          "properties": {},
        },
        "UserRole": {
          "docs": undefined,
          "properties": {
            "role": "string",
            "tenant": "string",
          },
        },
        "UserStatus": {
          "docs": "An enumeration.",
          "enum": [
            {
              "docs": undefined,
              "name": "active",
              "value": "active",
            },
            {
              "docs": undefined,
              "name": "pending",
              "value": "pending",
            },
          ],
        },
        "ValidationError": {
          "docs": undefined,
          "properties": {
            "loc": {
              "docs": undefined,
              "type": "list<ValidationErrorLocItem>",
            },
            "msg": "string",
            "type": "string",
          },
        },
        "ValidationErrorLocItem": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            "string",
            "integer",
          ],
        },
      },
    },
    "bulkOperations.yml": {
      "docs": "None",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Bulk Operations",
        "endpoints": {
          "bulk_create_tenants": {
            "auth": true,
            "display-name": "Bulk Create Tenants",
            "docs": undefined,
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "POST",
            "path": "/v2/facts/{proj_id}/{env_id}/bulk/tenants",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "operations": {
                    "docs": undefined,
                    "type": "list<root.TenantCreate>",
                  },
                },
              },
              "headers": undefined,
              "name": "TenantCreateBulkOperation",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.TenantCreateBulkOperationResult",
            },
          },
          "bulk_create_users": {
            "auth": true,
            "display-name": "Bulk Create Users",
            "docs": undefined,
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "POST",
            "path": "/v2/facts/{proj_id}/{env_id}/bulk/users",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "operations": {
                    "docs": undefined,
                    "type": "list<root.UserCreate>",
                  },
                },
              },
              "headers": undefined,
              "name": "UserCreateBulkOperation",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.UserCreateBulkOperationResult",
            },
          },
          "bulk_delete_tenants": {
            "auth": true,
            "display-name": "Bulk Delete Tenants",
            "docs": undefined,
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "DELETE",
            "path": "/v2/facts/{proj_id}/{env_id}/bulk/tenants",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "idents": {
                    "docs": undefined,
                    "type": "list<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "TenantDeleteBulkOperation",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.TenantDeleteBulkOperationResult",
            },
          },
          "bulk_delete_users": {
            "auth": true,
            "display-name": "Bulk Delete Users",
            "docs": undefined,
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "DELETE",
            "path": "/v2/facts/{proj_id}/{env_id}/bulk/users",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "idents": {
                    "docs": undefined,
                    "type": "list<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "UserDeleteBulkOperation",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.UserDeleteBulkOperationResult",
            },
          },
          "bulk_replace_users": {
            "auth": true,
            "display-name": "Bulk Replace Users",
            "docs": undefined,
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "PUT",
            "path": "/v2/facts/{proj_id}/{env_id}/bulk/users",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "operations": {
                    "docs": undefined,
                    "type": "list<root.UserCreate>",
                  },
                },
              },
              "headers": undefined,
              "name": "UserReplaceBulkOperation",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.UserReplaceBulkOperationResult",
            },
          },
        },
      },
    },
    "conditionSetRules.yml": {
      "docs": "
Represents a "mini" ABAC rule comprised of (UserSet, Action, ResourceSet).

If such tuple exists, it means all users matching the UserSet
can perform the Action on the resources matching ResourceSet.

Example:
(\`us_based_employees\`, \`repository:clone\`, \`private_repos\`) where:
- \`us_based_employees\` is a user set
- \`repository:clone\` is an action
- \`private_repos\` is a resource set
",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Condition Set Rules",
        "endpoints": {
          "assign_set_permissions": {
            "auth": true,
            "display-name": "Assign Set Permissions",
            "docs": "Grant permissions to a user set *on* a resource set.

If the permission is already granted, it is skipped.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "POST",
            "path": "/v2/facts/{proj_id}/{env_id}/set_rules",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "is_resource": {
                    "docs": undefined,
                    "type": "optional<boolean>",
                  },
                  "is_role": {
                    "docs": undefined,
                    "type": "optional<boolean>",
                  },
                  "permission": "string",
                  "resource_set": "string",
                  "user_set": "string",
                },
              },
              "headers": undefined,
              "name": "ConditionSetRuleCreate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "list<root.ConditionSetRuleRead>",
            },
          },
          "list_set_permissions": {
            "auth": true,
            "display-name": "List Set Permissions",
            "docs": "Lists the condition set rules matching the filter.
- If the \`user_set\` filter is present, will only return the permissions set of that user set.
- If the \`permission\` filter is present, will only return the permissions sets that equals to the queried permission.
- If the \`resource_set\` filter is present, will only return the permissions set of that resource set.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "GET",
            "path": "/v2/facts/{proj_id}/{env_id}/set_rules",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "name": "ListSetPermissionsRequest",
              "query-parameters": {
                "page": {
                  "allow-multiple": undefined,
                  "docs": "Page number of the results to fetch, starting at 1.",
                  "type": "optional<integer>",
                },
                "per_page": {
                  "allow-multiple": undefined,
                  "docs": "The number of results per page (max 100).",
                  "type": "optional<integer>",
                },
                "permission": {
                  "allow-multiple": undefined,
                  "docs": "optional permission filter, will only return condition set rules granting this permission",
                  "type": "optional<string>",
                },
                "resource_set": {
                  "allow-multiple": undefined,
                  "docs": "optional resource set filter, will only return rules where the permission is granted on this resource set",
                  "type": "optional<string>",
                },
                "user_set": {
                  "allow-multiple": undefined,
                  "docs": "optional user set filter, will only return rules where the permission is granted to this user set",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "list<root.ConditionSetRuleRead>",
            },
          },
          "unassign_set_permissions": {
            "auth": true,
            "display-name": "Unassign Set Permissions",
            "docs": "Revokes permissions to a user set *on* a resource set.

If the permission is not granted, it is skipped.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "DELETE",
            "path": "/v2/facts/{proj_id}/{env_id}/set_rules",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "is_resource": {
                    "docs": undefined,
                    "type": "optional<boolean>",
                  },
                  "is_role": {
                    "docs": undefined,
                    "type": "optional<boolean>",
                  },
                  "permission": "string",
                  "resource_set": "string",
                  "user_set": "string",
                },
              },
              "headers": undefined,
              "name": "ConditionSetRuleRemove",
              "query-parameters": undefined,
            },
          },
        },
      },
    },
    "conditionSets.yml": {
      "docs": "
Condition sets are sets of objects that are dynamically defined based on conditions on the objects' attributes.
Conditions sets allows you the flexibility of ABAC with the simplicity of RBAC.

There are currently two types of condition sets at the moment:
1) user set = the set of users that match all the specified conditions.
2) resource set = the set of resources that match all the specified conditions.

Examples:

- \`us_based_employees\` = {U1, ..., Un} = {all **users** who are *located in the US* and are *assigned the employee role*}
- \`private_repos\` = {R1, ..., Rn} = {all **resources** *of type repository* that *are private*}

We can then picture a **matrix** of assignment between *user sets* and *resource sets*.

Example:
If we check the checkbox where \`us_based_employees\` and \`private_repos->clone\` action intersect, we are setting a rule:
*all US based employees can clone private repos*.
",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Condition Sets",
        "endpoints": {
          "create_condition_set": {
            "auth": true,
            "display-name": "Create Condition Set",
            "docs": "Creates a new condition set (can be either a user set or a resource set).",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "POST",
            "path": "/v2/schema/{proj_id}/{env_id}/condition_sets",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "autogenerated": {
                    "docs": undefined,
                    "type": "optional<boolean>",
                  },
                  "conditions": {
                    "docs": "a boolean expression that consists of multiple conditions, with and/or logic.",
                    "type": "optional<map<string, unknown>>",
                  },
                  "description": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                  "key": "string",
                  "name": "string",
                  "parent_id": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                  "resource_id": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                  "type": {
                    "docs": "the type of the set: UserSet or ResourceSet",
                    "type": "optional<root.ConditionSetType>",
                  },
                },
              },
              "headers": undefined,
              "name": "ConditionSetCreate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ConditionSetRead",
            },
          },
          "delete_condition_set": {
            "auth": true,
            "display-name": "Delete Condition Set",
            "docs": "Deletes a condition set and all its related data.
This includes any permissions granted to said condition set (i.e: any matching condition set rules).",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "DELETE",
            "path": "/v2/schema/{proj_id}/{env_id}/condition_sets/{condition_set_id}",
            "path-parameters": {
              "condition_set_id": {
                "docs": "Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the "slug").",
                "type": "string",
              },
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
            },
          },
          "get_condition_set": {
            "auth": true,
            "display-name": "Get Condition Set",
            "docs": "Gets a single condition set, if such condition set exists.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "GET",
            "path": "/v2/schema/{proj_id}/{env_id}/condition_sets/{condition_set_id}",
            "path-parameters": {
              "condition_set_id": {
                "docs": "Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the "slug").",
                "type": "string",
              },
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ConditionSetRead",
            },
          },
          "get_condition_set_ancestors": {
            "auth": true,
            "display-name": "Get Condition Set Ancestors",
            "docs": "Gets all ancestors (parent, parent of parent, and so on)",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "GET",
            "path": "/v2/schema/{proj_id}/{env_id}/condition_sets/{condition_set_id}/ancestors",
            "path-parameters": {
              "condition_set_id": {
                "docs": "Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the "slug").",
                "type": "string",
              },
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "name": "GetConditionSetAncestorsRequest",
              "query-parameters": {
                "page": {
                  "allow-multiple": undefined,
                  "docs": "Page number of the results to fetch, starting at 1.",
                  "type": "optional<integer>",
                },
                "per_page": {
                  "allow-multiple": undefined,
                  "docs": "The number of results per page (max 100).",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "list<root.ConditionSetRead>",
            },
          },
          "get_condition_set_descendants": {
            "auth": true,
            "display-name": "Get Condition Set Descendants",
            "docs": "Gets all descendants (children, children of children, and so on)",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "GET",
            "path": "/v2/schema/{proj_id}/{env_id}/condition_sets/{condition_set_id}/descendants",
            "path-parameters": {
              "condition_set_id": {
                "docs": "Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the "slug").",
                "type": "string",
              },
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "name": "GetConditionSetDescendantsRequest",
              "query-parameters": {
                "page": {
                  "allow-multiple": undefined,
                  "docs": "Page number of the results to fetch, starting at 1.",
                  "type": "optional<integer>",
                },
                "per_page": {
                  "allow-multiple": undefined,
                  "docs": "The number of results per page (max 100).",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "list<root.ConditionSetRead>",
            },
          },
          "list_condition_sets": {
            "auth": true,
            "display-name": "List Condition Sets",
            "docs": "Lists all condition sets matching a filter.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "GET",
            "path": "/v2/schema/{proj_id}/{env_id}/condition_sets",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "name": "ListConditionSetsRequest",
              "query-parameters": {
                "include_total_count": {
                  "allow-multiple": undefined,
                  "docs": "Include total count in response",
                  "type": "optional<boolean>",
                },
                "page": {
                  "allow-multiple": undefined,
                  "docs": "Page number of the results to fetch, starting at 1.",
                  "type": "optional<integer>",
                },
                "per_page": {
                  "allow-multiple": undefined,
                  "docs": "The number of results per page (max 100).",
                  "type": "optional<integer>",
                },
                "search": {
                  "allow-multiple": undefined,
                  "docs": "Text search for the condition sets name or key",
                  "type": "optional<string>",
                },
                "type": {
                  "allow-multiple": undefined,
                  "docs": "if provided, will return only the condition sets of the specified type. e.g: only user sets.",
                  "type": "optional<root.ConditionSetType>",
                },
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ListConditionSetsResponse",
            },
          },
          "update_condition_set": {
            "auth": true,
            "display-name": "Update Condition Set",
            "docs": "Partially updates a condition set.
Fields that will be provided will be completely overwritten.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "PATCH",
            "path": "/v2/schema/{proj_id}/{env_id}/condition_sets/{condition_set_id}",
            "path-parameters": {
              "condition_set_id": {
                "docs": "Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the "slug").",
                "type": "string",
              },
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "conditions": {
                    "docs": "a boolean expression that consists of multiple conditions, with and/or logic.",
                    "type": "optional<map<string, unknown>>",
                  },
                  "description": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                  "name": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                  "parent_id": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "ConditionSetUpdate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ConditionSetRead",
            },
          },
        },
      },
    },
    "environments.yml": {
      "docs": "
Environments are silos contained within projects that enables you to safely iterate on changes.

Environments allow you to manage your policy throughout your entire development lifecycle,
from dev to production. Typical environments within a project could be \`production\`, \`staging\`,
or individual environments.

Each project must contain at least one environment.
You may clone an environment from a base environment, similar to git branches.
You can later safely merge the changes, after you tested them.
",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Environments",
        "endpoints": {
          "copy_environment": {
            "auth": true,
            "display-name": "Copy Environment",
            "docs": "Copy environment

This endpoint either duplicates an existing environment to a new environment
in the same project, or copies from an existing environment to another
existing environment.

The \`scope\` object controls which objects will be copied to the target
environment.

To clone to a new environment, the user must have write permissions
to the containing project. To clone into an existing environment,
the user must have write permissions to the target environment.

Copying environments across projects or organizations is not
allowed.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "POST",
            "path": "/v2/projects/{proj_id}/envs/{env_id}/copy",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "conflict_strategy": {
                    "docs": "Action to take when detecting a conflict when copying. Only applies to copying into an existing environment",
                    "type": "optional<root.EnvironmentCopyConflictStrategy>",
                  },
                  "scope": {
                    "docs": "Filters to include and exclude copied objects",
                    "type": "optional<root.EnvironmentCopyScope>",
                  },
                  "target_env": {
                    "docs": "If copying a new environment, the environment configuration. If copying to an existing environment, the environment identifier",
                    "type": "root.EnvironmentCopyTarget",
                  },
                },
              },
              "headers": undefined,
              "name": "EnvironmentCopy",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.EnvironmentRead",
            },
          },
          "create_environment": {
            "auth": true,
            "display-name": "Create Environment",
            "docs": "Creates a new environment under a given project.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "POST",
            "path": "/v2/projects/{proj_id}/envs",
            "path-parameters": {
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.EnvironmentCreate",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.EnvironmentRead",
            },
          },
          "delete_environment": {
            "auth": true,
            "display-name": "Delete Environment",
            "docs": "Deletes an environment and all its related data.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "DELETE",
            "path": "/v2/projects/{proj_id}/envs/{env_id}",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
            },
          },
          "get_environment": {
            "auth": true,
            "display-name": "Get Environment",
            "docs": "Gets a single environment matching the given env_id, if such environment exists.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "GET",
            "path": "/v2/projects/{proj_id}/envs/{env_id}",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.EnvironmentRead",
            },
          },
          "list_environments": {
            "auth": true,
            "display-name": "List Environments",
            "docs": "Lists all the environments under a given project.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "GET",
            "path": "/v2/projects/{proj_id}/envs",
            "path-parameters": {
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "name": "ListEnvironmentsRequest",
              "query-parameters": {
                "page": {
                  "allow-multiple": undefined,
                  "docs": "Page number of the results to fetch, starting at 1.",
                  "type": "optional<integer>",
                },
                "per_page": {
                  "allow-multiple": undefined,
                  "docs": "The number of results per page (max 100).",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "list<root.EnvironmentRead>",
            },
          },
          "stats_environments": {
            "auth": true,
            "display-name": "Stats Environments",
            "docs": undefined,
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "GET",
            "path": "/v2/projects/{proj_id}/envs/{env_id}/stats",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.EnvironmentStats",
            },
          },
          "update_environment": {
            "auth": true,
            "display-name": "Update Environment",
            "docs": "Updates the environment.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "PATCH",
            "path": "/v2/projects/{proj_id}/envs/{env_id}",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "custom_branch_name": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                  "description": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                  "jwks": {
                    "docs": "jwks for element frontend only login",
                    "type": "optional<root.JwksObj>",
                  },
                  "name": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                  "settings": {
                    "docs": "the settings for this environment",
                    "type": "optional<map<string, unknown>>",
                  },
                },
              },
              "headers": undefined,
              "name": "EnvironmentUpdate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.EnvironmentRead",
            },
          },
        },
      },
    },
    "organizations.yml": {
      "docs": "
The Organizations API gives you access to control and manage your Permit organizations.

An organization represents a **single billable account** (i.e: a company using Permit).
You may invite your team members to your Permit account, and thus multiple team members
may control an organization simultaniously (each member has access according to his role).
",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Organizations",
        "endpoints": {
          "create_organization": {
            "auth": true,
            "display-name": "Create Organization",
            "docs": "Creates a new organization that will be owned by the
authenticated actor (i.e: human team member or api key).",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "POST",
            "path": "/v2/orgs",
            "request": {
              "body": {
                "properties": {
                  "key": "string",
                  "name": "string",
                  "settings": {
                    "docs": "the settings for this project",
                    "type": "optional<map<string, unknown>>",
                  },
                },
              },
              "headers": undefined,
              "name": "OrganizationCreate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.OrganizationReadWithApiKey",
            },
          },
          "delete_organization": {
            "auth": true,
            "display-name": "Delete Organization",
            "docs": "Deletes an organization (Permit.io account) and all its related data.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "DELETE",
            "path": "/v2/orgs/{org_id}",
            "path-parameters": {
              "org_id": {
                "docs": "Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").",
                "type": "string",
              },
            },
          },
          "get_active_organization": {
            "auth": true,
            "display-name": "Get Active Organization",
            "docs": "Gets a single organization (Permit.io account) matching the given org_id,
if such org exists and can be accessed by the authenticated actor.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "GET",
            "path": "/v2/orgs/active/org",
            "response": {
              "docs": "Successful Response",
              "type": "root.OrganizationRead",
            },
          },
          "get_organization": {
            "auth": true,
            "display-name": "Get Organization",
            "docs": "Gets a single organization (Permit.io account) matching the given org_id,
if such org exists and can be accessed by the authenticated actor.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "GET",
            "path": "/v2/orgs/{org_id}",
            "path-parameters": {
              "org_id": {
                "docs": "Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").",
                "type": "string",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.OrganizationRead",
            },
          },
          "list_organizations": {
            "auth": true,
            "display-name": "List Organizations",
            "docs": "Lists all the organizations that can be accessed by the
authenticated actor (i.e: human team member or api key).",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "GET",
            "path": "/v2/orgs",
            "request": {
              "name": "ListOrganizationsRequest",
              "query-parameters": {
                "page": {
                  "allow-multiple": undefined,
                  "docs": "Page number of the results to fetch, starting at 1.",
                  "type": "optional<integer>",
                },
                "per_page": {
                  "allow-multiple": undefined,
                  "docs": "The number of results per page (max 100).",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "list<root.OrganizationRead>",
            },
          },
          "update_organization": {
            "auth": true,
            "display-name": "Update Organization",
            "docs": "Updates the organization's profile.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "PATCH",
            "path": "/v2/orgs/{org_id}",
            "path-parameters": {
              "org_id": {
                "docs": "Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "name": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                  "settings": {
                    "docs": "the settings for this project",
                    "type": "optional<map<string, unknown>>",
                  },
                },
              },
              "headers": undefined,
              "name": "OrganizationUpdate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.OrganizationRead",
            },
          },
        },
      },
    },
    "projects.yml": {
      "docs": "
Projects let you manage permissions for different business objectives from a single Permit account.

For example, you can create one project called "Billing App" and another project called "Web App".
Every project is a separate silo, and has its own unique set of environments and policies.
",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Projects",
        "endpoints": {
          "create_project": {
            "auth": true,
            "display-name": "Create Project",
            "docs": "Creates a new project under the active organization.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "POST",
            "path": "/v2/projects",
            "request": {
              "body": {
                "properties": {
                  "active_policy_repo_id": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                  "description": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                  "key": "string",
                  "name": "string",
                  "settings": {
                    "docs": "the settings for this project",
                    "type": "optional<map<string, unknown>>",
                  },
                  "urn_namespace": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "ProjectCreate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ProjectRead",
            },
          },
          "delete_project": {
            "auth": true,
            "display-name": "Delete Project",
            "docs": "Deletes the project and all its related data.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "DELETE",
            "path": "/v2/projects/{proj_id}",
            "path-parameters": {
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
            },
          },
          "get_project": {
            "auth": true,
            "display-name": "Get Project",
            "docs": "Gets a single project matching the given proj_id, if such project exists.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "GET",
            "path": "/v2/projects/{proj_id}",
            "path-parameters": {
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ProjectRead",
            },
          },
          "list_projects": {
            "auth": true,
            "display-name": "List Projects",
            "docs": "Lists all the projects under the active organization.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "GET",
            "path": "/v2/projects",
            "request": {
              "name": "ListProjectsRequest",
              "query-parameters": {
                "page": {
                  "allow-multiple": undefined,
                  "docs": "Page number of the results to fetch, starting at 1.",
                  "type": "optional<integer>",
                },
                "per_page": {
                  "allow-multiple": undefined,
                  "docs": "The number of results per page (max 100).",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "list<root.ProjectRead>",
            },
          },
          "update_project": {
            "auth": true,
            "display-name": "Update Project",
            "docs": "Updates the project.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "PATCH",
            "path": "/v2/projects/{proj_id}",
            "path-parameters": {
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "active_policy_repo_id": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                  "description": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                  "name": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                  "settings": {
                    "docs": "the settings for this project",
                    "type": "optional<map<string, unknown>>",
                  },
                },
              },
              "headers": undefined,
              "name": "ProjectUpdate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ProjectRead",
            },
          },
        },
      },
    },
    "resourceActionGroups.yml": {
      "docs": "
Resource Action Groups are groups of actions that are assigned
to a role as one action.
",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Resource Action Groups",
        "endpoints": {
          "create_resource_action_group": {
            "auth": true,
            "display-name": "Create Resource Action Group",
            "docs": "Creates a new action group that can affect the resource.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "POST",
            "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/action_groups",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
              "resource_id": {
                "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "actions": {
                    "docs": undefined,
                    "type": "optional<list<string>>",
                  },
                  "attributes": {
                    "docs": "optional dictionary of key-value pairs that can be used to store arbitrary metadata about this action group. This metadata can be used to filter action groups using query parameters with attr_ prefix",
                    "type": "optional<map<string, unknown>>",
                  },
                  "description": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                  "key": "string",
                  "name": "string",
                },
              },
              "headers": undefined,
              "name": "ResourceActionGroupCreate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ResourceActionGroupRead",
            },
          },
          "delete_resource_action_group": {
            "auth": true,
            "display-name": "Delete Resource Action Group",
            "docs": "Deletes the action and all its related data.
This includes any permissions granted to perform the action.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "DELETE",
            "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/action_groups/{action_group_id}",
            "path-parameters": {
              "action_group_id": {
                "docs": "Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the "slug").",
                "type": "string",
              },
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
              "resource_id": {
                "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                "type": "string",
              },
            },
          },
          "get_resource_action_group": {
            "auth": true,
            "display-name": "Get Resource Action Group",
            "docs": "Gets a single action group defined on the resource, if such action exists.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "GET",
            "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/action_groups/{action_group_id}",
            "path-parameters": {
              "action_group_id": {
                "docs": "Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the "slug").",
                "type": "string",
              },
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
              "resource_id": {
                "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                "type": "string",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ResourceActionGroupRead",
            },
          },
          "list_resource_action_groups": {
            "auth": true,
            "display-name": "List Resource Action Groups",
            "docs": "Lists all the action groups defined on the resource.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "GET",
            "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/action_groups",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
              "resource_id": {
                "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "name": "ListResourceActionGroupsRequest",
              "query-parameters": {
                "page": {
                  "allow-multiple": undefined,
                  "docs": "Page number of the results to fetch, starting at 1.",
                  "type": "optional<integer>",
                },
                "per_page": {
                  "allow-multiple": undefined,
                  "docs": "The number of results per page (max 100).",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "list<root.ResourceActionGroupRead>",
            },
          },
          "update_resource_action_group": {
            "auth": true,
            "display-name": "Update Resource Action Group",
            "docs": "Partially updates the action defined on a resource.
Fields that will be provided will be completely overwritten.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "PATCH",
            "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/action_groups/{action_group_id}",
            "path-parameters": {
              "action_group_id": {
                "docs": "Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the "slug").",
                "type": "string",
              },
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
              "resource_id": {
                "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "actions": {
                    "docs": undefined,
                    "type": "optional<list<string>>",
                  },
                  "attributes": {
                    "docs": "optional dictionary of key-value pairs that can be used to store arbitrary metadata about this action group. This metadata can be used to filter action groups using query parameters with attr_ prefix",
                    "type": "optional<map<string, unknown>>",
                  },
                  "description": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                  "name": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "ResourceActionGroupUpdate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ResourceActionGroupRead",
            },
          },
        },
      },
    },
    "resourceActions.yml": {
      "docs": "
Actions are the various ways you can interact with a resource or affect the resource.
Each (resource, action) pair defines a unique permission level.
",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Resource Actions",
        "endpoints": {
          "create_resource_action": {
            "auth": true,
            "display-name": "Create Resource Action",
            "docs": "Creates a new action that can affect the resource.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "POST",
            "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/actions",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
              "resource_id": {
                "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "attributes": {
                    "docs": "optional dictionary of key-value pairs that can be used to store arbitrary metadata about this action. This metadata can be used to filter actions using query parameters with attr_ prefix",
                    "type": "optional<map<string, unknown>>",
                  },
                  "description": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                  "key": "string",
                  "name": "string",
                },
              },
              "headers": undefined,
              "name": "ResourceActionCreate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ResourceActionRead",
            },
          },
          "delete_resource_action": {
            "auth": true,
            "display-name": "Delete Resource Action",
            "docs": "Deletes the action and all its related data.
This includes any permissions granted to perform the action.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "DELETE",
            "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/actions/{action_id}",
            "path-parameters": {
              "action_id": {
                "docs": "Either the unique id of the action, or the URL-friendly key of the action (i.e: the "slug").",
                "type": "string",
              },
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
              "resource_id": {
                "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                "type": "string",
              },
            },
          },
          "get_resource_action": {
            "auth": true,
            "display-name": "Get Resource Action",
            "docs": "Gets a single action defined on the resource, if such action exists.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "GET",
            "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/actions/{action_id}",
            "path-parameters": {
              "action_id": {
                "docs": "Either the unique id of the action, or the URL-friendly key of the action (i.e: the "slug").",
                "type": "string",
              },
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
              "resource_id": {
                "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                "type": "string",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ResourceActionRead",
            },
          },
          "list_resource_actions": {
            "auth": true,
            "display-name": "List Resource Actions",
            "docs": "Lists all the actions defined on the resource.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "GET",
            "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/actions",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
              "resource_id": {
                "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "name": "ListResourceActionsRequest",
              "query-parameters": {
                "page": {
                  "allow-multiple": undefined,
                  "docs": "Page number of the results to fetch, starting at 1.",
                  "type": "optional<integer>",
                },
                "per_page": {
                  "allow-multiple": undefined,
                  "docs": "The number of results per page (max 100).",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "list<root.ResourceActionRead>",
            },
          },
          "update_resource_action": {
            "auth": true,
            "display-name": "Update Resource Action",
            "docs": "Partially updates the action defined on a resource.
Fields that will be provided will be completely overwritten.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "PATCH",
            "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/actions/{action_id}",
            "path-parameters": {
              "action_id": {
                "docs": "Either the unique id of the action, or the URL-friendly key of the action (i.e: the "slug").",
                "type": "string",
              },
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
              "resource_id": {
                "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "attributes": {
                    "docs": "optional dictionary of key-value pairs that can be used to store arbitrary metadata about this action. This metadata can be used to filter actions using query parameters with attr_ prefix",
                    "type": "optional<map<string, unknown>>",
                  },
                  "description": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                  "name": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "ResourceActionUpdate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ResourceActionRead",
            },
          },
        },
      },
    },
    "resourceAttributes.yml": {
      "docs": "
Resource attributes allow you to specify an arbitrary schema attributes that are part
of the definition of resource and must be included in any of its instances.

Attributes are used to enforce attribute-based access control policies.

For example, if we are building the github's permissions system, we might want to know
on the \`Repository\` resource whether the repo is private or now. In such case we will
define a boolean \`private\` attributes that we can now use in our policies.
",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Resource Attributes",
        "endpoints": {
          "create_resource_attribute": {
            "auth": true,
            "display-name": "Create Resource Attribute",
            "docs": "Creates a new attribute as part of the resource definition.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "POST",
            "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/attributes",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
              "resource_id": {
                "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.ResourceAttributeCreate",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ResourceAttributeRead",
            },
          },
          "delete_resource_attribute": {
            "auth": true,
            "display-name": "Delete Resource Attribute",
            "docs": "Deletes the attribute and all its related data.

Note: If the attribute is used by policies, removing it will cause the
attribute to evaluate as \`undefined\`.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "DELETE",
            "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/attributes/{attribute_id}",
            "path-parameters": {
              "attribute_id": {
                "docs": "Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the "slug").",
                "type": "string",
              },
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
              "resource_id": {
                "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "name": "DeleteResourceAttributeRequest",
              "query-parameters": {
                "page": {
                  "allow-multiple": undefined,
                  "docs": "Page number of the results to fetch, starting at 1.",
                  "type": "optional<integer>",
                },
                "per_page": {
                  "allow-multiple": undefined,
                  "docs": "The number of results per page (max 100).",
                  "type": "optional<integer>",
                },
              },
            },
          },
          "get_resource_attribute": {
            "auth": true,
            "display-name": "Get Resource Attribute",
            "docs": "Gets a single attribute defined on the resource, if such attribute exists.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "GET",
            "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/attributes/{attribute_id}",
            "path-parameters": {
              "attribute_id": {
                "docs": "Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the "slug").",
                "type": "string",
              },
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
              "resource_id": {
                "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                "type": "string",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ResourceAttributeRead",
            },
          },
          "list_resource_attributes": {
            "auth": true,
            "display-name": "List Resource Attributes",
            "docs": "Lists all the attributes defined on the resource.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "GET",
            "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/attributes",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
              "resource_id": {
                "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "name": "ListResourceAttributesRequest",
              "query-parameters": {
                "page": {
                  "allow-multiple": undefined,
                  "docs": "Page number of the results to fetch, starting at 1.",
                  "type": "optional<integer>",
                },
                "per_page": {
                  "allow-multiple": undefined,
                  "docs": "The number of results per page (max 100).",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "list<root.ResourceAttributeRead>",
            },
          },
          "update_resource_attribute": {
            "auth": true,
            "display-name": "Update Resource Attribute",
            "docs": "Partially updates the attribute defined on a resource.
Fields that will be provided will be completely overwritten.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "PATCH",
            "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/attributes/{attribute_id}",
            "path-parameters": {
              "attribute_id": {
                "docs": "Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the "slug").",
                "type": "string",
              },
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
              "resource_id": {
                "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.ResourceAttributeUpdate",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ResourceAttributeRead",
            },
          },
        },
      },
    },
    "resourceInstances.yml": {
      "docs": "
Resource instances are instances of resource types.

An instance represents **a single object** in your system on which you'd want to enforce authorization.
You can use this API to store tenancy data (tenant) and arbitraty data (attributes).
",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Resource Instances",
        "endpoints": {
          "create_resource_instance": {
            "auth": true,
            "display-name": "Create Resource Instance",
            "docs": "Creates a new instance inside the Permit.io system.

If the instance is already created: will return 200 instead of 201,
and will return the existing instance object in the response body.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "POST",
            "path": "/v2/facts/{proj_id}/{env_id}/resource_instances",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "attributes": {
                    "docs": "Arbitraty resource attributes that will be used to enforce attribute-based access control policies.",
                    "type": "optional<map<string, unknown>>",
                  },
                  "key": "string",
                  "resource": "string",
                  "tenant": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "ResourceInstanceCreate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ResourceInstanceRead",
            },
          },
          "delete_resource_instance": {
            "auth": true,
            "display-name": "Delete Resource Instance",
            "docs": "Deletes the instance and all its related data.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "DELETE",
            "path": "/v2/facts/{proj_id}/{env_id}/resource_instances/{instance_id}",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "instance_id": {
                "docs": "Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
            },
          },
          "get_resource_instance": {
            "auth": true,
            "display-name": "Get Resource Instance",
            "docs": "Gets a instance, if such instance exists. Otherwise returns 404.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "GET",
            "path": "/v2/facts/{proj_id}/{env_id}/resource_instances/{instance_id}",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "instance_id": {
                "docs": "Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ResourceInstanceRead",
            },
          },
          "list_resource_instances": {
            "auth": true,
            "display-name": "List Resource Instances",
            "docs": "Lists all the resource instances defined within an environment.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "GET",
            "path": "/v2/facts/{proj_id}/{env_id}/resource_instances",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "name": "ListResourceInstancesRequest",
              "query-parameters": {
                "page": {
                  "allow-multiple": undefined,
                  "docs": "Page number of the results to fetch, starting at 1.",
                  "type": "optional<integer>",
                },
                "per_page": {
                  "allow-multiple": undefined,
                  "docs": "The number of results per page (max 100).",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "list<root.ResourceInstanceRead>",
            },
          },
          "update_resource_instance": {
            "auth": true,
            "display-name": "Update Resource Instance",
            "docs": "Partially updates the instance definition.
Fields that will be provided will be completely overwritten.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "PATCH",
            "path": "/v2/facts/{proj_id}/{env_id}/resource_instances/{instance_id}",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "instance_id": {
                "docs": "Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "attributes": {
                    "docs": "Arbitraty resource attributes that will be used to enforce attribute-based access control policies.",
                    "type": "optional<map<string, unknown>>",
                  },
                },
              },
              "headers": undefined,
              "name": "ResourceInstanceUpdate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ResourceInstanceRead",
            },
          },
        },
      },
    },
    "resourceRoles.yml": {
      "docs": "
Roles allow you to associate permissions indirectly via a job function.

Resource roles allow you to grant roles that are scoped to a resource, thus
expressing ownership or arbitrary relationships between an actor (i.e: user) and
a specific object.

This API allows you to manipulate roles: assign or unassign permissions to a role,
define hierarchy (inheritance) between two roles or define relationships between two roles.
",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Resource Roles",
        "endpoints": {
          "assign_permissions_to_resource_role": {
            "auth": true,
            "display-name": "Assign Permissions to Role",
            "docs": "Assign permissions to role.

If some of the permissions specified are already assigned, will skip them.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "POST",
            "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}/permissions",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
              "resource_id": {
                "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                "type": "string",
              },
              "role_id": {
                "docs": "Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.AddRolePermissions",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ResourceRoleRead",
            },
          },
          "create_resource_role": {
            "auth": true,
            "display-name": "Create Resource Role",
            "docs": "Creates a new role associated with the resource.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "POST",
            "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
              "resource_id": {
                "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "attributes": {
                    "docs": "optional dictionary of key-value pairs that can be used to store arbitrary metadata about this role. This metadata can be used to filter role using query parameters with attr_ prefix, currently supports only 'equals' operator",
                    "type": "optional<map<string, unknown>>",
                  },
                  "description": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                  "extends": {
                    "docs": "list of role keys that define what roles this role extends. In other words: this role will automatically inherit all the permissions of the given roles in this list.",
                    "type": "optional<list<string>>",
                  },
                  "key": "string",
                  "name": "string",
                  "permissions": {
                    "docs": "list of action keys that define what actions this resource role is permitted to do",
                    "type": "optional<list<string>>",
                  },
                },
              },
              "headers": undefined,
              "name": "ResourceRoleCreate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ResourceRoleRead",
            },
          },
          "delete_resource_role": {
            "auth": true,
            "display-name": "Delete Resource Role",
            "docs": "Deletes the role and all its related data.
This includes any permissions granted to said role.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "DELETE",
            "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
              "resource_id": {
                "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                "type": "string",
              },
              "role_id": {
                "docs": "Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").",
                "type": "string",
              },
            },
          },
          "get_resource_role": {
            "auth": true,
            "display-name": "Get Resource Role",
            "docs": "Gets a single role defined on the resource, if such role exists.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "GET",
            "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
              "resource_id": {
                "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                "type": "string",
              },
              "role_id": {
                "docs": "Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").",
                "type": "string",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ResourceRoleRead",
            },
          },
          "get_resource_role_ancestors": {
            "auth": true,
            "display-name": "Get Resource Role Ancestors",
            "docs": undefined,
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "GET",
            "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}/ancestors",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
              "resource_id": {
                "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                "type": "string",
              },
              "role_id": {
                "docs": "Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").",
                "type": "string",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ResourceRoleList",
            },
          },
          "get_resource_role_descendants": {
            "auth": true,
            "display-name": "Get Resource Role Descendants",
            "docs": undefined,
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "GET",
            "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}/descendants",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
              "resource_id": {
                "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                "type": "string",
              },
              "role_id": {
                "docs": "Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").",
                "type": "string",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ResourceRoleList",
            },
          },
          "list_resource_roles": {
            "auth": true,
            "display-name": "List Resource Roles",
            "docs": "Lists all the roles defined on the resource.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "GET",
            "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
              "resource_id": {
                "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "name": "ListResourceRolesRequest",
              "query-parameters": {
                "page": {
                  "allow-multiple": undefined,
                  "docs": "Page number of the results to fetch, starting at 1.",
                  "type": "optional<integer>",
                },
                "per_page": {
                  "allow-multiple": undefined,
                  "docs": "The number of results per page (max 100).",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "list<root.ResourceRoleRead>",
            },
          },
          "remove_permissions_from_resource_role": {
            "auth": true,
            "display-name": "Remove Permissions from Role",
            "docs": "Remove permissions from role.

If some of the permissions specified are already unassigned, will skip them.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "DELETE",
            "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}/permissions",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
              "resource_id": {
                "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                "type": "string",
              },
              "role_id": {
                "docs": "Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.RemoveRolePermissions",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ResourceRoleRead",
            },
          },
          "update_resource_role": {
            "auth": true,
            "display-name": "Update Resource Role",
            "docs": "Partially updates the role defined on a resource.
Fields that will be provided will be completely overwritten.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "PATCH",
            "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
              "resource_id": {
                "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                "type": "string",
              },
              "role_id": {
                "docs": "Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "attributes": {
                    "docs": "optional dictionary of key-value pairs that can be used to store arbitrary metadata about this role. This metadata can be used to filter role using query parameters with attr_ prefix, currently supports only 'equals' operator",
                    "type": "optional<map<string, unknown>>",
                  },
                  "description": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                  "extends": {
                    "docs": "list of role keys that define what roles this role extends. In other words: this role will automatically inherit all the permissions of the given roles in this list.",
                    "type": "optional<list<string>>",
                  },
                  "name": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                  "permissions": {
                    "docs": "list of action keys that define what actions this resource role is permitted to do",
                    "type": "optional<list<string>>",
                  },
                },
              },
              "headers": undefined,
              "name": "ResourceRoleUpdate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ResourceRoleRead",
            },
          },
        },
      },
    },
    "resources.yml": {
      "docs": "
Resources are *types* of objects or feature names that you wish to protect (or gate) with permissions.

For example, if you build a document-sharing app like google docs, you might want to define a "document" resource.

A resource definition block typically contains **actions**.
Actions are the various ways you can interact with the object / feature. Each (resource, action) pair defines a unique permission level.

A resource may also contain:
- roles (if you wish to define resource-bound roles or if your permissions model is relational)
- relations to other resources (if your permissions model is relational, i.e: you work with a ReBAC model)
- attributes (attributes that are typically defined on the resource, typically used in ABAC models)
",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Resources",
        "endpoints": {
          "create_resource": {
            "auth": true,
            "display-name": "Create Resource",
            "docs": "Creates a new resource (a type of object you may protect with permissions).",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "POST",
            "path": "/v2/schema/{proj_id}/{env_id}/resources",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "actions": {
                    "docs": "
        A actions definition block, typically contained within a resource type definition block.
        The actions represents the ways you can interact with a protected resource.
        ",
                    "type": "map<string, root.ActionBlockEditable>",
                  },
                  "attributes": {
                    "docs": "Attributes that each resource of this type defines, and can be used in your ABAC policies.",
                    "type": "optional<map<string, root.AttributeBlockEditable>>",
                  },
                  "description": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                  "key": "string",
                  "name": "string",
                  "urn": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "ResourceCreate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ResourceRead",
            },
          },
          "delete_resource": {
            "auth": true,
            "display-name": "Delete Resource",
            "docs": "Deletes the resource and all its related data.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "DELETE",
            "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
              "resource_id": {
                "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                "type": "string",
              },
            },
          },
          "get_resource": {
            "auth": true,
            "display-name": "Get Resource",
            "docs": "Gets a single resource, if such resource exists.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "GET",
            "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
              "resource_id": {
                "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                "type": "string",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ResourceRead",
            },
          },
          "list_resources": {
            "auth": true,
            "display-name": "List Resources",
            "docs": "Lists all the resources defined in your schema.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "GET",
            "path": "/v2/schema/{proj_id}/{env_id}/resources",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "name": "ListResourcesRequest",
              "query-parameters": {
                "include_built_in": {
                  "allow-multiple": undefined,
                  "docs": "Whether to include or exclude built-in resources, default is False",
                  "type": "optional<boolean>",
                },
                "include_total_count": {
                  "allow-multiple": undefined,
                  "docs": "Include total count in response",
                  "type": "optional<boolean>",
                },
                "page": {
                  "allow-multiple": undefined,
                  "docs": "Page number of the results to fetch, starting at 1.",
                  "type": "optional<integer>",
                },
                "per_page": {
                  "allow-multiple": undefined,
                  "docs": "The number of results per page (max 100).",
                  "type": "optional<integer>",
                },
                "search": {
                  "allow-multiple": undefined,
                  "docs": "Text search for the resources name or key",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ListResourcesResponse",
            },
          },
          "replace_resource": {
            "auth": true,
            "display-name": "Replace Resource",
            "docs": "Completely replaces the resource definition.

- If the resource key is changed, all role and permissions assignments for the the resource will be revoked.
- If the resource key is unchanged, but some actions are removed or renamed from the resource definition,
role and permissions assignments for these actions will be revoked.

TODO: we need to decide if we are auto-revoking, or if we are rejecting the PUT completely while there are permissions that can be affected.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "PUT",
            "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
              "resource_id": {
                "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "actions": {
                    "docs": "
        A actions definition block, typically contained within a resource type definition block.
        The actions represents the ways you can interact with a protected resource.
        ",
                    "type": "map<string, root.ActionBlockEditable>",
                  },
                  "attributes": {
                    "docs": "Attributes that each resource of this type defines, and can be used in your ABAC policies.",
                    "type": "optional<map<string, root.AttributeBlockEditable>>",
                  },
                  "description": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                  "name": "string",
                  "urn": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "ResourceReplace",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ResourceRead",
            },
          },
          "update_resource": {
            "auth": true,
            "display-name": "Update Resource",
            "docs": "Partially updates the resource definition.
Fields that will be provided will be completely overwritten.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "PATCH",
            "path": "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
              "resource_id": {
                "docs": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "actions": {
                    "docs": "
        A actions definition block, typically contained within a resource type definition block.
        The actions represents the ways you can interact with a protected resource.
        ",
                    "type": "optional<map<string, root.ActionBlockEditable>>",
                  },
                  "attributes": {
                    "docs": "Attributes that each resource of this type defines, and can be used in your ABAC policies.",
                    "type": "optional<map<string, root.AttributeBlockEditable>>",
                  },
                  "description": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                  "name": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                  "urn": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "ResourceUpdate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ResourceRead",
            },
          },
        },
      },
    },
    "roleAssignments.yml": {
      "docs": "
Role Assignments are RBAC-constructs that state that a actor (i.e: user) is assigned a role within a tenant.

With role assignments you can assign or unassign roles to a user.
Role assignment define the relationship between users and tenants.
",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Role Assignments",
        "endpoints": {
          "assign_role": {
            "auth": true,
            "display-name": "Assign Role",
            "docs": "Assigns a role to a user within a tenant.

The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "POST",
            "path": "/v2/facts/{proj_id}/{env_id}/role_assignments",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.RoleAssignmentCreate",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.RoleAssignmentRead",
            },
          },
          "bulk_assign_role": {
            "auth": true,
            "display-name": "Bulk Assign Role",
            "docs": undefined,
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "POST",
            "path": "/v2/facts/{proj_id}/{env_id}/role_assignments/bulk",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "list<root.RoleAssignmentCreate>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.BulkRoleAssignmentReport",
            },
          },
          "bulk_unassign_role": {
            "auth": true,
            "display-name": "Bulk Unassign Role",
            "docs": undefined,
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "DELETE",
            "path": "/v2/facts/{proj_id}/{env_id}/role_assignments/bulk",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "list<root.RoleAssignmentRemove>",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.BulkRoleUnAssignmentReport",
            },
          },
          "list_role_assignments": {
            "auth": true,
            "display-name": "List Role Assignments",
            "docs": "Lists the role assignments defined within an environment.

- If the \`user\` filter is present, will only return the role assignments of that user.
- If the \`tenant\` filter is present, will only return the role assignments in that tenant.
- If the \`role\` filter is present, will only return role assignments that are granting that role.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "GET",
            "path": "/v2/facts/{proj_id}/{env_id}/role_assignments",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "name": "ListRoleAssignmentsRequest",
              "query-parameters": {
                "page": {
                  "allow-multiple": undefined,
                  "docs": "Page number of the results to fetch, starting at 1.",
                  "type": "optional<integer>",
                },
                "per_page": {
                  "allow-multiple": undefined,
                  "docs": "The number of results per page (max 100).",
                  "type": "optional<integer>",
                },
                "role": {
                  "allow-multiple": undefined,
                  "docs": "optional role filter, will only return role assignments granting this role.",
                  "type": "optional<string>",
                },
                "tenant": {
                  "allow-multiple": undefined,
                  "docs": "optional tenant filter, will only return role assignments granted in that tenant.",
                  "type": "optional<string>",
                },
                "user": {
                  "allow-multiple": undefined,
                  "docs": "optional user filter, will only return role assignments granted to this user.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "list<root.RoleAssignmentRead>",
            },
          },
          "unassign_role": {
            "auth": true,
            "display-name": "Unassign Role",
            "docs": "Unassigns a user role within a tenant.

The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.

If the role is not actually assigned, will return 404.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "DELETE",
            "path": "/v2/facts/{proj_id}/{env_id}/role_assignments",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.RoleAssignmentRemove",
              },
            },
          },
        },
      },
    },
    "roles.yml": {
      "docs": "
Roles allow you to associate permissions indirectly via a job function.

The Roles API allows you to manipulate roles: assign or unassign permissions to a role,
define hierarchy between roles or define relationships between resource roles.

Roles manipulated by this API are **tenant roles**, meaning when they are assigned, they are
assigned on a tenant.
",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Roles",
        "endpoints": {
          "assign_permissions_to_role": {
            "auth": true,
            "display-name": "Assign Permissions To Role",
            "docs": "Assign permissions to role.

If some of the permissions specified are already assigned, will skip them.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "POST",
            "path": "/v2/schema/{proj_id}/{env_id}/roles/{role_id}/permissions",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
              "role_id": {
                "docs": "Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.AddRolePermissions",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.RoleRead",
            },
          },
          "create_role": {
            "auth": true,
            "display-name": "Create Role",
            "docs": "Creates a new tenant role.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "POST",
            "path": "/v2/schema/{proj_id}/{env_id}/roles",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "attributes": {
                    "docs": "optional dictionary of key-value pairs that can be used to store arbitrary metadata about this role. This metadata can be used to filter role using query parameters with attr_ prefix, currently supports only 'equals' operator",
                    "type": "optional<map<string, unknown>>",
                  },
                  "description": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                  "extends": {
                    "docs": "list of role keys that define what roles this role extends. In other words: this role will automatically inherit all the permissions of the given roles in this list.",
                    "type": "optional<list<string>>",
                  },
                  "key": "string",
                  "name": "string",
                  "permissions": {
                    "docs": "list of action keys that define what actions this resource role is permitted to do",
                    "type": "optional<list<string>>",
                  },
                },
              },
              "headers": undefined,
              "name": "RoleCreate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.RoleRead",
            },
          },
          "delete_role": {
            "auth": true,
            "display-name": "Delete Role",
            "docs": "Deletes a tenant role and all its related data.
This includes any permissions granted to said role.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "DELETE",
            "path": "/v2/schema/{proj_id}/{env_id}/roles/{role_id}",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
              "role_id": {
                "docs": "Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").",
                "type": "string",
              },
            },
          },
          "get_role": {
            "auth": true,
            "display-name": "Get Role",
            "docs": "Gets a single tenant role, if such role exists.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "GET",
            "path": "/v2/schema/{proj_id}/{env_id}/roles/{role_id}",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
              "role_id": {
                "docs": "Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").",
                "type": "string",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.RoleRead",
            },
          },
          "get_role_ancestors": {
            "auth": true,
            "display-name": "Get Role Ancestors",
            "docs": undefined,
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "GET",
            "path": "/v2/schema/{proj_id}/{env_id}/roles/{role_id}/ancestors",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
              "role_id": {
                "docs": "Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").",
                "type": "string",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.RoleList",
            },
          },
          "get_role_descendants": {
            "auth": true,
            "display-name": "Get Role Descendants",
            "docs": undefined,
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "GET",
            "path": "/v2/schema/{proj_id}/{env_id}/roles/{role_id}/descendants",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
              "role_id": {
                "docs": "Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").",
                "type": "string",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.RoleList",
            },
          },
          "list_roles": {
            "auth": true,
            "display-name": "List Roles",
            "docs": "Lists all tenant roles.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "GET",
            "path": "/v2/schema/{proj_id}/{env_id}/roles",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "name": "ListRolesRequest",
              "query-parameters": {
                "include_total_count": {
                  "allow-multiple": undefined,
                  "docs": "Include total count in response",
                  "type": "optional<boolean>",
                },
                "page": {
                  "allow-multiple": undefined,
                  "docs": "Page number of the results to fetch, starting at 1.",
                  "type": "optional<integer>",
                },
                "per_page": {
                  "allow-multiple": undefined,
                  "docs": "The number of results per page (max 100).",
                  "type": "optional<integer>",
                },
                "search": {
                  "allow-multiple": undefined,
                  "docs": "Text search for the roles name or key",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ListRolesResponse",
            },
          },
          "remove_permissions_from_role": {
            "auth": true,
            "display-name": "Remove Permissions From Role",
            "docs": "Remove permissions from role.

If some of the permissions specified are already unassigned, will skip them.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "DELETE",
            "path": "/v2/schema/{proj_id}/{env_id}/roles/{role_id}/permissions",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
              "role_id": {
                "docs": "Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.RemoveRolePermissions",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.RoleRead",
            },
          },
          "update_role": {
            "auth": true,
            "display-name": "Update Role",
            "docs": "Partially updates a tenant role.
Fields that will be provided will be completely overwritten.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "PATCH",
            "path": "/v2/schema/{proj_id}/{env_id}/roles/{role_id}",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
              "role_id": {
                "docs": "Either the unique id of the role, or the URL-friendly key of the role (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "attributes": {
                    "docs": "optional dictionary of key-value pairs that can be used to store arbitrary metadata about this role. This metadata can be used to filter role using query parameters with attr_ prefix, currently supports only 'equals' operator",
                    "type": "optional<map<string, unknown>>",
                  },
                  "description": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                  "extends": {
                    "docs": "list of role keys that define what roles this role extends. In other words: this role will automatically inherit all the permissions of the given roles in this list.",
                    "type": "optional<list<string>>",
                  },
                  "name": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                  "permissions": {
                    "docs": "list of action keys that define what actions this resource role is permitted to do",
                    "type": "optional<list<string>>",
                  },
                },
              },
              "headers": undefined,
              "name": "RoleUpdate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.RoleRead",
            },
          },
        },
      },
    },
    "tenants.yml": {
      "docs": "
A tenant is a group of users that share a common organizational identity.

Each tenant is a silo that can enforce strict boundaries between your customers.
You can associate your protected objects with a specific tenant, and only users
belonging to that tenant may access these resources (pending on adequate permissions).

Usually, each tenant will represent one of the end-customer companies in your product
(i.e. the company that you sell to). Through the tenant feature we enable you to have
multi-tenancy straight out of the box.
",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Tenants",
        "endpoints": {
          "create_tenant": {
            "auth": true,
            "display-name": "Create Tenant",
            "docs": "Creates a new tenant inside the Permit.io system.

If the tenant is already created: will return 200 instead of 201,
and will return the existing tenant object in the response body.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "POST",
            "path": "/v2/facts/{proj_id}/{env_id}/tenants",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.TenantCreate",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.TenantRead",
            },
          },
          "delete_tenant": {
            "auth": true,
            "display-name": "Delete Tenant",
            "docs": "Deletes the tenant and all its related data.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "DELETE",
            "path": "/v2/facts/{proj_id}/{env_id}/tenants/{tenant_id}",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
              "tenant_id": {
                "docs": "Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the "slug").",
                "type": "string",
              },
            },
          },
          "delete_tenant_user": {
            "auth": true,
            "display-name": "Delete Tenant User",
            "docs": "Deletes a user under a tenant.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "DELETE",
            "path": "/v2/facts/{proj_id}/{env_id}/tenants/{tenant_id}/users/{user_id}",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
              "tenant_id": {
                "docs": "Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the "slug").",
                "type": "string",
              },
              "user_id": {
                "docs": "Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug").",
                "type": "string",
              },
            },
          },
          "get_tenant": {
            "auth": true,
            "display-name": "Get Tenant",
            "docs": "Gets a tenant, if such tenant exists. Otherwise returns 404.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "GET",
            "path": "/v2/facts/{proj_id}/{env_id}/tenants/{tenant_id}",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
              "tenant_id": {
                "docs": "Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the "slug").",
                "type": "string",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.TenantRead",
            },
          },
          "list_tenant_users": {
            "auth": true,
            "display-name": "List Tenant Users",
            "docs": undefined,
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "GET",
            "path": "/v2/facts/{proj_id}/{env_id}/tenants/{tenant_id}/users",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
              "tenant_id": {
                "docs": "Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "name": "ListTenantUsersRequest",
              "query-parameters": {
                "page": {
                  "allow-multiple": undefined,
                  "docs": "Page number of the results to fetch, starting at 1.",
                  "type": "optional<integer>",
                },
                "per_page": {
                  "allow-multiple": undefined,
                  "docs": "The number of results per page (max 100).",
                  "type": "optional<integer>",
                },
                "role": {
                  "allow-multiple": undefined,
                  "docs": "Match users with a specific role",
                  "type": "optional<string>",
                },
                "search": {
                  "allow-multiple": undefined,
                  "docs": "Text search for the email field",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.PaginatedResultUserRead",
            },
          },
          "list_tenants": {
            "auth": true,
            "display-name": "List Tenants",
            "docs": "Lists all the tenants defined within an environment.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "GET",
            "path": "/v2/facts/{proj_id}/{env_id}/tenants",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "name": "ListTenantsRequest",
              "query-parameters": {
                "include_total_count": {
                  "allow-multiple": undefined,
                  "docs": "Include total count in response",
                  "type": "optional<boolean>",
                },
                "page": {
                  "allow-multiple": undefined,
                  "docs": "Page number of the results to fetch, starting at 1.",
                  "type": "optional<integer>",
                },
                "per_page": {
                  "allow-multiple": undefined,
                  "docs": "The number of results per page (max 100).",
                  "type": "optional<integer>",
                },
                "search": {
                  "allow-multiple": undefined,
                  "docs": "Text search for the tenant name or key",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ListTenantsResponse",
            },
          },
          "update_tenant": {
            "auth": true,
            "display-name": "Update Tenant",
            "docs": "Partially updates the tenant definition.
Fields that will be provided will be completely overwritten.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "PATCH",
            "path": "/v2/facts/{proj_id}/{env_id}/tenants/{tenant_id}",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
              "tenant_id": {
                "docs": "Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "attributes": {
                    "docs": "Arbitraty tenant attributes that will be used to enforce attribute-based access control policies.",
                    "type": "optional<map<string, unknown>>",
                  },
                  "description": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                  "name": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "TenantUpdate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.TenantRead",
            },
          },
        },
      },
    },
    "userAttributes.yml": {
      "docs": "
User attributes allow you to specify an arbitrary schema attributes that are part
of the definition of the User resource.

Attributes are used to enforce attribute-based access control policies.

*NOTE: A User is a Resource by itself, so basically a user's attribute is an attribute that assigned to the resource called "user".*

For example, if we are building the github's permissions system, we might want to know
whether the user is an owner of the organization or not. In such case we will
define a string \`owner\` attribute that we can now use in our policies.
",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "User Attributes",
        "endpoints": {
          "create_user_attribute": {
            "auth": true,
            "display-name": "Create User Attribute",
            "docs": "Creates a new attribute for the User resource.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "POST",
            "path": "/v2/schema/{proj_id}/{env_id}/users/attributes",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.ResourceAttributeCreate",
              },
              "name": "CreateUserAttributeRequest",
              "query-parameters": {
                "resource_id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ResourceAttributeRead",
            },
          },
          "delete_user_attribute": {
            "auth": true,
            "display-name": "Delete User Attribute",
            "docs": "Deletes the attribute and all its related data.

Note: If the attribute is used by policies, removing it will cause the
attribute to evaluate as \`undefined\`.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "DELETE",
            "path": "/v2/schema/{proj_id}/{env_id}/users/attributes/{attribute_id}",
            "path-parameters": {
              "attribute_id": {
                "docs": "Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the "slug").",
                "type": "string",
              },
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "name": "DeleteUserAttributeRequest",
              "query-parameters": {
                "page": {
                  "allow-multiple": undefined,
                  "docs": "Page number of the results to fetch, starting at 1.",
                  "type": "optional<integer>",
                },
                "per_page": {
                  "allow-multiple": undefined,
                  "docs": "The number of results per page (max 100).",
                  "type": "optional<integer>",
                },
                "resource_id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
              },
            },
          },
          "get_user_attribute": {
            "auth": true,
            "display-name": "Get User Attribute",
            "docs": "Gets a single attribute defined on the User resource, if such attribute exists.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "GET",
            "path": "/v2/schema/{proj_id}/{env_id}/users/attributes/{attribute_id}",
            "path-parameters": {
              "attribute_id": {
                "docs": "Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the "slug").",
                "type": "string",
              },
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "name": "GetUserAttributeRequest",
              "query-parameters": {
                "resource_id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ResourceAttributeRead",
            },
          },
          "list_user_attributes": {
            "auth": true,
            "display-name": "List User Attributes",
            "docs": "Lists all the attributes defined on the User resource.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "GET",
            "path": "/v2/schema/{proj_id}/{env_id}/users/attributes",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "name": "ListUserAttributesRequest",
              "query-parameters": {
                "page": {
                  "allow-multiple": undefined,
                  "docs": "Page number of the results to fetch, starting at 1.",
                  "type": "optional<integer>",
                },
                "per_page": {
                  "allow-multiple": undefined,
                  "docs": "The number of results per page (max 100).",
                  "type": "optional<integer>",
                },
                "resource_id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "list<root.ResourceAttributeRead>",
            },
          },
          "update_user_attribute": {
            "auth": true,
            "display-name": "Update User Attribute",
            "docs": "Partially updates the attribute defined on the User resource.
Fields that will be provided will be completely overwritten.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "PATCH",
            "path": "/v2/schema/{proj_id}/{env_id}/users/attributes/{attribute_id}",
            "path-parameters": {
              "attribute_id": {
                "docs": "Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the "slug").",
                "type": "string",
              },
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.ResourceAttributeUpdate",
              },
              "name": "UpdateUserAttributeRequest",
              "query-parameters": {
                "resource_id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.ResourceAttributeRead",
            },
          },
        },
      },
    },
    "users.yml": {
      "docs": "
Users represent human end-users of your applications that you'd like to enforce permissions on.

You must create a user object in Permit.io prior to trying to enforce permissions for that user.
A user is identified by its key, and you can only create one user with the same key inside a Permit environment.
You can place users within tenants via role assignments in order to enforce multi-tenancy in your app.

You may create users via the API (shown below), with one of the SDKs, or via the Permit cloud console.
",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Users",
        "endpoints": {
          "assign_role_to_user": {
            "auth": true,
            "display-name": "Assign Role To User",
            "docs": "Assigns a role to the user within the tenant.

The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "POST",
            "path": "/v2/facts/{proj_id}/{env_id}/users/{user_id}/roles",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
              "user_id": {
                "docs": "Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "role": "string",
                  "tenant": "string",
                },
              },
              "headers": undefined,
              "name": "UserRoleCreate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.RoleAssignmentRead",
            },
          },
          "create_user": {
            "auth": true,
            "display-name": "Create User",
            "docs": "Creates a new user inside the Permit.io system, from that point forward
you may run permission checks on that user.

If the user is already created: will return 200 instead of 201,
and will return the existing user object in the response body.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "POST",
            "path": "/v2/facts/{proj_id}/{env_id}/users",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.UserCreate",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.UserRead",
            },
          },
          "delete_user": {
            "auth": true,
            "display-name": "Delete User",
            "docs": "Deletes the user and all its related data.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "DELETE",
            "path": "/v2/facts/{proj_id}/{env_id}/users/{user_id}",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
              "user_id": {
                "docs": "Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug").",
                "type": "string",
              },
            },
          },
          "get_user": {
            "auth": true,
            "display-name": "Get User",
            "docs": "Gets a user, if such user exists. Otherwise returns 404.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "GET",
            "path": "/v2/facts/{proj_id}/{env_id}/users/{user_id}",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
              "user_id": {
                "docs": "Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug").",
                "type": "string",
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.UserRead",
            },
          },
          "list_users": {
            "auth": true,
            "display-name": "List Users",
            "docs": "Lists all the users defined within an environment.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "GET",
            "path": "/v2/facts/{proj_id}/{env_id}/users",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "name": "ListUsersRequest",
              "query-parameters": {
                "page": {
                  "allow-multiple": undefined,
                  "docs": "Page number of the results to fetch, starting at 1.",
                  "type": "optional<integer>",
                },
                "per_page": {
                  "allow-multiple": undefined,
                  "docs": "The number of results per page (max 100).",
                  "type": "optional<integer>",
                },
                "role": {
                  "allow-multiple": undefined,
                  "docs": "Match users with a specific role",
                  "type": "optional<string>",
                },
                "search": {
                  "allow-multiple": undefined,
                  "docs": "Text search for the email field",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.PaginatedResultUserRead",
            },
          },
          "replace_user": {
            "auth": true,
            "display-name": "Replace User",
            "docs": undefined,
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "PUT",
            "path": "/v2/facts/{proj_id}/{env_id}/users/{user_id}",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
              "user_id": {
                "docs": "Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.UserCreate",
              },
            },
            "response": {
              "docs": "An existing user was replaced",
              "type": "root.UserRead",
            },
          },
          "unassign_role_from_user": {
            "auth": true,
            "display-name": "Unassign Role From User",
            "docs": "Unassigns the role from the user within the tenant.

The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.

If the role is not actually assigned, will return 404.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "DELETE",
            "path": "/v2/facts/{proj_id}/{env_id}/users/{user_id}/roles",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
              "user_id": {
                "docs": "Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "role": "string",
                  "tenant": "string",
                },
              },
              "headers": undefined,
              "name": "UserRoleRemove",
              "query-parameters": undefined,
            },
          },
          "update_user": {
            "auth": true,
            "display-name": "Update User",
            "docs": "Partially updates the user definition.
Fields that will be provided will be completely overwritten.",
            "errors": [
              "root.UnprocessableEntityError",
            ],
            "method": "PATCH",
            "path": "/v2/facts/{proj_id}/{env_id}/users/{user_id}",
            "path-parameters": {
              "env_id": {
                "docs": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the "slug").",
                "type": "string",
              },
              "proj_id": {
                "docs": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the "slug").",
                "type": "string",
              },
              "user_id": {
                "docs": "Either the unique id of the user, or the URL-friendly key of the user (i.e: the "slug").",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "attributes": {
                    "docs": "Arbitrary user attributes that will be used to enforce attribute-based access control policies.",
                    "type": "optional<map<string, unknown>>",
                  },
                  "email": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                  "first_name": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                  "last_name": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "UserUpdate",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful Response",
              "type": "root.UserRead",
            },
          },
        },
      },
    },
  },
  "rootApiFile": {
    "auth": "bearer",
    "default-environment": "default",
    "display-name": "Permit.io API",
    "environments": {
      "default": "https://api.permit.io",
    },
    "error-discrimination": {
      "strategy": "status-code",
    },
    "imports": {
      "root": "__package__.yml",
    },
    "name": "api",
  },
}
`;
