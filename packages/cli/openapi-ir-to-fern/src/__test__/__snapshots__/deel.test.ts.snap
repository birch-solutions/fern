// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`open api parser deel simple 1`] = `
{
  "definitionFiles": {
    "__package__.yml": {
      "errors": {
        "BadRequestError": {
          "status-code": 400,
          "type": "ApiErrorContainer",
        },
        "ConflictError": {
          "status-code": 409,
          "type": "unknown",
        },
        "ForbiddenError": {
          "status-code": 403,
          "type": "ApiErrorContainer",
        },
        "InternalServerError": {
          "status-code": 500,
          "type": "ApiErrorContainer",
        },
        "NotFoundError": {
          "status-code": 404,
          "type": "ApiErrorContainer",
        },
        "TooManyRequestsError": {
          "status-code": 429,
          "type": "ApiErrorContainer",
        },
        "UnauthorizedError": {
          "status-code": 401,
          "type": "ApiErrorContainer",
        },
      },
      "service": undefined,
      "types": {
        "Agreement": {
          "docs": undefined,
          "properties": {
            "agreement_title": {
              "docs": undefined,
              "type": "string",
            },
            "agreement_type": {
              "docs": undefined,
              "type": "string",
            },
            "client_legal_entity": {
              "docs": undefined,
              "type": "AgreementClientLegalEntity",
            },
            "id": {
              "docs": undefined,
              "type": "double",
            },
            "msa": {
              "docs": undefined,
              "type": "AgreementMsa",
            },
            "provider_legal_entity": {
              "docs": undefined,
              "type": "AgreementProviderLegalEntity",
            },
          },
        },
        "AgreementClientLegalEntity": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": undefined,
              "type": "double",
            },
            "name": {
              "docs": undefined,
              "type": "string",
            },
          },
        },
        "AgreementList": {
          "docs": undefined,
          "type": "list<Agreement>",
        },
        "AgreementListContainer": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "AgreementList",
            },
            "page": {
              "docs": undefined,
              "type": "optional<PageInfoWithoutCursor>",
            },
          },
        },
        "AgreementMsa": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": undefined,
              "type": "string",
            },
            "title": {
              "docs": undefined,
              "type": "string",
            },
          },
        },
        "AgreementProviderLegalEntity": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": undefined,
              "type": "double",
            },
            "name": {
              "docs": undefined,
              "type": "string",
            },
          },
        },
        "AgreementsParamLimit": {
          "docs": "Maximum number of records to return. This is supposed to be an integer but query parameters are string. Maximum is 50.",
          "type": "string",
        },
        "AgreementsParamOffset": {
          "docs": "Offset/index of record for the next page of records to return. This is supposed to be an integer but query parameters are string.",
          "type": "string",
        },
        "AgreementsSearchForm": {
          "docs": "Convenient model to encapsulate query parameters to get a list of agreements.",
          "properties": {
            "contract_id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "limit": {
              "docs": undefined,
              "type": "optional<AgreementsParamLimit>",
            },
            "offset": {
              "docs": undefined,
              "type": "optional<AgreementsParamOffset>",
            },
          },
        },
        "AlternateEmailItem": {
          "docs": undefined,
          "properties": {
            "email": {
              "docs": undefined,
              "type": "optional<EmailType>",
            },
            "isVerified": {
              "docs": undefined,
              "type": "boolean",
            },
          },
        },
        "AlternateEmailList": {
          "docs": "List of alternate email addresses.",
          "type": "list<AlternateEmailItem>",
        },
        "ApiError": {
          "docs": undefined,
          "properties": {
            "message": {
              "docs": "A description of the returned error",
              "type": "optional<string>",
            },
            "path": {
              "docs": "The JSON path where input validation failed",
              "type": "optional<string>",
            },
          },
        },
        "ApiErrorContainer": {
          "docs": undefined,
          "properties": {
            "errors": {
              "docs": undefined,
              "type": "optional<list<ApiError>>",
            },
            "request": {
              "docs": undefined,
              "type": "optional<ApiErrorRequest>",
            },
          },
        },
        "ApiErrorRequest": {
          "docs": undefined,
          "properties": {
            "api_req_id": {
              "docs": "The request ID of the failed request",
              "type": "optional<string>",
            },
            "code": {
              "docs": "The code of the source handler which produced the returned error",
              "type": "optional<double>",
            },
            "docs": {
              "docs": "A link to the official documentation for the requested endpoint resource",
              "type": "optional<string>",
            },
            "method": {
              "docs": "The HTTP method of the failed request",
              "type": "optional<string>",
            },
            "source": {
              "docs": "The source handler which produced the returned error",
              "type": "optional<string>",
            },
            "status": {
              "docs": "The status code of the response",
              "type": "optional<double>",
            },
            "url": {
              "docs": "The relative URL of the failed request",
              "type": "optional<string>",
            },
          },
        },
        "BasicContract": {
          "docs": undefined,
          "properties": {
            "client": {
              "docs": undefined,
              "type": "ClientOfBasicContract",
            },
            "created_at": {
              "docs": undefined,
              "type": "optional<DateTimeString>",
            },
            "external_id": {
              "docs": "A unique identifier for the object provided by an external system.",
              "type": "optional<string>",
            },
            "id": {
              "docs": "<span style="white-space: nowrap">\`non-empty\`</span>",
              "type": "string",
            },
            "invitations": {
              "docs": undefined,
              "type": "InvitationsOfBasicContract",
            },
            "is_archived": {
              "docs": undefined,
              "type": "boolean",
            },
            "is_shielded": {
              "docs": undefined,
              "type": "boolean",
            },
            "notice_period": {
              "docs": undefined,
              "type": "optional<NoticePeriod>",
            },
            "signatures": {
              "docs": undefined,
              "type": "SignaturesOfBasicContract",
            },
            "status": {
              "docs": undefined,
              "type": "ContractStatusEnum",
            },
            "termination_date": {
              "docs": undefined,
              "type": "optional<DateTimeString>",
            },
            "title": {
              "docs": "<span style="white-space: nowrap">\`non-empty\`</span>",
              "type": "string",
            },
            "type": {
              "docs": undefined,
              "type": "ContractTypeEnum",
            },
            "who_reports": {
              "docs": undefined,
              "type": "optional<ContractWhoReportsEnum>",
            },
            "worker": {
              "docs": undefined,
              "type": "optional<WorkerOfBasicContract>",
            },
          },
        },
        "BasicInvoiceAdjustment": {
          "docs": undefined,
          "properties": {
            "attachment": {
              "docs": undefined,
              "type": "optional<FileAttachmentInfo>",
            },
            "contract": {
              "docs": undefined,
              "type": "BasicInvoiceAdjustmentContract",
            },
            "created_at": {
              "docs": undefined,
              "type": "optional<DateTimeStringRequired>",
            },
            "currency_code": {
              "docs": undefined,
              "type": "CurrencyCodeRequired",
            },
            "custom_scale": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "date_submitted": {
              "docs": undefined,
              "type": "optional<DateTimeStringRequired>",
            },
            "description": {
              "docs": undefined,
              "type": "string",
            },
            "id": {
              "docs": undefined,
              "type": "UniqueObjectIdentifier",
            },
            "payment_cycle": {
              "docs": undefined,
              "type": "BasicInvoiceAdjustmentPaymentCycle",
            },
            "public_id": {
              "docs": undefined,
              "type": "optional<PublicId>",
            },
            "quantity": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "reported_by": {
              "docs": undefined,
              "type": "BasicInvoiceAdjustmentReportedBy",
            },
            "reviewed_by": {
              "docs": undefined,
              "type": "optional<BasicInvoiceAdjustmentReviewedBy>",
            },
            "scale": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "status": {
              "docs": undefined,
              "type": "optional<InvoiceAdjustmentStatusEnum>",
            },
            "total_amount": {
              "docs": undefined,
              "type": "string",
            },
            "type": {
              "docs": undefined,
              "type": "InvoiceAdjustmentTypeEnum",
            },
            "worksheet": {
              "docs": undefined,
              "type": "optional<BasicInvoiceAdjustmentWorksheet>",
            },
          },
        },
        "BasicInvoiceAdjustmentContract": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": undefined,
              "type": "string",
            },
            "title": {
              "docs": undefined,
              "type": "string",
            },
            "type": {
              "docs": undefined,
              "type": "ContractTypeEnum",
            },
          },
        },
        "BasicInvoiceAdjustmentPaymentCycle": {
          "docs": undefined,
          "properties": {
            "end_date": {
              "docs": undefined,
              "type": "optional<DateTimeStringRequired>",
            },
            "start_date": {
              "docs": undefined,
              "type": "optional<DateTimeStringRequired>",
            },
          },
        },
        "BasicInvoiceAdjustmentReportedBy": {
          "docs": undefined,
          "properties": {
            "full_name": {
              "docs": undefined,
              "type": "string",
            },
            "id": {
              "docs": undefined,
              "type": "double",
            },
          },
        },
        "BasicInvoiceAdjustmentReviewedBy": {
          "docs": undefined,
          "properties": {
            "full_name": {
              "docs": undefined,
              "type": "string",
            },
            "id": {
              "docs": undefined,
              "type": "double",
            },
            "remarks": {
              "docs": undefined,
              "type": "string",
            },
            "reviewed_at": {
              "docs": undefined,
              "type": "string",
            },
          },
        },
        "BasicInvoiceAdjustmentWorksheet": {
          "docs": undefined,
          "properties": {
            "days": {
              "docs": undefined,
              "type": "double",
            },
            "hours": {
              "docs": undefined,
              "type": "double",
            },
            "minutes": {
              "docs": undefined,
              "type": "double",
            },
            "weeks": {
              "docs": undefined,
              "type": "double",
            },
          },
        },
        "BasicLegalEntity": {
          "docs": undefined,
          "properties": {
            "entity_subtype": {
              "docs": undefined,
              "type": "LegalEntitySubType",
            },
            "entity_type": {
              "docs": undefined,
              "type": "LegalEntityType",
            },
            "id": {
              "docs": undefined,
              "type": "double",
            },
            "name": {
              "docs": undefined,
              "type": "string",
            },
          },
        },
        "BasicOrganization": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": undefined,
              "type": "double",
            },
            "name": {
              "docs": "<span style="white-space: nowrap">\`non-empty\`</span>",
              "type": "string",
            },
          },
        },
        "BasicTeam": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": undefined,
              "type": "double",
            },
            "name": {
              "docs": "<span style="white-space: nowrap">\`non-empty\`</span>",
              "type": "string",
            },
          },
        },
        "BasicTimesheet": {
          "docs": undefined,
          "properties": {
            "attachment": {
              "docs": undefined,
              "type": "optional<FileAttachmentInfo>",
            },
            "contract": {
              "docs": undefined,
              "type": "BasicTimesheetContract",
            },
            "created_at": {
              "docs": undefined,
              "type": "string",
            },
            "currency_code": {
              "docs": undefined,
              "type": "CurrencyCodeRequired",
            },
            "custom_scale": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "date_submitted": {
              "docs": undefined,
              "type": "optional<DateTimeStringRequired>",
            },
            "description": {
              "docs": undefined,
              "type": "string",
            },
            "id": {
              "docs": undefined,
              "type": "UniqueObjectIdentifier",
            },
            "payment_cycle": {
              "docs": undefined,
              "type": "optional<BasicTimesheetPaymentCycle>",
            },
            "public_id": {
              "docs": undefined,
              "type": "optional<PublicId>",
            },
            "quantity": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "reported_by": {
              "docs": undefined,
              "type": "BasicTimesheetReportedBy",
            },
            "reviewed_by": {
              "docs": undefined,
              "type": "optional<BasicTimesheetReviewedBy>",
            },
            "scale": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "status": {
              "docs": undefined,
              "type": "optional<TimesheetStatusEnum>",
            },
            "total_amount": {
              "docs": "is equal to quantity times rate of active work statement + bonus in this record",
              "type": "string",
            },
            "type": {
              "docs": "Deprecated - it is always "work"",
              "type": "string",
            },
            "worksheet": {
              "docs": undefined,
              "type": "optional<BasicTimesheetWorksheet>",
            },
          },
        },
        "BasicTimesheetContract": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": undefined,
              "type": "string",
            },
            "title": {
              "docs": undefined,
              "type": "string",
            },
            "type": {
              "docs": undefined,
              "type": "ContractTypeEnum",
            },
          },
        },
        "BasicTimesheetPaymentCycle": {
          "docs": undefined,
          "properties": {
            "end_date": {
              "docs": undefined,
              "type": "optional<DateTimeString>",
            },
            "start_date": {
              "docs": undefined,
              "type": "optional<DateTimeString>",
            },
          },
        },
        "BasicTimesheetReportedBy": {
          "docs": undefined,
          "properties": {
            "full_name": {
              "docs": undefined,
              "type": "string",
            },
            "id": {
              "docs": undefined,
              "type": "double",
            },
          },
        },
        "BasicTimesheetReviewedBy": {
          "docs": undefined,
          "properties": {
            "full_name": {
              "docs": undefined,
              "type": "string",
            },
            "id": {
              "docs": undefined,
              "type": "double",
            },
            "remarks": {
              "docs": undefined,
              "type": "string",
            },
            "reviewed_at": {
              "docs": undefined,
              "type": "string",
            },
          },
        },
        "BasicTimesheetWorksheet": {
          "docs": undefined,
          "properties": {
            "days": {
              "docs": undefined,
              "type": "double",
            },
            "hours": {
              "docs": undefined,
              "type": "double",
            },
            "minutes": {
              "docs": undefined,
              "type": "double",
            },
            "weeks": {
              "docs": undefined,
              "type": "double",
            },
          },
        },
        "CalculateFinalPaymentRequestCalculationType": {
          "docs": undefined,
          "enum": [
            {
              "docs": undefined,
              "name": "CUSTOM_AMOUNT",
              "value": "CUSTOM_AMOUNT",
            },
            {
              "docs": undefined,
              "name": "WORK_DAYS",
              "value": "WORK_DAYS",
            },
            {
              "docs": undefined,
              "name": "CALENDAR_DAYS",
              "value": "CALENDAR_DAYS",
            },
            {
              "docs": undefined,
              "name": "FULL_AMOUNT",
              "value": "FULL_AMOUNT",
            },
          ],
        },
        "ClientLegalEntity": {
          "docs": undefined,
          "properties": {
            "email": {
              "docs": undefined,
              "type": "optional<EmailType>",
            },
            "id": {
              "docs": undefined,
              "type": "long",
            },
            "name": {
              "docs": undefined,
              "type": "string",
            },
            "registration_number": {
              "docs": undefined,
              "type": "string",
            },
            "subtype": {
              "docs": undefined,
              "type": "LegalEntitySubType",
            },
            "type": {
              "docs": undefined,
              "type": "LegalEntityType",
            },
            "vat_number": {
              "docs": undefined,
              "type": "string",
            },
          },
        },
        "ClientOfBasicContract": {
          "docs": undefined,
          "properties": {
            "team": {
              "docs": undefined,
              "type": "optional<TeamOfBasicContract>",
            },
          },
        },
        "ClientOfContract": {
          "docs": undefined,
          "properties": {
            "email": {
              "docs": undefined,
              "type": "optional<EmailType>",
            },
            "full_name": {
              "docs": undefined,
              "type": "string",
            },
            "id": {
              "docs": undefined,
              "type": "long",
            },
            "legal_entity": {
              "docs": undefined,
              "type": "optional<ClientLegalEntity>",
            },
            "team": {
              "docs": undefined,
              "type": "TeamOfContract",
            },
          },
        },
        "CompensationDetailsOfContract": {
          "docs": undefined,
          "properties": {
            "amount": {
              "docs": undefined,
              "type": "string",
            },
            "currency_code": {
              "docs": undefined,
              "type": "CurrencyCodeRequired",
            },
            "first_payment": {
              "docs": undefined,
              "type": "string",
            },
            "first_payment_date": {
              "docs": undefined,
              "type": "optional<DateTimeString>",
            },
            "frequency": {
              "docs": undefined,
              "type": "string",
            },
            "gross_annual_salary": {
              "docs": undefined,
              "type": "string",
            },
            "gross_signing_bonus": {
              "docs": undefined,
              "type": "string",
            },
            "gross_variable_bonus": {
              "docs": undefined,
              "type": "string",
            },
            "scale": {
              "docs": undefined,
              "type": "string",
            },
          },
        },
        "CompensationDetailsOfContractToCreateOngoingTimeBased": {
          "docs": undefined,
          "properties": {
            "amount": {
              "docs": undefined,
              "type": "double",
            },
            "scale": {
              "docs": undefined,
              "type": "WorkStatementScaleEnum",
            },
          },
        },
        "CompensationDetailsOfContractToCreatePayAsYouGoTimeBased": {
          "docs": undefined,
          "properties": {
            "amount": {
              "docs": undefined,
              "type": "double",
            },
            "scale": {
              "docs": undefined,
              "type": "WorkStatementScaleEnum",
            },
          },
        },
        "CompensationDetailsOfContractToCreateShared": {
          "docs": undefined,
          "properties": {
            "amount": {
              "docs": "Amount to be paid. This field can be excluded when creating a Pay-as-you-go task-based or Milestone contracts.",
              "type": "optional<double>",
            },
            "currency_code": {
              "docs": undefined,
              "type": "CurrencyCodeRequired",
            },
            "cycle_end": {
              "docs": "Date invoice cycle ends.",
              "type": "double",
            },
            "cycle_end_type": {
              "docs": undefined,
              "type": "WorkStatementCycleEndTypeEnum",
            },
            "first_payment": {
              "docs": "First payment amount.",
              "type": "optional<double>",
            },
            "first_payment_date": {
              "docs": undefined,
              "type": "optional<DateString>",
            },
            "frequency": {
              "docs": undefined,
              "type": "WorkStatementCycleScaleEnum",
            },
            "notice_period": {
              "docs": undefined,
              "type": "optional<NoticePeriod>",
            },
            "pay_before_weekends": {
              "docs": "If the payment due is on a weekend, pay on Friday.",
              "type": "optional<boolean>",
            },
            "payment_due_days": {
              "docs": undefined,
              "type": "double",
            },
            "payment_due_type": {
              "docs": undefined,
              "type": "WorkStatementPaymentDueTypeEnum",
            },
          },
        },
        "Contract": {
          "docs": undefined,
          "properties": {
            "client": {
              "docs": undefined,
              "type": "optional<ClientOfContract>",
            },
            "compensation_details": {
              "docs": undefined,
              "type": "CompensationDetailsOfContract",
            },
            "created_at": {
              "docs": undefined,
              "type": "optional<DateTimeString>",
            },
            "custom_fields": {
              "docs": undefined,
              "type": "optional<list<ContractCustomField>>",
            },
            "employment_details": {
              "docs": undefined,
              "type": "EmploymentDetailsOfContract",
            },
            "external_id": {
              "docs": "A unique identifier for the object provided by an external system.",
              "type": "optional<string>",
            },
            "id": {
              "docs": "<span style="white-space: nowrap">\`non-empty\`</span>",
              "type": "string",
            },
            "invitations": {
              "docs": undefined,
              "type": "InvitationsOfBasicContract",
            },
            "is_archived": {
              "docs": undefined,
              "type": "boolean",
            },
            "job_title": {
              "docs": undefined,
              "type": "string",
            },
            "notice_period": {
              "docs": undefined,
              "type": "optional<NoticePeriod>",
            },
            "scope_of_work": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "seniority": {
              "docs": undefined,
              "type": "optional<Seniority>",
            },
            "signatures": {
              "docs": undefined,
              "type": "SignaturesOfContract",
            },
            "special_clause": {
              "docs": undefined,
              "type": "string",
            },
            "start_date": {
              "docs": undefined,
              "type": "optional<DateTimeString>",
            },
            "status": {
              "docs": undefined,
              "type": "ContractStatusEnum",
            },
            "termination_date": {
              "docs": undefined,
              "type": "optional<DateTimeString>",
            },
            "title": {
              "docs": "<span style="white-space: nowrap">\`non-empty\`</span>",
              "type": "string",
            },
            "type": {
              "docs": undefined,
              "type": "ContractTypeEnum",
            },
            "who_reports": {
              "docs": undefined,
              "type": "optional<ContractWhoReportsEnum>",
            },
            "worker": {
              "docs": undefined,
              "type": "optional<WorkerOfContract>",
            },
          },
        },
        "ContractContainer": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "Contract",
            },
          },
        },
        "ContractContainerOngoingTimeBased": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "Contract",
            },
          },
        },
        "ContractContainerPayAsYouGoTimeBased": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "Contract",
            },
          },
        },
        "ContractContainerPaygMilestones": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "Contract",
            },
          },
        },
        "ContractContainerPaygTasks": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "Contract",
            },
          },
        },
        "ContractCustomField": {
          "docs": "Customized attributes on contracts (Employee ID, Project code, etc).",
          "properties": {
            "name": {
              "docs": "Custom field property name.",
              "type": "optional<string>",
            },
            "value": {
              "docs": "Custom field property value.",
              "type": "optional<string>",
            },
          },
        },
        "ContractDetailsToAmend": {
          "docs": "You can specify any combination of data points that need changing.",
          "properties": {
            "amount": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "currency_code": {
              "docs": undefined,
              "type": "optional<CurrencyCodeRequired>",
            },
            "cycle_end": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "cycle_end_type": {
              "docs": undefined,
              "type": "optional<WorkStatementCycleEndTypeEnum>",
            },
            "effective_date": {
              "docs": undefined,
              "type": "optional<DateStringRequired>",
            },
            "first_payment": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "first_payment_date": {
              "docs": undefined,
              "type": "optional<DateStringRequired>",
            },
            "frequency": {
              "docs": undefined,
              "type": "optional<WorkStatementCycleScaleEnum>",
            },
            "job_title_id": {
              "docs": "If you want to use a predefined job title, please use a job title ID",
              "type": "optional<double>",
            },
            "job_title_name": {
              "docs": "You can enter new job title.",
              "type": "optional<string>",
            },
            "pay_before_weekends": {
              "docs": "If the payment due is on a weekend, pay on Friday.",
              "type": "optional<boolean>",
            },
            "payment_due_days": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "payment_due_type": {
              "docs": undefined,
              "type": "optional<WorkStatementPaymentDueTypeEnum>",
            },
            "scale": {
              "docs": undefined,
              "type": "optional<WorkStatementScaleEnum>",
            },
            "scope_of_work": {
              "docs": "Text to describe the scope of work of the contract.",
              "type": "optional<string>",
            },
            "seniority_id": {
              "docs": "You can use a predefined seniority level ID.",
              "type": "optional<double>",
            },
            "special_clause": {
              "docs": "Text to describe any special clause in contract.",
              "type": "optional<string>",
            },
          },
        },
        "ContractDocumentContainer": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "optional<FileAttachmentInfo>",
            },
          },
        },
        "ContractExternalIdPatchedContainer": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "ContractExternalIdToPatch",
            },
          },
        },
        "ContractExternalIdPatchedResponseContainer": {
          "docs": undefined,
          "type": "ContractExternalIdToPatch",
        },
        "ContractExternalIdToPatch": {
          "docs": undefined,
          "properties": {
            "external_id": {
              "docs": "A unique identifier for the object provided by an external system.",
              "type": "string",
            },
          },
        },
        "ContractFirstSignEnum": {
          "docs": "Flag to indicate who is supposed to sign a contract",
          "enum": [
            {
              "docs": undefined,
              "name": "client",
              "value": "client",
            },
            {
              "docs": undefined,
              "name": "contractor",
              "value": "contractor",
            },
          ],
        },
        "ContractInvitationToCreate": {
          "docs": undefined,
          "properties": {
            "email": {
              "docs": undefined,
              "type": "EmailTypeRequired",
            },
            "message": {
              "docs": "Message for the worker. <span style="white-space: nowrap">\`non-empty\`</span> ",
              "type": "string",
            },
          },
        },
        "ContractList": {
          "docs": undefined,
          "type": "list<BasicContract>",
        },
        "ContractListContainer": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "ContractList",
            },
            "page": {
              "docs": undefined,
              "type": "PageInfo",
            },
          },
        },
        "ContractPreview": {
          "docs": undefined,
          "type": "string",
        },
        "ContractSearchForm": {
          "discriminated": false,
          "docs": "Search form should include parameters varied based on usage of cursor for pagination. NOTE: that all query parameters are based on strings",
          "union": [
            {
              "docs": undefined,
              "type": "ContractSearchFormWithCursor",
            },
            {
              "docs": undefined,
              "type": "ContractSearchFormWithoutCursor",
            },
          ],
        },
        "ContractSearchFormWithCursor": {
          "docs": "This is a model to make it easier to understand and restrict search parameters",
          "properties": {
            "after_cursor": {
              "docs": "Return next page of results after given cursor.",
              "type": "optional<string>",
            },
            "limit": {
              "docs": "Return a page of results with given number of records.",
              "type": "optional<string>",
            },
          },
        },
        "ContractSearchFormWithoutCursor": {
          "docs": "This is a model to make it easier to understand and restrict search parameters",
          "properties": {
            "countries": {
              "docs": undefined,
              "type": "optional<ContractSearchFormWithoutCursorCountries>",
            },
            "currencies": {
              "docs": undefined,
              "type": "optional<ContractSearchFormWithoutCursorCurrencies>",
            },
            "external_id": {
              "docs": "Filter contracts for given external ID <span style="white-space: nowrap">\`<= 255 characters\`</span> ",
              "type": "optional<string>",
            },
            "limit": {
              "docs": "Return a page of results with given number of records.",
              "type": "optional<string>",
            },
            "order_direction": {
              "docs": undefined,
              "type": "optional<SortDirEnum>",
            },
            "search": {
              "docs": "Include a contract if by name or contractor name contains given search term.",
              "type": "optional<string>",
            },
            "sort_by": {
              "docs": undefined,
              "type": "optional<ContractsSortByEnum>",
            },
            "statuses": {
              "docs": undefined,
              "type": "optional<ContractSearchFormWithoutCursorStatuses>",
            },
            "team_id": {
              "docs": "Filter contracts for given team ID; NOTE: technically ALL query parameters are strings or array of strings",
              "type": "optional<string>",
            },
            "types": {
              "docs": undefined,
              "type": "optional<ContractSearchFormWithoutCursorTypes>",
            },
          },
        },
        "ContractSearchFormWithoutCursorCountries": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "CountryCodeList",
            },
            {
              "docs": undefined,
              "type": "CountryCode",
            },
          ],
        },
        "ContractSearchFormWithoutCursorCurrencies": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "CurrencyCodeList",
            },
            {
              "docs": undefined,
              "type": "CurrencyCodeRequired",
            },
          ],
        },
        "ContractSearchFormWithoutCursorStatuses": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "ContractStatusEnumList",
            },
            {
              "docs": undefined,
              "type": "ContractStatusEnum",
            },
          ],
        },
        "ContractSearchFormWithoutCursorTypes": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "ContractTypeEnum",
            },
            {
              "docs": undefined,
              "type": "ContractTypeEnumList",
            },
          ],
        },
        "ContractSignatureToCreate": {
          "docs": undefined,
          "properties": {
            "client_signature": {
              "docs": "Signature of client.",
              "type": "string",
            },
            "contract_template_id": {
              "docs": "Please use null to use default Deel contract template; otherwise you can use the template you created and customized. If template ID is not in payload, template stays unchanged.",
              "type": "optional<double>",
            },
          },
        },
        "ContractStatusEnum": {
          "docs": "Status of a contract in Deel workflow",
          "enum": [
            {
              "docs": undefined,
              "name": "new",
              "value": "new",
            },
            {
              "docs": undefined,
              "name": "under_review",
              "value": "under_review",
            },
            {
              "docs": undefined,
              "name": "waiting_for_employee_contract",
              "value": "waiting_for_employee_contract",
            },
            {
              "docs": undefined,
              "name": "waiting_for_client_sign",
              "value": "waiting_for_client_sign",
            },
            {
              "docs": undefined,
              "name": "processing_payment",
              "value": "processing_payment",
            },
            {
              "docs": undefined,
              "name": "waiting_for_contractor_sign",
              "value": "waiting_for_contractor_sign",
            },
            {
              "docs": undefined,
              "name": "waiting_for_eor_sign",
              "value": "waiting_for_eor_sign",
            },
            {
              "docs": undefined,
              "name": "waiting_for_employee_sign",
              "value": "waiting_for_employee_sign",
            },
            {
              "docs": undefined,
              "name": "awaiting_deposit_payment",
              "value": "awaiting_deposit_payment",
            },
            {
              "docs": undefined,
              "name": "in_progress",
              "value": "in_progress",
            },
            {
              "docs": undefined,
              "name": "completed",
              "value": "completed",
            },
            {
              "docs": undefined,
              "name": "cancelled",
              "value": "cancelled",
            },
            {
              "docs": undefined,
              "name": "user_cancelled",
              "value": "user_cancelled",
            },
            {
              "docs": undefined,
              "name": "rejected",
              "value": "rejected",
            },
            {
              "docs": undefined,
              "name": "waiting_for_client_payment",
              "value": "waiting_for_client_payment",
            },
          ],
        },
        "ContractStatusEnumList": {
          "docs": "List of contract statuses",
          "type": "list<ContractStatusEnum>",
        },
        "ContractTemplateList": {
          "docs": undefined,
          "type": "list<ContractTemplateSummary>",
        },
        "ContractTemplateListContainer": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "optional<ContractTemplateList>",
            },
          },
        },
        "ContractTemplateSummary": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": "Unique identifier of a contract template",
              "type": "double",
            },
            "title": {
              "docs": "Title of a contract template",
              "type": "string",
            },
          },
        },
        "ContractTerminationResult": {
          "docs": undefined,
          "properties": {
            "completion_date": {
              "docs": "Date the contract is marked for completion",
              "type": "optional<DateString>",
            },
            "id": {
              "docs": "Deel Contract ID.",
              "type": "optional<string>",
            },
          },
        },
        "ContractTerminationResultContainer": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "ContractTerminationResult",
            },
          },
        },
        "ContractToCreate": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "ContractToCreatePayAsYouGoTimeBased",
            },
            {
              "docs": undefined,
              "type": "ContractToCreatePaygTasks",
            },
            {
              "docs": undefined,
              "type": "ContractToCreatePaygMilestones",
            },
            {
              "docs": undefined,
              "type": "ContractToCreateOngoingTimeBased",
            },
          ],
        },
        "ContractToCreateOngoingTimeBased": {
          "docs": undefined,
          "extends": [
            "ContractToCreateShared",
          ],
          "properties": {
            "compensation_details": {
              "docs": undefined,
              "type": "ContractToCreateOngoingTimeBasedCompensationDetails",
            },
            "type": "literal<"ongoing_time_based">",
          },
        },
        "ContractToCreateOngoingTimeBasedCompensationDetails": {
          "docs": undefined,
          "properties": {
            "amount": {
              "docs": "Amount to be paid. This field can be excluded when creating a Pay-as-you-go task-based or Milestone contracts.",
              "type": "optional<double>",
            },
            "currency_code": {
              "docs": undefined,
              "type": "CurrencyCodeRequired",
            },
            "cycle_end": {
              "docs": "Date invoice cycle ends.",
              "type": "double",
            },
            "cycle_end_type": {
              "docs": undefined,
              "type": "WorkStatementCycleEndTypeEnum",
            },
            "first_payment": {
              "docs": "First payment amount.",
              "type": "optional<double>",
            },
            "first_payment_date": {
              "docs": undefined,
              "type": "optional<DateString>",
            },
            "frequency": {
              "docs": undefined,
              "type": "WorkStatementCycleScaleEnum",
            },
            "notice_period": {
              "docs": undefined,
              "type": "optional<NoticePeriod>",
            },
            "pay_before_weekends": {
              "docs": "If the payment due is on a weekend, pay on Friday.",
              "type": "optional<boolean>",
            },
            "payment_due_days": {
              "docs": undefined,
              "type": "double",
            },
            "payment_due_type": {
              "docs": undefined,
              "type": "WorkStatementPaymentDueTypeEnum",
            },
            "scale": {
              "docs": undefined,
              "type": "WorkStatementScaleEnum",
            },
          },
        },
        "ContractToCreatePayAsYouGoTimeBased": {
          "docs": undefined,
          "extends": [
            "ContractToCreateShared",
          ],
          "properties": {
            "compensation_details": {
              "docs": undefined,
              "type": "ContractToCreatePayAsYouGoTimeBasedCompensationDetails",
            },
            "type": "literal<"pay_as_you_go_time_based">",
          },
        },
        "ContractToCreatePayAsYouGoTimeBasedCompensationDetails": {
          "docs": undefined,
          "properties": {
            "amount": {
              "docs": "Amount to be paid. This field can be excluded when creating a Pay-as-you-go task-based or Milestone contracts.",
              "type": "optional<double>",
            },
            "currency_code": {
              "docs": undefined,
              "type": "CurrencyCodeRequired",
            },
            "cycle_end": {
              "docs": "Date invoice cycle ends.",
              "type": "double",
            },
            "cycle_end_type": {
              "docs": undefined,
              "type": "WorkStatementCycleEndTypeEnum",
            },
            "first_payment": {
              "docs": "First payment amount.",
              "type": "optional<double>",
            },
            "first_payment_date": {
              "docs": undefined,
              "type": "optional<DateString>",
            },
            "frequency": {
              "docs": undefined,
              "type": "WorkStatementCycleScaleEnum",
            },
            "notice_period": {
              "docs": undefined,
              "type": "optional<NoticePeriod>",
            },
            "pay_before_weekends": {
              "docs": "If the payment due is on a weekend, pay on Friday.",
              "type": "optional<boolean>",
            },
            "payment_due_days": {
              "docs": undefined,
              "type": "double",
            },
            "payment_due_type": {
              "docs": undefined,
              "type": "WorkStatementPaymentDueTypeEnum",
            },
            "scale": {
              "docs": undefined,
              "type": "WorkStatementScaleEnum",
            },
          },
        },
        "ContractToCreatePaygMilestones": {
          "docs": undefined,
          "extends": [
            "ContractToCreateShared",
          ],
          "properties": {
            "compensation_details": {
              "docs": undefined,
              "type": "CompensationDetailsOfContractToCreateShared",
            },
            "type": "literal<"payg_milestones">",
          },
        },
        "ContractToCreatePaygTasks": {
          "docs": undefined,
          "extends": [
            "ContractToCreateShared",
          ],
          "properties": {
            "compensation_details": {
              "docs": undefined,
              "type": "CompensationDetailsOfContractToCreateShared",
            },
            "type": "literal<"payg_tasks">",
          },
        },
        "ContractToCreateShared": {
          "docs": "Details of contract to create",
          "properties": {
            "client": {
              "docs": undefined,
              "type": "ContractToCreateSharedClient",
            },
            "country_code": {
              "docs": undefined,
              "type": "optional<CountryCode>",
            },
            "external_id": {
              "docs": "External Id.",
              "type": "optional<string>",
            },
            "job_title": {
              "docs": "Worker's job title. You can enter a custom job title or use a pre-defiled job title using the Id retrieved in job-titles endpoint.",
              "type": "ContractToCreateSharedJobTitle",
            },
            "meta": {
              "docs": undefined,
              "type": "MetaDataOfContractToCreate",
            },
            "notice_period": {
              "docs": undefined,
              "type": "optional<NoticePeriod>",
            },
            "scope_of_work": {
              "docs": "Describe the work to be performed.",
              "type": "optional<string>",
            },
            "seniority": {
              "docs": "Job seniority level. Please use the seniority levels endpoint to retrieve the list of seniority levels.",
              "type": "optional<ContractToCreateSharedSeniority>",
            },
            "special_clause": {
              "docs": "Enter any special clause you may have.",
              "type": "optional<string>",
            },
            "start_date": {
              "docs": undefined,
              "type": "optional<DateStringRequired>",
            },
            "state_code": {
              "docs": "The state or province code. Use country lookup endpoint to retrieve state codes.",
              "type": "optional<string>",
            },
            "termination_date": {
              "docs": undefined,
              "type": "optional<DateString>",
            },
            "title": {
              "docs": "The title of the contract.",
              "type": "string",
            },
            "who_reports": {
              "docs": undefined,
              "type": "optional<ContractWhoReportsEnum>",
            },
            "worker": {
              "docs": "Worker properties",
              "type": "optional<ContractToCreateSharedWorker>",
            },
          },
        },
        "ContractToCreateSharedClient": {
          "docs": undefined,
          "properties": {
            "legal_entity": {
              "docs": "Choose the Deel legal entity for this contract. Use legal entity endpoint to retrieve a list of legal entities in your organization.",
              "type": "ContractToCreateSharedClientLegalEntity",
            },
            "team": {
              "docs": "Choose the Deel team for this contract. Use teams endpoint to retrieve a list of teams in your organization.",
              "type": "ContractToCreateSharedClientTeam",
            },
          },
        },
        "ContractToCreateSharedClientLegalEntity": {
          "docs": "Choose the Deel legal entity for this contract. Use legal entity endpoint to retrieve a list of legal entities in your organization.",
          "properties": {
            "id": {
              "docs": undefined,
              "type": "double",
            },
          },
        },
        "ContractToCreateSharedClientTeam": {
          "docs": "Choose the Deel team for this contract. Use teams endpoint to retrieve a list of teams in your organization.",
          "properties": {
            "id": {
              "docs": undefined,
              "type": "double",
            },
          },
        },
        "ContractToCreateSharedJobTitle": {
          "docs": "Worker's job title. You can enter a custom job title or use a pre-defiled job title using the Id retrieved in job-titles endpoint.",
          "properties": {
            "id": {
              "docs": "Id of an predefined job title.",
              "type": "optional<double>",
            },
            "name": {
              "docs": "Job title. Please leave it blank when entering an Id.",
              "type": "optional<string>",
            },
          },
        },
        "ContractToCreateSharedSeniority": {
          "docs": "Job seniority level. Please use the seniority levels endpoint to retrieve the list of seniority levels.",
          "properties": {
            "id": {
              "docs": undefined,
              "type": "optional<double>",
            },
          },
        },
        "ContractToCreateSharedWorker": {
          "docs": "Worker properties",
          "properties": {
            "expected_email": {
              "docs": undefined,
              "type": "optional<WorkerEmailType>",
            },
            "first_name": {
              "docs": "Worker's first name",
              "type": "optional<string>",
            },
            "last_name": {
              "docs": "Worker's last name",
              "type": "optional<string>",
            },
          },
        },
        "ContractToTerminate": {
          "docs": undefined,
          "properties": {
            "completion_date": {
              "docs": undefined,
              "type": "optional<DateString>",
            },
            "message": {
              "docs": "A message for the termination",
              "type": "optional<string>",
            },
            "terminate_now": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
          },
        },
        "ContractTypeEnum": {
          "docs": "Type of a contract",
          "enum": [
            {
              "docs": undefined,
              "name": "ongoing_time_based",
              "value": "ongoing_time_based",
            },
            {
              "docs": undefined,
              "name": "milestones",
              "value": "milestones",
            },
            {
              "docs": undefined,
              "name": "time_based",
              "value": "time_based",
            },
            {
              "docs": undefined,
              "name": "pay_as_you_go_time_based",
              "value": "pay_as_you_go_time_based",
            },
            {
              "docs": undefined,
              "name": "commission",
              "value": "commission",
            },
            {
              "docs": undefined,
              "name": "payg_milestones",
              "value": "payg_milestones",
            },
            {
              "docs": undefined,
              "name": "payg_tasks",
              "value": "payg_tasks",
            },
            {
              "docs": undefined,
              "name": "eor",
              "value": "eor",
            },
            {
              "docs": undefined,
              "name": "unknown",
              "value": "unknown",
            },
            {
              "docs": undefined,
              "name": "employee",
              "value": "employee",
            },
            {
              "docs": undefined,
              "name": "global_payroll",
              "value": "global_payroll",
            },
            {
              "docs": undefined,
              "name": "shield_msa",
              "value": "shield_msa",
            },
            {
              "docs": undefined,
              "name": "hris_direct_employee",
              "value": "hris_direct_employee",
            },
          ],
        },
        "ContractTypeEnumList": {
          "docs": "List of contract types",
          "type": "list<ContractTypeEnum>",
        },
        "ContractTypeEnumToCreate": {
          "docs": "Type of a contract",
          "enum": [
            {
              "docs": undefined,
              "name": "pay_as_you_go_time_based",
              "value": "pay_as_you_go_time_based",
            },
            {
              "docs": undefined,
              "name": "payg_tasks",
              "value": "payg_tasks",
            },
            {
              "docs": undefined,
              "name": "payg_milestones",
              "value": "payg_milestones",
            },
          ],
        },
        "ContractWhoReportsEnum": {
          "docs": "Flag to indicate who is supposed to provide regular reports",
          "enum": [
            {
              "docs": undefined,
              "name": "both",
              "value": "both",
            },
            {
              "docs": undefined,
              "name": "client",
              "value": "client",
            },
            {
              "docs": undefined,
              "name": "contractor",
              "value": "contractor",
            },
          ],
        },
        "ContractsSortByEnum": {
          "docs": undefined,
          "enum": [
            {
              "docs": undefined,
              "name": "contract_title",
              "value": "contract_title",
            },
            {
              "docs": undefined,
              "name": "client_name",
              "value": "client_name",
            },
            {
              "docs": undefined,
              "name": "worker_name",
              "value": "worker_name",
            },
            {
              "docs": undefined,
              "name": "total",
              "value": "total",
            },
            {
              "docs": undefined,
              "name": "status",
              "value": "status",
            },
          ],
        },
        "Country": {
          "docs": undefined,
          "properties": {
            "code": {
              "docs": undefined,
              "type": "CountryCode",
            },
            "eor_support": {
              "docs": "Identifies if Deel support EoR in this country.",
              "type": "boolean",
            },
            "name": {
              "docs": "Country name. <span style="white-space: nowrap">\`non-empty\`</span> ",
              "type": "string",
            },
            "state_type": {
              "docs": "Identifies the type of sub-territory within a country where local laws may apply. Some countries may have states, provinces, prefectures or regions.",
              "type": "optional<string>",
            },
            "states": {
              "docs": undefined,
              "type": "list<StateOfCountry>",
            },
            "visa_support": {
              "docs": "Identifies if Deel provides visa support for employees being hired in this country.",
              "type": "boolean",
            },
          },
        },
        "CountryCode": {
          "docs": "Country code. [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) country code. <span style="white-space: nowrap">\`<= 2 characters\`</span> ",
          "type": "string",
        },
        "CountryCodeList": {
          "docs": undefined,
          "type": "list<CountryCode>",
        },
        "CountryCodeNulleable": {
          "docs": "Country code. [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) country code. <span style="white-space: nowrap">\`<= 2 characters\`</span> ",
          "type": "string",
        },
        "CountryList": {
          "docs": undefined,
          "type": "list<Country>",
        },
        "CountryListContainer": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "CountryList",
            },
          },
        },
        "CreateTimeoff": {
          "docs": undefined,
          "properties": {
            "end_date": {
              "docs": "End date of employee's time off.",
              "type": "optional<string>",
            },
            "is_end_date_half_day": {
              "docs": "Is the start day a half day?",
              "type": "optional<boolean>",
            },
            "is_start_date_half_day": {
              "docs": "Is the start day a half day?",
              "type": "optional<boolean>",
            },
            "other_timeoff_name": {
              "docs": "Custom name for this time off.",
              "type": "optional<string>",
            },
            "reason": {
              "docs": "Description for employee's time off.",
              "type": "optional<string>",
            },
            "start_date": {
              "docs": "Start date of employee's time off.",
              "type": "optional<string>",
            },
            "type": {
              "docs": "Time off type.",
              "type": "CreateTimeoffType",
            },
            "with_multiple_dates": {
              "docs": "If true, then multiple time off days were requested. You must supply a start and end date. If false, end date is ignored",
              "type": "boolean",
            },
          },
        },
        "CreateTimeoffContainer": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "CreateTimeoff",
            },
          },
        },
        "CreateTimeoffType": {
          "docs": "Time off type.",
          "enum": [
            {
              "docs": undefined,
              "name": "VACATION",
              "value": "VACATION",
            },
            {
              "docs": undefined,
              "name": "SICK_LEAVE",
              "value": "SICK_LEAVE",
            },
            {
              "docs": undefined,
              "name": "OTHER",
              "value": "OTHER",
            },
          ],
        },
        "CreateWebhookRequestStatus": {
          "docs": "Status of webhook.",
          "enum": [
            {
              "docs": undefined,
              "name": "enabled",
              "value": "enabled",
            },
            {
              "docs": undefined,
              "name": "disabled",
              "value": "disabled",
            },
          ],
        },
        "Currency": {
          "docs": undefined,
          "properties": {
            "code": {
              "docs": undefined,
              "type": "CurrencyCodeRequired",
            },
            "name": {
              "docs": "<span style="white-space: nowrap">\`non-empty\`</span>",
              "type": "string",
            },
          },
        },
        "CurrencyCode": {
          "docs": "Currency code. <span style="white-space: nowrap">\`<= 3 characters\`</span> ",
          "type": "string",
        },
        "CurrencyCodeList": {
          "docs": undefined,
          "type": "list<CurrencyCodeRequired>",
        },
        "CurrencyCodeRequired": {
          "docs": "<span style="white-space: nowrap">\`<= 3 characters\`</span>",
          "type": "string",
        },
        "CurrencyList": {
          "docs": undefined,
          "type": "list<Currency>",
        },
        "CurrencyListContainer": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "CurrencyList",
            },
          },
        },
        "DateString": {
          "docs": "Short date in format ISO-8601 (YYYY-MM-DD). For example: 2022-12-31.",
          "type": "string",
        },
        "DateStringDefaultNow": {
          "docs": "Short date in format ISO-8601 (YYYY-MM-DD). For example: 2022-12-31. Defaults to current date",
          "type": "string",
        },
        "DateStringRequired": {
          "docs": "Short date in format ISO-8601 (YYYY-MM-DD). For example: 2022-12-31.",
          "type": "string",
        },
        "DateTimeString": {
          "docs": "Long date-time format following ISO-8601",
          "type": "string",
        },
        "DateTimeStringRequired": {
          "docs": "Long date-time format following ISO-8601",
          "type": "string",
        },
        "EmailType": {
          "docs": "User's email address.",
          "type": "string",
        },
        "EmailTypeRequired": {
          "docs": "Worker's email address.",
          "type": "string",
        },
        "EmployeeList": {
          "docs": undefined,
          "properties": {
            "birth_date": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "client_legal_entity": {
              "docs": undefined,
              "type": "optional<EmployeeListClientLegalEntity>",
            },
            "completion_date": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "country": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "email": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "first_name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "full_name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "hiring_status": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "hiring_type": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "hourly_report_total": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "job_title": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "last_name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "monthly_payment": {
              "docs": undefined,
              "type": "optional<EmployeeListMonthlyPayment>",
            },
            "payments": {
              "docs": undefined,
              "type": "optional<list<EmployeeListPaymentsItem>>",
            },
            "personal_email": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "pic_url": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "seniority": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "start_date": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "state": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "team": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "team_id": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "timezone": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "EmployeeListClientLegalEntity": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "name": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "EmployeeListContainer": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "list<EmployeeList>",
            },
          },
        },
        "EmployeeListMonthlyPayment": {
          "docs": undefined,
          "properties": {
            "count": {
              "docs": undefined,
              "type": "optional<double>",
            },
          },
        },
        "EmployeeListPaymentsItem": {
          "docs": undefined,
          "properties": {
            "contract_name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "currency": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "rate": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "scale": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "Employment": {
          "docs": undefined,
          "properties": {
            "client_legal_entity": {
              "docs": undefined,
              "type": "optional<PeopleClientLegalEntity>",
            },
            "completion_date": {
              "docs": "The completion date of the employment.",
              "type": "optional<string>",
            },
            "contract_is_archived": {
              "docs": "Indicates whether the employment's contract is archived.",
              "type": "optional<boolean>",
            },
            "contract_status": {
              "docs": "The contract status associated with the employment.",
              "type": "optional<string>",
            },
            "country": {
              "docs": "The country associated with the employment.",
              "type": "optional<string>",
            },
            "email": {
              "docs": "The email associated with the employment.",
              "type": "optional<string>",
            },
            "has_eor_termination": {
              "docs": "Indicates whether the employment had an EOR termination.",
              "type": "optional<boolean>",
            },
            "hiring_status": {
              "docs": "The hiring status associated with the employment.",
              "type": "optional<string>",
            },
            "hiring_type": {
              "docs": "The hiring type associated with the employment.",
              "type": "optional<string>",
            },
            "id": {
              "docs": "Unique identifier for the employment.",
              "type": "optional<string>",
            },
            "is_ended": {
              "docs": "Indicates whether the employment has ended.",
              "type": "optional<boolean>",
            },
            "job_title": {
              "docs": "The job title associated with the employment.",
              "type": "optional<string>",
            },
            "name": {
              "docs": "The name of the employment.",
              "type": "optional<string>",
            },
            "payment": {
              "docs": undefined,
              "type": "optional<PeoplePayment>",
            },
            "seniority": {
              "docs": "The seniority level associated with the employment.",
              "type": "optional<string>",
            },
            "start_date": {
              "docs": "The start date of the employment.",
              "type": "optional<string>",
            },
            "state": {
              "docs": "The state associated with the employment.",
              "type": "optional<string>",
            },
            "team": {
              "docs": undefined,
              "type": "optional<Team>",
            },
            "timezone": {
              "docs": "The timezone associated with the employment.",
              "type": "optional<string>",
            },
            "voluntarily_left": {
              "docs": "Indicates whether the employment was left voluntarily.",
              "type": "optional<boolean>",
            },
            "work_email": {
              "docs": "The work email associated with the employment.",
              "type": "optional<string>",
            },
          },
        },
        "EmploymentDetailsOfContract": {
          "docs": undefined,
          "properties": {
            "country": {
              "docs": undefined,
              "type": "optional<CountryCode>",
            },
            "days_per_week": {
              "docs": undefined,
              "type": "double",
            },
            "hours_per_day": {
              "docs": undefined,
              "type": "double",
            },
            "paid_vacation_days": {
              "docs": undefined,
              "type": "double",
            },
            "probation_period": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "state": {
              "docs": "State code.",
              "type": "optional<string>",
            },
            "type": {
              "docs": undefined,
              "type": "string",
            },
          },
        },
        "EorClientTimeoffRequests": {
          "docs": undefined,
          "properties": {
            "current_approved": {
              "docs": "Days off approved.",
              "type": "optional<double>",
            },
            "days_requested": {
              "docs": "Days off requested by employee.",
              "type": "optional<double>",
            },
            "over_annual_limit": {
              "docs": "Too many days off requested by employee.",
              "type": "optional<boolean>",
            },
            "requests": {
              "docs": "List of time offs.",
              "type": "list<EorTimeoffsItem>",
            },
            "year": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "yearly_limit": {
              "docs": "Total number of days off allowed per year.",
              "type": "optional<double>",
            },
            "yearly_requests": {
              "docs": "Total number of time off requests this year.",
              "type": "optional<double>",
            },
          },
        },
        "EorClientTimeoffs": {
          "docs": undefined,
          "properties": {
            "employees": {
              "docs": "List of employee time offs.",
              "type": "list<EorTimeoffsEmployeeItem>",
            },
            "total_requests": {
              "docs": undefined,
              "type": "double",
            },
          },
        },
        "EorClientTimeoffsContainer": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "EorClientTimeoffs",
            },
          },
        },
        "EorContractCreated": {
          "docs": undefined,
          "properties": {
            "client": {
              "docs": undefined,
              "type": "optional<EorContractCreatedClient>",
            },
            "compensation_details": {
              "docs": undefined,
              "type": "optional<EorContractCreatedCompensationDetails>",
            },
            "created_at": {
              "docs": undefined,
              "type": "optional<DateTimeString>",
            },
            "employee": {
              "docs": undefined,
              "type": "optional<EorContractCreatedEmployee>",
            },
            "employment": {
              "docs": undefined,
              "type": "optional<EorContractCreatedEmployment>",
            },
            "health_plan": {
              "docs": undefined,
              "type": "optional<EorContractCreatedHealthPlan>",
            },
            "id": {
              "docs": "Id of the contract quote created",
              "type": "optional<string>",
            },
            "job_title": {
              "docs": "Employee's job title.",
              "type": "optional<string>",
            },
            "seniority": {
              "docs": undefined,
              "type": "optional<Seniority>",
            },
            "status": {
              "docs": undefined,
              "type": "optional<ContractStatusEnum>",
            },
            "type": {
              "docs": undefined,
              "type": "optional<ContractTypeEnum>",
            },
          },
        },
        "EorContractCreatedClient": {
          "docs": undefined,
          "properties": {
            "legal_entity": {
              "docs": undefined,
              "type": "optional<EorContractCreatedClientLegalEntity>",
            },
          },
        },
        "EorContractCreatedClientLegalEntity": {
          "docs": undefined,
          "properties": {
            "name": {
              "docs": "Legal entity name.",
              "type": "optional<string>",
            },
          },
        },
        "EorContractCreatedCompensationDetails": {
          "docs": undefined,
          "properties": {
            "currency": {
              "docs": "Currency of gross annual salary.",
              "type": "optional<string>",
            },
            "salary": {
              "docs": "Gross annual salary.",
              "type": "optional<double>",
            },
            "variable_compensation": {
              "docs": "Variable compensation acount or percentage.",
              "type": "optional<string>",
            },
            "variable_compensation_type": {
              "docs": "Type fo variable compensation.",
              "type": "optional<string>",
            },
          },
        },
        "EorContractCreatedContainer": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "EorContractCreated",
            },
          },
        },
        "EorContractCreatedEmployee": {
          "docs": undefined,
          "properties": {
            "email": {
              "docs": "Employee's email.",
              "type": "optional<string>",
            },
            "first_name": {
              "docs": "Employee's first name.",
              "type": "optional<string>",
            },
            "last_name": {
              "docs": "Employee's last name.",
              "type": "optional<string>",
            },
            "legal_name": {
              "docs": "Employee's legal name.",
              "type": "optional<string>",
            },
          },
        },
        "EorContractCreatedEmployment": {
          "docs": undefined,
          "properties": {
            "calculated_holidays": {
              "docs": "Number of calculate holidays for this contract.",
              "type": "optional<string>",
            },
            "country": {
              "docs": "Country of employement.",
              "type": "optional<string>",
            },
            "end_date": {
              "docs": undefined,
              "type": "optional<DateString>",
            },
            "probation_period": {
              "docs": "Number of probation days.",
              "type": "optional<double>",
            },
            "scope_of_work": {
              "docs": "Scope of work description.",
              "type": "optional<string>",
            },
            "start_date": {
              "docs": undefined,
              "type": "optional<DateString>",
            },
            "state": {
              "docs": "State code of the state/province where the this person will be employed.",
              "type": "optional<string>",
            },
            "time_off_type": {
              "docs": "If you want to use standard number of holidays for this employee, choose "STANDARD". If you want to enter a specific number of holidays, choose "SPECIFIC" and enter the number of days in the holidays field.",
              "type": "optional<string>",
            },
            "work_visa_required": {
              "docs": "Do you require Deel to apply for work visa for this person?",
              "type": "optional<boolean>",
            },
          },
        },
        "EorContractCreatedHealthPlan": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": "Health plan ID",
              "type": "optional<string>",
            },
            "name": {
              "docs": "Health plan name",
              "type": "optional<string>",
            },
          },
        },
        "EorContractToCreate": {
          "docs": undefined,
          "properties": {
            "client": {
              "docs": undefined,
              "type": "EorContractToCreateClient",
            },
            "compensation_details": {
              "docs": undefined,
              "type": "EorContractToCreateCompensationDetails",
            },
            "employee": {
              "docs": undefined,
              "type": "optional<EorContractToCreateEmployee>",
            },
            "employment": {
              "docs": undefined,
              "type": "EorContractToCreateEmployment",
            },
            "health_plan_id": {
              "docs": "Healthare plan Id. You can see available healthcare plans in the country guide endpoint.",
              "type": "optional<string>",
            },
            "job_title": {
              "docs": "Employee's job title.",
              "type": "optional<string>",
            },
            "quote_additional_fields": {
              "docs": "Some countries require additional employee information for employment contracts.",
              "type": "optional<EorContractToCreateQuoteAdditionalFields>",
            },
            "seniority": {
              "docs": undefined,
              "type": "EorContractToCreateSeniority",
            },
          },
        },
        "EorContractToCreateClient": {
          "docs": undefined,
          "properties": {
            "legal_entity": {
              "docs": undefined,
              "type": "optional<EorContractToCreateClientLegalEntity>",
            },
            "team": {
              "docs": undefined,
              "type": "optional<EorContractToCreateClientTeam>",
            },
          },
        },
        "EorContractToCreateClientLegalEntity": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": "Enter the Id of legal entity under which you want to hire this person. Use /legal-entities endpoint to retrieve a list of legal entities in your organization.",
              "type": "optional<double>",
            },
          },
        },
        "EorContractToCreateClientTeam": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": "Enter the Id of team this person will be hired in. Use /teams endpoint to retrieve a list of teams in your organization.",
              "type": "optional<double>",
            },
          },
        },
        "EorContractToCreateCompensationDetails": {
          "docs": undefined,
          "properties": {
            "currency": {
              "docs": "Salary currency.",
              "type": "optional<string>",
            },
            "salary": {
              "docs": "Employee's gross annual salary.",
              "type": "optional<double>",
            },
            "variable_compensation": {
              "docs": "Varable compensation. For example, if the person will earn 5% of the gross annual salary as the variable compensation, enter 5.",
              "type": "optional<double>",
            },
            "variable_compensation_type": {
              "docs": "Should be set only if variable_compensation is set. It can be PERCENTAGE or FIXED.",
              "type": "optional<string>",
            },
          },
        },
        "EorContractToCreateEmployee": {
          "docs": undefined,
          "properties": {
            "address": {
              "docs": undefined,
              "type": "optional<EorContractToCreateEmployeeAddress>",
            },
            "email": {
              "docs": "Employee's email address.",
              "type": "optional<string>",
            },
            "first_name": {
              "docs": "Employee's first name.",
              "type": "string",
            },
            "last_name": {
              "docs": "Employee's last name.",
              "type": "string",
            },
            "nationality": {
              "docs": "Employee's nationality.",
              "type": "string",
            },
          },
        },
        "EorContractToCreateEmployeeAddress": {
          "docs": undefined,
          "properties": {
            "city": {
              "docs": "City name.",
              "type": "optional<string>",
            },
            "country": {
              "docs": undefined,
              "type": "optional<CountryCode>",
            },
            "state": {
              "docs": "State code.",
              "type": "optional<string>",
            },
            "street": {
              "docs": "Street and number.",
              "type": "optional<string>",
            },
            "zip": {
              "docs": "Zip code.",
              "type": "optional<string>",
            },
          },
        },
        "EorContractToCreateEmployment": {
          "docs": undefined,
          "properties": {
            "country": {
              "docs": undefined,
              "type": "optional<CountryCode>",
            },
            "end_date": {
              "docs": undefined,
              "type": "optional<DateString>",
            },
            "holidays": {
              "docs": "Enter the number of holidays. Leave this field blank if you are chooseing "STANDARD" time_off_type.",
              "type": "optional<double>",
            },
            "probation_period": {
              "docs": "Number of probation days.",
              "type": "optional<double>",
            },
            "scope_of_work": {
              "docs": "Scope of work description.",
              "type": "optional<string>",
            },
            "start_date": {
              "docs": undefined,
              "type": "optional<DateString>",
            },
            "state": {
              "docs": "State code of the state/province where the this person will be employed.",
              "type": "optional<string>",
            },
            "time_off_type": {
              "docs": "If you want to use standard number of holidays for this employee, choose "STANDARD". If you want to enter a specific number of holidays, choose "SPECIFIC" and enter the number of days in the holidays field.",
              "type": "optional<EorContractToCreateEmploymentTimeOffType>",
            },
            "type": {
              "docs": "Is it a full-time contract or a part-time contract?",
              "type": "optional<EorContractToCreateEmploymentType>",
            },
            "work_visa_required": {
              "docs": "Do you require Deel to apply for work visa for this person?",
              "type": "optional<boolean>",
            },
          },
        },
        "EorContractToCreateEmploymentTimeOffType": {
          "docs": "If you want to use standard number of holidays for this employee, choose "STANDARD". If you want to enter a specific number of holidays, choose "SPECIFIC" and enter the number of days in the holidays field.",
          "enum": [
            {
              "docs": undefined,
              "name": "STANDARD",
              "value": "STANDARD",
            },
            {
              "docs": undefined,
              "name": "SPECIFIC",
              "value": "SPECIFIC",
            },
          ],
        },
        "EorContractToCreateEmploymentType": {
          "docs": "Is it a full-time contract or a part-time contract?",
          "enum": [
            {
              "docs": undefined,
              "name": "FullTime",
              "value": "Full-time",
            },
            {
              "docs": undefined,
              "name": "PartTime",
              "value": "Part-time",
            },
          ],
        },
        "EorContractToCreateQuoteAdditionalFields": {
          "docs": "Some countries require additional employee information for employment contracts.",
          "properties": {
            "dob": {
              "docs": "Employee's date of birth.",
              "type": "optional<string>",
            },
            "gender": {
              "docs": "Employee's gender.",
              "type": "optional<string>",
            },
            "worker_type": {
              "docs": "Type of worker.",
              "type": "optional<EorContractToCreateQuoteAdditionalFieldsWorkerType>",
            },
          },
        },
        "EorContractToCreateQuoteAdditionalFieldsWorkerType": {
          "docs": "Type of worker.",
          "enum": [
            {
              "docs": undefined,
              "name": "Skilled",
              "value": "Skilled",
            },
            {
              "docs": undefined,
              "name": "Unskilled",
              "value": "Unskilled",
            },
          ],
        },
        "EorContractToCreateSeniority": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": "Enter the Id retrieved from the seniority lookup endpoint. Enter 34 for "Not Applicable".",
              "type": "optional<double>",
            },
          },
        },
        "EorCountryValidations": {
          "docs": undefined,
          "properties": {
            "adjustments_information_box": {
              "docs": "Country specific notes and information.",
              "type": "optional<string>",
            },
            "currency": {
              "docs": "Country currency.",
              "type": "optional<string>",
            },
            "definite_contract": {
              "docs": "Conditions to make definitive contract.",
              "type": "optional<EorCountryValidationsDefiniteContract>",
            },
            "health_insurance": {
              "docs": undefined,
              "type": "optional<EorCountryValidationsHealthInsurance>",
            },
            "hiring_guide_country_name": {
              "docs": "Country name.",
              "type": "optional<string>",
            },
            "holiday": {
              "docs": "Range of the number of holidays.",
              "type": "optional<EorCountryValidationsHoliday>",
            },
            "insurance_fee": {
              "docs": "Insurance fee.",
              "type": "optional<string>",
            },
            "part_time_holiday": {
              "docs": "Holiday type and range for part-time contracts.",
              "type": "optional<EorCountryValidationsPartTimeHoliday>",
            },
            "part_time_probation": {
              "docs": "Probation period range for part-time contracts.",
              "type": "optional<EorCountryValidationsPartTimeProbation>",
            },
            "probation": {
              "docs": "Probation period range.",
              "type": "optional<EorCountryValidationsProbation>",
            },
            "salary": {
              "docs": "Salary range.",
              "type": "optional<EorCountryValidationsSalary>",
            },
            "sick_days": {
              "docs": undefined,
              "type": "optional<EorCountryValidationsSickDays>",
            },
            "start_date_buffer": {
              "docs": "Calculate employee's minimum start date using the start date buffer. Today's date + (number of business days x start_date_buffer) = Minimum start date.",
              "type": "optional<double>",
            },
            "work_schedule": {
              "docs": "Employee's Work schedule in days and hours.",
              "type": "optional<EorCountryValidationsWorkSchedule>",
            },
          },
        },
        "EorCountryValidationsContainer": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "EorCountryValidations",
            },
          },
        },
        "EorCountryValidationsDefiniteContract": {
          "docs": "Conditions to make definitive contract.",
          "properties": {
            "maximum_limitation": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "type": {
              "docs": undefined,
              "type": "optional<EorCountryValidationsDefiniteContractType>",
            },
          },
        },
        "EorCountryValidationsDefiniteContractType": {
          "docs": undefined,
          "enum": [
            {
              "docs": undefined,
              "name": "ALLOWED_WITHOUT_LIMITATION",
              "value": "ALLOWED_WITHOUT_LIMITATION",
            },
            {
              "docs": undefined,
              "name": "ALLOWED_WITH_MAXIMUM_LIMITATION",
              "value": "ALLOWED_WITH_MAXIMUM_LIMITATION",
            },
            {
              "docs": undefined,
              "name": "NOT_ALLOWED",
              "value": "NOT_ALLOWED",
            },
          ],
        },
        "EorCountryValidationsHealthInsurance": {
          "docs": undefined,
          "properties": {
            "providers": {
              "docs": undefined,
              "type": "optional<list<HealthInsuranceProvider>>",
            },
            "status": {
              "docs": undefined,
              "type": "optional<HealthInsuranceStatusEnum>",
            },
          },
        },
        "EorCountryValidationsHoliday": {
          "docs": "Range of the number of holidays.",
          "properties": {
            "min": {
              "docs": "Minimum number of holidays required for a legally compliant contract.",
              "type": "optional<string>",
            },
          },
        },
        "EorCountryValidationsPartTimeHoliday": {
          "docs": "Holiday type and range for part-time contracts.",
          "properties": {
            "min": {
              "docs": "Minimum number of holidays required for a legally compliant contract.",
              "type": "optional<string>",
            },
            "type": {
              "docs": undefined,
              "type": "optional<EorCountryValidationsPartTimeHolidayType>",
            },
          },
        },
        "EorCountryValidationsPartTimeHolidayType": {
          "docs": undefined,
          "enum": [
            {
              "docs": undefined,
              "name": "PRORATED",
              "value": "PRORATED",
            },
            {
              "docs": undefined,
              "name": "STANDARD",
              "value": "STANDARD",
            },
            {
              "docs": undefined,
              "name": "SPECIFIC",
              "value": "SPECIFIC",
            },
          ],
        },
        "EorCountryValidationsPartTimeProbation": {
          "docs": "Probation period range for part-time contracts.",
          "properties": {
            "max": {
              "docs": "Maximum probation days allowed for a legally compliant contract.",
              "type": "optional<double>",
            },
            "min": {
              "docs": "Minimum probation days required for a legally compliant contract.",
              "type": "optional<double>",
            },
          },
        },
        "EorCountryValidationsProbation": {
          "docs": "Probation period range.",
          "properties": {
            "max": {
              "docs": "Maximum probation days allowed for a legally compliant contract.",
              "type": "optional<double>",
            },
            "min": {
              "docs": "Minimum probation days required for a legally compliant contract.",
              "type": "optional<string>",
            },
          },
        },
        "EorCountryValidationsSalary": {
          "docs": "Salary range.",
          "properties": {
            "max": {
              "docs": "Maximum wage allowed for a legally compliant contract.",
              "type": "optional<string>",
            },
            "min": {
              "docs": "Minimum wage for a legally compliant contract.",
              "type": "optional<string>",
            },
          },
        },
        "EorCountryValidationsSickDays": {
          "docs": undefined,
          "properties": {
            "max": {
              "docs": "Maximum number of sick days allowed for a legally compliant contract.",
              "type": "optional<string>",
            },
            "min": {
              "docs": "Minimum number of sick days required for a legally compliant contract.",
              "type": "optional<string>",
            },
          },
        },
        "EorCountryValidationsWorkSchedule": {
          "docs": "Employee's Work schedule in days and hours.",
          "properties": {
            "days": {
              "docs": undefined,
              "type": "optional<EorCountryValidationsWorkScheduleDays>",
            },
            "hours": {
              "docs": undefined,
              "type": "optional<EorCountryValidationsWorkScheduleHours>",
            },
          },
        },
        "EorCountryValidationsWorkScheduleDays": {
          "docs": undefined,
          "properties": {
            "max": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "EorCountryValidationsWorkScheduleHours": {
          "docs": undefined,
          "properties": {
            "max": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "EorEntitlementListItem": {
          "docs": "Entitlement Item for a given year.",
          "properties": {
            "max_rollover_yearly": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "other_leave_approved": {
              "docs": "Other type of time off days approved.",
              "type": "optional<string>",
            },
            "other_leave_requested": {
              "docs": "Other type of time off requested by the employee.",
              "type": "optional<string>",
            },
            "other_leave_total": {
              "docs": "Total number of other type of time off days requested, approved and used.",
              "type": "optional<string>",
            },
            "other_leave_used": {
              "docs": "Other type of time off days used by the employee.",
              "type": "optional<string>",
            },
            "rollover_type": {
              "docs": undefined,
              "type": "optional<EorHolidaysRolloverType>",
            },
            "sick_leave_allowed": {
              "docs": "Maximum sick leave allowed.",
              "type": "optional<string>",
            },
            "sick_leave_approved": {
              "docs": "Sick days approved.",
              "type": "optional<string>",
            },
            "sick_leave_requested": {
              "docs": "Sick days requested by the employee.",
              "type": "optional<string>",
            },
            "sick_leave_total": {
              "docs": "Total number of sick days requested, approved and used.",
              "type": "optional<string>",
            },
            "sick_leave_used": {
              "docs": "Sick days used by the employee.",
              "type": "optional<string>",
            },
            "vacation_allowed": {
              "docs": "Minimum vacation allowed.",
              "type": "optional<string>",
            },
            "vacation_approved": {
              "docs": "Vacation days approved.",
              "type": "optional<string>",
            },
            "vacation_requested": {
              "docs": "Vacation days requested by the employee.",
              "type": "optional<string>",
            },
            "vacation_total": {
              "docs": "Total number of vacation days requested, approved and used.",
              "type": "optional<string>",
            },
            "vacation_used": {
              "docs": "Vacation days used by the employee.",
              "type": "optional<string>",
            },
            "year": {
              "docs": undefined,
              "type": "optional<double>",
            },
          },
        },
        "EorEntitlements": {
          "docs": "Time-off Entitlements for EOR contracts.",
          "properties": {
            "entitlements": {
              "docs": "List of entitlements.",
              "type": "list<EorEntitlementListItem>",
            },
          },
        },
        "EorEntitlementsContainer": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "EorEntitlements",
            },
          },
        },
        "EorHolidaysRolloverType": {
          "docs": undefined,
          "enum": [
            {
              "docs": undefined,
              "name": "EXPIRATION",
              "value": "EXPIRATION",
            },
            {
              "docs": undefined,
              "name": "PAY_OUT",
              "value": "PAY_OUT",
            },
            {
              "docs": undefined,
              "name": "UNLIMITED_ROLLOVER",
              "value": "UNLIMITED_ROLLOVER",
            },
            {
              "docs": undefined,
              "name": "LIMITED_ROLLOVER",
              "value": "LIMITED_ROLLOVER",
            },
            {
              "docs": undefined,
              "name": "UNSET",
              "value": "UNSET",
            },
          ],
        },
        "EorTimeoffs": {
          "docs": "List of time offs.",
          "type": "list<EorTimeoffsItem>",
        },
        "EorTimeoffsBaseItem": {
          "docs": undefined,
          "properties": {
            "attachments": {
              "docs": undefined,
              "type": "optional<TimeoffsAttachments>",
            },
            "date_is_half_day": {
              "docs": "If true, only a single date was specified.",
              "type": "optional<boolean>",
            },
            "days_used_end_year": {
              "docs": "Days used at the end year.",
              "type": "optional<string>",
            },
            "days_used_start_year": {
              "docs": "Days used at the start year.",
              "type": "optional<string>",
            },
            "denial_reason": {
              "docs": "Reason why time off was denied.",
              "type": "optional<string>",
            },
            "end_date_is_half_day": {
              "docs": "Indicates if the last day of time off is a half day.",
              "type": "optional<boolean>",
            },
            "has_multiple_dates": {
              "docs": "Indicates if multiple time off days are requested.",
              "type": "optional<boolean>",
            },
            "other_timeoff_name": {
              "docs": "Custom title for the time off. Only specify if type is "OTHER".",
              "type": "optional<string>",
            },
            "reason": {
              "docs": "Reason for requesting time off.",
              "type": "optional<string>",
            },
            "requested_at": {
              "docs": "Timestamp when time off was requested.",
              "type": "optional<DateTimeString>",
            },
            "requester": {
              "docs": "Employee who requested the time off.",
              "type": "optional<TimeoffsProfile>",
            },
            "reviewed_at": {
              "docs": "Timestamp when time off was reviewed.",
              "type": "optional<DateTimeString>",
            },
            "reviewer": {
              "docs": "User who reviewed the time off.",
              "type": "optional<TimeoffsProfile>",
            },
            "single_date": {
              "docs": undefined,
              "type": "optional<DateTimeString>",
            },
            "start_date_is_half_day": {
              "docs": "Indicates if the first day of time off is a half day.",
              "type": "optional<boolean>",
            },
            "status": {
              "docs": "Status of the time off request.",
              "type": "TimeoffsStatusEnum",
            },
            "total_days_used": {
              "docs": "Total number of time off days used.",
              "type": "optional<string>",
            },
            "type": {
              "docs": "The type of time off.",
              "type": "TimeoffsTypeEnum",
            },
          },
        },
        "EorTimeoffsContainer": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "EorTimeoffs",
            },
          },
        },
        "EorTimeoffsEmployeeItem": {
          "docs": undefined,
          "properties": {
            "contract_id": {
              "docs": undefined,
              "type": "string",
            },
            "eor_contract_id": {
              "docs": undefined,
              "type": "double",
            },
            "id": {
              "docs": undefined,
              "type": "double",
            },
            "name": {
              "docs": undefined,
              "type": "string",
            },
            "others": {
              "docs": "List of all other employee time offs.",
              "type": "list<EorClientTimeoffRequests>",
            },
            "sick_leaves": {
              "docs": "List of employee sick leave time offs.",
              "type": "list<EorClientTimeoffRequests>",
            },
            "time_zones": {
              "docs": undefined,
              "type": "string",
            },
            "vacations": {
              "docs": "List of employee vacation time offs.",
              "type": "list<EorClientTimeoffRequests>",
            },
          },
        },
        "EorTimeoffsItem": {
          "docs": undefined,
          "extends": [
            "EorTimeoffsBaseItem",
          ],
          "properties": {
            "applied_changes": {
              "docs": "List of changes applied to the time off.",
              "type": "optional<list<EorTimeoffsBaseItem>>",
            },
            "can_request_changes": {
              "docs": "Indicates if it is possible to make changes to the time off request.",
              "type": "optional<boolean>",
            },
            "change_request": {
              "docs": "Only valid if the requester asks to change existing time off and it has been reviewed.",
              "type": "optional<EorTimeoffsBaseItem>",
            },
            "contract_id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "created_at": {
              "docs": undefined,
              "type": "optional<DateTimeString>",
            },
            "end_date": {
              "docs": undefined,
              "type": "optional<DateTimeString>",
            },
            "id": {
              "docs": undefined,
              "type": "double",
            },
            "is_updated": {
              "docs": "If true, an update to the original time off request was made.",
              "type": "optional<boolean>",
            },
            "start_date": {
              "docs": undefined,
              "type": "optional<DateTimeString>",
            },
            "updated_at": {
              "docs": undefined,
              "type": "optional<DateTimeString>",
            },
          },
        },
        "EorTimeoffsItemContainer": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "EorTimeoffsItem",
            },
          },
        },
        "EstimateFirstPayment": {
          "docs": "Details of pro rata payment to create.",
          "properties": {
            "compensation_details": {
              "docs": undefined,
              "type": "EstimateFirstPaymentCompensationDetails",
            },
            "country_code": {
              "docs": undefined,
              "type": "CountryCode",
            },
            "start_date": {
              "docs": undefined,
              "type": "DateStringRequired",
            },
            "type": {
              "docs": undefined,
              "type": "ContractTypeEnum",
            },
          },
        },
        "EstimateFirstPaymentCompensationDetails": {
          "docs": undefined,
          "properties": {
            "amount": {
              "docs": "Amount to be paid. Must be a positive number.",
              "type": "optional<double>",
            },
            "calculation_type": {
              "docs": "Either works days or calendar days",
              "type": "optional<EstimateFirstPaymentCompensationDetailsCalculationType>",
            },
            "currency_code": {
              "docs": undefined,
              "type": "optional<CurrencyCodeRequired>",
            },
            "cycle_end": {
              "docs": "Date invoice cycle ends.",
              "type": "optional<double>",
            },
            "cycle_end_type": {
              "docs": undefined,
              "type": "optional<WorkStatementCycleEndTypeEnum>",
            },
            "payment_due_days": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "payment_due_type": {
              "docs": undefined,
              "type": "optional<WorkStatementPaymentDueTypeEnum>",
            },
            "scale": {
              "docs": undefined,
              "type": "optional<WorkStatementCycleScaleEnum>",
            },
            "work_week_end": {
              "docs": undefined,
              "type": "optional<WeekDaysEnum>",
            },
            "work_week_start": {
              "docs": undefined,
              "type": "optional<WeekDaysEnum>",
            },
          },
        },
        "EstimateFirstPaymentCompensationDetailsCalculationType": {
          "docs": "Either works days or calendar days",
          "enum": [
            {
              "docs": undefined,
              "name": "CUSTOM_AMOUNT",
              "value": "CUSTOM_AMOUNT",
            },
            {
              "docs": undefined,
              "name": "WORK_DAYS",
              "value": "WORK_DAYS",
            },
            {
              "docs": undefined,
              "name": "CALENDAR_DAYS",
              "value": "CALENDAR_DAYS",
            },
            {
              "docs": undefined,
              "name": "FULL_AMOUNT",
              "value": "FULL_AMOUNT",
            },
          ],
        },
        "ExchangeRates": {
          "docs": undefined,
          "properties": {
            "rates": {
              "docs": undefined,
              "type": "optional<map<string, unknown>>",
            },
            "risk": {
              "docs": undefined,
              "type": "optional<double>",
            },
          },
        },
        "FileAttachmentInfo": {
          "docs": "This object is used for linking file attachments to your records.",
          "properties": {
            "filename": {
              "docs": "Original filename you used to upload using attachments end-point.",
              "type": "string",
            },
            "key": {
              "docs": "You can call attachments end-point, get key and URL to upload your file.",
              "type": "string",
            },
          },
        },
        "FileObject": {
          "docs": "This is the file you will upload in a multi-part form.",
          "properties": {
            "file": {
              "docs": "Upload the file you want to attach to this entry.",
              "type": "optional<string>",
            },
          },
        },
        "FileRefTypeEnum": {
          "docs": "type of files allowed when uploading attachments",
          "enum": [
            {
              "docs": undefined,
              "name": "ApplicationPdf",
              "value": "application/pdf",
            },
            {
              "docs": undefined,
              "name": "TextCsv",
              "value": "text/csv",
            },
            {
              "docs": undefined,
              "name": "TextPlain",
              "value": "text/plain",
            },
            {
              "docs": undefined,
              "name": "ImageJpeg",
              "value": "image/jpeg",
            },
            {
              "docs": undefined,
              "name": "ImagePng",
              "value": "image/png",
            },
          ],
        },
        "FinalPaymentCalculated": {
          "docs": undefined,
          "properties": {
            "calculation_type": {
              "docs": "Either works days or calendar days",
              "type": "FinalPaymentCalculatedCalculationType",
            },
            "daily_rate": {
              "docs": "The daily rate paid.",
              "type": "string",
            },
            "last_cycle": {
              "docs": "The last payment cycle.",
              "type": "FinalPaymentCalculatedLastCycle",
            },
            "remaining_days": {
              "docs": "Dais remaining to end the contract.",
              "type": "string",
            },
            "total": {
              "docs": "Total amount to pay.",
              "type": "string",
            },
            "workweek_end": {
              "docs": "The day the work week starts, 0 to 6",
              "type": "double",
            },
            "workweek_start": {
              "docs": "The day the work week starts, 0 to 6",
              "type": "double",
            },
          },
        },
        "FinalPaymentCalculatedCalculationType": {
          "docs": "Either works days or calendar days",
          "enum": [
            {
              "docs": undefined,
              "name": "CUSTOM_AMOUNT",
              "value": "CUSTOM_AMOUNT",
            },
            {
              "docs": undefined,
              "name": "WORK_DAYS",
              "value": "WORK_DAYS",
            },
            {
              "docs": undefined,
              "name": "CALENDAR_DAYS",
              "value": "CALENDAR_DAYS",
            },
            {
              "docs": undefined,
              "name": "FULL_AMOUNT",
              "value": "FULL_AMOUNT",
            },
          ],
        },
        "FinalPaymentCalculatedContainer": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "FinalPaymentCalculated",
            },
          },
        },
        "FinalPaymentCalculatedLastCycle": {
          "docs": "The last payment cycle.",
          "properties": {
            "completion_date": {
              "docs": undefined,
              "type": "optional<DateTimeStringRequired>",
            },
            "end": {
              "docs": undefined,
              "type": "optional<DateTimeStringRequired>",
            },
            "start": {
              "docs": undefined,
              "type": "optional<DateTimeStringRequired>",
            },
          },
        },
        "FirstPaymentDate": {
          "docs": "First payment date",
          "properties": {
            "due": {
              "docs": undefined,
              "type": "optional<DateStringRequired>",
            },
          },
        },
        "GenericReportReviewCreated": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": undefined,
              "type": "UniqueObjectIdentifier",
            },
            "public_id": {
              "docs": undefined,
              "type": "optional<PublicId>",
            },
            "status": {
              "docs": undefined,
              "type": "optional<InvoiceAdjustmentStatusEnum>",
            },
          },
        },
        "GenericReportReviewCreatedContainer": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "GenericReportReviewCreatedList",
            },
          },
        },
        "GenericReportReviewCreatedList": {
          "docs": undefined,
          "type": "list<GenericReportReviewCreated>",
        },
        "GenericResultCreated": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "GenericResultCreatedData",
            },
          },
        },
        "GenericResultCreatedData": {
          "docs": undefined,
          "properties": {
            "created": {
              "docs": undefined,
              "type": "boolean",
            },
          },
        },
        "GenericResultDeleted": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "GenericResultDeletedData",
            },
          },
        },
        "GenericResultDeletedData": {
          "docs": undefined,
          "properties": {
            "deleted": {
              "docs": "Confirms the deletion.",
              "type": "boolean",
            },
          },
        },
        "GenericResultUpdated": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "GenericResultUpdatedData",
            },
          },
        },
        "GenericResultUpdatedData": {
          "docs": undefined,
          "properties": {
            "updated": {
              "docs": undefined,
              "type": "boolean",
            },
          },
        },
        "HealthInsuranceProvider": {
          "docs": "Health insurance provider.",
          "properties": {
            "attachments": {
              "docs": "File attachments.",
              "type": "optional<list<HealthInsuranceProviderAttachmentsItem>>",
            },
            "client_info_banner": {
              "docs": "Health insurance info banner.",
              "type": "optional<string>",
            },
            "currency": {
              "docs": "Payment currency.",
              "type": "optional<string>",
            },
            "days_to_cancel": {
              "docs": "Days to cancel the insurance.",
              "type": "optional<string>",
            },
            "ending_rule": {
              "docs": "Insurance cycle ending rule.",
              "type": "optional<string>",
            },
            "fixed_price": {
              "docs": "URL to price info.",
              "type": "optional<boolean>",
            },
            "home_page_url": {
              "docs": "Insurance provider's home page url.",
              "type": "optional<string>",
            },
            "is_available_for_new_quotes": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "is_unisure": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "name": {
              "docs": "Name of insurance provider.",
              "type": "optional<string>",
            },
            "plans": {
              "docs": undefined,
              "type": "optional<list<HealthInsuranceProviderPlansItem>>",
            },
            "pricing_info_link": {
              "docs": "URL to price info.",
              "type": "optional<string>",
            },
            "type": {
              "docs": "Insurance type.",
              "type": "optional<string>",
            },
          },
        },
        "HealthInsuranceProviderAttachmentsItem": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "label": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "HealthInsuranceProviderPlansItem": {
          "docs": undefined,
          "properties": {
            "currency": {
              "docs": "Insurance payment currency.",
              "type": "optional<string>",
            },
            "id": {
              "docs": "Insurance plan id.",
              "type": "optional<double>",
            },
            "is_enabled": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "name": {
              "docs": "Insurance plan name.",
              "type": "optional<string>",
            },
            "price": {
              "docs": "Insurance price.",
              "type": "optional<string>",
            },
          },
        },
        "HealthInsuranceStatusEnum": {
          "docs": "Health insurance status.",
          "enum": [
            {
              "docs": undefined,
              "name": "REQUIRED",
              "value": "REQUIRED",
            },
            {
              "docs": undefined,
              "name": "ENABLED",
              "value": "ENABLED",
            },
            {
              "docs": undefined,
              "name": "DISABLED",
              "value": "DISABLED",
            },
          ],
        },
        "HrisCompensation": {
          "docs": undefined,
          "properties": {
            "currency": {
              "docs": "<span style="white-space: nowrap">\`<= 3 characters\`</span>",
              "type": "string",
            },
            "gross_annual_salary": {
              "docs": undefined,
              "type": "double",
            },
          },
        },
        "HrisContractBase": {
          "docs": undefined,
          "properties": {
            "contract_oid": {
              "docs": "The Hris Direct employee contract ID",
              "type": "string",
            },
            "employee_number": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "end_date": {
              "docs": undefined,
              "type": "optional<DateString>",
            },
            "start_date": {
              "docs": undefined,
              "type": "DateStringRequired",
            },
          },
        },
        "HrisContractFullTime": {
          "docs": undefined,
          "extends": [
            "HrisContractBase",
          ],
          "properties": {
            "employment_type": "literal<"FULL_TIME">",
          },
        },
        "HrisContractPartTime": {
          "docs": undefined,
          "extends": [
            "HrisContractBase",
          ],
          "properties": {
            "employment_type": "literal<"PART_TIME">",
            "part_time_percentage": {
              "docs": "required if employmentType is "PART_TIME"",
              "type": "double",
            },
          },
        },
        "HrisDirectEmployee": {
          "docs": undefined,
          "properties": {
            "compensation": {
              "docs": undefined,
              "type": "HrisCompensation",
            },
            "contract": {
              "docs": undefined,
              "type": "HrisDirectEmployeeContract",
            },
            "employee_details": {
              "docs": undefined,
              "type": "HrisDirectEmployeeDetails",
            },
            "job_information": {
              "docs": undefined,
              "type": "HrisDirectEmployeeJobInformation",
            },
            "team_information": {
              "docs": undefined,
              "type": "HrisTeamInformation",
            },
            "vacation_info": {
              "docs": undefined,
              "type": "optional<HrisDirectEmployeeVacationInfo>",
            },
          },
        },
        "HrisDirectEmployeeContainer": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "HrisDirectEmployeeResponse",
            },
          },
        },
        "HrisDirectEmployeeContract": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "HrisContractPartTime",
            },
            {
              "docs": undefined,
              "type": "HrisContractFullTime",
            },
          ],
        },
        "HrisDirectEmployeeDetails": {
          "docs": undefined,
          "properties": {
            "country": {
              "docs": "<span style="white-space: nowrap">\`<= 2 characters\`</span>",
              "type": "string",
            },
            "email": {
              "docs": "<span style="white-space: nowrap">\`<= 255 characters\`</span>",
              "type": "string",
            },
            "first_name": {
              "docs": "<span style="white-space: nowrap">\`<= 100 characters\`</span>",
              "type": "string",
            },
            "last_name": {
              "docs": "<span style="white-space: nowrap">\`<= 100 characters\`</span>",
              "type": "string",
            },
            "nationality": {
              "docs": "<span style="white-space: nowrap">\`<= 2 characters\`</span>",
              "type": "string",
            },
            "state": {
              "docs": "<span style="white-space: nowrap">\`non-empty\`</span> <span style="white-space: nowrap">\`<= 50 characters\`</span>",
              "type": "optional<string>",
            },
            "work_email": {
              "docs": "<span style="white-space: nowrap">\`<= 255 characters\`</span>",
              "type": "string",
            },
          },
        },
        "HrisDirectEmployeeJobInformation": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "HrisJobInformationTitleId",
            },
            {
              "docs": undefined,
              "type": "HrisJobInformationTitleName",
            },
          ],
        },
        "HrisDirectEmployeeResponse": {
          "docs": undefined,
          "extends": [
            "HrisDirectEmployee",
          ],
          "properties": {
            "id": {
              "docs": "The Hris Direct employee ID",
              "type": "optional<string>",
            },
          },
        },
        "HrisDirectEmployeeVacationInfo": {
          "docs": undefined,
          "properties": {
            "vacation_accrual_start_date": {
              "docs": undefined,
              "type": "string",
            },
            "vacation_yearly_policy": {
              "docs": undefined,
              "type": "double",
            },
          },
        },
        "HrisJobInformationBase": {
          "docs": undefined,
          "properties": {
            "seniority_id": {
              "docs": undefined,
              "type": "double",
            },
          },
        },
        "HrisJobInformationTitleId": {
          "docs": undefined,
          "extends": [
            "HrisJobInformationBase",
          ],
          "properties": {
            "job_title_id": {
              "docs": undefined,
              "type": "double",
            },
          },
        },
        "HrisJobInformationTitleName": {
          "docs": undefined,
          "extends": [
            "HrisJobInformationBase",
          ],
          "properties": {
            "job_title_name": {
              "docs": undefined,
              "type": "string",
            },
          },
        },
        "HrisTeamInformation": {
          "docs": undefined,
          "properties": {
            "legal_entity_id": {
              "docs": undefined,
              "type": "double",
            },
            "team_id": {
              "docs": undefined,
              "type": "double",
            },
          },
        },
        "InputToCreateFileRefData": {
          "docs": undefined,
          "properties": {
            "content_type": {
              "docs": undefined,
              "type": "FileRefTypeEnum",
            },
          },
        },
        "InputToDeletePgoTask": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "PgoTaskToDelete",
            },
          },
        },
        "InputToShieldContract": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "InputToShieldContractData",
            },
          },
        },
        "InputToShieldContractData": {
          "docs": undefined,
          "properties": {
            "agreement_id": {
              "docs": "MSA contract id (agreement).",
              "type": "double",
            },
          },
        },
        "InvitationsOfBasicContract": {
          "docs": undefined,
          "properties": {
            "client_email": {
              "docs": undefined,
              "type": "optional<EmailType>",
            },
            "worker_email": {
              "docs": undefined,
              "type": "optional<EmailType>",
            },
          },
        },
        "Invoice": {
          "docs": undefined,
          "properties": {
            "amount": {
              "docs": "Billed amount.",
              "type": "optional<double>",
            },
            "contract": {
              "docs": undefined,
              "type": "InvoiceContract",
            },
            "created_at": {
              "docs": undefined,
              "type": "optional<DateTimeString>",
            },
            "currency": {
              "docs": undefined,
              "type": "CurrencyCode",
            },
            "exchange_fee": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "fee": {
              "docs": "Fee added to the amount.",
              "type": "optional<double>",
            },
            "id": {
              "docs": "Unique identifier of the invoice.",
              "type": "double",
            },
            "invoice_id": {
              "docs": "Unique oid of the invoice.",
              "type": "string",
            },
            "is_offcycle": {
              "docs": "Indicates if the invoice related to an offcycle payment.",
              "type": "optional<boolean>",
            },
            "is_overdue": {
              "docs": "Indicates if the invoice is overdue.",
              "type": "optional<boolean>",
            },
            "label": {
              "docs": "Invoice label as displayed in Deel platform.",
              "type": "optional<string>",
            },
            "money_received_at": {
              "docs": undefined,
              "type": "optional<DateTimeString>",
            },
            "paid_at": {
              "docs": undefined,
              "type": "optional<DateTimeString>",
            },
            "payment_currency": {
              "docs": undefined,
              "type": "CurrencyCode",
            },
            "payment_method": {
              "docs": undefined,
              "type": "optional<PaymentMethodEnum>",
            },
            "payment_processed_at": {
              "docs": undefined,
              "type": "optional<DateTimeString>",
            },
            "status": {
              "docs": undefined,
              "type": "InvoiceStatusEnum",
            },
            "total": {
              "docs": "Total invoice amount including Fee and VAT.",
              "type": "double",
            },
            "vat_percentage": {
              "docs": "VAT percentrage.",
              "type": "optional<double>",
            },
            "vat_total": {
              "docs": "Amount of VAT.",
              "type": "optional<double>",
            },
          },
        },
        "InvoiceAdjustment": {
          "docs": undefined,
          "extends": [
            "BasicInvoiceAdjustment",
            "InvoiceAdjustmentApproversContainer",
          ],
          "properties": {},
        },
        "InvoiceAdjustmentApprover": {
          "docs": undefined,
          "properties": {
            "approved": {
              "docs": undefined,
              "type": "boolean",
            },
            "email": {
              "docs": undefined,
              "type": "string",
            },
            "full_name": {
              "docs": undefined,
              "type": "string",
            },
          },
        },
        "InvoiceAdjustmentApproverList": {
          "docs": undefined,
          "type": "list<InvoiceAdjustmentApprover>",
        },
        "InvoiceAdjustmentApproversContainer": {
          "docs": undefined,
          "properties": {
            "approvers": {
              "docs": undefined,
              "type": "InvoiceAdjustmentApproverList",
            },
          },
        },
        "InvoiceAdjustmentContainer": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "InvoiceAdjustment",
            },
          },
        },
        "InvoiceAdjustmentCreated": {
          "docs": "Details of invoice adjustment created.",
          "properties": {
            "created": {
              "docs": undefined,
              "type": "boolean",
            },
            "created_at": {
              "docs": undefined,
              "type": "optional<DateTimeStringRequired>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<UniqueObjectIdentifier>",
            },
            "public_id": {
              "docs": undefined,
              "type": "optional<PublicId>",
            },
            "status": {
              "docs": undefined,
              "type": "optional<InvoiceAdjustmentStatusEnum>",
            },
          },
        },
        "InvoiceAdjustmentCreatedContainer": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "InvoiceAdjustmentCreated",
            },
          },
        },
        "InvoiceAdjustmentList": {
          "docs": undefined,
          "type": "list<BasicInvoiceAdjustment>",
        },
        "InvoiceAdjustmentListContainer": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "InvoiceAdjustmentList",
            },
            "page": {
              "docs": undefined,
              "type": "PageInfoWithoutCursorNew",
            },
          },
        },
        "InvoiceAdjustmentReviewToCreate": {
          "docs": undefined,
          "properties": {
            "reason": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "status": {
              "docs": undefined,
              "type": "InvoiceAdjustmentReviewToCreateStatus",
            },
          },
        },
        "InvoiceAdjustmentReviewToCreateStatus": {
          "docs": undefined,
          "enum": [
            {
              "docs": undefined,
              "name": "approved",
              "value": "approved",
            },
            {
              "docs": undefined,
              "name": "declined",
              "value": "declined",
            },
          ],
        },
        "InvoiceAdjustmentReviewsToCreate": {
          "docs": undefined,
          "properties": {
            "ids": {
              "docs": undefined,
              "type": "TimesheetIdItems",
            },
            "reason": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "status": {
              "docs": undefined,
              "type": "InvoiceAdjustmentReviewsToCreateStatus",
            },
          },
        },
        "InvoiceAdjustmentReviewsToCreateStatus": {
          "docs": undefined,
          "enum": [
            {
              "docs": undefined,
              "name": "approved",
              "value": "approved",
            },
            {
              "docs": undefined,
              "name": "declined",
              "value": "declined",
            },
          ],
        },
        "InvoiceAdjustmentSearchContainer": {
          "docs": "This is a model to make it easier to understand and restrict search parameters",
          "properties": {
            "contract_id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "contract_types": {
              "docs": undefined,
              "type": "optional<InvoiceAdjustmentSearchContainerContractTypes>",
            },
            "date_from": {
              "docs": undefined,
              "type": "optional<DateString>",
            },
            "date_to": {
              "docs": undefined,
              "type": "optional<DateString>",
            },
            "invoice_id": {
              "docs": "<span style="white-space: nowrap">\`<= 10 characters\`</span>",
              "type": "optional<string>",
            },
            "limit": {
              "docs": "Return a page of results with given number of records. <span style="white-space: nowrap">\`<= 2 characters\`</span> ",
              "type": "optional<string>",
            },
            "offset": {
              "docs": "<span style="white-space: nowrap">\`<= 2 characters\`</span>",
              "type": "optional<string>",
            },
            "order_direction": {
              "docs": undefined,
              "type": "optional<SortDirEnum>",
            },
            "reporter_id": {
              "docs": "<span style="white-space: nowrap">\`<= 10 characters\`</span>",
              "type": "optional<string>",
            },
            "statuses": {
              "docs": undefined,
              "type": "optional<InvoiceAdjustmentSearchContainerStatuses>",
            },
            "types": {
              "docs": undefined,
              "type": "optional<InvoiceAdjustmentSearchContainerTypes>",
            },
          },
        },
        "InvoiceAdjustmentSearchContainerContractTypes": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "ContractTypeEnumList",
            },
            {
              "docs": undefined,
              "type": "ContractTypeEnum",
            },
          ],
        },
        "InvoiceAdjustmentSearchContainerStatuses": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "InvoiceAdjustmentStatusEnumList",
            },
            {
              "docs": undefined,
              "type": "optional<InvoiceAdjustmentStatusEnum>",
            },
          ],
        },
        "InvoiceAdjustmentSearchContainerTypes": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "InvoiceAdjustmentTypeEnumList",
            },
            {
              "docs": undefined,
              "type": "InvoiceAdjustmentTypeEnum",
            },
          ],
        },
        "InvoiceAdjustmentStatusEnum": {
          "docs": "status of invoice adjustment",
          "type": "string",
        },
        "InvoiceAdjustmentStatusEnumList": {
          "docs": undefined,
          "type": "list<optional<InvoiceAdjustmentStatusEnum>>",
        },
        "InvoiceAdjustmentToCreate": {
          "docs": "Details of invoice adjustment to create.",
          "properties": {
            "amount": {
              "docs": "Amount to be paid. Must be a positive number.",
              "type": "double",
            },
            "contract_id": {
              "docs": "Id of a Deel contract.",
              "type": "string",
            },
            "date_submitted": {
              "docs": undefined,
              "type": "DateStringRequired",
            },
            "description": {
              "docs": "Description of the adjustment.",
              "type": "optional<string>",
            },
            "paymentCycleId": {
              "docs": "ID of an existing active payment cycle - required if type is "vat"",
              "type": "optional<double>",
            },
            "type": {
              "docs": undefined,
              "type": "InvoiceAdjustmentTypeToCreateEnum",
            },
          },
        },
        "InvoiceAdjustmentToCreateContainer": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "InvoiceAdjustmentToCreate",
            },
          },
        },
        "InvoiceAdjustmentToUpdate": {
          "docs": "Details of invoice adjustment to update.",
          "properties": {
            "amount": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "description": {
              "docs": undefined,
              "type": "string",
            },
          },
        },
        "InvoiceAdjustmentTypeEnum": {
          "docs": "Type of invoice adjustment.",
          "enum": [
            {
              "docs": undefined,
              "name": "accrued_holiday",
              "value": "accrued_holiday",
            },
            {
              "docs": undefined,
              "name": "additional_fee",
              "value": "additional_fee",
            },
            {
              "docs": undefined,
              "name": "allowance",
              "value": "allowance",
            },
            {
              "docs": undefined,
              "name": "bonus",
              "value": "bonus",
            },
            {
              "docs": undefined,
              "name": "commission",
              "value": "commission",
            },
            {
              "docs": undefined,
              "name": "deduction",
              "value": "deduction",
            },
            {
              "docs": undefined,
              "name": "deposit",
              "value": "deposit",
            },
            {
              "docs": undefined,
              "name": "deposit_refund",
              "value": "deposit_refund",
            },
            {
              "docs": undefined,
              "name": "employer_cost",
              "value": "employer_cost",
            },
            {
              "docs": undefined,
              "name": "expense",
              "value": "expense",
            },
            {
              "docs": undefined,
              "name": "health_allowance",
              "value": "health_allowance",
            },
            {
              "docs": undefined,
              "name": "health_benefit",
              "value": "health_benefit",
            },
            {
              "docs": undefined,
              "name": "health_insurance_fee",
              "value": "health_insurance_fee",
            },
            {
              "docs": undefined,
              "name": "legal_fee",
              "value": "legal_fee",
            },
            {
              "docs": undefined,
              "name": "management_fee",
              "value": "management_fee",
            },
            {
              "docs": undefined,
              "name": "milestone",
              "value": "milestone",
            },
            {
              "docs": undefined,
              "name": "offcycle",
              "value": "offcycle",
            },
            {
              "docs": undefined,
              "name": "other",
              "value": "other",
            },
            {
              "docs": undefined,
              "name": "overtime",
              "value": "overtime",
            },
            {
              "docs": undefined,
              "name": "pension",
              "value": "pension",
            },
            {
              "docs": undefined,
              "name": "pro_rata",
              "value": "pro_rata",
            },
            {
              "docs": undefined,
              "name": "setup_fee",
              "value": "setup_fee",
            },
            {
              "docs": undefined,
              "name": "severance",
              "value": "severance",
            },
            {
              "docs": undefined,
              "name": "shield_service",
              "value": "shield_service",
            },
            {
              "docs": undefined,
              "name": "signing_bonus",
              "value": "signing_bonus",
            },
            {
              "docs": undefined,
              "name": "signing_bonus_employer_cost",
              "value": "signing_bonus_employer_cost",
            },
            {
              "docs": undefined,
              "name": "refund",
              "value": "refund",
            },
            {
              "docs": undefined,
              "name": "task",
              "value": "task",
            },
            {
              "docs": undefined,
              "name": "time_off",
              "value": "time_off",
            },
            {
              "docs": undefined,
              "name": "vat",
              "value": "vat",
            },
            {
              "docs": undefined,
              "name": "withholding_tax",
              "value": "withholding_tax",
            },
            {
              "docs": undefined,
              "name": "work",
              "value": "work",
            },
          ],
        },
        "InvoiceAdjustmentTypeEnumList": {
          "docs": undefined,
          "type": "list<InvoiceAdjustmentTypeEnum>",
        },
        "InvoiceAdjustmentTypeToCreateEnum": {
          "docs": "Type of invoice adjustment.",
          "enum": [
            {
              "docs": undefined,
              "name": "bonus",
              "value": "bonus",
            },
            {
              "docs": undefined,
              "name": "commission",
              "value": "commission",
            },
            {
              "docs": undefined,
              "name": "deduction",
              "value": "deduction",
            },
            {
              "docs": undefined,
              "name": "expense",
              "value": "expense",
            },
            {
              "docs": undefined,
              "name": "other",
              "value": "other",
            },
            {
              "docs": undefined,
              "name": "overtime",
              "value": "overtime",
            },
            {
              "docs": undefined,
              "name": "time_off",
              "value": "time_off",
            },
            {
              "docs": undefined,
              "name": "vat",
              "value": "vat",
            },
          ],
        },
        "InvoiceContract": {
          "docs": undefined,
          "properties": {
            "contract_type": {
              "docs": "Type of Deel contract.",
              "type": "string",
            },
            "id": {
              "docs": "Unique identifier of a Deel contract.",
              "type": "string",
            },
            "name": {
              "docs": "Contract title.",
              "type": "optional<string>",
            },
          },
        },
        "InvoiceContractTypes": {
          "docs": "invoice's allowed contract types",
          "enum": [
            {
              "docs": undefined,
              "name": "pending",
              "value": "pending",
            },
            {
              "docs": undefined,
              "name": "paid",
              "value": "paid",
            },
            {
              "docs": undefined,
              "name": "processing",
              "value": "processing",
            },
            {
              "docs": undefined,
              "name": "canceled",
              "value": "canceled",
            },
            {
              "docs": undefined,
              "name": "skipped",
              "value": "skipped",
            },
            {
              "docs": undefined,
              "name": "failed",
              "value": "failed",
            },
            {
              "docs": undefined,
              "name": "refunded",
              "value": "refunded",
            },
          ],
        },
        "InvoiceContractor": {
          "docs": undefined,
          "properties": {
            "name": {
              "docs": undefined,
              "type": "string",
            },
          },
        },
        "InvoiceDownloadContainer": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "InvoiceDownloadObject",
            },
          },
        },
        "InvoiceDownloadObject": {
          "docs": undefined,
          "properties": {
            "expires_at": {
              "docs": "Expiration date time of download URL.",
              "type": "optional<string>",
            },
            "id": {
              "docs": "Requested invoice id to download.",
              "type": "optional<string>",
            },
            "url": {
              "docs": "URL to requested invoice to download.",
              "type": "optional<string>",
            },
          },
        },
        "InvoiceList": {
          "docs": undefined,
          "type": "list<Invoice>",
        },
        "InvoiceListContainer": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "InvoiceObject",
            },
          },
        },
        "InvoiceObject": {
          "docs": undefined,
          "properties": {
            "rows": {
              "docs": undefined,
              "type": "optional<InvoiceList>",
            },
            "total": {
              "docs": undefined,
              "type": "optional<double>",
            },
          },
        },
        "InvoiceStatusEnum": {
          "docs": "Current status of the invoice.",
          "enum": [
            {
              "docs": undefined,
              "name": "pending",
              "value": "pending",
            },
            {
              "docs": undefined,
              "name": "paid",
              "value": "paid",
            },
            {
              "docs": undefined,
              "name": "processing",
              "value": "processing",
            },
            {
              "docs": undefined,
              "name": "canceled",
              "value": "canceled",
            },
            {
              "docs": undefined,
              "name": "skipped",
              "value": "skipped",
            },
            {
              "docs": undefined,
              "name": "failed",
              "value": "failed",
            },
            {
              "docs": undefined,
              "name": "refunded",
              "value": "refunded",
            },
          ],
        },
        "InvoiceStatusEnumList": {
          "docs": "filter invoices by current status, show a invoice if its status is in this list",
          "type": "list<InvoiceStatusEnum>",
        },
        "InvoiceTypeEnum": {
          "docs": "invoice's type",
          "enum": [
            {
              "docs": undefined,
              "name": "PAYMENT",
              "value": "PAYMENT",
            },
            {
              "docs": undefined,
              "name": "EOR_DEPOSIT",
              "value": "EOR_DEPOSIT",
            },
            {
              "docs": undefined,
              "name": "EOR_FIRST_PAYMENT",
              "value": "EOR_FIRST_PAYMENT",
            },
            {
              "docs": undefined,
              "name": "EOR_TERMINATION_OFFCYCLE",
              "value": "EOR_TERMINATION_OFFCYCLE",
            },
            {
              "docs": undefined,
              "name": "SIGNING_BONUS",
              "value": "SIGNING_BONUS",
            },
            {
              "docs": undefined,
              "name": "REFUND_STATEMENT",
              "value": "REFUND_STATEMENT",
            },
            {
              "docs": undefined,
              "name": "EOR_TAX_RULING",
              "value": "EOR_TAX_RULING",
            },
            {
              "docs": undefined,
              "name": "GP_DEPOSIT_STATEMENT",
              "value": "GP_DEPOSIT_STATEMENT",
            },
            {
              "docs": undefined,
              "name": "GP_FUNDING_STATEMENT",
              "value": "GP_FUNDING_STATEMENT",
            },
            {
              "docs": undefined,
              "name": "GLOBAL_PAYROLL_FEES",
              "value": "GLOBAL_PAYROLL_FEES",
            },
            {
              "docs": undefined,
              "name": "SHIELD_DEPOSIT",
              "value": "SHIELD_DEPOSIT",
            },
            {
              "docs": undefined,
              "name": "EOR_MANAGEMENT_FEE",
              "value": "EOR_MANAGEMENT_FEE",
            },
          ],
        },
        "JobTitle": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": "Unique identifier for the job title in Deel platform.",
              "type": "double",
            },
            "name": {
              "docs": "Job title.",
              "type": "string",
            },
          },
        },
        "JobTitleList": {
          "docs": undefined,
          "type": "list<JobTitle>",
        },
        "JobTitleListContainer": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "JobTitleList",
            },
            "page": {
              "docs": undefined,
              "type": "JobTitleListContainerPage",
            },
          },
        },
        "JobTitleListContainerPage": {
          "docs": undefined,
          "properties": {
            "cursor": {
              "docs": "Use for pagination to get next set of records after the given cursor.",
              "type": "string",
            },
          },
        },
        "LegalEntityArray": {
          "docs": undefined,
          "type": "list<LegalEntityType>",
        },
        "LegalEntityList": {
          "docs": undefined,
          "type": "list<BasicLegalEntity>",
        },
        "LegalEntityListContainer": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "optional<LegalEntityList>",
            },
          },
        },
        "LegalEntitySubType": {
          "docs": undefined,
          "type": "string",
        },
        "LegalEntityType": {
          "docs": undefined,
          "enum": [
            {
              "docs": undefined,
              "name": "individual",
              "value": "individual",
            },
            {
              "docs": undefined,
              "name": "company",
              "value": "company",
            },
          ],
        },
        "MetaDataOfContractToCreate": {
          "docs": "Additional custom info about a contract",
          "properties": {
            "documents_required": {
              "docs": "Require the contractor to upload necessary compliance documents as per their country’s labor laws.",
              "type": "boolean",
            },
            "is_main_income": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
          },
        },
        "Milestone": {
          "docs": undefined,
          "properties": {
            "amount": {
              "docs": "Amount to be paid for the milestone.",
              "type": "string",
            },
            "approval_requested": {
              "docs": "Indicates if the contractor has requested the approval for the milestone.",
              "type": "boolean",
            },
            "created_at": {
              "docs": undefined,
              "type": "optional<DateTimeString>",
            },
            "description": {
              "docs": "Description of milestone.",
              "type": "string",
            },
            "id": {
              "docs": "Unique identifier for the milestone.",
              "type": "double",
            },
            "reported_by": {
              "docs": "Milestone creator.",
              "type": "MilestoneReportedBy",
            },
            "reviewed_by": {
              "docs": "Reviewer's information.",
              "type": "optional<MilestoneReviewedBy>",
            },
            "status": {
              "docs": "Current status of milestone.",
              "type": "string",
            },
            "title": {
              "docs": "Title of milestone.",
              "type": "string",
            },
          },
        },
        "MilestoneContainer": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "Milestone",
            },
          },
        },
        "MilestoneList": {
          "docs": undefined,
          "type": "list<Milestone>",
        },
        "MilestoneListContainer": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "MilestoneList",
            },
          },
        },
        "MilestoneProperties": {
          "docs": undefined,
          "properties": {
            "amount": {
              "docs": "Amount to be paid for the milestone.",
              "type": "string",
            },
            "description": {
              "docs": "Description of milestone.",
              "type": "string",
            },
            "title": {
              "docs": "Title of milestone.",
              "type": "string",
            },
          },
        },
        "MilestoneReportedBy": {
          "docs": "Milestone creator.",
          "properties": {
            "full_name": {
              "docs": "Reporter's full name.",
              "type": "string",
            },
            "id": {
              "docs": "Reporter's unique Deel id.",
              "type": "double",
            },
          },
        },
        "MilestoneReviewToCreate": {
          "docs": undefined,
          "properties": {
            "reason": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "status": {
              "docs": undefined,
              "type": "MilestoneReviewToCreateStatus",
            },
          },
        },
        "MilestoneReviewToCreateStatus": {
          "docs": undefined,
          "enum": [
            {
              "docs": undefined,
              "name": "approved",
              "value": "approved",
            },
            {
              "docs": undefined,
              "name": "declined",
              "value": "declined",
            },
          ],
        },
        "MilestoneReviewedBy": {
          "docs": "Reviewer's information.",
          "properties": {
            "full_name": {
              "docs": "Reviewer's full name.",
              "type": "string",
            },
            "id": {
              "docs": "Reviewer's unique Deel id.",
              "type": "double",
            },
          },
        },
        "MilestoneReviewsToCreate": {
          "docs": undefined,
          "properties": {
            "ids": {
              "docs": undefined,
              "type": "list<double>",
            },
            "reason": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "status": {
              "docs": undefined,
              "type": "MilestoneReviewsToCreateStatus",
            },
          },
        },
        "MilestoneReviewsToCreateStatus": {
          "docs": undefined,
          "enum": [
            {
              "docs": undefined,
              "name": "approved",
              "value": "approved",
            },
            {
              "docs": undefined,
              "name": "declined",
              "value": "declined",
            },
          ],
        },
        "MilestoneToCreate": {
          "docs": undefined,
          "type": "MilestoneProperties",
        },
        "MilestoneToCreateContainer": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "MilestoneToCreate",
            },
          },
        },
        "MonthlyPayment": {
          "docs": "Monthly payment details for the user",
          "properties": {
            "count": {
              "docs": "The number of monthly payments",
              "type": "optional<integer>",
            },
          },
        },
        "NoticePeriod": {
          "docs": "Days before to notice the termination of contract for eather party.",
          "type": "double",
        },
        "OffCyclePayment": {
          "docs": undefined,
          "properties": {
            "amount": {
              "docs": "Amount of off-cycle payment.",
              "type": "string",
            },
            "created_at": {
              "docs": undefined,
              "type": "optional<DateTimeStringRequired>",
            },
            "currency_code": {
              "docs": undefined,
              "type": "CurrencyCodeRequired",
            },
            "date_submitted": {
              "docs": undefined,
              "type": "optional<DateTimeStringRequired>",
            },
            "description": {
              "docs": "Description of the off-cycle payment entry.",
              "type": "string",
            },
            "id": {
              "docs": undefined,
              "type": "UniqueObjectIdentifier",
            },
            "public_id": {
              "docs": undefined,
              "type": "optional<PublicId>",
            },
            "reported_by": {
              "docs": undefined,
              "type": "OffCyclePaymentReportedBy",
            },
            "reviewed_by": {
              "docs": undefined,
              "type": "optional<OffCyclePaymentReviewedBy>",
            },
            "status": {
              "docs": undefined,
              "type": "optional<InvoiceAdjustmentStatusEnum>",
            },
          },
        },
        "OffCyclePaymentContainer": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "OffCyclePayment",
            },
          },
        },
        "OffCyclePaymentList": {
          "docs": undefined,
          "type": "list<OffCyclePayment>",
        },
        "OffCyclePaymentListContainer": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "OffCyclePaymentList",
            },
          },
        },
        "OffCyclePaymentReportedBy": {
          "docs": undefined,
          "properties": {
            "full_name": {
              "docs": "Full name of the creator.",
              "type": "string",
            },
            "id": {
              "docs": "Profile id of the creator.",
              "type": "double",
            },
          },
        },
        "OffCyclePaymentReviewedBy": {
          "docs": undefined,
          "properties": {
            "full_name": {
              "docs": "Full name of the reviewer.",
              "type": "string",
            },
            "id": {
              "docs": "Profile if of the reviewer.",
              "type": "double",
            },
            "remarks": {
              "docs": "Remarks made during review process.",
              "type": "string",
            },
            "reviewed_at": {
              "docs": "Date of review.",
              "type": "string",
            },
          },
        },
        "OffCyclePaymentToCreate": {
          "docs": "Details of invoice adjustment to create.",
          "properties": {
            "amount": {
              "docs": "Amount to be paid. Must be a positive number.",
              "type": "double",
            },
            "date_submitted": {
              "docs": undefined,
              "type": "DateStringRequired",
            },
            "description": {
              "docs": "Description of off-cycle payment.",
              "type": "optional<string>",
            },
          },
        },
        "OffCyclePaymentTypeEnum": "literal<"offcycle">",
        "OrganizationList": {
          "docs": undefined,
          "type": "list<BasicOrganization>",
        },
        "OrganizationListContainer": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "OrganizationList",
            },
          },
        },
        "OutputToCreateFileRef": {
          "docs": undefined,
          "properties": {
            "key": {
              "docs": undefined,
              "type": "string",
            },
            "url": {
              "docs": undefined,
              "type": "string",
            },
          },
        },
        "OutputToCreateFileRefContainer": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "OutputToCreateFileRef",
            },
          },
        },
        "PageInfo": {
          "docs": undefined,
          "properties": {
            "cursor": {
              "docs": undefined,
              "type": "string",
            },
            "total_rows": {
              "docs": undefined,
              "type": "double",
            },
          },
        },
        "PageInfoWithoutCursor": {
          "docs": undefined,
          "properties": {
            "total_rows": {
              "docs": undefined,
              "type": "double",
            },
          },
        },
        "PageInfoWithoutCursorNew": {
          "docs": undefined,
          "properties": {
            "items_per_page": {
              "docs": undefined,
              "type": "double",
            },
            "offset": {
              "docs": undefined,
              "type": "double",
            },
            "total_rows": {
              "docs": undefined,
              "type": "double",
            },
          },
        },
        "PatchWebhookRequestStatus": {
          "docs": "Status of webhook.",
          "enum": [
            {
              "docs": undefined,
              "name": "enabled",
              "value": "enabled",
            },
            {
              "docs": undefined,
              "name": "disabled",
              "value": "disabled",
            },
          ],
        },
        "Payment": {
          "docs": undefined,
          "properties": {
            "created_at": {
              "docs": "Timestamp when the record was created.",
              "type": "optional<DateTimeString>",
            },
            "id": {
              "docs": "Unique identifier of the payment.",
              "type": "double",
            },
            "label": {
              "docs": undefined,
              "type": "string",
            },
            "paid_at": {
              "docs": "Timestamp when payment was paid.",
              "type": "optional<DateTimeString>",
            },
            "payment_currency": {
              "docs": undefined,
              "type": "CurrencyCode",
            },
            "payment_method": {
              "docs": undefined,
              "type": "PaymentMethod",
            },
            "status": {
              "docs": undefined,
              "type": "PaymentStatusEnum",
            },
            "total": {
              "docs": "Total paid.",
              "type": "double",
            },
            "workers": {
              "docs": undefined,
              "type": "PaymentWorkerList",
            },
          },
        },
        "PaymentBreakDown": {
          "docs": undefined,
          "properties": {
            "adjustment": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "approve_date": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "approvers": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "bonus": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "commissions": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "contract_country": {
              "docs": "Country of the contract.",
              "type": "optional<string>",
            },
            "contract_start_date": {
              "docs": "Contract start date.",
              "type": "optional<string>",
            },
            "contractor_email": {
              "docs": "Worker's email.",
              "type": "optional<string>",
            },
            "contractor_employee_name": {
              "docs": "Worker's name.",
              "type": "optional<string>",
            },
            "contractor_unique_identifier": {
              "docs": "Worker's unique identifier.",
              "type": "optional<string>",
            },
            "currency": {
              "docs": "Currency code.",
              "type": "optional<string>",
            },
            "date": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "deductions": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "expenses": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "frequency": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "general_ledger_account": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "invoice_number": {
              "docs": "Invoice number.",
              "type": "optional<string>",
            },
            "others": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "overtime": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "payment_currency": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "payment_date": {
              "docs": "Date of payment.",
              "type": "optional<string>",
            },
            "pro_rata": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "processing_fee": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "receipt_number": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "team": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "total": {
              "docs": "Total due.",
              "type": "optional<string>",
            },
            "total_payment_currency": {
              "docs": "Total in payment currency.",
              "type": "optional<string>",
            },
            "work": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "PaymentBreakDownContainer": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "list<PaymentBreakDown>",
            },
          },
        },
        "PaymentList": {
          "docs": undefined,
          "type": "list<Payment>",
        },
        "PaymentListContainer": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "PaymentObject",
            },
          },
        },
        "PaymentMethod": {
          "docs": undefined,
          "properties": {
            "type": {
              "docs": undefined,
              "type": "PaymentMethodEnum",
            },
          },
        },
        "PaymentMethodEnum": {
          "docs": "All the supported payment types",
          "enum": [
            {
              "docs": undefined,
              "name": "stripe_bacs_debit",
              "value": "stripe_bacs_debit",
            },
            {
              "docs": undefined,
              "name": "pay_pal",
              "value": "pay_pal",
            },
            {
              "docs": undefined,
              "name": "stripe_card",
              "value": "stripe_card",
            },
            {
              "docs": undefined,
              "name": "bt_card",
              "value": "bt_card",
            },
            {
              "docs": undefined,
              "name": "stripe_ach",
              "value": "stripe_ach",
            },
            {
              "docs": undefined,
              "name": "coinbase",
              "value": "coinbase",
            },
            {
              "docs": undefined,
              "name": "go_cardless",
              "value": "go_cardless",
            },
            {
              "docs": undefined,
              "name": "brex",
              "value": "brex",
            },
            {
              "docs": undefined,
              "name": "stripe_sepa_debit",
              "value": "stripe_sepa_debit",
            },
            {
              "docs": undefined,
              "name": "transferwise",
              "value": "transferwise",
            },
            {
              "docs": undefined,
              "name": "go_cardless_becs",
              "value": "go_cardless_becs",
            },
            {
              "docs": undefined,
              "name": "bank_transfer",
              "value": "bank_transfer",
            },
            {
              "docs": undefined,
              "name": "mercury_wire",
              "value": "mercury_wire",
            },
            {
              "docs": undefined,
              "name": "bt_pay_pal",
              "value": "bt_pay_pal",
            },
          ],
        },
        "PaymentMethodEnumList": {
          "docs": "filter invoices by payment method",
          "type": "list<PaymentMethodEnum>",
        },
        "PaymentObject": {
          "docs": undefined,
          "properties": {
            "rows": {
              "docs": undefined,
              "type": "optional<PaymentList>",
            },
            "total": {
              "docs": undefined,
              "type": "optional<double>",
            },
          },
        },
        "PaymentStatementInitiatedWebhook": {
          "docs": undefined,
          "properties": {
            "billing_invoices": {
              "docs": undefined,
              "type": "list<double>",
            },
            "invoices": {
              "docs": undefined,
              "type": "list<double>",
            },
          },
        },
        "PaymentStatusEnum": {
          "docs": "status of payment",
          "enum": [
            {
              "docs": undefined,
              "name": "paid",
              "value": "paid",
            },
            {
              "docs": undefined,
              "name": "processing",
              "value": "processing",
            },
          ],
        },
        "PaymentStatusEnumList": {
          "docs": undefined,
          "type": "list<PaymentStatusEnum>",
        },
        "PaymentWorker": {
          "docs": undefined,
          "properties": {
            "contract_id": {
              "docs": "The worker's Deel contract Id.",
              "type": "optional<string>",
            },
            "name": {
              "docs": "Worker's full name.",
              "type": "string",
            },
            "picUrl": {
              "docs": "URL to worker's Deel avatar.",
              "type": "optional<string>",
            },
          },
        },
        "PaymentWorkerList": {
          "docs": undefined,
          "type": "list<PaymentWorker>",
        },
        "People": {
          "docs": "People object representing a Deel",
          "properties": {
            "birth_date": {
              "docs": "Date of birth of the user in ISO format (yyyy-mm-dd)",
              "type": "optional<string>",
            },
            "client_legal_entity": {
              "docs": undefined,
              "type": "optional<PeopleClientLegalEntity>",
            },
            "completion_date": {
              "docs": "Date when the user's current employment is expected to end in ISO format (yyyy-mm-ddThh:mm:ss.sssZ)",
              "type": "optional<string>",
            },
            "contract_types": {
              "docs": "List of contract types that the user has had in the past and/or currently has",
              "type": "optional<list<string>>",
            },
            "country": {
              "docs": "ISO 3166-1 alpha-2 code of the country where the user is located",
              "type": "optional<string>",
            },
            "country_name": {
              "docs": "Name of the country where the user is located",
              "type": "optional<string>",
            },
            "department": {
              "docs": "Name of the department that the user belongs to",
              "type": "optional<string>",
            },
            "direct_manager": {
              "docs": "Name of the user's direct manager",
              "type": "optional<string>",
            },
            "direct_reports": {
              "docs": "Names of the user's direct reports",
              "type": "optional<string>",
            },
            "direct_reports_count": {
              "docs": "Number of direct reports that the user has",
              "type": "optional<integer>",
            },
            "email": {
              "docs": "Email address of the user",
              "type": "optional<string>",
            },
            "employments": {
              "docs": "List of employment objects representing the user's employment history",
              "type": "optional<list<Employment>>",
            },
            "first_name": {
              "docs": "First name of the user",
              "type": "optional<string>",
            },
            "full_name": {
              "docs": "Full name of the user",
              "type": "optional<string>",
            },
            "has_deel_user": {
              "docs": "Indicates whether the user has a Deel account or not",
              "type": "optional<boolean>",
            },
            "hiring_status": {
              "docs": "Hiring status of the user",
              "type": "optional<string>",
            },
            "hiring_type": {
              "docs": "Type of employment contract that the user has",
              "type": "optional<string>",
            },
            "hourly_report_total": {
              "docs": "Total amount of hours worked by the user in ISO format (hh:mm:ss)",
              "type": "optional<string>",
            },
            "id": {
              "docs": "Unique identifier for the user",
              "type": "optional<string>",
            },
            "job_title": {
              "docs": "Title of the user's role",
              "type": "optional<string>",
            },
            "last_name": {
              "docs": "Last name of the user",
              "type": "optional<string>",
            },
            "monthly_payment": {
              "docs": undefined,
              "type": "optional<MonthlyPayment>",
            },
            "payments": {
              "docs": "List of payment objects representing the user's payment history",
              "type": "optional<list<Payment>>",
            },
            "personal_email": {
              "docs": "Personal email address of the user",
              "type": "optional<string>",
            },
            "pic_url": {
              "docs": "URL of the user's profile picture",
              "type": "optional<string>",
            },
            "seniority": {
              "docs": "Seniority level of the user's role",
              "type": "optional<string>",
            },
            "start_date": {
              "docs": "Date when the user started their current employment in ISO format (yyyy-mm-dd)",
              "type": "optional<string>",
            },
            "state": {
              "docs": "State where the user is located",
              "type": "optional<string>",
            },
            "team": {
              "docs": "Name of the team that the user belongs to",
              "type": "optional<string>",
            },
            "team_id": {
              "docs": "Unique identifier for the team that the user belongs to",
              "type": "optional<integer>",
            },
            "timezone": {
              "docs": "Time zone of the user's location",
              "type": "optional<string>",
            },
            "work_email": {
              "docs": "Work email address of the user",
              "type": "optional<string>",
            },
            "work_location": {
              "docs": "Name of the user's work location",
              "type": "optional<string>",
            },
          },
        },
        "PeopleClientLegalEntity": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": "The unique identifier for the client legal entity.",
              "type": "optional<integer>",
            },
            "name": {
              "docs": "The name of the client legal entity.",
              "type": "optional<string>",
            },
          },
        },
        "PeopleContainer": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "list<People>",
            },
          },
        },
        "PeopleMe": {
          "docs": "People object representing a Deel",
          "properties": {
            "avatar_url": {
              "docs": "URL of the user's avatar",
              "type": "optional<string>",
            },
            "client_country": {
              "docs": undefined,
              "type": "optional<CountryCodeNulleable>",
            },
            "contractor_country": {
              "docs": undefined,
              "type": "optional<CountryCodeNulleable>",
            },
            "email": {
              "docs": "Email address of the user",
              "type": "optional<string>",
            },
            "first_name": {
              "docs": "First name of the user",
              "type": "optional<string>",
            },
            "full_name": {
              "docs": "Full name of the user",
              "type": "optional<string>",
            },
            "id": {
              "docs": "Unique identifier for the user profile",
              "type": "optional<double>",
            },
            "last_name": {
              "docs": "Last name of the user",
              "type": "optional<string>",
            },
            "middle_name": {
              "docs": "Middle name of the user",
              "type": "optional<string>",
            },
            "organization_id": {
              "docs": "Unique identifier for the organization",
              "type": "optional<double>",
            },
            "organization_name": {
              "docs": "Name of the organization",
              "type": "optional<string>",
            },
            "profile_type": {
              "docs": undefined,
              "type": "optional<ProfileTypeEnum>",
            },
            "slack_team_id": {
              "docs": "User's team slack id",
              "type": "optional<string>",
            },
            "slack_user_id": {
              "docs": "User's slack id",
              "type": "optional<string>",
            },
            "user_id": {
              "docs": "Unique identifier for the user",
              "type": "optional<double>",
            },
            "username": {
              "docs": "Username of the user",
              "type": "optional<string>",
            },
          },
        },
        "PeopleMeContainer": {
          "docs": undefined,
          "type": "PeopleMe",
        },
        "PeoplePayment": {
          "docs": undefined,
          "properties": {
            "contract_name": {
              "docs": "The name of the contract associated with the payment",
              "type": "optional<string>",
            },
            "currency": {
              "docs": "The currency code (ISO 4217) for the payment",
              "type": "optional<string>",
            },
            "rate": {
              "docs": "The payment rate",
              "type": "optional<integer>",
            },
            "scale": {
              "docs": "The payment scale (e.g., hourly, weekly, monthly, etc.)",
              "type": "optional<string>",
            },
          },
        },
        "PgoTask": {
          "docs": undefined,
          "properties": {
            "amount": {
              "docs": "Fixed rate for this task.",
              "type": "string",
            },
            "attachment": {
              "docs": undefined,
              "type": "optional<FileAttachmentInfo>",
            },
            "date_submitted": {
              "docs": undefined,
              "type": "DateStringRequired",
            },
            "description": {
              "docs": "Task description.",
              "type": "string",
            },
            "id": {
              "docs": "Unique identifier of the task.",
              "type": "double",
            },
            "status": {
              "docs": undefined,
              "type": "optional<TimesheetStatusEnum>",
            },
          },
        },
        "PgoTaskReviewsByIdToCreate": {
          "docs": undefined,
          "properties": {
            "reason": {
              "docs": "Review comments.",
              "type": "optional<string>",
            },
            "status": {
              "docs": "Review status.",
              "type": "PgoTaskReviewsByIdToCreateStatus",
            },
          },
        },
        "PgoTaskReviewsByIdToCreateStatus": {
          "docs": "Review status.",
          "enum": [
            {
              "docs": undefined,
              "name": "approved",
              "value": "approved",
            },
            {
              "docs": undefined,
              "name": "declined",
              "value": "declined",
            },
          ],
        },
        "PgoTaskReviewsToCreate": {
          "docs": undefined,
          "properties": {
            "ids": {
              "docs": undefined,
              "type": "list<double>",
            },
            "reason": {
              "docs": "Additional comments with the reivew.",
              "type": "optional<string>",
            },
            "status": {
              "docs": "Review status.",
              "type": "PgoTaskReviewsToCreateStatus",
            },
          },
        },
        "PgoTaskReviewsToCreateStatus": {
          "docs": "Review status.",
          "enum": [
            {
              "docs": undefined,
              "name": "approved",
              "value": "approved",
            },
            {
              "docs": undefined,
              "name": "declined",
              "value": "declined",
            },
          ],
        },
        "PgoTaskToCreate": {
          "docs": undefined,
          "properties": {
            "amount": {
              "docs": "Fixed rate for this task. <span style="white-space: nowrap">\`non-empty\`</span> ",
              "type": "string",
            },
            "attachment": {
              "docs": undefined,
              "type": "optional<FileAttachmentInfo>",
            },
            "date_submitted": {
              "docs": undefined,
              "type": "DateStringRequired",
            },
            "description": {
              "docs": "Task description.",
              "type": "optional<string>",
            },
          },
        },
        "PgoTaskToDelete": {
          "docs": undefined,
          "properties": {
            "delete_recurring_report": {
              "docs": "Request to delete recurring report.",
              "type": "optional<boolean>",
            },
            "description": {
              "docs": "Description of exclusion.",
              "type": "optional<string>",
            },
          },
        },
        "PremiumResultAdded": {
          "docs": undefined,
          "properties": {
            "calculated_premium": {
              "docs": "Cost for Deel Premium.",
              "type": "double",
            },
            "id": {
              "docs": "Deel Premium plan id.",
              "type": "string",
            },
            "misclassification_guarantee": {
              "docs": undefined,
              "type": "PremiumResultAddedMisclassificationGuarantee",
            },
            "penalties": {
              "docs": undefined,
              "type": "PremiumResultAddedPenalties",
            },
            "third_party_liabilities": {
              "docs": undefined,
              "type": "PremiumResultAddedThirdPartyLiabilities",
            },
          },
        },
        "PremiumResultAddedContainer": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "PremiumResultAdded",
            },
          },
        },
        "PremiumResultAddedMisclassificationGuarantee": {
          "docs": undefined,
          "properties": {
            "description": {
              "docs": "Cover your legal defense costs.",
              "type": "optional<string>",
            },
            "name": {
              "docs": "Legal costs.",
              "type": "optional<string>",
            },
          },
        },
        "PremiumResultAddedPenalties": {
          "docs": undefined,
          "properties": {
            "description": {
              "docs": "Get indemnity against tax authority penalties, liabilities and fines.",
              "type": "optional<string>",
            },
            "name": {
              "docs": "Penalties.",
              "type": "optional<string>",
            },
          },
        },
        "PremiumResultAddedThirdPartyLiabilities": {
          "docs": undefined,
          "properties": {
            "description": {
              "docs": "Get indemnity against third parties up to $10k depending on the court's decision.",
              "type": "optional<string>",
            },
            "name": {
              "docs": "Third-party liabilities.",
              "type": "optional<string>",
            },
          },
        },
        "PremiumToAdd": {
          "docs": undefined,
          "properties": {
            "agreement_reflects_relation": {
              "docs": "Is the Contractor Agreement selected on the Deel Platform perfectly reflecting your organizations relation and actual working practices with the contractor?",
              "type": "string",
            },
            "contractor_characteristics": {
              "docs": "Workers doing certain jobs may be considered to be employees by law, even if they would otherwise be considered independent contractors under common law. Is the work of this worker characterized as: Apprentice, Trainee, Labourer, Driver, Medical worker, Legal worker, Construction worker or someone working in the fields of Finance/Investment?",
              "type": "string",
            },
          },
        },
        "ProRata": {
          "docs": "Details of the pro rata for the first payment",
          "properties": {
            "calculation_type": {
              "docs": "Either works days or calendar days",
              "type": "optional<ProRataCalculationType>",
            },
            "cycle_end": {
              "docs": undefined,
              "type": "optional<DateStringRequired>",
            },
            "cycle_start": {
              "docs": undefined,
              "type": "optional<DateStringRequired>",
            },
            "cycle_work_days": {
              "docs": "Total days to be work.",
              "type": "optional<double>",
            },
            "daily_rate": {
              "docs": "Daily rate to be paid.",
              "type": "optional<double>",
            },
            "rate": {
              "docs": "Rate to be paid.",
              "type": "optional<double>",
            },
            "total": {
              "docs": "Total to be paid.",
              "type": "optional<double>",
            },
            "work_week_end": {
              "docs": undefined,
              "type": "optional<WeekDaysEnum>",
            },
            "work_week_start": {
              "docs": undefined,
              "type": "optional<WeekDaysEnum>",
            },
          },
        },
        "ProRataCalculationType": {
          "docs": "Either works days or calendar days",
          "enum": [
            {
              "docs": undefined,
              "name": "CUSTOM_AMOUNT",
              "value": "CUSTOM_AMOUNT",
            },
            {
              "docs": undefined,
              "name": "WORK_DAYS",
              "value": "WORK_DAYS",
            },
            {
              "docs": undefined,
              "name": "CALENDAR_DAYS",
              "value": "CALENDAR_DAYS",
            },
            {
              "docs": undefined,
              "name": "FULL_AMOUNT",
              "value": "FULL_AMOUNT",
            },
          ],
        },
        "ProfileTypeEnum": {
          "docs": undefined,
          "enum": [
            {
              "docs": undefined,
              "name": "client",
              "value": "client",
            },
            {
              "docs": undefined,
              "name": "contractor",
              "value": "contractor",
            },
            {
              "docs": undefined,
              "name": "icp",
              "value": "icp",
            },
            {
              "docs": undefined,
              "name": "direct_employee",
              "value": "direct_employee",
            },
            {
              "docs": undefined,
              "name": "hris_direct_employee",
              "value": "hris_direct_employee",
            },
            {
              "docs": undefined,
              "name": "service_account",
              "value": "service_account",
            },
          ],
        },
        "PublicId": {
          "docs": "The public UUID of the object",
          "type": "string",
        },
        "ResponseEstimateFirstPayment": {
          "docs": undefined,
          "properties": {
            "first_payment_dates": {
              "docs": undefined,
              "type": "optional<list<FirstPaymentDate>>",
            },
            "pro_rata": {
              "docs": undefined,
              "type": "optional<ProRata>",
            },
          },
        },
        "ResponseEstimateFirstPaymentContainer": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "ResponseEstimateFirstPayment",
            },
          },
        },
        "Seniority": {
          "docs": "Seniority describes level of expertise at a job e.g. junior",
          "properties": {
            "id": {
              "docs": "Unique identifier for seniority record",
              "type": "double",
            },
            "level": {
              "docs": "Level of seniority level e.g. 2",
              "type": "optional<double>",
            },
            "name": {
              "docs": "Name of seniority level e.g. Mid (Individual Contributor Level 2) <span style="white-space: nowrap">\`non-empty\`</span> ",
              "type": "string",
            },
          },
        },
        "SeniorityList": {
          "docs": undefined,
          "type": "list<SeniorityRequired>",
        },
        "SeniorityListContainer": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "SeniorityList",
            },
          },
        },
        "SeniorityRequired": {
          "docs": "Seniority describes level of expertise at a job e.g. junior",
          "properties": {
            "id": {
              "docs": "Unique identifier for seniority record.",
              "type": "double",
            },
            "level": {
              "docs": "Level of seniority level e.g. 2",
              "type": "double",
            },
            "name": {
              "docs": "Name of seniority level e.g. Mid (Individual Contributor Level 2) <span style="white-space: nowrap">\`non-empty\`</span> ",
              "type": "string",
            },
          },
        },
        "SignaturesOfBasicContract": {
          "docs": undefined,
          "properties": {
            "client_signed_at": {
              "docs": undefined,
              "type": "optional<DateTimeString>",
            },
            "worker_signature": {
              "docs": "Worker's signature.",
              "type": "string",
            },
            "worker_signed_at": {
              "docs": undefined,
              "type": "optional<DateTimeString>",
            },
          },
        },
        "SignaturesOfContract": {
          "docs": undefined,
          "properties": {
            "client_signature": {
              "docs": "normally name of client is used as signature",
              "type": "string",
            },
            "client_signed_at": {
              "docs": undefined,
              "type": "optional<DateTimeString>",
            },
            "signed_at": {
              "docs": undefined,
              "type": "optional<DateTimeString>",
            },
            "worker_signature": {
              "docs": "Signatures of client representative.",
              "type": "string",
            },
            "worker_signed_at": {
              "docs": undefined,
              "type": "optional<DateTimeString>",
            },
          },
        },
        "SortDirEnum": {
          "docs": undefined,
          "enum": [
            {
              "docs": undefined,
              "name": "asc",
              "value": "asc",
            },
            {
              "docs": undefined,
              "name": "desc",
              "value": "desc",
            },
          ],
        },
        "StateOfCountry": {
          "docs": "It may be called states, provinces, prefectures or regions, or none at all",
          "properties": {
            "code": {
              "docs": "Territory code. <span style="white-space: nowrap">\`non-empty\`</span> ",
              "type": "string",
            },
            "name": {
              "docs": "Territory name. <span style="white-space: nowrap">\`non-empty\`</span> ",
              "type": "string",
            },
          },
        },
        "TaskList": {
          "docs": undefined,
          "type": "list<PgoTask>",
        },
        "TaskListContainer": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "TaskList",
            },
          },
        },
        "Team": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": "The unique identifier for the team.",
              "type": "optional<integer>",
            },
            "name": {
              "docs": "The name of the team.",
              "type": "optional<string>",
            },
          },
        },
        "TeamList": {
          "docs": undefined,
          "type": "list<BasicTeam>",
        },
        "TeamListContainer": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "TeamList",
            },
          },
        },
        "TeamOfBasicContract": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": "Unique reference of a team",
              "type": "optional<double>",
            },
            "name": {
              "docs": "Name of a team",
              "type": "optional<string>",
            },
          },
        },
        "TeamOfContract": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": "Unique reference of a team",
              "type": "double",
            },
            "name": {
              "docs": "Name of a team",
              "type": "string",
            },
          },
        },
        "TimeoffReview": {
          "docs": undefined,
          "properties": {
            "denial_reason": {
              "docs": "Denial reason for the time off requested.",
              "type": "optional<string>",
            },
            "is_approved": {
              "docs": "Approve or decline employee's time off request.",
              "type": "boolean",
            },
          },
        },
        "TimeoffTypeList": {
          "docs": undefined,
          "type": "list<string>",
        },
        "TimeoffTypeListContainer": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "TimeoffTypeList",
            },
          },
        },
        "TimeoffsAttachments": {
          "docs": "A list of attachments. 2022-09-08 FE only allows for "SICK LEAVE"",
          "type": "list<TimeoffsAttachmentsItem>",
        },
        "TimeoffsAttachmentsItem": {
          "docs": "A item in attachments array. 2022-09-08 FE only allows for "SICK LEAVE"",
          "properties": {
            "file_extension": {
              "docs": "The file name extension",
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "label": {
              "docs": "The file name",
              "type": "optional<string>",
            },
          },
        },
        "TimeoffsProfile": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": undefined,
              "type": "double",
            },
            "is_employee": {
              "docs": "Only valid for requester. True if requester is an employee.",
              "type": "optional<boolean>",
            },
            "name": {
              "docs": undefined,
              "type": "string",
            },
            "pic_url": {
              "docs": "Avatar or selfie.",
              "type": "optional<UrlType>",
            },
            "profile_type": {
              "docs": undefined,
              "type": "ProfileTypeEnum",
            },
          },
        },
        "TimeoffsStatusEnum": {
          "docs": undefined,
          "enum": [
            {
              "docs": undefined,
              "name": "REQUESTED",
              "value": "REQUESTED",
            },
            {
              "docs": undefined,
              "name": "APPROVED",
              "value": "APPROVED",
            },
            {
              "docs": undefined,
              "name": "REJECTED",
              "value": "REJECTED",
            },
          ],
        },
        "TimeoffsTypeEnum": {
          "docs": undefined,
          "enum": [
            {
              "docs": undefined,
              "name": "VACATION",
              "value": "VACATION",
            },
            {
              "docs": undefined,
              "name": "SICK_LEAVE",
              "value": "SICK_LEAVE",
            },
            {
              "docs": undefined,
              "name": "OTHER",
              "value": "OTHER",
            },
          ],
        },
        "Timesheet": {
          "docs": undefined,
          "extends": [
            "BasicTimesheet",
            "TimesheetApproversContainer",
          ],
          "properties": {},
        },
        "TimesheetAccountingRefs": {
          "docs": undefined,
          "type": "list<TimesheetAccountingRefsItem>",
        },
        "TimesheetAccountingRefsItem": {
          "docs": undefined,
          "properties": {
            "integration": {
              "docs": undefined,
              "type": "string",
            },
            "mapping_category": {
              "docs": undefined,
              "type": "optional<TimesheetAccountingRefsItemMappingCategory>",
            },
          },
        },
        "TimesheetAccountingRefsItemMappingCategory": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": undefined,
              "type": "string",
            },
            "name": {
              "docs": undefined,
              "type": "string",
            },
          },
        },
        "TimesheetApprover": {
          "docs": undefined,
          "properties": {
            "approved": {
              "docs": undefined,
              "type": "boolean",
            },
            "email": {
              "docs": undefined,
              "type": "string",
            },
            "full_name": {
              "docs": undefined,
              "type": "string",
            },
          },
        },
        "TimesheetApproverList": {
          "docs": undefined,
          "type": "list<TimesheetApprover>",
        },
        "TimesheetApproversContainer": {
          "docs": undefined,
          "properties": {
            "approvers": {
              "docs": undefined,
              "type": "TimesheetApproverList",
            },
          },
        },
        "TimesheetContainer": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "Timesheet",
            },
          },
        },
        "TimesheetIdItems": {
          "docs": undefined,
          "type": "list<TimesheetIdItemsItem>",
        },
        "TimesheetIdItemsItem": {
          "discriminated": false,
          "docs": "ID of an existing timesheet record",
          "union": [
            {
              "docs": undefined,
              "type": "double",
            },
            {
              "docs": undefined,
              "type": "string",
            },
          ],
        },
        "TimesheetList": {
          "docs": undefined,
          "type": "list<BasicTimesheet>",
        },
        "TimesheetListContainer": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "TimesheetList",
            },
            "page": {
              "docs": undefined,
              "type": "PageInfoWithoutCursor",
            },
          },
        },
        "TimesheetReviewToCreate": {
          "docs": undefined,
          "properties": {
            "reason": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "status": {
              "docs": undefined,
              "type": "TimesheetReviewToCreateStatus",
            },
          },
        },
        "TimesheetReviewToCreateStatus": {
          "docs": undefined,
          "enum": [
            {
              "docs": undefined,
              "name": "approved",
              "value": "approved",
            },
            {
              "docs": undefined,
              "name": "declined",
              "value": "declined",
            },
          ],
        },
        "TimesheetReviewsToCreate": {
          "docs": undefined,
          "properties": {
            "ids": {
              "docs": undefined,
              "type": "TimesheetIdItems",
            },
            "reason": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "status": {
              "docs": undefined,
              "type": "TimesheetReviewsToCreateStatus",
            },
          },
        },
        "TimesheetReviewsToCreateStatus": {
          "docs": undefined,
          "enum": [
            {
              "docs": undefined,
              "name": "approved",
              "value": "approved",
            },
            {
              "docs": undefined,
              "name": "declined",
              "value": "declined",
            },
          ],
        },
        "TimesheetSearchContainer": {
          "docs": "This is a model to make it easier to understand and restrict search parameters",
          "properties": {
            "contract_id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "contract_types": {
              "docs": undefined,
              "type": "optional<TimesheetSearchContainerContractTypes>",
            },
            "date_from": {
              "docs": undefined,
              "type": "optional<DateString>",
            },
            "date_to": {
              "docs": undefined,
              "type": "optional<DateString>",
            },
            "invoice_id": {
              "docs": "<span style="white-space: nowrap">\`<= 10 characters\`</span>",
              "type": "optional<string>",
            },
            "limit": {
              "docs": "Return a page of results with given number of records. <span style="white-space: nowrap">\`<= 2 characters\`</span> ",
              "type": "optional<string>",
            },
            "offset": {
              "docs": "<span style="white-space: nowrap">\`<= 2 characters\`</span>",
              "type": "optional<string>",
            },
            "order_direction": {
              "docs": undefined,
              "type": "optional<SortDirEnum>",
            },
            "reporter_id": {
              "docs": "<span style="white-space: nowrap">\`<= 10 characters\`</span>",
              "type": "optional<string>",
            },
            "statuses": {
              "docs": undefined,
              "type": "optional<TimesheetSearchContainerStatuses>",
            },
            "types": {
              "docs": undefined,
              "type": "optional<TimesheetSearchContainerTypes>",
            },
          },
        },
        "TimesheetSearchContainerContractTypes": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "ContractTypeEnumList",
            },
            {
              "docs": undefined,
              "type": "ContractTypeEnum",
            },
          ],
        },
        "TimesheetSearchContainerStatuses": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "TimesheetStatusEnumList",
            },
            {
              "docs": undefined,
              "type": "optional<TimesheetStatusEnum>",
            },
          ],
        },
        "TimesheetSearchContainerTypes": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "TimesheetTypeEnumList",
            },
            {
              "docs": undefined,
              "type": "TimesheetTypeEnum",
            },
          ],
        },
        "TimesheetSharedProperties": {
          "docs": "Details of timesheet to create; a client, contractor or EOR may create a timesheet",
          "properties": {
            "contract_id": {
              "docs": "Id of a Deel contract.",
              "type": "string",
            },
            "date_submitted": {
              "docs": undefined,
              "type": "DateStringRequired",
            },
            "description": {
              "docs": undefined,
              "type": "string",
            },
            "quantity": {
              "docs": "this is based on the scale of work statement of contract agreed e.g. 2 weeks",
              "type": "double",
            },
          },
        },
        "TimesheetStatusEnum": {
          "docs": "Status of this entry.",
          "type": "string",
        },
        "TimesheetStatusEnumList": {
          "docs": undefined,
          "type": "list<optional<TimesheetStatusEnum>>",
        },
        "TimesheetToCreate": {
          "docs": undefined,
          "type": "TimesheetSharedProperties",
        },
        "TimesheetToCreateContainer": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "TimesheetToCreate",
            },
          },
        },
        "TimesheetToCreateContainerWithFile": {
          "docs": undefined,
          "type": "TimesheetToCreateWithFile",
        },
        "TimesheetToCreateWithFile": {
          "docs": undefined,
          "extends": [
            "TimesheetSharedProperties",
            "FileObject",
          ],
          "properties": {},
        },
        "TimesheetToUpdate": {
          "docs": "Details of timesheet to create; a client, contractor or EOR may update a timesheet",
          "properties": {
            "description": {
              "docs": undefined,
              "type": "string",
            },
            "quantity": {
              "docs": undefined,
              "type": "double",
            },
          },
        },
        "TimesheetTypeEnum": "literal<"work">",
        "TimesheetTypeEnumList": {
          "docs": undefined,
          "type": "list<TimesheetTypeEnum>",
        },
        "UniqueObjectIdentifier": {
          "discriminated": false,
          "docs": "Unique identifier of this resource.",
          "union": [
            {
              "docs": undefined,
              "type": "string",
            },
            {
              "docs": undefined,
              "type": "double",
            },
          ],
        },
        "UrlType": {
          "docs": undefined,
          "type": "string",
        },
        "UrlTypeRequired": {
          "docs": undefined,
          "type": "string",
        },
        "WebhookItem": {
          "docs": undefined,
          "properties": {
            "api_version": {
              "docs": "Deel API version. Currently Deel only has one version: v1.",
              "type": "string",
            },
            "created_at": {
              "docs": "Time at which the webhook was created.",
              "type": "string",
            },
            "description": {
              "docs": "Webhook subscription description.",
              "type": "optional<string>",
            },
            "events": {
              "docs": "The list of events to enable for this subscription.",
              "type": "list<string>",
            },
            "hidden": {
              "docs": "Property to hide the webhook from frontend view. Commonly by Dell 3rd party apps",
              "type": "optional<boolean>",
            },
            "id": {
              "docs": "Webhook subscription's unique identifier.",
              "type": "double",
            },
            "name": {
              "docs": "Webhook subscription name.",
              "type": "optional<string>",
            },
            "signing_key": {
              "docs": "The webhook's signing key, used to generate webhook signatures.",
              "type": "optional<string>",
            },
            "status": {
              "docs": "Status of webhook.",
              "type": "WebhookItemStatus",
            },
            "updated_at": {
              "docs": "Time at which the webhook was updated.",
              "type": "string",
            },
            "url": {
              "docs": "Endpoint to receive webhook.",
              "type": "string",
            },
          },
        },
        "WebhookItemResponse": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "WebhookItem",
            },
          },
        },
        "WebhookItemStatus": {
          "docs": "Status of webhook.",
          "enum": [
            {
              "docs": undefined,
              "name": "enabled",
              "value": "enabled",
            },
            {
              "docs": undefined,
              "name": "disabled",
              "value": "disabled",
            },
          ],
        },
        "WebhookListResponse": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "list<WebhookItem>",
            },
          },
        },
        "WeekDaysEnum": {
          "docs": "Days of the week.",
          "enum": [
            {
              "docs": undefined,
              "name": "Sunday",
              "value": "Sunday",
            },
            {
              "docs": undefined,
              "name": "Monday",
              "value": "Monday",
            },
            {
              "docs": undefined,
              "name": "Tuesday",
              "value": "Tuesday",
            },
            {
              "docs": undefined,
              "name": "Wednesday",
              "value": "Wednesday",
            },
            {
              "docs": undefined,
              "name": "Thursday",
              "value": "Thursday",
            },
            {
              "docs": undefined,
              "name": "Friday",
              "value": "Friday",
            },
            {
              "docs": undefined,
              "name": "Saturday",
              "value": "Saturday",
            },
          ],
        },
        "WorkStatementCycleEndTypeEnum": {
          "docs": "Cycle end can be weekly 1-7 (Monday = 1) or monthly 1-31.",
          "enum": [
            {
              "docs": undefined,
              "name": "DAY_OF_WEEK",
              "value": "DAY_OF_WEEK",
            },
            {
              "docs": undefined,
              "name": "DAY_OF_LAST_WEEK",
              "value": "DAY_OF_LAST_WEEK",
            },
            {
              "docs": undefined,
              "name": "DAY_OF_MONTH",
              "value": "DAY_OF_MONTH",
            },
          ],
        },
        "WorkStatementCycleScaleEnum": {
          "docs": "Scale of the invoice cycle.",
          "enum": [
            {
              "docs": undefined,
              "name": "weekly",
              "value": "weekly",
            },
            {
              "docs": undefined,
              "name": "monthly",
              "value": "monthly",
            },
            {
              "docs": undefined,
              "name": "biweekly",
              "value": "biweekly",
            },
            {
              "docs": undefined,
              "name": "semimonthly",
              "value": "semimonthly",
            },
            {
              "docs": undefined,
              "name": "CalendarMonth",
              "value": "calendar-month",
            },
          ],
        },
        "WorkStatementPaymentDueTypeEnum": {
          "docs": "Type of payment due. If the payment is due on the last day of month, enter 'WITHIN_MONTH'.",
          "enum": [
            {
              "docs": undefined,
              "name": "REGULAR",
              "value": "REGULAR",
            },
            {
              "docs": undefined,
              "name": "WITHIN_MONTH",
              "value": "WITHIN_MONTH",
            },
          ],
        },
        "WorkStatementScaleEnum": {
          "docs": "Defines the scale at which the amount is paid. For example, enter 'hourly' to define the amount per hour. This field can be excluded when creating a Pay-as-you-go task-based or Milestone contracts.",
          "enum": [
            {
              "docs": undefined,
              "name": "hourly",
              "value": "hourly",
            },
            {
              "docs": undefined,
              "name": "daily",
              "value": "daily",
            },
            {
              "docs": undefined,
              "name": "weekly",
              "value": "weekly",
            },
            {
              "docs": undefined,
              "name": "monthly",
              "value": "monthly",
            },
            {
              "docs": undefined,
              "name": "biweekly",
              "value": "biweekly",
            },
            {
              "docs": undefined,
              "name": "semimonthly",
              "value": "semimonthly",
            },
            {
              "docs": undefined,
              "name": "custom",
              "value": "custom",
            },
          ],
        },
        "WorkStatementScaleEnumOptional": {
          "docs": "Defines the scale at which the amount is paid. For example, enter 'hourly' to define the amount per hour. This field can be excluded when creating a Pay-as-you-go task-based or Milestone contracts.",
          "enum": [
            {
              "docs": undefined,
              "name": "hourly",
              "value": "hourly",
            },
            {
              "docs": undefined,
              "name": "daily",
              "value": "daily",
            },
            {
              "docs": undefined,
              "name": "weekly",
              "value": "weekly",
            },
            {
              "docs": undefined,
              "name": "monthly",
              "value": "monthly",
            },
            {
              "docs": undefined,
              "name": "biweekly",
              "value": "biweekly",
            },
            {
              "docs": undefined,
              "name": "semimonthly",
              "value": "semimonthly",
            },
            {
              "docs": undefined,
              "name": "custom",
              "value": "custom",
            },
          ],
        },
        "WorkerEmailType": {
          "docs": "Worker's email address.",
          "type": "string",
        },
        "WorkerLegalEntity": {
          "docs": undefined,
          "properties": {
            "personal_name": {
              "docs": undefined,
              "type": "string",
            },
            "registration_number": {
              "docs": undefined,
              "type": "string",
            },
            "type": {
              "docs": undefined,
              "type": "LegalEntityType",
            },
          },
        },
        "WorkerOfBasicContract": {
          "docs": undefined,
          "properties": {
            "alternate_email": {
              "docs": undefined,
              "type": "optional<AlternateEmailList>",
            },
            "email": {
              "docs": undefined,
              "type": "optional<EmailType>",
            },
            "full_name": {
              "docs": "<span style="white-space: nowrap">\`non-empty\`</span>",
              "type": "string",
            },
            "id": {
              "docs": undefined,
              "type": "long",
            },
            "image": {
              "docs": undefined,
              "type": "optional<UrlType>",
            },
          },
        },
        "WorkerOfContract": {
          "docs": undefined,
          "properties": {
            "alternate_email": {
              "docs": undefined,
              "type": "optional<AlternateEmailList>",
            },
            "date_of_birth": {
              "docs": undefined,
              "type": "optional<DateTimeString>",
            },
            "email": {
              "docs": undefined,
              "type": "optional<EmailType>",
            },
            "expected_email": {
              "docs": undefined,
              "type": "optional<WorkerEmailType>",
            },
            "first_name": {
              "docs": "Worker's first name",
              "type": "optional<string>",
            },
            "full_name": {
              "docs": "Worker's full name. <span style="white-space: nowrap">\`non-empty\`</span> ",
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<long>",
            },
            "image": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "last_name": {
              "docs": "Worker's last name",
              "type": "optional<string>",
            },
            "legal_entity": {
              "docs": undefined,
              "type": "optional<WorkerLegalEntity>",
            },
            "nationality": {
              "docs": "Worker's nationality.",
              "type": "optional<string>",
            },
          },
        },
      },
    },
    "accounting.yml": {
      "docs": "End-points to retrieve paid invoices and reciepts.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Accounting",
        "endpoints": {
          "GetPaymentsBreakDownById": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Retrieve a payment breakdown",
            "docs": "Get a full breakdown of a payment made to Deel. Breakdown will include individual invoices and Deel fee as line items.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/payments/{payment_id}/breakdown",
            "path-parameters": {
              "payment_id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.PaymentBreakDownContainer",
            },
          },
          "getBillingInvoiceDownloadLink": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Download Deel invoice PDF",
            "docs": "Get a link to download the Deel billing invoice PDF.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/billing/{invoice_id}/download",
            "path-parameters": {
              "invoice_id": {
                "docs": "ID of an existing invoice",
                "type": "long",
              },
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.InvoiceDownloadContainer",
            },
          },
          "getInvoiceDownloadLink": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Download invoice PDF",
            "docs": "Get link to download the invoice PDF.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/invoices/{invoice_id}/download",
            "path-parameters": {
              "invoice_id": {
                "docs": "ID of an existing invoice",
                "type": "long",
              },
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.InvoiceDownloadContainer",
            },
          },
          "getInvoiceList": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Retrieve invoices",
            "docs": "Retrieve a list of paid invoices for your workforce.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/invoices",
            "request": {
              "name": "GetInvoiceListRequest",
              "query-parameters": {
                "entities": {
                  "allow-multiple": true,
                  "docs": "Filter by legal entity type; company, or individual",
                  "type": "optional<root.LegalEntityType>",
                },
                "issued_from_date": {
                  "allow-multiple": undefined,
                  "docs": "to get records created after given issue date",
                  "type": "optional<string>",
                },
                "issued_to_date": {
                  "allow-multiple": undefined,
                  "docs": "to get records created before given issued date",
                  "type": "optional<string>",
                },
                "statuses": {
                  "allow-multiple": true,
                  "docs": "statuses of invoices to filter",
                  "type": "optional<root.InvoiceStatusEnum>",
                },
              },
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.InvoiceListContainer",
            },
          },
          "getPaymentList": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Retrieve payment reciepts",
            "docs": "Retrieve a list of payments made to Deel.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/payments",
            "request": {
              "name": "GetPaymentListRequest",
              "query-parameters": {
                "currencies": {
                  "allow-multiple": true,
                  "docs": "Currency codes of contracts to filter.",
                  "type": "optional<root.CurrencyCodeRequired>",
                },
                "date_from": {
                  "allow-multiple": undefined,
                  "docs": "Filtered results will include records created on or after the provided date.",
                  "type": "optional<root.DateString>",
                },
                "date_to": {
                  "allow-multiple": undefined,
                  "docs": "Filtered results will include records created before the provided date.",
                  "type": "optional<root.DateString>",
                },
                "entities": {
                  "allow-multiple": true,
                  "docs": "Filter by legal entity type; company, or individual",
                  "type": "optional<root.LegalEntityType>",
                },
                "statuses": {
                  "allow-multiple": true,
                  "docs": "statuses of payments to filter",
                  "type": "optional<root.PaymentStatusEnum>",
                },
              },
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.PaymentListContainer",
            },
          },
        },
      },
    },
    "attachments.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "createFileRef": {
            "auth": true,
            "display-name": "Upload file to Deel",
            "docs": "Upload file to Deel storage to use the file attachment feature for other endpoints.",
            "errors": [
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/attachments",
            "request": {
              "body": {
                "properties": {
                  "data": {
                    "docs": undefined,
                    "type": "root.InputToCreateFileRefData",
                  },
                },
              },
              "headers": undefined,
              "name": "InputToCreateFileRef",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.OutputToCreateFileRefContainer",
            },
          },
        },
      },
    },
    "contract.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "getPeople": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Get my current profile",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/people/me",
            "response": {
              "docs": "Successful operation.",
              "type": "root.PeopleMeContainer",
            },
          },
          "getPeopleList": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Get people list",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/people",
            "request": {
              "name": "GetPeopleListRequest",
              "query-parameters": {
                "limit": {
                  "allow-multiple": undefined,
                  "docs": "Return a page of results with given number of records.",
                  "type": "optional<double>",
                },
                "offset": {
                  "allow-multiple": undefined,
                  "docs": "Return a page of results with given number of records.",
                  "type": "optional<long>",
                },
              },
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.PeopleContainer",
            },
          },
        },
      },
    },
    "contractors.yml": {
      "docs": "The Contracts resource lets you create, amend and, retrieve Deel contracts.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Contractors",
        "endpoints": {
          "addPremium": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Upgrade to Premium",
            "docs": "Add additional protection against misclassification by upgrading to Deel Premium.",
            "errors": [
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/contracts/{contract_id}/premium",
            "path-parameters": {
              "contract_id": {
                "docs": "Deel contract id.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "data": {
                    "docs": undefined,
                    "type": "root.PremiumToAdd",
                  },
                },
              },
              "headers": undefined,
              "name": "PremiumToAddContainer",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.PremiumResultAddedContainer",
            },
          },
          "amendContractDetails": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Amend contract",
            "docs": "Amend payment details of a contract.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/contracts/{contract_id}/amendments",
            "path-parameters": {
              "contract_id": {
                "docs": "Deel contract id.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "data": {
                    "docs": undefined,
                    "type": "root.ContractDetailsToAmend",
                  },
                },
              },
              "headers": undefined,
              "name": "ContractToAmendDetailsContainer",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.GenericResultCreated",
            },
          },
          "createContract": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Create a new contract",
            "docs": "Create a new Deel contract.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/contracts",
            "request": {
              "body": {
                "properties": {
                  "data": {
                    "docs": undefined,
                    "type": "root.ContractToCreate",
                  },
                },
              },
              "headers": undefined,
              "name": "ContractToCreateContainer",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.ContractContainer",
            },
          },
          "createContractFixedRate": {
            "auth": true,
            "display-name": "Create a new contract (fixed-rate)",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/contracts/fixed-rate",
            "request": {
              "body": {
                "properties": {
                  "data": {
                    "docs": undefined,
                    "type": "root.ContractToCreateOngoingTimeBased",
                  },
                },
              },
              "headers": undefined,
              "name": "ContractToCreateContainerOngoingTimeBased",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.ContractContainerOngoingTimeBased",
            },
          },
          "createContractMilestoneBased": {
            "auth": true,
            "display-name": "Create a new contract (milestone-based)",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/contracts/milestone-based",
            "request": {
              "body": {
                "properties": {
                  "data": {
                    "docs": undefined,
                    "type": "root.ContractToCreatePaygMilestones",
                  },
                },
              },
              "headers": undefined,
              "name": "ContractToCreateContainerPaygMilestones",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.ContractContainerPaygMilestones",
            },
          },
          "createContractTaskBased": {
            "auth": true,
            "display-name": "Create a new contract (task-based)",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/contracts/task-based",
            "request": {
              "body": {
                "properties": {
                  "data": {
                    "docs": undefined,
                    "type": "root.ContractToCreatePaygTasks",
                  },
                },
              },
              "headers": undefined,
              "name": "ContractToCreateContainerPaygTasks",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.ContractContainerPaygTasks",
            },
          },
          "createContractTimeBased": {
            "auth": true,
            "display-name": "Create a new contract (time-based)",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/contracts/time-based",
            "request": {
              "body": {
                "properties": {
                  "data": {
                    "docs": undefined,
                    "type": "root.ContractToCreatePayAsYouGoTimeBased",
                  },
                },
              },
              "headers": undefined,
              "name": "ContractToCreateContainerPayAsYouGoTimeBased",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.ContractContainerPayAsYouGoTimeBased",
            },
          },
          "getContractPreview": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Preview a contract agreement",
            "docs": "Retrieve an IC contract agreement content in HTML. If no template is specified, the default or currently assigned template will be used. This endpoint does not support EOR and Global Payroll contract types.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/contracts/{contract_id}/preview",
            "path-parameters": {
              "contract_id": {
                "docs": "Deel contract id.",
                "type": "string",
              },
            },
            "request": {
              "name": "GetContractPreviewRequest",
              "query-parameters": {
                "templateId": {
                  "allow-multiple": undefined,
                  "docs": "ID of an existing contract template.",
                  "type": "optional<string>",
                },
              },
            },
          },
          "removePremiumFromContract": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Downgrade from Premium",
            "docs": "Remove Deel Premium from an existing contract.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "DELETE",
            "path": "/contracts/{contract_id}/premium",
            "path-parameters": {
              "contract_id": {
                "docs": "Deel contract id.",
                "type": "string",
              },
            },
            "request": {
              "name": "RemovePremiumFromContractRequest",
              "query-parameters": {
                "reason": {
                  "allow-multiple": undefined,
                  "docs": "Reason for deleting an existing Deel Premium from a contract.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.GenericResultDeleted",
            },
          },
          "terminateContract": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Terminate contract",
            "docs": "Terminate an active contract.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/contracts/{contract_id}/terminations",
            "path-parameters": {
              "contract_id": {
                "docs": "Deel contract id.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "data": {
                    "docs": undefined,
                    "type": "root.ContractToTerminate",
                  },
                },
              },
              "headers": undefined,
              "name": "ContractToTerminateContainer",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.ContractTerminationResultContainer",
            },
          },
        },
      },
    },
    "contracts.yml": {
      "docs": "The Contracts resource lets you create, amend and, retrieve Deel contracts.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Contracts",
        "endpoints": {
          "addContractDocument": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Add documents",
            "docs": "Attach document to a contract. You can only add one document at a time. If you need to attach more documents please attach a Zip file.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/contracts/{contract_id}/documents",
            "path-parameters": {
              "contract_id": {
                "docs": "Deel contract id.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "file": "file",
                },
              },
              "headers": undefined,
              "name": "AddContractDocumentRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.ContractDocumentContainer",
            },
          },
          "archiveContract": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Archive a contract",
            "docs": "Archive a terminated, cancelled or completed contract.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PATCH",
            "path": "/contracts/{contract_id}/archive",
            "path-parameters": {
              "contract_id": {
                "docs": "Deel contract id.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.GenericResultUpdated",
            },
          },
          "attachExternalId": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "External Id",
            "docs": "Add an external Id to a Deel contract. You can use this to add a Deel contract's refernece Id in your platform. External Id can be passed as a query parameter in List contract endpoint to find this conract later.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "PATCH",
            "path": "/contracts/{contract_id}",
            "path-parameters": {
              "contract_id": {
                "docs": "Deel contract id.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "data": {
                    "docs": undefined,
                    "type": "root.ContractExternalIdToPatch",
                  },
                },
              },
              "headers": undefined,
              "name": "InputToPatchContractExternalId",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.GenericResultCreated",
            },
          },
          "calculateFinalPayment": {
            "auth": true,
            "display-name": "Calculate final payment",
            "docs": "Calculate the final payment due to the contractor when ending the contract.",
            "errors": [
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/contracts/{contract_id}/final-payments",
            "path-parameters": {
              "contract_id": {
                "docs": "Deel contract id.",
                "type": "string",
              },
            },
            "request": {
              "name": "CalculateFinalPaymentRequest",
              "query-parameters": {
                "calculation_type": {
                  "allow-multiple": undefined,
                  "docs": "The days to calculate.",
                  "type": "optional<root.CalculateFinalPaymentRequestCalculationType>",
                },
                "end_date": {
                  "allow-multiple": undefined,
                  "docs": "The day to end the contract.",
                  "type": "optional<root.DateString>",
                },
                "workweek_end": {
                  "allow-multiple": undefined,
                  "docs": "The day the work week ends, 0 to 6",
                  "type": "optional<string>",
                },
                "workweek_start": {
                  "allow-multiple": undefined,
                  "docs": "The day the work week starts, 0 to 6",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.FinalPaymentCalculatedContainer",
            },
          },
          "editContractDocument": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Edit the file attached to contract document.",
            "docs": "Overwrite the file currently attached to contract document.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/contracts/{contract_id}/documents",
            "path-parameters": {
              "contract_id": {
                "docs": "Deel contract id.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "file": "file",
                },
              },
              "headers": undefined,
              "name": "EditContractDocumentRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.ContractDocumentContainer",
            },
          },
          "getAlternateEmailsByContractId": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Find contract emails by ID",
            "docs": "Returns an array of alternate email objects",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/contracts/{contract_id}/alternate_emails",
            "path-parameters": {
              "contract_id": {
                "docs": "Deel contract id.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.AlternateEmailList",
            },
          },
          "getContractById": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Retrieve a single contract",
            "docs": "Retrieve a single contract.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/contracts/{contract_id}",
            "path-parameters": {
              "contract_id": {
                "docs": "Deel contract id.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.ContractContainer",
            },
          },
          "getContractList": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "List of contracts",
            "docs": "Retrieve a list of contracts.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/contracts",
            "request": {
              "name": "GetContractListRequest",
              "query-parameters": {
                "after_cursor": {
                  "allow-multiple": undefined,
                  "docs": "Return next page of results after given cursor.",
                  "type": "optional<string>",
                },
                "countries": {
                  "allow-multiple": true,
                  "docs": "Country codes of contracts to filter.",
                  "type": "optional<root.CountryCode>",
                },
                "currencies": {
                  "allow-multiple": true,
                  "docs": "Currency codes of contracts to filter.",
                  "type": "optional<root.CurrencyCodeRequired>",
                },
                "external_id": {
                  "allow-multiple": undefined,
                  "docs": "Filter contracts for given external ID",
                  "type": "optional<string>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": "Return a page of results with given number of records.",
                  "type": "optional<double>",
                },
                "order_direction": {
                  "allow-multiple": undefined,
                  "docs": "Order direction of results; ascending or descending.",
                  "type": "optional<root.SortDirEnum>",
                },
                "search": {
                  "allow-multiple": undefined,
                  "docs": "Include a contract if by name or contractor name contains given search term.",
                  "type": "optional<string>",
                },
                "sort_by": {
                  "allow-multiple": undefined,
                  "docs": "Sort contracts by given field name.",
                  "type": "optional<root.ContractsSortByEnum>",
                },
                "statuses": {
                  "allow-multiple": true,
                  "docs": "You can filter contracts by current status, a contract is included in results if its status is in this list.",
                  "type": "optional<root.ContractStatusEnum>",
                },
                "team_id": {
                  "allow-multiple": undefined,
                  "docs": "Filter contracts for given team ID; NOTE: technically ALL query parameters are strings or array of strings",
                  "type": "optional<double>",
                },
                "types": {
                  "allow-multiple": true,
                  "docs": "You can filter contracts by type, a contract is included in results if its type is in this list.",
                  "type": "optional<root.ContractTypeEnum>",
                },
              },
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.ContractListContainer",
            },
          },
          "getContractTemplates": {
            "auth": true,
            "display-name": "Get contract templates",
            "docs": "Retrieve a list of contract templates in your organization.",
            "errors": [
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/contract-templates",
            "response": {
              "docs": "Successful operation.",
              "type": "root.ContractTemplateListContainer",
            },
          },
          "inviteToSignContract": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Send contract to worker",
            "docs": "Invite a worker to sign the contract. Worker will be notified via email.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/contracts/{contract_id}/invitations",
            "path-parameters": {
              "contract_id": {
                "docs": "Deel contract id.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "data": {
                    "docs": undefined,
                    "type": "root.ContractInvitationToCreate",
                  },
                },
              },
              "headers": undefined,
              "name": "ContractInvitationToCreateContainer",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.GenericResultCreated",
            },
          },
          "postContractEstimate": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Calculate first payment amount",
            "docs": "First payment is calculated from the number of working/calendar days between their start date and the start of the payment cycle.",
            "errors": [
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/contracts/estimate",
            "request": {
              "body": {
                "properties": {
                  "data": {
                    "docs": undefined,
                    "type": "root.EstimateFirstPayment",
                  },
                },
              },
              "headers": undefined,
              "name": "EstimateFirstPaymentContainer",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.ResponseEstimateFirstPaymentContainer",
            },
          },
          "signContract": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Sign a contract",
            "docs": "Sign a contract as a client.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/contracts/{contract_id}/signatures",
            "path-parameters": {
              "contract_id": {
                "docs": "Deel contract id.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "data": {
                    "docs": undefined,
                    "type": "root.ContractSignatureToCreate",
                  },
                },
              },
              "headers": undefined,
              "name": "ContractSignatureToCreateContainer",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.GenericResultCreated",
            },
          },
          "uninviteToSignContract": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Remove invite",
            "docs": "Remove invite in order to re-invite a worker to sign the contract.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "DELETE",
            "path": "/contracts/{contract_id}/invitations",
            "path-parameters": {
              "contract_id": {
                "docs": "Deel contract id.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.GenericResultDeleted",
            },
          },
        },
      },
    },
    "eor.yml": {
      "docs": "Employee of Record (EOR).",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "EOR",
        "endpoints": {
          "createEorContract": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Create an EOR contract",
            "docs": "Create an Employee of Record (EOR) contract quote. The endpoints creates a contract quote request. Deel will process the information and get back with a quote for this contract.",
            "errors": [
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/eor",
            "request": {
              "body": {
                "properties": {
                  "data": {
                    "docs": undefined,
                    "type": "root.EorContractToCreate",
                  },
                },
              },
              "headers": undefined,
              "name": "EorContractToCreateContainer",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.EorContractCreatedContainer",
            },
          },
          "getEorCountryValidations": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Retrieve country guide",
            "docs": "Retrieve the hiring guide data for a country. This data can be used to create Employee of Record (EOR) contract quotes.",
            "errors": [
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/eor/validations/{country_code}",
            "path-parameters": {
              "country_code": {
                "docs": "Country code.",
                "type": "root.CountryCode",
              },
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.EorCountryValidationsContainer",
            },
          },
        },
      },
    },
    "hris.yml": {
      "docs": "API end-points related to HRIS data.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Hris",
        "endpoints": {
          "createDirectEmployee": {
            "audiences": [
              "external",
            ],
            "auth": false,
            "display-name": "Create a new Hris direct employee",
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.ConflictError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/hris/direct-employees",
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.HrisDirectEmployee",
              },
            },
            "response": {
              "docs": "Hris direct employee object that was created or edited",
              "type": "root.HrisDirectEmployeeContainer",
            },
          },
        },
      },
    },
    "invoices.yml": {
      "docs": "The Invoices resource lets you create, amend and retrieve invoices related to Deel contracts.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Invoices",
        "endpoints": {
          "createInvoiceAdjustment": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Create an invoice adjustment",
            "docs": "Create an invoice adjustment using this endpoint. For example, you can add a bonus, commission, VAT %, deduction etc. to an invoice.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/invoice-adjustments",
            "request": {
              "body": {
                "properties": {},
              },
              "headers": undefined,
              "name": "InvoiceAdjustmentToCreateWithFile",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.InvoiceAdjustmentCreatedContainer",
            },
          },
          "createInvoiceAdjustmentReview": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Review an invoice adjustment",
            "docs": "Review an invoice adjustment to approve or decline it.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/invoice-adjustments/{invoice_adjustment_id}/reviews",
            "path-parameters": {
              "invoice_adjustment_id": {
                "docs": "ID of an existing invoice adjustment",
                "type": "double",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "data": {
                    "docs": undefined,
                    "type": "root.InvoiceAdjustmentReviewToCreate",
                  },
                },
              },
              "headers": undefined,
              "name": "InvoiceAdjustmentReviewToCreateContainer",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.GenericResultCreated",
            },
          },
          "createInvoiceAdjustmentReviews": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Bulk review invoice adjustments",
            "docs": "Review multiple invoice adjustments to approve or decline a batch.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/invoice-adjustments/many/reviews",
            "request": {
              "body": {
                "properties": {
                  "data": {
                    "docs": undefined,
                    "type": "root.InvoiceAdjustmentReviewsToCreate",
                  },
                },
              },
              "headers": undefined,
              "name": "InvoiceAdjustmentReviewsToCreateContainer",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.GenericResultCreated",
            },
          },
          "deleteInvoiceAdjustmentById": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Delete an invoice adjustment",
            "docs": "Update an existing invoice adjustment.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "DELETE",
            "path": "/invoice-adjustments/{invoice_adjustment_id}",
            "path-parameters": {
              "invoice_adjustment_id": {
                "docs": "ID of an existing invoice adjustment",
                "type": "double",
              },
            },
            "request": {
              "name": "DeleteInvoiceAdjustmentByIdRequest",
              "query-parameters": {
                "reason": {
                  "allow-multiple": undefined,
                  "docs": "Reason for deleting an existing invoice adjustment",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.GenericResultDeleted",
            },
          },
          "getInvoiceAdjustments": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "List of invoice details",
            "docs": "Retrieve a list of invoice details. You can filter the list by providing additional paramters e.g. contract_id, contract_type etc.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/invoice-adjustments",
            "request": {
              "name": "GetInvoiceAdjustmentsRequest",
              "query-parameters": {
                "contract_id": {
                  "allow-multiple": undefined,
                  "docs": "Id of an Deel contract.",
                  "type": "optional<string>",
                },
                "contract_types": {
                  "allow-multiple": true,
                  "docs": "types of contracts to filter",
                  "type": "optional<root.ContractTypeEnum>",
                },
                "date_from": {
                  "allow-multiple": undefined,
                  "docs": "to get invoice adjustments submitted on or after given start date (inclusive)",
                  "type": "optional<root.DateString>",
                },
                "date_to": {
                  "allow-multiple": undefined,
                  "docs": "to get invoice adjustments submitted before given end date (excludes records submitted on this date)",
                  "type": "optional<root.DateString>",
                },
                "invoice_id": {
                  "allow-multiple": undefined,
                  "docs": "ID of an existing invoice; NOTE: technically ALL query parameters are strings or array of strings",
                  "type": "optional<long>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": "Return a page of results with given number of records; NOTE: technically ALL query parameters are strings or array of strings",
                  "type": "optional<double>",
                },
                "offset": {
                  "allow-multiple": undefined,
                  "docs": "Return a page of results after given index of row; NOTE: technically ALL query parameters are strings or array of strings",
                  "type": "optional<long>",
                },
                "reporter_id": {
                  "allow-multiple": undefined,
                  "docs": "ID of an existing profile; NOTE: technically ALL query parameters are strings or array of strings",
                  "type": "optional<double>",
                },
                "statuses": {
                  "allow-multiple": true,
                  "docs": "statuses of invoice adjustment to filter",
                  "type": "optional<root.InvoiceAdjustmentStatusEnum>",
                },
                "types": {
                  "allow-multiple": true,
                  "docs": "types of invoice adjustments to filter",
                  "type": "optional<root.InvoiceAdjustmentTypeEnum>",
                },
              },
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.InvoiceAdjustmentListContainer",
            },
          },
          "getInvoiceAdjustmentsByContractId": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Invoice details by contract",
            "docs": "Retrieve a list of invoice details for the given contract id.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/contracts/{contract_id}/invoice-adjustments",
            "path-parameters": {
              "contract_id": {
                "docs": "Deel contract id.",
                "type": "string",
              },
            },
            "request": {
              "name": "GetInvoiceAdjustmentsByContractIdRequest",
              "query-parameters": {
                "contract_types": {
                  "allow-multiple": true,
                  "docs": "types of contracts to filter",
                  "type": "optional<root.ContractTypeEnum>",
                },
                "date_from": {
                  "allow-multiple": undefined,
                  "docs": "to get invoice adjustments submitted on or after given start date (inclusive)",
                  "type": "optional<root.DateString>",
                },
                "date_to": {
                  "allow-multiple": undefined,
                  "docs": "to get invoice adjustments submitted before given end date (excludes records submitted on this date)",
                  "type": "optional<root.DateString>",
                },
                "invoice_id": {
                  "allow-multiple": undefined,
                  "docs": "ID of an existing invoice; NOTE: technically ALL query parameters are strings or array of strings",
                  "type": "optional<long>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": "Return a page of results with given number of records; NOTE: technically ALL query parameters are strings or array of strings",
                  "type": "optional<double>",
                },
                "offset": {
                  "allow-multiple": undefined,
                  "docs": "Return a page of results after given index of row; NOTE: technically ALL query parameters are strings or array of strings",
                  "type": "optional<long>",
                },
                "reporter_id": {
                  "allow-multiple": undefined,
                  "docs": "ID of an existing profile; NOTE: technically ALL query parameters are strings or array of strings",
                  "type": "optional<double>",
                },
                "statuses": {
                  "allow-multiple": true,
                  "docs": "statuses of invoice adjustment to filter",
                  "type": "optional<root.InvoiceAdjustmentStatusEnum>",
                },
                "types": {
                  "allow-multiple": true,
                  "docs": "types of invoice adjustments to filter",
                  "type": "optional<root.InvoiceAdjustmentTypeEnum>",
                },
              },
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.InvoiceAdjustmentListContainer",
            },
          },
          "updateInvoiceAdjustmentById": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Update an invoice adjustment",
            "docs": "Update an existing invoice adjustment. It is not possible to update VAT adjustments, we recommend you to delete the existing VAT adjust and create a new one.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "PATCH",
            "path": "/invoice-adjustments/{invoice_adjustment_id}",
            "path-parameters": {
              "invoice_adjustment_id": {
                "docs": "ID of an existing invoice adjustment",
                "type": "double",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "data": {
                    "docs": undefined,
                    "type": "root.InvoiceAdjustmentToUpdate",
                  },
                },
              },
              "headers": undefined,
              "name": "InvoiceAdjustmentToUpdateContainer",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.GenericResultUpdated",
            },
          },
        },
      },
    },
    "lookups.yml": {
      "docs": "Helper end-points for choosing options for other operations",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Lookups",
        "endpoints": {
          "getCountries": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Country list",
            "docs": "Retrieve a list of countries supported by Deel.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/lookups/countries",
            "response": {
              "docs": "Successful operation.",
              "type": "root.CountryListContainer",
            },
          },
          "getCurrencies": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Currency list",
            "docs": "Retrieve the list of currencies used by Deel.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/lookups/currencies",
            "response": {
              "docs": "Successful operation.",
              "type": "root.CurrencyListContainer",
            },
          },
          "getJobTitleList": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Job titles list",
            "docs": "Retrieve a list of pre-defined job titles in Deel platform.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/lookups/job-titles",
            "request": {
              "name": "GetJobTitleListRequest",
              "query-parameters": {
                "after_cursor": {
                  "allow-multiple": undefined,
                  "docs": "Return next page of results after given cursor",
                  "type": "optional<string>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": "Return a page of results with given number of records; NOTE: technically ALL query parameters are strings or array of strings",
                  "type": "optional<long>",
                },
              },
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.JobTitleListContainer",
            },
          },
          "getSeniorityList": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Seniority levels",
            "docs": "Retrieve a list of pre-defined seniority level for roles in Deel platform.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/lookups/seniorities",
            "request": {
              "name": "GetSeniorityListRequest",
              "query-parameters": {
                "limit": {
                  "allow-multiple": undefined,
                  "docs": "Return a page of results with given number of records; NOTE: technically ALL query parameters are strings or array of strings",
                  "type": "optional<long>",
                },
              },
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.SeniorityListContainer",
            },
          },
          "getTimeoffTypeList": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Time-off types",
            "docs": "Retrieve a list of pre-defined time off types to register in Deel platform.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/lookups/time-off-types",
            "response": {
              "docs": "Successful operation.",
              "type": "root.TimeoffTypeListContainer",
            },
          },
        },
      },
    },
    "milestones.yml": {
      "docs": "Helper end-points for managing milestones of Deel contracts",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Milestones",
        "endpoints": {
          "createMilestone": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Create a milestone",
            "docs": "Add a new milestone to contract.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/contracts/{contract_id}/milestones",
            "path-parameters": {
              "contract_id": {
                "docs": "Deel contract id.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {},
              },
              "headers": undefined,
              "name": "MilestoneToCreateFormWithFile",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.GenericResultCreated",
            },
          },
          "createMilestoneReview": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Review a single milestone",
            "docs": "Review a milestone to approve or decline submitted work.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/contracts/{contract_id}/milestones/{milestone_id}/reviews",
            "path-parameters": {
              "contract_id": {
                "docs": "Deel contract id.",
                "type": "string",
              },
              "milestone_id": {
                "docs": "ID of milestone to return",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "data": {
                    "docs": undefined,
                    "type": "root.MilestoneReviewToCreate",
                  },
                },
              },
              "headers": undefined,
              "name": "MilestoneReviewToCreateContainer",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.GenericResultCreated",
            },
          },
          "createMilestoneReviews": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Review multiple milestones",
            "docs": "Review a batch of milestones to approve or reject submitted work.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/contracts/{contract_id}/milestones/many/reviews",
            "path-parameters": {
              "contract_id": {
                "docs": "Deel contract id.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "data": {
                    "docs": undefined,
                    "type": "root.MilestoneReviewsToCreate",
                  },
                },
              },
              "headers": undefined,
              "name": "MilestoneReviewsToCreateContainer",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.GenericResultCreated",
            },
          },
          "deleteMilestoneById": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Delete a milestone",
            "docs": "Delete a single milestone from a contract.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "DELETE",
            "path": "/contracts/{contract_id}/milestones/{milestone_id}",
            "path-parameters": {
              "contract_id": {
                "docs": "Deel contract id.",
                "type": "string",
              },
              "milestone_id": {
                "docs": "ID of milestone to return",
                "type": "string",
              },
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.GenericResultDeleted",
            },
          },
          "getMilestonesByContract": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "List of milestones by contract",
            "docs": "Retrieve a list of milestones found for a contract.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/contracts/{contract_id}/milestones",
            "path-parameters": {
              "contract_id": {
                "docs": "Deel contract id.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.MilestoneListContainer",
            },
          },
          "getMilestonesByContractAndId": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Retrieve a single milestone",
            "docs": "Retrieve a single milestone.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/contracts/{contract_id}/milestones/{milestone_id}",
            "path-parameters": {
              "contract_id": {
                "docs": "Deel contract id.",
                "type": "string",
              },
              "milestone_id": {
                "docs": "ID of milestone to return",
                "type": "string",
              },
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.MilestoneContainer",
            },
          },
        },
      },
    },
    "offCyclePayments.yml": {
      "docs": "End-points to manage off-cycle payments for a given contract",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Off-cycle Payments",
        "endpoints": {
          "createOffCyclePayment": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Add off-cycle payment",
            "docs": "Add a new invoice line-item for the purpose of off-cycle payment for a given contract.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/contracts/{contract_id}/off-cycle-payments",
            "path-parameters": {
              "contract_id": {
                "docs": "Deel contract id.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "data": {
                    "docs": undefined,
                    "type": "root.OffCyclePaymentToCreate",
                  },
                },
              },
              "headers": undefined,
              "name": "OffCyclePaymentToCreateContainer",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.GenericResultCreated",
            },
          },
          "getOffCyclePaymentByContractAndId": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Retrieve a single off-cycle payment",
            "docs": "Retrieve a single off-cycle payment.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/contracts/{contract_id}/off-cycle-payments/{offcycle_payment_id}",
            "path-parameters": {
              "contract_id": {
                "docs": "Deel contract id.",
                "type": "string",
              },
              "offcycle_payment_id": {
                "docs": "ID of off-cycle payment to return",
                "type": "string",
              },
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.OffCyclePaymentContainer",
            },
          },
          "getOffCyclePaymentsByContract": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "List of off-cycle payments",
            "docs": "Retrieve a list of off-cycle payments for the given contract id.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/contracts/{contract_id}/off-cycle-payments",
            "path-parameters": {
              "contract_id": {
                "docs": "Deel contract id.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.OffCyclePaymentListContainer",
            },
          },
        },
      },
    },
    "organizations.yml": {
      "docs": "Helper end-points for additional information about your organizations",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Organizations",
        "endpoints": {
          "getAgreements": {
            "auth": true,
            "display-name": "Get agreements with Deel.",
            "docs": "This end-point returns a list of your agreements with Deel.",
            "errors": [
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/agreements",
            "request": {
              "name": "GetAgreementsRequest",
              "query-parameters": {
                "contract_id": {
                  "allow-multiple": undefined,
                  "docs": "Deel contract id.",
                  "type": "optional<string>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": "Maximum number of records to return.",
                  "type": "optional<root.AgreementsParamLimit>",
                },
                "offset": {
                  "allow-multiple": undefined,
                  "docs": "Offset/index of record for the next page of records to return.",
                  "type": "optional<root.AgreementsParamOffset>",
                },
              },
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.AgreementListContainer",
            },
          },
          "getLegalEntityList": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "List of legal entities",
            "docs": "Retrieve a list of legal entities in your account.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/legal-entities",
            "response": {
              "docs": "Successful operation.",
              "type": "root.LegalEntityListContainer",
            },
          },
          "getOrganizations": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Get current organization",
            "docs": "Retrieve the current organization details. Organization is automatically detected from the auth token.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/organizations",
            "response": {
              "docs": "Successful operation.",
              "type": "root.OrganizationListContainer",
            },
          },
          "getTeams": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Get team list",
            "docs": "Retrieve a list of teams in your organization.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/teams",
            "response": {
              "docs": "Successful operation.",
              "type": "root.TeamListContainer",
            },
          },
        },
      },
    },
    "tasks.yml": {
      "docs": "End-points to manage tasks for a given contract",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Tasks",
        "endpoints": {
          "createContractPgoTak": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Create new task",
            "docs": "Create a new task for the contractor.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/contracts/{contract_id}/tasks",
            "path-parameters": {
              "contract_id": {
                "docs": "Deel contract id.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "data": {
                    "docs": undefined,
                    "type": "root.PgoTaskToCreate",
                  },
                },
              },
              "headers": undefined,
              "name": "InputToCreatePgoTask",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.GenericResultCreated",
            },
          },
          "createTaskManyReview": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Review multiple tasks",
            "docs": "Review multiple tasks to approve or decline the submitted work.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/contracts/{contract_id}/tasks/many/reviews",
            "path-parameters": {
              "contract_id": {
                "docs": "Deel contract id.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "data": {
                    "docs": undefined,
                    "type": "root.PgoTaskReviewsToCreate",
                  },
                },
              },
              "headers": undefined,
              "name": "RequestBodyToCreatePgoTaskReviewsReviewsContainer",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.TaskListContainer",
            },
          },
          "createTaskReviewById": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Review a single task",
            "docs": "Review a single task to approve or decline the submitted work.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/contracts/{contract_id}/tasks/{task_id}/reviews",
            "path-parameters": {
              "contract_id": {
                "docs": "Deel contract id.",
                "type": "string",
              },
              "task_id": {
                "docs": "ID of task entity.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "data": {
                    "docs": undefined,
                    "type": "root.PgoTaskReviewsByIdToCreate",
                  },
                },
              },
              "headers": undefined,
              "name": "RequestBodyToCreatePgoTaskReviewsByIdReviewsContainer",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.TaskListContainer",
            },
          },
          "deleteContractPgoTak": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Delete task",
            "docs": "Delete task from the contract.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "DELETE",
            "path": "/contracts/{contract_id}/tasks/{task_id}",
            "path-parameters": {
              "contract_id": {
                "docs": "Deel contract id.",
                "type": "string",
              },
              "task_id": {
                "docs": "ID of task entity.",
                "type": "string",
              },
            },
            "request": {
              "name": "DeleteContractPgoTakRequest",
              "query-parameters": {
                "reason": {
                  "allow-multiple": undefined,
                  "docs": "Reason for deleting an existing task",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.GenericResultDeleted",
            },
          },
          "getTasksByContract": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "List of tasks",
            "docs": "Retrieve a list of tasks for a given contract.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/contracts/{contract_id}/tasks",
            "path-parameters": {
              "contract_id": {
                "docs": "Deel contract id.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.TaskListContainer",
            },
          },
        },
      },
    },
    "timeOff.yml": {
      "docs": "Manage time off requests.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Time Off",
        "endpoints": {
          "createEorTimeOffs": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Add a time off request",
            "docs": "Add a time off request for a full-time employee.",
            "errors": [
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/contracts/{contract_id}/time-offs",
            "path-parameters": {
              "contract_id": {
                "docs": "Deel contract id.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.CreateTimeoffContainer",
              },
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.EorTimeoffsItemContainer",
            },
          },
          "deleteEorTimeOffs": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Cancel a time off request",
            "docs": "Cancel a time off request for an employee.",
            "errors": [
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "DELETE",
            "path": "/contracts/{contract_id}/time-offs/{timeoff_id}",
            "path-parameters": {
              "contract_id": {
                "docs": "Deel contract id.",
                "type": "string",
              },
              "timeoff_id": {
                "docs": "Time off Id",
                "type": "string",
              },
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.GenericResultDeleted",
            },
          },
          "editEorTimeOffs": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Edit a time off request",
            "docs": "Edit a time off request for a full-time employee.",
            "errors": [
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/contracts/{contract_id}/time-offs/{timeoff_id}",
            "path-parameters": {
              "contract_id": {
                "docs": "Deel contract id.",
                "type": "string",
              },
              "timeoff_id": {
                "docs": "Time off Id",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.CreateTimeoffContainer",
              },
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.EorTimeoffsItemContainer",
            },
          },
          "getEorClientTimeOffs": {
            "audiences": [
              "external",
            ],
            "auth": false,
            "display-name": "List of time offs",
            "docs": "List of time offs for all employees in your organization.",
            "errors": [
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/time-offs",
            "response": {
              "docs": "successful operation",
              "type": "root.EorClientTimeoffsContainer",
            },
          },
          "getEorEntitlements": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "List time off entitlements",
            "docs": "Retrieve a list of time off entitlements for a full-time employee.",
            "errors": [
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/contracts/{contract_id}/entitlements",
            "path-parameters": {
              "contract_id": {
                "docs": "Deel contract id.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.EorEntitlementsContainer",
            },
          },
          "getEorTimeOffs": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "List time off by contract",
            "docs": "Retrieve the list of time off requests by an employee.",
            "errors": [
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/contracts/{contract_id}/time-offs",
            "path-parameters": {
              "contract_id": {
                "docs": "Deel contract id.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.EorTimeoffsContainer",
            },
          },
          "reviewTimeoff": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Review a time off request",
            "docs": "Approve or decline an employee's time off request.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "PATCH",
            "path": "/time-offs/{timeoff_id}/review",
            "path-parameters": {
              "timeoff_id": {
                "docs": "Time off Id",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "data": {
                    "docs": undefined,
                    "type": "root.TimeoffReview",
                  },
                },
              },
              "headers": undefined,
              "name": "TimeoffToReviewContainer",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.GenericResultUpdated",
            },
          },
        },
      },
    },
    "timesheets.yml": {
      "docs": "The Invoices resource lets you create, amend and retrieve timesheets of Deel contracts.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Timesheets",
        "endpoints": {
          "createTimesheet": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Create a timesheet entry",
            "docs": "Submit work for a contractor.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/timesheets",
            "request": {
              "body": {
                "properties": {},
              },
              "headers": undefined,
              "name": "CreateTimesheetRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.InvoiceAdjustmentCreatedContainer",
            },
          },
          "createTimesheetReview": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Review a single timesheet",
            "docs": "Review a timesheet to approve or decline submitted work.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/timesheets/{timesheet_id}/reviews",
            "path-parameters": {
              "timesheet_id": {
                "docs": "ID of an existing timesheet",
                "type": "long",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "data": {
                    "docs": undefined,
                    "type": "root.TimesheetReviewToCreate",
                  },
                },
              },
              "headers": undefined,
              "name": "TimesheetReviewToCreateContainer",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.GenericResultCreated",
            },
          },
          "createTimesheetReviews": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Review multiple timesheets",
            "docs": "Review a batch of timesheets to approve or reject submitted work.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/timesheets/many/reviews",
            "request": {
              "body": {
                "properties": {
                  "data": {
                    "docs": undefined,
                    "type": "root.TimesheetReviewsToCreate",
                  },
                },
              },
              "headers": undefined,
              "name": "TimesheetReviewsToCreateContainer",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.GenericResultCreated",
            },
          },
          "deleteTimesheetById": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Delete a timesheet entry",
            "docs": "Delete a single timesheet entry.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "DELETE",
            "path": "/timesheets/{timesheet_id}",
            "path-parameters": {
              "timesheet_id": {
                "docs": "ID of an existing timesheet",
                "type": "long",
              },
            },
            "request": {
              "name": "DeleteTimesheetByIdRequest",
              "query-parameters": {
                "reason": {
                  "allow-multiple": undefined,
                  "docs": "Reason for deleting an existing timesheet",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.GenericResultDeleted",
            },
          },
          "getTimesheetById": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Retrieve a single timesheet entry",
            "docs": "Retrieve a single timesheet entry by Id.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/timesheets/{timesheet_id}",
            "path-parameters": {
              "timesheet_id": {
                "docs": "ID of an existing timesheet",
                "type": "long",
              },
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.TimesheetContainer",
            },
          },
          "getTimesheets": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "List of timesheets",
            "docs": "Retrieve a list of timesheets in your Deel account. You can filter the list by providing additional paramters e.g. contract_id, contract_type etc.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/timesheets",
            "request": {
              "name": "GetTimesheetsRequest",
              "query-parameters": {
                "contract_id": {
                  "allow-multiple": undefined,
                  "docs": "Id of a Deel contract.",
                  "type": "optional<string>",
                },
                "contract_types": {
                  "allow-multiple": true,
                  "docs": "Types of contracts to filter.",
                  "type": "optional<root.ContractTypeEnum>",
                },
                "date_from": {
                  "allow-multiple": undefined,
                  "docs": "Filtered results will include records created on or after the provided date.",
                  "type": "optional<root.DateString>",
                },
                "date_to": {
                  "allow-multiple": undefined,
                  "docs": "Filtered results will include records created before the provided date.",
                  "type": "optional<root.DateString>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": "Return a page of results with given number of records; NOTE: technically ALL query parameters are strings or array of strings",
                  "type": "optional<long>",
                },
                "offset": {
                  "allow-multiple": undefined,
                  "docs": "Return a page of results after given index of row",
                  "type": "optional<long>",
                },
                "reporter_id": {
                  "allow-multiple": undefined,
                  "docs": "ID of an existing profile; NOTE: technically ALL query parameters are strings or array of strings",
                  "type": "optional<double>",
                },
                "statuses": {
                  "allow-multiple": true,
                  "docs": "Statuses of timesheets to filter.",
                  "type": "optional<root.TimesheetStatusEnum>",
                },
              },
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.TimesheetListContainer",
            },
          },
          "getTimesheetsByContract": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "List of timesheets by contract",
            "docs": "Retrieve a list of timesheets found for a contract.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/contracts/{contract_id}/timesheets",
            "path-parameters": {
              "contract_id": {
                "docs": "Deel contract id.",
                "type": "string",
              },
            },
            "request": {
              "name": "GetTimesheetsByContractRequest",
              "query-parameters": {
                "contract_types": {
                  "allow-multiple": true,
                  "docs": "Types of contracts to filter.",
                  "type": "optional<root.ContractTypeEnum>",
                },
                "date_from": {
                  "allow-multiple": undefined,
                  "docs": "Filtered results will include records created on or after the provided date.",
                  "type": "optional<root.DateString>",
                },
                "date_to": {
                  "allow-multiple": undefined,
                  "docs": "Filtered results will include records created before the provided date.",
                  "type": "optional<root.DateString>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": "Return a page of results with given number of records; NOTE: technically ALL query parameters are strings or array of strings",
                  "type": "optional<long>",
                },
                "offset": {
                  "allow-multiple": undefined,
                  "docs": "Return a page of results after given index of row",
                  "type": "optional<long>",
                },
                "reporter_id": {
                  "allow-multiple": undefined,
                  "docs": "ID of an existing profile; NOTE: technically ALL query parameters are strings or array of strings",
                  "type": "optional<double>",
                },
                "statuses": {
                  "allow-multiple": true,
                  "docs": "Statuses of timesheets to filter.",
                  "type": "optional<root.TimesheetStatusEnum>",
                },
              },
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.TimesheetListContainer",
            },
          },
          "updateTimesheetById": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Update a timesheet entry",
            "docs": "Update a single timesheet entry.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "PATCH",
            "path": "/timesheets/{timesheet_id}",
            "path-parameters": {
              "timesheet_id": {
                "docs": "ID of an existing timesheet",
                "type": "long",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "data": {
                    "docs": undefined,
                    "type": "root.TimesheetToUpdate",
                  },
                },
              },
              "headers": undefined,
              "name": "TimesheetToUpdateContainer",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Successful operation.",
              "type": "root.GenericResultUpdated",
            },
          },
        },
      },
    },
    "webhooks.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "WebhookController_deleteById": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Delete a webhook",
            "docs": "Delete a webhook subscription.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "DELETE",
            "path": "/webhooks/{id}",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
          },
          "WebhookController_editById": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Edit a webhook",
            "docs": "Edit a webhook subscription.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "PATCH",
            "path": "/webhooks/{id}",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "description": {
                    "docs": "Webhook subscription description.",
                    "type": "optional<string>",
                  },
                  "events": {
                    "docs": "The list of events to enable for this subscription.",
                    "type": "list<string>",
                  },
                  "name": {
                    "docs": "Webhook subscription name.",
                    "type": "optional<string>",
                  },
                  "signing_key": {
                    "docs": "The webhook's signing key, used to generate webhook signatures.",
                    "type": "optional<string>",
                  },
                  "status": {
                    "docs": "Status of webhook.",
                    "type": "root.PatchWebhookRequestStatus",
                  },
                  "url": {
                    "docs": "Endpoint to receive webhook.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "PatchWebhookRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "successful operation",
              "type": "root.WebhookItemResponse",
            },
          },
          "WebhookController_getById": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Retrieve a single webhook",
            "docs": "Retrieve a single webhook subscription.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/webhooks/{id}",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "successful operation",
              "type": "root.WebhookItemResponse",
            },
          },
          "createWebhook": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Create a webhook",
            "docs": "Create a new webhooks subscription.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/webhooks",
            "request": {
              "body": {
                "properties": {
                  "api_version": {
                    "docs": "Deel API version. Currently Deel only has one version: v1.",
                    "type": "string",
                  },
                  "description": {
                    "docs": "Webhook subscription description.",
                    "type": "optional<string>",
                  },
                  "events": {
                    "docs": "The list of events to enable for this subscription.",
                    "type": "list<string>",
                  },
                  "name": {
                    "docs": "Webhook subscription name.",
                    "type": "optional<string>",
                  },
                  "signing_key": {
                    "docs": "The webhook's signing key, used to generate webhook signatures.",
                    "type": "optional<string>",
                  },
                  "status": {
                    "docs": "Status of webhook.",
                    "type": "root.CreateWebhookRequestStatus",
                  },
                  "url": {
                    "docs": "Endpoint to receive webhook.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "CreateWebhookRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "successful operation",
              "type": "root.WebhookItemResponse",
            },
          },
          "getAllWebhooks": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "List of webhooks",
            "docs": "Retrieve a list of webhook subscriptions.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/webhooks",
            "response": {
              "docs": "successful operation",
              "type": "root.WebhookListResponse",
            },
          },
        },
      },
    },
  },
  "rootApiFile": {
    "audiences": [
      "external",
    ],
    "auth": "bearer",
    "display-name": "Deel REST API",
    "error-discrimination": {
      "strategy": "status-code",
    },
    "imports": {
      "root": "__package__.yml",
    },
    "name": "api",
  },
}
`;
