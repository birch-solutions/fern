// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`open api parser > flagright > docs 1`] = `
{
  "definitionFiles": {},
  "packageMarkerFile": {
    "errors": {
      "GetBusinessUserUserIdRequestTooManyRequestsError": {
        "docs": "Too Many Requests",
        "status-code": 429,
        "type": "unknown",
      },
      "GetBusinessUserUserIdRequestUnauthorizedError": {
        "docs": "Unauthorized",
        "status-code": 401,
        "type": "unknown",
      },
      "GetConsumerTransactionRequestTooManyRequestsError": {
        "docs": "Too Many Requests",
        "status-code": 429,
        "type": "unknown",
      },
      "GetConsumerTransactionRequestUnauthorizedError": {
        "docs": "Unauthorized",
        "status-code": 401,
        "type": "unknown",
      },
      "GetConsumerUserRequestTooManyRequestsError": {
        "docs": "Too Many Requests",
        "status-code": 429,
        "type": "unknown",
      },
      "GetConsumerUserRequestUnauthorizedError": {
        "docs": "Unauthorized",
        "status-code": 401,
        "type": "unknown",
      },
      "PostBusinessUserEventRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "unknown",
      },
      "PostBusinessUserEventRequestTooManyRequestsError": {
        "docs": "Too Many Requests",
        "status-code": 429,
        "type": "unknown",
      },
      "PostBusinessUserEventRequestUnauthorizedError": {
        "docs": "Unauthorized",
        "status-code": 401,
        "type": "unknown",
      },
      "PostBusinessUserRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "unknown",
      },
      "PostBusinessUserRequestTooManyRequestsError": {
        "docs": "Too Many Requests",
        "status-code": 429,
        "type": "unknown",
      },
      "PostBusinessUserRequestUnauthorizedError": {
        "docs": "Unauthorized",
        "status-code": 401,
        "type": "unknown",
      },
      "PostConsumerTransactionRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "unknown",
      },
      "PostConsumerTransactionRequestTooManyRequestsError": {
        "docs": "Too Many Requests",
        "status-code": 429,
        "type": "unknown",
      },
      "PostConsumerTransactionRequestUnauthorizedError": {
        "docs": "Unauthorized",
        "status-code": 401,
        "type": "unknown",
      },
      "PostConsumerUserRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "unknown",
      },
      "PostConsumerUserRequestTooManyRequestsError": {
        "docs": "Too Many Requests",
        "status-code": 429,
        "type": "unknown",
      },
      "PostConsumerUserRequestUnauthorizedError": {
        "docs": "Unauthorized",
        "status-code": 401,
        "type": "unknown",
      },
      "PostTransactionEventRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "unknown",
      },
      "PostTransactionEventRequestTooManyRequestsError": {
        "docs": "Too Many Requests",
        "status-code": 429,
        "type": "unknown",
      },
      "PostTransactionEventRequestUnauthorizedError": {
        "docs": "Unauthorized",
        "status-code": 401,
        "type": "unknown",
      },
      "PostUserEventRequestBadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "unknown",
      },
      "PostUserEventRequestTooManyRequestsError": {
        "docs": "Too Many Requests",
        "status-code": 429,
        "type": "unknown",
      },
      "PostUserEventRequestUnauthorizedError": {
        "docs": "Unauthorized",
        "status-code": 401,
        "type": "unknown",
      },
    },
    "service": {
      "auth": false,
      "base-path": "",
      "endpoints": {
        "get-business-user-userId": {
          "auth": true,
          "display-name": "Retrieve a Business User",
          "docs": "### GET Business User

\`/business/user\` endpoint allows you to operate on the [Business User entity](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships#user).

Calling \`GET /business/user/{userId}\` will return the entire User payload and rule execution results for the User with the corresponding \`userId\`",
          "errors": [
            "GetBusinessUserUserIdRequestUnauthorizedError",
            "GetBusinessUserUserIdRequestTooManyRequestsError",
          ],
          "examples": [
            {
              "name": "example-2",
              "path-parameters": {
                "userId": "userId",
              },
              "response": {
                "body": {
                  "acquisitionChannel": "ORGANIC",
                  "allowedPaymentMethods": [
                    "ACH",
                  ],
                  "createdTimestamp": 1641654664000,
                  "directors": [
                    {
                      "contactDetails": {
                        "addresses": [
                          {
                            "addressLines": [
                              "Klara-Franke Str 20",
                            ],
                            "city": "Berlin",
                            "country": "Germany",
                            "postcode": "10557",
                            "state": "Berlin",
                            "tags": [
                              {
                                "key": "customKey",
                                "value": "customValue",
                              },
                            ],
                          },
                        ],
                        "contactNumbers": [
                          "+371 123132",
                        ],
                        "emailIds": [
                          "baran@flagright.com",
                        ],
                        "websites": [
                          "flagright.com",
                        ],
                      },
                      "generalDetails": {
                        "countryOfNationality": "DE",
                        "countryOfResidence": "US",
                        "dateOfBirth": "1991-01-01",
                        "name": {
                          "firstName": "Baran",
                          "lastName": "Ozkan",
                          "middleName": "Realblood",
                        },
                      },
                      "legalDocuments": [
                        {
                          "documentExpirationDate": 1839939034000,
                          "documentIssuedCountry": "DE",
                          "documentIssuedDate": 1639939034000,
                          "documentNumber": "Z9431P",
                          "documentType": "passport",
                          "nameOnDocument": {
                            "firstName": "Baran",
                            "lastName": "Ozkan",
                            "middleName": "Realblood",
                          },
                          "tags": [
                            {
                              "key": "customerType",
                              "value": "wallet",
                            },
                          ],
                        },
                      ],
                      "pepStatus": [
                        {
                          "isPepHit": true,
                        },
                      ],
                      "tags": [
                        {
                          "key": "customKey",
                          "value": "customValue",
                        },
                      ],
                    },
                  ],
                  "kycStatusDetails": {
                    "reason": "reason",
                    "status": "SUCCESSFUL",
                  },
                  "legalEntity": {
                    "companyFinancialDetails": {
                      "expectedTransactionAmountPerMonth": {
                        "amountCurrency": "GBP",
                        "amountValue": 800,
                      },
                      "expectedTurnoverPerMonth": {
                        "amountCurrency": "USD",
                        "amountValue": 8000,
                      },
                      "tags": [
                        {
                          "key": "customKey",
                          "value": "customValue",
                        },
                      ],
                    },
                    "companyGeneralDetails": {
                      "businessIndustry": [
                        "Farming",
                      ],
                      "legalName": "Ozkan Hazelnut Export JSC",
                      "mainProductsServicesSold": [
                        "Hazelnut",
                      ],
                      "tags": [
                        {
                          "key": "customKey",
                          "value": "customValue",
                        },
                      ],
                      "userRegistrationStatus": "REGISTERED",
                      "userSegment": "SOLE_PROPRIETORSHIP",
                    },
                    "companyRegistrationDetails": {
                      "dateOfRegistration": "dateOfRegistration",
                      "legalEntityType": "legalEntityType",
                      "registrationCountry": "DE",
                      "registrationIdentifier": "PSJ554342",
                      "tags": [
                        {
                          "key": "customKey",
                          "value": "customValue",
                        },
                      ],
                      "taxIdentifier": "taxIdentifier",
                    },
                    "contactDetails": {
                      "addresses": [
                        {
                          "addressLines": [
                            "Klara-Franke Str 20",
                          ],
                          "city": "Berlin",
                          "country": "Germany",
                          "postcode": "10557",
                          "state": "Berlin",
                          "tags": [
                            {
                              "key": "customKey",
                              "value": "customValue",
                            },
                          ],
                        },
                      ],
                      "contactNumbers": [
                        "contactNumbers",
                      ],
                      "emailIds": [
                        "emailIds",
                      ],
                      "faxNumbers": [
                        "faxNumbers",
                      ],
                      "websites": [
                        "websites",
                      ],
                    },
                    "reasonForAccountOpening": [
                      "string",
                    ],
                  },
                  "linkedEntities": {
                    "childUserIds": [
                      "childUserIds",
                    ],
                    "parentUserId": "parentUserId",
                  },
                  "mccDetails": {
                    "code": 1.1,
                    "description": "description",
                  },
                  "riskLevel": "VERY_HIGH",
                  "savedPaymentDetails": [
                    {
                      "checkIdentifier": "savedPaymentDetails",
                      "checkNumber": "savedPaymentDetails",
                      "deliveryStatus": "COMPLETED",
                      "etaTimestamp": 1.1,
                      "method": "CHECK",
                      "name": "savedPaymentDetails",
                      "shippingAddress": {
                        "addressLines": [
                          "Klara-Franke Str 20",
                        ],
                        "city": "Berlin",
                        "country": "Germany",
                        "postcode": "10557",
                        "state": "Berlin",
                        "tags": [
                          {
                            "key": "customKey",
                            "value": "customValue",
                          },
                        ],
                      },
                    },
                  ],
                  "shareHolders": [
                    {
                      "contactDetails": {
                        "addresses": [
                          {
                            "addressLines": [
                              "Klara-Franke Str 20",
                            ],
                            "city": "Berlin",
                            "country": "Germany",
                            "postcode": "10557",
                            "state": "Berlin",
                            "tags": [
                              {
                                "key": "customKey",
                                "value": "customValue",
                              },
                            ],
                          },
                        ],
                        "contactNumbers": [
                          "+371 123132",
                        ],
                        "emailIds": [
                          "baran@flagright.com",
                        ],
                        "websites": [
                          "flagright.com",
                        ],
                      },
                      "generalDetails": {
                        "countryOfNationality": "DE",
                        "countryOfResidence": "US",
                        "dateOfBirth": "1991-01-01",
                        "name": {
                          "firstName": "Baran",
                          "lastName": "Ozkan",
                          "middleName": "Realblood",
                        },
                      },
                      "legalDocuments": [
                        {
                          "documentExpirationDate": 1839939034000,
                          "documentIssuedCountry": "DE",
                          "documentIssuedDate": 1639939034000,
                          "documentNumber": "Z9431P",
                          "documentType": "passport",
                          "nameOnDocument": {
                            "firstName": "Baran",
                            "lastName": "Ozkan",
                            "middleName": "Realblood",
                          },
                          "tags": [
                            {
                              "key": "customerType",
                              "value": "wallet",
                            },
                          ],
                        },
                      ],
                      "pepStatus": [
                        {
                          "isPepHit": true,
                        },
                      ],
                      "tags": [
                        {
                          "key": "customKey",
                          "value": "customValue",
                        },
                      ],
                    },
                  ],
                  "tags": [
                    {
                      "key": "customKey",
                      "value": "customValue",
                    },
                  ],
                  "transactionLimits": {
                    "maximumDailyTransactionLimit": {
                      "amountCurrency": "GBP",
                      "amountValue": 800,
                    },
                    "maximumMonthlyTransactionLimit": {
                      "amountCurrency": "GBP",
                      "amountValue": 800,
                    },
                    "maximumQuarterlyTransactionLimit": {
                      "amountCurrency": "GBP",
                      "amountValue": 800,
                    },
                    "maximumTransactionLimit": {
                      "amountCurrency": "GBP",
                      "amountValue": 800,
                    },
                    "maximumWeeklyTransactionLimit": {
                      "amountCurrency": "GBP",
                      "amountValue": 800,
                    },
                    "maximumYearlyTransactionLimit": {
                      "amountCurrency": "GBP",
                      "amountValue": 800,
                    },
                  },
                  "userId": "96647cfd9e8fe66ee0f3362e011e34e8",
                  "userStateDetails": {
                    "reason": "reason",
                    "state": "UNACCEPTABLE",
                    "userId": "userId",
                  },
                },
              },
            },
          ],
          "method": "GET",
          "pagination": undefined,
          "path": "/business/users/{userId}",
          "path-parameters": {
            "userId": {
              "docs": "",
              "type": "string",
            },
          },
          "response": {
            "docs": "OK",
            "type": "Business",
          },
        },
        "get-consumer-transaction": {
          "auth": true,
          "display-name": "Retrieve a Transaction",
          "docs": "### GET Transactions

\`/transactions\` endpoint allows you to operate on the [Transaction entity](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships#transaction).

Calling \`GET /transactions/{transactionId}\` will return the entire transaction payload and rule execution results for the transaction with the corresponding \`transactionId\`",
          "errors": [
            "GetConsumerTransactionRequestUnauthorizedError",
            "GetConsumerTransactionRequestTooManyRequestsError",
          ],
          "examples": [
            {
              "name": "example-1",
              "path-parameters": {
                "transactionId": "transactionId",
              },
              "response": {
                "body": {
                  "destinationAmountDetails": {
                    "country": "IN",
                    "transactionAmount": 68351.34,
                    "transactionCurrency": "INR",
                  },
                  "destinationPaymentDetails": {
                    "checkIdentifier": "destinationPaymentDetails",
                    "checkNumber": "destinationPaymentDetails",
                    "deliveryStatus": "COMPLETED",
                    "etaTimestamp": 1.1,
                    "method": "CHECK",
                    "name": "destinationPaymentDetails",
                    "shippingAddress": {
                      "addressLines": [
                        "Klara-Franke Str 20",
                      ],
                      "city": "Berlin",
                      "country": "Germany",
                      "postcode": "10557",
                      "state": "Berlin",
                      "tags": [
                        {
                          "key": "customKey",
                          "value": "customValue",
                        },
                      ],
                    },
                  },
                  "destinationUserId": "9350a2611e0771cba03310f74bf6",
                  "deviceData": {
                    "appVersion": "1.1.0",
                    "batteryLevel": 95,
                    "deviceIdentifier": "3c49f915d04485e34caba",
                    "deviceLatitude": 13.0033,
                    "deviceLongitude": 76.1004,
                    "deviceMaker": "ASUS",
                    "deviceModel": "Zenphone M2 Pro Max",
                    "deviceYear": "2018",
                    "ipAddress": "10.23.191.2",
                    "operatingSystem": "Android 11.2",
                    "vpnUsed": false,
                  },
                  "executedRules": [
                    {
                      "labels": [
                        "UNEXPECTED_BEHAVIOR",
                      ],
                      "nature": "AML",
                      "ruleAction": "BLOCK",
                      "ruleDescription": "If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds",
                      "ruleHit": true,
                      "ruleId": "R-1a",
                      "ruleInstanceId": "ruleInstanceId",
                      "ruleName": "Proof of funds for high value transactions",
                    },
                  ],
                  "hitRules": [
                    {
                      "labels": [
                        "UNEXPECTED_BEHAVIOR",
                      ],
                      "nature": "AML",
                      "ruleAction": "BLOCK",
                      "ruleDescription": "If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds",
                      "ruleId": "R-1a",
                      "ruleInstanceId": "ruleInstanceId",
                      "ruleName": "Proof of funds for high value transactions",
                    },
                  ],
                  "originAmountDetails": {
                    "country": "DE",
                    "transactionAmount": 800,
                    "transactionCurrency": "EUR",
                  },
                  "originPaymentDetails": {
                    "checkIdentifier": "originPaymentDetails",
                    "checkNumber": "originPaymentDetails",
                    "deliveryStatus": "COMPLETED",
                    "etaTimestamp": 1.1,
                    "method": "CHECK",
                    "name": "originPaymentDetails",
                    "shippingAddress": {
                      "addressLines": [
                        "Klara-Franke Str 20",
                      ],
                      "city": "Berlin",
                      "country": "Germany",
                      "postcode": "10557",
                      "state": "Berlin",
                      "tags": [
                        {
                          "key": "customKey",
                          "value": "customValue",
                        },
                      ],
                    },
                  },
                  "originUserId": "8650a2611d0771cba03310f74bf6",
                  "productType": "productType",
                  "promotionCodeUsed": true,
                  "reference": "loan repayment",
                  "relatedTransactionIds": [
                    "relatedTransactionIds",
                  ],
                  "tags": [
                    {
                      "key": "customKey",
                      "value": "customValue",
                    },
                  ],
                  "timestamp": 1641654664000,
                  "transactionId": "7b80a539eea6e78acbd6d458e5971482",
                  "transactionState": "CREATED",
                  "type": "DEPOSIT",
                },
              },
            },
          ],
          "method": "GET",
          "pagination": undefined,
          "path": "/transactions/{transactionId}",
          "path-parameters": {
            "transactionId": {
              "docs": "Unique Transaction Identifier",
              "type": "string",
            },
          },
          "response": {
            "docs": "OK",
            "type": "TransactionWithRulesResult",
          },
        },
        "get-consumer-user": {
          "auth": true,
          "display-name": "Retrieve a Consumer User",
          "docs": "### GET Consumer User

\`/consumer/user\` endpoint allows you to operate on the [Consumer User entity](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships#user).

Calling \`GET /consumer/user/{userId}\` will return the entire user payload and rule execution results for the user with the corresponding \`userId\`",
          "errors": [
            "GetConsumerUserRequestUnauthorizedError",
            "GetConsumerUserRequestTooManyRequestsError",
          ],
          "examples": [
            {
              "name": "example-1",
              "path-parameters": {
                "userId": "userId",
              },
              "response": {
                "body": {
                  "acquisitionChannel": "ORGANIC",
                  "contactDetails": {
                    "addresses": [
                      {
                        "addressLines": [
                          "Klara-Franke Str 20",
                        ],
                        "city": "Berlin",
                        "country": "Germany",
                        "postcode": "10557",
                        "state": "Berlin",
                        "tags": [
                          {
                            "key": "customKey",
                            "value": "customValue",
                          },
                        ],
                      },
                    ],
                    "contactNumbers": [
                      "+37112345432",
                    ],
                    "emailIds": [
                      "baran@flagright.com",
                    ],
                    "faxNumbers": [
                      "faxNumbers",
                    ],
                    "websites": [
                      "flagright.com",
                    ],
                  },
                  "createdTimestamp": 1641654664000,
                  "kycStatusDetails": {
                    "reason": "reason",
                    "status": "SUCCESSFUL",
                  },
                  "legalDocuments": [
                    {
                      "documentExpirationDate": 1839939034000,
                      "documentIssuedCountry": "DE",
                      "documentIssuedDate": 1639939034000,
                      "documentNumber": "Z9431P",
                      "documentType": "passport",
                      "nameOnDocument": {
                        "firstName": "Baran",
                        "lastName": "Ozkan",
                        "middleName": "Realblood",
                      },
                      "tags": [
                        {
                          "key": "customerType",
                          "value": "wallet",
                        },
                      ],
                    },
                  ],
                  "pepStatus": [
                    {
                      "isPepHit": true,
                      "pepCountry": "pepCountry",
                    },
                  ],
                  "reasonForAccountOpening": [
                    "reasonForAccountOpening",
                  ],
                  "riskLevel": "VERY_HIGH",
                  "tags": [
                    {
                      "key": "customKey",
                      "value": "customValue",
                    },
                  ],
                  "transactionLimits": {
                    "maximumDailyTransactionLimit": {
                      "amountCurrency": "GBP",
                      "amountValue": 800,
                    },
                    "maximumMonthlyTransactionLimit": {
                      "amountCurrency": "GBP",
                      "amountValue": 800,
                    },
                    "maximumQuarterlyTransactionLimit": {
                      "amountCurrency": "GBP",
                      "amountValue": 800,
                    },
                    "maximumTransactionLimit": {
                      "amountCurrency": "GBP",
                      "amountValue": 800,
                    },
                    "maximumWeeklyTransactionLimit": {
                      "amountCurrency": "GBP",
                      "amountValue": 800,
                    },
                    "maximumYearlyTransactionLimit": {
                      "amountCurrency": "GBP",
                      "amountValue": 800,
                    },
                  },
                  "userDetails": {
                    "countryOfNationality": "DE",
                    "countryOfResidence": "US",
                    "dateOfBirth": "1991-01-01",
                    "gender": "M",
                    "name": {
                      "firstName": "Baran",
                      "lastName": "Ozkan",
                      "middleName": "Realblood",
                    },
                  },
                  "userId": "96647cfd9e8fe66ee0f3362e011e34e8",
                  "userSegment": "RETAIL",
                  "userStateDetails": {
                    "reason": "reason",
                    "state": "UNACCEPTABLE",
                    "userId": "userId",
                  },
                },
              },
            },
          ],
          "method": "GET",
          "pagination": undefined,
          "path": "/consumer/users/{userId}",
          "path-parameters": {
            "userId": {
              "docs": "",
              "type": "string",
            },
          },
          "response": {
            "docs": "OK",
            "type": "User",
          },
        },
        "post-business-user": {
          "auth": true,
          "display-name": "Create a Business User",
          "docs": "## POST Business User

\`/business/user\` endpoint allows you to operate on the [Business user entity.](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships#user)

In order to pass the payload of a User to Flagright and verify the User, you will need to call this endpoint with the User payload. Not all fields are mandatory, you will only need to pass in the fields that you have and are relevant for your compliance setup.

### Payload


Each consumer Business entity needs three mandatory fields:

* \`userId\` - Unique identifier for the user
* \`legalEntity\` - Details of the business legal entity (CompanyGeneralDetails, FinancialDetails etc) - only \`legalName\`in \`CompanyGeneralDetails\` is mandatory
* \`createdTimestamp\` - UNIX timestamp in *milliseconds* for when the User is created in your system",
          "errors": [
            "PostBusinessUserRequestBadRequestError",
            "PostBusinessUserRequestUnauthorizedError",
            "PostBusinessUserRequestTooManyRequestsError",
          ],
          "examples": [
            {
              "name": "example-1",
              "request": {
                "createdTimestamp": 1.1,
                "userId": "userId",
              },
              "response": {
                "body": {
                  "executedRules": [
                    {
                      "labels": [
                        "UNEXPECTED_BEHAVIOR",
                      ],
                      "nature": "AML",
                      "ruleAction": "BLOCK",
                      "ruleDescription": "If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds",
                      "ruleHit": true,
                      "ruleId": "R-1a",
                      "ruleInstanceId": "ruleInstanceId",
                      "ruleName": "Proof of funds for high value transactions",
                    },
                  ],
                  "hitRules": [
                    {
                      "labels": [
                        "UNEXPECTED_BEHAVIOR",
                      ],
                      "nature": "FRAUD",
                      "ruleAction": "BLOCK",
                      "ruleDescription": "If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds",
                      "ruleId": "R-1a",
                      "ruleInstanceId": "ruleInstanceId",
                      "ruleName": "Proof of funds for high value transactions",
                    },
                  ],
                  "message": "message",
                  "userId": "96647cfd9e8fe66ee0f3362e011e34e8",
                },
              },
            },
          ],
          "method": "POST",
          "pagination": undefined,
          "path": "/business/users",
          "request": {
            "body": "Business",
          },
          "response": {
            "docs": "Created",
            "type": "PostBusinessUserResponse",
          },
        },
        "post-business-user-event": {
          "auth": true,
          "display-name": "Create a Business User Event",
          "docs": "## POST Business User Events

\`/events/business/user\` endpoint allows you to operate on the Business User Events entity.

User events are created after the initial \`POST /business/users\` call (which creates a user) and are used to:

* Update the STATE and KYC Status of the user, using the \`userStateDetails\` or \`kycStatusDetails\` field
* Update the user details, using the \`updatedBusinessUserAttributes\` field.

> If you have neither of the above two use cases, you do not need to use user events. 

### Payload

Each user event needs three mandatory fields:

* \`timestamp\`- the timestamp of when the event was created or occured in your system
* \`userId\` - The ID of the transaction for which this event is generated. 

In order to make individual events retrievable, you also need to pass in a unique \`eventId\` to the request body.
",
          "errors": [
            "PostBusinessUserEventRequestBadRequestError",
            "PostBusinessUserEventRequestUnauthorizedError",
            "PostBusinessUserEventRequestTooManyRequestsError",
          ],
          "examples": [
            {
              "request": {
                "timestamp": 1.1,
                "userId": "userId",
              },
              "response": {
                "body": {
                  "acquisitionChannel": "ORGANIC",
                  "allowedPaymentMethods": [
                    "ACH",
                  ],
                  "createdTimestamp": 1.1,
                  "directors": [
                    {
                      "contactDetails": {
                        "addresses": [
                          {
                            "addressLines": [
                              "Klara-Franke Str 20",
                            ],
                            "city": "Berlin",
                            "country": "Germany",
                            "postcode": "10557",
                            "state": "Berlin",
                            "tags": [
                              {
                                "key": "customKey",
                                "value": "customValue",
                              },
                            ],
                          },
                        ],
                        "contactNumbers": [
                          "+371 123132",
                        ],
                        "emailIds": [
                          "baran@flagright.com",
                        ],
                        "websites": [
                          "flagright.com",
                        ],
                      },
                      "generalDetails": {
                        "countryOfNationality": "DE",
                        "countryOfResidence": "US",
                        "dateOfBirth": "1991-01-01",
                        "name": {
                          "firstName": "Baran",
                          "lastName": "Ozkan",
                          "middleName": "Realblood",
                        },
                      },
                      "legalDocuments": [
                        {
                          "documentExpirationDate": 1839939034000,
                          "documentIssuedCountry": "DE",
                          "documentIssuedDate": 1639939034000,
                          "documentNumber": "Z9431P",
                          "documentType": "passport",
                          "nameOnDocument": {
                            "firstName": "Baran",
                            "lastName": "Ozkan",
                            "middleName": "Realblood",
                          },
                          "tags": [
                            {
                              "key": "customerType",
                              "value": "wallet",
                            },
                          ],
                        },
                      ],
                      "pepStatus": [
                        {
                          "isPepHit": true,
                        },
                      ],
                      "tags": [
                        {
                          "key": "customKey",
                          "value": "customValue",
                        },
                      ],
                    },
                  ],
                  "executedRules": [
                    {
                      "labels": [
                        "UNEXPECTED_BEHAVIOR",
                      ],
                      "nature": "AML",
                      "ruleAction": "BLOCK",
                      "ruleDescription": "If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds",
                      "ruleHit": true,
                      "ruleId": "R-1a",
                      "ruleInstanceId": "ruleInstanceId",
                      "ruleName": "Proof of funds for high value transactions",
                    },
                  ],
                  "hitRules": [
                    {
                      "labels": [
                        "UNEXPECTED_BEHAVIOR",
                      ],
                      "nature": "FRAUD",
                      "ruleAction": "BLOCK",
                      "ruleDescription": "If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds",
                      "ruleId": "R-1a",
                      "ruleInstanceId": "ruleInstanceId",
                      "ruleName": "Proof of funds for high value transactions",
                    },
                  ],
                  "kycStatusDetails": {
                    "reason": "reason",
                    "status": "SUCCESSFUL",
                  },
                  "legalEntity": {
                    "companyFinancialDetails": {
                      "expectedTransactionAmountPerMonth": {
                        "amountCurrency": "GBP",
                        "amountValue": 800,
                      },
                      "expectedTurnoverPerMonth": {
                        "amountCurrency": "USD",
                        "amountValue": 8000,
                      },
                      "tags": [
                        {
                          "key": "customKey",
                          "value": "customValue",
                        },
                      ],
                    },
                    "companyGeneralDetails": {
                      "businessIndustry": [
                        "Farming",
                      ],
                      "legalName": "Ozkan Hazelnut Export JSC",
                      "mainProductsServicesSold": [
                        "Hazelnut",
                      ],
                      "tags": [
                        {
                          "key": "customKey",
                          "value": "customValue",
                        },
                      ],
                      "userRegistrationStatus": "REGISTERED",
                      "userSegment": "SOLE_PROPRIETORSHIP",
                    },
                    "companyRegistrationDetails": {
                      "dateOfRegistration": "dateOfRegistration",
                      "legalEntityType": "legalEntityType",
                      "registrationCountry": "DE",
                      "registrationIdentifier": "PSJ554342",
                      "tags": [
                        {
                          "key": "customKey",
                          "value": "customValue",
                        },
                      ],
                      "taxIdentifier": "taxIdentifier",
                    },
                    "contactDetails": {
                      "addresses": [
                        {
                          "addressLines": [
                            "Klara-Franke Str 20",
                          ],
                          "city": "Berlin",
                          "country": "Germany",
                          "postcode": "10557",
                          "state": "Berlin",
                          "tags": [
                            {
                              "key": "customKey",
                              "value": "customValue",
                            },
                          ],
                        },
                      ],
                      "contactNumbers": [
                        "contactNumbers",
                      ],
                      "emailIds": [
                        "emailIds",
                      ],
                      "faxNumbers": [
                        "faxNumbers",
                      ],
                      "websites": [
                        "websites",
                      ],
                    },
                    "reasonForAccountOpening": [
                      "reasonForAccountOpening",
                    ],
                  },
                  "linkedEntities": {
                    "childUserIds": [
                      "childUserIds",
                    ],
                    "parentUserId": "parentUserId",
                  },
                  "mccDetails": {
                    "code": 1.1,
                    "description": "description",
                  },
                  "riskLevel": "VERY_HIGH",
                  "savedPaymentDetails": [
                    {
                      "checkIdentifier": "savedPaymentDetails",
                      "checkNumber": "savedPaymentDetails",
                      "deliveryStatus": "COMPLETED",
                      "etaTimestamp": 1.1,
                      "method": "CHECK",
                      "name": "savedPaymentDetails",
                      "shippingAddress": {
                        "addressLines": [
                          "Klara-Franke Str 20",
                        ],
                        "city": "Berlin",
                        "country": "Germany",
                        "postcode": "10557",
                        "state": "Berlin",
                        "tags": [
                          {
                            "key": "customKey",
                            "value": "customValue",
                          },
                        ],
                      },
                    },
                  ],
                  "shareHolders": [
                    {
                      "contactDetails": {
                        "addresses": [
                          {
                            "addressLines": [
                              "Klara-Franke Str 20",
                            ],
                            "city": "Berlin",
                            "country": "Germany",
                            "postcode": "10557",
                            "state": "Berlin",
                            "tags": [
                              {
                                "key": "customKey",
                                "value": "customValue",
                              },
                            ],
                          },
                        ],
                        "contactNumbers": [
                          "+371 123132",
                        ],
                        "emailIds": [
                          "baran@flagright.com",
                        ],
                        "websites": [
                          "flagright.com",
                        ],
                      },
                      "generalDetails": {
                        "countryOfNationality": "DE",
                        "countryOfResidence": "US",
                        "dateOfBirth": "1991-01-01",
                        "name": {
                          "firstName": "Baran",
                          "lastName": "Ozkan",
                          "middleName": "Realblood",
                        },
                      },
                      "legalDocuments": [
                        {
                          "documentExpirationDate": 1839939034000,
                          "documentIssuedCountry": "DE",
                          "documentIssuedDate": 1639939034000,
                          "documentNumber": "Z9431P",
                          "documentType": "passport",
                          "nameOnDocument": {
                            "firstName": "Baran",
                            "lastName": "Ozkan",
                            "middleName": "Realblood",
                          },
                          "tags": [
                            {
                              "key": "customerType",
                              "value": "wallet",
                            },
                          ],
                        },
                      ],
                      "pepStatus": [
                        {
                          "isPepHit": true,
                        },
                      ],
                      "tags": [
                        {
                          "key": "customKey",
                          "value": "customValue",
                        },
                      ],
                    },
                  ],
                  "tags": [
                    {
                      "key": "customKey",
                      "value": "customValue",
                    },
                  ],
                  "transactionLimits": {
                    "maximumDailyTransactionLimit": {
                      "amountCurrency": "GBP",
                      "amountValue": 800,
                    },
                    "maximumMonthlyTransactionLimit": {
                      "amountCurrency": "GBP",
                      "amountValue": 800,
                    },
                    "maximumQuarterlyTransactionLimit": {
                      "amountCurrency": "GBP",
                      "amountValue": 800,
                    },
                    "maximumTransactionLimit": {
                      "amountCurrency": "GBP",
                      "amountValue": 800,
                    },
                    "maximumWeeklyTransactionLimit": {
                      "amountCurrency": "GBP",
                      "amountValue": 800,
                    },
                    "maximumYearlyTransactionLimit": {
                      "amountCurrency": "GBP",
                      "amountValue": 800,
                    },
                  },
                  "userId": "userId",
                  "userStateDetails": {
                    "reason": "reason",
                    "state": "UNACCEPTABLE",
                    "userId": "userId",
                  },
                },
              },
            },
          ],
          "method": "POST",
          "pagination": undefined,
          "path": "/events/business/user",
          "request": {
            "body": {
              "properties": {
                "eventDescription": {
                  "display-name": "BusinessUserEvent",
                  "docs": "Event description",
                  "type": "optional<string>",
                },
                "eventId": {
                  "display-name": "BusinessUserEvent",
                  "docs": "Unique event ID",
                  "type": "optional<string>",
                },
                "reason": {
                  "display-name": "BusinessUserEvent",
                  "docs": "Reason for the event or a state change",
                  "type": "optional<string>",
                },
                "timestamp": {
                  "docs": "Timestamp of the event",
                  "type": "double",
                  "validation": {
                    "exclusiveMax": undefined,
                    "exclusiveMin": undefined,
                    "max": 4133890801000,
                    "min": 1262300400000,
                    "multipleOf": undefined,
                  },
                },
                "updatedBusinessUserAttributes": {
                  "display-name": "BusinessUserEvent",
                  "type": "optional<BusinessOptional>",
                },
                "userId": {
                  "docs": "Transaction ID the event pertains to",
                  "type": "string",
                  "validation": {
                    "format": undefined,
                    "maxLength": undefined,
                    "minLength": 1,
                    "pattern": undefined,
                  },
                },
              },
            },
            "headers": undefined,
            "name": "BusinessUserEvent",
            "query-parameters": undefined,
          },
          "response": {
            "docs": "Created",
            "type": "BusinessWithRulesResult",
          },
        },
        "post-consumer-transaction": {
          "auth": true,
          "display-name": "Verify a Transaction",
          "docs": "## POST Transactions

\`/transactions\` endpoint allows you to operate on the [Transaction entity.](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships#transaction)

In order to pass the payload of a transaction to Flagright and verify the transaciton, you will need to call this endpoint with the transaction payload. Not all fields are mandatory, you will only need to pass in the fields that you have and are relevant for your compliance setup. 


### Payload

Here are some of the most used payload fields explained (you can find the full payload [schema below](https://docs.flagright.com/docs/flagright-api/87742ed31b30e-verify-a-transaction#request-body) with 1 line descriptions):

* \`type\`: Type of transaction (Ex: \`WITHDRAWAL\`, \`DEPOSIT\`, \`TRANSFER\` etc). 
* \`transactionId\` - Unique Identifier for the transaction. Flagright API will generate a \`transactionId\` if this field is left empty
* \`timestamp\` - UNIX timestamp in *milliseconds* of when the transaction took place
* \`transactionState\` - The state of the transaction, set to \`CREATED\` by default. [More details here](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships-in-the-api#transaction-lifecycle-through-transaction-events)
* \`originUserId\` - Unique identifier (if any) of the user who is sending the money. This user must be created within the Flagright system before using the [create a consumer user](https://docs.flagright.com/docs/flagright-api/18132cd454603-create-a-consumer-user) or [create a business user](https://docs.flagright.com/docs/flagright-api/f651463db29d8-create-a-business-user) endpoint
* \`destinationUserId\` - Unique identifier (if any) of the user who is receiving the money. This user must be created within the Flagright system before using the [create a consumer user](https://docs.flagright.com/docs/flagright-api/18132cd454603-create-a-consumer-user) or [create a business user](https://docs.flagright.com/docs/flagright-api/f651463db29d8-create-a-business-user) endpoint
* \`originAmountDetails\` - Details of the amount being sent from the origin
* \`destinationAmountDetails\` - Details of the amount being received at the destination
* \`originPaymentDetails\` - Payment details (if any) used at the origin (ex: \`CARD\`, \`IBAN\`, \`WALLET\` etc). You can click on the dropdown next to the field in the schema below to view all supported payment types.
* \`destinationPaymentDetails\` - Payment details (if any) used at the destination (ex: \`CARD\`, \`IBAN\`, \`WALLET\` etc). You can click on the dropdown next to the field in the schema below to view all supported payment types.",
          "errors": [
            "PostConsumerTransactionRequestBadRequestError",
            "PostConsumerTransactionRequestUnauthorizedError",
            "PostConsumerTransactionRequestTooManyRequestsError",
          ],
          "examples": [
            {
              "name": "example-1",
              "request": {
                "destinationAmountDetails": {
                  "country": "IN",
                  "transactionAmount": 68351.34,
                  "transactionCurrency": "INR",
                },
                "destinationPaymentDetails": {
                  "method": "CHECK",
                  "shippingAddress": {
                    "addressLines": [
                      "Klara-Franke Str 20",
                    ],
                    "city": "Berlin",
                    "country": "Germany",
                    "postcode": "10557",
                    "state": "Berlin",
                    "tags": [
                      {
                        "key": "customKey",
                        "value": "customValue",
                      },
                    ],
                  },
                },
                "destinationUserId": "9350a2611e0771cba03310f74bf6",
                "deviceData": {
                  "appVersion": "1.1.0",
                  "batteryLevel": 95,
                  "deviceIdentifier": "3c49f915d04485e34caba",
                  "deviceLatitude": 13.0033,
                  "deviceLongitude": 76.1004,
                  "deviceMaker": "ASUS",
                  "deviceModel": "Zenphone M2 Pro Max",
                  "deviceYear": "2018",
                  "ipAddress": "10.23.191.2",
                  "operatingSystem": "Android 11.2",
                  "vpnUsed": false,
                },
                "originAmountDetails": {
                  "country": "DE",
                  "transactionAmount": 800,
                  "transactionCurrency": "EUR",
                },
                "originPaymentDetails": {
                  "method": "CHECK",
                  "shippingAddress": {
                    "addressLines": [
                      "Klara-Franke Str 20",
                    ],
                    "city": "Berlin",
                    "country": "Germany",
                    "postcode": "10557",
                    "state": "Berlin",
                    "tags": [
                      {
                        "key": "customKey",
                        "value": "customValue",
                      },
                    ],
                  },
                },
                "originUserId": "8650a2611d0771cba03310f74bf6",
                "promotionCodeUsed": true,
                "reference": "loan repayment",
                "tags": [
                  {
                    "key": "customKey",
                    "value": "customValue",
                  },
                ],
                "timestamp": 1641654664000,
                "transactionId": "7b80a539eea6e78acbd6d458e5971482",
              },
              "response": {
                "body": {
                  "executedRules": [
                    {
                      "labels": [
                        "UNEXPECTED_BEHAVIOR",
                      ],
                      "nature": "AML",
                      "ruleAction": "BLOCK",
                      "ruleDescription": "If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds",
                      "ruleHit": true,
                      "ruleId": "R-1a",
                      "ruleInstanceId": "ruleInstanceId",
                      "ruleName": "Proof of funds for high value transactions",
                    },
                  ],
                  "hitRules": [
                    {
                      "labels": [
                        "UNEXPECTED_BEHAVIOR",
                      ],
                      "nature": "AML",
                      "ruleAction": "BLOCK",
                      "ruleDescription": "If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds",
                      "ruleId": "R-1a",
                      "ruleInstanceId": "ruleInstanceId",
                      "ruleName": "Proof of funds for high value transactions",
                    },
                  ],
                  "message": "message",
                  "transactionId": "7b80a539eea6e78acbd6d458e5971482",
                },
              },
            },
          ],
          "method": "POST",
          "pagination": undefined,
          "path": "/transactions",
          "request": {
            "body": "Transaction",
            "name": "PostConsumerTransactionRequest",
            "query-parameters": {
              "validateDestinationUserId": {
                "docs": "Boolean string whether Flagright should validate if provided destinationUserId exist. True by default",
                "type": "optional<string>",
              },
              "validateOriginUserId": {
                "docs": "Boolean string whether Flagright should validate if provided originUserId exist. True by default",
                "type": "optional<string>",
              },
            },
          },
          "response": {
            "docs": "Created",
            "type": "PostConsumerTransactionResponse",
          },
        },
        "post-consumer-user": {
          "auth": true,
          "display-name": "Create a Consumer User",
          "docs": "## POST Consumer User

\`/consumer/user\` endpoint allows you to operate on the [Consumer user entity.](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships#user)

In order to pass the payload of a User to Flagright and verify the User, you will need to call this endpoint with the User payload. Not all fields are mandatory, you will only need to pass in the fields that you have and are relevant for your compliance setup.

### Payload

Each consumer User entity needs three mandatory fields:

* \`userId\` - Unique identifier for the user
* \`createdTimestamp\` - UNIX timestamp in *milliseconds* for when the User is created in your system
",
          "errors": [
            "PostConsumerUserRequestBadRequestError",
            "PostConsumerUserRequestUnauthorizedError",
            "PostConsumerUserRequestTooManyRequestsError",
          ],
          "examples": [
            {
              "name": "example-1",
              "request": {
                "contactDetails": {
                  "addresses": [
                    {
                      "addressLines": [
                        "Klara-Franke Str 20",
                      ],
                      "city": "Berlin",
                      "country": "Germany",
                      "postcode": "10557",
                      "state": "Berlin",
                      "tags": [
                        {
                          "key": "customKey",
                          "value": "customValue",
                        },
                      ],
                    },
                  ],
                  "contactNumbers": [
                    "+37112345432",
                  ],
                  "emailIds": [
                    "baran@flagright.com",
                  ],
                  "websites": [
                    "flagright.com",
                  ],
                },
                "createdTimestamp": 1641654664000,
                "legalDocuments": [
                  {
                    "documentExpirationDate": 1839939034000,
                    "documentIssuedCountry": "DE",
                    "documentIssuedDate": 1639939034000,
                    "documentNumber": "Z9431P",
                    "documentType": "passport",
                    "tags": [
                      {
                        "key": "customerType",
                        "value": "wallet",
                      },
                    ],
                  },
                ],
                "tags": [
                  {
                    "key": "customKey",
                    "value": "customValue",
                  },
                ],
                "userDetails": {
                  "countryOfNationality": "DE",
                  "countryOfResidence": "US",
                  "dateOfBirth": "1991-01-01",
                  "name": {
                    "firstName": "Baran",
                    "lastName": "Ozkan",
                    "middleName": "Realblood",
                  },
                },
                "userId": "96647cfd9e8fe66ee0f3362e011e34e8",
              },
              "response": {
                "body": {
                  "executedRules": [
                    {
                      "labels": [
                        "UNEXPECTED_BEHAVIOR",
                      ],
                      "nature": "AML",
                      "ruleAction": "BLOCK",
                      "ruleDescription": "If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds",
                      "ruleHit": true,
                      "ruleId": "R-1a",
                      "ruleInstanceId": "ruleInstanceId",
                      "ruleName": "Proof of funds for high value transactions",
                    },
                  ],
                  "hitRules": [
                    {
                      "labels": [
                        "UNEXPECTED_BEHAVIOR",
                      ],
                      "nature": "FRAUD",
                      "ruleAction": "BLOCK",
                      "ruleDescription": "If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds",
                      "ruleId": "R-1a",
                      "ruleInstanceId": "ruleInstanceId",
                      "ruleName": "Proof of funds for high value transactions",
                    },
                  ],
                  "message": "message",
                  "userId": "96647cfd9e8fe66ee0f3362e011e34e8",
                },
              },
            },
          ],
          "method": "POST",
          "pagination": undefined,
          "path": "/consumer/users",
          "request": {
            "body": {
              "display-name": "User",
              "type": "User",
            },
          },
          "response": {
            "docs": "Created",
            "type": "PostConsumerUserResponse",
          },
        },
        "post-transaction-event": {
          "auth": true,
          "display-name": "Create a Transaction Event",
          "docs": "## POST Transaction Events

\`/events/transaction\` endpoint allows you to operate on the [Transaction Events entity.](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships#transaction-event)

Transaction events are created after the initial \`POST /transactions\` call (which creates a transaction) and are used to:

* Update the STATE of the transaction, using the \`transactionState\` field and manage the [Transaction Lifecycle](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships#transaction-lifecycle-through-transaction-events)
* Update the transaction details, using the \`updatedTransactionAttributes\` field.

> If you have neither of the above two use cases, you do not need to use transaction events. 

### Payload

Each transaction event needs three mandatory fields:

* \`transactionState\` - STATE of the transaction -> value is set to \`CREATED\` after \`POST /transactions\` call
* \`timestamp\`- the timestamp of when the event was created or occured in your system
* \`transactionId\` - The ID of the transaction for which this event is generated. 

In order to make individual events retrievable, you also need to pass in a unique \`eventId\` to the request body.
",
          "errors": [
            "PostTransactionEventRequestBadRequestError",
            "PostTransactionEventRequestUnauthorizedError",
            "PostTransactionEventRequestTooManyRequestsError",
          ],
          "examples": [
            {
              "name": "example-1",
              "request": {
                "eventDescription": "Transaction created",
                "eventId": "aaeeb166147a406b957dd9147a406b957",
                "metaData": {
                  "batteryLevel": 76.3,
                  "deviceLatitude": 13.009711,
                  "deviceLongitude": 76.102898,
                  "ipAddress": "79.144.2.20",
                  "vpnUsed": true,
                },
                "timestamp": 1431231244001,
                "transactionId": "443dea26147a406b957d9ee3a1247b11",
                "transactionState": "SUCCESSFUL",
              },
              "response": {
                "body": {
                  "eventId": "7b80a539eea6e78acbd6d458e5971482",
                  "executedRules": [
                    {
                      "labels": [
                        "UNEXPECTED_BEHAVIOR",
                      ],
                      "nature": "AML",
                      "ruleAction": "BLOCK",
                      "ruleDescription": "If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds",
                      "ruleHit": true,
                      "ruleId": "R-1a",
                      "ruleInstanceId": "ruleInstanceId",
                      "ruleName": "Proof of funds for high value transactions",
                    },
                  ],
                  "hitRules": [
                    {
                      "labels": [
                        "UNEXPECTED_BEHAVIOR",
                      ],
                      "nature": "AML",
                      "ruleAction": "BLOCK",
                      "ruleDescription": "If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds",
                      "ruleId": "R-1a",
                      "ruleInstanceId": "ruleInstanceId",
                      "ruleName": "Proof of funds for high value transactions",
                    },
                  ],
                  "transaction": {
                    "destinationAmountDetails": {
                      "country": "IN",
                      "transactionAmount": 68351.34,
                      "transactionCurrency": "INR",
                    },
                    "destinationPaymentDetails": {
                      "checkIdentifier": "destinationPaymentDetails",
                      "checkNumber": "destinationPaymentDetails",
                      "deliveryStatus": "COMPLETED",
                      "etaTimestamp": 1.1,
                      "method": "CHECK",
                      "name": "destinationPaymentDetails",
                      "shippingAddress": {
                        "addressLines": [
                          "Klara-Franke Str 20",
                        ],
                        "city": "Berlin",
                        "country": "Germany",
                        "postcode": "10557",
                        "state": "Berlin",
                        "tags": [
                          {
                            "key": "customKey",
                            "value": "customValue",
                          },
                        ],
                      },
                    },
                    "destinationUserId": "9350a2611e0771cba03310f74bf6",
                    "deviceData": {
                      "appVersion": "1.1.0",
                      "batteryLevel": 95,
                      "deviceIdentifier": "3c49f915d04485e34caba",
                      "deviceLatitude": 13.0033,
                      "deviceLongitude": 76.1004,
                      "deviceMaker": "ASUS",
                      "deviceModel": "Zenphone M2 Pro Max",
                      "deviceYear": "2018",
                      "ipAddress": "10.23.191.2",
                      "operatingSystem": "Android 11.2",
                      "vpnUsed": false,
                    },
                    "originAmountDetails": {
                      "country": "DE",
                      "transactionAmount": 800,
                      "transactionCurrency": "EUR",
                    },
                    "originPaymentDetails": {
                      "checkIdentifier": "originPaymentDetails",
                      "checkNumber": "originPaymentDetails",
                      "deliveryStatus": "COMPLETED",
                      "etaTimestamp": 1.1,
                      "method": "CHECK",
                      "name": "originPaymentDetails",
                      "shippingAddress": {
                        "addressLines": [
                          "Klara-Franke Str 20",
                        ],
                        "city": "Berlin",
                        "country": "Germany",
                        "postcode": "10557",
                        "state": "Berlin",
                        "tags": [
                          {
                            "key": "customKey",
                            "value": "customValue",
                          },
                        ],
                      },
                    },
                    "originUserId": "8650a2611d0771cba03310f74bf6",
                    "productType": "productType",
                    "promotionCodeUsed": true,
                    "reference": "loan repayment",
                    "relatedTransactionIds": [
                      "relatedTransactionIds",
                    ],
                    "tags": [
                      {
                        "key": "customKey",
                        "value": "customValue",
                      },
                    ],
                    "timestamp": 1641654664000,
                    "transactionId": "7b80a539eea6e78acbd6d458e5971482",
                    "transactionState": "CREATED",
                    "type": "DEPOSIT",
                  },
                },
              },
            },
          ],
          "method": "POST",
          "pagination": undefined,
          "path": "/events/transaction",
          "request": {
            "body": {
              "properties": {
                "eventDescription": {
                  "docs": "Event description",
                  "type": "optional<string>",
                },
                "eventId": {
                  "docs": "Unique event ID",
                  "type": "optional<string>",
                },
                "metaData": "optional<DeviceData>",
                "reason": {
                  "docs": "Reason for the event or a state change",
                  "type": "optional<string>",
                },
                "timestamp": {
                  "docs": "Timestamp of the event",
                  "type": "double",
                  "validation": {
                    "exclusiveMax": undefined,
                    "exclusiveMin": undefined,
                    "max": 4133890801000,
                    "min": 1262300400000,
                    "multipleOf": undefined,
                  },
                },
                "transactionId": {
                  "docs": "Transaction ID the event pertains to",
                  "type": "string",
                  "validation": {
                    "format": undefined,
                    "maxLength": undefined,
                    "minLength": 1,
                    "pattern": undefined,
                  },
                },
                "transactionState": {
                  "display-name": "TransactionState",
                  "type": "TransactionState",
                },
                "updatedTransactionAttributes": "optional<TransactionUpdatable>",
              },
            },
            "headers": undefined,
            "name": "TransactionEvent",
            "query-parameters": undefined,
          },
          "response": {
            "docs": "Created",
            "type": "TransactionEventMonitoringResult",
          },
        },
        "post-user-event": {
          "auth": true,
          "display-name": "Create a Consumer User Event",
          "docs": "## POST Consumer User Events

\`/events/consumer/user\` endpoint allows you to operate on the Consumer User Events entity.

User events are created after the initial \`POST /consumer/users\` call (which creates a user) and are used to:

* Update the STATE and KYC Status of the user, using the \`userStateDetails\` or \`kycStatusDetails\` field
* Update the user details, using the \`updatedConsumerUserAttributes\` field.

> If you have neither of the above two use cases, you do not need to use user events. 

### Payload

Each user event needs three mandatory fields:

* \`timestamp\`- the timestamp of when the event was created or occured in your system
* \`userId\` - The ID of the transaction for which this event is generated. 

In order to make individual events retrievable, you also need to pass in a unique \`eventId\` to the request body.
",
          "errors": [
            "PostUserEventRequestBadRequestError",
            "PostUserEventRequestUnauthorizedError",
            "PostUserEventRequestTooManyRequestsError",
          ],
          "examples": [
            {
              "request": {
                "timestamp": 1.1,
                "userId": "userId",
              },
              "response": {
                "body": {
                  "acquisitionChannel": "ORGANIC",
                  "contactDetails": {
                    "addresses": [
                      {
                        "addressLines": [
                          "Klara-Franke Str 20",
                        ],
                        "city": "Berlin",
                        "country": "Germany",
                        "postcode": "10557",
                        "state": "Berlin",
                        "tags": [
                          {
                            "key": "customKey",
                            "value": "customValue",
                          },
                        ],
                      },
                    ],
                    "contactNumbers": [
                      "contactNumbers",
                    ],
                    "emailIds": [
                      "emailIds",
                    ],
                    "faxNumbers": [
                      "faxNumbers",
                    ],
                    "websites": [
                      "websites",
                    ],
                  },
                  "createdTimestamp": 1.1,
                  "executedRules": [
                    {
                      "labels": [
                        "UNEXPECTED_BEHAVIOR",
                      ],
                      "nature": "AML",
                      "ruleAction": "BLOCK",
                      "ruleDescription": "If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds",
                      "ruleHit": true,
                      "ruleId": "R-1a",
                      "ruleInstanceId": "ruleInstanceId",
                      "ruleName": "Proof of funds for high value transactions",
                    },
                  ],
                  "hitRules": [
                    {
                      "labels": [
                        "UNEXPECTED_BEHAVIOR",
                      ],
                      "nature": "FRAUD",
                      "ruleAction": "BLOCK",
                      "ruleDescription": "If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds",
                      "ruleId": "R-1a",
                      "ruleInstanceId": "ruleInstanceId",
                      "ruleName": "Proof of funds for high value transactions",
                    },
                  ],
                  "kycStatusDetails": {
                    "reason": "reason",
                    "status": "SUCCESSFUL",
                  },
                  "legalDocuments": [
                    {
                      "documentExpirationDate": 1839939034000,
                      "documentIssuedCountry": "DE",
                      "documentIssuedDate": 1639939034000,
                      "documentNumber": "Z9431P",
                      "documentType": "passport",
                      "nameOnDocument": {
                        "firstName": "Baran",
                        "lastName": "Ozkan",
                        "middleName": "Realblood",
                      },
                      "tags": [
                        {
                          "key": "customerType",
                          "value": "wallet",
                        },
                      ],
                    },
                  ],
                  "pepStatus": [
                    {
                      "isPepHit": true,
                      "pepCountry": "pepCountry",
                    },
                  ],
                  "reasonForAccountOpening": [
                    "reasonForAccountOpening",
                  ],
                  "riskLevel": "VERY_HIGH",
                  "tags": [
                    {
                      "key": "customKey",
                      "value": "customValue",
                    },
                  ],
                  "transactionLimits": {
                    "maximumDailyTransactionLimit": {
                      "amountCurrency": "GBP",
                      "amountValue": 800,
                    },
                    "maximumMonthlyTransactionLimit": {
                      "amountCurrency": "GBP",
                      "amountValue": 800,
                    },
                    "maximumQuarterlyTransactionLimit": {
                      "amountCurrency": "GBP",
                      "amountValue": 800,
                    },
                    "maximumTransactionLimit": {
                      "amountCurrency": "GBP",
                      "amountValue": 800,
                    },
                    "maximumWeeklyTransactionLimit": {
                      "amountCurrency": "GBP",
                      "amountValue": 800,
                    },
                    "maximumYearlyTransactionLimit": {
                      "amountCurrency": "GBP",
                      "amountValue": 800,
                    },
                  },
                  "userDetails": {
                    "countryOfNationality": "DE",
                    "countryOfResidence": "US",
                    "dateOfBirth": "1991-01-01",
                    "gender": "M",
                    "name": {
                      "firstName": "Baran",
                      "lastName": "Ozkan",
                      "middleName": "Realblood",
                    },
                  },
                  "userId": "userId",
                  "userSegment": "RETAIL",
                  "userStateDetails": {
                    "reason": "reason",
                    "state": "UNACCEPTABLE",
                    "userId": "userId",
                  },
                },
              },
            },
          ],
          "method": "POST",
          "pagination": undefined,
          "path": "/events/consumer/user",
          "request": {
            "body": {
              "properties": {
                "eventDescription": {
                  "display-name": "ConsumerUserEvent",
                  "docs": "Event description",
                  "type": "optional<string>",
                },
                "eventId": {
                  "display-name": "ConsumerUserEvent",
                  "docs": "Unique event ID",
                  "type": "optional<string>",
                },
                "reason": {
                  "display-name": "ConsumerUserEvent",
                  "docs": "Reason for the event or a state change",
                  "type": "optional<string>",
                },
                "timestamp": {
                  "docs": "Timestamp of the event",
                  "type": "double",
                  "validation": {
                    "exclusiveMax": undefined,
                    "exclusiveMin": undefined,
                    "max": 4133890801000,
                    "min": 1262300400000,
                    "multipleOf": undefined,
                  },
                },
                "updatedConsumerUserAttributes": {
                  "display-name": "ConsumerUserEvent",
                  "type": "optional<UserOptional>",
                },
                "userId": {
                  "docs": "Transaction ID the event pertains to",
                  "type": "string",
                  "validation": {
                    "format": undefined,
                    "maxLength": undefined,
                    "minLength": 1,
                    "pattern": undefined,
                  },
                },
              },
            },
            "headers": undefined,
            "name": "ConsumerUserEvent",
            "query-parameters": undefined,
          },
          "response": {
            "docs": "Created",
            "type": "UserWithRulesResult",
          },
        },
      },
      "source": {
        "openapi": "flagright/openapi.yml",
      },
    },
    "types": {
      "ACHDetails": {
        "docs": "Model for ACH payment method",
        "properties": {
          "accountNumber": {
            "display-name": "ACHDetails",
            "docs": "Bank account number of the individual",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "bankAddress": {
            "display-name": "ACHDetails",
            "type": "optional<Address>",
          },
          "bankName": {
            "display-name": "ACHDetails",
            "docs": "Name of the bank",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "beneficiaryName": {
            "display-name": "ACHDetails",
            "docs": "Beneficiary name of the account",
            "type": "optional<string>",
          },
          "name": {
            "display-name": "ACHDetails",
            "docs": "Name of the account holder",
            "type": "optional<string>",
          },
          "routingNumber": {
            "display-name": "ACHDetails",
            "docs": "Routing number of the bank",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "ACHPaymentMethod": {
        "display-name": "ACHPaymentMethod",
        "docs": "Classify the method of payment as "ACH" for ACHDetails",
        "type": "literal<"ACH">",
      },
      "AcquisitionChannel": {
        "docs": "Model for User acquisition channel",
        "enum": [
          "ORGANIC",
          "PAID",
          "REFERRAL",
          "OFFLINE",
          "GATHERING",
          "UNKNOWN",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "Address": {
        "docs": "Model for standardized address",
        "properties": {
          "addressLines": {
            "docs": "Address lines of the user's residence address",
            "type": "list<unknown>",
          },
          "city": {
            "docs": "City of the user's residence address",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "country": {
            "docs": "User's country of residence",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "postcode": {
            "docs": "Post code of the user's residence address",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "state": {
            "display-name": "Address",
            "docs": "State of the user's residence address",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "tags": {
            "display-name": "Address",
            "docs": "Additional information that can be added via tags",
            "type": "optional<list<Tag>>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "AlertClosedDetails": {
        "docs": undefined,
        "properties": {
          "alertId": {
            "display-name": "AlertClosedDetails",
            "type": "optional<string>",
          },
          "comment": {
            "display-name": "AlertClosedDetails",
            "type": "optional<string>",
          },
          "reasonDescriptionForOther": {
            "display-name": "AlertClosedDetails",
            "type": "optional<list<string>>",
          },
          "reasons": {
            "display-name": "AlertClosedDetails",
            "type": "optional<list<string>>",
          },
          "ruleDescription": {
            "display-name": "AlertClosedDetails",
            "type": "optional<string>",
          },
          "ruleId": {
            "display-name": "AlertClosedDetails",
            "type": "optional<string>",
          },
          "ruleInstanceId": {
            "display-name": "AlertClosedDetails",
            "type": "optional<string>",
          },
          "ruleName": {
            "display-name": "AlertClosedDetails",
            "type": "optional<string>",
          },
          "status": {
            "display-name": "AlertClosedDetails",
            "type": "optional<string>",
          },
          "transactionIds": {
            "display-name": "AlertClosedDetails",
            "type": "optional<list<string>>",
          },
          "userId": {
            "display-name": "AlertClosedDetails",
            "type": "optional<string>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "Amount": {
        "docs": "Model for amount",
        "properties": {
          "amountCurrency": {
            "display-name": "CurrencyCode",
            "type": "CurrencyCode",
          },
          "amountValue": {
            "docs": "Numerical value of the transaction",
            "type": "double",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "Business": {
        "docs": undefined,
        "extends": [
          "BusinessBase",
          "BusinessOptional",
        ],
        "properties": {},
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "BusinessBase": {
        "docs": "Model for a business user base fields",
        "properties": {
          "createdTimestamp": {
            "docs": "Timestamp when the user was created",
            "type": "double",
            "validation": {
              "exclusiveMax": undefined,
              "exclusiveMin": undefined,
              "max": 4133890801000,
              "min": 1262300400000,
              "multipleOf": undefined,
            },
          },
          "userId": {
            "docs": "Unique user ID for the user",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "BusinessEntityLink": {
        "docs": undefined,
        "properties": {
          "childUserIds": {
            "display-name": "BusinessEntityLink",
            "type": "optional<list<string>>",
          },
          "parentUserId": {
            "display-name": "BusinessEntityLink",
            "type": "optional<string>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "BusinessOptional": {
        "docs": "Model for a business user - optional fields",
        "properties": {
          "acquisitionChannel": {
            "display-name": "BusinessOptional",
            "type": "optional<AcquisitionChannel>",
          },
          "allowedPaymentMethods": {
            "display-name": "BusinessOptional",
            "type": "optional<list<PaymentMethod>>",
          },
          "directors": {
            "display-name": "BusinessOptional",
            "docs": "Director(s) of the company. Must be at least one",
            "type": "optional<list<Person>>",
          },
          "kycStatusDetails": {
            "display-name": "BusinessOptional",
            "type": "optional<KYCStatusDetails>",
          },
          "legalEntity": {
            "display-name": "BusinessOptional",
            "type": "optional<LegalEntity>",
          },
          "linkedEntities": {
            "display-name": "BusinessOptional",
            "type": "optional<BusinessEntityLink>",
          },
          "mccDetails": {
            "display-name": "BusinessOptional",
            "type": "optional<MCCDetails>",
          },
          "riskLevel": {
            "display-name": "BusinessOptional",
            "type": "optional<RiskLevel>",
          },
          "savedPaymentDetails": {
            "display-name": "BusinessOptional",
            "type": "optional<list<BusinessOptionalSavedPaymentDetailsItem>>",
          },
          "shareHolders": {
            "display-name": "BusinessOptional",
            "docs": "Shareholders (beneficiaries) of the company that hold at least 25% ownership. Can be another company or an individual",
            "type": "optional<list<Person>>",
          },
          "tags": {
            "display-name": "BusinessOptional",
            "docs": "Additional information that can be added via tags",
            "type": "optional<list<Tag>>",
          },
          "transactionLimits": {
            "display-name": "BusinessOptional",
            "type": "optional<TransactionLimits>",
          },
          "userStateDetails": {
            "display-name": "BusinessOptional",
            "type": "optional<UserStateDetails>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "BusinessOptionalSavedPaymentDetailsItem": {
        "availability": undefined,
        "base-properties": {},
        "discriminant": "method",
        "docs": undefined,
        "encoding": undefined,
        "source": {
          "openapi": "flagright/openapi.yml",
        },
        "union": {
          "ACH": {
            "display-name": "ACHDetails",
            "type": "ACHDetails",
          },
          "CARD": {
            "display-name": "CardDetails",
            "type": "CardDetails",
          },
          "CHECK": {
            "display-name": "CheckDetails",
            "type": "CheckDetails",
          },
          "GENERIC_BANK_ACCOUNT": {
            "display-name": "GenericBankAccountDetails",
            "type": "GenericBankAccountDetails",
          },
          "IBAN": {
            "display-name": "IBANDetails",
            "type": "IBANDetails",
          },
          "MPESA": {
            "display-name": "MpesaDetails",
            "type": "MpesaDetails",
          },
          "SWIFT": {
            "display-name": "SWIFTDetails",
            "type": "SWIFTDetails",
          },
          "UPI": {
            "display-name": "UPIDetails",
            "type": "UPIDetails",
          },
          "WALLET": {
            "display-name": "WalletDetails",
            "type": "WalletDetails",
          },
        },
      },
      "BusinessUsersResponse": {
        "docs": "Model for business user risk score response",
        "properties": {
          "userId": {
            "docs": "user ID the risk score pertains to",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "BusinessWithRulesResult": {
        "docs": "Model for business payload with rules result",
        "extends": [
          "Business",
        ],
        "properties": {
          "executedRules": "optional<list<ExecutedRulesResult>>",
          "hitRules": "optional<list<HitRulesDetails>>",
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "CardDetails": {
        "docs": "Model for credit or debit card details",
        "properties": {
          "3dsDone": {
            "display-name": "CardDetails",
            "docs": "Whether 3ds was successfully enforced for the transaction",
            "name": "_3dsDone",
            "type": "optional<boolean>",
          },
          "cardAuthenticated": {
            "display-name": "CardDetails",
            "docs": "Authentication of Card",
            "type": "optional<boolean>",
          },
          "cardBrand": {
            "display-name": "CardDetails",
            "docs": "Brand of Card",
            "type": "optional<CardDetailsCardBrand>",
          },
          "cardExpiry": {
            "display-name": "CardDetails",
            "type": "optional<CardExpiry>",
          },
          "cardFingerprint": {
            "display-name": "CardDetails",
            "docs": "Unique card fingerprint that helps identify a specific card without having to use explicit card number. This is likely available at your card payment scheme provider",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "cardFunding": {
            "display-name": "CardDetails",
            "docs": "Funding of Card",
            "type": "optional<CardDetailsCardFunding>",
          },
          "cardIssuedCountry": {
            "display-name": "CardDetails",
            "type": "optional<CountryCode>",
          },
          "cardLast4Digits": {
            "display-name": "CardDetails",
            "docs": "Last 4 digits of Card",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": 4,
              "minLength": 4,
              "pattern": undefined,
            },
          },
          "cardType": {
            "display-name": "CardDetails",
            "type": "optional<CardDetailsCardType>",
          },
          "merchantDetails": {
            "display-name": "CardDetails",
            "type": "optional<CardMerchantDetails>",
          },
          "nameOnCard": {
            "display-name": "CardDetails",
            "type": "optional<ConsumerName>",
          },
          "paymentChannel": {
            "display-name": "CardDetails",
            "type": "optional<string>",
          },
          "transactionReferenceField": {
            "display-name": "CardDetails",
            "docs": "Reference for the transaction",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "CardDetailsCardBrand": {
        "docs": "Brand of Card",
        "enum": [
          "VISA",
          "MASTERCARD",
          "AMERICAN_EXPRESS",
          "DISCOVER",
          "UNIONPAY",
          "RUPAY",
          "JCB",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "CardDetailsCardFunding": {
        "docs": "Funding of Card",
        "enum": [
          "CREDIT",
          "DEBIT",
          "PREPAID",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "CardDetailsCardType": {
        "enum": [
          "VIRTUAL",
          "PHYSICAL",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "CardExpiry": {
        "docs": undefined,
        "properties": {
          "month": {
            "display-name": "CardExpiry",
            "type": "optional<double>",
          },
          "year": {
            "display-name": "CardExpiry",
            "type": "optional<double>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "CardMerchantDetails": {
        "docs": undefined,
        "properties": {
          "MCC": {
            "display-name": "CardMerchantDetails",
            "type": "optional<string>",
          },
          "category": {
            "display-name": "CardMerchantDetails",
            "type": "optional<string>",
          },
          "city": {
            "display-name": "CardMerchantDetails",
            "type": "optional<string>",
          },
          "country": {
            "display-name": "CardMerchantDetails",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": 2,
              "minLength": 2,
              "pattern": undefined,
            },
          },
          "id": {
            "display-name": "CardMerchantDetails",
            "type": "optional<string>",
          },
          "postCode": {
            "display-name": "CardMerchantDetails",
            "type": "optional<string>",
          },
          "state": {
            "display-name": "CardMerchantDetails",
            "type": "optional<string>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "CardPaymentMethod": {
        "display-name": "CardPaymentMethod",
        "docs": "Classify the method of payment as "Card" for CardDetails
",
        "type": "literal<"CARD">",
      },
      "CaseClosedDetails": {
        "docs": undefined,
        "properties": {
          "caseId": {
            "display-name": "CaseClosedDetails",
            "type": "optional<string>",
          },
          "comment": {
            "display-name": "CaseClosedDetails",
            "type": "optional<string>",
          },
          "reasonDescriptionForOther": {
            "display-name": "CaseClosedDetails",
            "type": "optional<list<string>>",
          },
          "reasons": {
            "display-name": "CaseClosedDetails",
            "type": "optional<list<string>>",
          },
          "status": {
            "display-name": "CaseClosedDetails",
            "type": "optional<string>",
          },
          "transactionIds": {
            "display-name": "CaseClosedDetails",
            "type": "optional<list<string>>",
          },
          "userId": {
            "display-name": "CaseClosedDetails",
            "type": "optional<string>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "CaseManagementEvent": {
        "docs": "Model for case management events",
        "properties": {
          "caseStatus": {
            "docs": "Status of a case. E.g. Open, Closed etc.",
            "type": "CaseManagementEventCaseStatus",
          },
          "caseStatusReason": {
            "docs": "Case status reason. E.g. Closed & False Positive, Closed & Investigation Completed etc.",
            "type": "CaseManagementEventCaseStatusReason",
          },
          "caseStatusReasonDescription": {
            "display-name": "CaseManagementEvent",
            "docs": "Case status reason description",
            "type": "optional<string>",
          },
          "eventId": {
            "display-name": "CaseManagementEvent",
            "docs": "Event ID the case pertains to",
            "type": "optional<string>",
          },
          "timestamp": {
            "docs": "Timestamp of the event",
            "type": "double",
            "validation": {
              "exclusiveMax": undefined,
              "exclusiveMin": undefined,
              "max": undefined,
              "min": 1262300400000,
              "multipleOf": undefined,
            },
          },
          "transactionId": {
            "display-name": "CaseManagementEvent",
            "docs": "Transaction ID the case pertains to",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "userId": {
            "display-name": "CaseManagementEvent",
            "docs": "User ID the case pertains to",
            "type": "optional<string>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "CaseManagementEventCaseStatus": {
        "docs": "Status of a case. E.g. Open, Closed etc.",
        "enum": [
          "CLOSED",
          "HIT",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "CaseManagementEventCaseStatusReason": {
        "docs": "Case status reason. E.g. Closed & False Positive, Closed & Investigation Completed etc.",
        "enum": [
          "FALSE_POSITIVE",
          "INVESTIGATION_COMPLETED",
          "DOCUMENTS_COLLECTED",
          "OTHER",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "CheckDetails": {
        "docs": undefined,
        "properties": {
          "checkIdentifier": {
            "display-name": "CheckDetails",
            "type": "optional<string>",
          },
          "checkNumber": {
            "display-name": "CheckDetails",
            "type": "optional<string>",
          },
          "deliveryStatus": {
            "display-name": "CheckDetails",
            "type": "optional<CheckDetailsDeliveryStatus>",
          },
          "etaTimestamp": {
            "display-name": "CheckDetails",
            "type": "optional<double>",
            "validation": {
              "exclusiveMax": undefined,
              "exclusiveMin": undefined,
              "max": undefined,
              "min": 1262300400000,
              "multipleOf": undefined,
            },
          },
          "name": {
            "display-name": "CheckDetails",
            "type": "optional<string>",
          },
          "shippingAddress": {
            "display-name": "CheckDetails",
            "type": "optional<Address>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "CheckDetailsDeliveryStatus": {
        "enum": [
          "COMPLETED",
          "PENDING",
          "SETTLED",
          "CANCELED",
          "REFUND",
          "DECLINED",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "CheckPaymentMethod": {
        "display-name": "CheckPaymentMethod",
        "docs": "Classify the method of payment as "CHECK" for CheckDetails",
        "type": "literal<"CHECK">",
      },
      "CompanyFinancialDetails": {
        "docs": "Model for business user company financial details",
        "properties": {
          "expectedTransactionAmountPerMonth": {
            "display-name": "CompanyFinancialDetails",
            "type": "optional<Amount>",
          },
          "expectedTurnoverPerMonth": {
            "display-name": "CompanyFinancialDetails",
            "type": "optional<Amount>",
          },
          "tags": {
            "display-name": "CompanyFinancialDetails",
            "docs": "Additional information that can be added via tags",
            "type": "optional<list<Tag>>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "CompanyGeneralDetails": {
        "docs": "Model for business user company general details",
        "properties": {
          "businessIndustry": {
            "display-name": "CompanyGeneralDetails",
            "docs": "The industry the business operates in for a business customer",
            "type": "optional<list<string>>",
          },
          "legalName": {
            "docs": "Legal name of the company",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "mainProductsServicesSold": {
            "display-name": "CompanyGeneralDetails",
            "docs": "The key products and services provided by the company",
            "type": "optional<list<string>>",
          },
          "tags": {
            "display-name": "CompanyGeneralDetails",
            "docs": "Additional information that can be added via tags",
            "type": "optional<list<Tag>>",
          },
          "userRegistrationStatus": {
            "display-name": "CompanyGeneralDetails",
            "type": "optional<UserRegistrationStatus>",
          },
          "userSegment": {
            "display-name": "CompanyGeneralDetails",
            "docs": "Segmentation of the business user",
            "type": "optional<CompanyGeneralDetailsUserSegment>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "CompanyGeneralDetailsUserSegment": {
        "docs": "Segmentation of the business user",
        "enum": [
          "SOLE_PROPRIETORSHIP",
          "SMB",
          "SMALL",
          "MEDIUM",
          "LARGE",
          "UNKNOWN",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "CompanyRegistrationDetails": {
        "docs": "Model for business user company registration details",
        "properties": {
          "dateOfRegistration": {
            "display-name": "CompanyRegistrationDetails",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": "^(\\d{4}-\\d{2}-\\d{2})*$",
            },
          },
          "legalEntityType": {
            "display-name": "CompanyRegistrationDetails",
            "docs": "Type of legal entity. Ex: Limited Liability",
            "type": "optional<string>",
          },
          "registrationCountry": {
            "display-name": "CountryCode",
            "type": "CountryCode",
          },
          "registrationIdentifier": {
            "docs": "Commercial registry registration number for the company in its registration country",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "tags": {
            "display-name": "CompanyRegistrationDetails",
            "docs": "Additional information that can be added via tags",
            "type": "optional<list<Tag>>",
          },
          "taxIdentifier": {
            "display-name": "CompanyRegistrationDetails",
            "docs": "Tax ID number of the registered entity",
            "type": "optional<string>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "ConsumerName": {
        "docs": "Model for a generic consumer name",
        "properties": {
          "firstName": {
            "docs": "First name of the user",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "lastName": {
            "display-name": "ConsumerName",
            "docs": "Last name of the user",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "middleName": {
            "display-name": "ConsumerName",
            "docs": "Middle name of the user",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "ConsumerUsersResponse": {
        "docs": "Model for consumer user risk score response",
        "properties": {
          "userId": {
            "docs": "user ID the risk score pertains to",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "ContactDetails": {
        "docs": "Model for business user contact information details",
        "properties": {
          "addresses": {
            "display-name": "ContactDetails",
            "docs": "Address(es) of the company",
            "type": "optional<list<Address>>",
          },
          "contactNumbers": {
            "display-name": "ContactDetails",
            "docs": "Phone numbers to contact a given business customer",
            "type": "optional<list<string>>",
          },
          "emailIds": {
            "display-name": "ContactDetails",
            "docs": "Email addresses of the contacts for a given business customer",
            "type": "optional<list<string>>",
          },
          "faxNumbers": {
            "display-name": "ContactDetails",
            "docs": "Fax numbers to contact a business customer",
            "type": "optional<list<string>>",
          },
          "websites": {
            "display-name": "ContactDetails",
            "docs": "Website of the company",
            "type": "optional<list<string>>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "CountryCode": {
        "enum": [
          "AF",
          "AL",
          "DZ",
          "AS",
          "AD",
          "AO",
          "AI",
          "AQ",
          "AG",
          "AR",
          "AM",
          "AW",
          "AU",
          "AT",
          "AZ",
          "BS",
          "BH",
          "BD",
          "BB",
          "BY",
          "BE",
          "BZ",
          "BJ",
          "BM",
          "BT",
          "BO",
          "BQ",
          "BA",
          "BW",
          "BV",
          "BR",
          "IO",
          "BN",
          "BG",
          "BF",
          "BI",
          "CV",
          "KH",
          "CM",
          "CA",
          "KY",
          "CF",
          "TD",
          "CL",
          "CN",
          "CX",
          "CC",
          "CO",
          "KM",
          "CD",
          "CG",
          "CK",
          "CR",
          "HR",
          "CU",
          "CW",
          "CY",
          "CZ",
          "CI",
          "DK",
          "DJ",
          "DM",
          "DO",
          "EC",
          "EG",
          "SV",
          "GQ",
          "ER",
          "EE",
          "SZ",
          "ET",
          "FK",
          "FO",
          "FJ",
          "FI",
          "FR",
          "GF",
          "PF",
          "TF",
          "GA",
          "GM",
          "GE",
          "DE",
          "GH",
          "GI",
          "GR",
          "GL",
          "GD",
          "GP",
          "GU",
          "GT",
          "GG",
          "GN",
          "GW",
          "GY",
          "HT",
          "HM",
          "VA",
          "HN",
          "HK",
          "HU",
          "IS",
          "IN",
          "ID",
          "IR",
          "IQ",
          "IE",
          "IM",
          "IL",
          "IT",
          "JM",
          "JP",
          "JE",
          "JO",
          "KZ",
          "KE",
          "KI",
          "KP",
          "KR",
          "KW",
          "KG",
          "LA",
          "LV",
          "LB",
          "LS",
          "LR",
          "LY",
          "LI",
          "LT",
          "LU",
          "MO",
          "MG",
          "MW",
          "MY",
          "MV",
          "ML",
          "MT",
          "MH",
          "MQ",
          "MR",
          "MU",
          "YT",
          "MX",
          "FM",
          "MD",
          "MC",
          "MN",
          "ME",
          "MS",
          "MA",
          "MZ",
          "MM",
          "NA",
          "NR",
          "NP",
          "NL",
          "NC",
          "NZ",
          "NI",
          "NE",
          "NG",
          "NU",
          "NF",
          "MK",
          "MP",
          "NO",
          "OM",
          "PK",
          "PW",
          "PS",
          "PA",
          "PG",
          "PY",
          "PE",
          "PH",
          "PN",
          "PL",
          "PT",
          "PR",
          "QA",
          "RO",
          "RU",
          "RW",
          "RE",
          "BL",
          "SH",
          "KN",
          "LC",
          "MF",
          "PM",
          "VC",
          "WS",
          "SM",
          "ST",
          "SA",
          "SN",
          "RS",
          "SC",
          "SL",
          "SG",
          "SX",
          "SK",
          "SI",
          "SB",
          "SO",
          "ZA",
          "GS",
          "SS",
          "ES",
          "LK",
          "SD",
          "SR",
          "SJ",
          "SE",
          "CH",
          "SY",
          "TW",
          "TJ",
          "TZ",
          "TH",
          "TL",
          "TG",
          "TK",
          "TO",
          "TT",
          "TN",
          "TM",
          "TC",
          "TV",
          "TR",
          "UG",
          "UA",
          "AE",
          "GB",
          "UM",
          "US",
          "UY",
          "UZ",
          "VU",
          "VE",
          "VN",
          "VG",
          "VI",
          "WF",
          "EH",
          "YE",
          "ZM",
          "ZW",
          "AX",
          {
            "name": "NOT_APPLICABLE",
            "value": "N/A",
          },
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "CurrencyCode": {
        "enum": [
          {
            "name": "OneInch",
            "value": "1INCH",
          },
          "AAVE",
          "ADA",
          "AED",
          "AFN",
          "ALGO",
          "ALL",
          "AMD",
          "AMP",
          "ANG",
          "AOA",
          "AR",
          "ARS",
          "ATOM",
          "AUD",
          "AVAX",
          "AWG",
          "AXS",
          "AZN",
          "BAM",
          "BAT",
          "BBD",
          "BCH",
          "BDT",
          "BGN",
          "BHD",
          "BIF",
          "BMD",
          "BNB",
          "BND",
          "BOB",
          "BRL",
          "BSD",
          "BSV",
          "BTC",
          "BTCB",
          "BTG",
          "BTN",
          "BUSD",
          "BWP",
          "BYN",
          "BYR",
          "BZD",
          "CAD",
          "CAKE",
          "CDF",
          "CELO",
          "CHF",
          "CHZ",
          "CLF",
          "CLP",
          "CNY",
          "COMP",
          "COP",
          "CRC",
          "CRO",
          "CRV",
          "CUC",
          "CUP",
          "CVE",
          "CVX",
          "CZK",
          "DAI",
          "DASH",
          "DCR",
          "DFI",
          "DJF",
          "DKK",
          "DOGE",
          "DOP",
          "DOT",
          "DZD",
          "EGLD",
          "EGP",
          "ENJ",
          "EOS",
          "ERN",
          "ETB",
          "ETC",
          "ETH",
          "EUR",
          "FEI",
          "FIL",
          "FJD",
          "FKP",
          "FLOW",
          "FRAX",
          "FTM",
          "FTT",
          "GALA",
          "GBP",
          "GEL",
          "GGP",
          "GHS",
          "GIP",
          "GMD",
          "GNF",
          "GNO",
          "GRT",
          "GT",
          "GTQ",
          "GYD",
          "HBAR",
          "HKD",
          "HNL",
          "HNT",
          "HOT",
          "HRK",
          "HT",
          "HTG",
          "HUF",
          "ICP",
          "IDR",
          "ILS",
          "IMP",
          "INJ",
          "INR",
          "IQD",
          "IRR",
          "ISK",
          "JEP",
          "JMD",
          "JOD",
          "JPY",
          "KAVA",
          "KCS",
          "KDA",
          "KES",
          "KGS",
          "KHR",
          "KLAY",
          "KMF",
          "KNC",
          "KPW",
          "KRW",
          "KSM",
          "KWD",
          "KYD",
          "KZT",
          "LAK",
          "LBP",
          "LEO",
          "LINK",
          "LKR",
          "LRC",
          "LRD",
          "LSL",
          "LTC",
          "LTL",
          "LUNA",
          "LVL",
          "LYD",
          "MAD",
          "MANA",
          "MATIC",
          "MDL",
          "MGA",
          "MINA",
          "MIOTA",
          "MKD",
          "MKR",
          "MMK",
          "MNT",
          "MOP",
          "MRO",
          "MUR",
          "MVR",
          "MWK",
          "MXN",
          "MYR",
          "MZN",
          "NAD",
          "NEAR",
          "NEO",
          "NEXO",
          "NGN",
          "NIO",
          "NOK",
          "NPR",
          "NZD",
          "OKB",
          "OMR",
          "ONE",
          "PAB",
          "PAXG",
          "PEN",
          "PGK",
          "PHP",
          "PKR",
          "PLN",
          "PYG",
          "QAR",
          "QNT",
          "QTUM",
          "RON",
          "RSD",
          "RUB",
          "RUNE",
          "RWF",
          "SAND",
          "SAR",
          "SBD",
          "SCR",
          "SDG",
          "SEK",
          "SGD",
          "SHIB",
          "SHP",
          "SLE",
          "SLL",
          "SOL",
          "SOS",
          "SRD",
          "STD",
          "STX",
          "SVC",
          "SYP",
          "SZL",
          "THB",
          "THETA",
          "TJS",
          "TMT",
          "TND",
          "TOP",
          "TRX",
          "TRY",
          "TTD",
          "TTT",
          "TUSD",
          "TWD",
          "TZS",
          "UAH",
          "UGX",
          "UNI",
          "USD",
          "USDC",
          "USDP",
          "USDT",
          "UYU",
          "UZS",
          "VEF",
          "VET",
          "VND",
          "VUV",
          "WAVES",
          "WBTC",
          "WEMIX",
          "WST",
          "XAF",
          "XAG",
          "XAU",
          "XCD",
          "XCH",
          "XDC",
          "XDR",
          "XEC",
          "XEM",
          "XLM",
          "XMR",
          "XOF",
          "XPF",
          "XRP",
          "XTZ",
          "YER",
          "ZAR",
          "ZEC",
          "ZIL",
          "ZMK",
          "ZMW",
          "ZWL",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "Date": {
        "docs": "Model for date",
        "properties": {
          "day": {
            "docs": "Day of date",
            "type": "double",
          },
          "month": {
            "docs": "Month of date",
            "type": "double",
          },
          "year": {
            "docs": "Year of date",
            "type": "double",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "DeviceData": {
        "docs": "Model for device data",
        "properties": {
          "appVersion": {
            "display-name": "DeviceData",
            "docs": "The version of the app your user is using on their device at a given timestamp for an event or transaction",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "batteryLevel": {
            "display-name": "DeviceData",
            "docs": "Battery level of the device used for a transaction or event at a given timestamp",
            "type": "optional<double>",
          },
          "deviceIdentifier": {
            "display-name": "DeviceData",
            "docs": "Device identifier number",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "deviceLatitude": {
            "display-name": "DeviceData",
            "docs": "Device latitude at a give timestamp for an event or transaction",
            "type": "optional<double>",
          },
          "deviceLongitude": {
            "display-name": "DeviceData",
            "docs": "Device longitude at a give timestamp for an event or transaction",
            "type": "optional<double>",
          },
          "deviceMaker": {
            "display-name": "DeviceData",
            "docs": "The maker of the device at a given timestamp for an event or transaction",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "deviceModel": {
            "display-name": "DeviceData",
            "docs": "The model of the device at a given timestamp for an event or transaction",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "deviceYear": {
            "display-name": "DeviceData",
            "docs": "The year the device was manufactured at a given timestamp for an event or transaction",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "ipAddress": {
            "display-name": "DeviceData",
            "docs": "IP address of the device at a given timestamp for an event or transaction",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "operatingSystem": {
            "display-name": "DeviceData",
            "docs": "Operating system of the device at a given timestamp for an event or transaction",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "vpnUsed": {
            "display-name": "DeviceData",
            "docs": "Whether VPN was used at a given timestamp for an event or transaction",
            "type": "optional<boolean>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "ExecutedRulesResult": {
        "docs": "Model for list of executed rules",
        "properties": {
          "labels": {
            "display-name": "ExecutedRulesResult",
            "type": "optional<list<RuleLabels>>",
          },
          "nature": {
            "display-name": "ExecutedRulesResult",
            "type": "optional<RuleNature>",
          },
          "ruleAction": {
            "display-name": "RuleAction",
            "type": "RuleAction",
          },
          "ruleDescription": {
            "docs": "Description of the rule",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "ruleHit": "boolean",
          "ruleHitMeta": {
            "display-name": "ExecutedRulesResult",
            "type": "optional<RuleHitMeta>",
          },
          "ruleId": {
            "docs": "Unique rule identifier",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "ruleInstanceId": "string",
          "ruleName": {
            "docs": "Name of the rule",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "FailedRulesResult": {
        "docs": "Model for list of rules failed execution. It means rules could not be run",
        "properties": {
          "failureException": {
            "display-name": "RuleFailureException",
            "type": "RuleFailureException",
          },
          "ruleDescription": {
            "docs": "Description of the rule",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "ruleId": {
            "docs": "Unique rule identifier",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "ruleName": {
            "docs": "Name of the rule",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "FalsePositiveDetails": {
        "docs": undefined,
        "properties": {
          "confidenceScore": "double",
          "isFalsePositive": "boolean",
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "GeneralBankAccountPaymentMethod": {
        "display-name": "GeneralBankAccountPaymentMethod",
        "docs": "Classify the method of payment as "GENERIC_BANK_ACCOUNT" for GenericBankAccountDetails",
        "type": "literal<"GENERIC_BANK_ACCOUNT">",
      },
      "GenericBankAccountDetails": {
        "docs": "Model for any generic bank account",
        "properties": {
          "accountNumber": {
            "display-name": "GenericBankAccountDetails",
            "docs": "Bank account number",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "accountType": {
            "display-name": "GenericBankAccountDetails",
            "docs": "Bank account type. E.g. Checking, Savings etc.",
            "type": "optional<string>",
          },
          "bankAddress": {
            "display-name": "GenericBankAccountDetails",
            "type": "optional<Address>",
          },
          "bankCode": {
            "display-name": "GenericBankAccountDetails",
            "docs": "Unique identifier of the bank. In some countries, this can be the same as the bank's SWIFT code",
            "type": "optional<string>",
          },
          "bankName": {
            "display-name": "GenericBankAccountDetails",
            "docs": "Name of the bank",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "name": {
            "display-name": "GenericBankAccountDetails",
            "docs": "Name of the account holder",
            "type": "optional<string>",
          },
          "paymentChannel": {
            "display-name": "GenericBankAccountDetails",
            "type": "optional<string>",
          },
          "specialInstructions": {
            "display-name": "GenericBankAccountDetails",
            "docs": "Special instructions to be specified if any",
            "type": "optional<string>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "HitRulesDetails": {
        "docs": "Model for list of hit rules",
        "properties": {
          "labels": {
            "display-name": "HitRulesDetails",
            "type": "optional<list<RuleLabels>>",
          },
          "nature": {
            "display-name": "HitRulesDetails",
            "type": "optional<RuleNature>",
          },
          "ruleAction": {
            "display-name": "RuleAction",
            "type": "RuleAction",
          },
          "ruleDescription": {
            "docs": "Description of the rule",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "ruleHitMeta": {
            "display-name": "HitRulesDetails",
            "type": "optional<RuleHitMeta>",
          },
          "ruleId": {
            "docs": "Unique rule identifier",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "ruleInstanceId": "string",
          "ruleName": {
            "docs": "Name of the rule",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "IBANDetails": {
        "docs": "Standardized model for Bank Details",
        "properties": {
          "BIC": {
            "display-name": "IBANDetails",
            "docs": "Identifier for the bank. Can be routing number, BIK number, SWIFT code, BIC number etc.",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "IBAN": {
            "display-name": "IBANDetails",
            "docs": "Account number of the user. Can be account number, IBAN number etc.",
            "type": "optional<string>",
          },
          "bankAddress": {
            "display-name": "IBANDetails",
            "type": "optional<Address>",
          },
          "bankBranchCode": {
            "display-name": "IBANDetails",
            "docs": "Branch code of the bank. In some countries, this can be the same as the bank's SWIFT code",
            "type": "optional<string>",
          },
          "bankName": {
            "display-name": "IBANDetails",
            "docs": "Name of the bank",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "country": {
            "display-name": "IBANDetails",
            "type": "optional<CountryCode>",
          },
          "name": {
            "display-name": "IBANDetails",
            "docs": "Name of the bank account holder",
            "type": "optional<string>",
          },
          "paymentChannel": {
            "display-name": "IBANDetails",
            "type": "optional<string>",
          },
          "tags": {
            "display-name": "IBANDetails",
            "type": "optional<Tag>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "IBANPaymentMethod": {
        "display-name": "IBANPaymentMethod",
        "docs": "Classify the method of payment as "IBAN" for IBANDetails
",
        "type": "literal<"IBAN">",
      },
      "KYCStatus": {
        "enum": [
          "SUCCESSFUL",
          "FAILED",
          "NOT_STARTED",
          "IN_PROGRESS",
          "MANUAL_REVIEW",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "KYCStatusDetails": {
        "docs": undefined,
        "properties": {
          "reason": {
            "display-name": "KYCStatusDetails",
            "type": "optional<string>",
          },
          "status": {
            "display-name": "KYCStatusDetails",
            "type": "optional<KYCStatus>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "LegalDocument": {
        "docs": "LegalDocument model generalizes User's identity document type (ex: Passport)",
        "properties": {
          "documentExpirationDate": {
            "display-name": "LegalDocument",
            "docs": "User's identity document expiration date (UNIX timestamp in milliseconds)",
            "type": "optional<double>",
          },
          "documentIssuedCountry": {
            "display-name": "CountryCode",
            "type": "CountryCode",
          },
          "documentIssuedDate": {
            "display-name": "LegalDocument",
            "docs": "User's identity document issuance date (UNIX timestamp in milliseconds)",
            "type": "optional<double>",
          },
          "documentNumber": {
            "docs": "User's unique identity document number such as passport number",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "documentType": {
            "docs": "User's identity document type such as passport, national ID etc.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "nameOnDocument": {
            "display-name": "LegalDocument",
            "type": "optional<ConsumerName>",
          },
          "tags": {
            "display-name": "LegalDocument",
            "docs": "Additional information that can be added via tags",
            "type": "optional<list<Tag>>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "LegalEntity": {
        "docs": "Model for business user legal entity details",
        "properties": {
          "companyFinancialDetails": {
            "display-name": "LegalEntity",
            "type": "optional<CompanyFinancialDetails>",
          },
          "companyGeneralDetails": {
            "display-name": "CompanyGeneralDetails",
            "type": "CompanyGeneralDetails",
          },
          "companyRegistrationDetails": {
            "display-name": "LegalEntity",
            "type": "optional<CompanyRegistrationDetails>",
          },
          "contactDetails": {
            "display-name": "LegalEntity",
            "type": "optional<ContactDetails>",
          },
          "reasonForAccountOpening": {
            "display-name": "LegalEntity",
            "docs": "Reason for opening the account at financial institution",
            "type": "optional<list<string>>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "ListData": {
        "docs": "Payload of a list, new or existed",
        "properties": {
          "items": {
            "display-name": "ListData",
            "docs": "List items",
            "type": "optional<list<ListItem>>",
          },
          "metadata": {
            "display-name": "ListData",
            "type": "optional<ListMetadata>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "ListExisted": {
        "docs": "List with ID and header",
        "properties": {
          "header": {
            "display-name": "ListHeader",
            "type": "ListHeader",
          },
          "items": {
            "docs": "List items",
            "type": "list<ListItem>",
          },
          "listId": "string",
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "ListHeader": {
        "docs": undefined,
        "properties": {
          "createdTimestamp": "double",
          "listId": "string",
          "listType": "ListType",
          "metadata": {
            "display-name": "ListHeader",
            "type": "optional<ListMetadata>",
          },
          "size": "double",
          "subtype": "ListSubtype",
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "ListItem": {
        "docs": undefined,
        "properties": {
          "key": "string",
          "metadata": {
            "display-name": "ListItem",
            "type": "optional<ListKeyMetadata>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "ListKeyMetadata": {
        "display-name": "ListKeyMetadata",
        "type": "map<string, unknown>",
      },
      "ListMetadata": {
        "docs": undefined,
        "extra-properties": true,
        "properties": {
          "checksum": {
            "display-name": "ListMetadata",
            "type": "optional<string>",
          },
          "description": {
            "display-name": "ListMetadata",
            "docs": "List description",
            "type": "optional<string>",
          },
          "name": {
            "display-name": "ListMetadata",
            "docs": "List name",
            "type": "optional<string>",
          },
          "status": {
            "display-name": "ListMetadata",
            "type": "optional<boolean>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "ListSubtype": {
        "enum": [
          "USER_ID",
          "CARD_FINGERPRINT_NUMBER",
          "IBAN_NUMBER",
          "BANK_ACCOUNT_NUMBER",
          "ACH_ACCOUNT_NUMBER",
          "SWIFT_ACCOUNT_NUMBER",
          "BIC",
          "BANK_SWIFT_CODE",
          "UPI_IDENTIFYING_NUMBER",
          "IP_ADDRESS",
          "STRING",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "ListType": {
        "enum": [
          "WHITELIST",
          "BLACKLIST",
          "FLAGRIGHT_LIBRARY",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "MCCDetails": {
        "docs": undefined,
        "properties": {
          "code": {
            "docs": "Merchant code",
            "type": "double",
          },
          "description": {
            "display-name": "MCCDetails",
            "docs": "Merchant Description",
            "type": "optional<string>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "MpesaDetails": {
        "docs": "Model for Mpesa payment method",
        "properties": {
          "businessShortCode": {
            "docs": "Business code",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "phoneNumber": {
            "docs": "Contact Number of the account holder",
            "type": "string",
          },
          "transactionType": {
            "docs": "Type of transaction",
            "type": "MpesaDetailsTransactionType",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "MpesaDetailsTransactionType": {
        "docs": "Type of transaction",
        "enum": [
          "CustomerPayBillOnline",
          "CustomerBuyGoodsOnline",
          "SalaryPayment",
          "BusinessPayment",
          "PromotionPayment",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "MpesaPaymentMethod": {
        "display-name": "MpesaPaymentMethod",
        "docs": "Classify the method of payment as "Mpesa" for MpesaDetails",
        "type": "literal<"MPESA">",
      },
      "PEPStatus": {
        "docs": undefined,
        "properties": {
          "isPepHit": "boolean",
          "pepCountry": {
            "display-name": "PEPStatus",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": 2,
              "minLength": 2,
              "pattern": undefined,
            },
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "PaymentMethod": {
        "enum": [
          "ACH",
          "CARD",
          "IBAN",
          "UPI",
          "GENERIC_BANK_ACCOUNT",
          "MPESA",
          "SWIFT",
          "WALLET",
          "CHECK",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "Person": {
        "docs": "Model for a generic individual - different from User model by not having userId field",
        "properties": {
          "contactDetails": {
            "display-name": "Person",
            "type": "optional<ContactDetails>",
          },
          "generalDetails": {
            "display-name": "UserDetails",
            "type": "UserDetails",
          },
          "legalDocuments": {
            "display-name": "Person",
            "docs": "User's legal identity documents - See Document Model for details",
            "type": "optional<list<LegalDocument>>",
          },
          "pepStatus": {
            "display-name": "Person",
            "type": "optional<list<PEPStatus>>",
          },
          "tags": {
            "display-name": "Person",
            "docs": "Additional information that can be added via tags",
            "type": "optional<list<Tag>>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "PostBusinessUserResponse": {
        "docs": undefined,
        "extends": [
          "RulesResults",
        ],
        "properties": {
          "message": "optional<string>",
          "userId": {
            "docs": "user ID the risk score pertains to",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "PostConsumerTransactionResponse": {
        "docs": undefined,
        "extends": [
          "TransactionMonitoringResult",
        ],
        "properties": {
          "message": "optional<string>",
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "PostConsumerUserResponse": {
        "docs": undefined,
        "extends": [
          "RulesResults",
        ],
        "properties": {
          "message": "optional<string>",
          "userId": {
            "docs": "user ID the risk score pertains to",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "RiskLevel": {
        "enum": [
          "VERY_HIGH",
          "HIGH",
          "MEDIUM",
          "LOW",
          "VERY_LOW",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "RiskScoringResult": {
        "docs": "Model for results from Risk Scoring",
        "properties": {
          "customerRiskAssessment": {
            "display-name": "RiskScoringResult",
            "docs": "Quantified dynamic risk score",
            "type": "optional<double>",
          },
          "kycRiskScore": {
            "docs": "Quantified KYC risk score",
            "type": "double",
          },
          "transactionRiskScore": {
            "docs": "Quantified action risk score",
            "type": "double",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "RuleAction": {
        "docs": "Model for rule action if a rule is hit. This is returned in the API response and can be configured on Console by operational accounts like a Compliance Analyst",
        "enum": [
          "ALLOW",
          "FLAG",
          "BLOCK",
          "SUSPEND",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "RuleFailureException": {
        "docs": undefined,
        "properties": {
          "exceptionDescription": {
            "docs": "Name of the rule",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "exceptionName": {
            "docs": "Unique rule identifier",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "RuleHitDirection": {
        "enum": [
          "ORIGIN",
          "DESTINATION",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "RuleHitMeta": {
        "docs": "Details of rule execution, for internal purposes only",
        "properties": {
          "falsePositiveDetails": "optional<FalsePositiveDetails>",
          "hitDirections": "optional<list<RuleHitDirection>>",
          "sanctionsDetails": "optional<list<SanctionsDetails>>",
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "RuleLabels": {
        "enum": [
          "UNEXPECTED_BEHAVIOR",
          "ILLICIT_GAINS_CHECK",
          "RFI_TRIGGER",
          "EDD_TRIGGER",
          "KYC_TRIGGER",
          "SCAM",
          "ABUSE",
          "ACCOUNT_TAKEOVER",
          "DISPUTE",
          "SANCTIONS",
          "SANCTIONS_PEP",
          "SANCTIONS_PEP_ADVERSE_MEDIA",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "RuleNature": {
        "enum": [
          "AML",
          "FRAUD",
          "CTF",
          "SCREENING",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "RulesResults": {
        "docs": undefined,
        "properties": {
          "executedRules": {
            "docs": "Unique transaction identifier",
            "type": "list<ExecutedRulesResult>",
          },
          "hitRules": {
            "docs": "Unique transaction identifier",
            "type": "list<HitRulesDetails>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "SWIFTDetails": {
        "docs": "Model for SWIFT payment method",
        "properties": {
          "accountNumber": {
            "display-name": "SWIFTDetails",
            "docs": "Account number",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "accountType": {
            "display-name": "SWIFTDetails",
            "docs": "Account type. E.g. Checking, Savings etc.",
            "type": "optional<string>",
          },
          "bankAddress": {
            "display-name": "SWIFTDetails",
            "type": "optional<Address>",
          },
          "bankName": {
            "display-name": "SWIFTDetails",
            "docs": "Name of the bank",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "name": {
            "display-name": "SWIFTDetails",
            "docs": "Name of the account holder",
            "type": "optional<string>",
          },
          "specialInstructions": {
            "display-name": "SWIFTDetails",
            "docs": "Special instructions if any",
            "type": "optional<string>",
          },
          "swiftCode": {
            "display-name": "SWIFTDetails",
            "docs": "SWIFT code of the financial institution",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "SWIFTPaymentMethod": {
        "display-name": "SWIFTPaymentMethod",
        "docs": "Classify the method of payment as "SWIFT" for SWIFTDetails",
        "type": "literal<"SWIFT">",
      },
      "SanctionsDetails": {
        "docs": undefined,
        "properties": {
          "entityType": {
            "display-name": "SanctionsDetails",
            "type": "optional<SanctionsDetailsEntityType>",
          },
          "name": "string",
          "searchId": "string",
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "SanctionsDetailsEntityType": {
        "enum": [
          "CONSUMER_NAME",
          "LEGAL_NAME",
          "SHAREHOLDER",
          "DIRECTOR",
          "NAME_ON_CARD",
          "PAYMENT_NAME",
          "PAYMENT_BENEFICIARY_NAME",
          "BANK_NAME",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "Tag": {
        "docs": "Generic key-value pair model to append a custom variable being sent to Flagright API",
        "properties": {
          "key": {
            "docs": "Key value when you are creating a custom variable",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "value": {
            "docs": "Value for a given key when you are creating a custom variable",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "Thing": {
        "docs": undefined,
        "properties": {
          "publishedAt": "optional<string>",
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "Transaction": {
        "docs": undefined,
        "extends": [
          "TransactionBase",
          "TransactionUpdatable",
        ],
        "properties": {},
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "TransactionAmountDetails": {
        "docs": "Model for transaction amount details",
        "properties": {
          "country": {
            "display-name": "TransactionAmountDetails",
            "type": "optional<CountryCode>",
          },
          "transactionAmount": {
            "docs": "Amount of the transaction",
            "type": "double",
          },
          "transactionCurrency": {
            "display-name": "CurrencyCode",
            "type": "CurrencyCode",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "TransactionAmountLimit": {
        "docs": undefined,
        "properties": {
          "day": {
            "display-name": "TransactionAmountLimit",
            "type": "optional<Amount>",
          },
          "month": {
            "display-name": "TransactionAmountLimit",
            "type": "optional<Amount>",
          },
          "week": {
            "display-name": "TransactionAmountLimit",
            "type": "optional<Amount>",
          },
          "year": {
            "display-name": "TransactionAmountLimit",
            "type": "optional<Amount>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "TransactionBase": {
        "docs": "Model for transaction base Payload",
        "properties": {
          "destinationUserId": {
            "display-name": "TransactionBase",
            "docs": "UserId for transaction's destination. In other words, where the value is being transferred to.",
            "type": "optional<string>",
          },
          "originUserId": {
            "display-name": "TransactionBase",
            "docs": "UserId for where the transaction originates from",
            "type": "optional<string>",
          },
          "timestamp": {
            "docs": "Timestamp of when transaction took place",
            "type": "double",
            "validation": {
              "exclusiveMax": undefined,
              "exclusiveMin": undefined,
              "max": 4133890801000,
              "min": 1262300400000,
              "multipleOf": undefined,
            },
          },
          "transactionId": {
            "docs": "Unique transaction identifier",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "type": {
            "display-name": "TransactionBase",
            "type": "optional<TransactionType>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "TransactionCountLimit": {
        "docs": undefined,
        "properties": {
          "day": {
            "display-name": "TransactionCountLimit",
            "type": "optional<double>",
          },
          "month": {
            "display-name": "TransactionCountLimit",
            "type": "optional<double>",
          },
          "week": {
            "display-name": "TransactionCountLimit",
            "type": "optional<double>",
          },
          "year": {
            "display-name": "TransactionCountLimit",
            "type": "optional<double>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "TransactionEventMonitoringResult": {
        "docs": undefined,
        "extends": [
          "RulesResults",
        ],
        "properties": {
          "eventId": "string",
          "transaction": "Transaction",
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "TransactionLimit": {
        "docs": undefined,
        "properties": {
          "averageTransactionAmountLimit": {
            "display-name": "TransactionLimit",
            "type": "optional<TransactionAmountLimit>",
          },
          "transactionAmountLimit": {
            "display-name": "TransactionLimit",
            "type": "optional<TransactionAmountLimit>",
          },
          "transactionCountLimit": {
            "display-name": "TransactionLimit",
            "type": "optional<TransactionCountLimit>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "TransactionLimits": {
        "docs": "Model for transaction limits for a given user",
        "properties": {
          "maximumDailyTransactionLimit": {
            "display-name": "TransactionLimits",
            "type": "optional<Amount>",
          },
          "maximumMonthlyTransactionLimit": {
            "display-name": "TransactionLimits",
            "type": "optional<Amount>",
          },
          "maximumQuarterlyTransactionLimit": {
            "display-name": "TransactionLimits",
            "type": "optional<Amount>",
          },
          "maximumTransactionLimit": {
            "display-name": "TransactionLimits",
            "type": "optional<Amount>",
          },
          "maximumWeeklyTransactionLimit": {
            "display-name": "TransactionLimits",
            "type": "optional<Amount>",
          },
          "maximumYearlyTransactionLimit": {
            "display-name": "TransactionLimits",
            "type": "optional<Amount>",
          },
          "paymentMethodLimits": {
            "display-name": "TransactionLimits",
            "type": "optional<TransactionLimitsPaymentMethodLimits>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "TransactionLimitsPaymentMethodLimits": {
        "docs": undefined,
        "properties": {
          "ACH": "optional<TransactionLimit>",
          "CARD": "optional<TransactionLimit>",
          "CHECK": "optional<TransactionLimit>",
          "GENERIC_BANK_ACCOUNT": "optional<TransactionLimit>",
          "IBAN": "optional<TransactionLimit>",
          "MPESA": "optional<TransactionLimit>",
          "SWIFT": "optional<TransactionLimit>",
          "UPI": "optional<TransactionLimit>",
          "WALLET": "optional<TransactionLimit>",
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "TransactionMonitoringResult": {
        "docs": undefined,
        "extends": [
          "RulesResults",
        ],
        "properties": {
          "transactionId": {
            "docs": "Transaction ID that the results pertain to",
            "type": "string",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "TransactionState": {
        "docs": "Model for transaction states. E.g. Processing, Refunded, Successful etc.",
        "enum": [
          "CREATED",
          "PROCESSING",
          "SENT",
          "EXPIRED",
          "DECLINED",
          "SUSPENDED",
          "REFUNDED",
          "SUCCESSFUL",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "TransactionType": {
        "enum": [
          "DEPOSIT",
          "TRANSFER",
          "EXTERNAL_PAYMENT",
          "WITHDRAWAL",
          "REFUND",
          "OTHER",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "TransactionUpdatable": {
        "docs": "Model for transaction additional payload",
        "properties": {
          "destinationAmountDetails": {
            "display-name": "TransactionUpdatable",
            "type": "optional<TransactionAmountDetails>",
          },
          "destinationPaymentDetails": {
            "display-name": "TransactionUpdatable",
            "docs": "Payment details of the destination. It can be a bank account number, wallet ID, card fingerprint etc.",
            "type": "optional<TransactionUpdatableDestinationPaymentDetails>",
          },
          "deviceData": {
            "display-name": "TransactionUpdatable",
            "type": "optional<DeviceData>",
          },
          "originAmountDetails": {
            "display-name": "TransactionUpdatable",
            "type": "optional<TransactionAmountDetails>",
          },
          "originPaymentDetails": {
            "display-name": "TransactionUpdatable",
            "docs": "Payment details of the origin. It can be a bank account number, wallet ID, card fingerprint etc.",
            "type": "optional<TransactionUpdatableOriginPaymentDetails>",
          },
          "productType": {
            "display-name": "TransactionUpdatable",
            "docs": "Type of produce being used by the consumer (ex wallets, payments etc)",
            "type": "optional<string>",
          },
          "promotionCodeUsed": {
            "display-name": "TransactionUpdatable",
            "docs": "Whether a promotion code was used or not the transaction",
            "type": "optional<boolean>",
          },
          "reference": {
            "display-name": "TransactionUpdatable",
            "docs": "Reference field for the transaction indicating the purpose of the transaction etc.",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "relatedTransactionIds": {
            "display-name": "TransactionUpdatable",
            "docs": "IDs of transactions related to this transaction. Ex: refund, split bills",
            "type": "optional<list<string>>",
          },
          "tags": {
            "display-name": "TransactionUpdatable",
            "docs": "Additional information that can be added via tags",
            "type": "optional<list<Tag>>",
          },
          "transactionState": {
            "display-name": "TransactionUpdatable",
            "type": "optional<TransactionState>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "TransactionUpdatableDestinationPaymentDetails": {
        "availability": undefined,
        "base-properties": {},
        "discriminant": "method",
        "docs": "Payment details of the destination. It can be a bank account number, wallet ID, card fingerprint etc.",
        "encoding": undefined,
        "source": {
          "openapi": "flagright/openapi.yml",
        },
        "union": {
          "ACH": {
            "display-name": "ACHDetails",
            "type": "ACHDetails",
          },
          "CARD": {
            "display-name": "CardDetails",
            "type": "CardDetails",
          },
          "CHECK": {
            "display-name": "CheckDetails",
            "type": "CheckDetails",
          },
          "GENERIC_BANK_ACCOUNT": {
            "display-name": "GenericBankAccountDetails",
            "type": "GenericBankAccountDetails",
          },
          "IBAN": {
            "display-name": "IBANDetails",
            "type": "IBANDetails",
          },
          "MPESA": {
            "display-name": "MpesaDetails",
            "type": "MpesaDetails",
          },
          "SWIFT": {
            "display-name": "SWIFTDetails",
            "type": "SWIFTDetails",
          },
          "UPI": {
            "display-name": "UPIDetails",
            "type": "UPIDetails",
          },
          "WALLET": {
            "display-name": "WalletDetails",
            "type": "WalletDetails",
          },
        },
      },
      "TransactionUpdatableOriginPaymentDetails": {
        "availability": undefined,
        "base-properties": {},
        "discriminant": "method",
        "docs": "Payment details of the origin. It can be a bank account number, wallet ID, card fingerprint etc.",
        "encoding": undefined,
        "source": {
          "openapi": "flagright/openapi.yml",
        },
        "union": {
          "ACH": {
            "display-name": "ACHDetails",
            "type": "ACHDetails",
          },
          "CARD": {
            "display-name": "CardDetails",
            "type": "CardDetails",
          },
          "CHECK": {
            "display-name": "CheckDetails",
            "type": "CheckDetails",
          },
          "GENERIC_BANK_ACCOUNT": {
            "display-name": "GenericBankAccountDetails",
            "type": "GenericBankAccountDetails",
          },
          "IBAN": {
            "display-name": "IBANDetails",
            "type": "IBANDetails",
          },
          "MPESA": {
            "display-name": "MpesaDetails",
            "type": "MpesaDetails",
          },
          "SWIFT": {
            "display-name": "SWIFTDetails",
            "type": "SWIFTDetails",
          },
          "UPI": {
            "display-name": "UPIDetails",
            "type": "UPIDetails",
          },
          "WALLET": {
            "display-name": "WalletDetails",
            "type": "WalletDetails",
          },
        },
      },
      "TransactionWithRulesResult": {
        "docs": "Model for transaction payload with rules result",
        "extends": [
          "Transaction",
        ],
        "properties": {
          "executedRules": "list<ExecutedRulesResult>",
          "hitRules": "list<HitRulesDetails>",
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "UPIDetails": {
        "docs": "Model for UPI payment method",
        "properties": {
          "bankProvider": {
            "display-name": "UPIDetails",
            "docs": "Bank provider name",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "interfaceProvider": {
            "display-name": "UPIDetails",
            "docs": "Interface provider name",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "name": {
            "display-name": "UPIDetails",
            "docs": "Name of the account holder",
            "type": "optional<string>",
          },
          "upiID": {
            "docs": "UPI Id number",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "UPIPaymentMethod": {
        "display-name": "UPIPaymentMethod",
        "docs": "Classify the method of payment as "UPI" for UPIDetails",
        "type": "literal<"UPI">",
      },
      "User": {
        "docs": "Model for User details",
        "extends": [
          "UserBase",
          "UserOptional",
        ],
        "properties": {},
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "UserBase": {
        "docs": "Model for User details",
        "properties": {
          "createdTimestamp": {
            "docs": "Timestamp when userId is created",
            "type": "double",
            "validation": {
              "exclusiveMax": undefined,
              "exclusiveMin": undefined,
              "max": 4133890801000,
              "min": 1262300400000,
              "multipleOf": undefined,
            },
          },
          "userDetails": {
            "display-name": "UserBase",
            "type": "optional<UserDetails>",
          },
          "userId": {
            "docs": "Unique user ID",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "UserDetails": {
        "docs": "Model for consumer user personal details",
        "properties": {
          "countryOfNationality": {
            "display-name": "UserDetails",
            "type": "optional<CountryCode>",
          },
          "countryOfResidence": {
            "display-name": "UserDetails",
            "type": "optional<CountryCode>",
          },
          "dateOfBirth": {
            "display-name": "UserDetails",
            "docs": "Date of birth of the user (YYYY-MM-DD)",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": "^(\\d{4}-\\d{2}-\\d{2})*$",
            },
          },
          "gender": {
            "display-name": "UserDetails",
            "docs": "Gender of the individual - Male, Female or Non-Binary",
            "type": "optional<UserDetailsGender>",
          },
          "name": {
            "display-name": "ConsumerName",
            "type": "ConsumerName",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "UserDetailsGender": {
        "docs": "Gender of the individual - Male, Female or Non-Binary",
        "enum": [
          "M",
          "F",
          "NB",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "UserMonitoringResult": {
        "docs": undefined,
        "extends": [
          "RulesResults",
        ],
        "properties": {
          "userId": {
            "docs": "User ID that the results pertain to",
            "type": "string",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "UserOptional": {
        "docs": "Model for User details",
        "properties": {
          "acquisitionChannel": {
            "display-name": "UserOptional",
            "type": "optional<AcquisitionChannel>",
          },
          "contactDetails": {
            "display-name": "UserOptional",
            "type": "optional<ContactDetails>",
          },
          "kycStatusDetails": {
            "display-name": "UserOptional",
            "type": "optional<KYCStatusDetails>",
          },
          "legalDocuments": {
            "display-name": "UserOptional",
            "docs": "User's legal identity documents - See Document Model for details",
            "type": "optional<list<LegalDocument>>",
          },
          "pepStatus": {
            "display-name": "UserOptional",
            "type": "optional<list<PEPStatus>>",
          },
          "reasonForAccountOpening": {
            "display-name": "UserOptional",
            "type": "optional<list<string>>",
          },
          "riskLevel": {
            "display-name": "UserOptional",
            "type": "optional<RiskLevel>",
          },
          "tags": {
            "display-name": "UserOptional",
            "docs": "Additional information that can be added via tags",
            "type": "optional<list<Tag>>",
          },
          "transactionLimits": {
            "display-name": "UserOptional",
            "type": "optional<TransactionLimits>",
          },
          "userSegment": {
            "display-name": "UserOptional",
            "type": "optional<UserOptionalUserSegment>",
          },
          "userStateDetails": {
            "display-name": "UserOptional",
            "type": "optional<UserStateDetails>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "UserOptionalUserSegment": {
        "enum": [
          "RETAIL",
          "PROFESSIONAL",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "UserRegistrationStatus": {
        "enum": [
          "REGISTERED",
          "UNREGISTERED",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "UserState": {
        "enum": [
          "UNACCEPTABLE",
          "UNDECIDED",
          "TERMINATED",
          "ACTIVE",
          "INACTIVE",
          "DORMANT",
          "CREATED",
          "DELETED",
          "SUSPENDED",
          "BLOCKED",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "UserStateDetails": {
        "docs": undefined,
        "properties": {
          "reason": {
            "display-name": "UserStateDetails",
            "type": "optional<string>",
          },
          "state": {
            "display-name": "UserState",
            "type": "UserState",
          },
          "userId": {
            "display-name": "UserStateDetails",
            "type": "optional<string>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "UserWithRulesResult": {
        "docs": "Model for consumer user payload with rules result",
        "extends": [
          "User",
        ],
        "properties": {
          "executedRules": "optional<list<ExecutedRulesResult>>",
          "hitRules": "optional<list<HitRulesDetails>>",
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "WalletDetails": {
        "docs": "Standardized model for a Generic wallet transaction",
        "properties": {
          "name": {
            "display-name": "WalletDetails",
            "docs": "Name of the account holder for a specific wallet",
            "type": "optional<string>",
          },
          "paymentChannel": {
            "display-name": "WalletDetails",
            "docs": "Payment Channel used through wallet",
            "type": "optional<string>",
          },
          "tags": {
            "display-name": "WalletDetails",
            "type": "optional<Tag>",
          },
          "walletId": {
            "display-name": "WalletDetails",
            "docs": "Unique ID of the wallet",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "walletPhoneNumber": {
            "display-name": "WalletDetails",
            "docs": "Phone number associated with the wallet, if any",
            "type": "optional<string>",
          },
          "walletType": {
            "docs": "Wallet type if there are various types of wallets belonging to the same user. E.g. Checking, savings, vault, different currency wallets etc.",
            "type": "string",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "WalletPaymentMethod": {
        "display-name": "WalletPaymentMethod",
        "docs": "Classify the method of payment as "Wallet" for WalletDetails",
        "type": "literal<"WALLET">",
      },
      "WebhookEvent": {
        "docs": undefined,
        "properties": {
          "createdTimestamp": {
            "type": "double",
            "validation": {
              "exclusiveMax": undefined,
              "exclusiveMin": undefined,
              "max": undefined,
              "min": 1262300400000,
              "multipleOf": undefined,
            },
          },
          "data": {
            "display-name": "UserStateDetails",
            "type": "UserStateDetails",
          },
          "id": "string",
          "type": {
            "display-name": "WebhookEventType",
            "type": "WebhookEventType",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "WebhookEventType": {
        "enum": [
          "CASE_CLOSED",
          "USER_STATE_UPDATED",
          "ALERT_CLOSED",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
    },
  },
  "rootApiFile": {
    "auth": "x-api-key",
    "auth-schemes": {
      "x-api-key": {
        "header": "x-api-key",
        "name": "apiKey",
        "type": "string",
      },
    },
    "default-environment": "Default",
    "display-name": "Flagright API",
    "environments": {
      "Default": "https://sandbox.api.flagright.com",
    },
    "error-discrimination": {
      "strategy": "status-code",
    },
    "name": "api",
  },
}
`;

exports[`open api parser > flagright > simple 1`] = `
{
  "definitionFiles": {},
  "packageMarkerFile": {
    "errors": {
      "BadRequestError": {
        "docs": "Bad Request",
        "status-code": 400,
        "type": "unknown",
      },
      "TooManyRequestsError": {
        "docs": "Too Many Requests",
        "status-code": 429,
        "type": "unknown",
      },
      "UnauthorizedError": {
        "docs": "Unauthorized",
        "status-code": 401,
        "type": "unknown",
      },
    },
    "service": {
      "auth": false,
      "base-path": "",
      "endpoints": {
        "get-business-user-userId": {
          "auth": true,
          "display-name": "Retrieve a Business User",
          "docs": "### GET Business User

\`/business/user\` endpoint allows you to operate on the [Business User entity](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships#user).

Calling \`GET /business/user/{userId}\` will return the entire User payload and rule execution results for the User with the corresponding \`userId\`",
          "errors": [
            "UnauthorizedError",
            "TooManyRequestsError",
          ],
          "examples": [
            {
              "name": "example-2",
              "path-parameters": {
                "userId": "userId",
              },
              "response": {
                "body": {
                  "acquisitionChannel": "ORGANIC",
                  "allowedPaymentMethods": [
                    "ACH",
                  ],
                  "createdTimestamp": 1641654664000,
                  "directors": [
                    {
                      "contactDetails": {
                        "addresses": [
                          {
                            "addressLines": [
                              "Klara-Franke Str 20",
                            ],
                            "city": "Berlin",
                            "country": "Germany",
                            "postcode": "10557",
                            "state": "Berlin",
                            "tags": [
                              {
                                "key": "customKey",
                                "value": "customValue",
                              },
                            ],
                          },
                        ],
                        "contactNumbers": [
                          "+371 123132",
                        ],
                        "emailIds": [
                          "baran@flagright.com",
                        ],
                        "websites": [
                          "flagright.com",
                        ],
                      },
                      "generalDetails": {
                        "countryOfNationality": "DE",
                        "countryOfResidence": "US",
                        "dateOfBirth": "1991-01-01",
                        "name": {
                          "firstName": "Baran",
                          "lastName": "Ozkan",
                          "middleName": "Realblood",
                        },
                      },
                      "legalDocuments": [
                        {
                          "documentExpirationDate": 1839939034000,
                          "documentIssuedCountry": "DE",
                          "documentIssuedDate": 1639939034000,
                          "documentNumber": "Z9431P",
                          "documentType": "passport",
                          "nameOnDocument": {
                            "firstName": "Baran",
                            "lastName": "Ozkan",
                            "middleName": "Realblood",
                          },
                          "tags": [
                            {
                              "key": "customerType",
                              "value": "wallet",
                            },
                          ],
                        },
                      ],
                      "pepStatus": [
                        {
                          "isPepHit": true,
                        },
                      ],
                      "tags": [
                        {
                          "key": "customKey",
                          "value": "customValue",
                        },
                      ],
                    },
                  ],
                  "kycStatusDetails": {
                    "reason": "reason",
                    "status": "SUCCESSFUL",
                  },
                  "legalEntity": {
                    "companyFinancialDetails": {
                      "expectedTransactionAmountPerMonth": {
                        "amountCurrency": "GBP",
                        "amountValue": 800,
                      },
                      "expectedTurnoverPerMonth": {
                        "amountCurrency": "USD",
                        "amountValue": 8000,
                      },
                      "tags": [
                        {
                          "key": "customKey",
                          "value": "customValue",
                        },
                      ],
                    },
                    "companyGeneralDetails": {
                      "businessIndustry": [
                        "Farming",
                      ],
                      "legalName": "Ozkan Hazelnut Export JSC",
                      "mainProductsServicesSold": [
                        "Hazelnut",
                      ],
                      "tags": [
                        {
                          "key": "customKey",
                          "value": "customValue",
                        },
                      ],
                      "userRegistrationStatus": "REGISTERED",
                      "userSegment": "SOLE_PROPRIETORSHIP",
                    },
                    "companyRegistrationDetails": {
                      "dateOfRegistration": "dateOfRegistration",
                      "legalEntityType": "legalEntityType",
                      "registrationCountry": "DE",
                      "registrationIdentifier": "PSJ554342",
                      "tags": [
                        {
                          "key": "customKey",
                          "value": "customValue",
                        },
                      ],
                      "taxIdentifier": "taxIdentifier",
                    },
                    "contactDetails": {
                      "addresses": [
                        {
                          "addressLines": [
                            "Klara-Franke Str 20",
                          ],
                          "city": "Berlin",
                          "country": "Germany",
                          "postcode": "10557",
                          "state": "Berlin",
                          "tags": [
                            {
                              "key": "customKey",
                              "value": "customValue",
                            },
                          ],
                        },
                      ],
                      "contactNumbers": [
                        "contactNumbers",
                      ],
                      "emailIds": [
                        "emailIds",
                      ],
                      "faxNumbers": [
                        "faxNumbers",
                      ],
                      "websites": [
                        "websites",
                      ],
                    },
                    "reasonForAccountOpening": [
                      "string",
                    ],
                  },
                  "linkedEntities": {
                    "childUserIds": [
                      "childUserIds",
                    ],
                    "parentUserId": "parentUserId",
                  },
                  "mccDetails": {
                    "code": 1.1,
                    "description": "description",
                  },
                  "riskLevel": "VERY_HIGH",
                  "savedPaymentDetails": [
                    {
                      "checkIdentifier": "savedPaymentDetails",
                      "checkNumber": "savedPaymentDetails",
                      "deliveryStatus": "COMPLETED",
                      "etaTimestamp": 1.1,
                      "method": "CHECK",
                      "name": "savedPaymentDetails",
                      "shippingAddress": {
                        "addressLines": [
                          "Klara-Franke Str 20",
                        ],
                        "city": "Berlin",
                        "country": "Germany",
                        "postcode": "10557",
                        "state": "Berlin",
                        "tags": [
                          {
                            "key": "customKey",
                            "value": "customValue",
                          },
                        ],
                      },
                    },
                  ],
                  "shareHolders": [
                    {
                      "contactDetails": {
                        "addresses": [
                          {
                            "addressLines": [
                              "Klara-Franke Str 20",
                            ],
                            "city": "Berlin",
                            "country": "Germany",
                            "postcode": "10557",
                            "state": "Berlin",
                            "tags": [
                              {
                                "key": "customKey",
                                "value": "customValue",
                              },
                            ],
                          },
                        ],
                        "contactNumbers": [
                          "+371 123132",
                        ],
                        "emailIds": [
                          "baran@flagright.com",
                        ],
                        "websites": [
                          "flagright.com",
                        ],
                      },
                      "generalDetails": {
                        "countryOfNationality": "DE",
                        "countryOfResidence": "US",
                        "dateOfBirth": "1991-01-01",
                        "name": {
                          "firstName": "Baran",
                          "lastName": "Ozkan",
                          "middleName": "Realblood",
                        },
                      },
                      "legalDocuments": [
                        {
                          "documentExpirationDate": 1839939034000,
                          "documentIssuedCountry": "DE",
                          "documentIssuedDate": 1639939034000,
                          "documentNumber": "Z9431P",
                          "documentType": "passport",
                          "nameOnDocument": {
                            "firstName": "Baran",
                            "lastName": "Ozkan",
                            "middleName": "Realblood",
                          },
                          "tags": [
                            {
                              "key": "customerType",
                              "value": "wallet",
                            },
                          ],
                        },
                      ],
                      "pepStatus": [
                        {
                          "isPepHit": true,
                        },
                      ],
                      "tags": [
                        {
                          "key": "customKey",
                          "value": "customValue",
                        },
                      ],
                    },
                  ],
                  "tags": [
                    {
                      "key": "customKey",
                      "value": "customValue",
                    },
                  ],
                  "transactionLimits": {
                    "maximumDailyTransactionLimit": {
                      "amountCurrency": "GBP",
                      "amountValue": 800,
                    },
                    "maximumMonthlyTransactionLimit": {
                      "amountCurrency": "GBP",
                      "amountValue": 800,
                    },
                    "maximumQuarterlyTransactionLimit": {
                      "amountCurrency": "GBP",
                      "amountValue": 800,
                    },
                    "maximumTransactionLimit": {
                      "amountCurrency": "GBP",
                      "amountValue": 800,
                    },
                    "maximumWeeklyTransactionLimit": {
                      "amountCurrency": "GBP",
                      "amountValue": 800,
                    },
                    "maximumYearlyTransactionLimit": {
                      "amountCurrency": "GBP",
                      "amountValue": 800,
                    },
                  },
                  "userId": "96647cfd9e8fe66ee0f3362e011e34e8",
                  "userStateDetails": {
                    "reason": "reason",
                    "state": "UNACCEPTABLE",
                    "userId": "userId",
                  },
                },
              },
            },
          ],
          "method": "GET",
          "pagination": undefined,
          "path": "/business/users/{userId}",
          "path-parameters": {
            "userId": {
              "docs": "",
              "type": "string",
            },
          },
          "response": {
            "docs": "OK",
            "type": "Business",
          },
        },
        "get-consumer-transaction": {
          "auth": true,
          "display-name": "Retrieve a Transaction",
          "docs": "### GET Transactions

\`/transactions\` endpoint allows you to operate on the [Transaction entity](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships#transaction).

Calling \`GET /transactions/{transactionId}\` will return the entire transaction payload and rule execution results for the transaction with the corresponding \`transactionId\`",
          "errors": [
            "UnauthorizedError",
            "TooManyRequestsError",
          ],
          "examples": [
            {
              "name": "example-1",
              "path-parameters": {
                "transactionId": "transactionId",
              },
              "response": {
                "body": {
                  "destinationAmountDetails": {
                    "country": "IN",
                    "transactionAmount": 68351.34,
                    "transactionCurrency": "INR",
                  },
                  "destinationPaymentDetails": {
                    "checkIdentifier": "destinationPaymentDetails",
                    "checkNumber": "destinationPaymentDetails",
                    "deliveryStatus": "COMPLETED",
                    "etaTimestamp": 1.1,
                    "method": "CHECK",
                    "name": "destinationPaymentDetails",
                    "shippingAddress": {
                      "addressLines": [
                        "Klara-Franke Str 20",
                      ],
                      "city": "Berlin",
                      "country": "Germany",
                      "postcode": "10557",
                      "state": "Berlin",
                      "tags": [
                        {
                          "key": "customKey",
                          "value": "customValue",
                        },
                      ],
                    },
                  },
                  "destinationUserId": "9350a2611e0771cba03310f74bf6",
                  "deviceData": {
                    "appVersion": "1.1.0",
                    "batteryLevel": 95,
                    "deviceIdentifier": "3c49f915d04485e34caba",
                    "deviceLatitude": 13.0033,
                    "deviceLongitude": 76.1004,
                    "deviceMaker": "ASUS",
                    "deviceModel": "Zenphone M2 Pro Max",
                    "deviceYear": "2018",
                    "ipAddress": "10.23.191.2",
                    "operatingSystem": "Android 11.2",
                    "vpnUsed": false,
                  },
                  "executedRules": [
                    {
                      "labels": [
                        "UNEXPECTED_BEHAVIOR",
                      ],
                      "nature": "AML",
                      "ruleAction": "BLOCK",
                      "ruleDescription": "If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds",
                      "ruleHit": true,
                      "ruleId": "R-1a",
                      "ruleInstanceId": "ruleInstanceId",
                      "ruleName": "Proof of funds for high value transactions",
                    },
                  ],
                  "hitRules": [
                    {
                      "labels": [
                        "UNEXPECTED_BEHAVIOR",
                      ],
                      "nature": "AML",
                      "ruleAction": "BLOCK",
                      "ruleDescription": "If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds",
                      "ruleId": "R-1a",
                      "ruleInstanceId": "ruleInstanceId",
                      "ruleName": "Proof of funds for high value transactions",
                    },
                  ],
                  "originAmountDetails": {
                    "country": "DE",
                    "transactionAmount": 800,
                    "transactionCurrency": "EUR",
                  },
                  "originPaymentDetails": {
                    "checkIdentifier": "originPaymentDetails",
                    "checkNumber": "originPaymentDetails",
                    "deliveryStatus": "COMPLETED",
                    "etaTimestamp": 1.1,
                    "method": "CHECK",
                    "name": "originPaymentDetails",
                    "shippingAddress": {
                      "addressLines": [
                        "Klara-Franke Str 20",
                      ],
                      "city": "Berlin",
                      "country": "Germany",
                      "postcode": "10557",
                      "state": "Berlin",
                      "tags": [
                        {
                          "key": "customKey",
                          "value": "customValue",
                        },
                      ],
                    },
                  },
                  "originUserId": "8650a2611d0771cba03310f74bf6",
                  "productType": "productType",
                  "promotionCodeUsed": true,
                  "reference": "loan repayment",
                  "relatedTransactionIds": [
                    "relatedTransactionIds",
                  ],
                  "tags": [
                    {
                      "key": "customKey",
                      "value": "customValue",
                    },
                  ],
                  "timestamp": 1641654664000,
                  "transactionId": "7b80a539eea6e78acbd6d458e5971482",
                  "transactionState": "CREATED",
                  "type": "DEPOSIT",
                },
              },
            },
          ],
          "method": "GET",
          "pagination": undefined,
          "path": "/transactions/{transactionId}",
          "path-parameters": {
            "transactionId": {
              "docs": "Unique Transaction Identifier",
              "type": "string",
            },
          },
          "response": {
            "docs": "OK",
            "type": "TransactionWithRulesResult",
          },
        },
        "get-consumer-user": {
          "auth": true,
          "display-name": "Retrieve a Consumer User",
          "docs": "### GET Consumer User

\`/consumer/user\` endpoint allows you to operate on the [Consumer User entity](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships#user).

Calling \`GET /consumer/user/{userId}\` will return the entire user payload and rule execution results for the user with the corresponding \`userId\`",
          "errors": [
            "UnauthorizedError",
            "TooManyRequestsError",
          ],
          "examples": [
            {
              "name": "example-1",
              "path-parameters": {
                "userId": "userId",
              },
              "response": {
                "body": {
                  "acquisitionChannel": "ORGANIC",
                  "contactDetails": {
                    "addresses": [
                      {
                        "addressLines": [
                          "Klara-Franke Str 20",
                        ],
                        "city": "Berlin",
                        "country": "Germany",
                        "postcode": "10557",
                        "state": "Berlin",
                        "tags": [
                          {
                            "key": "customKey",
                            "value": "customValue",
                          },
                        ],
                      },
                    ],
                    "contactNumbers": [
                      "+37112345432",
                    ],
                    "emailIds": [
                      "baran@flagright.com",
                    ],
                    "faxNumbers": [
                      "faxNumbers",
                    ],
                    "websites": [
                      "flagright.com",
                    ],
                  },
                  "createdTimestamp": 1641654664000,
                  "kycStatusDetails": {
                    "reason": "reason",
                    "status": "SUCCESSFUL",
                  },
                  "legalDocuments": [
                    {
                      "documentExpirationDate": 1839939034000,
                      "documentIssuedCountry": "DE",
                      "documentIssuedDate": 1639939034000,
                      "documentNumber": "Z9431P",
                      "documentType": "passport",
                      "nameOnDocument": {
                        "firstName": "Baran",
                        "lastName": "Ozkan",
                        "middleName": "Realblood",
                      },
                      "tags": [
                        {
                          "key": "customerType",
                          "value": "wallet",
                        },
                      ],
                    },
                  ],
                  "pepStatus": [
                    {
                      "isPepHit": true,
                      "pepCountry": "pepCountry",
                    },
                  ],
                  "reasonForAccountOpening": [
                    "reasonForAccountOpening",
                  ],
                  "riskLevel": "VERY_HIGH",
                  "tags": [
                    {
                      "key": "customKey",
                      "value": "customValue",
                    },
                  ],
                  "transactionLimits": {
                    "maximumDailyTransactionLimit": {
                      "amountCurrency": "GBP",
                      "amountValue": 800,
                    },
                    "maximumMonthlyTransactionLimit": {
                      "amountCurrency": "GBP",
                      "amountValue": 800,
                    },
                    "maximumQuarterlyTransactionLimit": {
                      "amountCurrency": "GBP",
                      "amountValue": 800,
                    },
                    "maximumTransactionLimit": {
                      "amountCurrency": "GBP",
                      "amountValue": 800,
                    },
                    "maximumWeeklyTransactionLimit": {
                      "amountCurrency": "GBP",
                      "amountValue": 800,
                    },
                    "maximumYearlyTransactionLimit": {
                      "amountCurrency": "GBP",
                      "amountValue": 800,
                    },
                  },
                  "userDetails": {
                    "countryOfNationality": "DE",
                    "countryOfResidence": "US",
                    "dateOfBirth": "1991-01-01",
                    "gender": "M",
                    "name": {
                      "firstName": "Baran",
                      "lastName": "Ozkan",
                      "middleName": "Realblood",
                    },
                  },
                  "userId": "96647cfd9e8fe66ee0f3362e011e34e8",
                  "userSegment": "RETAIL",
                  "userStateDetails": {
                    "reason": "reason",
                    "state": "UNACCEPTABLE",
                    "userId": "userId",
                  },
                },
              },
            },
          ],
          "method": "GET",
          "pagination": undefined,
          "path": "/consumer/users/{userId}",
          "path-parameters": {
            "userId": {
              "docs": "",
              "type": "string",
            },
          },
          "response": {
            "docs": "OK",
            "type": "User",
          },
        },
        "post-business-user": {
          "auth": true,
          "display-name": "Create a Business User",
          "docs": "## POST Business User

\`/business/user\` endpoint allows you to operate on the [Business user entity.](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships#user)

In order to pass the payload of a User to Flagright and verify the User, you will need to call this endpoint with the User payload. Not all fields are mandatory, you will only need to pass in the fields that you have and are relevant for your compliance setup.

### Payload


Each consumer Business entity needs three mandatory fields:

* \`userId\` - Unique identifier for the user
* \`legalEntity\` - Details of the business legal entity (CompanyGeneralDetails, FinancialDetails etc) - only \`legalName\`in \`CompanyGeneralDetails\` is mandatory
* \`createdTimestamp\` - UNIX timestamp in *milliseconds* for when the User is created in your system",
          "errors": [
            "BadRequestError",
            "UnauthorizedError",
            "TooManyRequestsError",
          ],
          "examples": [
            {
              "name": "example-1",
              "request": {
                "createdTimestamp": 1.1,
                "userId": "userId",
              },
              "response": {
                "body": {
                  "executedRules": [
                    {
                      "labels": [
                        "UNEXPECTED_BEHAVIOR",
                      ],
                      "nature": "AML",
                      "ruleAction": "BLOCK",
                      "ruleDescription": "If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds",
                      "ruleHit": true,
                      "ruleId": "R-1a",
                      "ruleInstanceId": "ruleInstanceId",
                      "ruleName": "Proof of funds for high value transactions",
                    },
                  ],
                  "hitRules": [
                    {
                      "labels": [
                        "UNEXPECTED_BEHAVIOR",
                      ],
                      "nature": "FRAUD",
                      "ruleAction": "BLOCK",
                      "ruleDescription": "If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds",
                      "ruleId": "R-1a",
                      "ruleInstanceId": "ruleInstanceId",
                      "ruleName": "Proof of funds for high value transactions",
                    },
                  ],
                  "message": "message",
                  "userId": "96647cfd9e8fe66ee0f3362e011e34e8",
                },
              },
            },
          ],
          "method": "POST",
          "pagination": undefined,
          "path": "/business/users",
          "request": {
            "body": "Business",
          },
          "response": {
            "docs": "Created",
            "type": "PostBusinessUserResponse",
          },
        },
        "post-business-user-event": {
          "auth": true,
          "display-name": "Create a Business User Event",
          "docs": "## POST Business User Events

\`/events/business/user\` endpoint allows you to operate on the Business User Events entity.

User events are created after the initial \`POST /business/users\` call (which creates a user) and are used to:

* Update the STATE and KYC Status of the user, using the \`userStateDetails\` or \`kycStatusDetails\` field
* Update the user details, using the \`updatedBusinessUserAttributes\` field.

> If you have neither of the above two use cases, you do not need to use user events. 

### Payload

Each user event needs three mandatory fields:

* \`timestamp\`- the timestamp of when the event was created or occured in your system
* \`userId\` - The ID of the transaction for which this event is generated. 

In order to make individual events retrievable, you also need to pass in a unique \`eventId\` to the request body.
",
          "errors": [
            "BadRequestError",
            "UnauthorizedError",
            "TooManyRequestsError",
          ],
          "examples": [
            {
              "request": {
                "timestamp": 1.1,
                "userId": "userId",
              },
              "response": {
                "body": {
                  "acquisitionChannel": "ORGANIC",
                  "allowedPaymentMethods": [
                    "ACH",
                  ],
                  "createdTimestamp": 1.1,
                  "directors": [
                    {
                      "contactDetails": {
                        "addresses": [
                          {
                            "addressLines": [
                              "Klara-Franke Str 20",
                            ],
                            "city": "Berlin",
                            "country": "Germany",
                            "postcode": "10557",
                            "state": "Berlin",
                            "tags": [
                              {
                                "key": "customKey",
                                "value": "customValue",
                              },
                            ],
                          },
                        ],
                        "contactNumbers": [
                          "+371 123132",
                        ],
                        "emailIds": [
                          "baran@flagright.com",
                        ],
                        "websites": [
                          "flagright.com",
                        ],
                      },
                      "generalDetails": {
                        "countryOfNationality": "DE",
                        "countryOfResidence": "US",
                        "dateOfBirth": "1991-01-01",
                        "name": {
                          "firstName": "Baran",
                          "lastName": "Ozkan",
                          "middleName": "Realblood",
                        },
                      },
                      "legalDocuments": [
                        {
                          "documentExpirationDate": 1839939034000,
                          "documentIssuedCountry": "DE",
                          "documentIssuedDate": 1639939034000,
                          "documentNumber": "Z9431P",
                          "documentType": "passport",
                          "nameOnDocument": {
                            "firstName": "Baran",
                            "lastName": "Ozkan",
                            "middleName": "Realblood",
                          },
                          "tags": [
                            {
                              "key": "customerType",
                              "value": "wallet",
                            },
                          ],
                        },
                      ],
                      "pepStatus": [
                        {
                          "isPepHit": true,
                        },
                      ],
                      "tags": [
                        {
                          "key": "customKey",
                          "value": "customValue",
                        },
                      ],
                    },
                  ],
                  "executedRules": [
                    {
                      "labels": [
                        "UNEXPECTED_BEHAVIOR",
                      ],
                      "nature": "AML",
                      "ruleAction": "BLOCK",
                      "ruleDescription": "If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds",
                      "ruleHit": true,
                      "ruleId": "R-1a",
                      "ruleInstanceId": "ruleInstanceId",
                      "ruleName": "Proof of funds for high value transactions",
                    },
                  ],
                  "hitRules": [
                    {
                      "labels": [
                        "UNEXPECTED_BEHAVIOR",
                      ],
                      "nature": "FRAUD",
                      "ruleAction": "BLOCK",
                      "ruleDescription": "If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds",
                      "ruleId": "R-1a",
                      "ruleInstanceId": "ruleInstanceId",
                      "ruleName": "Proof of funds for high value transactions",
                    },
                  ],
                  "kycStatusDetails": {
                    "reason": "reason",
                    "status": "SUCCESSFUL",
                  },
                  "legalEntity": {
                    "companyFinancialDetails": {
                      "expectedTransactionAmountPerMonth": {
                        "amountCurrency": "GBP",
                        "amountValue": 800,
                      },
                      "expectedTurnoverPerMonth": {
                        "amountCurrency": "USD",
                        "amountValue": 8000,
                      },
                      "tags": [
                        {
                          "key": "customKey",
                          "value": "customValue",
                        },
                      ],
                    },
                    "companyGeneralDetails": {
                      "businessIndustry": [
                        "Farming",
                      ],
                      "legalName": "Ozkan Hazelnut Export JSC",
                      "mainProductsServicesSold": [
                        "Hazelnut",
                      ],
                      "tags": [
                        {
                          "key": "customKey",
                          "value": "customValue",
                        },
                      ],
                      "userRegistrationStatus": "REGISTERED",
                      "userSegment": "SOLE_PROPRIETORSHIP",
                    },
                    "companyRegistrationDetails": {
                      "dateOfRegistration": "dateOfRegistration",
                      "legalEntityType": "legalEntityType",
                      "registrationCountry": "DE",
                      "registrationIdentifier": "PSJ554342",
                      "tags": [
                        {
                          "key": "customKey",
                          "value": "customValue",
                        },
                      ],
                      "taxIdentifier": "taxIdentifier",
                    },
                    "contactDetails": {
                      "addresses": [
                        {
                          "addressLines": [
                            "Klara-Franke Str 20",
                          ],
                          "city": "Berlin",
                          "country": "Germany",
                          "postcode": "10557",
                          "state": "Berlin",
                          "tags": [
                            {
                              "key": "customKey",
                              "value": "customValue",
                            },
                          ],
                        },
                      ],
                      "contactNumbers": [
                        "contactNumbers",
                      ],
                      "emailIds": [
                        "emailIds",
                      ],
                      "faxNumbers": [
                        "faxNumbers",
                      ],
                      "websites": [
                        "websites",
                      ],
                    },
                    "reasonForAccountOpening": [
                      "reasonForAccountOpening",
                    ],
                  },
                  "linkedEntities": {
                    "childUserIds": [
                      "childUserIds",
                    ],
                    "parentUserId": "parentUserId",
                  },
                  "mccDetails": {
                    "code": 1.1,
                    "description": "description",
                  },
                  "riskLevel": "VERY_HIGH",
                  "savedPaymentDetails": [
                    {
                      "checkIdentifier": "savedPaymentDetails",
                      "checkNumber": "savedPaymentDetails",
                      "deliveryStatus": "COMPLETED",
                      "etaTimestamp": 1.1,
                      "method": "CHECK",
                      "name": "savedPaymentDetails",
                      "shippingAddress": {
                        "addressLines": [
                          "Klara-Franke Str 20",
                        ],
                        "city": "Berlin",
                        "country": "Germany",
                        "postcode": "10557",
                        "state": "Berlin",
                        "tags": [
                          {
                            "key": "customKey",
                            "value": "customValue",
                          },
                        ],
                      },
                    },
                  ],
                  "shareHolders": [
                    {
                      "contactDetails": {
                        "addresses": [
                          {
                            "addressLines": [
                              "Klara-Franke Str 20",
                            ],
                            "city": "Berlin",
                            "country": "Germany",
                            "postcode": "10557",
                            "state": "Berlin",
                            "tags": [
                              {
                                "key": "customKey",
                                "value": "customValue",
                              },
                            ],
                          },
                        ],
                        "contactNumbers": [
                          "+371 123132",
                        ],
                        "emailIds": [
                          "baran@flagright.com",
                        ],
                        "websites": [
                          "flagright.com",
                        ],
                      },
                      "generalDetails": {
                        "countryOfNationality": "DE",
                        "countryOfResidence": "US",
                        "dateOfBirth": "1991-01-01",
                        "name": {
                          "firstName": "Baran",
                          "lastName": "Ozkan",
                          "middleName": "Realblood",
                        },
                      },
                      "legalDocuments": [
                        {
                          "documentExpirationDate": 1839939034000,
                          "documentIssuedCountry": "DE",
                          "documentIssuedDate": 1639939034000,
                          "documentNumber": "Z9431P",
                          "documentType": "passport",
                          "nameOnDocument": {
                            "firstName": "Baran",
                            "lastName": "Ozkan",
                            "middleName": "Realblood",
                          },
                          "tags": [
                            {
                              "key": "customerType",
                              "value": "wallet",
                            },
                          ],
                        },
                      ],
                      "pepStatus": [
                        {
                          "isPepHit": true,
                        },
                      ],
                      "tags": [
                        {
                          "key": "customKey",
                          "value": "customValue",
                        },
                      ],
                    },
                  ],
                  "tags": [
                    {
                      "key": "customKey",
                      "value": "customValue",
                    },
                  ],
                  "transactionLimits": {
                    "maximumDailyTransactionLimit": {
                      "amountCurrency": "GBP",
                      "amountValue": 800,
                    },
                    "maximumMonthlyTransactionLimit": {
                      "amountCurrency": "GBP",
                      "amountValue": 800,
                    },
                    "maximumQuarterlyTransactionLimit": {
                      "amountCurrency": "GBP",
                      "amountValue": 800,
                    },
                    "maximumTransactionLimit": {
                      "amountCurrency": "GBP",
                      "amountValue": 800,
                    },
                    "maximumWeeklyTransactionLimit": {
                      "amountCurrency": "GBP",
                      "amountValue": 800,
                    },
                    "maximumYearlyTransactionLimit": {
                      "amountCurrency": "GBP",
                      "amountValue": 800,
                    },
                  },
                  "userId": "userId",
                  "userStateDetails": {
                    "reason": "reason",
                    "state": "UNACCEPTABLE",
                    "userId": "userId",
                  },
                },
              },
            },
          ],
          "method": "POST",
          "pagination": undefined,
          "path": "/events/business/user",
          "request": {
            "body": {
              "properties": {
                "eventDescription": {
                  "display-name": "BusinessUserEvent",
                  "docs": "Event description",
                  "type": "optional<string>",
                },
                "eventId": {
                  "display-name": "BusinessUserEvent",
                  "docs": "Unique event ID",
                  "type": "optional<string>",
                },
                "reason": {
                  "display-name": "BusinessUserEvent",
                  "docs": "Reason for the event or a state change",
                  "type": "optional<string>",
                },
                "timestamp": {
                  "docs": "Timestamp of the event",
                  "type": "double",
                  "validation": {
                    "exclusiveMax": undefined,
                    "exclusiveMin": undefined,
                    "max": 4133890801000,
                    "min": 1262300400000,
                    "multipleOf": undefined,
                  },
                },
                "updatedBusinessUserAttributes": {
                  "display-name": "BusinessUserEvent",
                  "type": "optional<BusinessOptional>",
                },
                "userId": {
                  "docs": "Transaction ID the event pertains to",
                  "type": "string",
                  "validation": {
                    "format": undefined,
                    "maxLength": undefined,
                    "minLength": 1,
                    "pattern": undefined,
                  },
                },
              },
            },
            "headers": undefined,
            "name": "BusinessUserEvent",
            "query-parameters": undefined,
          },
          "response": {
            "docs": "Created",
            "type": "BusinessWithRulesResult",
          },
        },
        "post-consumer-transaction": {
          "auth": true,
          "display-name": "Verify a Transaction",
          "docs": "## POST Transactions

\`/transactions\` endpoint allows you to operate on the [Transaction entity.](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships#transaction)

In order to pass the payload of a transaction to Flagright and verify the transaciton, you will need to call this endpoint with the transaction payload. Not all fields are mandatory, you will only need to pass in the fields that you have and are relevant for your compliance setup. 


### Payload

Here are some of the most used payload fields explained (you can find the full payload [schema below](https://docs.flagright.com/docs/flagright-api/87742ed31b30e-verify-a-transaction#request-body) with 1 line descriptions):

* \`type\`: Type of transaction (Ex: \`WITHDRAWAL\`, \`DEPOSIT\`, \`TRANSFER\` etc). 
* \`transactionId\` - Unique Identifier for the transaction. Flagright API will generate a \`transactionId\` if this field is left empty
* \`timestamp\` - UNIX timestamp in *milliseconds* of when the transaction took place
* \`transactionState\` - The state of the transaction, set to \`CREATED\` by default. [More details here](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships-in-the-api#transaction-lifecycle-through-transaction-events)
* \`originUserId\` - Unique identifier (if any) of the user who is sending the money. This user must be created within the Flagright system before using the [create a consumer user](https://docs.flagright.com/docs/flagright-api/18132cd454603-create-a-consumer-user) or [create a business user](https://docs.flagright.com/docs/flagright-api/f651463db29d8-create-a-business-user) endpoint
* \`destinationUserId\` - Unique identifier (if any) of the user who is receiving the money. This user must be created within the Flagright system before using the [create a consumer user](https://docs.flagright.com/docs/flagright-api/18132cd454603-create-a-consumer-user) or [create a business user](https://docs.flagright.com/docs/flagright-api/f651463db29d8-create-a-business-user) endpoint
* \`originAmountDetails\` - Details of the amount being sent from the origin
* \`destinationAmountDetails\` - Details of the amount being received at the destination
* \`originPaymentDetails\` - Payment details (if any) used at the origin (ex: \`CARD\`, \`IBAN\`, \`WALLET\` etc). You can click on the dropdown next to the field in the schema below to view all supported payment types.
* \`destinationPaymentDetails\` - Payment details (if any) used at the destination (ex: \`CARD\`, \`IBAN\`, \`WALLET\` etc). You can click on the dropdown next to the field in the schema below to view all supported payment types.",
          "errors": [
            "BadRequestError",
            "UnauthorizedError",
            "TooManyRequestsError",
          ],
          "examples": [
            {
              "name": "example-1",
              "request": {
                "destinationAmountDetails": {
                  "country": "IN",
                  "transactionAmount": 68351.34,
                  "transactionCurrency": "INR",
                },
                "destinationPaymentDetails": {
                  "method": "CHECK",
                  "shippingAddress": {
                    "addressLines": [
                      "Klara-Franke Str 20",
                    ],
                    "city": "Berlin",
                    "country": "Germany",
                    "postcode": "10557",
                    "state": "Berlin",
                    "tags": [
                      {
                        "key": "customKey",
                        "value": "customValue",
                      },
                    ],
                  },
                },
                "destinationUserId": "9350a2611e0771cba03310f74bf6",
                "deviceData": {
                  "appVersion": "1.1.0",
                  "batteryLevel": 95,
                  "deviceIdentifier": "3c49f915d04485e34caba",
                  "deviceLatitude": 13.0033,
                  "deviceLongitude": 76.1004,
                  "deviceMaker": "ASUS",
                  "deviceModel": "Zenphone M2 Pro Max",
                  "deviceYear": "2018",
                  "ipAddress": "10.23.191.2",
                  "operatingSystem": "Android 11.2",
                  "vpnUsed": false,
                },
                "originAmountDetails": {
                  "country": "DE",
                  "transactionAmount": 800,
                  "transactionCurrency": "EUR",
                },
                "originPaymentDetails": {
                  "method": "CHECK",
                  "shippingAddress": {
                    "addressLines": [
                      "Klara-Franke Str 20",
                    ],
                    "city": "Berlin",
                    "country": "Germany",
                    "postcode": "10557",
                    "state": "Berlin",
                    "tags": [
                      {
                        "key": "customKey",
                        "value": "customValue",
                      },
                    ],
                  },
                },
                "originUserId": "8650a2611d0771cba03310f74bf6",
                "promotionCodeUsed": true,
                "reference": "loan repayment",
                "tags": [
                  {
                    "key": "customKey",
                    "value": "customValue",
                  },
                ],
                "timestamp": 1641654664000,
                "transactionId": "7b80a539eea6e78acbd6d458e5971482",
              },
              "response": {
                "body": {
                  "executedRules": [
                    {
                      "labels": [
                        "UNEXPECTED_BEHAVIOR",
                      ],
                      "nature": "AML",
                      "ruleAction": "BLOCK",
                      "ruleDescription": "If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds",
                      "ruleHit": true,
                      "ruleId": "R-1a",
                      "ruleInstanceId": "ruleInstanceId",
                      "ruleName": "Proof of funds for high value transactions",
                    },
                  ],
                  "hitRules": [
                    {
                      "labels": [
                        "UNEXPECTED_BEHAVIOR",
                      ],
                      "nature": "AML",
                      "ruleAction": "BLOCK",
                      "ruleDescription": "If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds",
                      "ruleId": "R-1a",
                      "ruleInstanceId": "ruleInstanceId",
                      "ruleName": "Proof of funds for high value transactions",
                    },
                  ],
                  "message": "message",
                  "transactionId": "7b80a539eea6e78acbd6d458e5971482",
                },
              },
            },
          ],
          "method": "POST",
          "pagination": undefined,
          "path": "/transactions",
          "request": {
            "body": "Transaction",
            "name": "PostConsumerTransactionRequest",
            "query-parameters": {
              "validateDestinationUserId": {
                "docs": "Boolean string whether Flagright should validate if provided destinationUserId exist. True by default",
                "type": "optional<string>",
              },
              "validateOriginUserId": {
                "docs": "Boolean string whether Flagright should validate if provided originUserId exist. True by default",
                "type": "optional<string>",
              },
            },
          },
          "response": {
            "docs": "Created",
            "type": "PostConsumerTransactionResponse",
          },
        },
        "post-consumer-user": {
          "auth": true,
          "display-name": "Create a Consumer User",
          "docs": "## POST Consumer User

\`/consumer/user\` endpoint allows you to operate on the [Consumer user entity.](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships#user)

In order to pass the payload of a User to Flagright and verify the User, you will need to call this endpoint with the User payload. Not all fields are mandatory, you will only need to pass in the fields that you have and are relevant for your compliance setup.

### Payload

Each consumer User entity needs three mandatory fields:

* \`userId\` - Unique identifier for the user
* \`createdTimestamp\` - UNIX timestamp in *milliseconds* for when the User is created in your system
",
          "errors": [
            "BadRequestError",
            "UnauthorizedError",
            "TooManyRequestsError",
          ],
          "examples": [
            {
              "name": "example-1",
              "request": {
                "contactDetails": {
                  "addresses": [
                    {
                      "addressLines": [
                        "Klara-Franke Str 20",
                      ],
                      "city": "Berlin",
                      "country": "Germany",
                      "postcode": "10557",
                      "state": "Berlin",
                      "tags": [
                        {
                          "key": "customKey",
                          "value": "customValue",
                        },
                      ],
                    },
                  ],
                  "contactNumbers": [
                    "+37112345432",
                  ],
                  "emailIds": [
                    "baran@flagright.com",
                  ],
                  "websites": [
                    "flagright.com",
                  ],
                },
                "createdTimestamp": 1641654664000,
                "legalDocuments": [
                  {
                    "documentExpirationDate": 1839939034000,
                    "documentIssuedCountry": "DE",
                    "documentIssuedDate": 1639939034000,
                    "documentNumber": "Z9431P",
                    "documentType": "passport",
                    "tags": [
                      {
                        "key": "customerType",
                        "value": "wallet",
                      },
                    ],
                  },
                ],
                "tags": [
                  {
                    "key": "customKey",
                    "value": "customValue",
                  },
                ],
                "userDetails": {
                  "countryOfNationality": "DE",
                  "countryOfResidence": "US",
                  "dateOfBirth": "1991-01-01",
                  "name": {
                    "firstName": "Baran",
                    "lastName": "Ozkan",
                    "middleName": "Realblood",
                  },
                },
                "userId": "96647cfd9e8fe66ee0f3362e011e34e8",
              },
              "response": {
                "body": {
                  "executedRules": [
                    {
                      "labels": [
                        "UNEXPECTED_BEHAVIOR",
                      ],
                      "nature": "AML",
                      "ruleAction": "BLOCK",
                      "ruleDescription": "If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds",
                      "ruleHit": true,
                      "ruleId": "R-1a",
                      "ruleInstanceId": "ruleInstanceId",
                      "ruleName": "Proof of funds for high value transactions",
                    },
                  ],
                  "hitRules": [
                    {
                      "labels": [
                        "UNEXPECTED_BEHAVIOR",
                      ],
                      "nature": "FRAUD",
                      "ruleAction": "BLOCK",
                      "ruleDescription": "If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds",
                      "ruleId": "R-1a",
                      "ruleInstanceId": "ruleInstanceId",
                      "ruleName": "Proof of funds for high value transactions",
                    },
                  ],
                  "message": "message",
                  "userId": "96647cfd9e8fe66ee0f3362e011e34e8",
                },
              },
            },
          ],
          "method": "POST",
          "pagination": undefined,
          "path": "/consumer/users",
          "request": {
            "body": {
              "display-name": "User",
              "type": "User",
            },
          },
          "response": {
            "docs": "Created",
            "type": "PostConsumerUserResponse",
          },
        },
        "post-transaction-event": {
          "auth": true,
          "display-name": "Create a Transaction Event",
          "docs": "## POST Transaction Events

\`/events/transaction\` endpoint allows you to operate on the [Transaction Events entity.](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships#transaction-event)

Transaction events are created after the initial \`POST /transactions\` call (which creates a transaction) and are used to:

* Update the STATE of the transaction, using the \`transactionState\` field and manage the [Transaction Lifecycle](https://docs.flagright.com/docs/flagright-api/8c06ae6a3231a-entities-and-relationships#transaction-lifecycle-through-transaction-events)
* Update the transaction details, using the \`updatedTransactionAttributes\` field.

> If you have neither of the above two use cases, you do not need to use transaction events. 

### Payload

Each transaction event needs three mandatory fields:

* \`transactionState\` - STATE of the transaction -> value is set to \`CREATED\` after \`POST /transactions\` call
* \`timestamp\`- the timestamp of when the event was created or occured in your system
* \`transactionId\` - The ID of the transaction for which this event is generated. 

In order to make individual events retrievable, you also need to pass in a unique \`eventId\` to the request body.
",
          "errors": [
            "BadRequestError",
            "UnauthorizedError",
            "TooManyRequestsError",
          ],
          "examples": [
            {
              "name": "example-1",
              "request": {
                "eventDescription": "Transaction created",
                "eventId": "aaeeb166147a406b957dd9147a406b957",
                "metaData": {
                  "batteryLevel": 76.3,
                  "deviceLatitude": 13.009711,
                  "deviceLongitude": 76.102898,
                  "ipAddress": "79.144.2.20",
                  "vpnUsed": true,
                },
                "timestamp": 1431231244001,
                "transactionId": "443dea26147a406b957d9ee3a1247b11",
                "transactionState": "SUCCESSFUL",
              },
              "response": {
                "body": {
                  "eventId": "7b80a539eea6e78acbd6d458e5971482",
                  "executedRules": [
                    {
                      "labels": [
                        "UNEXPECTED_BEHAVIOR",
                      ],
                      "nature": "AML",
                      "ruleAction": "BLOCK",
                      "ruleDescription": "If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds",
                      "ruleHit": true,
                      "ruleId": "R-1a",
                      "ruleInstanceId": "ruleInstanceId",
                      "ruleName": "Proof of funds for high value transactions",
                    },
                  ],
                  "hitRules": [
                    {
                      "labels": [
                        "UNEXPECTED_BEHAVIOR",
                      ],
                      "nature": "AML",
                      "ruleAction": "BLOCK",
                      "ruleDescription": "If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds",
                      "ruleId": "R-1a",
                      "ruleInstanceId": "ruleInstanceId",
                      "ruleName": "Proof of funds for high value transactions",
                    },
                  ],
                  "transaction": {
                    "destinationAmountDetails": {
                      "country": "IN",
                      "transactionAmount": 68351.34,
                      "transactionCurrency": "INR",
                    },
                    "destinationPaymentDetails": {
                      "checkIdentifier": "destinationPaymentDetails",
                      "checkNumber": "destinationPaymentDetails",
                      "deliveryStatus": "COMPLETED",
                      "etaTimestamp": 1.1,
                      "method": "CHECK",
                      "name": "destinationPaymentDetails",
                      "shippingAddress": {
                        "addressLines": [
                          "Klara-Franke Str 20",
                        ],
                        "city": "Berlin",
                        "country": "Germany",
                        "postcode": "10557",
                        "state": "Berlin",
                        "tags": [
                          {
                            "key": "customKey",
                            "value": "customValue",
                          },
                        ],
                      },
                    },
                    "destinationUserId": "9350a2611e0771cba03310f74bf6",
                    "deviceData": {
                      "appVersion": "1.1.0",
                      "batteryLevel": 95,
                      "deviceIdentifier": "3c49f915d04485e34caba",
                      "deviceLatitude": 13.0033,
                      "deviceLongitude": 76.1004,
                      "deviceMaker": "ASUS",
                      "deviceModel": "Zenphone M2 Pro Max",
                      "deviceYear": "2018",
                      "ipAddress": "10.23.191.2",
                      "operatingSystem": "Android 11.2",
                      "vpnUsed": false,
                    },
                    "originAmountDetails": {
                      "country": "DE",
                      "transactionAmount": 800,
                      "transactionCurrency": "EUR",
                    },
                    "originPaymentDetails": {
                      "checkIdentifier": "originPaymentDetails",
                      "checkNumber": "originPaymentDetails",
                      "deliveryStatus": "COMPLETED",
                      "etaTimestamp": 1.1,
                      "method": "CHECK",
                      "name": "originPaymentDetails",
                      "shippingAddress": {
                        "addressLines": [
                          "Klara-Franke Str 20",
                        ],
                        "city": "Berlin",
                        "country": "Germany",
                        "postcode": "10557",
                        "state": "Berlin",
                        "tags": [
                          {
                            "key": "customKey",
                            "value": "customValue",
                          },
                        ],
                      },
                    },
                    "originUserId": "8650a2611d0771cba03310f74bf6",
                    "productType": "productType",
                    "promotionCodeUsed": true,
                    "reference": "loan repayment",
                    "relatedTransactionIds": [
                      "relatedTransactionIds",
                    ],
                    "tags": [
                      {
                        "key": "customKey",
                        "value": "customValue",
                      },
                    ],
                    "timestamp": 1641654664000,
                    "transactionId": "7b80a539eea6e78acbd6d458e5971482",
                    "transactionState": "CREATED",
                    "type": "DEPOSIT",
                  },
                },
              },
            },
          ],
          "method": "POST",
          "pagination": undefined,
          "path": "/events/transaction",
          "request": {
            "body": {
              "properties": {
                "eventDescription": {
                  "docs": "Event description",
                  "type": "optional<string>",
                },
                "eventId": {
                  "docs": "Unique event ID",
                  "type": "optional<string>",
                },
                "metaData": "optional<DeviceData>",
                "reason": {
                  "docs": "Reason for the event or a state change",
                  "type": "optional<string>",
                },
                "timestamp": {
                  "docs": "Timestamp of the event",
                  "type": "double",
                  "validation": {
                    "exclusiveMax": undefined,
                    "exclusiveMin": undefined,
                    "max": 4133890801000,
                    "min": 1262300400000,
                    "multipleOf": undefined,
                  },
                },
                "transactionId": {
                  "docs": "Transaction ID the event pertains to",
                  "type": "string",
                  "validation": {
                    "format": undefined,
                    "maxLength": undefined,
                    "minLength": 1,
                    "pattern": undefined,
                  },
                },
                "transactionState": {
                  "display-name": "TransactionState",
                  "type": "TransactionState",
                },
                "updatedTransactionAttributes": "optional<TransactionUpdatable>",
              },
            },
            "headers": undefined,
            "name": "TransactionEvent",
            "query-parameters": undefined,
          },
          "response": {
            "docs": "Created",
            "type": "TransactionEventMonitoringResult",
          },
        },
        "post-user-event": {
          "auth": true,
          "display-name": "Create a Consumer User Event",
          "docs": "## POST Consumer User Events

\`/events/consumer/user\` endpoint allows you to operate on the Consumer User Events entity.

User events are created after the initial \`POST /consumer/users\` call (which creates a user) and are used to:

* Update the STATE and KYC Status of the user, using the \`userStateDetails\` or \`kycStatusDetails\` field
* Update the user details, using the \`updatedConsumerUserAttributes\` field.

> If you have neither of the above two use cases, you do not need to use user events. 

### Payload

Each user event needs three mandatory fields:

* \`timestamp\`- the timestamp of when the event was created or occured in your system
* \`userId\` - The ID of the transaction for which this event is generated. 

In order to make individual events retrievable, you also need to pass in a unique \`eventId\` to the request body.
",
          "errors": [
            "BadRequestError",
            "UnauthorizedError",
            "TooManyRequestsError",
          ],
          "examples": [
            {
              "request": {
                "timestamp": 1.1,
                "userId": "userId",
              },
              "response": {
                "body": {
                  "acquisitionChannel": "ORGANIC",
                  "contactDetails": {
                    "addresses": [
                      {
                        "addressLines": [
                          "Klara-Franke Str 20",
                        ],
                        "city": "Berlin",
                        "country": "Germany",
                        "postcode": "10557",
                        "state": "Berlin",
                        "tags": [
                          {
                            "key": "customKey",
                            "value": "customValue",
                          },
                        ],
                      },
                    ],
                    "contactNumbers": [
                      "contactNumbers",
                    ],
                    "emailIds": [
                      "emailIds",
                    ],
                    "faxNumbers": [
                      "faxNumbers",
                    ],
                    "websites": [
                      "websites",
                    ],
                  },
                  "createdTimestamp": 1.1,
                  "executedRules": [
                    {
                      "labels": [
                        "UNEXPECTED_BEHAVIOR",
                      ],
                      "nature": "AML",
                      "ruleAction": "BLOCK",
                      "ruleDescription": "If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds",
                      "ruleHit": true,
                      "ruleId": "R-1a",
                      "ruleInstanceId": "ruleInstanceId",
                      "ruleName": "Proof of funds for high value transactions",
                    },
                  ],
                  "hitRules": [
                    {
                      "labels": [
                        "UNEXPECTED_BEHAVIOR",
                      ],
                      "nature": "FRAUD",
                      "ruleAction": "BLOCK",
                      "ruleDescription": "If a user makes a remittance transaction >= 1800 in EUR - ask for proof of funds",
                      "ruleId": "R-1a",
                      "ruleInstanceId": "ruleInstanceId",
                      "ruleName": "Proof of funds for high value transactions",
                    },
                  ],
                  "kycStatusDetails": {
                    "reason": "reason",
                    "status": "SUCCESSFUL",
                  },
                  "legalDocuments": [
                    {
                      "documentExpirationDate": 1839939034000,
                      "documentIssuedCountry": "DE",
                      "documentIssuedDate": 1639939034000,
                      "documentNumber": "Z9431P",
                      "documentType": "passport",
                      "nameOnDocument": {
                        "firstName": "Baran",
                        "lastName": "Ozkan",
                        "middleName": "Realblood",
                      },
                      "tags": [
                        {
                          "key": "customerType",
                          "value": "wallet",
                        },
                      ],
                    },
                  ],
                  "pepStatus": [
                    {
                      "isPepHit": true,
                      "pepCountry": "pepCountry",
                    },
                  ],
                  "reasonForAccountOpening": [
                    "reasonForAccountOpening",
                  ],
                  "riskLevel": "VERY_HIGH",
                  "tags": [
                    {
                      "key": "customKey",
                      "value": "customValue",
                    },
                  ],
                  "transactionLimits": {
                    "maximumDailyTransactionLimit": {
                      "amountCurrency": "GBP",
                      "amountValue": 800,
                    },
                    "maximumMonthlyTransactionLimit": {
                      "amountCurrency": "GBP",
                      "amountValue": 800,
                    },
                    "maximumQuarterlyTransactionLimit": {
                      "amountCurrency": "GBP",
                      "amountValue": 800,
                    },
                    "maximumTransactionLimit": {
                      "amountCurrency": "GBP",
                      "amountValue": 800,
                    },
                    "maximumWeeklyTransactionLimit": {
                      "amountCurrency": "GBP",
                      "amountValue": 800,
                    },
                    "maximumYearlyTransactionLimit": {
                      "amountCurrency": "GBP",
                      "amountValue": 800,
                    },
                  },
                  "userDetails": {
                    "countryOfNationality": "DE",
                    "countryOfResidence": "US",
                    "dateOfBirth": "1991-01-01",
                    "gender": "M",
                    "name": {
                      "firstName": "Baran",
                      "lastName": "Ozkan",
                      "middleName": "Realblood",
                    },
                  },
                  "userId": "userId",
                  "userSegment": "RETAIL",
                  "userStateDetails": {
                    "reason": "reason",
                    "state": "UNACCEPTABLE",
                    "userId": "userId",
                  },
                },
              },
            },
          ],
          "method": "POST",
          "pagination": undefined,
          "path": "/events/consumer/user",
          "request": {
            "body": {
              "properties": {
                "eventDescription": {
                  "display-name": "ConsumerUserEvent",
                  "docs": "Event description",
                  "type": "optional<string>",
                },
                "eventId": {
                  "display-name": "ConsumerUserEvent",
                  "docs": "Unique event ID",
                  "type": "optional<string>",
                },
                "reason": {
                  "display-name": "ConsumerUserEvent",
                  "docs": "Reason for the event or a state change",
                  "type": "optional<string>",
                },
                "timestamp": {
                  "docs": "Timestamp of the event",
                  "type": "double",
                  "validation": {
                    "exclusiveMax": undefined,
                    "exclusiveMin": undefined,
                    "max": 4133890801000,
                    "min": 1262300400000,
                    "multipleOf": undefined,
                  },
                },
                "updatedConsumerUserAttributes": {
                  "display-name": "ConsumerUserEvent",
                  "type": "optional<UserOptional>",
                },
                "userId": {
                  "docs": "Transaction ID the event pertains to",
                  "type": "string",
                  "validation": {
                    "format": undefined,
                    "maxLength": undefined,
                    "minLength": 1,
                    "pattern": undefined,
                  },
                },
              },
            },
            "headers": undefined,
            "name": "ConsumerUserEvent",
            "query-parameters": undefined,
          },
          "response": {
            "docs": "Created",
            "type": "UserWithRulesResult",
          },
        },
      },
      "source": {
        "openapi": "flagright/openapi.yml",
      },
    },
    "types": {
      "ACHDetails": {
        "docs": "Model for ACH payment method",
        "properties": {
          "accountNumber": {
            "display-name": "ACHDetails",
            "docs": "Bank account number of the individual",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "bankAddress": {
            "display-name": "ACHDetails",
            "type": "optional<Address>",
          },
          "bankName": {
            "display-name": "ACHDetails",
            "docs": "Name of the bank",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "beneficiaryName": {
            "display-name": "ACHDetails",
            "docs": "Beneficiary name of the account",
            "type": "optional<string>",
          },
          "name": {
            "display-name": "ACHDetails",
            "docs": "Name of the account holder",
            "type": "optional<string>",
          },
          "routingNumber": {
            "display-name": "ACHDetails",
            "docs": "Routing number of the bank",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "ACHPaymentMethod": {
        "display-name": "ACHPaymentMethod",
        "docs": "Classify the method of payment as "ACH" for ACHDetails",
        "type": "literal<"ACH">",
      },
      "AcquisitionChannel": {
        "docs": "Model for User acquisition channel",
        "enum": [
          "ORGANIC",
          "PAID",
          "REFERRAL",
          "OFFLINE",
          "GATHERING",
          "UNKNOWN",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "Address": {
        "docs": "Model for standardized address",
        "properties": {
          "addressLines": {
            "docs": "Address lines of the user's residence address",
            "type": "list<unknown>",
          },
          "city": {
            "docs": "City of the user's residence address",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "country": {
            "docs": "User's country of residence",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "postcode": {
            "docs": "Post code of the user's residence address",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "state": {
            "display-name": "Address",
            "docs": "State of the user's residence address",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "tags": {
            "display-name": "Address",
            "docs": "Additional information that can be added via tags",
            "type": "optional<list<Tag>>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "AlertClosedDetails": {
        "docs": undefined,
        "properties": {
          "alertId": {
            "display-name": "AlertClosedDetails",
            "type": "optional<string>",
          },
          "comment": {
            "display-name": "AlertClosedDetails",
            "type": "optional<string>",
          },
          "reasonDescriptionForOther": {
            "display-name": "AlertClosedDetails",
            "type": "optional<list<string>>",
          },
          "reasons": {
            "display-name": "AlertClosedDetails",
            "type": "optional<list<string>>",
          },
          "ruleDescription": {
            "display-name": "AlertClosedDetails",
            "type": "optional<string>",
          },
          "ruleId": {
            "display-name": "AlertClosedDetails",
            "type": "optional<string>",
          },
          "ruleInstanceId": {
            "display-name": "AlertClosedDetails",
            "type": "optional<string>",
          },
          "ruleName": {
            "display-name": "AlertClosedDetails",
            "type": "optional<string>",
          },
          "status": {
            "display-name": "AlertClosedDetails",
            "type": "optional<string>",
          },
          "transactionIds": {
            "display-name": "AlertClosedDetails",
            "type": "optional<list<string>>",
          },
          "userId": {
            "display-name": "AlertClosedDetails",
            "type": "optional<string>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "Amount": {
        "docs": "Model for amount",
        "properties": {
          "amountCurrency": {
            "display-name": "CurrencyCode",
            "type": "CurrencyCode",
          },
          "amountValue": {
            "docs": "Numerical value of the transaction",
            "type": "double",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "Business": {
        "docs": undefined,
        "extends": [
          "BusinessBase",
          "BusinessOptional",
        ],
        "properties": {},
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "BusinessBase": {
        "docs": "Model for a business user base fields",
        "properties": {
          "createdTimestamp": {
            "docs": "Timestamp when the user was created",
            "type": "double",
            "validation": {
              "exclusiveMax": undefined,
              "exclusiveMin": undefined,
              "max": 4133890801000,
              "min": 1262300400000,
              "multipleOf": undefined,
            },
          },
          "userId": {
            "docs": "Unique user ID for the user",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "BusinessEntityLink": {
        "docs": undefined,
        "properties": {
          "childUserIds": {
            "display-name": "BusinessEntityLink",
            "type": "optional<list<string>>",
          },
          "parentUserId": {
            "display-name": "BusinessEntityLink",
            "type": "optional<string>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "BusinessOptional": {
        "docs": "Model for a business user - optional fields",
        "properties": {
          "acquisitionChannel": {
            "display-name": "BusinessOptional",
            "type": "optional<AcquisitionChannel>",
          },
          "allowedPaymentMethods": {
            "display-name": "BusinessOptional",
            "type": "optional<list<PaymentMethod>>",
          },
          "directors": {
            "display-name": "BusinessOptional",
            "docs": "Director(s) of the company. Must be at least one",
            "type": "optional<list<Person>>",
          },
          "kycStatusDetails": {
            "display-name": "BusinessOptional",
            "type": "optional<KYCStatusDetails>",
          },
          "legalEntity": {
            "display-name": "BusinessOptional",
            "type": "optional<LegalEntity>",
          },
          "linkedEntities": {
            "display-name": "BusinessOptional",
            "type": "optional<BusinessEntityLink>",
          },
          "mccDetails": {
            "display-name": "BusinessOptional",
            "type": "optional<MCCDetails>",
          },
          "riskLevel": {
            "display-name": "BusinessOptional",
            "type": "optional<RiskLevel>",
          },
          "savedPaymentDetails": {
            "display-name": "BusinessOptional",
            "type": "optional<list<BusinessOptionalSavedPaymentDetailsItem>>",
          },
          "shareHolders": {
            "display-name": "BusinessOptional",
            "docs": "Shareholders (beneficiaries) of the company that hold at least 25% ownership. Can be another company or an individual",
            "type": "optional<list<Person>>",
          },
          "tags": {
            "display-name": "BusinessOptional",
            "docs": "Additional information that can be added via tags",
            "type": "optional<list<Tag>>",
          },
          "transactionLimits": {
            "display-name": "BusinessOptional",
            "type": "optional<TransactionLimits>",
          },
          "userStateDetails": {
            "display-name": "BusinessOptional",
            "type": "optional<UserStateDetails>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "BusinessOptionalSavedPaymentDetailsItem": {
        "availability": undefined,
        "base-properties": {},
        "discriminant": "method",
        "docs": undefined,
        "encoding": undefined,
        "source": {
          "openapi": "flagright/openapi.yml",
        },
        "union": {
          "ACH": {
            "display-name": "ACHDetails",
            "type": "ACHDetails",
          },
          "CARD": {
            "display-name": "CardDetails",
            "type": "CardDetails",
          },
          "CHECK": {
            "display-name": "CheckDetails",
            "type": "CheckDetails",
          },
          "GENERIC_BANK_ACCOUNT": {
            "display-name": "GenericBankAccountDetails",
            "type": "GenericBankAccountDetails",
          },
          "IBAN": {
            "display-name": "IBANDetails",
            "type": "IBANDetails",
          },
          "MPESA": {
            "display-name": "MpesaDetails",
            "type": "MpesaDetails",
          },
          "SWIFT": {
            "display-name": "SWIFTDetails",
            "type": "SWIFTDetails",
          },
          "UPI": {
            "display-name": "UPIDetails",
            "type": "UPIDetails",
          },
          "WALLET": {
            "display-name": "WalletDetails",
            "type": "WalletDetails",
          },
        },
      },
      "BusinessUsersResponse": {
        "docs": "Model for business user risk score response",
        "properties": {
          "userId": {
            "docs": "user ID the risk score pertains to",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "BusinessWithRulesResult": {
        "docs": "Model for business payload with rules result",
        "extends": [
          "Business",
        ],
        "properties": {
          "executedRules": "optional<list<ExecutedRulesResult>>",
          "hitRules": "optional<list<HitRulesDetails>>",
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "CardDetails": {
        "docs": "Model for credit or debit card details",
        "properties": {
          "3dsDone": {
            "display-name": "CardDetails",
            "docs": "Whether 3ds was successfully enforced for the transaction",
            "name": "_3dsDone",
            "type": "optional<boolean>",
          },
          "cardAuthenticated": {
            "display-name": "CardDetails",
            "docs": "Authentication of Card",
            "type": "optional<boolean>",
          },
          "cardBrand": {
            "display-name": "CardDetails",
            "docs": "Brand of Card",
            "type": "optional<CardDetailsCardBrand>",
          },
          "cardExpiry": {
            "display-name": "CardDetails",
            "type": "optional<CardExpiry>",
          },
          "cardFingerprint": {
            "display-name": "CardDetails",
            "docs": "Unique card fingerprint that helps identify a specific card without having to use explicit card number. This is likely available at your card payment scheme provider",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "cardFunding": {
            "display-name": "CardDetails",
            "docs": "Funding of Card",
            "type": "optional<CardDetailsCardFunding>",
          },
          "cardIssuedCountry": {
            "display-name": "CardDetails",
            "type": "optional<CountryCode>",
          },
          "cardLast4Digits": {
            "display-name": "CardDetails",
            "docs": "Last 4 digits of Card",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": 4,
              "minLength": 4,
              "pattern": undefined,
            },
          },
          "cardType": {
            "display-name": "CardDetails",
            "type": "optional<CardDetailsCardType>",
          },
          "merchantDetails": {
            "display-name": "CardDetails",
            "type": "optional<CardMerchantDetails>",
          },
          "nameOnCard": {
            "display-name": "CardDetails",
            "type": "optional<ConsumerName>",
          },
          "paymentChannel": {
            "display-name": "CardDetails",
            "type": "optional<string>",
          },
          "transactionReferenceField": {
            "display-name": "CardDetails",
            "docs": "Reference for the transaction",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "CardDetailsCardBrand": {
        "docs": "Brand of Card",
        "enum": [
          "VISA",
          "MASTERCARD",
          "AMERICAN_EXPRESS",
          "DISCOVER",
          "UNIONPAY",
          "RUPAY",
          "JCB",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "CardDetailsCardFunding": {
        "docs": "Funding of Card",
        "enum": [
          "CREDIT",
          "DEBIT",
          "PREPAID",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "CardDetailsCardType": {
        "enum": [
          "VIRTUAL",
          "PHYSICAL",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "CardExpiry": {
        "docs": undefined,
        "properties": {
          "month": {
            "display-name": "CardExpiry",
            "type": "optional<double>",
          },
          "year": {
            "display-name": "CardExpiry",
            "type": "optional<double>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "CardMerchantDetails": {
        "docs": undefined,
        "properties": {
          "MCC": {
            "display-name": "CardMerchantDetails",
            "type": "optional<string>",
          },
          "category": {
            "display-name": "CardMerchantDetails",
            "type": "optional<string>",
          },
          "city": {
            "display-name": "CardMerchantDetails",
            "type": "optional<string>",
          },
          "country": {
            "display-name": "CardMerchantDetails",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": 2,
              "minLength": 2,
              "pattern": undefined,
            },
          },
          "id": {
            "display-name": "CardMerchantDetails",
            "type": "optional<string>",
          },
          "postCode": {
            "display-name": "CardMerchantDetails",
            "type": "optional<string>",
          },
          "state": {
            "display-name": "CardMerchantDetails",
            "type": "optional<string>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "CardPaymentMethod": {
        "display-name": "CardPaymentMethod",
        "docs": "Classify the method of payment as "Card" for CardDetails
",
        "type": "literal<"CARD">",
      },
      "CaseClosedDetails": {
        "docs": undefined,
        "properties": {
          "caseId": {
            "display-name": "CaseClosedDetails",
            "type": "optional<string>",
          },
          "comment": {
            "display-name": "CaseClosedDetails",
            "type": "optional<string>",
          },
          "reasonDescriptionForOther": {
            "display-name": "CaseClosedDetails",
            "type": "optional<list<string>>",
          },
          "reasons": {
            "display-name": "CaseClosedDetails",
            "type": "optional<list<string>>",
          },
          "status": {
            "display-name": "CaseClosedDetails",
            "type": "optional<string>",
          },
          "transactionIds": {
            "display-name": "CaseClosedDetails",
            "type": "optional<list<string>>",
          },
          "userId": {
            "display-name": "CaseClosedDetails",
            "type": "optional<string>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "CaseManagementEvent": {
        "docs": "Model for case management events",
        "properties": {
          "caseStatus": {
            "docs": "Status of a case. E.g. Open, Closed etc.",
            "type": "CaseManagementEventCaseStatus",
          },
          "caseStatusReason": {
            "docs": "Case status reason. E.g. Closed & False Positive, Closed & Investigation Completed etc.",
            "type": "CaseManagementEventCaseStatusReason",
          },
          "caseStatusReasonDescription": {
            "display-name": "CaseManagementEvent",
            "docs": "Case status reason description",
            "type": "optional<string>",
          },
          "eventId": {
            "display-name": "CaseManagementEvent",
            "docs": "Event ID the case pertains to",
            "type": "optional<string>",
          },
          "timestamp": {
            "docs": "Timestamp of the event",
            "type": "double",
            "validation": {
              "exclusiveMax": undefined,
              "exclusiveMin": undefined,
              "max": undefined,
              "min": 1262300400000,
              "multipleOf": undefined,
            },
          },
          "transactionId": {
            "display-name": "CaseManagementEvent",
            "docs": "Transaction ID the case pertains to",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "userId": {
            "display-name": "CaseManagementEvent",
            "docs": "User ID the case pertains to",
            "type": "optional<string>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "CaseManagementEventCaseStatus": {
        "docs": "Status of a case. E.g. Open, Closed etc.",
        "enum": [
          "CLOSED",
          "HIT",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "CaseManagementEventCaseStatusReason": {
        "docs": "Case status reason. E.g. Closed & False Positive, Closed & Investigation Completed etc.",
        "enum": [
          "FALSE_POSITIVE",
          "INVESTIGATION_COMPLETED",
          "DOCUMENTS_COLLECTED",
          "OTHER",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "CheckDetails": {
        "docs": undefined,
        "properties": {
          "checkIdentifier": {
            "display-name": "CheckDetails",
            "type": "optional<string>",
          },
          "checkNumber": {
            "display-name": "CheckDetails",
            "type": "optional<string>",
          },
          "deliveryStatus": {
            "display-name": "CheckDetails",
            "type": "optional<CheckDetailsDeliveryStatus>",
          },
          "etaTimestamp": {
            "display-name": "CheckDetails",
            "type": "optional<double>",
            "validation": {
              "exclusiveMax": undefined,
              "exclusiveMin": undefined,
              "max": undefined,
              "min": 1262300400000,
              "multipleOf": undefined,
            },
          },
          "name": {
            "display-name": "CheckDetails",
            "type": "optional<string>",
          },
          "shippingAddress": {
            "display-name": "CheckDetails",
            "type": "optional<Address>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "CheckDetailsDeliveryStatus": {
        "enum": [
          "COMPLETED",
          "PENDING",
          "SETTLED",
          "CANCELED",
          "REFUND",
          "DECLINED",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "CheckPaymentMethod": {
        "display-name": "CheckPaymentMethod",
        "docs": "Classify the method of payment as "CHECK" for CheckDetails",
        "type": "literal<"CHECK">",
      },
      "CompanyFinancialDetails": {
        "docs": "Model for business user company financial details",
        "properties": {
          "expectedTransactionAmountPerMonth": {
            "display-name": "CompanyFinancialDetails",
            "type": "optional<Amount>",
          },
          "expectedTurnoverPerMonth": {
            "display-name": "CompanyFinancialDetails",
            "type": "optional<Amount>",
          },
          "tags": {
            "display-name": "CompanyFinancialDetails",
            "docs": "Additional information that can be added via tags",
            "type": "optional<list<Tag>>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "CompanyGeneralDetails": {
        "docs": "Model for business user company general details",
        "properties": {
          "businessIndustry": {
            "display-name": "CompanyGeneralDetails",
            "docs": "The industry the business operates in for a business customer",
            "type": "optional<list<string>>",
          },
          "legalName": {
            "docs": "Legal name of the company",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "mainProductsServicesSold": {
            "display-name": "CompanyGeneralDetails",
            "docs": "The key products and services provided by the company",
            "type": "optional<list<string>>",
          },
          "tags": {
            "display-name": "CompanyGeneralDetails",
            "docs": "Additional information that can be added via tags",
            "type": "optional<list<Tag>>",
          },
          "userRegistrationStatus": {
            "display-name": "CompanyGeneralDetails",
            "type": "optional<UserRegistrationStatus>",
          },
          "userSegment": {
            "display-name": "CompanyGeneralDetails",
            "docs": "Segmentation of the business user",
            "type": "optional<CompanyGeneralDetailsUserSegment>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "CompanyGeneralDetailsUserSegment": {
        "docs": "Segmentation of the business user",
        "enum": [
          "SOLE_PROPRIETORSHIP",
          "SMB",
          "SMALL",
          "MEDIUM",
          "LARGE",
          "UNKNOWN",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "CompanyRegistrationDetails": {
        "docs": "Model for business user company registration details",
        "properties": {
          "dateOfRegistration": {
            "display-name": "CompanyRegistrationDetails",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": "^(\\d{4}-\\d{2}-\\d{2})*$",
            },
          },
          "legalEntityType": {
            "display-name": "CompanyRegistrationDetails",
            "docs": "Type of legal entity. Ex: Limited Liability",
            "type": "optional<string>",
          },
          "registrationCountry": {
            "display-name": "CountryCode",
            "type": "CountryCode",
          },
          "registrationIdentifier": {
            "docs": "Commercial registry registration number for the company in its registration country",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "tags": {
            "display-name": "CompanyRegistrationDetails",
            "docs": "Additional information that can be added via tags",
            "type": "optional<list<Tag>>",
          },
          "taxIdentifier": {
            "display-name": "CompanyRegistrationDetails",
            "docs": "Tax ID number of the registered entity",
            "type": "optional<string>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "ConsumerName": {
        "docs": "Model for a generic consumer name",
        "properties": {
          "firstName": {
            "docs": "First name of the user",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "lastName": {
            "display-name": "ConsumerName",
            "docs": "Last name of the user",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "middleName": {
            "display-name": "ConsumerName",
            "docs": "Middle name of the user",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "ConsumerUsersResponse": {
        "docs": "Model for consumer user risk score response",
        "properties": {
          "userId": {
            "docs": "user ID the risk score pertains to",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "ContactDetails": {
        "docs": "Model for business user contact information details",
        "properties": {
          "addresses": {
            "display-name": "ContactDetails",
            "docs": "Address(es) of the company",
            "type": "optional<list<Address>>",
          },
          "contactNumbers": {
            "display-name": "ContactDetails",
            "docs": "Phone numbers to contact a given business customer",
            "type": "optional<list<string>>",
          },
          "emailIds": {
            "display-name": "ContactDetails",
            "docs": "Email addresses of the contacts for a given business customer",
            "type": "optional<list<string>>",
          },
          "faxNumbers": {
            "display-name": "ContactDetails",
            "docs": "Fax numbers to contact a business customer",
            "type": "optional<list<string>>",
          },
          "websites": {
            "display-name": "ContactDetails",
            "docs": "Website of the company",
            "type": "optional<list<string>>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "CountryCode": {
        "enum": [
          "AF",
          "AL",
          "DZ",
          "AS",
          "AD",
          "AO",
          "AI",
          "AQ",
          "AG",
          "AR",
          "AM",
          "AW",
          "AU",
          "AT",
          "AZ",
          "BS",
          "BH",
          "BD",
          "BB",
          "BY",
          "BE",
          "BZ",
          "BJ",
          "BM",
          "BT",
          "BO",
          "BQ",
          "BA",
          "BW",
          "BV",
          "BR",
          "IO",
          "BN",
          "BG",
          "BF",
          "BI",
          "CV",
          "KH",
          "CM",
          "CA",
          "KY",
          "CF",
          "TD",
          "CL",
          "CN",
          "CX",
          "CC",
          "CO",
          "KM",
          "CD",
          "CG",
          "CK",
          "CR",
          "HR",
          "CU",
          "CW",
          "CY",
          "CZ",
          "CI",
          "DK",
          "DJ",
          "DM",
          "DO",
          "EC",
          "EG",
          "SV",
          "GQ",
          "ER",
          "EE",
          "SZ",
          "ET",
          "FK",
          "FO",
          "FJ",
          "FI",
          "FR",
          "GF",
          "PF",
          "TF",
          "GA",
          "GM",
          "GE",
          "DE",
          "GH",
          "GI",
          "GR",
          "GL",
          "GD",
          "GP",
          "GU",
          "GT",
          "GG",
          "GN",
          "GW",
          "GY",
          "HT",
          "HM",
          "VA",
          "HN",
          "HK",
          "HU",
          "IS",
          "IN",
          "ID",
          "IR",
          "IQ",
          "IE",
          "IM",
          "IL",
          "IT",
          "JM",
          "JP",
          "JE",
          "JO",
          "KZ",
          "KE",
          "KI",
          "KP",
          "KR",
          "KW",
          "KG",
          "LA",
          "LV",
          "LB",
          "LS",
          "LR",
          "LY",
          "LI",
          "LT",
          "LU",
          "MO",
          "MG",
          "MW",
          "MY",
          "MV",
          "ML",
          "MT",
          "MH",
          "MQ",
          "MR",
          "MU",
          "YT",
          "MX",
          "FM",
          "MD",
          "MC",
          "MN",
          "ME",
          "MS",
          "MA",
          "MZ",
          "MM",
          "NA",
          "NR",
          "NP",
          "NL",
          "NC",
          "NZ",
          "NI",
          "NE",
          "NG",
          "NU",
          "NF",
          "MK",
          "MP",
          "NO",
          "OM",
          "PK",
          "PW",
          "PS",
          "PA",
          "PG",
          "PY",
          "PE",
          "PH",
          "PN",
          "PL",
          "PT",
          "PR",
          "QA",
          "RO",
          "RU",
          "RW",
          "RE",
          "BL",
          "SH",
          "KN",
          "LC",
          "MF",
          "PM",
          "VC",
          "WS",
          "SM",
          "ST",
          "SA",
          "SN",
          "RS",
          "SC",
          "SL",
          "SG",
          "SX",
          "SK",
          "SI",
          "SB",
          "SO",
          "ZA",
          "GS",
          "SS",
          "ES",
          "LK",
          "SD",
          "SR",
          "SJ",
          "SE",
          "CH",
          "SY",
          "TW",
          "TJ",
          "TZ",
          "TH",
          "TL",
          "TG",
          "TK",
          "TO",
          "TT",
          "TN",
          "TM",
          "TC",
          "TV",
          "TR",
          "UG",
          "UA",
          "AE",
          "GB",
          "UM",
          "US",
          "UY",
          "UZ",
          "VU",
          "VE",
          "VN",
          "VG",
          "VI",
          "WF",
          "EH",
          "YE",
          "ZM",
          "ZW",
          "AX",
          {
            "name": "NOT_APPLICABLE",
            "value": "N/A",
          },
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "CurrencyCode": {
        "enum": [
          {
            "name": "OneInch",
            "value": "1INCH",
          },
          "AAVE",
          "ADA",
          "AED",
          "AFN",
          "ALGO",
          "ALL",
          "AMD",
          "AMP",
          "ANG",
          "AOA",
          "AR",
          "ARS",
          "ATOM",
          "AUD",
          "AVAX",
          "AWG",
          "AXS",
          "AZN",
          "BAM",
          "BAT",
          "BBD",
          "BCH",
          "BDT",
          "BGN",
          "BHD",
          "BIF",
          "BMD",
          "BNB",
          "BND",
          "BOB",
          "BRL",
          "BSD",
          "BSV",
          "BTC",
          "BTCB",
          "BTG",
          "BTN",
          "BUSD",
          "BWP",
          "BYN",
          "BYR",
          "BZD",
          "CAD",
          "CAKE",
          "CDF",
          "CELO",
          "CHF",
          "CHZ",
          "CLF",
          "CLP",
          "CNY",
          "COMP",
          "COP",
          "CRC",
          "CRO",
          "CRV",
          "CUC",
          "CUP",
          "CVE",
          "CVX",
          "CZK",
          "DAI",
          "DASH",
          "DCR",
          "DFI",
          "DJF",
          "DKK",
          "DOGE",
          "DOP",
          "DOT",
          "DZD",
          "EGLD",
          "EGP",
          "ENJ",
          "EOS",
          "ERN",
          "ETB",
          "ETC",
          "ETH",
          "EUR",
          "FEI",
          "FIL",
          "FJD",
          "FKP",
          "FLOW",
          "FRAX",
          "FTM",
          "FTT",
          "GALA",
          "GBP",
          "GEL",
          "GGP",
          "GHS",
          "GIP",
          "GMD",
          "GNF",
          "GNO",
          "GRT",
          "GT",
          "GTQ",
          "GYD",
          "HBAR",
          "HKD",
          "HNL",
          "HNT",
          "HOT",
          "HRK",
          "HT",
          "HTG",
          "HUF",
          "ICP",
          "IDR",
          "ILS",
          "IMP",
          "INJ",
          "INR",
          "IQD",
          "IRR",
          "ISK",
          "JEP",
          "JMD",
          "JOD",
          "JPY",
          "KAVA",
          "KCS",
          "KDA",
          "KES",
          "KGS",
          "KHR",
          "KLAY",
          "KMF",
          "KNC",
          "KPW",
          "KRW",
          "KSM",
          "KWD",
          "KYD",
          "KZT",
          "LAK",
          "LBP",
          "LEO",
          "LINK",
          "LKR",
          "LRC",
          "LRD",
          "LSL",
          "LTC",
          "LTL",
          "LUNA",
          "LVL",
          "LYD",
          "MAD",
          "MANA",
          "MATIC",
          "MDL",
          "MGA",
          "MINA",
          "MIOTA",
          "MKD",
          "MKR",
          "MMK",
          "MNT",
          "MOP",
          "MRO",
          "MUR",
          "MVR",
          "MWK",
          "MXN",
          "MYR",
          "MZN",
          "NAD",
          "NEAR",
          "NEO",
          "NEXO",
          "NGN",
          "NIO",
          "NOK",
          "NPR",
          "NZD",
          "OKB",
          "OMR",
          "ONE",
          "PAB",
          "PAXG",
          "PEN",
          "PGK",
          "PHP",
          "PKR",
          "PLN",
          "PYG",
          "QAR",
          "QNT",
          "QTUM",
          "RON",
          "RSD",
          "RUB",
          "RUNE",
          "RWF",
          "SAND",
          "SAR",
          "SBD",
          "SCR",
          "SDG",
          "SEK",
          "SGD",
          "SHIB",
          "SHP",
          "SLE",
          "SLL",
          "SOL",
          "SOS",
          "SRD",
          "STD",
          "STX",
          "SVC",
          "SYP",
          "SZL",
          "THB",
          "THETA",
          "TJS",
          "TMT",
          "TND",
          "TOP",
          "TRX",
          "TRY",
          "TTD",
          "TTT",
          "TUSD",
          "TWD",
          "TZS",
          "UAH",
          "UGX",
          "UNI",
          "USD",
          "USDC",
          "USDP",
          "USDT",
          "UYU",
          "UZS",
          "VEF",
          "VET",
          "VND",
          "VUV",
          "WAVES",
          "WBTC",
          "WEMIX",
          "WST",
          "XAF",
          "XAG",
          "XAU",
          "XCD",
          "XCH",
          "XDC",
          "XDR",
          "XEC",
          "XEM",
          "XLM",
          "XMR",
          "XOF",
          "XPF",
          "XRP",
          "XTZ",
          "YER",
          "ZAR",
          "ZEC",
          "ZIL",
          "ZMK",
          "ZMW",
          "ZWL",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "Date": {
        "docs": "Model for date",
        "properties": {
          "day": {
            "docs": "Day of date",
            "type": "double",
          },
          "month": {
            "docs": "Month of date",
            "type": "double",
          },
          "year": {
            "docs": "Year of date",
            "type": "double",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "DeviceData": {
        "docs": "Model for device data",
        "properties": {
          "appVersion": {
            "display-name": "DeviceData",
            "docs": "The version of the app your user is using on their device at a given timestamp for an event or transaction",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "batteryLevel": {
            "display-name": "DeviceData",
            "docs": "Battery level of the device used for a transaction or event at a given timestamp",
            "type": "optional<double>",
          },
          "deviceIdentifier": {
            "display-name": "DeviceData",
            "docs": "Device identifier number",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "deviceLatitude": {
            "display-name": "DeviceData",
            "docs": "Device latitude at a give timestamp for an event or transaction",
            "type": "optional<double>",
          },
          "deviceLongitude": {
            "display-name": "DeviceData",
            "docs": "Device longitude at a give timestamp for an event or transaction",
            "type": "optional<double>",
          },
          "deviceMaker": {
            "display-name": "DeviceData",
            "docs": "The maker of the device at a given timestamp for an event or transaction",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "deviceModel": {
            "display-name": "DeviceData",
            "docs": "The model of the device at a given timestamp for an event or transaction",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "deviceYear": {
            "display-name": "DeviceData",
            "docs": "The year the device was manufactured at a given timestamp for an event or transaction",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "ipAddress": {
            "display-name": "DeviceData",
            "docs": "IP address of the device at a given timestamp for an event or transaction",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "operatingSystem": {
            "display-name": "DeviceData",
            "docs": "Operating system of the device at a given timestamp for an event or transaction",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "vpnUsed": {
            "display-name": "DeviceData",
            "docs": "Whether VPN was used at a given timestamp for an event or transaction",
            "type": "optional<boolean>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "ExecutedRulesResult": {
        "docs": "Model for list of executed rules",
        "properties": {
          "labels": {
            "display-name": "ExecutedRulesResult",
            "type": "optional<list<RuleLabels>>",
          },
          "nature": {
            "display-name": "ExecutedRulesResult",
            "type": "optional<RuleNature>",
          },
          "ruleAction": {
            "display-name": "RuleAction",
            "type": "RuleAction",
          },
          "ruleDescription": {
            "docs": "Description of the rule",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "ruleHit": "boolean",
          "ruleHitMeta": {
            "display-name": "ExecutedRulesResult",
            "type": "optional<RuleHitMeta>",
          },
          "ruleId": {
            "docs": "Unique rule identifier",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "ruleInstanceId": "string",
          "ruleName": {
            "docs": "Name of the rule",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "FailedRulesResult": {
        "docs": "Model for list of rules failed execution. It means rules could not be run",
        "properties": {
          "failureException": {
            "display-name": "RuleFailureException",
            "type": "RuleFailureException",
          },
          "ruleDescription": {
            "docs": "Description of the rule",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "ruleId": {
            "docs": "Unique rule identifier",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "ruleName": {
            "docs": "Name of the rule",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "FalsePositiveDetails": {
        "docs": undefined,
        "properties": {
          "confidenceScore": "double",
          "isFalsePositive": "boolean",
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "GeneralBankAccountPaymentMethod": {
        "display-name": "GeneralBankAccountPaymentMethod",
        "docs": "Classify the method of payment as "GENERIC_BANK_ACCOUNT" for GenericBankAccountDetails",
        "type": "literal<"GENERIC_BANK_ACCOUNT">",
      },
      "GenericBankAccountDetails": {
        "docs": "Model for any generic bank account",
        "properties": {
          "accountNumber": {
            "display-name": "GenericBankAccountDetails",
            "docs": "Bank account number",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "accountType": {
            "display-name": "GenericBankAccountDetails",
            "docs": "Bank account type. E.g. Checking, Savings etc.",
            "type": "optional<string>",
          },
          "bankAddress": {
            "display-name": "GenericBankAccountDetails",
            "type": "optional<Address>",
          },
          "bankCode": {
            "display-name": "GenericBankAccountDetails",
            "docs": "Unique identifier of the bank. In some countries, this can be the same as the bank's SWIFT code",
            "type": "optional<string>",
          },
          "bankName": {
            "display-name": "GenericBankAccountDetails",
            "docs": "Name of the bank",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "name": {
            "display-name": "GenericBankAccountDetails",
            "docs": "Name of the account holder",
            "type": "optional<string>",
          },
          "paymentChannel": {
            "display-name": "GenericBankAccountDetails",
            "type": "optional<string>",
          },
          "specialInstructions": {
            "display-name": "GenericBankAccountDetails",
            "docs": "Special instructions to be specified if any",
            "type": "optional<string>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "HitRulesDetails": {
        "docs": "Model for list of hit rules",
        "properties": {
          "labels": {
            "display-name": "HitRulesDetails",
            "type": "optional<list<RuleLabels>>",
          },
          "nature": {
            "display-name": "HitRulesDetails",
            "type": "optional<RuleNature>",
          },
          "ruleAction": {
            "display-name": "RuleAction",
            "type": "RuleAction",
          },
          "ruleDescription": {
            "docs": "Description of the rule",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "ruleHitMeta": {
            "display-name": "HitRulesDetails",
            "type": "optional<RuleHitMeta>",
          },
          "ruleId": {
            "docs": "Unique rule identifier",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "ruleInstanceId": "string",
          "ruleName": {
            "docs": "Name of the rule",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "IBANDetails": {
        "docs": "Standardized model for Bank Details",
        "properties": {
          "BIC": {
            "display-name": "IBANDetails",
            "docs": "Identifier for the bank. Can be routing number, BIK number, SWIFT code, BIC number etc.",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "IBAN": {
            "display-name": "IBANDetails",
            "docs": "Account number of the user. Can be account number, IBAN number etc.",
            "type": "optional<string>",
          },
          "bankAddress": {
            "display-name": "IBANDetails",
            "type": "optional<Address>",
          },
          "bankBranchCode": {
            "display-name": "IBANDetails",
            "docs": "Branch code of the bank. In some countries, this can be the same as the bank's SWIFT code",
            "type": "optional<string>",
          },
          "bankName": {
            "display-name": "IBANDetails",
            "docs": "Name of the bank",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "country": {
            "display-name": "IBANDetails",
            "type": "optional<CountryCode>",
          },
          "name": {
            "display-name": "IBANDetails",
            "docs": "Name of the bank account holder",
            "type": "optional<string>",
          },
          "paymentChannel": {
            "display-name": "IBANDetails",
            "type": "optional<string>",
          },
          "tags": {
            "display-name": "IBANDetails",
            "type": "optional<Tag>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "IBANPaymentMethod": {
        "display-name": "IBANPaymentMethod",
        "docs": "Classify the method of payment as "IBAN" for IBANDetails
",
        "type": "literal<"IBAN">",
      },
      "KYCStatus": {
        "enum": [
          "SUCCESSFUL",
          "FAILED",
          "NOT_STARTED",
          "IN_PROGRESS",
          "MANUAL_REVIEW",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "KYCStatusDetails": {
        "docs": undefined,
        "properties": {
          "reason": {
            "display-name": "KYCStatusDetails",
            "type": "optional<string>",
          },
          "status": {
            "display-name": "KYCStatusDetails",
            "type": "optional<KYCStatus>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "LegalDocument": {
        "docs": "LegalDocument model generalizes User's identity document type (ex: Passport)",
        "properties": {
          "documentExpirationDate": {
            "display-name": "LegalDocument",
            "docs": "User's identity document expiration date (UNIX timestamp in milliseconds)",
            "type": "optional<double>",
          },
          "documentIssuedCountry": {
            "display-name": "CountryCode",
            "type": "CountryCode",
          },
          "documentIssuedDate": {
            "display-name": "LegalDocument",
            "docs": "User's identity document issuance date (UNIX timestamp in milliseconds)",
            "type": "optional<double>",
          },
          "documentNumber": {
            "docs": "User's unique identity document number such as passport number",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "documentType": {
            "docs": "User's identity document type such as passport, national ID etc.",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "nameOnDocument": {
            "display-name": "LegalDocument",
            "type": "optional<ConsumerName>",
          },
          "tags": {
            "display-name": "LegalDocument",
            "docs": "Additional information that can be added via tags",
            "type": "optional<list<Tag>>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "LegalEntity": {
        "docs": "Model for business user legal entity details",
        "properties": {
          "companyFinancialDetails": {
            "display-name": "LegalEntity",
            "type": "optional<CompanyFinancialDetails>",
          },
          "companyGeneralDetails": {
            "display-name": "CompanyGeneralDetails",
            "type": "CompanyGeneralDetails",
          },
          "companyRegistrationDetails": {
            "display-name": "LegalEntity",
            "type": "optional<CompanyRegistrationDetails>",
          },
          "contactDetails": {
            "display-name": "LegalEntity",
            "type": "optional<ContactDetails>",
          },
          "reasonForAccountOpening": {
            "display-name": "LegalEntity",
            "docs": "Reason for opening the account at financial institution",
            "type": "optional<list<string>>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "ListData": {
        "docs": "Payload of a list, new or existed",
        "properties": {
          "items": {
            "display-name": "ListData",
            "docs": "List items",
            "type": "optional<list<ListItem>>",
          },
          "metadata": {
            "display-name": "ListData",
            "type": "optional<ListMetadata>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "ListExisted": {
        "docs": "List with ID and header",
        "properties": {
          "header": {
            "display-name": "ListHeader",
            "type": "ListHeader",
          },
          "items": {
            "docs": "List items",
            "type": "list<ListItem>",
          },
          "listId": "string",
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "ListHeader": {
        "docs": undefined,
        "properties": {
          "createdTimestamp": "double",
          "listId": "string",
          "listType": "ListType",
          "metadata": {
            "display-name": "ListHeader",
            "type": "optional<ListMetadata>",
          },
          "size": "double",
          "subtype": "ListSubtype",
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "ListItem": {
        "docs": undefined,
        "properties": {
          "key": "string",
          "metadata": {
            "display-name": "ListItem",
            "type": "optional<ListKeyMetadata>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "ListKeyMetadata": {
        "display-name": "ListKeyMetadata",
        "type": "map<string, unknown>",
      },
      "ListMetadata": {
        "docs": undefined,
        "extra-properties": true,
        "properties": {
          "checksum": {
            "display-name": "ListMetadata",
            "type": "optional<string>",
          },
          "description": {
            "display-name": "ListMetadata",
            "docs": "List description",
            "type": "optional<string>",
          },
          "name": {
            "display-name": "ListMetadata",
            "docs": "List name",
            "type": "optional<string>",
          },
          "status": {
            "display-name": "ListMetadata",
            "type": "optional<boolean>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "ListSubtype": {
        "enum": [
          "USER_ID",
          "CARD_FINGERPRINT_NUMBER",
          "IBAN_NUMBER",
          "BANK_ACCOUNT_NUMBER",
          "ACH_ACCOUNT_NUMBER",
          "SWIFT_ACCOUNT_NUMBER",
          "BIC",
          "BANK_SWIFT_CODE",
          "UPI_IDENTIFYING_NUMBER",
          "IP_ADDRESS",
          "STRING",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "ListType": {
        "enum": [
          "WHITELIST",
          "BLACKLIST",
          "FLAGRIGHT_LIBRARY",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "MCCDetails": {
        "docs": undefined,
        "properties": {
          "code": {
            "docs": "Merchant code",
            "type": "double",
          },
          "description": {
            "display-name": "MCCDetails",
            "docs": "Merchant Description",
            "type": "optional<string>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "MpesaDetails": {
        "docs": "Model for Mpesa payment method",
        "properties": {
          "businessShortCode": {
            "docs": "Business code",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "phoneNumber": {
            "docs": "Contact Number of the account holder",
            "type": "string",
          },
          "transactionType": {
            "docs": "Type of transaction",
            "type": "MpesaDetailsTransactionType",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "MpesaDetailsTransactionType": {
        "docs": "Type of transaction",
        "enum": [
          "CustomerPayBillOnline",
          "CustomerBuyGoodsOnline",
          "SalaryPayment",
          "BusinessPayment",
          "PromotionPayment",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "MpesaPaymentMethod": {
        "display-name": "MpesaPaymentMethod",
        "docs": "Classify the method of payment as "Mpesa" for MpesaDetails",
        "type": "literal<"MPESA">",
      },
      "PEPStatus": {
        "docs": undefined,
        "properties": {
          "isPepHit": "boolean",
          "pepCountry": {
            "display-name": "PEPStatus",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": 2,
              "minLength": 2,
              "pattern": undefined,
            },
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "PaymentMethod": {
        "enum": [
          "ACH",
          "CARD",
          "IBAN",
          "UPI",
          "GENERIC_BANK_ACCOUNT",
          "MPESA",
          "SWIFT",
          "WALLET",
          "CHECK",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "Person": {
        "docs": "Model for a generic individual - different from User model by not having userId field",
        "properties": {
          "contactDetails": {
            "display-name": "Person",
            "type": "optional<ContactDetails>",
          },
          "generalDetails": {
            "display-name": "UserDetails",
            "type": "UserDetails",
          },
          "legalDocuments": {
            "display-name": "Person",
            "docs": "User's legal identity documents - See Document Model for details",
            "type": "optional<list<LegalDocument>>",
          },
          "pepStatus": {
            "display-name": "Person",
            "type": "optional<list<PEPStatus>>",
          },
          "tags": {
            "display-name": "Person",
            "docs": "Additional information that can be added via tags",
            "type": "optional<list<Tag>>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "PostBusinessUserResponse": {
        "docs": undefined,
        "extends": [
          "RulesResults",
        ],
        "properties": {
          "message": "optional<string>",
          "userId": {
            "docs": "user ID the risk score pertains to",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "PostConsumerTransactionResponse": {
        "docs": undefined,
        "extends": [
          "TransactionMonitoringResult",
        ],
        "properties": {
          "message": "optional<string>",
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "PostConsumerUserResponse": {
        "docs": undefined,
        "extends": [
          "RulesResults",
        ],
        "properties": {
          "message": "optional<string>",
          "userId": {
            "docs": "user ID the risk score pertains to",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "RiskLevel": {
        "enum": [
          "VERY_HIGH",
          "HIGH",
          "MEDIUM",
          "LOW",
          "VERY_LOW",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "RiskScoringResult": {
        "docs": "Model for results from Risk Scoring",
        "properties": {
          "customerRiskAssessment": {
            "display-name": "RiskScoringResult",
            "docs": "Quantified dynamic risk score",
            "type": "optional<double>",
          },
          "kycRiskScore": {
            "docs": "Quantified KYC risk score",
            "type": "double",
          },
          "transactionRiskScore": {
            "docs": "Quantified action risk score",
            "type": "double",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "RuleAction": {
        "docs": "Model for rule action if a rule is hit. This is returned in the API response and can be configured on Console by operational accounts like a Compliance Analyst",
        "enum": [
          "ALLOW",
          "FLAG",
          "BLOCK",
          "SUSPEND",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "RuleFailureException": {
        "docs": undefined,
        "properties": {
          "exceptionDescription": {
            "docs": "Name of the rule",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "exceptionName": {
            "docs": "Unique rule identifier",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "RuleHitDirection": {
        "enum": [
          "ORIGIN",
          "DESTINATION",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "RuleHitMeta": {
        "docs": "Details of rule execution, for internal purposes only",
        "properties": {
          "falsePositiveDetails": "optional<FalsePositiveDetails>",
          "hitDirections": "optional<list<RuleHitDirection>>",
          "sanctionsDetails": "optional<list<SanctionsDetails>>",
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "RuleLabels": {
        "enum": [
          "UNEXPECTED_BEHAVIOR",
          "ILLICIT_GAINS_CHECK",
          "RFI_TRIGGER",
          "EDD_TRIGGER",
          "KYC_TRIGGER",
          "SCAM",
          "ABUSE",
          "ACCOUNT_TAKEOVER",
          "DISPUTE",
          "SANCTIONS",
          "SANCTIONS_PEP",
          "SANCTIONS_PEP_ADVERSE_MEDIA",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "RuleNature": {
        "enum": [
          "AML",
          "FRAUD",
          "CTF",
          "SCREENING",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "RulesResults": {
        "docs": undefined,
        "properties": {
          "executedRules": {
            "docs": "Unique transaction identifier",
            "type": "list<ExecutedRulesResult>",
          },
          "hitRules": {
            "docs": "Unique transaction identifier",
            "type": "list<HitRulesDetails>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "SWIFTDetails": {
        "docs": "Model for SWIFT payment method",
        "properties": {
          "accountNumber": {
            "display-name": "SWIFTDetails",
            "docs": "Account number",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "accountType": {
            "display-name": "SWIFTDetails",
            "docs": "Account type. E.g. Checking, Savings etc.",
            "type": "optional<string>",
          },
          "bankAddress": {
            "display-name": "SWIFTDetails",
            "type": "optional<Address>",
          },
          "bankName": {
            "display-name": "SWIFTDetails",
            "docs": "Name of the bank",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "name": {
            "display-name": "SWIFTDetails",
            "docs": "Name of the account holder",
            "type": "optional<string>",
          },
          "specialInstructions": {
            "display-name": "SWIFTDetails",
            "docs": "Special instructions if any",
            "type": "optional<string>",
          },
          "swiftCode": {
            "display-name": "SWIFTDetails",
            "docs": "SWIFT code of the financial institution",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "SWIFTPaymentMethod": {
        "display-name": "SWIFTPaymentMethod",
        "docs": "Classify the method of payment as "SWIFT" for SWIFTDetails",
        "type": "literal<"SWIFT">",
      },
      "SanctionsDetails": {
        "docs": undefined,
        "properties": {
          "entityType": {
            "display-name": "SanctionsDetails",
            "type": "optional<SanctionsDetailsEntityType>",
          },
          "name": "string",
          "searchId": "string",
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "SanctionsDetailsEntityType": {
        "enum": [
          "CONSUMER_NAME",
          "LEGAL_NAME",
          "SHAREHOLDER",
          "DIRECTOR",
          "NAME_ON_CARD",
          "PAYMENT_NAME",
          "PAYMENT_BENEFICIARY_NAME",
          "BANK_NAME",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "Tag": {
        "docs": "Generic key-value pair model to append a custom variable being sent to Flagright API",
        "properties": {
          "key": {
            "docs": "Key value when you are creating a custom variable",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "value": {
            "docs": "Value for a given key when you are creating a custom variable",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "Thing": {
        "docs": undefined,
        "properties": {
          "publishedAt": "optional<string>",
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "Transaction": {
        "docs": undefined,
        "extends": [
          "TransactionBase",
          "TransactionUpdatable",
        ],
        "properties": {},
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "TransactionAmountDetails": {
        "docs": "Model for transaction amount details",
        "properties": {
          "country": {
            "display-name": "TransactionAmountDetails",
            "type": "optional<CountryCode>",
          },
          "transactionAmount": {
            "docs": "Amount of the transaction",
            "type": "double",
          },
          "transactionCurrency": {
            "display-name": "CurrencyCode",
            "type": "CurrencyCode",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "TransactionAmountLimit": {
        "docs": undefined,
        "properties": {
          "day": {
            "display-name": "TransactionAmountLimit",
            "type": "optional<Amount>",
          },
          "month": {
            "display-name": "TransactionAmountLimit",
            "type": "optional<Amount>",
          },
          "week": {
            "display-name": "TransactionAmountLimit",
            "type": "optional<Amount>",
          },
          "year": {
            "display-name": "TransactionAmountLimit",
            "type": "optional<Amount>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "TransactionBase": {
        "docs": "Model for transaction base Payload",
        "properties": {
          "destinationUserId": {
            "display-name": "TransactionBase",
            "docs": "UserId for transaction's destination. In other words, where the value is being transferred to.",
            "type": "optional<string>",
          },
          "originUserId": {
            "display-name": "TransactionBase",
            "docs": "UserId for where the transaction originates from",
            "type": "optional<string>",
          },
          "timestamp": {
            "docs": "Timestamp of when transaction took place",
            "type": "double",
            "validation": {
              "exclusiveMax": undefined,
              "exclusiveMin": undefined,
              "max": 4133890801000,
              "min": 1262300400000,
              "multipleOf": undefined,
            },
          },
          "transactionId": {
            "docs": "Unique transaction identifier",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "type": {
            "display-name": "TransactionBase",
            "type": "optional<TransactionType>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "TransactionCountLimit": {
        "docs": undefined,
        "properties": {
          "day": {
            "display-name": "TransactionCountLimit",
            "type": "optional<double>",
          },
          "month": {
            "display-name": "TransactionCountLimit",
            "type": "optional<double>",
          },
          "week": {
            "display-name": "TransactionCountLimit",
            "type": "optional<double>",
          },
          "year": {
            "display-name": "TransactionCountLimit",
            "type": "optional<double>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "TransactionEventMonitoringResult": {
        "docs": undefined,
        "extends": [
          "RulesResults",
        ],
        "properties": {
          "eventId": "string",
          "transaction": "Transaction",
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "TransactionLimit": {
        "docs": undefined,
        "properties": {
          "averageTransactionAmountLimit": {
            "display-name": "TransactionLimit",
            "type": "optional<TransactionAmountLimit>",
          },
          "transactionAmountLimit": {
            "display-name": "TransactionLimit",
            "type": "optional<TransactionAmountLimit>",
          },
          "transactionCountLimit": {
            "display-name": "TransactionLimit",
            "type": "optional<TransactionCountLimit>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "TransactionLimits": {
        "docs": "Model for transaction limits for a given user",
        "properties": {
          "maximumDailyTransactionLimit": {
            "display-name": "TransactionLimits",
            "type": "optional<Amount>",
          },
          "maximumMonthlyTransactionLimit": {
            "display-name": "TransactionLimits",
            "type": "optional<Amount>",
          },
          "maximumQuarterlyTransactionLimit": {
            "display-name": "TransactionLimits",
            "type": "optional<Amount>",
          },
          "maximumTransactionLimit": {
            "display-name": "TransactionLimits",
            "type": "optional<Amount>",
          },
          "maximumWeeklyTransactionLimit": {
            "display-name": "TransactionLimits",
            "type": "optional<Amount>",
          },
          "maximumYearlyTransactionLimit": {
            "display-name": "TransactionLimits",
            "type": "optional<Amount>",
          },
          "paymentMethodLimits": {
            "display-name": "TransactionLimits",
            "type": "optional<TransactionLimitsPaymentMethodLimits>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "TransactionLimitsPaymentMethodLimits": {
        "docs": undefined,
        "properties": {
          "ACH": "optional<TransactionLimit>",
          "CARD": "optional<TransactionLimit>",
          "CHECK": "optional<TransactionLimit>",
          "GENERIC_BANK_ACCOUNT": "optional<TransactionLimit>",
          "IBAN": "optional<TransactionLimit>",
          "MPESA": "optional<TransactionLimit>",
          "SWIFT": "optional<TransactionLimit>",
          "UPI": "optional<TransactionLimit>",
          "WALLET": "optional<TransactionLimit>",
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "TransactionMonitoringResult": {
        "docs": undefined,
        "extends": [
          "RulesResults",
        ],
        "properties": {
          "transactionId": {
            "docs": "Transaction ID that the results pertain to",
            "type": "string",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "TransactionState": {
        "docs": "Model for transaction states. E.g. Processing, Refunded, Successful etc.",
        "enum": [
          "CREATED",
          "PROCESSING",
          "SENT",
          "EXPIRED",
          "DECLINED",
          "SUSPENDED",
          "REFUNDED",
          "SUCCESSFUL",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "TransactionType": {
        "enum": [
          "DEPOSIT",
          "TRANSFER",
          "EXTERNAL_PAYMENT",
          "WITHDRAWAL",
          "REFUND",
          "OTHER",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "TransactionUpdatable": {
        "docs": "Model for transaction additional payload",
        "properties": {
          "destinationAmountDetails": {
            "display-name": "TransactionUpdatable",
            "type": "optional<TransactionAmountDetails>",
          },
          "destinationPaymentDetails": {
            "display-name": "TransactionUpdatable",
            "docs": "Payment details of the destination. It can be a bank account number, wallet ID, card fingerprint etc.",
            "type": "optional<TransactionUpdatableDestinationPaymentDetails>",
          },
          "deviceData": {
            "display-name": "TransactionUpdatable",
            "type": "optional<DeviceData>",
          },
          "originAmountDetails": {
            "display-name": "TransactionUpdatable",
            "type": "optional<TransactionAmountDetails>",
          },
          "originPaymentDetails": {
            "display-name": "TransactionUpdatable",
            "docs": "Payment details of the origin. It can be a bank account number, wallet ID, card fingerprint etc.",
            "type": "optional<TransactionUpdatableOriginPaymentDetails>",
          },
          "productType": {
            "display-name": "TransactionUpdatable",
            "docs": "Type of produce being used by the consumer (ex wallets, payments etc)",
            "type": "optional<string>",
          },
          "promotionCodeUsed": {
            "display-name": "TransactionUpdatable",
            "docs": "Whether a promotion code was used or not the transaction",
            "type": "optional<boolean>",
          },
          "reference": {
            "display-name": "TransactionUpdatable",
            "docs": "Reference field for the transaction indicating the purpose of the transaction etc.",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "relatedTransactionIds": {
            "display-name": "TransactionUpdatable",
            "docs": "IDs of transactions related to this transaction. Ex: refund, split bills",
            "type": "optional<list<string>>",
          },
          "tags": {
            "display-name": "TransactionUpdatable",
            "docs": "Additional information that can be added via tags",
            "type": "optional<list<Tag>>",
          },
          "transactionState": {
            "display-name": "TransactionUpdatable",
            "type": "optional<TransactionState>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "TransactionUpdatableDestinationPaymentDetails": {
        "availability": undefined,
        "base-properties": {},
        "discriminant": "method",
        "docs": "Payment details of the destination. It can be a bank account number, wallet ID, card fingerprint etc.",
        "encoding": undefined,
        "source": {
          "openapi": "flagright/openapi.yml",
        },
        "union": {
          "ACH": {
            "display-name": "ACHDetails",
            "type": "ACHDetails",
          },
          "CARD": {
            "display-name": "CardDetails",
            "type": "CardDetails",
          },
          "CHECK": {
            "display-name": "CheckDetails",
            "type": "CheckDetails",
          },
          "GENERIC_BANK_ACCOUNT": {
            "display-name": "GenericBankAccountDetails",
            "type": "GenericBankAccountDetails",
          },
          "IBAN": {
            "display-name": "IBANDetails",
            "type": "IBANDetails",
          },
          "MPESA": {
            "display-name": "MpesaDetails",
            "type": "MpesaDetails",
          },
          "SWIFT": {
            "display-name": "SWIFTDetails",
            "type": "SWIFTDetails",
          },
          "UPI": {
            "display-name": "UPIDetails",
            "type": "UPIDetails",
          },
          "WALLET": {
            "display-name": "WalletDetails",
            "type": "WalletDetails",
          },
        },
      },
      "TransactionUpdatableOriginPaymentDetails": {
        "availability": undefined,
        "base-properties": {},
        "discriminant": "method",
        "docs": "Payment details of the origin. It can be a bank account number, wallet ID, card fingerprint etc.",
        "encoding": undefined,
        "source": {
          "openapi": "flagright/openapi.yml",
        },
        "union": {
          "ACH": {
            "display-name": "ACHDetails",
            "type": "ACHDetails",
          },
          "CARD": {
            "display-name": "CardDetails",
            "type": "CardDetails",
          },
          "CHECK": {
            "display-name": "CheckDetails",
            "type": "CheckDetails",
          },
          "GENERIC_BANK_ACCOUNT": {
            "display-name": "GenericBankAccountDetails",
            "type": "GenericBankAccountDetails",
          },
          "IBAN": {
            "display-name": "IBANDetails",
            "type": "IBANDetails",
          },
          "MPESA": {
            "display-name": "MpesaDetails",
            "type": "MpesaDetails",
          },
          "SWIFT": {
            "display-name": "SWIFTDetails",
            "type": "SWIFTDetails",
          },
          "UPI": {
            "display-name": "UPIDetails",
            "type": "UPIDetails",
          },
          "WALLET": {
            "display-name": "WalletDetails",
            "type": "WalletDetails",
          },
        },
      },
      "TransactionWithRulesResult": {
        "docs": "Model for transaction payload with rules result",
        "extends": [
          "Transaction",
        ],
        "properties": {
          "executedRules": "list<ExecutedRulesResult>",
          "hitRules": "list<HitRulesDetails>",
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "UPIDetails": {
        "docs": "Model for UPI payment method",
        "properties": {
          "bankProvider": {
            "display-name": "UPIDetails",
            "docs": "Bank provider name",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "interfaceProvider": {
            "display-name": "UPIDetails",
            "docs": "Interface provider name",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "name": {
            "display-name": "UPIDetails",
            "docs": "Name of the account holder",
            "type": "optional<string>",
          },
          "upiID": {
            "docs": "UPI Id number",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "UPIPaymentMethod": {
        "display-name": "UPIPaymentMethod",
        "docs": "Classify the method of payment as "UPI" for UPIDetails",
        "type": "literal<"UPI">",
      },
      "User": {
        "docs": "Model for User details",
        "extends": [
          "UserBase",
          "UserOptional",
        ],
        "properties": {},
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "UserBase": {
        "docs": "Model for User details",
        "properties": {
          "createdTimestamp": {
            "docs": "Timestamp when userId is created",
            "type": "double",
            "validation": {
              "exclusiveMax": undefined,
              "exclusiveMin": undefined,
              "max": 4133890801000,
              "min": 1262300400000,
              "multipleOf": undefined,
            },
          },
          "userDetails": {
            "display-name": "UserBase",
            "type": "optional<UserDetails>",
          },
          "userId": {
            "docs": "Unique user ID",
            "type": "string",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "UserDetails": {
        "docs": "Model for consumer user personal details",
        "properties": {
          "countryOfNationality": {
            "display-name": "UserDetails",
            "type": "optional<CountryCode>",
          },
          "countryOfResidence": {
            "display-name": "UserDetails",
            "type": "optional<CountryCode>",
          },
          "dateOfBirth": {
            "display-name": "UserDetails",
            "docs": "Date of birth of the user (YYYY-MM-DD)",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": "^(\\d{4}-\\d{2}-\\d{2})*$",
            },
          },
          "gender": {
            "display-name": "UserDetails",
            "docs": "Gender of the individual - Male, Female or Non-Binary",
            "type": "optional<UserDetailsGender>",
          },
          "name": {
            "display-name": "ConsumerName",
            "type": "ConsumerName",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "UserDetailsGender": {
        "docs": "Gender of the individual - Male, Female or Non-Binary",
        "enum": [
          "M",
          "F",
          "NB",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "UserMonitoringResult": {
        "docs": undefined,
        "extends": [
          "RulesResults",
        ],
        "properties": {
          "userId": {
            "docs": "User ID that the results pertain to",
            "type": "string",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "UserOptional": {
        "docs": "Model for User details",
        "properties": {
          "acquisitionChannel": {
            "display-name": "UserOptional",
            "type": "optional<AcquisitionChannel>",
          },
          "contactDetails": {
            "display-name": "UserOptional",
            "type": "optional<ContactDetails>",
          },
          "kycStatusDetails": {
            "display-name": "UserOptional",
            "type": "optional<KYCStatusDetails>",
          },
          "legalDocuments": {
            "display-name": "UserOptional",
            "docs": "User's legal identity documents - See Document Model for details",
            "type": "optional<list<LegalDocument>>",
          },
          "pepStatus": {
            "display-name": "UserOptional",
            "type": "optional<list<PEPStatus>>",
          },
          "reasonForAccountOpening": {
            "display-name": "UserOptional",
            "type": "optional<list<string>>",
          },
          "riskLevel": {
            "display-name": "UserOptional",
            "type": "optional<RiskLevel>",
          },
          "tags": {
            "display-name": "UserOptional",
            "docs": "Additional information that can be added via tags",
            "type": "optional<list<Tag>>",
          },
          "transactionLimits": {
            "display-name": "UserOptional",
            "type": "optional<TransactionLimits>",
          },
          "userSegment": {
            "display-name": "UserOptional",
            "type": "optional<UserOptionalUserSegment>",
          },
          "userStateDetails": {
            "display-name": "UserOptional",
            "type": "optional<UserStateDetails>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "UserOptionalUserSegment": {
        "enum": [
          "RETAIL",
          "PROFESSIONAL",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "UserRegistrationStatus": {
        "enum": [
          "REGISTERED",
          "UNREGISTERED",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "UserState": {
        "enum": [
          "UNACCEPTABLE",
          "UNDECIDED",
          "TERMINATED",
          "ACTIVE",
          "INACTIVE",
          "DORMANT",
          "CREATED",
          "DELETED",
          "SUSPENDED",
          "BLOCKED",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "UserStateDetails": {
        "docs": undefined,
        "properties": {
          "reason": {
            "display-name": "UserStateDetails",
            "type": "optional<string>",
          },
          "state": {
            "display-name": "UserState",
            "type": "UserState",
          },
          "userId": {
            "display-name": "UserStateDetails",
            "type": "optional<string>",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "UserWithRulesResult": {
        "docs": "Model for consumer user payload with rules result",
        "extends": [
          "User",
        ],
        "properties": {
          "executedRules": "optional<list<ExecutedRulesResult>>",
          "hitRules": "optional<list<HitRulesDetails>>",
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "WalletDetails": {
        "docs": "Standardized model for a Generic wallet transaction",
        "properties": {
          "name": {
            "display-name": "WalletDetails",
            "docs": "Name of the account holder for a specific wallet",
            "type": "optional<string>",
          },
          "paymentChannel": {
            "display-name": "WalletDetails",
            "docs": "Payment Channel used through wallet",
            "type": "optional<string>",
          },
          "tags": {
            "display-name": "WalletDetails",
            "type": "optional<Tag>",
          },
          "walletId": {
            "display-name": "WalletDetails",
            "docs": "Unique ID of the wallet",
            "type": "optional<string>",
            "validation": {
              "format": undefined,
              "maxLength": undefined,
              "minLength": 1,
              "pattern": undefined,
            },
          },
          "walletPhoneNumber": {
            "display-name": "WalletDetails",
            "docs": "Phone number associated with the wallet, if any",
            "type": "optional<string>",
          },
          "walletType": {
            "docs": "Wallet type if there are various types of wallets belonging to the same user. E.g. Checking, savings, vault, different currency wallets etc.",
            "type": "string",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "WalletPaymentMethod": {
        "display-name": "WalletPaymentMethod",
        "docs": "Classify the method of payment as "Wallet" for WalletDetails",
        "type": "literal<"WALLET">",
      },
      "WebhookEvent": {
        "docs": undefined,
        "properties": {
          "createdTimestamp": {
            "type": "double",
            "validation": {
              "exclusiveMax": undefined,
              "exclusiveMin": undefined,
              "max": undefined,
              "min": 1262300400000,
              "multipleOf": undefined,
            },
          },
          "data": {
            "display-name": "UserStateDetails",
            "type": "UserStateDetails",
          },
          "id": "string",
          "type": {
            "display-name": "WebhookEventType",
            "type": "WebhookEventType",
          },
        },
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
      "WebhookEventType": {
        "enum": [
          "CASE_CLOSED",
          "USER_STATE_UPDATED",
          "ALERT_CLOSED",
        ],
        "source": {
          "openapi": "flagright/openapi.yml",
        },
      },
    },
  },
  "rootApiFile": {
    "auth": "x-api-key",
    "auth-schemes": {
      "x-api-key": {
        "header": "x-api-key",
        "name": "apiKey",
        "type": "string",
      },
    },
    "default-environment": "Default",
    "display-name": "Flagright API",
    "environments": {
      "Default": "https://sandbox.api.flagright.com",
    },
    "error-discrimination": {
      "strategy": "status-code",
    },
    "name": "api",
  },
}
`;
