// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`open api parser enum-casing simple 1`] = `
{
  "definitionFiles": {
    "accounts.yml": {
      "docs": "Accounts management APIs",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "accounts",
        "endpoints": {
          "create": {
            "auth": true,
            "docs": "Creates an account, which is a record representing a customer or an
organization.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.ConflictError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "display_name": "display_name",
                  "tags": [
                    {
                      "id": "TAG-12345",
                    },
                  ],
                },
                "response": {
                  "body": {
                    "account": {
                      "artifacts": [
                        {
                          "id": "id",
                        },
                      ],
                      "created_date": "2023-01-01T12:00:00Z",
                      "custom_fields": {
                        "custom_fields": {
                          "key": "value",
                        },
                      },
                      "custom_schema_fragments": [
                        "custom_schema_fragments",
                      ],
                      "description": "description",
                      "display_id": "display_id",
                      "display_name": "display_name",
                      "domains": [
                        "domains",
                      ],
                      "external_refs": [
                        "external_refs",
                      ],
                      "id": "id",
                      "modified_date": "2023-01-01T12:00:00Z",
                      "owned_by": [],
                      "stock_schema_fragment": "don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>",
                      "subtype": "subtype",
                      "tags": [
                        {
                          "tag": {
                            "id": "id",
                            "name": "name",
                          },
                        },
                      ],
                      "tier": "tier",
                    },
                    "default_rev_org": {
                      "account": {
                        "display_id": "display_id",
                        "display_name": "display_name",
                        "id": "id",
                      },
                      "artifacts": [
                        {
                          "id": "id",
                        },
                      ],
                      "created_date": "2023-01-01T12:00:00Z",
                      "custom_fields": {
                        "custom_fields": {
                          "key": "value",
                        },
                      },
                      "custom_schema_fragments": [
                        "custom_schema_fragments",
                      ],
                      "description": "description",
                      "display_id": "display_id",
                      "display_name": "display_name",
                      "domain": "domain",
                      "external_ref": "external_ref",
                      "id": "id",
                      "modified_date": "2023-01-01T12:00:00Z",
                      "stock_schema_fragment": "don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>",
                      "subtype": "subtype",
                      "tags": [
                        {
                          "tag": {
                            "id": "id",
                            "name": "name",
                          },
                        },
                      ],
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/accounts.create",
            "request": {
              "body": {
                "properties": {
                  "artifacts": {
                    "docs": "The IDs of the artifacts to associate with the account.",
                    "type": "optional<list<string>>",
                  },
                  "custom_fields": {
                    "docs": "Application-defined custom fields.",
                    "type": "optional<map<string, unknown>>",
                  },
                  "description": {
                    "docs": "Description of the account.",
                    "type": "optional<string>",
                  },
                  "display_name": {
                    "docs": "Name of the account.",
                    "type": "string",
                  },
                  "domains": {
                    "docs": "List of company's domain names. Example - ['devrev.ai'].",
                    "type": "optional<list<string>>",
                  },
                  "external_refs": {
                    "docs": "External refs are unique identifiers from your customer system of
records, stored as a list. Currently the length of this field is
limited to 1.
",
                    "type": "optional<list<string>>",
                  },
                  "owned_by": {
                    "docs": "List of Dev users owning this account.",
                    "type": "optional<list<string>>",
                  },
                  "schema_fragment_ids": {
                    "docs": "Schema fragment IDs associated with this account SOR.",
                    "type": "optional<list<string>>",
                  },
                  "tags": {
                    "docs": "Tags associated with the account.",
                    "type": "optional<list<root.SetTagWithValue>>",
                  },
                  "tier": {
                    "docs": "The tier of the account.",
                    "type": "optional<string>",
                  },
                  "websites": {
                    "docs": "List of company websites. Example - ['www.devrev.ai',
'www.marketplace.devrev.ai'].
",
                    "type": "optional<list<string>>",
                  },
                },
              },
              "headers": undefined,
              "name": "AccountsCreateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.AccountsCreateResponse",
            },
          },
          "delete": {
            "auth": true,
            "docs": "Deletes an account.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "ACC-12345",
                },
                "response": {
                  "body": {
                    "string": {
                      "key": "value",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/accounts.delete",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The ID of account to delete.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "AccountsDeleteRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.AccountsDeleteResponse",
            },
          },
          "export": {
            "auth": true,
            "docs": "Exports a collection of accounts.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "query-parameters": {
                  "created_date.after": "2023-01-01T12:00:00Z",
                  "created_date.before": "2023-01-01T12:00:00Z",
                  "modified_date.after": "2023-01-01T12:00:00Z",
                  "modified_date.before": "2023-01-01T12:00:00Z",
                },
                "response": {
                  "body": {
                    "accounts": [
                      {
                        "artifacts": [
                          {
                            "id": "id",
                          },
                        ],
                        "created_date": "2023-01-01T12:00:00Z",
                        "custom_schema_fragments": [
                          "custom_schema_fragments",
                        ],
                        "description": "description",
                        "display_id": "display_id",
                        "display_name": "display_name",
                        "domains": [
                          "domains",
                        ],
                        "external_refs": [
                          "external_refs",
                        ],
                        "id": "id",
                        "modified_date": "2023-01-01T12:00:00Z",
                        "owned_by": [],
                        "stock_schema_fragment": "don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>",
                        "subtype": "subtype",
                        "tags": [
                          {
                            "tag": {
                              "id": "id",
                              "name": "name",
                            },
                          },
                        ],
                        "tier": "tier",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/accounts.export",
            "request": {
              "name": "AccountsExportQuery",
              "query-parameters": {
                "created_by": {
                  "allow-multiple": true,
                  "docs": "Filters for accounts created by the specified user(s).",
                  "type": "optional<string>",
                },
                "created_date.after": {
                  "docs": "Filters for objects created after the provided timestamp (inclusive).
",
                  "type": "optional<datetime>",
                },
                "created_date.before": {
                  "docs": "Filters for objects created before the provided timestamp
(inclusive).
",
                  "type": "optional<datetime>",
                },
                "custom_fields": {
                  "docs": "Filters for custom fields.",
                  "type": "optional<map<string, unknown>>",
                },
                "display_name": {
                  "allow-multiple": true,
                  "docs": "Array of display names of accounts to be filtered.",
                  "type": "optional<string>",
                },
                "domains": {
                  "allow-multiple": true,
                  "docs": "Domains for accounts to be filtered.",
                  "type": "optional<string>",
                },
                "external_refs": {
                  "allow-multiple": true,
                  "docs": "Array of references of accounts to be filtered.",
                  "type": "optional<string>",
                },
                "first": {
                  "docs": "The number of accounts to return. The default is '50'.",
                  "type": "optional<integer>",
                },
                "modified_date.after": {
                  "docs": "Filters for objects created after the provided timestamp (inclusive).
",
                  "type": "optional<datetime>",
                },
                "modified_date.before": {
                  "docs": "Filters for objects created before the provided timestamp
(inclusive).
",
                  "type": "optional<datetime>",
                },
                "owned_by": {
                  "allow-multiple": true,
                  "docs": "Filters for accounts owned by the specified user(s).",
                  "type": "optional<string>",
                },
                "sort_by": {
                  "allow-multiple": true,
                  "docs": "Fields to sort the accounts by and the direction to sort them in.
",
                  "type": "optional<string>",
                },
                "stage": {
                  "allow-multiple": true,
                  "docs": "Filters for accounts on specified stages.",
                  "type": "optional<string>",
                },
                "tags": {
                  "allow-multiple": true,
                  "docs": "List of tags to be filtered.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.AccountsExportResponse",
            },
          },
          "exportPost": {
            "auth": true,
            "docs": "Exports a collection of accounts.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {},
                "response": {
                  "body": {
                    "accounts": [
                      {
                        "artifacts": [
                          {
                            "id": "id",
                          },
                        ],
                        "created_date": "2023-01-01T12:00:00Z",
                        "custom_schema_fragments": [
                          "custom_schema_fragments",
                        ],
                        "description": "description",
                        "display_id": "display_id",
                        "display_name": "display_name",
                        "domains": [
                          "domains",
                        ],
                        "external_refs": [
                          "external_refs",
                        ],
                        "id": "id",
                        "modified_date": "2023-01-01T12:00:00Z",
                        "owned_by": [],
                        "stock_schema_fragment": "don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>",
                        "subtype": "subtype",
                        "tags": [
                          {
                            "tag": {
                              "id": "id",
                              "name": "name",
                            },
                          },
                        ],
                        "tier": "tier",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/accounts.export",
            "request": {
              "body": {
                "properties": {
                  "created_by": {
                    "docs": "Filters for accounts created by the specified user(s).",
                    "type": "optional<list<string>>",
                  },
                  "created_date": "optional<root.DateTimeFilter>",
                  "custom_fields": {
                    "docs": "Filters for custom fields.",
                    "type": "optional<map<string, unknown>>",
                  },
                  "display_name": {
                    "docs": "Array of display names of accounts to be filtered.",
                    "type": "optional<list<string>>",
                  },
                  "domains": {
                    "docs": "Domains for accounts to be filtered.",
                    "type": "optional<list<string>>",
                  },
                  "external_refs": {
                    "docs": "Array of references of accounts to be filtered.",
                    "type": "optional<list<string>>",
                  },
                  "first": {
                    "docs": "The number of accounts to return. The default is '50'.",
                    "type": "optional<integer>",
                  },
                  "modified_date": "optional<root.DateTimeFilter>",
                  "owned_by": {
                    "docs": "Filters for accounts owned by the specified user(s).",
                    "type": "optional<list<string>>",
                  },
                  "sort_by": {
                    "docs": "Fields to sort the accounts by and the direction to sort them in.
",
                    "type": "optional<list<string>>",
                  },
                  "stage": {
                    "docs": "Filters for accounts on specified stages.",
                    "type": "optional<list<string>>",
                  },
                  "tags": {
                    "docs": "List of tags to be filtered.",
                    "type": "optional<list<string>>",
                  },
                },
              },
              "headers": undefined,
              "name": "AccountsExportRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.AccountsExportResponse",
            },
          },
          "get": {
            "auth": true,
            "docs": "Retrieves an account's information.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "query-parameters": {
                  "id": "ACC-12345",
                },
                "response": {
                  "body": {
                    "account": {
                      "artifacts": [
                        {
                          "id": "id",
                        },
                      ],
                      "created_date": "2023-01-01T12:00:00Z",
                      "custom_fields": {
                        "custom_fields": {
                          "key": "value",
                        },
                      },
                      "custom_schema_fragments": [
                        "custom_schema_fragments",
                      ],
                      "description": "description",
                      "display_id": "display_id",
                      "display_name": "display_name",
                      "domains": [
                        "domains",
                      ],
                      "external_refs": [
                        "external_refs",
                      ],
                      "id": "id",
                      "modified_date": "2023-01-01T12:00:00Z",
                      "owned_by": [],
                      "stock_schema_fragment": "don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>",
                      "subtype": "subtype",
                      "tags": [
                        {
                          "tag": {
                            "id": "id",
                            "name": "name",
                          },
                        },
                      ],
                      "tier": "tier",
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/accounts.get",
            "request": {
              "name": "AccountsGetQuery",
              "query-parameters": {
                "id": {
                  "docs": "The ID of the account to be retrieved.",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.AccountsGetResponse",
            },
          },
          "getPost": {
            "auth": true,
            "docs": "Retrieves an account's information.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "ACC-12345",
                },
                "response": {
                  "body": {
                    "account": {
                      "artifacts": [
                        {
                          "id": "id",
                        },
                      ],
                      "created_date": "2023-01-01T12:00:00Z",
                      "custom_fields": {
                        "custom_fields": {
                          "key": "value",
                        },
                      },
                      "custom_schema_fragments": [
                        "custom_schema_fragments",
                      ],
                      "description": "description",
                      "display_id": "display_id",
                      "display_name": "display_name",
                      "domains": [
                        "domains",
                      ],
                      "external_refs": [
                        "external_refs",
                      ],
                      "id": "id",
                      "modified_date": "2023-01-01T12:00:00Z",
                      "owned_by": [],
                      "stock_schema_fragment": "don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>",
                      "subtype": "subtype",
                      "tags": [
                        {
                          "tag": {
                            "id": "id",
                            "name": "name",
                          },
                        },
                      ],
                      "tier": "tier",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/accounts.get",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The ID of the account to be retrieved.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "AccountsGetRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.AccountsGetResponse",
            },
          },
          "list": {
            "auth": true,
            "docs": "Gets a list of accounts.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "query-parameters": {
                  "created_date.after": "2023-01-01T12:00:00Z",
                  "created_date.before": "2023-01-01T12:00:00Z",
                  "modified_date.after": "2023-01-01T12:00:00Z",
                  "modified_date.before": "2023-01-01T12:00:00Z",
                },
                "response": {
                  "body": {
                    "accounts": [
                      {
                        "artifacts": [
                          {
                            "id": "id",
                          },
                        ],
                        "created_date": "2023-01-01T12:00:00Z",
                        "custom_schema_fragments": [
                          "custom_schema_fragments",
                        ],
                        "description": "description",
                        "display_id": "display_id",
                        "display_name": "display_name",
                        "domains": [
                          "domains",
                        ],
                        "external_refs": [
                          "external_refs",
                        ],
                        "id": "id",
                        "modified_date": "2023-01-01T12:00:00Z",
                        "owned_by": [],
                        "stock_schema_fragment": "don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>",
                        "subtype": "subtype",
                        "tags": [
                          {
                            "tag": {
                              "id": "id",
                              "name": "name",
                            },
                          },
                        ],
                        "tier": "tier",
                      },
                    ],
                    "next_cursor": "next_cursor",
                    "prev_cursor": "prev_cursor",
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/accounts.list",
            "request": {
              "name": "AccountsListQuery",
              "query-parameters": {
                "created_by": {
                  "allow-multiple": true,
                  "docs": "Filters for accounts created by the specified user(s).",
                  "type": "optional<string>",
                },
                "created_date.after": {
                  "docs": "Filters for objects created after the provided timestamp (inclusive).
",
                  "type": "optional<datetime>",
                },
                "created_date.before": {
                  "docs": "Filters for objects created before the provided timestamp
(inclusive).
",
                  "type": "optional<datetime>",
                },
                "cursor": {
                  "docs": "The cursor to resume iteration from. If not provided, then iteration
starts from the beginning.
",
                  "type": "optional<string>",
                },
                "custom_fields": {
                  "docs": "Filters for custom fields.",
                  "type": "optional<map<string, unknown>>",
                },
                "display_name": {
                  "allow-multiple": true,
                  "docs": "Array of display names of accounts to be filtered.",
                  "type": "optional<string>",
                },
                "domains": {
                  "allow-multiple": true,
                  "docs": "Domains for accounts to be filtered.",
                  "type": "optional<string>",
                },
                "external_refs": {
                  "allow-multiple": true,
                  "docs": "Array of references of accounts to be filtered.",
                  "type": "optional<string>",
                },
                "limit": {
                  "docs": "The maximum number of accounts to return per page. The default is
'50'.
",
                  "type": "optional<integer>",
                },
                "mode": {
                  "docs": "The iteration mode to use, otherwise if not set, then "after" is
used.
",
                  "type": "optional<root.ListMode>",
                },
                "modified_date.after": {
                  "docs": "Filters for objects created after the provided timestamp (inclusive).
",
                  "type": "optional<datetime>",
                },
                "modified_date.before": {
                  "docs": "Filters for objects created before the provided timestamp
(inclusive).
",
                  "type": "optional<datetime>",
                },
                "owned_by": {
                  "allow-multiple": true,
                  "docs": "Filters for accounts owned by the specified user(s).",
                  "type": "optional<string>",
                },
                "sort_by": {
                  "allow-multiple": true,
                  "docs": "Fields to sort the accounts by and the direction to sort them in.
",
                  "type": "optional<string>",
                },
                "stage": {
                  "allow-multiple": true,
                  "docs": "Filters for accounts on specified stages.",
                  "type": "optional<string>",
                },
                "tags": {
                  "allow-multiple": true,
                  "docs": "List of tags to be filtered.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.AccountsListResponse",
            },
          },
          "listPost": {
            "auth": true,
            "docs": "Gets a list of accounts.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {},
                "response": {
                  "body": {
                    "accounts": [
                      {
                        "artifacts": [
                          {
                            "id": "id",
                          },
                        ],
                        "created_date": "2023-01-01T12:00:00Z",
                        "custom_schema_fragments": [
                          "custom_schema_fragments",
                        ],
                        "description": "description",
                        "display_id": "display_id",
                        "display_name": "display_name",
                        "domains": [
                          "domains",
                        ],
                        "external_refs": [
                          "external_refs",
                        ],
                        "id": "id",
                        "modified_date": "2023-01-01T12:00:00Z",
                        "owned_by": [],
                        "stock_schema_fragment": "don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>",
                        "subtype": "subtype",
                        "tags": [
                          {
                            "tag": {
                              "id": "id",
                              "name": "name",
                            },
                          },
                        ],
                        "tier": "tier",
                      },
                    ],
                    "next_cursor": "next_cursor",
                    "prev_cursor": "prev_cursor",
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/accounts.list",
            "request": {
              "body": {
                "properties": {
                  "created_by": {
                    "docs": "Filters for accounts created by the specified user(s).",
                    "type": "optional<list<string>>",
                  },
                  "created_date": "optional<root.DateTimeFilter>",
                  "cursor": {
                    "docs": "The cursor to resume iteration from. If not provided, then
iteration starts from the beginning.
",
                    "type": "optional<string>",
                  },
                  "custom_fields": {
                    "docs": "Filters for custom fields.",
                    "type": "optional<map<string, unknown>>",
                  },
                  "display_name": {
                    "docs": "Array of display names of accounts to be filtered.",
                    "type": "optional<list<string>>",
                  },
                  "domains": {
                    "docs": "Domains for accounts to be filtered.",
                    "type": "optional<list<string>>",
                  },
                  "external_refs": {
                    "docs": "Array of references of accounts to be filtered.",
                    "type": "optional<list<string>>",
                  },
                  "limit": {
                    "docs": "The maximum number of accounts to return per page. The default is
'50'.
",
                    "type": "optional<integer>",
                  },
                  "mode": "optional<root.ListMode>",
                  "modified_date": "optional<root.DateTimeFilter>",
                  "owned_by": {
                    "docs": "Filters for accounts owned by the specified user(s).",
                    "type": "optional<list<string>>",
                  },
                  "sort_by": {
                    "docs": "Fields to sort the accounts by and the direction to sort them in.
",
                    "type": "optional<list<string>>",
                  },
                  "stage": {
                    "docs": "Filters for accounts on specified stages.",
                    "type": "optional<list<string>>",
                  },
                  "tags": {
                    "docs": "List of tags to be filtered.",
                    "type": "optional<list<string>>",
                  },
                },
              },
              "headers": undefined,
              "name": "AccountsListRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.AccountsListResponse",
            },
          },
          "update": {
            "auth": true,
            "docs": "Updates an account's information.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.ConflictError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "ACC-12345",
                  "tags": [
                    {
                      "id": "TAG-12345",
                    },
                  ],
                },
                "response": {
                  "body": {
                    "account": {
                      "artifacts": [
                        {
                          "id": "id",
                        },
                      ],
                      "created_date": "2023-01-01T12:00:00Z",
                      "custom_fields": {
                        "custom_fields": {
                          "key": "value",
                        },
                      },
                      "custom_schema_fragments": [
                        "custom_schema_fragments",
                      ],
                      "description": "description",
                      "display_id": "display_id",
                      "display_name": "display_name",
                      "domains": [
                        "domains",
                      ],
                      "external_refs": [
                        "external_refs",
                      ],
                      "id": "id",
                      "modified_date": "2023-01-01T12:00:00Z",
                      "owned_by": [],
                      "stock_schema_fragment": "don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>",
                      "subtype": "subtype",
                      "tags": [
                        {
                          "tag": {
                            "id": "id",
                            "name": "name",
                          },
                        },
                      ],
                      "tier": "tier",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/accounts.update",
            "request": {
              "body": {
                "properties": {
                  "artifacts": "optional<root.AccountsUpdateRequestArtifacts>",
                  "custom_fields": {
                    "docs": "Application-defined custom fields.",
                    "type": "optional<map<string, unknown>>",
                  },
                  "description": {
                    "docs": "Updated description of the account.",
                    "type": "optional<string>",
                  },
                  "display_name": {
                    "docs": "Updated display name for the account.",
                    "type": "optional<string>",
                  },
                  "domains": {
                    "docs": "Updated list of company's domain names. Example - ['devrev.ai'].
",
                    "type": "optional<list<string>>",
                  },
                  "external_refs": {
                    "docs": "Updated External Refs of account. Currently the length of this
field is limited to 1.
",
                    "type": "optional<list<string>>",
                  },
                  "id": {
                    "docs": "The ID of account to update.",
                    "type": "string",
                  },
                  "owned_by": {
                    "docs": "Updated list of the users owning this account.",
                    "type": "optional<list<string>>",
                  },
                  "schema_fragment_ids": {
                    "docs": "Schema fragment IDs associated with this account SOR.",
                    "type": "optional<list<string>>",
                  },
                  "tags": {
                    "docs": "Updated tags list associated with the account.",
                    "type": "optional<list<root.SetTagWithValue>>",
                  },
                  "tier": {
                    "docs": "Updated tier of the account.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "AccountsUpdateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.AccountsUpdateResponse",
            },
          },
        },
      },
    },
    "articles.yml": {
      "docs": "Articles management APIs.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "articles",
        "endpoints": {
          "count": {
            "auth": true,
            "docs": "Get count of articles matching given filter.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "count": 1,
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/articles.count",
            "request": {
              "name": "ArticlesCountQuery",
              "query-parameters": {
                "applies_to_parts": {
                  "allow-multiple": true,
                  "docs": "Filters for articles belonging to any of the provided parts.
",
                  "type": "optional<string>",
                },
                "authored_by": {
                  "allow-multiple": true,
                  "docs": "Filters for articles authored by any of the provided users.
",
                  "type": "optional<string>",
                },
                "created_by": {
                  "allow-multiple": true,
                  "docs": "Filters for articles created by any of the provided users.",
                  "type": "optional<string>",
                },
                "owned_by": {
                  "allow-multiple": true,
                  "docs": "Filters for articles owned by any of the provided users.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.ArticlesCountResponse",
            },
          },
          "countPost": {
            "auth": true,
            "docs": "Get count of articles matching given filter.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {},
                "response": {
                  "body": {
                    "count": 1,
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/articles.count",
            "request": {
              "body": {
                "properties": {
                  "applies_to_parts": {
                    "docs": "Filters for articles belonging to any of the provided parts.
",
                    "type": "optional<list<string>>",
                  },
                  "authored_by": {
                    "docs": "Filters for articles authored by any of the provided users.
",
                    "type": "optional<list<string>>",
                  },
                  "created_by": {
                    "docs": "Filters for articles created by any of the provided users.
",
                    "type": "optional<list<string>>",
                  },
                  "owned_by": {
                    "docs": "Filters for articles owned by any of the provided users.",
                    "type": "optional<list<string>>",
                  },
                  "shared_with": {
                    "docs": "Filter for articles based on intended audience.",
                    "type": "optional<list<root.SharedWithMembershipFilter>>",
                  },
                },
              },
              "headers": undefined,
              "name": "ArticlesCountRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.ArticlesCountResponse",
            },
          },
          "create-article": {
            "auth": true,
            "docs": "Article is an object which can contain a URL or artifacts in the
resource. It also contains the data regarding the owner, author, status
and published date of the object. This call creates an article.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "applies_to_parts": [
                    "applies_to_parts",
                  ],
                  "owned_by": [
                    "owned_by",
                  ],
                  "published_at": "2023-01-01T12:00:00Z",
                  "resource": {},
                  "tags": [
                    {
                      "id": "TAG-12345",
                    },
                  ],
                  "title": "title",
                },
                "response": {
                  "body": {
                    "article": {
                      "applies_to_parts": [],
                      "created_date": "2023-01-01T12:00:00Z",
                      "description": "description",
                      "display_id": "display_id",
                      "extracted_content": [
                        {
                          "id": "id",
                        },
                      ],
                      "id": "id",
                      "modified_date": "2023-01-01T12:00:00Z",
                      "parent": {
                        "display_id": "display_id",
                        "id": "id",
                      },
                      "rank": "rank",
                      "resource": {
                        "artifacts": [
                          {
                            "id": "id",
                          },
                        ],
                        "url": "url",
                      },
                      "title": "title",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/articles.create",
            "request": {
              "body": {
                "properties": {
                  "access_level": "optional<root.AccessLevel>",
                  "applies_to_parts": {
                    "docs": "The parts that the article applies to.",
                    "type": "list<string>",
                  },
                  "authored_by": {
                    "docs": "The authors of the article.",
                    "type": "optional<list<string>>",
                  },
                  "description": {
                    "docs": "Description for the article.",
                    "type": "optional<string>",
                  },
                  "extracted_content": {
                    "docs": "ID of the extracted content artifact.",
                    "type": "optional<list<string>>",
                  },
                  "language": {
                    "docs": "Language of the article.",
                    "type": "optional<string>",
                  },
                  "owned_by": {
                    "docs": "The users that own the article.",
                    "type": "list<string>",
                  },
                  "parent": {
                    "docs": "The parent directory of the article.",
                    "type": "optional<string>",
                  },
                  "published_at": {
                    "docs": "The published date of the article.",
                    "type": "optional<datetime>",
                  },
                  "resource": "root.ArticlesCreateRequestResource",
                  "shared_with": {
                    "docs": "Information about the role the member receives due to the share.
",
                    "type": "optional<list<root.SharedWithMembership>>",
                  },
                  "status": "optional<root.ArticleStatus>",
                  "tags": {
                    "docs": "Tags associated with the article.",
                    "type": "optional<list<root.SetTagWithValue>>",
                  },
                  "title": {
                    "docs": "Name of the article.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "ArticlesCreateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.ArticlesCreateResponse",
            },
          },
          "delete-article": {
            "auth": true,
            "docs": "Deletes an article.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "ARTICLE-12345",
                },
                "response": {
                  "body": {
                    "string": {
                      "key": "value",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/articles.delete",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The ID of the article to delete.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "ArticlesDeleteRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.ArticlesDeleteResponse",
            },
          },
          "get-article": {
            "auth": true,
            "docs": "Gets an article.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "query-parameters": {
                  "id": "ARTICLE-12345",
                },
                "response": {
                  "body": {
                    "article": {
                      "applies_to_parts": [],
                      "created_date": "2023-01-01T12:00:00Z",
                      "description": "description",
                      "display_id": "display_id",
                      "extracted_content": [
                        {
                          "id": "id",
                        },
                      ],
                      "id": "id",
                      "modified_date": "2023-01-01T12:00:00Z",
                      "parent": {
                        "display_id": "display_id",
                        "id": "id",
                      },
                      "rank": "rank",
                      "resource": {
                        "artifacts": [
                          {
                            "id": "id",
                          },
                        ],
                        "url": "url",
                      },
                      "title": "title",
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/articles.get",
            "request": {
              "name": "GetArticleQuery",
              "query-parameters": {
                "id": {
                  "docs": "The ID of the required article.",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.ArticlesGetResponse",
            },
          },
          "get-article-post": {
            "auth": true,
            "docs": "Gets an article.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "ARTICLE-12345",
                },
                "response": {
                  "body": {
                    "article": {
                      "applies_to_parts": [],
                      "created_date": "2023-01-01T12:00:00Z",
                      "description": "description",
                      "display_id": "display_id",
                      "extracted_content": [
                        {
                          "id": "id",
                        },
                      ],
                      "id": "id",
                      "modified_date": "2023-01-01T12:00:00Z",
                      "parent": {
                        "display_id": "display_id",
                        "id": "id",
                      },
                      "rank": "rank",
                      "resource": {
                        "artifacts": [
                          {
                            "id": "id",
                          },
                        ],
                        "url": "url",
                      },
                      "title": "title",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/articles.get",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The ID of the required article.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "ArticlesGetRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.ArticlesGetResponse",
            },
          },
          "list-articles": {
            "auth": true,
            "docs": "Lists a collection of articles.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "articles": [
                      {
                        "applies_to_parts": [],
                        "created_date": "2023-01-01T12:00:00Z",
                        "description": "description",
                        "display_id": "display_id",
                        "extracted_content": [
                          {
                            "id": "id",
                          },
                        ],
                        "id": "id",
                        "modified_date": "2023-01-01T12:00:00Z",
                        "parent": {
                          "id": "id",
                        },
                        "rank": "rank",
                        "title": "title",
                      },
                    ],
                    "next_cursor": "next_cursor",
                    "prev_cursor": "prev_cursor",
                    "total": 1,
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/articles.list",
            "request": {
              "name": "ListArticlesQuery",
              "query-parameters": {
                "applies_to_parts": {
                  "allow-multiple": true,
                  "docs": "Filters for articles belonging to any of the provided parts.
",
                  "type": "optional<string>",
                },
                "authored_by": {
                  "allow-multiple": true,
                  "docs": "Filters for articles authored by any of the provided users.
",
                  "type": "optional<string>",
                },
                "created_by": {
                  "allow-multiple": true,
                  "docs": "Filters for articles created by any of the provided users.",
                  "type": "optional<string>",
                },
                "cursor": {
                  "docs": "The cursor to resume iteration from. If not provided, then iteration
starts from the beginning.
",
                  "type": "optional<string>",
                },
                "limit": {
                  "docs": "The maximum number of articles to return. The default is '50'.
",
                  "type": "optional<integer>",
                },
                "mode": {
                  "docs": "The iteration mode to use, otherwise if not set, then "after" is
used.
",
                  "type": "optional<root.ListMode>",
                },
                "owned_by": {
                  "allow-multiple": true,
                  "docs": "Filters for articles owned by any of the provided users.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.ArticlesListResponse",
            },
          },
          "list-articles-post": {
            "auth": true,
            "docs": "Lists a collection of articles.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {},
                "response": {
                  "body": {
                    "articles": [
                      {
                        "applies_to_parts": [],
                        "created_date": "2023-01-01T12:00:00Z",
                        "description": "description",
                        "display_id": "display_id",
                        "extracted_content": [
                          {
                            "id": "id",
                          },
                        ],
                        "id": "id",
                        "modified_date": "2023-01-01T12:00:00Z",
                        "parent": {
                          "id": "id",
                        },
                        "rank": "rank",
                        "title": "title",
                      },
                    ],
                    "next_cursor": "next_cursor",
                    "prev_cursor": "prev_cursor",
                    "total": 1,
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/articles.list",
            "request": {
              "body": {
                "properties": {
                  "applies_to_parts": {
                    "docs": "Filters for articles belonging to any of the provided parts.
",
                    "type": "optional<list<string>>",
                  },
                  "authored_by": {
                    "docs": "Filters for articles authored by any of the provided users.
",
                    "type": "optional<list<string>>",
                  },
                  "created_by": {
                    "docs": "Filters for articles created by any of the provided users.
",
                    "type": "optional<list<string>>",
                  },
                  "cursor": {
                    "docs": "The cursor to resume iteration from. If not provided, then
iteration starts from the beginning.
",
                    "type": "optional<string>",
                  },
                  "limit": {
                    "docs": "The maximum number of articles to return. The default is '50'.
",
                    "type": "optional<integer>",
                  },
                  "mode": "optional<root.ListMode>",
                  "owned_by": {
                    "docs": "Filters for articles owned by any of the provided users.",
                    "type": "optional<list<string>>",
                  },
                  "shared_with": {
                    "docs": "Filter for articles based on intended audience.",
                    "type": "optional<list<root.SharedWithMembershipFilter>>",
                  },
                },
              },
              "headers": undefined,
              "name": "ArticlesListRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.ArticlesListResponse",
            },
          },
          "update-article": {
            "auth": true,
            "docs": "Updates an article.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "ARTICLE-12345",
                },
                "response": {
                  "body": {
                    "article": {
                      "applies_to_parts": [],
                      "created_date": "2023-01-01T12:00:00Z",
                      "description": "description",
                      "display_id": "display_id",
                      "extracted_content": [
                        {
                          "id": "id",
                        },
                      ],
                      "id": "id",
                      "modified_date": "2023-01-01T12:00:00Z",
                      "parent": {
                        "display_id": "display_id",
                        "id": "id",
                      },
                      "rank": "rank",
                      "resource": {
                        "artifacts": [
                          {
                            "id": "id",
                          },
                        ],
                        "url": "url",
                      },
                      "title": "title",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/articles.update",
            "request": {
              "body": {
                "properties": {
                  "access_level": "optional<root.AccessLevel>",
                  "applies_to_parts": "optional<root.ArticlesUpdateRequestAppliesToParts>",
                  "artifacts": "optional<root.ArticlesUpdateRequestArtifacts>",
                  "authored_by": "optional<root.ArticlesUpdateRequestAuthoredBy>",
                  "description": {
                    "docs": "Updated description of the article object, or unchanged if not
provided.
",
                    "type": "optional<string>",
                  },
                  "extracted_content": "optional<root.ArticlesUpdateRequestExtractedContent>",
                  "id": {
                    "docs": "The article's ID.",
                    "type": "string",
                  },
                  "language": {
                    "docs": "Updates the language of the article.",
                    "type": "optional<string>",
                  },
                  "owned_by": "optional<root.ArticlesUpdateRequestOwnedBy>",
                  "parent": {
                    "docs": "The updated parent directory for the article.",
                    "type": "optional<string>",
                  },
                  "published_version": {
                    "docs": "Updates the the latest published version.",
                    "type": "optional<string>",
                  },
                  "reorder": "optional<root.ArticlesUpdateRequestReorder>",
                  "shared_with": "optional<root.ArticlesUpdateRequestSharedWith>",
                  "status": "optional<root.ArticleStatus>",
                  "tags": "optional<root.ArticlesUpdateRequestTags>",
                  "title": {
                    "docs": "Updated title of the article object, or unchanged if not provided.
",
                    "type": "optional<string>",
                  },
                  "url": {
                    "docs": "Updates the URL of the external article.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "ArticlesUpdateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.ArticlesUpdateResponse",
            },
          },
        },
      },
    },
    "artifacts.yml": {
      "docs": "Artifact (file) management APIs.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "artifacts",
        "endpoints": {
          "get": {
            "auth": true,
            "docs": "Gets the requested artifact's information.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "query-parameters": {
                  "id": "ARTIFACT-12345",
                },
                "response": {
                  "body": {
                    "artifact": {
                      "created_date": "2023-01-01T12:00:00Z",
                      "display_id": "display_id",
                      "id": "id",
                      "modified_date": "2023-01-01T12:00:00Z",
                    },
                    "version": {
                      "timestamp": "2023-01-01T12:00:00Z",
                      "version": "version",
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/artifacts.get",
            "request": {
              "name": "ArtifactsGetQuery",
              "query-parameters": {
                "id": {
                  "docs": "The requested artifact's ID.",
                  "type": "string",
                },
                "version": {
                  "docs": "The version of the artifact that needs to be fetched.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.ArtifactsGetResponse",
            },
          },
          "getPost": {
            "auth": true,
            "docs": "Gets the requested artifact's information.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "ARTIFACT-12345",
                },
                "response": {
                  "body": {
                    "artifact": {
                      "created_date": "2023-01-01T12:00:00Z",
                      "display_id": "display_id",
                      "id": "id",
                      "modified_date": "2023-01-01T12:00:00Z",
                    },
                    "version": {
                      "timestamp": "2023-01-01T12:00:00Z",
                      "version": "version",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/artifacts.get",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The requested artifact's ID.",
                    "type": "string",
                  },
                  "version": {
                    "docs": "The version of the artifact that needs to be fetched.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "ArtifactsGetRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.ArtifactsGetResponse",
            },
          },
          "list": {
            "auth": true,
            "docs": "List the artifacts attached to an object.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "query-parameters": {
                  "parent_id": "parent_id",
                },
                "response": {
                  "body": {
                    "artifacts": [
                      {
                        "created_date": "2023-01-01T12:00:00Z",
                        "display_id": "display_id",
                        "id": "id",
                        "modified_date": "2023-01-01T12:00:00Z",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/artifacts.list",
            "request": {
              "name": "ArtifactsListQuery",
              "query-parameters": {
                "parent_id": {
                  "docs": "The ID of the object to filter artifacts.",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.ArtifactsListResponse",
            },
          },
          "listPost": {
            "auth": true,
            "docs": "List the artifacts attached to an object.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "parent_id": "parent_id",
                },
                "response": {
                  "body": {
                    "artifacts": [
                      {
                        "created_date": "2023-01-01T12:00:00Z",
                        "display_id": "display_id",
                        "id": "id",
                        "modified_date": "2023-01-01T12:00:00Z",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/artifacts.list",
            "request": {
              "body": {
                "properties": {
                  "parent_id": {
                    "docs": "The ID of the object to filter artifacts.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "ArtifactsListRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.ArtifactsListResponse",
            },
          },
          "locate": {
            "auth": true,
            "docs": "Gets the download URL for the artifact.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "query-parameters": {
                  "id": "ARTIFACT-12345",
                },
                "response": {
                  "body": {
                    "expires_at": "2023-01-01T12:00:00Z",
                    "url": "url",
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/artifacts.locate",
            "request": {
              "name": "ArtifactsLocateQuery",
              "query-parameters": {
                "id": {
                  "docs": "The ID of the artifact to get the URL for.",
                  "type": "string",
                },
                "version": {
                  "docs": "The version of the artifact that needs to be fetched.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.ArtifactsLocateResponse",
            },
          },
          "locatePost": {
            "auth": true,
            "docs": "Gets the download URL for the artifact.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "ARTIFACT-12345",
                },
                "response": {
                  "body": {
                    "expires_at": "2023-01-01T12:00:00Z",
                    "url": "url",
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/artifacts.locate",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The ID of the artifact to get the URL for.",
                    "type": "string",
                  },
                  "version": {
                    "docs": "The version of the artifact that needs to be fetched.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "ArtifactsLocateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.ArtifactsLocateResponse",
            },
          },
          "prepare": {
            "auth": true,
            "docs": "Creates an artifact and generates an upload URL for its data.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "file_name": "file_name",
                },
                "response": {
                  "body": {
                    "form_data": [
                      {
                        "key": "key",
                        "value": "value",
                      },
                    ],
                    "id": "ARTIFACT-12345",
                    "url": "url",
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/artifacts.prepare",
            "request": {
              "body": {
                "properties": {
                  "file_name": {
                    "docs": "The name of the file that's being uploaded.",
                    "type": "string",
                  },
                  "file_type": {
                    "docs": "The type of file that's being uploaded.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "ArtifactsPrepareRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.ArtifactsPrepareResponse",
            },
          },
          "versionsPrepare": {
            "auth": true,
            "docs": "Prepares a new version for an artifact, returning the URL and form data
to upload the updated file.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "ARTIFACT-12345",
                },
                "response": {
                  "body": {
                    "form_data": [
                      {
                        "key": "key",
                        "value": "value",
                      },
                    ],
                    "url": "url",
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/artifacts.versions.prepare",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The ID of the artifact to prepare a new version for.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "ArtifactsVersionsPrepareRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.ArtifactsVersionsPrepareResponse",
            },
          },
        },
      },
    },
    "authConnection.yml": {
      "docs": "Auth Connections of DevOrg.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "auth-connection",
        "endpoints": {
          "dev-org-auth-connections-create": {
            "auth": true,
            "docs": "Creates a new enterprise authentication connection for a Dev
organization. This authentication connection will not be enabled by
default for the organization and the user will need to explicitly
enable this. Keep in mind that at a time, only one authentication
connection can be enabled for a Dev organization. At present, only 5
enterprise connections can be created by an organization.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "path": "/dev-orgs.auth-connections.create",
            "request": {
              "body": "root.DevOrgAuthConnectionsCreateRequest",
            },
            "response": {
              "docs": "Success.",
              "type": "root.DevOrgAuthConnectionsCreateResponse",
            },
          },
          "dev-org-auth-connections-delete": {
            "auth": true,
            "docs": "Deletes an authentication connection. Only enterprise connections which
are explicitly set up for a Dev organization can be deleted. Default
connections can not be deleted using this method.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "id",
                },
              },
            ],
            "method": "POST",
            "path": "/dev-orgs.auth-connections.delete",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "ID of the authentication connection to be deleted.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "DevOrgAuthConnectionsDeleteRequest",
              "query-parameters": undefined,
            },
          },
          "dev-org-auth-connections-get": {
            "auth": true,
            "docs": "Retrieves the details for an authentication connection.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "GET",
            "path": "/dev-orgs.auth-connections.get",
            "request": {
              "name": "DevOrgAuthConnectionsGetQuery",
              "query-parameters": {
                "id": {
                  "docs": "ID of the authentication connection.",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.DevOrgAuthConnectionsGetResponse",
            },
          },
          "dev-org-auth-connections-get-post": {
            "auth": true,
            "docs": "Retrieves the details for an authentication connection.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "path": "/dev-orgs.auth-connections.get",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "ID of the authentication connection.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "DevOrgAuthConnectionsGetRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.DevOrgAuthConnectionsGetResponse",
            },
          },
          "dev-org-auth-connections-list": {
            "auth": true,
            "docs": "Lists all the authentication connections available for a Dev
organization. This list will include both social and enterprise
connections which are either available by default or are explicitly
created by the user.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "auth_connections": [],
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/dev-orgs.auth-connections.list",
            "response": {
              "docs": "Success.",
              "type": "root.DevOrgAuthConnectionsListResponse",
            },
          },
          "dev-org-auth-connections-list-post": {
            "auth": true,
            "docs": "Lists all the authentication connections available for a Dev
organization. This list will include both social and enterprise
connections which are either available by default or are explicitly
created by the user.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {},
                "response": {
                  "body": {
                    "auth_connections": [],
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/dev-orgs.auth-connections.list",
            "request": {
              "body": "root.empty",
            },
            "response": {
              "docs": "Success.",
              "type": "root.DevOrgAuthConnectionsListResponse",
            },
          },
          "dev-org-auth-connections-toggle": {
            "auth": true,
            "docs": "Enable or disable an authentication connection for a Dev organization.
Currently, only 1 authentication connection can be enabled at a time.
When a new authentication connection is enabled, the connection which
is currently enabled for the Dev organization is automatically
disabled.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "id",
                },
              },
            ],
            "method": "POST",
            "path": "/dev-orgs.auth-connections.toggle",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "ID of the authentication connection to be toggled.",
                    "type": "string",
                  },
                  "toggle": "optional<root.AuthConnectionToggle>",
                },
              },
              "headers": undefined,
              "name": "DevOrgAuthConnectionsToggleRequest",
              "query-parameters": undefined,
            },
          },
          "dev-org-auth-connections-update": {
            "auth": true,
            "docs": "Updates an authentication connection.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "path": "/dev-orgs.auth-connections.update",
            "request": {
              "body": "root.DevOrgAuthConnectionsUpdateRequest",
            },
            "response": {
              "docs": "Success.",
              "type": "root.DevOrgAuthConnectionsUpdateResponse",
            },
          },
        },
      },
    },
    "authTokens.yml": {
      "docs": "Security token interactions.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "auth-tokens",
        "endpoints": {
          "create": {
            "auth": true,
            "docs": "Creates a JWT corresponding to the requested token type for the
authenticated user.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.ConflictError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {},
                "response": {
                  "body": {
                    "access_token": "access_token",
                    "client_id": "client_id",
                    "expires_in": 1,
                    "refresh_token": "refresh_token",
                    "scope": "scope",
                    "token_type": "bearer",
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/auth-tokens.create",
            "request": {
              "body": {
                "properties": {
                  "act_as": {
                    "docs": "The unique ID of the Dev user to impersonate.",
                    "type": "optional<string>",
                  },
                  "aud": {
                    "docs": "The expected audience values with respect to the token.",
                    "type": "optional<list<string>>",
                  },
                  "client_id": {
                    "docs": "An identifier that represents the application which is requesting
the token. If no client_id is present in the request to generate an
application access token (AAT), DevRev will generate a client_id.
This client_id is only associated with an AAT.
",
                    "type": "optional<string>",
                  },
                  "expires_in": {
                    "docs": "The expected validity lifetime of the token in number of days. In
practice, the value should be based on the usage of the token.
",
                    "type": "optional<integer>",
                  },
                  "grant_type": "optional<root.AuthTokenGrantType>",
                  "requested_token_type": "optional<root.AuthTokenRequestedTokenType>",
                  "rev_info": "optional<root.AuthTokensRevInfo>",
                  "scope": {
                    "docs": "The requested set of scopes associated with the issued token. A
space-delimited list of values in which the order of values does
not matter.
",
                    "type": "optional<string>",
                  },
                  "subject_token": {
                    "docs": "Represents the entity that requests the token. Not required when
requesting an application access token (AAT).
",
                    "type": "optional<string>",
                  },
                  "subject_token_type": "optional<root.AuthTokenSubjectTokenType>",
                  "token_hint": {
                    "docs": "A hint that identifies the token.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "AuthTokensCreateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.AuthTokensCreateResponse",
            },
          },
          "delete": {
            "auth": true,
            "docs": "Revokes the token that matches the given token ID issued under the
given Dev organization.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {},
              },
            ],
            "method": "POST",
            "path": "/auth-tokens.delete",
            "request": {
              "body": {
                "properties": {
                  "token_id": {
                    "docs": "The unique identifier for the token under a given Dev organization.
If no token ID is provided, then the token ID will be set from the
JTI claim of the token in the authorization header.
",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "AuthTokensDeleteRequest",
              "query-parameters": undefined,
            },
          },
          "get": {
            "auth": true,
            "docs": "Gets the token metadata corresponding to the given token ID under the
given Dev organization.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "query-parameters": {
                  "token_id": "token_id",
                },
                "response": {
                  "body": {
                    "token": {
                      "client_id": "client_id",
                      "created_date": "2023-01-01T12:00:00Z",
                      "display_id": "display_id",
                      "expires_at": "2023-01-01T12:00:00Z",
                      "id": "id",
                      "issued_at": "2023-01-01T12:00:00Z",
                      "modified_date": "2023-01-01T12:00:00Z",
                      "requested_token_type": "urn:devrev:params:oauth:token-type:aat",
                      "scopes": [
                        "scopes",
                      ],
                      "status": "active",
                      "subject": "subject",
                      "token_hint": "token_hint",
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/auth-tokens.get",
            "request": {
              "name": "AuthTokensGetQuery",
              "query-parameters": {
                "token_id": {
                  "docs": "The unique identifier of the token under a given Dev organization.
",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.AuthTokensGetResponse",
            },
          },
          "getPost": {
            "auth": true,
            "docs": "Gets the token metadata corresponding to the given token ID under the
given Dev organization.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "token_id": "token_id",
                },
                "response": {
                  "body": {
                    "token": {
                      "client_id": "client_id",
                      "created_date": "2023-01-01T12:00:00Z",
                      "display_id": "display_id",
                      "expires_at": "2023-01-01T12:00:00Z",
                      "id": "id",
                      "issued_at": "2023-01-01T12:00:00Z",
                      "modified_date": "2023-01-01T12:00:00Z",
                      "requested_token_type": "urn:devrev:params:oauth:token-type:aat",
                      "scopes": [
                        "scopes",
                      ],
                      "status": "active",
                      "subject": "subject",
                      "token_hint": "token_hint",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/auth-tokens.get",
            "request": {
              "body": {
                "properties": {
                  "token_id": {
                    "docs": "The unique identifier of the token under a given Dev organization.
",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "AuthTokensGetRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.AuthTokensGetResponse",
            },
          },
          "list": {
            "auth": true,
            "docs": "Gets the token metadata for all the tokens corresponding to the given
token type issued for a given subject.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "tokens": [
                      {
                        "client_id": "client_id",
                        "created_date": "2023-01-01T12:00:00Z",
                        "display_id": "display_id",
                        "expires_at": "2023-01-01T12:00:00Z",
                        "id": "id",
                        "issued_at": "2023-01-01T12:00:00Z",
                        "modified_date": "2023-01-01T12:00:00Z",
                        "requested_token_type": "urn:devrev:params:oauth:token-type:aat",
                        "scopes": [
                          "scopes",
                        ],
                        "status": "active",
                        "subject": "subject",
                        "token_hint": "token_hint",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/auth-tokens.list",
            "request": {
              "name": "AuthTokensListQuery",
              "query-parameters": {
                "client_id": {
                  "docs": "An identifier that represents the application, which requested the
token. Only relevant for application access tokens.
",
                  "type": "optional<string>",
                },
                "requested_token_type": {
                  "docs": "The type of the requested token. If no value is specified, the
response will include tokens of all the types.
",
                  "type": "optional<root.AuthTokenRequestedTokenType>",
                },
                "subject": {
                  "docs": "The subject associated with the token. In the absence of this
parameter, the ID of the authenticated entity is treated as the
subject.
",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.AuthTokensListResponse",
            },
          },
          "listPost": {
            "auth": true,
            "docs": "Gets the token metadata for all the tokens corresponding to the given
token type issued for a given subject.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {},
                "response": {
                  "body": {
                    "tokens": [
                      {
                        "client_id": "client_id",
                        "created_date": "2023-01-01T12:00:00Z",
                        "display_id": "display_id",
                        "expires_at": "2023-01-01T12:00:00Z",
                        "id": "id",
                        "issued_at": "2023-01-01T12:00:00Z",
                        "modified_date": "2023-01-01T12:00:00Z",
                        "requested_token_type": "urn:devrev:params:oauth:token-type:aat",
                        "scopes": [
                          "scopes",
                        ],
                        "status": "active",
                        "subject": "subject",
                        "token_hint": "token_hint",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/auth-tokens.list",
            "request": {
              "body": {
                "properties": {
                  "client_id": {
                    "docs": "An identifier that represents the application, which requested the
token. Only relevant for application access tokens.
",
                    "type": "optional<string>",
                  },
                  "requested_token_type": "optional<root.AuthTokenRequestedTokenType>",
                  "subject": {
                    "docs": "The subject associated with the token. In the absence of this
parameter, the ID of the authenticated entity is treated as the
subject.
",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "AuthTokensListRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.AuthTokensListResponse",
            },
          },
          "selfDelete": {
            "auth": true,
            "docs": "Revokes all the tokens that matches the given token type created by the
authenticated user.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {},
              },
            ],
            "method": "POST",
            "path": "/auth-tokens.self.delete",
            "request": {
              "body": {
                "properties": {
                  "requested_token_type": "optional<root.AuthTokenRequestedTokenType>",
                },
              },
              "headers": undefined,
              "name": "AuthTokensSelfDeleteRequest",
              "query-parameters": undefined,
            },
          },
          "update": {
            "auth": true,
            "docs": "Updates token metadata of a token issued under a given Dev
organization.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "token_hint": "token_hint",
                  "token_id": "token_id",
                },
                "response": {
                  "body": {
                    "token": {
                      "client_id": "client_id",
                      "created_date": "2023-01-01T12:00:00Z",
                      "display_id": "display_id",
                      "expires_at": "2023-01-01T12:00:00Z",
                      "id": "id",
                      "issued_at": "2023-01-01T12:00:00Z",
                      "modified_date": "2023-01-01T12:00:00Z",
                      "requested_token_type": "urn:devrev:params:oauth:token-type:aat",
                      "scopes": [
                        "scopes",
                      ],
                      "status": "active",
                      "subject": "subject",
                      "token_hint": "token_hint",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/auth-tokens.update",
            "request": {
              "body": {
                "properties": {
                  "token_hint": {
                    "docs": "A hint that identifies the token.",
                    "type": "string",
                  },
                  "token_id": {
                    "docs": "The unique identifier of the token under a given Dev organization.
",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "AuthTokensUpdateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.AuthTokensUpdateResponse",
            },
          },
        },
      },
    },
    "conversations.yml": {
      "docs": "DevRev conversation interaction.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "conversations",
        "endpoints": {
          "create": {
            "auth": true,
            "docs": "Creates a conversation.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "tags": [
                    {
                      "id": "TAG-12345",
                    },
                  ],
                  "type": "support",
                },
                "response": {
                  "body": {
                    "conversation": {
                      "created_date": "2023-01-01T12:00:00Z",
                      "description": "description",
                      "display_id": "display_id",
                      "group": {
                        "display_id": "display_id",
                        "id": "id",
                        "name": "name",
                      },
                      "id": "id",
                      "members": [],
                      "metadata": {
                        "url_context": "url_context",
                      },
                      "modified_date": "2023-01-01T12:00:00Z",
                      "stage": {
                        "name": "name",
                      },
                      "tags": [
                        {
                          "tag": {
                            "id": "id",
                            "name": "name",
                          },
                        },
                      ],
                      "title": "title",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/conversations.create",
            "request": {
              "body": {
                "properties": {
                  "description": {
                    "docs": "Description for the conversation.",
                    "type": "optional<string>",
                  },
                  "group": {
                    "docs": "The group that the conversation is associated with.",
                    "type": "optional<string>",
                  },
                  "is_spam": {
                    "docs": "Whether the conversation is spam.",
                    "type": "optional<boolean>",
                  },
                  "members": {
                    "docs": "The users in the conversation.",
                    "type": "optional<list<string>>",
                  },
                  "messages": {
                    "docs": "Initial messages on the conversation.",
                    "type": "optional<list<root.ConversationsCreateRequestMessage>>",
                  },
                  "metadata": "optional<root.ConversationsCreateRequestMetadata>",
                  "source_channel": {
                    "docs": "Whether the conversation is from a source channel.",
                    "type": "optional<string>",
                  },
                  "stage": "optional<root.StageInit>",
                  "tags": {
                    "docs": "Tags associated with the conversation.",
                    "type": "optional<list<root.SetTagWithValue>>",
                  },
                  "title": {
                    "docs": "The title for the conversation.",
                    "type": "optional<string>",
                  },
                  "type": "root.ConversationsCreateRequestTypeValue",
                  "user_sessions": {
                    "docs": "The IDs of user sessions associated with the conversation.
",
                    "type": "optional<list<string>>",
                  },
                },
              },
              "headers": undefined,
              "name": "ConversationsCreateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.ConversationsCreateResponse",
            },
          },
          "delete": {
            "auth": true,
            "docs": "Deletes the requested conversation.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "id",
                },
                "response": {
                  "body": {
                    "string": {
                      "key": "value",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/conversations.delete",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The ID of the conversation to delete.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "ConversationsDeleteRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.ConversationsDeleteResponse",
            },
          },
          "export": {
            "auth": true,
            "docs": "Exports a collection of conversation items.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "query-parameters": {
                  "tags_v2.id": "TAG-12345",
                },
                "response": {
                  "body": {
                    "conversations": [
                      {
                        "created_date": "2023-01-01T12:00:00Z",
                        "description": "description",
                        "display_id": "display_id",
                        "group": {
                          "id": "id",
                        },
                        "id": "id",
                        "members": [],
                        "modified_date": "2023-01-01T12:00:00Z",
                        "stage": {
                          "name": "name",
                        },
                        "tags": [
                          {
                            "tag": {
                              "id": "id",
                              "name": "name",
                            },
                          },
                        ],
                        "title": "title",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/conversations.export",
            "request": {
              "name": "ConversationsExportQuery",
              "query-parameters": {
                "applies_to_parts": {
                  "allow-multiple": true,
                  "docs": "Filters for conversations belonging to any of the provided parts.
",
                  "type": "optional<string>",
                },
                "first": {
                  "docs": "The number of conversation items to return. The default is '50', the
maximum is '5000'.
",
                  "type": "optional<integer>",
                },
                "group": {
                  "allow-multiple": true,
                  "docs": "Filters for conversation that belong to the given groups.",
                  "type": "optional<string>",
                },
                "is_creator_verified": {
                  "docs": "Filters for conversations that are created by verified users.
",
                  "type": "optional<boolean>",
                },
                "is_spam": {
                  "docs": "Filters for conversations that are spam.",
                  "type": "optional<boolean>",
                },
                "members": {
                  "allow-multiple": true,
                  "docs": "Filters for conversations where these users are participants.
",
                  "type": "optional<string>",
                },
                "owned_by": {
                  "allow-multiple": true,
                  "docs": "Filters for conversations owned by any of these users.",
                  "type": "optional<string>",
                },
                "rev_org": {
                  "allow-multiple": true,
                  "docs": "Filters for conversations that are associated with any of the
provided Rev organizations.
",
                  "type": "optional<string>",
                },
                "sla_summary.stage": {
                  "allow-multiple": true,
                  "docs": "Filters for records with any of the provided SLA stages.",
                  "type": "optional<root.SlaSummaryStage>",
                },
                "source_channels": {
                  "allow-multiple": true,
                  "docs": "Filters for conversations with any of the provided source channels.
",
                  "type": "optional<string>",
                },
                "stage.name": {
                  "allow-multiple": true,
                  "docs": "Filters for records in the provided stage(s) by name.",
                  "type": "optional<string>",
                },
                "tags": {
                  "allow-multiple": true,
                  "docs": "Filters for conversations with any of the provided tags.",
                  "type": "optional<string>",
                },
                "tags_v2.id": {
                  "docs": "The ID of the tag.",
                  "type": "optional<string>",
                },
                "tags_v2.value": {
                  "docs": "The value for the object's association with the tag. If specified,
the value must be one that's specified in the tag's allowed values.
",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.ConversationsExportResponse",
            },
          },
          "exportPost": {
            "auth": true,
            "docs": "Exports a collection of conversation items.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {},
                "response": {
                  "body": {
                    "conversations": [
                      {
                        "created_date": "2023-01-01T12:00:00Z",
                        "description": "description",
                        "display_id": "display_id",
                        "group": {
                          "id": "id",
                        },
                        "id": "id",
                        "members": [],
                        "modified_date": "2023-01-01T12:00:00Z",
                        "stage": {
                          "name": "name",
                        },
                        "tags": [
                          {
                            "tag": {
                              "id": "id",
                              "name": "name",
                            },
                          },
                        ],
                        "title": "title",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/conversations.export",
            "request": {
              "body": {
                "properties": {
                  "applies_to_parts": {
                    "docs": "Filters for conversations belonging to any of the provided parts.
",
                    "type": "optional<list<string>>",
                  },
                  "first": {
                    "docs": "The number of conversation items to return. The default is '50',
the maximum is '5000'.
",
                    "type": "optional<integer>",
                  },
                  "group": {
                    "docs": "Filters for conversation that belong to the given groups.
",
                    "type": "optional<list<string>>",
                  },
                  "is_creator_verified": {
                    "docs": "Filters for conversations that are created by verified users.
",
                    "type": "optional<boolean>",
                  },
                  "is_spam": {
                    "docs": "Filters for conversations that are spam.",
                    "type": "optional<boolean>",
                  },
                  "members": {
                    "docs": "Filters for conversations where these users are participants.
",
                    "type": "optional<list<string>>",
                  },
                  "owned_by": {
                    "docs": "Filters for conversations owned by any of these users.",
                    "type": "optional<list<string>>",
                  },
                  "rev_org": {
                    "docs": "Filters for conversations that are associated with any of the
provided Rev organizations.
",
                    "type": "optional<list<string>>",
                  },
                  "sla_summary": "optional<root.SlaSummaryFilter>",
                  "source_channels": {
                    "docs": "Filters for conversations with any of the provided source channels.
",
                    "type": "optional<list<string>>",
                  },
                  "stage": "optional<root.StageFilter>",
                  "tags": {
                    "docs": "Filters for conversations with any of the provided tags.",
                    "type": "optional<list<string>>",
                  },
                  "tags_v2": {
                    "docs": "Filters for conversations with any of the provided tags with value.
",
                    "type": "optional<list<root.TagWithValueFilter>>",
                  },
                },
              },
              "headers": undefined,
              "name": "ConversationsExportRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.ConversationsExportResponse",
            },
          },
          "get": {
            "auth": true,
            "docs": "Gets the requested conversation's information.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "query-parameters": {
                  "id": "id",
                },
                "response": {
                  "body": {
                    "conversation": {
                      "created_date": "2023-01-01T12:00:00Z",
                      "description": "description",
                      "display_id": "display_id",
                      "group": {
                        "display_id": "display_id",
                        "id": "id",
                        "name": "name",
                      },
                      "id": "id",
                      "members": [],
                      "metadata": {
                        "url_context": "url_context",
                      },
                      "modified_date": "2023-01-01T12:00:00Z",
                      "stage": {
                        "name": "name",
                      },
                      "tags": [
                        {
                          "tag": {
                            "id": "id",
                            "name": "name",
                          },
                        },
                      ],
                      "title": "title",
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/conversations.get",
            "request": {
              "name": "ConversationsGetQuery",
              "query-parameters": {
                "id": {
                  "docs": "The requested conversation's ID.",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.ConversationsGetResponse",
            },
          },
          "getPost": {
            "auth": true,
            "docs": "Gets the requested conversation's information.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "id",
                },
                "response": {
                  "body": {
                    "conversation": {
                      "created_date": "2023-01-01T12:00:00Z",
                      "description": "description",
                      "display_id": "display_id",
                      "group": {
                        "display_id": "display_id",
                        "id": "id",
                        "name": "name",
                      },
                      "id": "id",
                      "members": [],
                      "metadata": {
                        "url_context": "url_context",
                      },
                      "modified_date": "2023-01-01T12:00:00Z",
                      "stage": {
                        "name": "name",
                      },
                      "tags": [
                        {
                          "tag": {
                            "id": "id",
                            "name": "name",
                          },
                        },
                      ],
                      "title": "title",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/conversations.get",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The requested conversation's ID.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "ConversationsGetRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.ConversationsGetResponse",
            },
          },
          "list": {
            "auth": true,
            "docs": "Lists the available conversations.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "query-parameters": {
                  "tags_v2.id": "TAG-12345",
                },
                "response": {
                  "body": {
                    "conversations": [
                      {
                        "created_date": "2023-01-01T12:00:00Z",
                        "description": "description",
                        "display_id": "display_id",
                        "group": {
                          "id": "id",
                        },
                        "id": "id",
                        "members": [],
                        "modified_date": "2023-01-01T12:00:00Z",
                        "stage": {
                          "name": "name",
                        },
                        "tags": [
                          {
                            "tag": {
                              "id": "id",
                              "name": "name",
                            },
                          },
                        ],
                        "title": "title",
                      },
                    ],
                    "next_cursor": "next_cursor",
                    "prev_cursor": "prev_cursor",
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/conversations.list",
            "request": {
              "name": "ConversationsListQuery",
              "query-parameters": {
                "applies_to_parts": {
                  "allow-multiple": true,
                  "docs": "Filters for conversations belonging to any of the provided parts.
",
                  "type": "optional<string>",
                },
                "cursor": {
                  "docs": "The cursor to resume iteration from. If not provided, then iteration
starts from the beginning.
",
                  "type": "optional<string>",
                },
                "group": {
                  "allow-multiple": true,
                  "docs": "Filters for conversation that belong to the given groups.",
                  "type": "optional<string>",
                },
                "is_creator_verified": {
                  "docs": "Filters for conversations that are created by verified users.
",
                  "type": "optional<boolean>",
                },
                "is_spam": {
                  "docs": "Filters for conversations that are spam.",
                  "type": "optional<boolean>",
                },
                "limit": {
                  "docs": "The maximum number of conversations to return. The default is '50'.
",
                  "type": "optional<integer>",
                },
                "members": {
                  "allow-multiple": true,
                  "docs": "Filters for conversations where these users are participants.
",
                  "type": "optional<string>",
                },
                "mode": {
                  "docs": "The iteration mode to use, otherwise if not set, then "after" is
used.
",
                  "type": "optional<root.ListMode>",
                },
                "owned_by": {
                  "allow-multiple": true,
                  "docs": "Filters for conversations owned by any of these users.",
                  "type": "optional<string>",
                },
                "rev_org": {
                  "allow-multiple": true,
                  "docs": "Filters for conversations that are associated with any of the
provided Rev organizations.
",
                  "type": "optional<string>",
                },
                "sla_summary.stage": {
                  "allow-multiple": true,
                  "docs": "Filters for records with any of the provided SLA stages.",
                  "type": "optional<root.SlaSummaryStage>",
                },
                "source_channels": {
                  "allow-multiple": true,
                  "docs": "Filters for conversations with any of the provided source channels.
",
                  "type": "optional<string>",
                },
                "stage.name": {
                  "allow-multiple": true,
                  "docs": "Filters for records in the provided stage(s) by name.",
                  "type": "optional<string>",
                },
                "tags": {
                  "allow-multiple": true,
                  "docs": "Filters for conversations with any of the provided tags.",
                  "type": "optional<string>",
                },
                "tags_v2.id": {
                  "docs": "The ID of the tag.",
                  "type": "optional<string>",
                },
                "tags_v2.value": {
                  "docs": "The value for the object's association with the tag. If specified,
the value must be one that's specified in the tag's allowed values.
",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.ConversationsListResponse",
            },
          },
          "listPost": {
            "auth": true,
            "docs": "Lists the available conversations.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {},
                "response": {
                  "body": {
                    "conversations": [
                      {
                        "created_date": "2023-01-01T12:00:00Z",
                        "description": "description",
                        "display_id": "display_id",
                        "group": {
                          "id": "id",
                        },
                        "id": "id",
                        "members": [],
                        "modified_date": "2023-01-01T12:00:00Z",
                        "stage": {
                          "name": "name",
                        },
                        "tags": [
                          {
                            "tag": {
                              "id": "id",
                              "name": "name",
                            },
                          },
                        ],
                        "title": "title",
                      },
                    ],
                    "next_cursor": "next_cursor",
                    "prev_cursor": "prev_cursor",
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/conversations.list",
            "request": {
              "body": {
                "properties": {
                  "applies_to_parts": {
                    "docs": "Filters for conversations belonging to any of the provided parts.
",
                    "type": "optional<list<string>>",
                  },
                  "cursor": {
                    "docs": "The cursor to resume iteration from. If not provided, then
iteration starts from the beginning.
",
                    "type": "optional<string>",
                  },
                  "group": {
                    "docs": "Filters for conversation that belong to the given groups.
",
                    "type": "optional<list<string>>",
                  },
                  "is_creator_verified": {
                    "docs": "Filters for conversations that are created by verified users.
",
                    "type": "optional<boolean>",
                  },
                  "is_spam": {
                    "docs": "Filters for conversations that are spam.",
                    "type": "optional<boolean>",
                  },
                  "limit": {
                    "docs": "The maximum number of conversations to return. The default is '50'.
",
                    "type": "optional<integer>",
                  },
                  "members": {
                    "docs": "Filters for conversations where these users are participants.
",
                    "type": "optional<list<string>>",
                  },
                  "mode": "optional<root.ListMode>",
                  "owned_by": {
                    "docs": "Filters for conversations owned by any of these users.",
                    "type": "optional<list<string>>",
                  },
                  "rev_org": {
                    "docs": "Filters for conversations that are associated with any of the
provided Rev organizations.
",
                    "type": "optional<list<string>>",
                  },
                  "sla_summary": "optional<root.SlaSummaryFilter>",
                  "source_channels": {
                    "docs": "Filters for conversations with any of the provided source channels.
",
                    "type": "optional<list<string>>",
                  },
                  "stage": "optional<root.StageFilter>",
                  "tags": {
                    "docs": "Filters for conversations with any of the provided tags.",
                    "type": "optional<list<string>>",
                  },
                  "tags_v2": {
                    "docs": "Filters for conversations with any of the provided tags with value.
",
                    "type": "optional<list<root.TagWithValueFilter>>",
                  },
                },
              },
              "headers": undefined,
              "name": "ConversationsListRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.ConversationsListResponse",
            },
          },
          "update": {
            "auth": true,
            "docs": "Updates the requested conversation.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "id",
                },
                "response": {
                  "body": {
                    "conversation": {
                      "created_date": "2023-01-01T12:00:00Z",
                      "description": "description",
                      "display_id": "display_id",
                      "group": {
                        "display_id": "display_id",
                        "id": "id",
                        "name": "name",
                      },
                      "id": "id",
                      "members": [],
                      "metadata": {
                        "url_context": "url_context",
                      },
                      "modified_date": "2023-01-01T12:00:00Z",
                      "stage": {
                        "name": "name",
                      },
                      "tags": [
                        {
                          "tag": {
                            "id": "id",
                            "name": "name",
                          },
                        },
                      ],
                      "title": "title",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/conversations.update",
            "request": {
              "body": {
                "properties": {
                  "applies_to_parts": "optional<root.ConversationsUpdateRequestAppliesToParts>",
                  "description": {
                    "docs": "The updated description for the conversation.",
                    "type": "optional<string>",
                  },
                  "group": {
                    "docs": "The group that the conversation is associated with.",
                    "type": "optional<string>",
                  },
                  "id": {
                    "docs": "The ID of the conversation to update.",
                    "type": "string",
                  },
                  "is_spam": {
                    "docs": "Whether the conversation is spam.",
                    "type": "optional<boolean>",
                  },
                  "metadata": "optional<root.ConversationsUpdateRequestMetadata>",
                  "stage": "optional<root.StageUpdate>",
                  "status": {
                    "docs": "The updated status of the conversation.",
                    "type": "optional<string>",
                  },
                  "tags": "optional<root.ConversationsUpdateRequestTags>",
                  "title": {
                    "docs": "The updated title of the conversation.",
                    "type": "optional<string>",
                  },
                  "user_sessions": "optional<root.ConversationsUpdateRequestUserSessions>",
                },
              },
              "headers": undefined,
              "name": "ConversationsUpdateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.ConversationsUpdateResponse",
            },
          },
        },
      },
    },
    "customization.yml": {
      "docs": "DevRev customization.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "customization",
        "endpoints": {
          "aggregated-schema-get": {
            "auth": true,
            "docs": "Gets the aggregated schema.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "GET",
            "path": "/schemas.aggregated.get",
            "request": {
              "name": "AggregatedSchemaGetQuery",
              "query-parameters": {
                "custom_schema_fragment_ids": {
                  "allow-multiple": true,
                  "docs": "The list of custom schema fragment DONs which are to be aggregated.
",
                  "type": "optional<string>",
                },
                "stock_schema_fragment_id": {
                  "docs": "The stock schema fragment which is to be aggregated.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.AggregatedSchemaGetResponse",
            },
          },
          "aggregated-schema-get-post": {
            "auth": true,
            "docs": "Gets the aggregated schema.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "custom_schema_fragment_ids": [
                    "custom_schema_fragment_ids",
                  ],
                },
                "response": {
                  "body": {
                    "schema": {
                      "schema": {
                        "key": "value",
                      },
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/schemas.aggregated.get",
            "request": {
              "body": {
                "properties": {
                  "custom_schema_fragment_ids": {
                    "docs": "The list of custom schema fragment DONs which are to be aggregated.
",
                    "type": "list<string>",
                  },
                  "per_object_schema": {
                    "docs": "Per object schema, if associated with the leaf type.",
                    "type": "optional<list<root.FieldDescriptor>>",
                  },
                  "stock_schema_fragment_id": {
                    "docs": "The stock schema fragment which is to be aggregated.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "AggregatedSchemaGetRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.AggregatedSchemaGetResponse",
            },
          },
          "custom-schema-fragments-get": {
            "auth": true,
            "docs": "Gets a custom schema fragment.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "GET",
            "path": "/schemas.custom.get",
            "request": {
              "name": "CustomSchemaFragmentsGetQuery",
              "query-parameters": {
                "id": {
                  "docs": "The ID of the custom schema fragment.",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.CustomSchemaFragmentsGetResponse",
            },
          },
          "custom-schema-fragments-get-post": {
            "auth": true,
            "docs": "Gets a custom schema fragment.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "path": "/schemas.custom.get",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The ID of the custom schema fragment.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "CustomSchemaFragmentsGetRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.CustomSchemaFragmentsGetResponse",
            },
          },
          "custom-schema-fragments-list": {
            "auth": true,
            "docs": "Lists custom schema fragments.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "cursor": "cursor",
                    "result": [],
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/schemas.custom.list",
            "request": {
              "name": "CustomSchemaFragmentsListQuery",
              "query-parameters": {
                "app": {
                  "allow-multiple": true,
                  "docs": "The list of app names.",
                  "type": "optional<string>",
                },
                "cursor": {
                  "docs": "The cursor to resume iteration from, otherwise if not provided, then
iteration starts from the beginning.
",
                  "type": "optional<string>",
                },
                "deprecated": {
                  "docs": "Whether only deprecated fragments should be filtered.",
                  "type": "optional<boolean>",
                },
                "leaf_type": {
                  "allow-multiple": true,
                  "docs": "The list of leaf types.",
                  "type": "optional<string>",
                },
                "limit": {
                  "docs": "The maximum number of items.",
                  "type": "optional<integer>",
                },
                "prune": {
                  "allow-multiple": true,
                  "docs": "List of fields which are not required in the payload and can be
pruned away.
",
                  "type": "optional<root.CustomSchemaFragmentsListRequestPrune>",
                },
                "sort_by": {
                  "allow-multiple": true,
                  "docs": "The list of fields to sort the items by and how to sort them.
",
                  "type": "optional<string>",
                },
                "subtype": {
                  "allow-multiple": true,
                  "docs": "The list of subtypes.",
                  "type": "optional<string>",
                },
                "types": {
                  "allow-multiple": true,
                  "docs": "Filters for custom schema fragment of the provided types.",
                  "type": "optional<root.CustomSchemaFragmentType>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.CustomSchemaFragmentsListResponse",
            },
          },
          "custom-schema-fragments-list-post": {
            "auth": true,
            "docs": "Lists custom schema fragments.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {},
                "response": {
                  "body": {
                    "cursor": "cursor",
                    "result": [],
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/schemas.custom.list",
            "request": {
              "body": {
                "properties": {
                  "app": {
                    "docs": "The list of app names.",
                    "type": "optional<list<string>>",
                  },
                  "cursor": {
                    "docs": "The cursor to resume iteration from, otherwise if not provided,
then iteration starts from the beginning.
",
                    "type": "optional<string>",
                  },
                  "deprecated": {
                    "docs": "Whether only deprecated fragments should be filtered.",
                    "type": "optional<boolean>",
                  },
                  "leaf_type": {
                    "docs": "The list of leaf types.",
                    "type": "optional<list<string>>",
                  },
                  "limit": {
                    "docs": "The maximum number of items.",
                    "type": "optional<integer>",
                  },
                  "prune": {
                    "docs": "List of fields which are not required in the payload and can be
pruned away.
",
                    "type": "optional<list<root.CustomSchemaFragmentsListRequestPrune>>",
                  },
                  "sort_by": {
                    "docs": "The list of fields to sort the items by and how to sort them.
",
                    "type": "optional<list<string>>",
                  },
                  "subtype": {
                    "docs": "The list of subtypes.",
                    "type": "optional<list<string>>",
                  },
                  "types": {
                    "docs": "Filters for custom schema fragment of the provided types.
",
                    "type": "optional<list<root.CustomSchemaFragmentType>>",
                  },
                },
              },
              "headers": undefined,
              "name": "CustomSchemaFragmentsListRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.CustomSchemaFragmentsListResponse",
            },
          },
          "custom-schema-fragments-set": {
            "auth": true,
            "docs": "Creates or updates a custom schema fragment.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "path": "/schemas.custom.set",
            "request": {
              "body": "root.CustomSchemaFragmentsSetRequest",
            },
            "response": {
              "docs": "Success.",
              "type": "root.CustomSchemaFragmentsSetResponse",
            },
          },
          "stock-schema-fragments-get": {
            "auth": true,
            "docs": "Gets a stock schema fragment.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "fragment": {
                      "created_date": "2023-01-01T12:00:00Z",
                      "description": "description",
                      "display_id": "display_id",
                      "fields": [],
                      "id": "id",
                      "leaf_type": "leaf_type",
                      "modified_date": "2023-01-01T12:00:00Z",
                      "title": "title",
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/schemas.stock.get",
            "request": {
              "name": "StockSchemaFragmentsGetQuery",
              "query-parameters": {
                "id": {
                  "docs": "The ID of the stock schema fragment.",
                  "type": "optional<string>",
                },
                "leaf_type": {
                  "docs": "The leaf type this fragment applies to.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.StockSchemaFragmentsGetResponse",
            },
          },
          "stock-schema-fragments-get-post": {
            "auth": true,
            "docs": "Gets a stock schema fragment.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {},
                "response": {
                  "body": {
                    "fragment": {
                      "created_date": "2023-01-01T12:00:00Z",
                      "description": "description",
                      "display_id": "display_id",
                      "fields": [],
                      "id": "id",
                      "leaf_type": "leaf_type",
                      "modified_date": "2023-01-01T12:00:00Z",
                      "title": "title",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/schemas.stock.get",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The ID of the stock schema fragment.",
                    "type": "optional<string>",
                  },
                  "leaf_type": {
                    "docs": "The leaf type this fragment applies to.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "StockSchemaFragmentsGetRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.StockSchemaFragmentsGetResponse",
            },
          },
          "stock-schema-fragments-list": {
            "auth": true,
            "docs": "Lists stock schema fragments.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "cursor": "cursor",
                    "result": [
                      {
                        "created_date": "2023-01-01T12:00:00Z",
                        "description": "description",
                        "display_id": "display_id",
                        "fields": [],
                        "id": "id",
                        "leaf_type": "leaf_type",
                        "modified_date": "2023-01-01T12:00:00Z",
                        "title": "title",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/schemas.stock.list",
            "request": {
              "name": "StockSchemaFragmentsListQuery",
              "query-parameters": {
                "cursor": {
                  "docs": "The cursor to resume iteration from, otherwise if not provided, then
iteration starts from the beginning.
",
                  "type": "optional<string>",
                },
                "filter_preset": {
                  "docs": "Filter preset to specify whether to filter only customization enabled
leaf types.
",
                  "type": "optional<root.StockSchemaFragmentsListRequestFilterPreset>",
                },
                "leaf_type": {
                  "allow-multiple": true,
                  "docs": "The list of leaf types.",
                  "type": "optional<string>",
                },
                "limit": {
                  "docs": "The maximum number of items.",
                  "type": "optional<integer>",
                },
                "prune": {
                  "allow-multiple": true,
                  "docs": "List of fields which are not required in the payload and can be
pruned away.
",
                  "type": "optional<root.StockSchemaFragmentsListRequestPrune>",
                },
                "sort_by": {
                  "allow-multiple": true,
                  "docs": "The list of fields to sort the items by and how to sort them.
",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.StockSchemaFragmentsListResponse",
            },
          },
          "stock-schema-fragments-list-post": {
            "auth": true,
            "docs": "Lists stock schema fragments.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {},
                "response": {
                  "body": {
                    "cursor": "cursor",
                    "result": [
                      {
                        "created_date": "2023-01-01T12:00:00Z",
                        "description": "description",
                        "display_id": "display_id",
                        "fields": [],
                        "id": "id",
                        "leaf_type": "leaf_type",
                        "modified_date": "2023-01-01T12:00:00Z",
                        "title": "title",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/schemas.stock.list",
            "request": {
              "body": {
                "properties": {
                  "cursor": {
                    "docs": "The cursor to resume iteration from, otherwise if not provided,
then iteration starts from the beginning.
",
                    "type": "optional<string>",
                  },
                  "filter_preset": "optional<root.StockSchemaFragmentsListRequestFilterPreset>",
                  "leaf_type": {
                    "docs": "The list of leaf types.",
                    "type": "optional<list<string>>",
                  },
                  "limit": {
                    "docs": "The maximum number of items.",
                    "type": "optional<integer>",
                  },
                  "prune": {
                    "docs": "List of fields which are not required in the payload and can be
pruned away.
",
                    "type": "optional<list<root.StockSchemaFragmentsListRequestPrune>>",
                  },
                  "sort_by": {
                    "docs": "The list of fields to sort the items by and how to sort them.
",
                    "type": "optional<list<string>>",
                  },
                },
              },
              "headers": undefined,
              "name": "StockSchemaFragmentsListRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.StockSchemaFragmentsListResponse",
            },
          },
          "subtypes-list": {
            "auth": true,
            "docs": "Lists subtypes.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "subtypes": [
                      {
                        "display_name": "display_name",
                        "fragment_id": "fragment_id",
                        "leaf_type": "leaf_type",
                        "value": "value",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/schemas.subtypes.list",
            "request": {
              "name": "SubtypesListQuery",
              "query-parameters": {
                "leaf_type": {
                  "docs": "Leaf type for which subtypes are required.",
                  "type": "optional<string>",
                },
                "leaf_types": {
                  "allow-multiple": true,
                  "docs": "List of leaf types for which subtypes are required.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.SubtypesListResponse",
            },
          },
          "subtypes-list-post": {
            "auth": true,
            "docs": "Lists subtypes.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {},
                "response": {
                  "body": {
                    "subtypes": [
                      {
                        "display_name": "display_name",
                        "fragment_id": "fragment_id",
                        "leaf_type": "leaf_type",
                        "value": "value",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/schemas.subtypes.list",
            "request": {
              "body": {
                "properties": {
                  "leaf_type": {
                    "docs": "Leaf type for which subtypes are required.",
                    "type": "optional<string>",
                  },
                  "leaf_types": {
                    "docs": "List of leaf types for which subtypes are required.",
                    "type": "optional<list<string>>",
                  },
                },
              },
              "headers": undefined,
              "name": "SubtypesListRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.SubtypesListResponse",
            },
          },
        },
      },
    },
    "devUsers.yml": {
      "docs": "Dev user interactions.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "dev-users",
        "endpoints": {
          "get": {
            "auth": true,
            "docs": "Gets the requested user's information.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "query-parameters": {
                  "id": "id",
                },
                "response": {
                  "body": {
                    "dev_user": {
                      "created_date": "2023-01-01T12:00:00Z",
                      "display_id": "display_id",
                      "display_name": "display_name",
                      "display_picture": {
                        "display_id": "display_id",
                        "id": "id",
                      },
                      "email": "email",
                      "external_identities": [
                        {},
                      ],
                      "full_name": "full_name",
                      "id": "id",
                      "modified_date": "2023-01-01T12:00:00Z",
                      "phone_numbers": [
                        "phone_numbers",
                      ],
                      "state": "active",
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/dev-users.get",
            "request": {
              "name": "DevUsersGetQuery",
              "query-parameters": {
                "id": {
                  "docs": "User ID of the requested Dev user.",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.DevUsersGetResponse",
            },
          },
          "getPost": {
            "auth": true,
            "docs": "Gets the requested user's information.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "id",
                },
                "response": {
                  "body": {
                    "dev_user": {
                      "created_date": "2023-01-01T12:00:00Z",
                      "display_id": "display_id",
                      "display_name": "display_name",
                      "display_picture": {
                        "display_id": "display_id",
                        "id": "id",
                      },
                      "email": "email",
                      "external_identities": [
                        {},
                      ],
                      "full_name": "full_name",
                      "id": "id",
                      "modified_date": "2023-01-01T12:00:00Z",
                      "phone_numbers": [
                        "phone_numbers",
                      ],
                      "state": "active",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/dev-users.get",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "User ID of the requested Dev user.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "DevUsersGetRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.DevUsersGetResponse",
            },
          },
          "list": {
            "auth": true,
            "docs": "Lists users within your organization.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "dev_users": [
                      {
                        "created_date": "2023-01-01T12:00:00Z",
                        "display_id": "display_id",
                        "display_name": "display_name",
                        "display_picture": {
                          "id": "id",
                        },
                        "email": "email",
                        "external_identities": [
                          {},
                        ],
                        "full_name": "full_name",
                        "id": "id",
                        "modified_date": "2023-01-01T12:00:00Z",
                        "phone_numbers": [
                          "phone_numbers",
                        ],
                        "state": "active",
                      },
                    ],
                    "next_cursor": "next_cursor",
                    "prev_cursor": "prev_cursor",
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/dev-users.list",
            "request": {
              "name": "DevUsersListQuery",
              "query-parameters": {
                "cursor": {
                  "docs": "The cursor to resume iteration from. If not provided, then iteration
starts from the beginning.
",
                  "type": "optional<string>",
                },
                "email": {
                  "allow-multiple": true,
                  "docs": "Filters Dev users based on email addresses.",
                  "type": "optional<string>",
                },
                "external_identity.id": {
                  "docs": "Unique ID of the user in the external source.",
                  "type": "optional<string>",
                },
                "external_identity.issuer": {
                  "docs": "Issuer of the external identity of the user.",
                  "type": "optional<string>",
                },
                "limit": {
                  "docs": "The maximum number of Dev users to return. The default is '50'.
",
                  "type": "optional<integer>",
                },
                "mode": {
                  "docs": "The iteration mode to use, otherwise if not set, then "after" is
used.
",
                  "type": "optional<root.ListMode>",
                },
                "sort_by": {
                  "allow-multiple": true,
                  "docs": "Fields to sort the Dev users by and the direction to sort them.
",
                  "type": "optional<string>",
                },
                "state": {
                  "allow-multiple": true,
                  "docs": "Filters Dev users based on state.",
                  "type": "optional<root.UserState>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.DevUsersListResponse",
            },
          },
          "listPost": {
            "auth": true,
            "docs": "Lists users within your organization.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {},
                "response": {
                  "body": {
                    "dev_users": [
                      {
                        "created_date": "2023-01-01T12:00:00Z",
                        "display_id": "display_id",
                        "display_name": "display_name",
                        "display_picture": {
                          "id": "id",
                        },
                        "email": "email",
                        "external_identities": [
                          {},
                        ],
                        "full_name": "full_name",
                        "id": "id",
                        "modified_date": "2023-01-01T12:00:00Z",
                        "phone_numbers": [
                          "phone_numbers",
                        ],
                        "state": "active",
                      },
                    ],
                    "next_cursor": "next_cursor",
                    "prev_cursor": "prev_cursor",
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/dev-users.list",
            "request": {
              "body": {
                "properties": {
                  "cursor": {
                    "docs": "The cursor to resume iteration from. If not provided, then
iteration starts from the beginning.
",
                    "type": "optional<string>",
                  },
                  "email": {
                    "docs": "Filters Dev users based on email addresses.",
                    "type": "optional<list<string>>",
                  },
                  "external_identity": {
                    "docs": "Filters Dev users based on external identity.",
                    "type": "optional<list<root.DevUserExternalIdentityFilter>>",
                  },
                  "limit": {
                    "docs": "The maximum number of Dev users to return. The default is '50'.
",
                    "type": "optional<integer>",
                  },
                  "mode": "optional<root.ListMode>",
                  "sort_by": {
                    "docs": "Fields to sort the Dev users by and the direction to sort them.
",
                    "type": "optional<list<string>>",
                  },
                  "state": {
                    "docs": "Filters Dev users based on state.",
                    "type": "optional<list<root.UserState>>",
                  },
                },
              },
              "headers": undefined,
              "name": "DevUsersListRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.DevUsersListResponse",
            },
          },
          "self": {
            "auth": true,
            "docs": "Gets the authenticated user's information.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "dev_user": {
                      "created_date": "2023-01-01T12:00:00Z",
                      "display_id": "display_id",
                      "display_name": "display_name",
                      "display_picture": {
                        "display_id": "display_id",
                        "id": "id",
                      },
                      "email": "email",
                      "external_identities": [
                        {},
                      ],
                      "full_name": "full_name",
                      "id": "id",
                      "modified_date": "2023-01-01T12:00:00Z",
                      "phone_numbers": [
                        "phone_numbers",
                      ],
                      "state": "active",
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/dev-users.self",
            "response": {
              "docs": "Success.",
              "type": "root.DevUsersSelfResponse",
            },
          },
          "selfPost": {
            "auth": true,
            "docs": "Gets the authenticated user's information.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {},
                "response": {
                  "body": {
                    "dev_user": {
                      "created_date": "2023-01-01T12:00:00Z",
                      "display_id": "display_id",
                      "display_name": "display_name",
                      "display_picture": {
                        "display_id": "display_id",
                        "id": "id",
                      },
                      "email": "email",
                      "external_identities": [
                        {},
                      ],
                      "full_name": "full_name",
                      "id": "id",
                      "modified_date": "2023-01-01T12:00:00Z",
                      "phone_numbers": [
                        "phone_numbers",
                      ],
                      "state": "active",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/dev-users.self",
            "request": {
              "body": "root.DevUsersSelfRequest",
            },
            "response": {
              "docs": "Success.",
              "type": "root.DevUsersSelfResponse",
            },
          },
        },
      },
    },
    "engagements.yml": {
      "docs": "DevRev engagements.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "engagements",
        "endpoints": {
          "count": {
            "auth": true,
            "docs": "Counts the engagement records.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "count": 1,
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/engagements.count",
            "request": {
              "name": "EngagementsCountQuery",
              "query-parameters": {
                "external_ref": {
                  "allow-multiple": true,
                  "docs": "Filters for meetings with the provided external_refs.",
                  "type": "optional<string>",
                },
                "members": {
                  "allow-multiple": true,
                  "docs": "Filters for engagement of the provided members.",
                  "type": "optional<string>",
                },
                "parent": {
                  "allow-multiple": true,
                  "docs": "Filters for engagements with the provided parent.",
                  "type": "optional<string>",
                },
                "type": {
                  "allow-multiple": true,
                  "docs": "Filters for engagement of the provided types.",
                  "type": "optional<root.EngagementType>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.EngagementsCountResponse",
            },
          },
          "countPost": {
            "auth": true,
            "docs": "Counts the engagement records.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {},
                "response": {
                  "body": {
                    "count": 1,
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/engagements.count",
            "request": {
              "body": {
                "properties": {
                  "external_ref": {
                    "docs": "Filters for meetings with the provided external_refs.",
                    "type": "optional<list<string>>",
                  },
                  "members": {
                    "docs": "Filters for engagement of the provided members.",
                    "type": "optional<list<string>>",
                  },
                  "parent": {
                    "docs": "Filters for engagements with the provided parent.",
                    "type": "optional<list<string>>",
                  },
                  "type": {
                    "docs": "Filters for engagement of the provided types.",
                    "type": "optional<list<root.EngagementType>>",
                  },
                },
              },
              "headers": undefined,
              "name": "EngagementsCountRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.EngagementsCountResponse",
            },
          },
          "create": {
            "auth": true,
            "docs": "Creates a new engagement record.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "members": [
                    "members",
                  ],
                  "parent": "ACC-12345",
                  "scheduled_date": "2023-01-01T12:00:00Z",
                  "tags": [
                    {
                      "id": "TAG-12345",
                    },
                  ],
                  "title": "title",
                },
                "response": {
                  "body": {
                    "engagement": {
                      "created_date": "2023-01-01T12:00:00Z",
                      "description": "description",
                      "display_id": "display_id",
                      "id": "id",
                      "modified_date": "2023-01-01T12:00:00Z",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/engagements.create",
            "request": {
              "body": {
                "properties": {
                  "artifacts": {
                    "docs": "The IDs of the artifacts to associate with the engagement.
",
                    "type": "optional<list<string>>",
                  },
                  "description": {
                    "docs": "The description of the engagement.",
                    "type": "optional<string>",
                  },
                  "engagement_type": "optional<root.EngagementsCreateRequestEngagementType>",
                  "external_ref": {
                    "docs": "External Reference for the engagement.",
                    "type": "optional<string>",
                  },
                  "external_url": {
                    "docs": "External URL for the engagement.",
                    "type": "optional<string>",
                  },
                  "members": {
                    "docs": "IDs of the users that were part of the engagement.",
                    "type": "list<string>",
                  },
                  "parent": {
                    "docs": "The parent object ID in which the engagement was created.
Currently, only accounts and opportunities are supported.
",
                    "type": "string",
                  },
                  "scheduled_date": {
                    "docs": "The date and time when the engagement was scheduled.",
                    "type": "datetime",
                  },
                  "tags": {
                    "docs": "Tags associated with the engagement.",
                    "type": "optional<list<root.SetTagWithValue>>",
                  },
                  "title": {
                    "docs": "The title of the engagement.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "EngagementsCreateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.EngagementsCreateResponse",
            },
          },
          "delete": {
            "auth": true,
            "docs": "Deletes the engagement record.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "id",
                },
                "response": {
                  "body": {
                    "string": {
                      "key": "value",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/engagements.delete",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The engagement ID.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "EngagementsDeleteRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.EngagementsDeleteResponse",
            },
          },
          "get": {
            "auth": true,
            "docs": "Gets the engagement record.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "query-parameters": {
                  "id": "id",
                },
                "response": {
                  "body": {
                    "engagement": {
                      "created_date": "2023-01-01T12:00:00Z",
                      "description": "description",
                      "display_id": "display_id",
                      "id": "id",
                      "modified_date": "2023-01-01T12:00:00Z",
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/engagements.get",
            "request": {
              "name": "EngagementsGetQuery",
              "query-parameters": {
                "id": {
                  "docs": "The engagement ID.",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.EngagementsGetResponse",
            },
          },
          "getPost": {
            "auth": true,
            "docs": "Gets the engagement record.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "id",
                },
                "response": {
                  "body": {
                    "engagement": {
                      "created_date": "2023-01-01T12:00:00Z",
                      "description": "description",
                      "display_id": "display_id",
                      "id": "id",
                      "modified_date": "2023-01-01T12:00:00Z",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/engagements.get",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The engagement ID.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "EngagementsGetRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.EngagementsGetResponse",
            },
          },
          "list": {
            "auth": true,
            "docs": "Lists the engagement records.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "engagements": [
                      {
                        "created_date": "2023-01-01T12:00:00Z",
                        "description": "description",
                        "display_id": "display_id",
                        "id": "id",
                        "modified_date": "2023-01-01T12:00:00Z",
                      },
                    ],
                    "next_cursor": "next_cursor",
                    "prev_cursor": "prev_cursor",
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/engagements.list",
            "request": {
              "name": "EngagementsListQuery",
              "query-parameters": {
                "cursor": {
                  "docs": "The cursor to resume iteration from. If not provided, then iteration
starts from the beginning.
",
                  "type": "optional<string>",
                },
                "external_ref": {
                  "allow-multiple": true,
                  "docs": "Filters for meetings with the provided external_refs.",
                  "type": "optional<string>",
                },
                "limit": {
                  "docs": "The maximum number of engagements to return.",
                  "type": "optional<integer>",
                },
                "members": {
                  "allow-multiple": true,
                  "docs": "Filters for engagement of the provided members.",
                  "type": "optional<string>",
                },
                "mode": {
                  "docs": "The iteration mode to use, otherwise if not set, then "after" is
used.
",
                  "type": "optional<root.ListMode>",
                },
                "parent": {
                  "allow-multiple": true,
                  "docs": "Filters for engagements with the provided parent.",
                  "type": "optional<string>",
                },
                "sort_by": {
                  "allow-multiple": true,
                  "docs": "Fields to sort the engagements by and the direction to sort them.
",
                  "type": "optional<string>",
                },
                "type": {
                  "allow-multiple": true,
                  "docs": "Filters for engagement of the provided types.",
                  "type": "optional<root.EngagementType>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.EngagementsListResponse",
            },
          },
          "listPost": {
            "auth": true,
            "docs": "Lists the engagement records.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {},
                "response": {
                  "body": {
                    "engagements": [
                      {
                        "created_date": "2023-01-01T12:00:00Z",
                        "description": "description",
                        "display_id": "display_id",
                        "id": "id",
                        "modified_date": "2023-01-01T12:00:00Z",
                      },
                    ],
                    "next_cursor": "next_cursor",
                    "prev_cursor": "prev_cursor",
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/engagements.list",
            "request": {
              "body": {
                "properties": {
                  "cursor": {
                    "docs": "The cursor to resume iteration from. If not provided, then
iteration starts from the beginning.
",
                    "type": "optional<string>",
                  },
                  "external_ref": {
                    "docs": "Filters for meetings with the provided external_refs.",
                    "type": "optional<list<string>>",
                  },
                  "limit": {
                    "docs": "The maximum number of engagements to return.",
                    "type": "optional<integer>",
                  },
                  "members": {
                    "docs": "Filters for engagement of the provided members.",
                    "type": "optional<list<string>>",
                  },
                  "mode": "optional<root.ListMode>",
                  "parent": {
                    "docs": "Filters for engagements with the provided parent.",
                    "type": "optional<list<string>>",
                  },
                  "sort_by": {
                    "docs": "Fields to sort the engagements by and the direction to sort them.
",
                    "type": "optional<list<string>>",
                  },
                  "type": {
                    "docs": "Filters for engagement of the provided types.",
                    "type": "optional<list<root.EngagementType>>",
                  },
                },
              },
              "headers": undefined,
              "name": "EngagementsListRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.EngagementsListResponse",
            },
          },
          "update": {
            "auth": true,
            "docs": "Updates the engagement record.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "id",
                },
                "response": {
                  "body": {
                    "engagement": {
                      "created_date": "2023-01-01T12:00:00Z",
                      "description": "description",
                      "display_id": "display_id",
                      "id": "id",
                      "modified_date": "2023-01-01T12:00:00Z",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/engagements.update",
            "request": {
              "body": {
                "properties": {
                  "artifacts": "optional<root.EngagementsUpdateRequestArtifactIds>",
                  "description": {
                    "docs": "Updates the description of the engagement.",
                    "type": "optional<string>",
                  },
                  "external_ref": {
                    "docs": "External Reference for the engagement.",
                    "type": "optional<string>",
                  },
                  "external_url": {
                    "docs": "Updates the external URL for the engagement.",
                    "type": "optional<string>",
                  },
                  "id": {
                    "docs": "The engagement ID.",
                    "type": "string",
                  },
                  "members": "optional<root.EngagementsUpdateRequestMembers>",
                  "scheduled_date": {
                    "docs": "Updates the date and time when the engagement was scheduled.
",
                    "type": "optional<datetime>",
                  },
                  "tags": "optional<root.EngagementsUpdateRequestTags>",
                  "title": {
                    "docs": "Updates the title of the engagement.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "EngagementsUpdateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.EngagementsUpdateResponse",
            },
          },
        },
      },
    },
    "eventSource.yml": {
      "docs": "Event source interactions.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "event-source",
        "endpoints": {
          "event-sources-delete-scheduled-event": {
            "auth": true,
            "docs": "Deletes an event scheduled for the specified event source.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "event_key": "event_key",
                  "id": "id",
                },
              },
            ],
            "method": "POST",
            "path": "/event-sources.unschedule",
            "request": {
              "body": {
                "properties": {
                  "event_key": {
                    "docs": "The event key for the event which we want to delete.",
                    "type": "string",
                  },
                  "id": {
                    "docs": "The event source's ID.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "EventSourcesDeleteScheduledEventRequest",
              "query-parameters": undefined,
            },
          },
          "event-sources-get": {
            "auth": true,
            "docs": "Gets an event source.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "query-parameters": {
                  "id": "id",
                },
                "response": {
                  "body": {
                    "event_source": {
                      "config": {
                        "config": {
                          "key": "value",
                        },
                      },
                      "created_date": "2023-01-01T12:00:00Z",
                      "display_id": "display_id",
                      "id": "id",
                      "modified_date": "2023-01-01T12:00:00Z",
                      "name": "name",
                      "setup_instructions": {
                        "content": "content",
                      },
                      "status": "active",
                      "trigger_url": "trigger_url",
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/event-sources.get",
            "request": {
              "name": "EventSourcesGetQuery",
              "query-parameters": {
                "id": {
                  "docs": "The event source's ID.",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.EventSourceGetResponse",
            },
          },
          "event-sources-get-post": {
            "auth": true,
            "docs": "Gets an event source.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "id",
                },
                "response": {
                  "body": {
                    "event_source": {
                      "config": {
                        "config": {
                          "key": "value",
                        },
                      },
                      "created_date": "2023-01-01T12:00:00Z",
                      "display_id": "display_id",
                      "id": "id",
                      "modified_date": "2023-01-01T12:00:00Z",
                      "name": "name",
                      "setup_instructions": {
                        "content": "content",
                      },
                      "status": "active",
                      "trigger_url": "trigger_url",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/event-sources.get",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The event source's ID.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "EventSourceGetRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.EventSourceGetResponse",
            },
          },
          "event-sources-schedule-event": {
            "auth": true,
            "docs": "Schedules an event to be published to the specified event source.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "event_type": "event_type",
                  "id": "id",
                  "payload": "payload",
                  "publish_at": "2023-01-01T12:00:00Z",
                },
                "response": {
                  "body": {
                    "event_key": "event_key",
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/event-sources.schedule",
            "request": {
              "body": {
                "properties": {
                  "event_key": {
                    "docs": "A unique key for this event (scoped to an event source) used for
updating/getting/deleting scheduled events.
",
                    "type": "optional<string>",
                  },
                  "event_type": {
                    "docs": "The type of the event.",
                    "type": "string",
                  },
                  "id": {
                    "docs": "The event source's ID.",
                    "type": "string",
                  },
                  "payload": {
                    "docs": "The raw payload of the event.",
                    "type": "string",
                  },
                  "publish_at": {
                    "docs": "The timestamp at which the event should be published. The event is
guaranteed to be published after this. If omitted, the event is
published immediately.
",
                    "type": "optional<datetime>",
                  },
                  "update_if_exists": {
                    "docs": "Whether or not to update an existing scheduled event with the same
event key. If this is false, and an event is already scheduled with
the same event key, then HTTP 409 Conflict is returned.
",
                    "type": "optional<boolean>",
                  },
                },
              },
              "headers": undefined,
              "name": "EventSourcesScheduleEventRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.EventSourcesScheduleEventResponse",
            },
          },
          "track-events-publish": {
            "auth": true,
            "docs": "Allows publishing of events (example from plug widget).",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "events_list": [
                    {
                      "event_time": "2023-01-01T12:00:00Z",
                      "name": "name",
                      "payload": {},
                    },
                  ],
                },
                "response": {
                  "body": {
                    "string": {
                      "key": "value",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/track-events.publish",
            "request": {
              "body": {
                "properties": {
                  "events_list": "list<root.TrackEvent>",
                },
              },
              "headers": undefined,
              "name": "TrackEventsPublishRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.TrackEventsPublishResponse",
            },
          },
        },
      },
    },
    "groups.yml": {
      "docs": "Manages groups in a Dev organization.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "groups",
        "endpoints": {
          "create": {
            "auth": true,
            "docs": "Creates a new group. A group is a collection of users.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "description": "description",
                  "name": "name",
                },
                "response": {
                  "body": {
                    "group": {
                      "created_date": "2023-01-01T12:00:00Z",
                      "description": "description",
                      "display_id": "display_id",
                      "id": "id",
                      "is_default": true,
                      "member_type": "dev_user",
                      "modified_date": "2023-01-01T12:00:00Z",
                      "name": "name",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/groups.create",
            "request": {
              "body": {
                "properties": {
                  "description": {
                    "docs": "Description of the group.",
                    "type": "string",
                  },
                  "dynamic_group_info": "optional<root.DynamicGroupInfo>",
                  "member_type": "optional<root.GroupMemberType>",
                  "name": {
                    "docs": "Unique name of the group.",
                    "type": "string",
                  },
                  "owner": {
                    "docs": "Owner of the group.",
                    "type": "optional<string>",
                  },
                  "type": "optional<root.GroupType>",
                },
              },
              "headers": undefined,
              "name": "GroupsCreateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.GroupsCreateResponse",
            },
          },
          "get": {
            "auth": true,
            "docs": "Gets the requested group.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "query-parameters": {
                  "id": "id",
                },
                "response": {
                  "body": {
                    "group": {
                      "created_date": "2023-01-01T12:00:00Z",
                      "description": "description",
                      "display_id": "display_id",
                      "id": "id",
                      "is_default": true,
                      "member_type": "dev_user",
                      "modified_date": "2023-01-01T12:00:00Z",
                      "name": "name",
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/groups.get",
            "request": {
              "name": "GroupsGetQuery",
              "query-parameters": {
                "id": {
                  "docs": "The ID of the group to get.",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.GroupsGetResponse",
            },
          },
          "getPost": {
            "auth": true,
            "docs": "Gets the requested group.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "id",
                },
                "response": {
                  "body": {
                    "group": {
                      "created_date": "2023-01-01T12:00:00Z",
                      "description": "description",
                      "display_id": "display_id",
                      "id": "id",
                      "is_default": true,
                      "member_type": "dev_user",
                      "modified_date": "2023-01-01T12:00:00Z",
                      "name": "name",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/groups.get",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The ID of the group to get.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "GroupsGetRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.GroupsGetResponse",
            },
          },
          "group-members-add": {
            "auth": true,
            "docs": "Adds a member to a group.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "group": "group",
                  "member": "DEVU-12345",
                },
                "response": {
                  "body": {
                    "string": {
                      "key": "value",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/groups.members.add",
            "request": {
              "body": {
                "properties": {
                  "group": {
                    "docs": "ID of the group where the member is being added.",
                    "type": "string",
                  },
                  "member": {
                    "docs": "ID of the member to be added.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "GroupMembersAddRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.GroupMembersAddResponse",
            },
          },
          "group-members-list": {
            "auth": true,
            "docs": "Lists the members in a group.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "query-parameters": {
                  "group": "group",
                },
                "response": {
                  "body": {
                    "members": [],
                    "next_cursor": "next_cursor",
                    "prev_cursor": "prev_cursor",
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/groups.members.list",
            "request": {
              "name": "GroupMembersListQuery",
              "query-parameters": {
                "cursor": {
                  "docs": "The cursor to resume iteration from. If not provided, then iteration
starts from the beginning.
",
                  "type": "optional<string>",
                },
                "group": {
                  "docs": "ID of the group for which to list members.",
                  "type": "string",
                },
                "limit": {
                  "docs": "The maximum number of members to return. If not set, then the default
is '50'.
",
                  "type": "optional<integer>",
                },
                "mode": {
                  "docs": "The iteration mode to use, otherwise if not set, then "after" is
used.
",
                  "type": "optional<root.ListMode>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.GroupMembersListResponse",
            },
          },
          "group-members-list-post": {
            "auth": true,
            "docs": "Lists the members in a group.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "group": "group",
                },
                "response": {
                  "body": {
                    "members": [],
                    "next_cursor": "next_cursor",
                    "prev_cursor": "prev_cursor",
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/groups.members.list",
            "request": {
              "body": {
                "properties": {
                  "cursor": {
                    "docs": "The cursor to resume iteration from. If not provided, then
iteration starts from the beginning.
",
                    "type": "optional<string>",
                  },
                  "group": {
                    "docs": "ID of the group for which to list members.",
                    "type": "string",
                  },
                  "limit": {
                    "docs": "The maximum number of members to return. If not set, then the
default is '50'.
",
                    "type": "optional<integer>",
                  },
                  "mode": "optional<root.ListMode>",
                },
              },
              "headers": undefined,
              "name": "GroupMembersListRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.GroupMembersListResponse",
            },
          },
          "group-members-remove": {
            "auth": true,
            "docs": "Removes a member from a group.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "group": "group",
                  "member": "DEVU-12345",
                },
                "response": {
                  "body": {
                    "string": {
                      "key": "value",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/groups.members.remove",
            "request": {
              "body": {
                "properties": {
                  "group": {
                    "docs": "ID of the group where the member is being removed.",
                    "type": "string",
                  },
                  "member": {
                    "docs": "ID of the member to be removed.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "GroupMembersRemoveRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.GroupMembersRemoveResponse",
            },
          },
          "list": {
            "auth": true,
            "docs": "Lists the available groups.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "groups": [
                      {
                        "created_date": "2023-01-01T12:00:00Z",
                        "description": "description",
                        "display_id": "display_id",
                        "id": "id",
                        "is_default": true,
                        "member_type": "dev_user",
                        "modified_date": "2023-01-01T12:00:00Z",
                        "name": "name",
                      },
                    ],
                    "next_cursor": "next_cursor",
                    "prev_cursor": "prev_cursor",
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/groups.list",
            "request": {
              "name": "GroupsListQuery",
              "query-parameters": {
                "cursor": {
                  "docs": "The cursor to resume iteration from. If not provided, then iteration
starts from the beginning.
",
                  "type": "optional<string>",
                },
                "group_type": {
                  "allow-multiple": true,
                  "docs": "Filters the groups based on the group type.",
                  "type": "optional<root.GroupType>",
                },
                "limit": {
                  "docs": "The maximum number of groups to return. The default is '50'.
",
                  "type": "optional<integer>",
                },
                "member_type": {
                  "allow-multiple": true,
                  "docs": "Filters the groups on basis of member type.",
                  "type": "optional<root.GroupMemberType>",
                },
                "mode": {
                  "docs": "The iteration mode to use, otherwise if not set, then "after" is
used.
",
                  "type": "optional<root.ListMode>",
                },
                "sort_by": {
                  "allow-multiple": true,
                  "docs": "Comma-separated fields to sort the groups by.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.GroupsListResponse",
            },
          },
          "listPost": {
            "auth": true,
            "docs": "Lists the available groups.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {},
                "response": {
                  "body": {
                    "groups": [
                      {
                        "created_date": "2023-01-01T12:00:00Z",
                        "description": "description",
                        "display_id": "display_id",
                        "id": "id",
                        "is_default": true,
                        "member_type": "dev_user",
                        "modified_date": "2023-01-01T12:00:00Z",
                        "name": "name",
                      },
                    ],
                    "next_cursor": "next_cursor",
                    "prev_cursor": "prev_cursor",
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/groups.list",
            "request": {
              "body": {
                "properties": {
                  "cursor": {
                    "docs": "The cursor to resume iteration from. If not provided, then
iteration starts from the beginning.
",
                    "type": "optional<string>",
                  },
                  "group_type": {
                    "docs": "Filters the groups based on the group type.",
                    "type": "optional<list<root.GroupType>>",
                  },
                  "limit": {
                    "docs": "The maximum number of groups to return. The default is '50'.
",
                    "type": "optional<integer>",
                  },
                  "member_type": {
                    "docs": "Filters the groups on basis of member type.",
                    "type": "optional<list<root.GroupMemberType>>",
                  },
                  "mode": "optional<root.ListMode>",
                  "sort_by": {
                    "docs": "Comma-separated fields to sort the groups by.",
                    "type": "optional<list<string>>",
                  },
                },
              },
              "headers": undefined,
              "name": "GroupsListRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.GroupsListResponse",
            },
          },
          "update": {
            "auth": true,
            "docs": "Updates the requested group.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "id",
                },
                "response": {
                  "body": {
                    "group": {
                      "created_date": "2023-01-01T12:00:00Z",
                      "description": "description",
                      "display_id": "display_id",
                      "id": "id",
                      "is_default": true,
                      "member_type": "dev_user",
                      "modified_date": "2023-01-01T12:00:00Z",
                      "name": "name",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/groups.update",
            "request": {
              "body": {
                "properties": {
                  "description": {
                    "docs": "The updated group's description.",
                    "type": "optional<string>",
                  },
                  "id": {
                    "docs": "The ID of the group to update.",
                    "type": "string",
                  },
                  "name": {
                    "docs": "The updated group's name.",
                    "type": "optional<string>",
                  },
                  "owner": {
                    "docs": "The updated group's owner.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "GroupsUpdateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.GroupsUpdateResponse",
            },
          },
        },
      },
    },
    "links.yml": {
      "docs": "DevRev link interactions.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "links",
        "endpoints": {
          "create": {
            "auth": true,
            "docs": "Creates a link between two objects to indicate a relationship.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "path": "/links.create",
            "request": {
              "body": {
                "properties": {
                  "link_type": "root.LinkType",
                  "source": {
                    "docs": "The ID of the source object.",
                    "type": "string",
                  },
                  "target": {
                    "docs": "The ID of the target object.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "LinksCreateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.LinksCreateResponse",
            },
          },
          "delete": {
            "auth": true,
            "docs": "Deletes a link.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "id",
                },
                "response": {
                  "body": {
                    "string": {
                      "key": "value",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/links.delete",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The ID of the link to delete.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "LinksDeleteRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.LinksDeleteResponse",
            },
          },
          "get": {
            "auth": true,
            "docs": "Gets the requested link's information.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "GET",
            "path": "/links.get",
            "request": {
              "name": "LinksGetQuery",
              "query-parameters": {
                "id": {
                  "docs": "The requested link's ID.",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.LinksGetResponse",
            },
          },
          "getPost": {
            "auth": true,
            "docs": "Gets the requested link's information.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "path": "/links.get",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The requested link's ID.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "LinksGetRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.LinksGetResponse",
            },
          },
          "list": {
            "auth": true,
            "docs": "Lists the available links.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "query-parameters": {
                  "object": "object",
                },
                "response": {
                  "body": {
                    "links": [],
                    "next_cursor": "next_cursor",
                    "prev_cursor": "prev_cursor",
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/links.list",
            "request": {
              "name": "LinksListQuery",
              "query-parameters": {
                "cursor": {
                  "docs": "The cursor to resume iteration from. If not provided, then iteration
starts from the beginning.
",
                  "type": "optional<string>",
                },
                "direction": {
                  "docs": "The direction of the links to list, otherwise if not present, then
links in both directions (source and target) are included.
",
                  "type": "optional<root.LinksDirection>",
                },
                "limit": {
                  "docs": "The maximum number of links to return. If not set, then the default
is '50'.
",
                  "type": "optional<integer>",
                },
                "link_type": {
                  "allow-multiple": true,
                  "docs": "The link type(s) to filter for, otherwise if not present, all link
types are included.
",
                  "type": "optional<root.LinkType>",
                },
                "mode": {
                  "docs": "The iteration mode to use, otherwise if not set, then "after" is
used.
",
                  "type": "optional<root.ListMode>",
                },
                "object": {
                  "docs": "The ID of the object to list the links for.",
                  "type": "string",
                },
                "types": {
                  "allow-multiple": true,
                  "docs": "The link types to filter for, otherwise if not present, all link
types are included.
",
                  "type": "optional<root.LinkType>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.LinksListResponse",
            },
          },
          "listPost": {
            "auth": true,
            "docs": "Lists the available links.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "object": "object",
                },
                "response": {
                  "body": {
                    "links": [],
                    "next_cursor": "next_cursor",
                    "prev_cursor": "prev_cursor",
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/links.list",
            "request": {
              "body": {
                "properties": {
                  "cursor": {
                    "docs": "The cursor to resume iteration from. If not provided, then
iteration starts from the beginning.
",
                    "type": "optional<string>",
                  },
                  "direction": "optional<root.LinksDirection>",
                  "limit": {
                    "docs": "The maximum number of links to return. If not set, then the default
is '50'.
",
                    "type": "optional<integer>",
                  },
                  "link_type": {
                    "docs": "The link type(s) to filter for, otherwise if not present, all link
types are included.
",
                    "type": "optional<list<root.LinkType>>",
                  },
                  "mode": "optional<root.ListMode>",
                  "object": {
                    "docs": "The ID of the object to list the links for.",
                    "type": "string",
                  },
                  "types": {
                    "docs": "The link types to filter for, otherwise if not present, all link
types are included.
",
                    "type": "optional<list<root.LinkType>>",
                  },
                },
              },
              "headers": undefined,
              "name": "LinksListRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.LinksListResponse",
            },
          },
        },
      },
    },
    "parts.yml": {
      "docs": "DevRev part interactions.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "parts",
        "endpoints": {
          "create": {
            "auth": true,
            "docs": "Creates new [part](https://devrev.ai/docs/product/parts).",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "path": "/parts.create",
            "request": {
              "body": "root.PartsCreateRequest",
            },
            "response": {
              "docs": "Success.",
              "type": "root.PartsCreateResponse",
            },
          },
          "delete": {
            "auth": true,
            "docs": "Deletes a [part](https://devrev.ai/docs/product/parts).",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "PROD-12345",
                },
                "response": {
                  "body": {
                    "string": {
                      "key": "value",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/parts.delete",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The ID of the part to delete.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "PartsDeleteRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.PartsDeleteResponse",
            },
          },
          "get": {
            "auth": true,
            "docs": "Gets a [part's](https://devrev.ai/docs/product/parts) information.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "GET",
            "path": "/parts.get",
            "request": {
              "name": "PartsGetQuery",
              "query-parameters": {
                "id": {
                  "docs": "The ID of the part to retrieve.",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.PartsGetResponse",
            },
          },
          "getPost": {
            "auth": true,
            "docs": "Gets a [part's](https://devrev.ai/docs/product/parts) information.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "path": "/parts.get",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The ID of the part to retrieve.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "PartsGetRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.PartsGetResponse",
            },
          },
          "list": {
            "auth": true,
            "docs": "Lists a collection of [parts](https://devrev.ai/docs/product/parts).
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "next_cursor": "next_cursor",
                    "parts": [],
                    "prev_cursor": "prev_cursor",
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/parts.list",
            "request": {
              "name": "PartsListQuery",
              "query-parameters": {
                "created_by": {
                  "allow-multiple": true,
                  "docs": "Filters for parts created by any of these users.",
                  "type": "optional<string>",
                },
                "cursor": {
                  "docs": "The cursor to resume iteration from. If not provided, then iteration
starts from the beginning.
",
                  "type": "optional<string>",
                },
                "limit": {
                  "docs": "The maximum number of parts to return. The default is '50'.
",
                  "type": "optional<integer>",
                },
                "mode": {
                  "docs": "The iteration mode to use, otherwise if not set, then "after" is
used.
",
                  "type": "optional<root.ListMode>",
                },
                "name": {
                  "allow-multiple": true,
                  "docs": "Filters for parts of the provided name(s).",
                  "type": "optional<string>",
                },
                "owned_by": {
                  "allow-multiple": true,
                  "docs": "Filters for parts owned by any of these users.",
                  "type": "optional<string>",
                },
                "parent_part.level": {
                  "docs": "Number of levels to fetch the part hierarchy up to.",
                  "type": "optional<integer>",
                },
                "parent_part.parts": {
                  "allow-multiple": true,
                  "docs": "Part IDs to fetch the hierarchy for. Required if any parent_part.*
fields are provided.
",
                  "type": "optional<string>",
                },
                "type": {
                  "allow-multiple": true,
                  "docs": "Filters for parts of the provided type(s).",
                  "type": "optional<root.PartType>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.PartsListResponse",
            },
          },
          "listPost": {
            "auth": true,
            "docs": "Lists a collection of [parts](https://devrev.ai/docs/product/parts).
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {},
                "response": {
                  "body": {
                    "next_cursor": "next_cursor",
                    "parts": [],
                    "prev_cursor": "prev_cursor",
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/parts.list",
            "request": {
              "body": {
                "properties": {
                  "created_by": {
                    "docs": "Filters for parts created by any of these users.",
                    "type": "optional<list<string>>",
                  },
                  "cursor": {
                    "docs": "The cursor to resume iteration from. If not provided, then
iteration starts from the beginning.
",
                    "type": "optional<string>",
                  },
                  "limit": {
                    "docs": "The maximum number of parts to return. The default is '50'.
",
                    "type": "optional<integer>",
                  },
                  "mode": "optional<root.ListMode>",
                  "name": {
                    "docs": "Filters for parts of the provided name(s).",
                    "type": "optional<list<string>>",
                  },
                  "owned_by": {
                    "docs": "Filters for parts owned by any of these users.",
                    "type": "optional<list<string>>",
                  },
                  "parent_part": "optional<root.ParentPartFilter>",
                  "type": {
                    "docs": "Filters for parts of the provided type(s).",
                    "type": "optional<list<root.PartType>>",
                  },
                },
              },
              "headers": undefined,
              "name": "PartsListRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.PartsListResponse",
            },
          },
          "update": {
            "auth": true,
            "docs": "Updates a [part's](https://devrev.ai/docs/product/parts) information.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "path": "/parts.update",
            "request": {
              "body": "root.PartsUpdateRequest",
            },
            "response": {
              "docs": "Success.",
              "type": "root.PartsUpdateResponse",
            },
          },
        },
      },
    },
    "productUsage.yml": {
      "docs": "Product Usage APIs",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "product-usage",
        "endpoints": {
          "metrics-devrev-ingest": {
            "auth": true,
            "docs": "Ingest endpoint for DevRev metrics data from clients.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "metrics": [
                    {
                      "data_points": [
                        {
                          "timestamp": "2023-01-01T12:00:00Z",
                          "value": 1.1,
                        },
                      ],
                      "name": "name",
                      "org_ref": "org_ref",
                    },
                  ],
                },
              },
            ],
            "method": "POST",
            "path": "/metrics.devrev.ingest",
            "request": {
              "body": {
                "properties": {
                  "metrics": {
                    "docs": "Metrics data received from Dev orgs.",
                    "type": "list<root.MetricsData>",
                  },
                },
              },
              "headers": undefined,
              "name": "MetricsDataIngestRequest",
              "query-parameters": undefined,
            },
          },
          "uoms-create": {
            "auth": true,
            "docs": "Creates a Unit of Measurement on a part.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "path": "/uoms.create",
            "request": {
              "body": {
                "properties": {
                  "aggregation_detail": "root.AggregationDetail",
                  "description": {
                    "docs": "Description of the Unit of Measurement (UOM).",
                    "type": "optional<string>",
                  },
                  "dimensions": {
                    "docs": "The list of dimensions that can be emitted as part of metrics data.
Dimensions consist of list of key-value pairs. For example, if the
UOM is 'number_of_api_calls', then dimensions can be ['api_name',
'api_version'].Dimension keys can only contain alphanumeric
characters (A-Z, a-z, and 0-9) and underscores (_). Dimension keys
cannot start with a number and is case-insensitive.Dimension keys
must be unique and it is not allowed to have more than one value
with the same key.Metrics data ingested in DevRev metrics format
will be grouped and aggregated based on the dimensions specified in
UOM.
",
                    "type": "optional<list<string>>",
                  },
                  "metric_name": {
                    "docs": "Name of the Unit of Measurement (UOM). Unit of Measurement is a
unit of measure defined over a part offered by a Dev Org. A single
part can have multiple unit of measurements defined over it. For
example, a part can be 'video call', one UOM defined on this can be
'number_of_calls', other UOM can be 'call_duration' etc.Metric name
should be unique across all UOMs in a Dev Org.Metric name can only
contain alphanumeric characters (A-Z, a-z, and 0-9) and underscores
(_). Metric name cannot start with a number and is
case-insensitive.
",
                    "type": "string",
                  },
                  "name": {
                    "docs": "Human readable name of the Unit of Measurement (UOM).",
                    "type": "string",
                  },
                  "part_id": {
                    "docs": "The part ID for which the Unit of Measurement (UOM) is defined.
When defined, ingested metrics data will be associated with part
and product specified in UOM.
",
                    "type": "optional<string>",
                  },
                  "product_id": {
                    "docs": "The product ID for which the Unit of Measurement (UOM) is defined.
",
                    "type": "string",
                  },
                  "unit": "root.unit",
                },
              },
              "headers": undefined,
              "name": "UomsCreateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.UomsCreateResponse",
            },
          },
          "uoms-delete": {
            "auth": true,
            "docs": "Deletes a Unit of Measurement.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "id",
                },
              },
            ],
            "method": "POST",
            "path": "/uoms.delete",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The Unit of Measurement (UOM)'s DON.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "UomsDeleteRequest",
              "query-parameters": undefined,
            },
          },
          "uoms-get": {
            "auth": true,
            "docs": "Gets a Unit of Measurement.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "GET",
            "path": "/uoms.get",
            "request": {
              "name": "UomsGetQuery",
              "query-parameters": {
                "id": {
                  "docs": "The Unit of Measurement (UOM)'s DON.",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.UomsGetResponse",
            },
          },
          "uoms-get-post": {
            "auth": true,
            "docs": "Gets a Unit of Measurement.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "path": "/uoms.get",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The Unit of Measurement (UOM)'s DON.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "UomsGetRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.UomsGetResponse",
            },
          },
          "uoms-list": {
            "auth": true,
            "docs": "Gets the Unit of Measurements based on the given filters.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "next_cursor": "next_cursor",
                    "prev_cursor": "prev_cursor",
                    "uoms": [],
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/uoms.list",
            "request": {
              "name": "UomsListQuery",
              "query-parameters": {
                "aggregation_types": {
                  "allow-multiple": true,
                  "docs": "List of aggregation types for filtering list of UOMs.",
                  "type": "optional<root.AggregationDetailAggregationType>",
                },
                "cursor": {
                  "docs": "The cursor to resume iteration from. If not provided, then iteration
starts from the beginning.
",
                  "type": "optional<string>",
                },
                "ids": {
                  "allow-multiple": true,
                  "docs": "List of Unit of Measurement (UOM) DONs to be used in filtering
complete list of UOMs defined in a Dev Org.
",
                  "type": "optional<string>",
                },
                "limit": {
                  "docs": "The maximum number of UOMs to be returned in a response. The default
is '50'.
",
                  "type": "optional<integer>",
                },
                "metric_names": {
                  "allow-multiple": true,
                  "docs": "List of metric names for filtering list of UOMs.",
                  "type": "optional<string>",
                },
                "mode": {
                  "docs": "The iteration mode to use, otherwise if not set, then "after" is
used.
",
                  "type": "optional<root.ListMode>",
                },
                "part_ids": {
                  "allow-multiple": true,
                  "docs": "List of part IDs for filtering list of UOMs.",
                  "type": "optional<string>",
                },
                "product_ids": {
                  "allow-multiple": true,
                  "docs": "List of product IDs for filtering list of UOMs.",
                  "type": "optional<string>",
                },
                "sort_by": {
                  "allow-multiple": true,
                  "docs": "Fields to sort the Unit Of Measuments (UOMs) by and the direction to
sort them.
",
                  "type": "optional<string>",
                },
                "unit_types": {
                  "allow-multiple": true,
                  "docs": "List of unit types for filtering list of UOMs.",
                  "type": "optional<root.UnitType>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.UomsListResponse",
            },
          },
          "uoms-list-post": {
            "auth": true,
            "docs": "Gets the Unit of Measurements based on the given filters.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {},
                "response": {
                  "body": {
                    "next_cursor": "next_cursor",
                    "prev_cursor": "prev_cursor",
                    "uoms": [],
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/uoms.list",
            "request": {
              "body": {
                "properties": {
                  "aggregation_types": {
                    "docs": "List of aggregation types for filtering list of UOMs.",
                    "type": "optional<list<root.AggregationDetailAggregationType>>",
                  },
                  "cursor": {
                    "docs": "The cursor to resume iteration from. If not provided, then
iteration starts from the beginning.
",
                    "type": "optional<string>",
                  },
                  "ids": {
                    "docs": "List of Unit of Measurement (UOM) DONs to be used in filtering
complete list of UOMs defined in a Dev Org.
",
                    "type": "optional<list<string>>",
                  },
                  "limit": {
                    "docs": "The maximum number of UOMs to be returned in a response. The
default is '50'.
",
                    "type": "optional<integer>",
                  },
                  "metric_names": {
                    "docs": "List of metric names for filtering list of UOMs.",
                    "type": "optional<list<string>>",
                  },
                  "mode": "optional<root.ListMode>",
                  "part_ids": {
                    "docs": "List of part IDs for filtering list of UOMs.",
                    "type": "optional<list<string>>",
                  },
                  "product_ids": {
                    "docs": "List of product IDs for filtering list of UOMs.",
                    "type": "optional<list<string>>",
                  },
                  "sort_by": {
                    "docs": "Fields to sort the Unit Of Measuments (UOMs) by and the direction
to sort them.
",
                    "type": "optional<list<string>>",
                  },
                  "unit_types": {
                    "docs": "List of unit types for filtering list of UOMs.",
                    "type": "optional<list<root.UnitType>>",
                  },
                },
              },
              "headers": undefined,
              "name": "UomsListRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.UomsListResponse",
            },
          },
          "uoms-update": {
            "auth": true,
            "docs": "Updates a Unit of Measurement.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "path": "/uoms.update",
            "request": {
              "body": {
                "properties": {
                  "aggregation_type": "optional<root.AggregationDetailAggregationType>",
                  "description": {
                    "docs": "Description of the Unit of Measurement (UOM).",
                    "type": "optional<string>",
                  },
                  "dimensions": "optional<root.UomsUpdateRequestDimensions>",
                  "id": {
                    "docs": "The Unit of Measurement (UOM)'s DON.",
                    "type": "string",
                  },
                  "is_enabled": {
                    "docs": "Flag used to enable/disable the Unit of Measurement (UOM). When
disabled, any metricsrecords ingested against this UOM will be
dropped.
",
                    "type": "optional<boolean>",
                  },
                  "name": {
                    "docs": "Human readable name of the Unit of Measurement (UOM).",
                    "type": "optional<string>",
                  },
                  "part_id": {
                    "docs": "The part ID such as feature or capability for which the Unit of
Measurement (UOM) is defined.
",
                    "type": "optional<string>",
                  },
                  "product_id": {
                    "docs": "The product ID for which the Unit of Measurement (UOM) is defined.
",
                    "type": "optional<string>",
                  },
                  "unit": {
                    "docs": "Unit name of the Unit of Measurement (UOM).",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "UomsUpdateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.UomsUpdateResponse",
            },
          },
        },
      },
    },
    "revOrgs.yml": {
      "docs": "Rev organization interactions.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "rev-orgs",
        "endpoints": {
          "create": {
            "auth": true,
            "docs": "Creates a Rev organization in the authenticated user's Dev
organization.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.ConflictError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "account": "ACC-12345",
                  "display_name": "display_name",
                  "tags": [
                    {
                      "id": "TAG-12345",
                    },
                  ],
                },
                "response": {
                  "body": {
                    "rev_org": {
                      "account": {
                        "display_id": "display_id",
                        "display_name": "display_name",
                        "id": "id",
                      },
                      "artifacts": [
                        {
                          "id": "id",
                        },
                      ],
                      "created_date": "2023-01-01T12:00:00Z",
                      "custom_fields": {
                        "custom_fields": {
                          "key": "value",
                        },
                      },
                      "custom_schema_fragments": [
                        "custom_schema_fragments",
                      ],
                      "description": "description",
                      "display_id": "display_id",
                      "display_name": "display_name",
                      "domain": "domain",
                      "external_ref": "external_ref",
                      "id": "id",
                      "modified_date": "2023-01-01T12:00:00Z",
                      "stock_schema_fragment": "don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>",
                      "subtype": "subtype",
                      "tags": [
                        {
                          "tag": {
                            "id": "id",
                            "name": "name",
                          },
                        },
                      ],
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/rev-orgs.create",
            "request": {
              "body": {
                "properties": {
                  "account": {
                    "docs": "Account Id to associate with this Rev organization.",
                    "type": "optional<string>",
                  },
                  "artifacts": {
                    "docs": "The IDs of the artifacts to associate with the Rev organization.
",
                    "type": "optional<list<string>>",
                  },
                  "custom_fields": {
                    "docs": "Application-defined custom fields.",
                    "type": "optional<map<string, unknown>>",
                  },
                  "custom_schema_fragments": {
                    "docs": "Schema fragment IDs associated with this Rev organization.
",
                    "type": "optional<list<string>>",
                  },
                  "description": {
                    "docs": "Description of the Rev organization.",
                    "type": "optional<string>",
                  },
                  "display_name": {
                    "docs": "Name of the Rev organization.",
                    "type": "string",
                  },
                  "domain": {
                    "docs": "Company's domain name. Example - 'devrev.ai'.",
                    "type": "optional<string>",
                  },
                  "environment": "optional<root.OrgEnvironment>",
                  "external_ref": {
                    "docs": "External ref is a custom unique identifier which is a reference to
an unique id for this organization's data in some system of
records.
",
                    "type": "optional<string>",
                  },
                  "tags": {
                    "docs": "Tags associated with the Rev organization.",
                    "type": "optional<list<root.SetTagWithValue>>",
                  },
                  "tier": {
                    "docs": "The tier of the RevOrg.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "RevOrgsCreateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.RevOrgsCreateResponse",
            },
          },
          "delete": {
            "auth": true,
            "docs": "Deletes the Rev organization.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "REV-AbCdEfGh",
                },
                "response": {
                  "body": {
                    "string": {
                      "key": "value",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/rev-orgs.delete",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The ID of Rev organization to delete.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "RevOrgsDeleteRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.RevOrgsDeleteResponse",
            },
          },
          "get": {
            "auth": true,
            "docs": "Retrieves the Rev organization's information.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "query-parameters": {
                  "account": "ACC-12345",
                  "id": "REV-AbCdEfGh",
                },
                "response": {
                  "body": {
                    "rev_org": {
                      "account": {
                        "display_id": "display_id",
                        "display_name": "display_name",
                        "id": "id",
                      },
                      "artifacts": [
                        {
                          "id": "id",
                        },
                      ],
                      "created_date": "2023-01-01T12:00:00Z",
                      "custom_fields": {
                        "custom_fields": {
                          "key": "value",
                        },
                      },
                      "custom_schema_fragments": [
                        "custom_schema_fragments",
                      ],
                      "description": "description",
                      "display_id": "display_id",
                      "display_name": "display_name",
                      "domain": "domain",
                      "external_ref": "external_ref",
                      "id": "id",
                      "modified_date": "2023-01-01T12:00:00Z",
                      "stock_schema_fragment": "don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>",
                      "subtype": "subtype",
                      "tags": [
                        {
                          "tag": {
                            "id": "id",
                            "name": "name",
                          },
                        },
                      ],
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/rev-orgs.get",
            "request": {
              "name": "RevOrgsGetQuery",
              "query-parameters": {
                "account": {
                  "docs": "The ID of account for which default Rev organization is to be
fetched.
",
                  "type": "optional<string>",
                },
                "id": {
                  "docs": "The ID of the required Rev organization.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.RevOrgsGetResponse",
            },
          },
          "getPost": {
            "auth": true,
            "docs": "Retrieves the Rev organization's information.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "account": "ACC-12345",
                  "id": "REV-AbCdEfGh",
                },
                "response": {
                  "body": {
                    "rev_org": {
                      "account": {
                        "display_id": "display_id",
                        "display_name": "display_name",
                        "id": "id",
                      },
                      "artifacts": [
                        {
                          "id": "id",
                        },
                      ],
                      "created_date": "2023-01-01T12:00:00Z",
                      "custom_fields": {
                        "custom_fields": {
                          "key": "value",
                        },
                      },
                      "custom_schema_fragments": [
                        "custom_schema_fragments",
                      ],
                      "description": "description",
                      "display_id": "display_id",
                      "display_name": "display_name",
                      "domain": "domain",
                      "external_ref": "external_ref",
                      "id": "id",
                      "modified_date": "2023-01-01T12:00:00Z",
                      "stock_schema_fragment": "don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>",
                      "subtype": "subtype",
                      "tags": [
                        {
                          "tag": {
                            "id": "id",
                            "name": "name",
                          },
                        },
                      ],
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/rev-orgs.get",
            "request": {
              "body": {
                "properties": {
                  "account": {
                    "docs": "The ID of account for which default Rev organization is to be
fetched.
",
                    "type": "optional<string>",
                  },
                  "id": {
                    "docs": "The ID of the required Rev organization.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "RevOrgsGetRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.RevOrgsGetResponse",
            },
          },
          "list": {
            "auth": true,
            "docs": "Gets the list of Rev organizations' information belonging to the
authenticated user's Dev Organization which the user is also authorized
to access.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "query-parameters": {
                  "created_date.after": "2023-01-01T12:00:00Z",
                  "created_date.before": "2023-01-01T12:00:00Z",
                  "modified_date.after": "2023-01-01T12:00:00Z",
                  "modified_date.before": "2023-01-01T12:00:00Z",
                },
                "response": {
                  "body": {
                    "next_cursor": "next_cursor",
                    "prev_cursor": "prev_cursor",
                    "rev_orgs": [
                      {
                        "account": {
                          "id": "id",
                        },
                        "artifacts": [
                          {
                            "id": "id",
                          },
                        ],
                        "created_date": "2023-01-01T12:00:00Z",
                        "custom_schema_fragments": [
                          "custom_schema_fragments",
                        ],
                        "description": "description",
                        "display_id": "display_id",
                        "display_name": "display_name",
                        "domain": "domain",
                        "external_ref": "external_ref",
                        "id": "id",
                        "modified_date": "2023-01-01T12:00:00Z",
                        "stock_schema_fragment": "don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>",
                        "subtype": "subtype",
                        "tags": [
                          {
                            "tag": {
                              "id": "id",
                              "name": "name",
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/rev-orgs.list",
            "request": {
              "name": "RevOrgsListQuery",
              "query-parameters": {
                "account": {
                  "allow-multiple": true,
                  "docs": "Filters by account.",
                  "type": "optional<string>",
                },
                "created_by": {
                  "allow-multiple": true,
                  "docs": "Filters by creator.",
                  "type": "optional<string>",
                },
                "created_date.after": {
                  "docs": "Filters for objects created after the provided timestamp (inclusive).
",
                  "type": "optional<datetime>",
                },
                "created_date.before": {
                  "docs": "Filters for objects created before the provided timestamp
(inclusive).
",
                  "type": "optional<datetime>",
                },
                "cursor": {
                  "docs": "The cursor to resume iteration from. If not provided, then iteration
starts from the beginning.
",
                  "type": "optional<string>",
                },
                "custom_field_filter": {
                  "allow-multiple": true,
                  "docs": "Filters on custom fields. Input will be of the format
(custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2).
",
                  "type": "optional<string>",
                },
                "custom_fields": {
                  "docs": "Filters for custom fields.",
                  "type": "optional<map<string, unknown>>",
                },
                "display_name": {
                  "allow-multiple": true,
                  "docs": "Array of display names of Rev orgs to be filtered.",
                  "type": "optional<string>",
                },
                "external_ref": {
                  "allow-multiple": true,
                  "docs": "List of external refs to filter Rev organizations for.",
                  "type": "optional<string>",
                },
                "limit": {
                  "docs": "The maximum number of Rev organizations to be retrieved per page.
",
                  "type": "optional<integer>",
                },
                "mode": {
                  "docs": "The iteration mode to use, otherwise if not set, then "after" is
used.
",
                  "type": "optional<root.ListMode>",
                },
                "modified_date.after": {
                  "docs": "Filters for objects created after the provided timestamp (inclusive).
",
                  "type": "optional<datetime>",
                },
                "modified_date.before": {
                  "docs": "Filters for objects created before the provided timestamp
(inclusive).
",
                  "type": "optional<datetime>",
                },
                "sort_by": {
                  "allow-multiple": true,
                  "docs": "Fields to sort the Rev organizations by and the direction to sort
them.
",
                  "type": "optional<string>",
                },
                "tags": {
                  "allow-multiple": true,
                  "docs": "List of tags to be filtered.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.RevOrgsListResponse",
            },
          },
          "listPost": {
            "auth": true,
            "docs": "Gets the list of Rev organizations' information belonging to the
authenticated user's Dev Organization which the user is also authorized
to access.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {},
                "response": {
                  "body": {
                    "next_cursor": "next_cursor",
                    "prev_cursor": "prev_cursor",
                    "rev_orgs": [
                      {
                        "account": {
                          "id": "id",
                        },
                        "artifacts": [
                          {
                            "id": "id",
                          },
                        ],
                        "created_date": "2023-01-01T12:00:00Z",
                        "custom_schema_fragments": [
                          "custom_schema_fragments",
                        ],
                        "description": "description",
                        "display_id": "display_id",
                        "display_name": "display_name",
                        "domain": "domain",
                        "external_ref": "external_ref",
                        "id": "id",
                        "modified_date": "2023-01-01T12:00:00Z",
                        "stock_schema_fragment": "don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>",
                        "subtype": "subtype",
                        "tags": [
                          {
                            "tag": {
                              "id": "id",
                              "name": "name",
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/rev-orgs.list",
            "request": {
              "body": {
                "properties": {
                  "account": {
                    "docs": "Filters by account.",
                    "type": "optional<list<string>>",
                  },
                  "created_by": {
                    "docs": "Filters by creator.",
                    "type": "optional<list<string>>",
                  },
                  "created_date": "optional<root.DateTimeFilter>",
                  "cursor": {
                    "docs": "The cursor to resume iteration from. If not provided, then
iteration starts from the beginning.
",
                    "type": "optional<string>",
                  },
                  "custom_field_filter": {
                    "docs": "Filters on custom fields. Input will be of the format
(custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2).
",
                    "type": "optional<list<string>>",
                  },
                  "custom_fields": {
                    "docs": "Filters for custom fields.",
                    "type": "optional<map<string, unknown>>",
                  },
                  "display_name": {
                    "docs": "Array of display names of Rev orgs to be filtered.",
                    "type": "optional<list<string>>",
                  },
                  "external_ref": {
                    "docs": "List of external refs to filter Rev organizations for.",
                    "type": "optional<list<string>>",
                  },
                  "limit": {
                    "docs": "The maximum number of Rev organizations to be retrieved per page.
",
                    "type": "optional<integer>",
                  },
                  "mode": "optional<root.ListMode>",
                  "modified_date": "optional<root.DateTimeFilter>",
                  "sort_by": {
                    "docs": "Fields to sort the Rev organizations by and the direction to sort
them.
",
                    "type": "optional<list<string>>",
                  },
                  "tags": {
                    "docs": "List of tags to be filtered.",
                    "type": "optional<list<string>>",
                  },
                },
              },
              "headers": undefined,
              "name": "RevOrgsListRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.RevOrgsListResponse",
            },
          },
          "update": {
            "auth": true,
            "docs": "Updates the Rev organization's information.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.ConflictError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "account": "ACC-12345",
                  "id": "REV-AbCdEfGh",
                  "tags": [
                    {
                      "id": "TAG-12345",
                    },
                  ],
                },
                "response": {
                  "body": {
                    "rev_org": {
                      "account": {
                        "display_id": "display_id",
                        "display_name": "display_name",
                        "id": "id",
                      },
                      "artifacts": [
                        {
                          "id": "id",
                        },
                      ],
                      "created_date": "2023-01-01T12:00:00Z",
                      "custom_fields": {
                        "custom_fields": {
                          "key": "value",
                        },
                      },
                      "custom_schema_fragments": [
                        "custom_schema_fragments",
                      ],
                      "description": "description",
                      "display_id": "display_id",
                      "display_name": "display_name",
                      "domain": "domain",
                      "external_ref": "external_ref",
                      "id": "id",
                      "modified_date": "2023-01-01T12:00:00Z",
                      "stock_schema_fragment": "don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>",
                      "subtype": "subtype",
                      "tags": [
                        {
                          "tag": {
                            "id": "id",
                            "name": "name",
                          },
                        },
                      ],
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/rev-orgs.update",
            "request": {
              "body": {
                "properties": {
                  "account": {
                    "docs": "New account ID to associate with this Rev organization.",
                    "type": "optional<string>",
                  },
                  "artifacts": "optional<root.RevOrgsUpdateRequestArtifacts>",
                  "custom_schema_fragments": {
                    "docs": "Schema fragment IDs associated with this Rev organization.
",
                    "type": "optional<list<string>>",
                  },
                  "description": {
                    "docs": "Description of the Rev organization.",
                    "type": "optional<string>",
                  },
                  "display_name": {
                    "docs": "Customer chosen name for the Rev organization.",
                    "type": "optional<string>",
                  },
                  "domain": {
                    "docs": "Company's domain name. Example - 'devrev.ai'.",
                    "type": "optional<string>",
                  },
                  "environment": "optional<root.OrgEnvironment>",
                  "external_ref": {
                    "docs": "External ref is a custom unique identifier which is a reference to
an unique id for this organization's data in some system of
records.
",
                    "type": "optional<string>",
                  },
                  "id": {
                    "docs": "The ID of Rev organization to update.",
                    "type": "string",
                  },
                  "tags": {
                    "docs": "Tags associated with the Rev organization.",
                    "type": "optional<list<root.SetTagWithValue>>",
                  },
                  "tier": {
                    "docs": "The tier of the RevOrg.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "RevOrgsUpdateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.RevOrgsUpdateResponse",
            },
          },
        },
      },
    },
    "revUsers.yml": {
      "docs": "Rev user interactions.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "rev-users",
        "endpoints": {
          "create": {
            "auth": true,
            "docs": "Creates a Rev user for a Rev organization. Rev user can be a customer
or a lead of an organization.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.ConflictError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "rev_org": "REV-AbCdEfGh",
                  "tags": [
                    {
                      "id": "TAG-12345",
                    },
                  ],
                },
                "response": {
                  "body": {
                    "rev_user": {
                      "artifacts": [
                        {
                          "id": "id",
                        },
                      ],
                      "created_date": "2023-01-01T12:00:00Z",
                      "custom_fields": {
                        "custom_fields": {
                          "key": "value",
                        },
                      },
                      "custom_schema_fragments": [
                        "custom_schema_fragments",
                      ],
                      "description": "description",
                      "display_id": "display_id",
                      "display_name": "display_name",
                      "display_picture": {
                        "display_id": "display_id",
                        "id": "id",
                      },
                      "email": "email",
                      "external_ref": "external_ref",
                      "full_name": "full_name",
                      "id": "id",
                      "is_verified": true,
                      "modified_date": "2023-01-01T12:00:00Z",
                      "phone_numbers": [
                        "phone_numbers",
                      ],
                      "state": "active",
                      "stock_schema_fragment": "don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>",
                      "subtype": "subtype",
                      "tags": [
                        {
                          "tag": {
                            "id": "id",
                            "name": "name",
                          },
                        },
                      ],
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/rev-users.create",
            "request": {
              "body": {
                "properties": {
                  "artifacts": {
                    "docs": "The IDs of the artifacts to associate with the Rev user.",
                    "type": "optional<list<string>>",
                  },
                  "custom_fields": {
                    "docs": "Application-defined custom fields.",
                    "type": "optional<map<string, unknown>>",
                  },
                  "custom_schema_fragments": {
                    "docs": "The schema fragment IDs associated with the Rev user.",
                    "type": "optional<list<string>>",
                  },
                  "description": {
                    "docs": "Description of the Rev user.",
                    "type": "optional<string>",
                  },
                  "display_name": {
                    "docs": "The user's display name. The name is non-unique and mutable.
",
                    "type": "optional<string>",
                  },
                  "email": {
                    "docs": "Email address of the Rev user.",
                    "type": "optional<string>",
                  },
                  "external_ref": {
                    "docs": "External ref is a mutable unique identifier for a user within the
Dev organization from your primary customer record. If none is
available, a good alternative is the email address/phone number
which could uniquely identify the user. If none is specified, a
system-generated identifier will be assigned to the user.
",
                    "type": "optional<string>",
                  },
                  "phone_numbers": {
                    "docs": "Phone numbers, in E.164 format, of the Rev user.",
                    "type": "optional<list<string>>",
                  },
                  "rev_org": {
                    "docs": "The ID of Rev organization for which a Rev user is to be created.
",
                    "type": "optional<string>",
                  },
                  "tags": {
                    "docs": "Tags associated with the Rev user.",
                    "type": "optional<list<root.SetTagWithValue>>",
                  },
                },
              },
              "headers": undefined,
              "name": "RevUsersCreateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.RevUsersCreateResponse",
            },
          },
          "delete": {
            "auth": true,
            "docs": "Deletes a Rev user.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "id",
                },
                "response": {
                  "body": {
                    "string": {
                      "key": "value",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/rev-users.delete",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The ID of Rev user to delete.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "RevUsersDeleteRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.RevUsersDeleteResponse",
            },
          },
          "get": {
            "auth": true,
            "docs": "Returns the Rev user of a Rev organization by its ID.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "query-parameters": {
                  "id": "id",
                },
                "response": {
                  "body": {
                    "rev_user": {
                      "artifacts": [
                        {
                          "id": "id",
                        },
                      ],
                      "created_date": "2023-01-01T12:00:00Z",
                      "custom_fields": {
                        "custom_fields": {
                          "key": "value",
                        },
                      },
                      "custom_schema_fragments": [
                        "custom_schema_fragments",
                      ],
                      "description": "description",
                      "display_id": "display_id",
                      "display_name": "display_name",
                      "display_picture": {
                        "display_id": "display_id",
                        "id": "id",
                      },
                      "email": "email",
                      "external_ref": "external_ref",
                      "full_name": "full_name",
                      "id": "id",
                      "is_verified": true,
                      "modified_date": "2023-01-01T12:00:00Z",
                      "phone_numbers": [
                        "phone_numbers",
                      ],
                      "state": "active",
                      "stock_schema_fragment": "don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>",
                      "subtype": "subtype",
                      "tags": [
                        {
                          "tag": {
                            "id": "id",
                            "name": "name",
                          },
                        },
                      ],
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/rev-users.get",
            "request": {
              "name": "RevUsersGetQuery",
              "query-parameters": {
                "id": {
                  "docs": "The ID of Rev user to be retrieved.",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.RevUsersGetResponse",
            },
          },
          "getPost": {
            "auth": true,
            "docs": "Returns the Rev user of a Rev organization by its ID.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "id",
                },
                "response": {
                  "body": {
                    "rev_user": {
                      "artifacts": [
                        {
                          "id": "id",
                        },
                      ],
                      "created_date": "2023-01-01T12:00:00Z",
                      "custom_fields": {
                        "custom_fields": {
                          "key": "value",
                        },
                      },
                      "custom_schema_fragments": [
                        "custom_schema_fragments",
                      ],
                      "description": "description",
                      "display_id": "display_id",
                      "display_name": "display_name",
                      "display_picture": {
                        "display_id": "display_id",
                        "id": "id",
                      },
                      "email": "email",
                      "external_ref": "external_ref",
                      "full_name": "full_name",
                      "id": "id",
                      "is_verified": true,
                      "modified_date": "2023-01-01T12:00:00Z",
                      "phone_numbers": [
                        "phone_numbers",
                      ],
                      "state": "active",
                      "stock_schema_fragment": "don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>",
                      "subtype": "subtype",
                      "tags": [
                        {
                          "tag": {
                            "id": "id",
                            "name": "name",
                          },
                        },
                      ],
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/rev-users.get",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The ID of Rev user to be retrieved.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "RevUsersGetRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.RevUsersGetResponse",
            },
          },
          "link-rev-user-to-rev-org": {
            "auth": true,
            "docs": "Links a rev user to a rev org.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "rev_org_don": "REV-AbCdEfGh",
                  "user_don": "user_don",
                },
                "response": {
                  "body": {
                    "rev_user": {
                      "artifacts": [
                        {
                          "id": "id",
                        },
                      ],
                      "created_date": "2023-01-01T12:00:00Z",
                      "custom_fields": {
                        "custom_fields": {
                          "key": "value",
                        },
                      },
                      "custom_schema_fragments": [
                        "custom_schema_fragments",
                      ],
                      "description": "description",
                      "display_id": "display_id",
                      "display_name": "display_name",
                      "display_picture": {
                        "display_id": "display_id",
                        "id": "id",
                      },
                      "email": "email",
                      "external_ref": "external_ref",
                      "full_name": "full_name",
                      "id": "id",
                      "is_verified": true,
                      "modified_date": "2023-01-01T12:00:00Z",
                      "phone_numbers": [
                        "phone_numbers",
                      ],
                      "state": "active",
                      "stock_schema_fragment": "don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>",
                      "subtype": "subtype",
                      "tags": [
                        {
                          "tag": {
                            "id": "id",
                            "name": "name",
                          },
                        },
                      ],
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/rev-users.link",
            "request": {
              "body": {
                "properties": {
                  "rev_org_don": {
                    "docs": "The don of the rev org to link the rev user to.",
                    "type": "string",
                  },
                  "user_don": {
                    "docs": "The don of the rev user to link.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "LinkRevUserToRevOrgRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.LinkRevUserToRevOrgResponse",
            },
          },
          "list": {
            "auth": true,
            "docs": "Returns a list of all Rev Users belonging to the authenticated user's
Dev Organization.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "query-parameters": {
                  "created_date.after": "2023-01-01T12:00:00Z",
                  "created_date.before": "2023-01-01T12:00:00Z",
                  "modified_date.after": "2023-01-01T12:00:00Z",
                  "modified_date.before": "2023-01-01T12:00:00Z",
                },
                "response": {
                  "body": {
                    "next_cursor": "next_cursor",
                    "prev_cursor": "prev_cursor",
                    "rev_users": [
                      {
                        "artifacts": [
                          {
                            "id": "id",
                          },
                        ],
                        "created_date": "2023-01-01T12:00:00Z",
                        "custom_schema_fragments": [
                          "custom_schema_fragments",
                        ],
                        "description": "description",
                        "display_id": "display_id",
                        "display_name": "display_name",
                        "display_picture": {
                          "id": "id",
                        },
                        "email": "email",
                        "external_ref": "external_ref",
                        "full_name": "full_name",
                        "id": "id",
                        "is_verified": true,
                        "modified_date": "2023-01-01T12:00:00Z",
                        "phone_numbers": [
                          "phone_numbers",
                        ],
                        "state": "active",
                        "stock_schema_fragment": "don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>",
                        "subtype": "subtype",
                        "tags": [
                          {
                            "tag": {
                              "id": "id",
                              "name": "name",
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/rev-users.list",
            "request": {
              "name": "RevUsersListQuery",
              "query-parameters": {
                "created_by": {
                  "allow-multiple": true,
                  "docs": "Filters for Rev users that were created by the specified user(s).
",
                  "type": "optional<string>",
                },
                "created_date.after": {
                  "docs": "Filters for objects created after the provided timestamp (inclusive).
",
                  "type": "optional<datetime>",
                },
                "created_date.before": {
                  "docs": "Filters for objects created before the provided timestamp
(inclusive).
",
                  "type": "optional<datetime>",
                },
                "cursor": {
                  "docs": "The cursor to resume iteration from. If not provided, then iteration
starts from the beginning.
",
                  "type": "optional<string>",
                },
                "custom_fields": {
                  "docs": "Filters for custom fields.",
                  "type": "optional<map<string, unknown>>",
                },
                "email": {
                  "allow-multiple": true,
                  "docs": "List of emails of Rev users to be filtered.",
                  "type": "optional<string>",
                },
                "external_ref": {
                  "allow-multiple": true,
                  "docs": "List of external refs to filter Rev users for.",
                  "type": "optional<string>",
                },
                "is_verified": {
                  "docs": "Value of is_verified field to filter the Rev users.",
                  "type": "optional<boolean>",
                },
                "limit": {
                  "docs": "The maximum number of Rev users to return. The default is '50'.
",
                  "type": "optional<integer>",
                },
                "mode": {
                  "docs": "The iteration mode to use, otherwise if not set, then "after" is
used.
",
                  "type": "optional<root.ListMode>",
                },
                "modified_date.after": {
                  "docs": "Filters for objects created after the provided timestamp (inclusive).
",
                  "type": "optional<datetime>",
                },
                "modified_date.before": {
                  "docs": "Filters for objects created before the provided timestamp
(inclusive).
",
                  "type": "optional<datetime>",
                },
                "phone_numbers": {
                  "allow-multiple": true,
                  "docs": "List of phone numbers, in E.164 format, to filter Rev users on.
",
                  "type": "optional<string>",
                },
                "rev_org": {
                  "allow-multiple": true,
                  "docs": "List of IDs of Rev organizations to be filtered.",
                  "type": "optional<string>",
                },
                "sort_by": {
                  "allow-multiple": true,
                  "docs": "Fields to sort the Rev users by and the direction to sort them.
",
                  "type": "optional<string>",
                },
                "tags": {
                  "allow-multiple": true,
                  "docs": "List of tags to be filtered.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.RevUsersListResponse",
            },
          },
          "listPost": {
            "auth": true,
            "docs": "Returns a list of all Rev Users belonging to the authenticated user's
Dev Organization.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {},
                "response": {
                  "body": {
                    "next_cursor": "next_cursor",
                    "prev_cursor": "prev_cursor",
                    "rev_users": [
                      {
                        "artifacts": [
                          {
                            "id": "id",
                          },
                        ],
                        "created_date": "2023-01-01T12:00:00Z",
                        "custom_schema_fragments": [
                          "custom_schema_fragments",
                        ],
                        "description": "description",
                        "display_id": "display_id",
                        "display_name": "display_name",
                        "display_picture": {
                          "id": "id",
                        },
                        "email": "email",
                        "external_ref": "external_ref",
                        "full_name": "full_name",
                        "id": "id",
                        "is_verified": true,
                        "modified_date": "2023-01-01T12:00:00Z",
                        "phone_numbers": [
                          "phone_numbers",
                        ],
                        "state": "active",
                        "stock_schema_fragment": "don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>",
                        "subtype": "subtype",
                        "tags": [
                          {
                            "tag": {
                              "id": "id",
                              "name": "name",
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/rev-users.list",
            "request": {
              "body": {
                "properties": {
                  "created_by": {
                    "docs": "Filters for Rev users that were created by the specified user(s).
",
                    "type": "optional<list<string>>",
                  },
                  "created_date": "optional<root.DateTimeFilter>",
                  "cursor": {
                    "docs": "The cursor to resume iteration from. If not provided, then
iteration starts from the beginning.
",
                    "type": "optional<string>",
                  },
                  "custom_fields": {
                    "docs": "Filters for custom fields.",
                    "type": "optional<map<string, unknown>>",
                  },
                  "email": {
                    "docs": "List of emails of Rev users to be filtered.",
                    "type": "optional<list<string>>",
                  },
                  "external_ref": {
                    "docs": "List of external refs to filter Rev users for.",
                    "type": "optional<list<string>>",
                  },
                  "is_verified": {
                    "docs": "Value of is_verified field to filter the Rev users.",
                    "type": "optional<boolean>",
                  },
                  "limit": {
                    "docs": "The maximum number of Rev users to return. The default is '50'.
",
                    "type": "optional<integer>",
                  },
                  "mode": "optional<root.ListMode>",
                  "modified_date": "optional<root.DateTimeFilter>",
                  "phone_numbers": {
                    "docs": "List of phone numbers, in E.164 format, to filter Rev users on.
",
                    "type": "optional<list<string>>",
                  },
                  "rev_org": {
                    "docs": "List of IDs of Rev organizations to be filtered.",
                    "type": "optional<list<string>>",
                  },
                  "sort_by": {
                    "docs": "Fields to sort the Rev users by and the direction to sort them.
",
                    "type": "optional<list<string>>",
                  },
                  "tags": {
                    "docs": "List of tags to be filtered.",
                    "type": "optional<list<string>>",
                  },
                },
              },
              "headers": undefined,
              "name": "RevUsersListRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.RevUsersListResponse",
            },
          },
          "unlink-rev-user-from-rev-org": {
            "auth": true,
            "docs": "Unlinks a rev user from a rev org.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "rev_org_don": "REV-AbCdEfGh",
                  "user_don": "user_don",
                },
                "response": {
                  "body": {
                    "rev_user": {
                      "artifacts": [
                        {
                          "id": "id",
                        },
                      ],
                      "created_date": "2023-01-01T12:00:00Z",
                      "custom_fields": {
                        "custom_fields": {
                          "key": "value",
                        },
                      },
                      "custom_schema_fragments": [
                        "custom_schema_fragments",
                      ],
                      "description": "description",
                      "display_id": "display_id",
                      "display_name": "display_name",
                      "display_picture": {
                        "display_id": "display_id",
                        "id": "id",
                      },
                      "email": "email",
                      "external_ref": "external_ref",
                      "full_name": "full_name",
                      "id": "id",
                      "is_verified": true,
                      "modified_date": "2023-01-01T12:00:00Z",
                      "phone_numbers": [
                        "phone_numbers",
                      ],
                      "state": "active",
                      "stock_schema_fragment": "don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>",
                      "subtype": "subtype",
                      "tags": [
                        {
                          "tag": {
                            "id": "id",
                            "name": "name",
                          },
                        },
                      ],
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/rev-users.unlink",
            "request": {
              "body": {
                "properties": {
                  "rev_org_don": {
                    "docs": "The don of the rev org to unlink the rev user from.",
                    "type": "string",
                  },
                  "user_don": {
                    "docs": "The don of the rev user to unlink.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "UnlinkRevUserFromRevOrgRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.UnlinkRevUserFromRevOrgResponse",
            },
          },
          "update": {
            "auth": true,
            "docs": "Updates a Rev user.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.ConflictError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "id",
                  "tags": [
                    {
                      "id": "TAG-12345",
                    },
                  ],
                },
                "response": {
                  "body": {
                    "rev_user": {
                      "artifacts": [
                        {
                          "id": "id",
                        },
                      ],
                      "created_date": "2023-01-01T12:00:00Z",
                      "custom_fields": {
                        "custom_fields": {
                          "key": "value",
                        },
                      },
                      "custom_schema_fragments": [
                        "custom_schema_fragments",
                      ],
                      "description": "description",
                      "display_id": "display_id",
                      "display_name": "display_name",
                      "display_picture": {
                        "display_id": "display_id",
                        "id": "id",
                      },
                      "email": "email",
                      "external_ref": "external_ref",
                      "full_name": "full_name",
                      "id": "id",
                      "is_verified": true,
                      "modified_date": "2023-01-01T12:00:00Z",
                      "phone_numbers": [
                        "phone_numbers",
                      ],
                      "state": "active",
                      "stock_schema_fragment": "don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>",
                      "subtype": "subtype",
                      "tags": [
                        {
                          "tag": {
                            "id": "id",
                            "name": "name",
                          },
                        },
                      ],
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/rev-users.update",
            "request": {
              "body": {
                "properties": {
                  "artifacts": "optional<root.RevUsersUpdateRequestArtifacts>",
                  "custom_fields": {
                    "docs": "Application-defined custom fields.",
                    "type": "optional<map<string, unknown>>",
                  },
                  "custom_schema_fragments": "optional<root.RevUsersUpdateRequestCustomSchemaFragments>",
                  "description": {
                    "docs": "Updated description of the Rev user.",
                    "type": "optional<string>",
                  },
                  "display_name": {
                    "docs": "Updated display name of the Rev user.",
                    "type": "optional<string>",
                  },
                  "email": {
                    "docs": "Updated email address of the Rev user.",
                    "type": "optional<string>",
                  },
                  "external_ref": {
                    "docs": "Updated external ref value of the Rev user.",
                    "type": "optional<string>",
                  },
                  "id": {
                    "docs": "The ID of Rev user to update.",
                    "type": "string",
                  },
                  "phone_numbers": {
                    "docs": "The phone numbers, in E.164 format, of the Rev user.",
                    "type": "optional<list<string>>",
                  },
                  "tags": {
                    "docs": "Tags associated with the Rev user.",
                    "type": "optional<list<root.SetTagWithValue>>",
                  },
                },
              },
              "headers": undefined,
              "name": "RevUsersUpdateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.RevUsersUpdateResponse",
            },
          },
        },
      },
    },
    "schedules.yml": {
      "docs": "Management APIs for availability schedules.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "schedules",
        "endpoints": {
          "org-schedule-fragments-create": {
            "auth": true,
            "docs": "Creates an organization schedule fragment.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "from": "2023-01-01T12:00:00Z",
                  "intervals": [
                    {
                      "from": "2023-01-01T12:00:00Z",
                      "name": "name",
                      "to": "2023-01-01T12:00:00Z",
                    },
                  ],
                  "name": "name",
                  "to": "2023-01-01T12:00:00Z",
                },
                "response": {
                  "body": {
                    "org_schedule_fragment": {
                      "created_date": "2023-01-01T12:00:00Z",
                      "display_id": "display_id",
                      "from": "2023-01-01T12:00:00Z",
                      "id": "id",
                      "intervals": [
                        {},
                      ],
                      "modified_date": "2023-01-01T12:00:00Z",
                      "name": "name",
                      "region_codes": [
                        "region_codes",
                      ],
                      "status": "archived",
                      "to": "2023-01-01T12:00:00Z",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/org-schedule-fragments.create",
            "request": {
              "body": {
                "properties": {
                  "from": {
                    "docs": "Date (inclusive) on which the organization schedule fragment
begins.
",
                    "type": "datetime",
                  },
                  "intervals": {
                    "docs": "The intervals that comprise the schedule fragment.",
                    "type": "list<root.CreateOrgScheduleInterval>",
                  },
                  "name": {
                    "docs": "Name of the organization schedule fragment.",
                    "type": "string",
                  },
                  "region_codes": {
                    "docs": "CLDR region code of the countries/regions it is meant to be valid
for. Does not drive logic, serves only for easier filtering and
organization.
",
                    "type": "optional<list<string>>",
                  },
                  "to": {
                    "docs": "Date (exclusive) on which the organization schedule fragment's
validity ends.
",
                    "type": "datetime",
                  },
                },
              },
              "headers": undefined,
              "name": "OrgScheduleFragmentsCreateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.OrgScheduleFragmentsCreateResponse",
            },
          },
          "org-schedule-fragments-get": {
            "auth": true,
            "docs": "Gets an organization schedule fragment.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "query-parameters": {
                  "id": "id",
                },
                "response": {
                  "body": {
                    "org_schedule_fragment": {
                      "created_date": "2023-01-01T12:00:00Z",
                      "display_id": "display_id",
                      "from": "2023-01-01T12:00:00Z",
                      "id": "id",
                      "intervals": [
                        {},
                      ],
                      "modified_date": "2023-01-01T12:00:00Z",
                      "name": "name",
                      "region_codes": [
                        "region_codes",
                      ],
                      "status": "archived",
                      "to": "2023-01-01T12:00:00Z",
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/org-schedule-fragments.get",
            "request": {
              "name": "OrgScheduleFragmentsGetQuery",
              "query-parameters": {
                "id": {
                  "docs": "Organization schedule Fragment ID.",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.OrgScheduleFragmentsGetResponse",
            },
          },
          "org-schedule-fragments-get-post": {
            "auth": true,
            "docs": "Gets an organization schedule fragment.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "id",
                },
                "response": {
                  "body": {
                    "org_schedule_fragment": {
                      "created_date": "2023-01-01T12:00:00Z",
                      "display_id": "display_id",
                      "from": "2023-01-01T12:00:00Z",
                      "id": "id",
                      "intervals": [
                        {},
                      ],
                      "modified_date": "2023-01-01T12:00:00Z",
                      "name": "name",
                      "region_codes": [
                        "region_codes",
                      ],
                      "status": "archived",
                      "to": "2023-01-01T12:00:00Z",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/org-schedule-fragments.get",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "Organization schedule Fragment ID.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "OrgScheduleFragmentsGetRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.OrgScheduleFragmentsGetResponse",
            },
          },
          "org-schedule-fragments-transition": {
            "auth": true,
            "docs": "Changes stage of an organization schedule fragment.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "id",
                  "status": "archived",
                },
                "response": {
                  "body": {
                    "org_schedule_fragment": {
                      "created_date": "2023-01-01T12:00:00Z",
                      "display_id": "display_id",
                      "from": "2023-01-01T12:00:00Z",
                      "id": "id",
                      "intervals": [
                        {},
                      ],
                      "modified_date": "2023-01-01T12:00:00Z",
                      "name": "name",
                      "region_codes": [
                        "region_codes",
                      ],
                      "status": "archived",
                      "to": "2023-01-01T12:00:00Z",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/org-schedule-fragments.transition",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "Organization schedule Fragment ID.",
                    "type": "string",
                  },
                  "status": "root.OrgScheduleFragmentStatus",
                },
              },
              "headers": undefined,
              "name": "OrgScheduleFragmentsTransitionRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.OrgScheduleFragmentsTransitionResponse",
            },
          },
          "org-schedules-create": {
            "auth": true,
            "docs": "Creates an organization schedule with a default weekly organization
schedule and a list of organization schedule fragments.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "name": "name",
                  "timezone": "timezone",
                },
                "response": {
                  "body": {
                    "org_schedule": {
                      "created_date": "2023-01-01T12:00:00Z",
                      "default_weekly_org_schedule": {
                        "default_weekly_org_schedule": {
                          "key": "value",
                        },
                      },
                      "display_id": "display_id",
                      "id": "id",
                      "min_valid_days": 1,
                      "modified_date": "2023-01-01T12:00:00Z",
                      "name": "name",
                      "org_schedule_fragments": [
                        {},
                      ],
                      "status": "archived",
                      "timezone": "timezone",
                      "valid_until": "2023-01-01T12:00:00Z",
                      "weekly_org_schedules": [
                        {},
                      ],
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/org-schedules.create",
            "request": {
              "body": {
                "properties": {
                  "default_weekly_org_schedule": "optional<root.SetWeeklyOrgSchedule>",
                  "min_valid_days": {
                    "docs": "Organization schedule must be valid for at least this many days in
the future. Meaning organization schedule fragments must cover this
period. 0 if omitted.
",
                    "type": "optional<integer>",
                  },
                  "name": {
                    "docs": "Human-readable name.",
                    "type": "string",
                  },
                  "org_schedule_fragments": {
                    "docs": "List of organization schedule fragments with no overlaps or gaps.
",
                    "type": "optional<list<root.SetOrgScheduleFragmentSummary>>",
                  },
                  "timezone": {
                    "docs": "Timezone in which the organization schedule applies. Expected to be
a valid IANA time zone name such as America/New_York.
",
                    "type": "string",
                  },
                  "weekly_org_schedules": {
                    "docs": "If this day belongs to a named period according to the currently
active organization schedule fragment, a weekly organization
schedule from this list with the corresponding name will apply.
",
                    "type": "optional<list<root.SetWeeklyOrgSchedule>>",
                  },
                },
              },
              "headers": undefined,
              "name": "OrgSchedulesCreateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.OrgSchedulesCreateResponse",
            },
          },
          "org-schedules-get": {
            "auth": true,
            "docs": "Gets an organization schedule.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "query-parameters": {
                  "id": "id",
                },
                "response": {
                  "body": {
                    "org_schedule": {
                      "created_date": "2023-01-01T12:00:00Z",
                      "default_weekly_org_schedule": {
                        "default_weekly_org_schedule": {
                          "key": "value",
                        },
                      },
                      "display_id": "display_id",
                      "id": "id",
                      "min_valid_days": 1,
                      "modified_date": "2023-01-01T12:00:00Z",
                      "name": "name",
                      "org_schedule_fragments": [
                        {},
                      ],
                      "status": "archived",
                      "timezone": "timezone",
                      "valid_until": "2023-01-01T12:00:00Z",
                      "weekly_org_schedules": [
                        {},
                      ],
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/org-schedules.get",
            "request": {
              "name": "OrgSchedulesGetQuery",
              "query-parameters": {
                "id": {
                  "docs": "Organization schedule ID.",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.OrgSchedulesGetResponse",
            },
          },
          "org-schedules-get-post": {
            "auth": true,
            "docs": "Gets an organization schedule.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "id",
                },
                "response": {
                  "body": {
                    "org_schedule": {
                      "created_date": "2023-01-01T12:00:00Z",
                      "default_weekly_org_schedule": {
                        "default_weekly_org_schedule": {
                          "key": "value",
                        },
                      },
                      "display_id": "display_id",
                      "id": "id",
                      "min_valid_days": 1,
                      "modified_date": "2023-01-01T12:00:00Z",
                      "name": "name",
                      "org_schedule_fragments": [
                        {},
                      ],
                      "status": "archived",
                      "timezone": "timezone",
                      "valid_until": "2023-01-01T12:00:00Z",
                      "weekly_org_schedules": [
                        {},
                      ],
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/org-schedules.get",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "Organization schedule ID.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "OrgSchedulesGetRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.OrgSchedulesGetResponse",
            },
          },
          "org-schedules-list": {
            "auth": true,
            "docs": "Gets list of organization schedules.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "next_cursor": "next_cursor",
                    "org_schedules": [
                      {
                        "created_date": "2023-01-01T12:00:00Z",
                        "display_id": "display_id",
                        "id": "id",
                        "min_valid_days": 1,
                        "modified_date": "2023-01-01T12:00:00Z",
                        "name": "name",
                        "org_schedule_fragments": [
                          {},
                        ],
                        "status": "archived",
                        "timezone": "timezone",
                        "valid_until": "2023-01-01T12:00:00Z",
                        "weekly_org_schedules": [
                          {},
                        ],
                      },
                    ],
                    "prev_cursor": "prev_cursor",
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/org-schedules.list",
            "request": {
              "name": "OrgSchedulesListQuery",
              "query-parameters": {
                "created_by_id": {
                  "allow-multiple": true,
                  "docs": "Creator ID the filter matches.",
                  "type": "optional<string>",
                },
                "cursor": {
                  "docs": "The cursor to resume iteration from. If not provided, then iteration
starts from the beginning.
",
                  "type": "optional<string>",
                },
                "limit": {
                  "docs": "Max number of organization schedules returned in a page. Default is
50.
",
                  "type": "optional<integer>",
                },
                "mode": {
                  "docs": "The iteration mode to use, otherwise if not set, then "after" is
used.
",
                  "type": "optional<root.ListMode>",
                },
                "status": {
                  "allow-multiple": true,
                  "docs": "The organization schedule statuses the filter matches.",
                  "type": "optional<root.OrgScheduleStatus>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.OrgSchedulesListResponse",
            },
          },
          "org-schedules-list-post": {
            "auth": true,
            "docs": "Gets list of organization schedules.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {},
                "response": {
                  "body": {
                    "next_cursor": "next_cursor",
                    "org_schedules": [
                      {
                        "created_date": "2023-01-01T12:00:00Z",
                        "display_id": "display_id",
                        "id": "id",
                        "min_valid_days": 1,
                        "modified_date": "2023-01-01T12:00:00Z",
                        "name": "name",
                        "org_schedule_fragments": [
                          {},
                        ],
                        "status": "archived",
                        "timezone": "timezone",
                        "valid_until": "2023-01-01T12:00:00Z",
                        "weekly_org_schedules": [
                          {},
                        ],
                      },
                    ],
                    "prev_cursor": "prev_cursor",
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/org-schedules.list",
            "request": {
              "body": {
                "properties": {
                  "created_by_id": {
                    "docs": "Creator ID the filter matches.",
                    "type": "optional<list<string>>",
                  },
                  "cursor": {
                    "docs": "The cursor to resume iteration from. If not provided, then
iteration starts from the beginning.
",
                    "type": "optional<string>",
                  },
                  "limit": {
                    "docs": "Max number of organization schedules returned in a page. Default is
50.
",
                    "type": "optional<integer>",
                  },
                  "mode": "optional<root.ListMode>",
                  "status": {
                    "docs": "The organization schedule statuses the filter matches.",
                    "type": "optional<list<root.OrgScheduleStatus>>",
                  },
                  "valid_until": "optional<root.DateFilter>",
                },
              },
              "headers": undefined,
              "name": "OrgSchedulesListRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.OrgSchedulesListResponse",
            },
          },
          "org-schedules-set-future": {
            "auth": true,
            "docs": "Sets next organization schedule fragment which must begin the day the
last existing fragment ends.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "id",
                  "org_schedule_fragment_id": "org_schedule_fragment_id",
                },
                "response": {
                  "body": {
                    "org_schedule": {
                      "created_date": "2023-01-01T12:00:00Z",
                      "default_weekly_org_schedule": {
                        "default_weekly_org_schedule": {
                          "key": "value",
                        },
                      },
                      "display_id": "display_id",
                      "id": "id",
                      "min_valid_days": 1,
                      "modified_date": "2023-01-01T12:00:00Z",
                      "name": "name",
                      "org_schedule_fragments": [
                        {},
                      ],
                      "status": "archived",
                      "timezone": "timezone",
                      "valid_until": "2023-01-01T12:00:00Z",
                      "weekly_org_schedules": [
                        {},
                      ],
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/org-schedules.set-future",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "Organization schedule ID.",
                    "type": "string",
                  },
                  "org_schedule_fragment_id": {
                    "docs": "Organization schedule Fragment ID.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "OrgSchedulesSetFutureRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.OrgSchedulesSetFutureResponse",
            },
          },
          "org-schedules-transition": {
            "auth": true,
            "docs": "Publishes or archives an organization schedule.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "id",
                  "status": "archived",
                },
                "response": {
                  "body": {
                    "org_schedule": {
                      "created_date": "2023-01-01T12:00:00Z",
                      "default_weekly_org_schedule": {
                        "default_weekly_org_schedule": {
                          "key": "value",
                        },
                      },
                      "display_id": "display_id",
                      "id": "id",
                      "min_valid_days": 1,
                      "modified_date": "2023-01-01T12:00:00Z",
                      "name": "name",
                      "org_schedule_fragments": [
                        {},
                      ],
                      "status": "archived",
                      "timezone": "timezone",
                      "valid_until": "2023-01-01T12:00:00Z",
                      "weekly_org_schedules": [
                        {},
                      ],
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/org-schedules.transition",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "Organization schedule ID.",
                    "type": "string",
                  },
                  "status": "root.OrgScheduleStatus",
                },
              },
              "headers": undefined,
              "name": "OrgSchedulesTransitionRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.OrgSchedulesTransitionResponse",
            },
          },
          "org-schedules-update": {
            "auth": true,
            "docs": "Updates an organization schedule.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "id",
                },
                "response": {
                  "body": {
                    "org_schedule": {
                      "created_date": "2023-01-01T12:00:00Z",
                      "default_weekly_org_schedule": {
                        "default_weekly_org_schedule": {
                          "key": "value",
                        },
                      },
                      "display_id": "display_id",
                      "id": "id",
                      "min_valid_days": 1,
                      "modified_date": "2023-01-01T12:00:00Z",
                      "name": "name",
                      "org_schedule_fragments": [
                        {},
                      ],
                      "status": "archived",
                      "timezone": "timezone",
                      "valid_until": "2023-01-01T12:00:00Z",
                      "weekly_org_schedules": [
                        {},
                      ],
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/org-schedules.update",
            "request": {
              "body": {
                "properties": {
                  "default_weekly_org_schedule": "optional<root.SetWeeklyOrgSchedule>",
                  "id": {
                    "docs": "Organization schedule ID.",
                    "type": "string",
                  },
                  "min_valid_days": {
                    "docs": "Organization schedule must be valid for at least this many days in
the future. Meaning organization schedule fragments must cover this
period. 0 if omitted.
",
                    "type": "optional<integer>",
                  },
                  "name": {
                    "docs": "Human-readable name.",
                    "type": "optional<string>",
                  },
                  "org_schedule_fragments": {
                    "docs": "List of organization schedule fragments with no overlaps or gaps.
",
                    "type": "optional<list<root.SetOrgScheduleFragmentSummary>>",
                  },
                  "timezone": {
                    "docs": "Timezone in which the organization schedule applies. Expected to be
a valid IANA time zone name such as America/New_York.
",
                    "type": "optional<string>",
                  },
                  "weekly_org_schedules": {
                    "docs": "If this day belongs to a named period according to the currently
active organization schedule fragment, a weekly organization
schedule from this list with the corresponding name will apply.
",
                    "type": "optional<list<root.SetWeeklyOrgSchedule>>",
                  },
                },
              },
              "headers": undefined,
              "name": "OrgSchedulesUpdateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.OrgSchedulesUpdateResponse",
            },
          },
        },
      },
    },
    "search.yml": {
      "docs": "DevRev search.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "search",
        "endpoints": {
          "core": {
            "auth": true,
            "docs": "Searches for records based on a given query.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "query-parameters": {
                  "query": "query",
                },
                "response": {
                  "body": {
                    "cursor": "cursor",
                    "results": [],
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/search.core",
            "request": {
              "name": "SearchCoreQuery",
              "query-parameters": {
                "cursor": {
                  "docs": "The cursor from where to begin iteration. Start from beginning if not
provided.
",
                  "type": "optional<string>",
                },
                "limit": {
                  "docs": "The maximum number of items to return in a page. The default is '10'.
",
                  "type": "optional<integer>",
                },
                "namespaces": {
                  "allow-multiple": true,
                  "docs": "The namespaces to search in.",
                  "type": "optional<root.SearchNamespace>",
                },
                "query": {
                  "docs": "The query string. Search query language:
https://docs.devrev.ai/product/search#fields
",
                  "type": "string",
                },
                "sort_by": {
                  "docs": "The property on which to sort the search results. The default is
RELEVANCE.
",
                  "type": "optional<root.SearchSortByParam>",
                },
                "sort_order": {
                  "docs": "Sorting order. The default is DESCENDING.",
                  "type": "optional<root.SearchSortOrderParam>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.SearchCoreResponse",
            },
          },
          "corePost": {
            "auth": true,
            "docs": "Searches for records based on a given query.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "query": "query",
                },
                "response": {
                  "body": {
                    "cursor": "cursor",
                    "results": [],
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/search.core",
            "request": {
              "body": {
                "properties": {
                  "cursor": {
                    "docs": "The cursor from where to begin iteration. Start from beginning if
not provided.
",
                    "type": "optional<string>",
                  },
                  "limit": {
                    "docs": "The maximum number of items to return in a page. The default is
'10'.
",
                    "type": "optional<integer>",
                  },
                  "namespaces": {
                    "docs": "The namespaces to search in.",
                    "type": "optional<list<root.SearchNamespace>>",
                  },
                  "query": {
                    "docs": "The query string. Search query language:
https://docs.devrev.ai/product/search#fields
",
                    "type": "string",
                  },
                  "sort_by": "optional<root.SearchSortByParam>",
                  "sort_order": "optional<root.SearchSortOrderParam>",
                },
              },
              "headers": undefined,
              "name": "SearchCoreRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.SearchCoreResponse",
            },
          },
        },
      },
    },
    "serviceAccounts.yml": {
      "docs": "Service account interactions",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "service-accounts",
        "endpoints": {
          "get": {
            "auth": true,
            "docs": "Gets a service account.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "query-parameters": {
                  "id": "id",
                },
                "response": {
                  "body": {
                    "service_account": {
                      "created_date": "2023-01-01T12:00:00Z",
                      "display_id": "display_id",
                      "display_name": "display_name",
                      "display_picture": {
                        "display_id": "display_id",
                        "id": "id",
                      },
                      "email": "email",
                      "full_name": "full_name",
                      "id": "id",
                      "modified_date": "2023-01-01T12:00:00Z",
                      "phone_numbers": [
                        "phone_numbers",
                      ],
                      "state": "active",
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/service-accounts.get",
            "request": {
              "name": "ServiceAccountsGetQuery",
              "query-parameters": {
                "id": {
                  "docs": "The ID of the requested service account.",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.ServiceAccountsGetResponse",
            },
          },
          "getPost": {
            "auth": true,
            "docs": "Gets a service account.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "id",
                },
                "response": {
                  "body": {
                    "service_account": {
                      "created_date": "2023-01-01T12:00:00Z",
                      "display_id": "display_id",
                      "display_name": "display_name",
                      "display_picture": {
                        "display_id": "display_id",
                        "id": "id",
                      },
                      "email": "email",
                      "full_name": "full_name",
                      "id": "id",
                      "modified_date": "2023-01-01T12:00:00Z",
                      "phone_numbers": [
                        "phone_numbers",
                      ],
                      "state": "active",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/service-accounts.get",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The ID of the requested service account.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "ServiceAccountsGetRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.ServiceAccountsGetResponse",
            },
          },
        },
      },
    },
    "slas.yml": {
      "docs": "Management APIs for Service Level Agreements.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "slas",
        "endpoints": {
          "assign": {
            "auth": true,
            "docs": " Assigns the SLA to a set of Rev organizations.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "rev_orgs": [
                    "rev_orgs",
                  ],
                },
                "response": {
                  "body": {
                    "results": [
                      {
                        "error": {
                          "message": "message",
                          "status": 1,
                        },
                        "rev_org": {
                          "id": "id",
                        },
                      },
                    ],
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/slas.assign",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The SLA which would be assigned to the Rev organizations. If
omitted, the SLA of all the rev organizations referenced will be
unset.
",
                    "type": "optional<string>",
                  },
                  "rev_orgs": {
                    "docs": "The Rev organizations to apply the SLA to.",
                    "type": "list<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "SlasAssignRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.SlasAssignResponse",
            },
          },
          "create": {
            "auth": true,
            "docs": "Creates an SLA in draft status.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "name": "name",
                },
                "response": {
                  "body": {
                    "sla": {
                      "compensation": {
                        "compensation": {
                          "key": "value",
                        },
                      },
                      "created_date": "2023-01-01T12:00:00Z",
                      "description": "description",
                      "display_id": "display_id",
                      "evaluation_period": "monthly",
                      "id": "id",
                      "modified_date": "2023-01-01T12:00:00Z",
                      "name": "name",
                      "policies": [
                        {},
                      ],
                      "status": "archived",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/slas.create",
            "request": {
              "body": {
                "properties": {
                  "account_selector": "optional<root.AccountsFilters>",
                  "description": {
                    "docs": "Description of the purpose and capabilities of the SLA.",
                    "type": "optional<string>",
                  },
                  "evaluation_period": "optional<root.SlaEvaluationPeriod>",
                  "name": {
                    "docs": "Human-readable name.",
                    "type": "string",
                  },
                  "policies": {
                    "docs": "The policies encompassed by this SLA, ordered in decreasing
priority.
",
                    "type": "optional<list<root.SetSlaPolicy>>",
                  },
                },
              },
              "headers": undefined,
              "name": "SlasCreateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.SlasCreateResponse",
            },
          },
          "get": {
            "auth": true,
            "docs": "Gets an SLA.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "query-parameters": {
                  "id": "id",
                },
                "response": {
                  "body": {
                    "sla": {
                      "compensation": {
                        "compensation": {
                          "key": "value",
                        },
                      },
                      "created_date": "2023-01-01T12:00:00Z",
                      "description": "description",
                      "display_id": "display_id",
                      "evaluation_period": "monthly",
                      "id": "id",
                      "modified_date": "2023-01-01T12:00:00Z",
                      "name": "name",
                      "policies": [
                        {},
                      ],
                      "status": "archived",
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/slas.get",
            "request": {
              "name": "SlasGetQuery",
              "query-parameters": {
                "id": {
                  "docs": "The ID of the SLA to get.",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.SlasGetResponse",
            },
          },
          "getPost": {
            "auth": true,
            "docs": "Gets an SLA.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "id",
                },
                "response": {
                  "body": {
                    "sla": {
                      "compensation": {
                        "compensation": {
                          "key": "value",
                        },
                      },
                      "created_date": "2023-01-01T12:00:00Z",
                      "description": "description",
                      "display_id": "display_id",
                      "evaluation_period": "monthly",
                      "id": "id",
                      "modified_date": "2023-01-01T12:00:00Z",
                      "name": "name",
                      "policies": [
                        {},
                      ],
                      "status": "archived",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/slas.get",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The ID of the SLA to get.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "SlasGetRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.SlasGetResponse",
            },
          },
          "list": {
            "auth": true,
            "docs": "Lists SLAs matching a filter.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "next_cursor": "next_cursor",
                    "prev_cursor": "prev_cursor",
                    "slas": [
                      {
                        "created_date": "2023-01-01T12:00:00Z",
                        "description": "description",
                        "display_id": "display_id",
                        "evaluation_period": "monthly",
                        "id": "id",
                        "modified_date": "2023-01-01T12:00:00Z",
                        "name": "name",
                        "policies": [
                          {},
                        ],
                        "status": "archived",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/slas.list",
            "request": {
              "name": "SlasListQuery",
              "query-parameters": {
                "cursor": {
                  "docs": "The cursor to resume iteration from. If not provided, then iteration
starts from the beginning.
",
                  "type": "optional<string>",
                },
                "limit": {
                  "docs": "The maximum number of SLAs to return. The default is '50'.",
                  "type": "optional<integer>",
                },
                "mode": {
                  "docs": "The iteration mode to use, otherwise if not set, then "after" is
used.
",
                  "type": "optional<root.ListMode>",
                },
                "status": {
                  "allow-multiple": true,
                  "docs": "The SLA statuses the filter matches.",
                  "type": "optional<root.SlaStatus>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.SlasListResponse",
            },
          },
          "listPost": {
            "auth": true,
            "docs": "Lists SLAs matching a filter.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {},
                "response": {
                  "body": {
                    "next_cursor": "next_cursor",
                    "prev_cursor": "prev_cursor",
                    "slas": [
                      {
                        "created_date": "2023-01-01T12:00:00Z",
                        "description": "description",
                        "display_id": "display_id",
                        "evaluation_period": "monthly",
                        "id": "id",
                        "modified_date": "2023-01-01T12:00:00Z",
                        "name": "name",
                        "policies": [
                          {},
                        ],
                        "status": "archived",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/slas.list",
            "request": {
              "body": {
                "properties": {
                  "cursor": {
                    "docs": "The cursor to resume iteration from. If not provided, then
iteration starts from the beginning.
",
                    "type": "optional<string>",
                  },
                  "limit": {
                    "docs": "The maximum number of SLAs to return. The default is '50'.
",
                    "type": "optional<integer>",
                  },
                  "mode": "optional<root.ListMode>",
                  "status": {
                    "docs": "The SLA statuses the filter matches.",
                    "type": "optional<list<root.SlaStatus>>",
                  },
                },
              },
              "headers": undefined,
              "name": "SlasListRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.SlasListResponse",
            },
          },
          "metric-definitions-list": {
            "auth": true,
            "docs": "Lists metric definitions matching a filter.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "metric_definitions": [
                      {
                        "created_date": "2023-01-01T12:00:00Z",
                        "display_id": "display_id",
                        "id": "id",
                        "modified_date": "2023-01-01T12:00:00Z",
                      },
                    ],
                    "next_cursor": "next_cursor",
                    "prev_cursor": "prev_cursor",
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/metric-definitions.list",
            "request": {
              "name": "MetricDefinitionsListQuery",
              "query-parameters": {
                "applies_to_type": {
                  "allow-multiple": true,
                  "docs": "The type of objects the metric definition applies to.",
                  "type": "optional<root.MetricDefinitionAppliesTo>",
                },
                "cursor": {
                  "docs": "The cursor to resume iteration from. If not provided, then iteration
starts from the beginning.
",
                  "type": "optional<string>",
                },
                "limit": {
                  "docs": "The maximum number of records to return. The default is '50'.
",
                  "type": "optional<integer>",
                },
                "mode": {
                  "docs": "The iteration mode to use, otherwise if not set, then "after" is
used.
",
                  "type": "optional<root.ListMode>",
                },
                "type": {
                  "allow-multiple": true,
                  "docs": "The type of metric definitions sought.",
                  "type": "optional<root.MetricDefinitionMetricType>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.MetricDefinitionsListResponse",
            },
          },
          "metric-definitions-list-post": {
            "auth": true,
            "docs": "Lists metric definitions matching a filter.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {},
                "response": {
                  "body": {
                    "metric_definitions": [
                      {
                        "created_date": "2023-01-01T12:00:00Z",
                        "display_id": "display_id",
                        "id": "id",
                        "modified_date": "2023-01-01T12:00:00Z",
                      },
                    ],
                    "next_cursor": "next_cursor",
                    "prev_cursor": "prev_cursor",
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/metric-definitions.list",
            "request": {
              "body": {
                "properties": {
                  "applies_to_type": {
                    "docs": "The type of objects the metric definition applies to.",
                    "type": "optional<list<root.MetricDefinitionAppliesTo>>",
                  },
                  "cursor": {
                    "docs": "The cursor to resume iteration from. If not provided, then
iteration starts from the beginning.
",
                    "type": "optional<string>",
                  },
                  "limit": {
                    "docs": "The maximum number of records to return. The default is '50'.
",
                    "type": "optional<integer>",
                  },
                  "mode": "optional<root.ListMode>",
                  "type": {
                    "docs": "The type of metric definitions sought.",
                    "type": "optional<list<root.MetricDefinitionMetricType>>",
                  },
                },
              },
              "headers": undefined,
              "name": "MetricDefinitionsListRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.MetricDefinitionsListResponse",
            },
          },
          "transition": {
            "auth": true,
            "docs": "Changes the status of an SLA.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "id",
                  "status": "archived",
                },
                "response": {
                  "body": {
                    "sla": {
                      "compensation": {
                        "compensation": {
                          "key": "value",
                        },
                      },
                      "created_date": "2023-01-01T12:00:00Z",
                      "description": "description",
                      "display_id": "display_id",
                      "evaluation_period": "monthly",
                      "id": "id",
                      "modified_date": "2023-01-01T12:00:00Z",
                      "name": "name",
                      "policies": [
                        {},
                      ],
                      "status": "archived",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/slas.transition",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The updated SLA.",
                    "type": "string",
                  },
                  "status": "root.SlaStatus",
                },
              },
              "headers": undefined,
              "name": "SlasTransitionRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.SlasTransitionResponse",
            },
          },
          "update": {
            "auth": true,
            "docs": "Updates a draft SLA.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "id",
                },
                "response": {
                  "body": {
                    "sla": {
                      "compensation": {
                        "compensation": {
                          "key": "value",
                        },
                      },
                      "created_date": "2023-01-01T12:00:00Z",
                      "description": "description",
                      "display_id": "display_id",
                      "evaluation_period": "monthly",
                      "id": "id",
                      "modified_date": "2023-01-01T12:00:00Z",
                      "name": "name",
                      "policies": [
                        {},
                      ],
                      "status": "archived",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/slas.update",
            "request": {
              "body": {
                "properties": {
                  "account_selector": "optional<root.AccountsFilters>",
                  "description": {
                    "docs": "Description of the purpose and capabilities of the SLA.",
                    "type": "optional<string>",
                  },
                  "evaluation_period": "optional<root.SlaEvaluationPeriod>",
                  "id": {
                    "docs": "The SLA's ID.",
                    "type": "string",
                  },
                  "name": {
                    "docs": "Human-readable name.",
                    "type": "optional<string>",
                  },
                  "policies": {
                    "docs": "The policies encompassed by this SLA, ordered in decreasing
priority, the whole array will be overwritten by the contents of
this array.
",
                    "type": "optional<list<root.SetSlaPolicy>>",
                  },
                },
              },
              "headers": undefined,
              "name": "SlasUpdateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.SlasUpdateResponse",
            },
          },
        },
      },
    },
    "snapIns.yml": {
      "docs": "DevRev snap-ins interactions.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "snap-ins",
        "endpoints": {
          "resources": {
            "auth": true,
            "docs": "Gets snap-in resources for a user in a snap-in.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "query-parameters": {
                  "id": "id",
                  "user": "user",
                },
                "response": {
                  "body": {
                    "event_sources": {
                      "key": "key",
                      "value": "value",
                    },
                    "inputs": {
                      "inputs": {
                        "key": "value",
                      },
                    },
                    "keyrings": {
                      "key": "key",
                      "value": {
                        "id": "id",
                        "secret": "secret",
                      },
                    },
                    "snap_in_version": {
                      "display_id": "display_id",
                      "id": "id",
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/snap-ins.resources",
            "request": {
              "name": "SnapInsResourcesQuery",
              "query-parameters": {
                "id": {
                  "docs": "The ID of the snap-in to get resources for.",
                  "type": "string",
                },
                "user": {
                  "docs": "The ID of the user to get resources for.",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.SnapInsResourcesResponse",
            },
          },
          "resourcesPost": {
            "auth": true,
            "docs": "Gets snap-in resources for a user in a snap-in.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "id",
                  "user": "user",
                },
                "response": {
                  "body": {
                    "event_sources": {
                      "key": "key",
                      "value": "value",
                    },
                    "inputs": {
                      "inputs": {
                        "key": "value",
                      },
                    },
                    "keyrings": {
                      "key": "key",
                      "value": {
                        "id": "id",
                        "secret": "secret",
                      },
                    },
                    "snap_in_version": {
                      "display_id": "display_id",
                      "id": "id",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/snap-ins.resources",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The ID of the snap-in to get resources for.",
                    "type": "string",
                  },
                  "user": {
                    "docs": "The ID of the user to get resources for.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "SnapInsResourcesRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.SnapInsResourcesResponse",
            },
          },
        },
      },
    },
    "snapWidgets.yml": {
      "docs": "SnapWidget APIs",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "snap-widgets",
        "endpoints": {
          "create": {
            "auth": true,
            "docs": "Create a snap widget object.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "path": "/snap-widgets.create",
            "request": {
              "body": "root.SnapWidgetsCreateRequest",
            },
            "response": {
              "docs": "Success.",
              "type": "root.SnapWidgetsCreateResponse",
            },
          },
        },
      },
    },
    "sysUsers.yml": {
      "docs": "System user interactions",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "sys-users",
        "endpoints": {
          "list": {
            "auth": true,
            "docs": "Lists system users within your organization.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "next_cursor": "next_cursor",
                    "prev_cursor": "prev_cursor",
                    "sys_users": [
                      {
                        "created_date": "2023-01-01T12:00:00Z",
                        "display_id": "display_id",
                        "display_name": "display_name",
                        "display_picture": {
                          "id": "id",
                        },
                        "email": "email",
                        "full_name": "full_name",
                        "id": "id",
                        "modified_date": "2023-01-01T12:00:00Z",
                        "phone_numbers": [
                          "phone_numbers",
                        ],
                        "state": "active",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/sys-users.list",
            "request": {
              "name": "SysUsersListQuery",
              "query-parameters": {
                "cursor": {
                  "docs": "The cursor to resume iteration from. If not provided, then iteration
starts from the beginning.
",
                  "type": "optional<string>",
                },
                "limit": {
                  "docs": "The maximum number of system users to return. Value can range from
'1' to '100', with a default of '50'.
",
                  "type": "optional<integer>",
                },
                "mode": {
                  "docs": "The iteration mode to use, otherwise if not set, then "after" is
used.
",
                  "type": "optional<root.ListMode>",
                },
                "sort_by": {
                  "allow-multiple": true,
                  "docs": "Fields to sort the system users by and the direction to sort them.
",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.SysUsersListResponse",
            },
          },
          "listPost": {
            "auth": true,
            "docs": "Lists system users within your organization.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {},
                "response": {
                  "body": {
                    "next_cursor": "next_cursor",
                    "prev_cursor": "prev_cursor",
                    "sys_users": [
                      {
                        "created_date": "2023-01-01T12:00:00Z",
                        "display_id": "display_id",
                        "display_name": "display_name",
                        "display_picture": {
                          "id": "id",
                        },
                        "email": "email",
                        "full_name": "full_name",
                        "id": "id",
                        "modified_date": "2023-01-01T12:00:00Z",
                        "phone_numbers": [
                          "phone_numbers",
                        ],
                        "state": "active",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/sys-users.list",
            "request": {
              "body": {
                "properties": {
                  "cursor": {
                    "docs": "The cursor to resume iteration from. If not provided, then
iteration starts from the beginning.
",
                    "type": "optional<string>",
                  },
                  "limit": {
                    "docs": "The maximum number of system users to return. Value can range from
'1' to '100', with a default of '50'.
",
                    "type": "optional<integer>",
                  },
                  "mode": "optional<root.ListMode>",
                  "sort_by": {
                    "docs": "Fields to sort the system users by and the direction to sort them.
",
                    "type": "optional<list<string>>",
                  },
                },
              },
              "headers": undefined,
              "name": "SysUsersListRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.SysUsersListResponse",
            },
          },
          "update": {
            "auth": true,
            "docs": "Updates the system user.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "id",
                },
                "response": {
                  "body": {
                    "sys_user": {
                      "created_date": "2023-01-01T12:00:00Z",
                      "display_id": "display_id",
                      "display_name": "display_name",
                      "display_picture": {
                        "display_id": "display_id",
                        "id": "id",
                      },
                      "email": "email",
                      "full_name": "full_name",
                      "id": "id",
                      "modified_date": "2023-01-01T12:00:00Z",
                      "phone_numbers": [
                        "phone_numbers",
                      ],
                      "state": "active",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/sys-users.update",
            "request": {
              "body": {
                "properties": {
                  "display_name": {
                    "docs": "Updated display name for the system user.",
                    "type": "optional<string>",
                  },
                  "display_picture": {
                    "docs": "Artifact ID of the system user's new display picture.",
                    "type": "optional<string>",
                  },
                  "full_name": {
                    "docs": "Updated full name for the system user.",
                    "type": "optional<string>",
                  },
                  "id": {
                    "docs": "The ID of system user to update.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "SysUsersUpdateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.SysUsersUpdateResponse",
            },
          },
        },
      },
    },
    "tags.yml": {
      "docs": "DevRev tag interactions.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "tags",
        "endpoints": {
          "create": {
            "auth": true,
            "docs": "Creates a new tag, which is used to create associations between objects
and a logical concept denoted by the tag's name.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "name": "name",
                },
                "response": {
                  "body": {
                    "tag": {
                      "allowed_values": [
                        "allowed_values",
                      ],
                      "created_date": "2023-01-01T12:00:00Z",
                      "description": "description",
                      "display_id": "display_id",
                      "id": "id",
                      "modified_date": "2023-01-01T12:00:00Z",
                      "name": "name",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/tags.create",
            "request": {
              "body": {
                "properties": {
                  "allowed_values": {
                    "docs": "The allowed values for the tag, or empty if no values are
permitted.
",
                    "type": "optional<list<string>>",
                  },
                  "description": {
                    "docs": "The description for the tag.",
                    "type": "optional<string>",
                  },
                  "name": {
                    "docs": "The name for the tag, which must be unique across all tags.
",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "TagsCreateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.TagsCreateResponse",
            },
          },
          "delete": {
            "auth": true,
            "docs": "Deletes a tag.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "TAG-12345",
                },
                "response": {
                  "body": {
                    "string": {
                      "key": "value",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/tags.delete",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The ID of the tag to delete.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "TagsDeleteRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.TagsDeleteResponse",
            },
          },
          "get": {
            "auth": true,
            "docs": "Gets a tag's information.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "query-parameters": {
                  "id": "TAG-12345",
                },
                "response": {
                  "body": {
                    "tag": {
                      "allowed_values": [
                        "allowed_values",
                      ],
                      "created_date": "2023-01-01T12:00:00Z",
                      "description": "description",
                      "display_id": "display_id",
                      "id": "id",
                      "modified_date": "2023-01-01T12:00:00Z",
                      "name": "name",
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/tags.get",
            "request": {
              "name": "TagsGetQuery",
              "query-parameters": {
                "id": {
                  "docs": "The requested tag's ID.",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.TagsGetResponse",
            },
          },
          "getPost": {
            "auth": true,
            "docs": "Gets a tag's information.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "TAG-12345",
                },
                "response": {
                  "body": {
                    "tag": {
                      "allowed_values": [
                        "allowed_values",
                      ],
                      "created_date": "2023-01-01T12:00:00Z",
                      "description": "description",
                      "display_id": "display_id",
                      "id": "id",
                      "modified_date": "2023-01-01T12:00:00Z",
                      "name": "name",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/tags.get",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The requested tag's ID.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "TagsGetRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.TagsGetResponse",
            },
          },
          "list": {
            "auth": true,
            "docs": "Lists the available tags.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "next_cursor": "next_cursor",
                    "prev_cursor": "prev_cursor",
                    "tags": [
                      {
                        "allowed_values": [
                          "allowed_values",
                        ],
                        "created_date": "2023-01-01T12:00:00Z",
                        "description": "description",
                        "display_id": "display_id",
                        "id": "id",
                        "modified_date": "2023-01-01T12:00:00Z",
                        "name": "name",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/tags.list",
            "request": {
              "name": "TagsListQuery",
              "query-parameters": {
                "cursor": {
                  "docs": "The cursor to resume iteration from. If not provided, then iteration
starts from the beginning.
",
                  "type": "optional<string>",
                },
                "limit": {
                  "docs": "The maximum number of tags to return. The default is '50'.",
                  "type": "optional<integer>",
                },
                "mode": {
                  "docs": "The iteration mode to use, otherwise if not set, then "after" is
used.
",
                  "type": "optional<root.ListMode>",
                },
                "name": {
                  "allow-multiple": true,
                  "docs": "Filters for tags with the provided names.",
                  "type": "optional<string>",
                },
                "sort_by": {
                  "allow-multiple": true,
                  "docs": "Fields to sort tags by and the direction to sort them.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.TagsListResponse",
            },
          },
          "listPost": {
            "auth": true,
            "docs": "Lists the available tags.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {},
                "response": {
                  "body": {
                    "next_cursor": "next_cursor",
                    "prev_cursor": "prev_cursor",
                    "tags": [
                      {
                        "allowed_values": [
                          "allowed_values",
                        ],
                        "created_date": "2023-01-01T12:00:00Z",
                        "description": "description",
                        "display_id": "display_id",
                        "id": "id",
                        "modified_date": "2023-01-01T12:00:00Z",
                        "name": "name",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/tags.list",
            "request": {
              "body": {
                "properties": {
                  "cursor": {
                    "docs": "The cursor to resume iteration from. If not provided, then
iteration starts from the beginning.
",
                    "type": "optional<string>",
                  },
                  "limit": {
                    "docs": "The maximum number of tags to return. The default is '50'.
",
                    "type": "optional<integer>",
                  },
                  "mode": "optional<root.ListMode>",
                  "name": {
                    "docs": "Filters for tags with the provided names.",
                    "type": "optional<list<string>>",
                  },
                  "sort_by": {
                    "docs": "Fields to sort tags by and the direction to sort them.",
                    "type": "optional<list<string>>",
                  },
                },
              },
              "headers": undefined,
              "name": "TagsListRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.TagsListResponse",
            },
          },
          "update": {
            "auth": true,
            "docs": "Updates a tag's information.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "TAG-12345",
                },
                "response": {
                  "body": {
                    "tag": {
                      "allowed_values": [
                        "allowed_values",
                      ],
                      "created_date": "2023-01-01T12:00:00Z",
                      "description": "description",
                      "display_id": "display_id",
                      "id": "id",
                      "modified_date": "2023-01-01T12:00:00Z",
                      "name": "name",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/tags.update",
            "request": {
              "body": {
                "properties": {
                  "allowed_values": "optional<root.TagsUpdateAllowedValues>",
                  "description": {
                    "docs": "The updated description of the tag.",
                    "type": "optional<string>",
                  },
                  "id": {
                    "docs": "The ID of the tag to update.",
                    "type": "string",
                  },
                  "name": {
                    "docs": "The updated name of the tag. The name must be unique across all
tags.
",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "TagsUpdateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.TagsUpdateResponse",
            },
          },
        },
      },
    },
    "timelineEntries.yml": {
      "docs": "APIs to manage timeline entries for objects.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "timeline-entries",
        "endpoints": {
          "create": {
            "auth": true,
            "docs": "Creates a new entry on an object's timeline.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "path": "/timeline-entries.create",
            "request": {
              "body": "root.TimelineEntriesCreateRequest",
            },
            "response": {
              "docs": "Success.",
              "type": "root.TimelineEntriesCreateResponse",
            },
          },
          "delete": {
            "auth": true,
            "docs": "Deletes an entry from an object's timeline.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "don:core:<partition>:devo/<dev-org-id>:ticket/123:timeline_event/<timeline-event-id>",
                },
                "response": {
                  "body": {
                    "string": {
                      "key": "value",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/timeline-entries.delete",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The ID of the timeline entry to delete.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "TimelineEntriesDeleteRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.TimelineEntriesDeleteResponse",
            },
          },
          "get": {
            "auth": true,
            "docs": "Gets an entry on an object's timeline.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "GET",
            "path": "/timeline-entries.get",
            "request": {
              "name": "TimelineEntriesGetQuery",
              "query-parameters": {
                "id": {
                  "docs": "The ID of the timeline entry to get.",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.TimelineEntriesGetResponse",
            },
          },
          "getPost": {
            "auth": true,
            "docs": "Gets an entry on an object's timeline.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "path": "/timeline-entries.get",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The ID of the timeline entry to get.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "TimelineEntriesGetRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.TimelineEntriesGetResponse",
            },
          },
          "list": {
            "auth": true,
            "docs": "Lists the timeline entries for an object.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "query-parameters": {
                  "object": "PROD-12345",
                },
                "response": {
                  "body": {
                    "next_cursor": "next_cursor",
                    "prev_cursor": "prev_cursor",
                    "timeline_entries": [],
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/timeline-entries.list",
            "request": {
              "name": "TimelineEntriesListQuery",
              "query-parameters": {
                "collections": {
                  "allow-multiple": true,
                  "docs": "The collection(s) to list entries from, otherwise if not provided,
all entries are returned.
",
                  "type": "optional<root.TimelineEntriesCollection>",
                },
                "cursor": {
                  "docs": "The cursor to resume iteration from. If not provided, then iteration
starts from the beginning.
",
                  "type": "optional<string>",
                },
                "labels": {
                  "allow-multiple": true,
                  "docs": "Filters for entries containing at least one of the provided labels,
otherwise if no labels are provided, then no label filtering is done.
",
                  "type": "optional<string>",
                },
                "limit": {
                  "docs": "The maximum number of entries to return. If not set, then this
defaults to \`50\`.
",
                  "type": "optional<integer>",
                },
                "mode": {
                  "docs": "The iteration mode to use, otherwise if not set, then "after" is
used.
",
                  "type": "optional<root.ListMode>",
                },
                "object": {
                  "docs": "The ID of the object to list timeline entries for.",
                  "type": "string",
                },
                "visibility": {
                  "allow-multiple": true,
                  "docs": "The visibility of the timeline entries to filter for. Note this is a
strict filter, such that only entries with the exact visibilities
specified will be returned.
",
                  "type": "optional<root.TimelineEntryVisibility>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.TimelineEntriesListResponse",
            },
          },
          "listPost": {
            "auth": true,
            "docs": "Lists the timeline entries for an object.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "object": "PROD-12345",
                },
                "response": {
                  "body": {
                    "next_cursor": "next_cursor",
                    "prev_cursor": "prev_cursor",
                    "timeline_entries": [],
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/timeline-entries.list",
            "request": {
              "body": {
                "properties": {
                  "collections": {
                    "docs": "The collection(s) to list entries from, otherwise if not provided,
all entries are returned.
",
                    "type": "optional<list<root.TimelineEntriesCollection>>",
                  },
                  "cursor": {
                    "docs": "The cursor to resume iteration from. If not provided, then
iteration starts from the beginning.
",
                    "type": "optional<string>",
                  },
                  "labels": {
                    "docs": "Filters for entries containing at least one of the provided labels,
otherwise if no labels are provided, then no label filtering is
done.
",
                    "type": "optional<list<string>>",
                  },
                  "limit": {
                    "docs": "The maximum number of entries to return. If not set, then this
defaults to \`50\`.
",
                    "type": "optional<integer>",
                  },
                  "mode": "optional<root.ListMode>",
                  "object": {
                    "docs": "The ID of the object to list timeline entries for.",
                    "type": "string",
                  },
                  "visibility": {
                    "docs": "The visibility of the timeline entries to filter for. Note this is
a strict filter, such that only entries with the exact visibilities
specified will be returned.
",
                    "type": "optional<list<root.TimelineEntryVisibility>>",
                  },
                },
              },
              "headers": undefined,
              "name": "TimelineEntriesListRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.TimelineEntriesListResponse",
            },
          },
          "update": {
            "auth": true,
            "docs": "Updates an entry on an object's timeline.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "path": "/timeline-entries.update",
            "request": {
              "body": "root.TimelineEntriesUpdateRequest",
            },
            "response": {
              "docs": "Success.",
              "type": "root.TimelineEntriesUpdateResponse",
            },
          },
        },
      },
    },
    "webhooks.yml": {
      "docs": "Webhook event APIs.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "webhooks",
        "endpoints": {
          "create": {
            "auth": true,
            "docs": "Creates a new webhook target.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "url": "url",
                },
                "response": {
                  "body": {
                    "webhook": {
                      "created_date": "2023-01-01T12:00:00Z",
                      "display_id": "display_id",
                      "event_types": [
                        "account_created",
                      ],
                      "id": "id",
                      "modified_date": "2023-01-01T12:00:00Z",
                      "secret": "secret",
                      "status": "active",
                      "url": "url",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/webhooks.create",
            "request": {
              "body": {
                "properties": {
                  "event_types": {
                    "docs": "The event types that the webhook endpoint will receive.",
                    "type": "optional<list<root.WebhookEventType>>",
                  },
                  "secret": {
                    "docs": "The secret to use when verifying webhook events. If provided, the
secret must be between 8 and 32 bytes (inclusive). If not set, a
secret will be automatically generated and provided in the
response.
",
                    "type": "optional<string>",
                  },
                  "url": {
                    "docs": "The URL of the webhook endpoint.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "WebhooksCreateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.WebhooksCreateResponse",
            },
          },
          "delete": {
            "auth": true,
            "docs": "Deletes the requested webhook.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "don:integration:<partition>:devo/<dev-org-id>:webhook/<webhook-id>",
                },
                "response": {
                  "body": {
                    "string": {
                      "key": "value",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/webhooks.delete",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "ID for the webhook.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "WebhooksDeleteRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.WebhooksDeleteResponse",
            },
          },
          "get": {
            "auth": true,
            "docs": "Gets the requested webhook's information.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "query-parameters": {
                  "id": "don:integration:<partition>:devo/<dev-org-id>:webhook/<webhook-id>",
                },
                "response": {
                  "body": {
                    "webhook": {
                      "created_date": "2023-01-01T12:00:00Z",
                      "display_id": "display_id",
                      "event_types": [
                        "account_created",
                      ],
                      "id": "id",
                      "modified_date": "2023-01-01T12:00:00Z",
                      "secret": "secret",
                      "status": "active",
                      "url": "url",
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/webhooks.get",
            "request": {
              "name": "WebhooksGetQuery",
              "query-parameters": {
                "id": {
                  "docs": "ID for the webhook.",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.WebhooksGetResponse",
            },
          },
          "getPost": {
            "auth": true,
            "docs": "Gets the requested webhook's information.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "don:integration:<partition>:devo/<dev-org-id>:webhook/<webhook-id>",
                },
                "response": {
                  "body": {
                    "webhook": {
                      "created_date": "2023-01-01T12:00:00Z",
                      "display_id": "display_id",
                      "event_types": [
                        "account_created",
                      ],
                      "id": "id",
                      "modified_date": "2023-01-01T12:00:00Z",
                      "secret": "secret",
                      "status": "active",
                      "url": "url",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/webhooks.get",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "ID for the webhook.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "WebhooksGetRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.WebhooksGetResponse",
            },
          },
          "list": {
            "auth": true,
            "docs": "Lists the webhooks.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "webhooks": [
                      {
                        "created_date": "2023-01-01T12:00:00Z",
                        "display_id": "display_id",
                        "event_types": [
                          "account_created",
                        ],
                        "id": "id",
                        "modified_date": "2023-01-01T12:00:00Z",
                        "secret": "secret",
                        "status": "active",
                        "url": "url",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/webhooks.list",
            "response": {
              "docs": "Success.",
              "type": "root.WebhooksListResponse",
            },
          },
          "listPost": {
            "auth": true,
            "docs": "Lists the webhooks.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {},
                "response": {
                  "body": {
                    "webhooks": [
                      {
                        "created_date": "2023-01-01T12:00:00Z",
                        "display_id": "display_id",
                        "event_types": [
                          "account_created",
                        ],
                        "id": "id",
                        "modified_date": "2023-01-01T12:00:00Z",
                        "secret": "secret",
                        "status": "active",
                        "url": "url",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/webhooks.list",
            "request": {
              "body": "root.WebhooksListRequest",
            },
            "response": {
              "docs": "Success.",
              "type": "root.WebhooksListResponse",
            },
          },
          "update": {
            "auth": true,
            "docs": "Updates the requested webhook.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "don:integration:<partition>:devo/<dev-org-id>:webhook/<webhook-id>",
                },
                "response": {
                  "body": {
                    "webhook": {
                      "created_date": "2023-01-01T12:00:00Z",
                      "display_id": "display_id",
                      "event_types": [
                        "account_created",
                      ],
                      "id": "id",
                      "modified_date": "2023-01-01T12:00:00Z",
                      "secret": "secret",
                      "status": "active",
                      "url": "url",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/webhooks.update",
            "request": {
              "body": {
                "properties": {
                  "action": "optional<root.WebhooksUpdateAction>",
                  "event_types": "optional<root.WebhooksUpdateRequestEventTypes>",
                  "id": {
                    "docs": "ID for the webhook.",
                    "type": "string",
                  },
                  "secret": {
                    "docs": "If provided, updates the secret that's used when verifying webhook
events, which must be between 8 and 32 bytes (inclusive). Otherwise
if empty, then a new secret is generated. If the webhook is active,
then its status will transition to the 'unverified' state and it
won't receive any object events until successfully verified.
",
                    "type": "optional<string>",
                  },
                  "url": {
                    "docs": "The webhook's updated URL. If the webhook is active, then the
webhook's status will transition to the 'unverified' state and it
won't receive any object events until successfully verified.
",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "WebhooksUpdateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.WebhooksUpdateResponse",
            },
          },
        },
      },
    },
    "works.yml": {
      "docs": "DevRev work interactions.",
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "works",
        "endpoints": {
          "code-changes-create": {
            "auth": true,
            "docs": "Create CodeChange object.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {},
                "response": {
                  "body": {
                    "code_change": {
                      "branch": "branch",
                      "created_date": "2023-01-01T12:00:00Z",
                      "description": "description",
                      "display_id": "display_id",
                      "external_identifier": "external_identifier",
                      "filtered_loc": {
                        "file_count": 1,
                        "lines_added": 1,
                        "lines_deleted": 1,
                        "lines_modified": 1,
                      },
                      "id": "id",
                      "modified_date": "2023-01-01T12:00:00Z",
                      "repo_url": "repo_url",
                      "source": "github",
                      "title": "title",
                      "total_loc": {
                        "file_count": 1,
                        "lines_added": 1,
                        "lines_deleted": 1,
                        "lines_modified": 1,
                      },
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/code-changes.create",
            "request": {
              "body": "root.CodeChangesCreateRequest",
            },
            "response": {
              "docs": "Success.",
              "type": "root.CodeChangesCreateResponse",
            },
          },
          "code-changes-delete": {
            "auth": true,
            "docs": "Delete CodeChange object.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "id",
                },
                "response": {
                  "body": {
                    "string": {
                      "key": "value",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/code-changes.delete",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "ID of the code change object which is to be deleted.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "CodeChangesDeleteRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.CodeChangesDeleteResponse",
            },
          },
          "code-changes-get": {
            "auth": true,
            "docs": "Get CodeChange object.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "query-parameters": {
                  "id": "id",
                },
                "response": {
                  "body": {
                    "code_change": {
                      "branch": "branch",
                      "created_date": "2023-01-01T12:00:00Z",
                      "description": "description",
                      "display_id": "display_id",
                      "external_identifier": "external_identifier",
                      "filtered_loc": {
                        "file_count": 1,
                        "lines_added": 1,
                        "lines_deleted": 1,
                        "lines_modified": 1,
                      },
                      "id": "id",
                      "modified_date": "2023-01-01T12:00:00Z",
                      "repo_url": "repo_url",
                      "source": "github",
                      "title": "title",
                      "total_loc": {
                        "file_count": 1,
                        "lines_added": 1,
                        "lines_deleted": 1,
                        "lines_modified": 1,
                      },
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/code-changes.get",
            "request": {
              "name": "CodeChangesGetQuery",
              "query-parameters": {
                "id": {
                  "docs": "The code change object ID.",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.CodeChangesGetResponse",
            },
          },
          "code-changes-get-post": {
            "auth": true,
            "docs": "Get CodeChange object.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "id",
                },
                "response": {
                  "body": {
                    "code_change": {
                      "branch": "branch",
                      "created_date": "2023-01-01T12:00:00Z",
                      "description": "description",
                      "display_id": "display_id",
                      "external_identifier": "external_identifier",
                      "filtered_loc": {
                        "file_count": 1,
                        "lines_added": 1,
                        "lines_deleted": 1,
                        "lines_modified": 1,
                      },
                      "id": "id",
                      "modified_date": "2023-01-01T12:00:00Z",
                      "repo_url": "repo_url",
                      "source": "github",
                      "title": "title",
                      "total_loc": {
                        "file_count": 1,
                        "lines_added": 1,
                        "lines_deleted": 1,
                        "lines_modified": 1,
                      },
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/code-changes.get",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The code change object ID.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "CodeChangesGetRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.CodeChangesGetResponse",
            },
          },
          "code-changes-list": {
            "auth": true,
            "docs": "List CodeChange objects.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "code_changes": [
                      {
                        "branch": "branch",
                        "created_date": "2023-01-01T12:00:00Z",
                        "description": "description",
                        "display_id": "display_id",
                        "external_identifier": "external_identifier",
                        "id": "id",
                        "modified_date": "2023-01-01T12:00:00Z",
                        "repo_url": "repo_url",
                        "source": "github",
                        "title": "title",
                      },
                    ],
                    "next_cursor": "next_cursor",
                    "prev_cursor": "prev_cursor",
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/code-changes.list",
            "request": {
              "name": "CodeChangesListQuery",
              "query-parameters": {
                "cursor": {
                  "docs": "The cursor to resume iteration from. If not provided, then iteration
starts from the beginning.
",
                  "type": "optional<string>",
                },
                "limit": {
                  "docs": "The maximum number of code change objects to return. The default is
'50'.
",
                  "type": "optional<integer>",
                },
                "mode": {
                  "docs": "The iteration mode to use, otherwise if not set, then "after" is
used.
",
                  "type": "optional<root.ListMode>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.CodeChangesListResponse",
            },
          },
          "code-changes-list-post": {
            "auth": true,
            "docs": "List CodeChange objects.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {},
                "response": {
                  "body": {
                    "code_changes": [
                      {
                        "branch": "branch",
                        "created_date": "2023-01-01T12:00:00Z",
                        "description": "description",
                        "display_id": "display_id",
                        "external_identifier": "external_identifier",
                        "id": "id",
                        "modified_date": "2023-01-01T12:00:00Z",
                        "repo_url": "repo_url",
                        "source": "github",
                        "title": "title",
                      },
                    ],
                    "next_cursor": "next_cursor",
                    "prev_cursor": "prev_cursor",
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/code-changes.list",
            "request": {
              "body": {
                "properties": {
                  "created_date": "optional<root.DateFilter>",
                  "cursor": {
                    "docs": "The cursor to resume iteration from. If not provided, then
iteration starts from the beginning.
",
                    "type": "optional<string>",
                  },
                  "limit": {
                    "docs": "The maximum number of code change objects to return. The default is
'50'.
",
                    "type": "optional<integer>",
                  },
                  "mode": "optional<root.ListMode>",
                  "modified_date": "optional<root.DateFilter>",
                },
              },
              "headers": undefined,
              "name": "CodeChangesListRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.CodeChangesListResponse",
            },
          },
          "code-changes-update": {
            "auth": true,
            "docs": "Update CodeChange object.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "id",
                },
                "response": {
                  "body": {
                    "code_change": {
                      "branch": "branch",
                      "created_date": "2023-01-01T12:00:00Z",
                      "description": "description",
                      "display_id": "display_id",
                      "external_identifier": "external_identifier",
                      "filtered_loc": {
                        "file_count": 1,
                        "lines_added": 1,
                        "lines_deleted": 1,
                        "lines_modified": 1,
                      },
                      "id": "id",
                      "modified_date": "2023-01-01T12:00:00Z",
                      "repo_url": "repo_url",
                      "source": "github",
                      "title": "title",
                      "total_loc": {
                        "file_count": 1,
                        "lines_added": 1,
                        "lines_deleted": 1,
                        "lines_modified": 1,
                      },
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/code-changes.update",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The ID of the code change object to be updated.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "CodeChangesUpdateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.CodeChangesUpdateResponse",
            },
          },
          "create": {
            "auth": true,
            "docs": "Creates new work ([issue](https://devrev.ai/docs/product/build),
[ticket](https://devrev.ai/docs/product/support)) item.
[task](https://docs.devrev.ai/product/tasks) and opportunity work types
are supported in the beta version.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "path": "/works.create",
            "request": {
              "body": "root.WorksCreateRequest",
            },
            "response": {
              "docs": "Success.",
              "type": "root.WorksCreateResponse",
            },
          },
          "delete": {
            "auth": true,
            "docs": "Deletes a work item.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {
                  "id": "ISS-12345",
                },
                "response": {
                  "body": {
                    "string": {
                      "key": "value",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/works.delete",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The work's ID.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "WorksDeleteRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.WorksDeleteResponse",
            },
          },
          "export": {
            "auth": true,
            "docs": "Exports a collection of work items.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "works": [],
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/works.export",
            "request": {
              "name": "WorksExportQuery",
              "query-parameters": {
                "applies_to_part": {
                  "allow-multiple": true,
                  "docs": "Filters for work belonging to any of the provided parts.",
                  "type": "optional<string>",
                },
                "created_by": {
                  "allow-multiple": true,
                  "docs": "Filters for work created by any of these users.",
                  "type": "optional<string>",
                },
                "custom_fields": {
                  "docs": "Filters for custom fields.",
                  "type": "optional<map<string, unknown>>",
                },
                "first": {
                  "docs": "The number of work items to return. The default is '50', the maximum
is '5000'.
",
                  "type": "optional<integer>",
                },
                "issue.accounts": {
                  "allow-multiple": true,
                  "docs": "Filters for issues with any of the provided Accounts.",
                  "type": "optional<string>",
                },
                "issue.priority": {
                  "allow-multiple": true,
                  "docs": "Filters for issues with any of the provided priorities.",
                  "type": "optional<root.IssuePriority>",
                },
                "issue.priority_v2": {
                  "allow-multiple": true,
                  "docs": "Filters for issues with any of the provided priority enum ids.
",
                  "type": "optional<integer>",
                },
                "issue.rev_orgs": {
                  "allow-multiple": true,
                  "docs": "Filters for issues with any of the provided Rev organizations.
",
                  "type": "optional<string>",
                },
                "issue.subtype": {
                  "allow-multiple": true,
                  "docs": "Filters for issues with any of the provided subtypes.",
                  "type": "optional<string>",
                },
                "opportunity.account": {
                  "allow-multiple": true,
                  "docs": "Filters for opportunities belonging to any of the provided accounts.
",
                  "type": "optional<string>",
                },
                "opportunity.contacts": {
                  "allow-multiple": true,
                  "docs": "Filters for opportunities with any of the provided contacts.
",
                  "type": "optional<string>",
                },
                "opportunity.subtype": {
                  "allow-multiple": true,
                  "docs": "Filters for opportunity with any of the provided subtypes.",
                  "type": "optional<string>",
                },
                "owned_by": {
                  "allow-multiple": true,
                  "docs": "Filters for work owned by any of these users.",
                  "type": "optional<string>",
                },
                "reported_by": {
                  "allow-multiple": true,
                  "docs": "Filters for work reported by any of these users.",
                  "type": "optional<string>",
                },
                "sort_by": {
                  "allow-multiple": true,
                  "docs": "Fields to sort the work items by and the direction to sort them.
",
                  "type": "optional<string>",
                },
                "stage.name": {
                  "allow-multiple": true,
                  "docs": "Filters for records in the provided stage(s) by name.",
                  "type": "optional<string>",
                },
                "staged_info.is_staged": {
                  "docs": "Filters for issues that are staged.",
                  "type": "optional<boolean>",
                },
                "sync_metadata.last_sync_in.status": {
                  "allow-multiple": true,
                  "docs": "Filters for works with selected sync statuses.",
                  "type": "optional<root.SyncMetadataFilterSyncInFilterStatus>",
                },
                "sync_metadata.last_sync_in.sync_unit": {
                  "allow-multiple": true,
                  "docs": "Filters for works modified with selected sync units.",
                  "type": "optional<string>",
                },
                "sync_metadata.last_sync_out.status": {
                  "allow-multiple": true,
                  "docs": "Filters for works with selected sync statuses.",
                  "type": "optional<root.SyncMetadataFilterSyncOutFilterStatus>",
                },
                "sync_metadata.last_sync_out.sync_unit": {
                  "allow-multiple": true,
                  "docs": "Filters for works modified with selected sync units.",
                  "type": "optional<string>",
                },
                "sync_metadata.origin_system": {
                  "allow-multiple": true,
                  "docs": "Filters for issues synced from this specific origin system.
",
                  "type": "optional<string>",
                },
                "tags": {
                  "allow-multiple": true,
                  "docs": "Filters for work with any of the provided tags.",
                  "type": "optional<string>",
                },
                "ticket.channels": {
                  "allow-multiple": true,
                  "docs": "Filters for tickets with any of the provided channels.",
                  "type": "optional<root.TicketChannels>",
                },
                "ticket.group": {
                  "allow-multiple": true,
                  "docs": "Filters for tickets belonging to specific groups.",
                  "type": "optional<string>",
                },
                "ticket.is_spam": {
                  "docs": "Filters for tickets that are spam.",
                  "type": "optional<boolean>",
                },
                "ticket.needs_response": {
                  "docs": "Filters for tickets that need response.",
                  "type": "optional<boolean>",
                },
                "ticket.rev_org": {
                  "allow-multiple": true,
                  "docs": "Filters for tickets that are associated with any of the provided Rev
organizations.
",
                  "type": "optional<string>",
                },
                "ticket.severity": {
                  "allow-multiple": true,
                  "docs": "Filters for tickets with any of the provided severities.",
                  "type": "optional<root.TicketSeverity>",
                },
                "ticket.sla_summary.stage": {
                  "allow-multiple": true,
                  "docs": "Filters for records with any of the provided SLA stages.",
                  "type": "optional<root.SlaSummaryStage>",
                },
                "ticket.source_channel": {
                  "allow-multiple": true,
                  "docs": "Filters for tickets with any of the provided source channels.
",
                  "type": "optional<string>",
                },
                "ticket.subtype": {
                  "allow-multiple": true,
                  "docs": "Filters for tickets with any of the provided subtypes.",
                  "type": "optional<string>",
                },
                "type": {
                  "allow-multiple": true,
                  "docs": "Filters for work of the provided types.",
                  "type": "optional<root.WorkType>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.WorksExportResponse",
            },
          },
          "exportPost": {
            "auth": true,
            "docs": "Exports a collection of work items.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {},
                "response": {
                  "body": {
                    "works": [],
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/works.export",
            "request": {
              "body": {
                "properties": {
                  "actual_close_date": "optional<root.DateFilter>",
                  "applies_to_part": {
                    "docs": "Filters for work belonging to any of the provided parts.",
                    "type": "optional<list<string>>",
                  },
                  "created_by": {
                    "docs": "Filters for work created by any of these users.",
                    "type": "optional<list<string>>",
                  },
                  "created_date": "optional<root.DateFilter>",
                  "custom_fields": {
                    "docs": "Filters for custom fields.",
                    "type": "optional<map<string, unknown>>",
                  },
                  "first": {
                    "docs": "The number of work items to return. The default is '50', the
maximum is '5000'.
",
                    "type": "optional<integer>",
                  },
                  "issue": "optional<root.WorksFilterIssue>",
                  "modified_date": "optional<root.DateFilter>",
                  "opportunity": "optional<root.WorksFilterOpportunity>",
                  "owned_by": {
                    "docs": "Filters for work owned by any of these users.",
                    "type": "optional<list<string>>",
                  },
                  "reported_by": {
                    "docs": "Filters for work reported by any of these users.",
                    "type": "optional<list<string>>",
                  },
                  "sort_by": {
                    "docs": "Fields to sort the work items by and the direction to sort them.
",
                    "type": "optional<list<string>>",
                  },
                  "stage": "optional<root.StageFilter>",
                  "staged_info": "optional<root.StagedInfoFilter>",
                  "sync_metadata": "optional<root.SyncMetadataFilter>",
                  "tags": {
                    "docs": "Filters for work with any of the provided tags.",
                    "type": "optional<list<string>>",
                  },
                  "target_close_date": "optional<root.DateFilter>",
                  "ticket": "optional<root.WorksFilterTicket>",
                  "type": {
                    "docs": "Filters for work of the provided types.",
                    "type": "optional<list<root.WorkType>>",
                  },
                },
              },
              "headers": undefined,
              "name": "WorksExportRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.WorksExportResponse",
            },
          },
          "get": {
            "auth": true,
            "docs": "Gets a work item's information.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "GET",
            "path": "/works.get",
            "request": {
              "name": "WorksGetQuery",
              "query-parameters": {
                "id": {
                  "docs": "The work's ID.",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.WorksGetResponse",
            },
          },
          "getPost": {
            "auth": true,
            "docs": "Gets a work item's information.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "path": "/works.get",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The work's ID.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "WorksGetRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.WorksGetResponse",
            },
          },
          "list": {
            "auth": true,
            "docs": "Lists a collection of work items.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "next_cursor": "next_cursor",
                    "prev_cursor": "prev_cursor",
                    "works": [],
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/works.list",
            "request": {
              "name": "WorksListQuery",
              "query-parameters": {
                "applies_to_part": {
                  "allow-multiple": true,
                  "docs": "Filters for work belonging to any of the provided parts.",
                  "type": "optional<string>",
                },
                "created_by": {
                  "allow-multiple": true,
                  "docs": "Filters for work created by any of these users.",
                  "type": "optional<string>",
                },
                "cursor": {
                  "docs": "The cursor to resume iteration from. If not provided, then iteration
starts from the beginning.
",
                  "type": "optional<string>",
                },
                "custom_fields": {
                  "docs": "Filters for custom fields.",
                  "type": "optional<map<string, unknown>>",
                },
                "issue.accounts": {
                  "allow-multiple": true,
                  "docs": "Filters for issues with any of the provided Accounts.",
                  "type": "optional<string>",
                },
                "issue.priority": {
                  "allow-multiple": true,
                  "docs": "Filters for issues with any of the provided priorities.",
                  "type": "optional<root.IssuePriority>",
                },
                "issue.priority_v2": {
                  "allow-multiple": true,
                  "docs": "Filters for issues with any of the provided priority enum ids.
",
                  "type": "optional<integer>",
                },
                "issue.rev_orgs": {
                  "allow-multiple": true,
                  "docs": "Filters for issues with any of the provided Rev organizations.
",
                  "type": "optional<string>",
                },
                "issue.subtype": {
                  "allow-multiple": true,
                  "docs": "Filters for issues with any of the provided subtypes.",
                  "type": "optional<string>",
                },
                "limit": {
                  "docs": "The maximum number of works to return. The default is '50'.
",
                  "type": "optional<integer>",
                },
                "mode": {
                  "docs": "The iteration mode to use, otherwise if not set, then "after" is
used.
",
                  "type": "optional<root.ListMode>",
                },
                "opportunity.account": {
                  "allow-multiple": true,
                  "docs": "Filters for opportunities belonging to any of the provided accounts.
",
                  "type": "optional<string>",
                },
                "opportunity.contacts": {
                  "allow-multiple": true,
                  "docs": "Filters for opportunities with any of the provided contacts.
",
                  "type": "optional<string>",
                },
                "opportunity.subtype": {
                  "allow-multiple": true,
                  "docs": "Filters for opportunity with any of the provided subtypes.",
                  "type": "optional<string>",
                },
                "owned_by": {
                  "allow-multiple": true,
                  "docs": "Filters for work owned by any of these users.",
                  "type": "optional<string>",
                },
                "reported_by": {
                  "allow-multiple": true,
                  "docs": "Filters for work reported by any of these users.",
                  "type": "optional<string>",
                },
                "sort_by": {
                  "allow-multiple": true,
                  "docs": "Fields to sort the works by and the direction to sort them.
",
                  "type": "optional<string>",
                },
                "stage.name": {
                  "allow-multiple": true,
                  "docs": "Filters for records in the provided stage(s) by name.",
                  "type": "optional<string>",
                },
                "staged_info.is_staged": {
                  "docs": "Filters for issues that are staged.",
                  "type": "optional<boolean>",
                },
                "sync_metadata.last_sync_in.status": {
                  "allow-multiple": true,
                  "docs": "Filters for works with selected sync statuses.",
                  "type": "optional<root.SyncMetadataFilterSyncInFilterStatus>",
                },
                "sync_metadata.last_sync_in.sync_unit": {
                  "allow-multiple": true,
                  "docs": "Filters for works modified with selected sync units.",
                  "type": "optional<string>",
                },
                "sync_metadata.last_sync_out.status": {
                  "allow-multiple": true,
                  "docs": "Filters for works with selected sync statuses.",
                  "type": "optional<root.SyncMetadataFilterSyncOutFilterStatus>",
                },
                "sync_metadata.last_sync_out.sync_unit": {
                  "allow-multiple": true,
                  "docs": "Filters for works modified with selected sync units.",
                  "type": "optional<string>",
                },
                "sync_metadata.origin_system": {
                  "allow-multiple": true,
                  "docs": "Filters for issues synced from this specific origin system.
",
                  "type": "optional<string>",
                },
                "tags": {
                  "allow-multiple": true,
                  "docs": "Filters for work with any of the provided tags.",
                  "type": "optional<string>",
                },
                "ticket.channels": {
                  "allow-multiple": true,
                  "docs": "Filters for tickets with any of the provided channels.",
                  "type": "optional<root.TicketChannels>",
                },
                "ticket.group": {
                  "allow-multiple": true,
                  "docs": "Filters for tickets belonging to specific groups.",
                  "type": "optional<string>",
                },
                "ticket.is_spam": {
                  "docs": "Filters for tickets that are spam.",
                  "type": "optional<boolean>",
                },
                "ticket.needs_response": {
                  "docs": "Filters for tickets that need response.",
                  "type": "optional<boolean>",
                },
                "ticket.rev_org": {
                  "allow-multiple": true,
                  "docs": "Filters for tickets that are associated with any of the provided Rev
organizations.
",
                  "type": "optional<string>",
                },
                "ticket.severity": {
                  "allow-multiple": true,
                  "docs": "Filters for tickets with any of the provided severities.",
                  "type": "optional<root.TicketSeverity>",
                },
                "ticket.sla_summary.stage": {
                  "allow-multiple": true,
                  "docs": "Filters for records with any of the provided SLA stages.",
                  "type": "optional<root.SlaSummaryStage>",
                },
                "ticket.source_channel": {
                  "allow-multiple": true,
                  "docs": "Filters for tickets with any of the provided source channels.
",
                  "type": "optional<string>",
                },
                "ticket.subtype": {
                  "allow-multiple": true,
                  "docs": "Filters for tickets with any of the provided subtypes.",
                  "type": "optional<string>",
                },
                "type": {
                  "allow-multiple": true,
                  "docs": "Filters for work of the provided types.",
                  "type": "optional<root.WorkType>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.WorksListResponse",
            },
          },
          "listPost": {
            "auth": true,
            "docs": "Lists a collection of work items.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "request": {},
                "response": {
                  "body": {
                    "next_cursor": "next_cursor",
                    "prev_cursor": "prev_cursor",
                    "works": [],
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/works.list",
            "request": {
              "body": {
                "properties": {
                  "actual_close_date": "optional<root.DateFilter>",
                  "applies_to_part": {
                    "docs": "Filters for work belonging to any of the provided parts.",
                    "type": "optional<list<string>>",
                  },
                  "created_by": {
                    "docs": "Filters for work created by any of these users.",
                    "type": "optional<list<string>>",
                  },
                  "created_date": "optional<root.DateFilter>",
                  "cursor": {
                    "docs": "The cursor to resume iteration from. If not provided, then
iteration starts from the beginning.
",
                    "type": "optional<string>",
                  },
                  "custom_fields": {
                    "docs": "Filters for custom fields.",
                    "type": "optional<map<string, unknown>>",
                  },
                  "issue": "optional<root.WorksFilterIssue>",
                  "limit": {
                    "docs": "The maximum number of works to return. The default is '50'.
",
                    "type": "optional<integer>",
                  },
                  "mode": "optional<root.ListMode>",
                  "modified_date": "optional<root.DateFilter>",
                  "opportunity": "optional<root.WorksFilterOpportunity>",
                  "owned_by": {
                    "docs": "Filters for work owned by any of these users.",
                    "type": "optional<list<string>>",
                  },
                  "reported_by": {
                    "docs": "Filters for work reported by any of these users.",
                    "type": "optional<list<string>>",
                  },
                  "sort_by": {
                    "docs": "Fields to sort the works by and the direction to sort them.
",
                    "type": "optional<list<string>>",
                  },
                  "stage": "optional<root.StageFilter>",
                  "staged_info": "optional<root.StagedInfoFilter>",
                  "sync_metadata": "optional<root.SyncMetadataFilter>",
                  "tags": {
                    "docs": "Filters for work with any of the provided tags.",
                    "type": "optional<list<string>>",
                  },
                  "target_close_date": "optional<root.DateFilter>",
                  "ticket": "optional<root.WorksFilterTicket>",
                  "type": {
                    "docs": "Filters for work of the provided types.",
                    "type": "optional<list<root.WorkType>>",
                  },
                },
              },
              "headers": undefined,
              "name": "WorksListRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.WorksListResponse",
            },
          },
          "update": {
            "auth": true,
            "docs": "Updates a work item's information.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "path": "/works.update",
            "request": {
              "body": "root.WorksUpdateRequest",
            },
            "response": {
              "docs": "Success.",
              "type": "root.WorksUpdateResponse",
            },
          },
        },
      },
    },
  },
  "packageMarkerFile": {
    "errors": {
      "BadRequestError": {
        "status-code": 400,
        "type": "ErrorBadRequest",
      },
      "ConflictError": {
        "status-code": 409,
        "type": "ErrorConflict",
      },
      "ForbiddenError": {
        "status-code": 403,
        "type": "ErrorForbidden",
      },
      "InternalServerError": {
        "status-code": 500,
        "type": "ErrorInternalServerError",
      },
      "NotFoundError": {
        "status-code": 404,
        "type": "ErrorNotFound",
      },
      "ServiceUnavailableError": {
        "status-code": 503,
        "type": "ErrorServiceUnavailable",
      },
      "TooManyRequestsError": {
        "status-code": 429,
        "type": "ErrorTooManyRequests",
      },
      "UnauthorizedError": {
        "status-code": 401,
        "type": "ErrorUnauthorized",
      },
    },
    "types": {
      "AccessLevel": {
        "enum": [
          "external",
          "internal",
          "private",
          "public",
          "restricted",
        ],
      },
      "AccountSearchSummary": {
        "docs": undefined,
        "extends": [
          "SearchSummaryBase",
        ],
        "properties": {
          "account": "AccountSummary",
        },
      },
      "AccountSummary": "OrgBaseSummary",
      "AccountsCreateResponse": {
        "docs": "The response to creating a new account.",
        "properties": {
          "account": "account",
          "default_rev_org": "RevOrg",
        },
      },
      "AccountsDeleteResponse": {
        "docs": "The response to deleting an account.",
        "type": "map<string, unknown>",
      },
      "AccountsExportResponse": {
        "docs": "The response to exporting a collection of accounts.",
        "properties": {
          "accounts": {
            "docs": "The exported accounts.",
            "type": "list<account>",
          },
        },
      },
      "AccountsFilters": {
        "docs": undefined,
        "properties": {
          "created_by": {
            "docs": "Filters for accounts created by the specified user(s).",
            "type": "optional<list<string>>",
          },
          "created_date": "optional<DateTimeFilter>",
          "custom_fields": {
            "docs": "Filters for custom fields.",
            "type": "optional<map<string, unknown>>",
          },
          "display_name": {
            "docs": "Array of display names of accounts to be filtered.",
            "type": "optional<list<string>>",
          },
          "domains": {
            "docs": "Domains for accounts to be filtered.",
            "type": "optional<list<string>>",
          },
          "external_refs": {
            "docs": "Array of references of accounts to be filtered.",
            "type": "optional<list<string>>",
          },
          "modified_date": "optional<DateTimeFilter>",
          "owned_by": {
            "docs": "Filters for accounts owned by the specified user(s).",
            "type": "optional<list<string>>",
          },
          "stage": {
            "docs": "Filters for accounts on specified stages.",
            "type": "optional<list<string>>",
          },
          "tags": {
            "docs": "List of tags to be filtered.",
            "type": "optional<list<string>>",
          },
        },
      },
      "AccountsGetResponse": {
        "docs": "The returned account.",
        "properties": {
          "account": "account",
        },
      },
      "AccountsListResponse": {
        "docs": "The response to listing all accounts matching the filter criteria.
",
        "properties": {
          "accounts": {
            "docs": "List containing all the accounts",
            "type": "list<account>",
          },
          "next_cursor": {
            "docs": "The cursor used to iterate subsequent results in accordance to the
sort order. If not set, then no later elements exist.
",
            "type": "optional<string>",
          },
          "prev_cursor": {
            "docs": "The cursor used to iterate preceding results in accordance to the
sort order. If not set, then no prior elements exist.
",
            "type": "optional<string>",
          },
        },
      },
      "AccountsUpdateRequestArtifacts": {
        "docs": undefined,
        "properties": {
          "set": {
            "docs": "Sets the IDs to the provided artifact IDs.",
            "type": "optional<list<string>>",
          },
        },
      },
      "AccountsUpdateResponse": {
        "docs": "Updated account object.",
        "properties": {
          "account": "account",
        },
      },
      "AggregatedSchema": {
        "docs": "List of custom fields from multiple source fragments.",
        "type": "map<string, unknown>",
      },
      "AggregatedSchemaGetResponse": {
        "docs": undefined,
        "properties": {
          "schema": "AggregatedSchema",
        },
      },
      "AggregationDetail": {
        "docs": "Stores aggregation type and dimension information.",
        "properties": {
          "aggregation_type": "AggregationDetailAggregationType",
          "unique_dimension": {
            "docs": "Unique dimension if provided to be considered for grouping metering
data for the UOM.
",
            "type": "optional<string>",
          },
        },
      },
      "AggregationDetailAggregationType": {
        "docs": "Aggregation type to be used while aggregating the metering data for the
UOM. 1] Sum - sum of all the values for the meter in a given period Ex.
{ M1:2, M1:4 } => {M1:6} 2] Minimum - min of all the values for the
meter in a given period Ex. { M1:2, M1:4 } => {M1:2} 3] Maximum - max
of all the values for the meter in a given period Ex. { M1:2, M1:4 } =>
{M1:4} 4] Unique Count - Sum of distinct unique dimension observed for
the meter in the given period (not considering the data from the
previous billing period) Ex. January {M1:{VM:VM0}}, February
{M1:{VM:VM1}, M1:{VM:VM2}, M1:{VM:VM1}} => {M1:2} 5] Running Total -
Sum of distinct active unique dimension observed for a meter in the
given period, taking into consideration the active data from the
previous billing cycle Ex. January {M1:{VM:VM0,on}, {M1:{VM:VM1,off}
February {M1:{VM:VM2, on}, M1:{VM:VM2, off}, M1:{VM:VM3, on}} => {M1:3}
6] Duration - Sum of distinct active unique dimension duration for a
meter in the given period, taking into consideration the active data
from the previous month Ex. January15 {M1:{VM:VM0,on, 4}} February15
{M1:{VM:VM0,off}, February18 {M1:{VM:VM1,on,5} => M1->
30*4*charge_per_day + 10*5*charge_per_day 7] Latest - consider the
latest/last meter in the given period 8] Oldest - consider the
oldest/first record in the given period.
",
        "enum": [
          "duration",
          "latest",
          "maximum",
          "minimum",
          "oldest",
          "running_total",
          "sum",
          "unique_count",
        ],
      },
      "AppFragment": {
        "docs": undefined,
        "extends": [
          "CustomSchemaFragmentBase",
        ],
        "properties": {
          "app": {
            "docs": "App this fragment applies to.",
            "type": "optional<string>",
          },
        },
      },
      "AppFragmentSummary": "CustomSchemaFragmentBaseSummary",
      "ArticleSearchSummary": {
        "docs": undefined,
        "extends": [
          "SearchSummaryBase",
        ],
        "properties": {
          "article": "ArticleSummary",
        },
      },
      "ArticleStatus": {
        "docs": "Status of the article.",
        "enum": [
          "archived",
          "draft",
          "published",
          "review_needed",
        ],
      },
      "ArticleSummary": {
        "docs": undefined,
        "extends": [
          "AtomBaseSummary",
        ],
        "properties": {
          "resource": "optional<ResourceSummary>",
          "title": {
            "docs": "Title of the article.",
            "type": "optional<string>",
          },
        },
      },
      "ArticlesCountResponse": {
        "docs": undefined,
        "properties": {
          "count": {
            "docs": "The total number of articles matching the filter.",
            "type": "integer",
          },
        },
      },
      "ArticlesCreateRequestResource": {
        "docs": undefined,
        "properties": {
          "artifacts": {
            "docs": "IDs of the artifacts.",
            "type": "optional<list<string>>",
          },
          "published_version": {
            "docs": "The latest published version.",
            "type": "optional<string>",
          },
          "url": {
            "docs": "URL of the external article.",
            "type": "optional<string>",
          },
        },
      },
      "ArticlesCreateResponse": {
        "docs": "Create article response.",
        "properties": {
          "article": "article",
        },
      },
      "ArticlesDeleteResponse": "map<string, unknown>",
      "ArticlesGetResponse": {
        "docs": "Get article response.",
        "properties": {
          "article": "article",
        },
      },
      "ArticlesListResponse": {
        "docs": "List articles response.",
        "properties": {
          "articles": {
            "docs": "The article entries matching the request.",
            "type": "list<article>",
          },
          "next_cursor": {
            "docs": "The cursor used to iterate subsequent results in accordance to the
sort order. If not set, then no later elements exist.
",
            "type": "optional<string>",
          },
          "prev_cursor": {
            "docs": "The cursor used to iterate preceding results in accordance to the
sort order. If not set, then no prior elements exist.
",
            "type": "optional<string>",
          },
          "total": {
            "docs": "Total number of article items for the request.",
            "type": "integer",
          },
        },
      },
      "ArticlesUpdateRequestAppliesToParts": {
        "docs": undefined,
        "properties": {
          "set": {
            "docs": "Updates the parts that the article applies to.",
            "type": "optional<list<string>>",
          },
        },
      },
      "ArticlesUpdateRequestArtifacts": {
        "docs": undefined,
        "properties": {
          "set": {
            "docs": "Updates IDs of the artifacts.",
            "type": "optional<list<string>>",
          },
        },
      },
      "ArticlesUpdateRequestAuthoredBy": {
        "docs": undefined,
        "properties": {
          "set": {
            "docs": "Sets the users that authored the article.",
            "type": "optional<list<string>>",
          },
        },
      },
      "ArticlesUpdateRequestExtractedContent": {
        "docs": undefined,
        "properties": {
          "set": {
            "docs": "Update the ID of the extracted content.",
            "type": "optional<list<string>>",
          },
        },
      },
      "ArticlesUpdateRequestOwnedBy": {
        "docs": undefined,
        "properties": {
          "set": {
            "docs": "Sets the owner IDs to the provided user IDs. This must not be
empty.
",
            "type": "optional<list<string>>",
          },
        },
      },
      "ArticlesUpdateRequestReorder": {
        "docs": undefined,
        "properties": {
          "after": {
            "docs": "The article after which the reordered article is placed.",
            "type": "optional<string>",
          },
          "before": {
            "docs": "The article before which the reordered article is placed.
",
            "type": "optional<string>",
          },
        },
      },
      "ArticlesUpdateRequestSharedWith": {
        "docs": undefined,
        "properties": {
          "set": {
            "docs": "Sets the field to the provided membership list.",
            "type": "optional<list<SharedWithMembership>>",
          },
        },
      },
      "ArticlesUpdateRequestTags": {
        "docs": undefined,
        "properties": {
          "set": {
            "docs": "Sets the provided tags on the article.",
            "type": "optional<list<SetTagWithValue>>",
          },
        },
      },
      "ArticlesUpdateResponse": {
        "docs": undefined,
        "properties": {
          "article": "article",
        },
      },
      "Artifact": "AtomBase",
      "ArtifactSearchSummary": {
        "docs": undefined,
        "extends": [
          "SearchSummaryBase",
        ],
        "properties": {
          "artifact": "ArtifactSummary",
        },
      },
      "ArtifactSummary": "AtomBaseSummary",
      "ArtifactVersion": {
        "docs": "The version of the artifact.",
        "properties": {
          "modified_by": "optional<UserSummary>",
          "timestamp": {
            "docs": "The timestamp at which the version was created.",
            "type": "datetime",
          },
          "version": {
            "docs": "The version of the artifact.",
            "type": "string",
          },
        },
      },
      "ArtifactsGetResponse": {
        "docs": "The response to getting an artifact's information.",
        "properties": {
          "artifact": "Artifact",
          "version": "ArtifactVersion",
        },
      },
      "ArtifactsListResponse": {
        "docs": "The response to list artifacts attached to an object.",
        "properties": {
          "artifacts": {
            "docs": "The artifact's information.",
            "type": "list<Artifact>",
          },
        },
      },
      "ArtifactsLocateResponse": {
        "docs": "The response to getting an artifact's download URL.",
        "properties": {
          "expires_at": {
            "docs": "The expiration timestamp of the URL.",
            "type": "optional<datetime>",
          },
          "url": {
            "docs": "The artifact's download URL.",
            "type": "string",
          },
        },
      },
      "ArtifactsPrepareResponse": {
        "docs": "The response to preparing a URL to upload a file.",
        "properties": {
          "form_data": {
            "docs": "The POST policy form data.",
            "type": "list<ArtifactsPrepareResponseFormData>",
          },
          "id": {
            "docs": "The generated artifact's ID.",
            "type": "string",
          },
          "url": {
            "docs": "The URL that the file's data should be uploaded to.",
            "type": "string",
          },
        },
      },
      "ArtifactsPrepareResponseFormData": {
        "docs": undefined,
        "properties": {
          "key": {
            "docs": "Key of the form field.",
            "type": "string",
          },
          "value": {
            "docs": "Value corresponding to the key.",
            "type": "string",
          },
        },
      },
      "ArtifactsVersionsPrepareResponse": {
        "docs": "The response to preparing a new artifact version.",
        "properties": {
          "form_data": {
            "docs": "The POST policy form data.",
            "type": "list<ArtifactsVersionsPrepareResponseFormData>",
          },
          "url": {
            "docs": "The URL that the file's data should be uploaded to.",
            "type": "string",
          },
        },
      },
      "ArtifactsVersionsPrepareResponseFormData": {
        "docs": undefined,
        "properties": {
          "key": {
            "docs": "Key of the form field.",
            "type": "string",
          },
          "value": {
            "docs": "Value corresponding to the key.",
            "type": "string",
          },
        },
      },
      "AtomBase": {
        "docs": undefined,
        "properties": {
          "created_by": "optional<UserSummary>",
          "created_date": {
            "docs": "Timestamp when the object was created.",
            "type": "optional<datetime>",
          },
          "display_id": {
            "docs": "Human-readable object ID unique to the Dev organization.",
            "type": "optional<string>",
          },
          "id": {
            "docs": "Globally unique object ID.",
            "type": "string",
          },
          "modified_by": "optional<UserSummary>",
          "modified_date": {
            "docs": "Timestamp when the object was last modified.",
            "type": "optional<datetime>",
          },
        },
      },
      "AtomBaseSummary": {
        "docs": undefined,
        "properties": {
          "display_id": {
            "docs": "Human-readable object ID unique to the Dev organization.",
            "type": "optional<string>",
          },
          "id": {
            "docs": "Globally unique object ID.",
            "type": "string",
          },
        },
      },
      "AtomSummary": {
        "base-properties": {},
        "discriminant": "type",
        "docs": undefined,
        "union": {
          "account": "AccountSummary",
          "app_fragment": "AppFragmentSummary",
          "capability": "CapabilitySummary",
          "conversation": "ConversationSummary",
          "custom_type_fragment": "CustomTypeFragmentSummary",
          "dev_user": "DevUserSummary",
          "engagement": "EngagementSummary",
          "enhancement": "EnhancementSummary",
          "feature": "FeatureSummary",
          "issue": "IssueSummary",
          "meeting": "MeetingSummary",
          "opportunity": "OpportunitySummary",
          "product": "ProductSummary",
          "rev_org": "RevOrgSummary",
          "rev_user": "RevUserSummary",
          "service_account": "ServiceAccountSummary",
          "sys_user": "SysUserSummary",
          "tag": "TagSummary",
          "task": "TaskSummary",
          "tenant_fragment": "TenantFragmentSummary",
          "ticket": "TicketSummary",
          "timeline_comment": "TimelineCommentSummary",
          "webhook": "WebhookSummary",
        },
      },
      "AtomType": {
        "enum": [
          "account",
          "app_fragment",
          "capability",
          "conversation",
          "custom_type_fragment",
          "dev_user",
          "engagement",
          "enhancement",
          "feature",
          "issue",
          "meeting",
          "opportunity",
          "product",
          "rev_org",
          "rev_user",
          "service_account",
          "sys_user",
          "tag",
          "task",
          "tenant_fragment",
          "ticket",
          "timeline_comment",
          "webhook",
        ],
      },
      "AuthConnection": {
        "base-properties": {
          "display_name": {
            "docs": "Display name of the authentication connection. This name will be
visible to all the users when they sign in to this Dev
organization. For example, if the display_name is 'abclogin', then
it would appear on the login button as 'Log in to abclogin'.
",
            "type": "optional<string>",
          },
          "enabled": {
            "docs": "Whether the authentication connection is enabled or disabled. If
set to false, the authentication connection will not show up on the
login screen as a login option.
",
            "type": "optional<boolean>",
          },
          "id": {
            "docs": "ID of the authentication connection.",
            "type": "string",
          },
        },
        "discriminant": "type",
        "docs": "Connection object that specifies the configuration for an
authentication connection that is set up for a Dev organization.
",
        "union": {
          "google_apps": "AuthConnectionOptionsGoogleApps",
          "oidc": "AuthConnectionOptionsOidc",
          "samlp": "AuthConnectionOptionsSaml",
          "social": "AuthConnectionOptionsSocial",
          "waad": "AuthConnectionOptionsAzureAd",
        },
      },
      "AuthConnectionOptionsAzureAd": {
        "docs": "Object encapsulating the configuration parameters for an Azure AD
authentication connection.
",
        "properties": {
          "client_id": {
            "docs": "Client ID for the Azure authentication connection.",
            "type": "optional<string>",
          },
          "client_secret": {
            "docs": "Client secret for the Azure authentication connection.",
            "type": "optional<string>",
          },
          "domain": {
            "docs": "Domain URL of the Azure authentication connection.",
            "type": "optional<string>",
          },
        },
      },
      "AuthConnectionOptionsGoogleApps": {
        "docs": "Object encapsulating the configuration parameters for a Google Apps
authentication connection.
",
        "properties": {
          "client_id": {
            "docs": "Client ID for the Google Apps authentication connection.",
            "type": "optional<string>",
          },
          "client_secret": {
            "docs": "Client secret for the Google Apps authentication connection.
",
            "type": "optional<string>",
          },
          "tenant_domain": {
            "docs": "Tenant domain URL of the Google Apps authentication connection.
",
            "type": "optional<string>",
          },
        },
      },
      "AuthConnectionOptionsOidc": {
        "docs": "Object encapsulating the configuration parameters for an OIDC
authentication connection.
",
        "properties": {
          "client_id": {
            "docs": "Client ID for the OIDC authentication connection.",
            "type": "optional<string>",
          },
          "client_secret": {
            "docs": "Client secret for the OIDC authentication connection.",
            "type": "optional<string>",
          },
          "issuer": {
            "docs": "Issuer URL of the OIDC authentication connection.",
            "type": "optional<string>",
          },
        },
      },
      "AuthConnectionOptionsSaml": {
        "docs": "Object encapsulating the configuration parameters for a SAML
authentication connection.
",
        "properties": {
          "sign_in_endpoint": {
            "docs": "Sign In endpoint for the SAML authentication connection.",
            "type": "optional<string>",
          },
          "signing_cert": {
            "docs": "Signing certificate for the SAML authentication connection.
",
            "type": "optional<string>",
          },
        },
      },
      "AuthConnectionOptionsSocial": "map<string, unknown>",
      "AuthConnectionToggle": {
        "enum": [
          "disable",
          "enable",
        ],
      },
      "AuthConnectionType": {
        "docs": "Defines the type for the authentication connection. The configuration
for each authentication connection will depend on the type value.
",
        "enum": [
          "google_apps",
          "oidc",
          "samlp",
          "social",
          "waad",
        ],
      },
      "AuthToken": {
        "docs": undefined,
        "extends": [
          "AtomBase",
        ],
        "properties": {
          "client_id": {
            "docs": "An identifier that represents the application that requested the
token. Only applicable for application access tokens.
",
            "type": "optional<string>",
          },
          "expires_at": {
            "docs": "The time at which the token expires.",
            "type": "optional<datetime>",
          },
          "issued_at": {
            "docs": "The time at which the token was issued.",
            "type": "optional<datetime>",
          },
          "requested_token_type": "optional<AuthTokenRequestedTokenType>",
          "scopes": {
            "docs": "The scopes associated with the issued token.",
            "type": "optional<list<string>>",
          },
          "status": "optional<AuthTokenStatus>",
          "subject": {
            "docs": "The subject of the token.",
            "type": "optional<string>",
          },
          "token_hint": {
            "docs": "A hint that identifies the token.",
            "type": "optional<string>",
          },
        },
      },
      "AuthTokenGrantType": {
        "docs": "Specifies the process of obtaining a token.",
        "enum": [
          {
            "name": "UrnDevrevParamsOauthGrantTypeTokenIssue",
            "value": "urn:devrev:params:oauth:grant-type:token-issue",
          },
          {
            "name": "UrnIetfParamsOauthGrantTypeTokenExchange",
            "value": "urn:ietf:params:oauth:grant-type:token-exchange",
          },
        ],
      },
      "AuthTokenRequestedTokenType": {
        "docs": "The type of the requested token.",
        "enum": [
          {
            "name": "UrnDevrevParamsOauthTokenTypeAat",
            "value": "urn:devrev:params:oauth:token-type:aat",
          },
          {
            "name": "UrnDevrevParamsOauthTokenTypeAatPublic",
            "value": "urn:devrev:params:oauth:token-type:aat:public",
          },
          {
            "name": "UrnDevrevParamsOauthTokenTypeDev",
            "value": "urn:devrev:params:oauth:token-type:dev",
          },
          {
            "name": "UrnDevrevParamsOauthTokenTypeGat",
            "value": "urn:devrev:params:oauth:token-type:gat",
          },
          {
            "name": "UrnDevrevParamsOauthTokenTypePat",
            "value": "urn:devrev:params:oauth:token-type:pat",
          },
          {
            "name": "UrnDevrevParamsOauthTokenTypePatActAs",
            "value": "urn:devrev:params:oauth:token-type:pat:act-as",
          },
          {
            "name": "UrnDevrevParamsOauthTokenTypeRat",
            "value": "urn:devrev:params:oauth:token-type:rat",
          },
          {
            "name": "UrnDevrevParamsOauthTokenTypeRev",
            "value": "urn:devrev:params:oauth:token-type:rev",
          },
          {
            "name": "UrnDevrevParamsOauthTokenTypeSession",
            "value": "urn:devrev:params:oauth:token-type:session",
          },
          {
            "name": "UrnDevrevParamsOauthTokenTypeSessionDev0",
            "value": "urn:devrev:params:oauth:token-type:session:dev0",
          },
          {
            "name": "UrnDevrevParamsOauthTokenTypeSessionOnetime",
            "value": "urn:devrev:params:oauth:token-type:session:onetime",
          },
          {
            "name": "UrnDevrevParamsOauthTokenTypeSuper",
            "value": "urn:devrev:params:oauth:token-type:super",
          },
          {
            "name": "UrnDevrevParamsOauthTokenTypeSys",
            "value": "urn:devrev:params:oauth:token-type:sys",
          },
          {
            "name": "UrnIetfParamsOauthTokenTypeJwt",
            "value": "urn:ietf:params:oauth:token-type:jwt",
          },
        ],
      },
      "AuthTokenStatus": {
        "docs": "The status of the token.",
        "enum": [
          "active",
          "expired",
          "revoked",
        ],
      },
      "AuthTokenSubjectTokenType": {
        "docs": "The type of the subject token.",
        "enum": [
          {
            "name": "UrnDevrevParamsOauthTokenTypeJwtAuth0",
            "value": "urn:devrev:params:oauth:token-type:jwt:auth0",
          },
          {
            "name": "UrnDevrevParamsOauthTokenTypeJwtDev",
            "value": "urn:devrev:params:oauth:token-type:jwt:dev",
          },
          {
            "name": "UrnDevrevParamsOauthTokenTypeRat",
            "value": "urn:devrev:params:oauth:token-type:rat",
          },
          {
            "name": "UrnDevrevParamsOauthTokenTypeRevinfo",
            "value": "urn:devrev:params:oauth:token-type:revinfo",
          },
          {
            "name": "UrnDevrevParamsOauthTokenTypeSession",
            "value": "urn:devrev:params:oauth:token-type:session",
          },
          {
            "name": "UrnDevrevParamsOauthTokenTypeSysu",
            "value": "urn:devrev:params:oauth:token-type:sysu",
          },
          {
            "name": "UrnDevrevParamsOauthTokenTypeUserinfo",
            "value": "urn:devrev:params:oauth:token-type:userinfo",
          },
          {
            "name": "UrnDevrevParamsOauthTokenTypeUserinfoProfile",
            "value": "urn:devrev:params:oauth:token-type:userinfo:profile",
          },
          {
            "name": "UrnIetfParamsOauthTokenTypeJwt",
            "value": "urn:ietf:params:oauth:token-type:jwt",
          },
        ],
      },
      "AuthTokenTokenType": "literal<"bearer">",
      "AuthTokensCreateResponse": {
        "docs": "Response for the request to create a new token corresponding to the
requested token type.
",
        "properties": {
          "access_token": {
            "docs": "The issued JSON Web Token (JWT) corresponding to the requested
token type.
",
            "type": "string",
          },
          "client_id": {
            "docs": "An identifier that represents the application which is requesting
the token. Only present in a response corresponding to an
application access token (AAT).
",
            "type": "optional<string>",
          },
          "expires_in": {
            "docs": "The validity lifetime of the token specified in seconds since Unix
epoch.
",
            "type": "integer",
          },
          "refresh_token": {
            "docs": "A token to refresh the issued token.",
            "type": "optional<string>",
          },
          "scope": {
            "docs": "The scopes associated with the issued token. A space-delimited list
of values in which the order of values does not matter.
",
            "type": "optional<string>",
          },
          "token_type": "AuthTokenTokenType",
        },
      },
      "AuthTokensGetResponse": {
        "docs": "The response to get the token metadata.",
        "properties": {
          "token": "AuthToken",
        },
      },
      "AuthTokensListResponse": {
        "docs": "The response to list the token metadata.",
        "properties": {
          "tokens": {
            "docs": "The list of token metadata.",
            "type": "list<AuthToken>",
          },
        },
      },
      "AuthTokensOrgTraits": {
        "docs": "Carries Rev org info.",
        "properties": {
          "custom_fields": {
            "docs": "Application-defined custom fields of the Rev org.",
            "type": "optional<map<string, unknown>>",
          },
          "description": {
            "docs": "The description of the Rev org.",
            "type": "optional<string>",
          },
          "display_name": {
            "docs": "The display name of the Rev org.",
            "type": "optional<string>",
          },
          "domain": {
            "docs": "The domain of the Rev org.",
            "type": "optional<string>",
          },
          "phone_numbers": {
            "docs": "Phone numbers of the Rev org.",
            "type": "optional<list<string>>",
          },
          "tier": {
            "docs": "The tier of the Rev org.",
            "type": "optional<string>",
          },
        },
      },
      "AuthTokensRevInfo": {
        "docs": "Carries info corresponding to the Rev user to be provisioned and/or
issue a Rev session token.
",
        "properties": {
          "org_ref": {
            "docs": "An identifier which uniquely identifies a Rev org.",
            "type": "optional<string>",
          },
          "org_traits": "optional<AuthTokensOrgTraits>",
          "user_id": {
            "docs": "The unique ID of the Rev user.",
            "type": "optional<string>",
          },
          "user_ref": {
            "docs": "An identifier which uniquely identifies a Rev user.",
            "type": "optional<string>",
          },
          "user_traits": "optional<AuthTokensUserTraits>",
        },
      },
      "AuthTokensUpdateResponse": {
        "docs": "Response for the request to update the token metadata.",
        "properties": {
          "token": "AuthToken",
        },
      },
      "AuthTokensUserTraits": {
        "docs": "Carries Rev user info.",
        "properties": {
          "custom_fields": {
            "docs": "Application-defined custom fields of the Rev user.",
            "type": "optional<map<string, unknown>>",
          },
          "description": {
            "docs": "The description of the Rev user.",
            "type": "optional<string>",
          },
          "display_name": {
            "docs": "The display name of the Rev user.",
            "type": "optional<string>",
          },
          "email": {
            "docs": "The email address of the Rev user.",
            "type": "optional<string>",
          },
          "full_name": {
            "docs": "The full name of the Rev user.",
            "type": "optional<string>",
          },
          "phone_numbers": {
            "docs": "Phone numbers of the Rev user.",
            "type": "optional<list<string>>",
          },
        },
      },
      "Capability": "PartBase",
      "CapabilitySummary": "PartBaseSummary",
      "ClientContext": {
        "docs": "Properties of client to be used in track API.",
        "properties": {
          "browser": "optional<ClientContextBrowser>",
          "cpu": "optional<ClientContextCpu>",
          "device": "optional<ClientContextDevice>",
          "engine": "optional<ClientContextEngine>",
          "ip": {
            "docs": "IP address of the client.",
            "type": "optional<string>",
          },
          "locale": {
            "docs": "The client's locale, example: en-US.",
            "type": "optional<string>",
          },
          "os": "optional<ClientContextOs>",
          "page": "optional<ClientContextPage>",
          "timezone": {
            "docs": "The client's timezone, example: Asia/Kolkata.",
            "type": "optional<string>",
          },
          "user_agent": {
            "docs": "User agent of the client, example: Mozilla/5.0 (Macintosh; Intel
Mac OS X.
",
            "type": "optional<string>",
          },
        },
      },
      "ClientContextBrowser": {
        "docs": "Properties of client's browser to be used in track API.",
        "properties": {
          "name": {
            "docs": "The browser's name, example: Chrome, Safari.",
            "type": "optional<string>",
          },
          "version": {
            "docs": "The browser's version, example: 53.0.2785.143.",
            "type": "optional<string>",
          },
        },
      },
      "ClientContextCpu": {
        "docs": "Properties of client's CPU to be used in track API.",
        "properties": {
          "architecture": {
            "docs": "CPU architecture, example: amd64.",
            "type": "optional<string>",
          },
        },
      },
      "ClientContextDevice": {
        "docs": "Properties of client's device to be used in track API.",
        "properties": {
          "manufacturer": {
            "docs": "Device manufacturer, example: Apple.",
            "type": "optional<string>",
          },
          "model": {
            "docs": "Device model, example: iphone 6s.",
            "type": "optional<string>",
          },
          "type": {
            "docs": "Device type, example: mobile, tablet, desktop.",
            "type": "optional<string>",
          },
        },
      },
      "ClientContextEngine": {
        "docs": "Properties of client's engine to be used in track API.",
        "properties": {
          "name": {
            "docs": "The engine's name, example: Blink, WebKit.",
            "type": "optional<string>",
          },
          "version": {
            "docs": "The engine's version, example: 537.36.",
            "type": "optional<string>",
          },
        },
      },
      "ClientContextOs": {
        "docs": "Properties of client's OS to be used in track API.",
        "properties": {
          "name": {
            "docs": "The OS's name, example : Windows, Mac OS X.",
            "type": "optional<string>",
          },
          "version": {
            "docs": "The OS's version, example : 10.11.1.",
            "type": "optional<string>",
          },
        },
      },
      "ClientContextPage": {
        "docs": "Properties of client's page to be used in track API.",
        "properties": {
          "domain": {
            "docs": "Page domain, example: devrev.ai",
            "type": "optional<string>",
          },
          "path": {
            "docs": "Page path, example: /pricing",
            "type": "optional<string>",
          },
          "referrer": {
            "docs": "Page referrer, example: https://devrev.ai",
            "type": "optional<string>",
          },
          "title": {
            "docs": "Page title, example: Pricing",
            "type": "optional<string>",
          },
          "url": {
            "docs": "Page URL, example: https://devrev.ai/pricing",
            "type": "optional<string>",
          },
        },
      },
      "CodeChange": {
        "docs": undefined,
        "extends": [
          "AtomBase",
        ],
        "properties": {
          "branch": {
            "docs": "Name of the code branch in the repo.",
            "type": "optional<string>",
          },
          "description": {
            "docs": "Detailed description of the contents of this change.",
            "type": "optional<string>",
          },
          "external_identifier": {
            "docs": "Unique external identifier for this change.e.g Pull Request URL.
",
            "type": "optional<string>",
          },
          "filtered_loc": "optional<LinesOfCode>",
          "repo_url": {
            "docs": "URL pointing to the repo this change was on.",
            "type": "optional<string>",
          },
          "source": "optional<CodeChangeSource>",
          "title": {
            "docs": "Title describing in brief the contents of this change.",
            "type": "optional<string>",
          },
          "total_loc": "optional<LinesOfCode>",
        },
      },
      "CodeChangeSource": "literal<"github">",
      "CodeChangesCreateRequest": "map<string, unknown>",
      "CodeChangesCreateResponse": {
        "docs": undefined,
        "properties": {
          "code_change": "CodeChange",
        },
      },
      "CodeChangesDeleteResponse": "map<string, unknown>",
      "CodeChangesGetResponse": {
        "docs": undefined,
        "properties": {
          "code_change": "CodeChange",
        },
      },
      "CodeChangesListResponse": {
        "docs": undefined,
        "properties": {
          "code_changes": {
            "docs": "The list of requested code change objects.",
            "type": "list<CodeChange>",
          },
          "next_cursor": {
            "docs": "The cursor used to iterate subsequent results in accordance to the
sort order. If not set, then no later elements exist.
",
            "type": "optional<string>",
          },
          "prev_cursor": {
            "docs": "The cursor used to iterate preceding results in accordance to the
sort order. If not set, then no prior elements exist.
",
            "type": "optional<string>",
          },
        },
      },
      "CodeChangesUpdateResponse": {
        "docs": undefined,
        "properties": {
          "code_change": "CodeChange",
        },
      },
      "ConversationMetadata": {
        "docs": "Metadata on conversation.",
        "properties": {
          "url_context": {
            "docs": "URL from which the conversation was created if the conversation was
created via PLuG.
",
            "type": "optional<string>",
          },
        },
      },
      "ConversationSearchSummary": {
        "docs": undefined,
        "extends": [
          "SearchSummaryBase",
        ],
        "properties": {
          "conversation": "ConversationSummary",
        },
      },
      "ConversationSummary": {
        "docs": undefined,
        "extends": [
          "AtomBaseSummary",
        ],
        "properties": {
          "title": {
            "docs": "Title of the conversation object.",
            "type": "optional<string>",
          },
        },
      },
      "ConversationsCreateRequestMessage": {
        "docs": undefined,
        "properties": {
          "artifacts": {
            "docs": "The IDs of the artifacts to the message.",
            "type": "optional<list<string>>",
          },
          "body": {
            "docs": "The message's body.",
            "type": "optional<string>",
          },
        },
      },
      "ConversationsCreateRequestMetadata": {
        "docs": undefined,
        "properties": {
          "url_context": "optional<string>",
        },
      },
      "ConversationsCreateRequestTypeValue": "literal<"support">",
      "ConversationsCreateResponse": {
        "docs": "The response to creating a new conversation.",
        "properties": {
          "conversation": "conversation",
        },
      },
      "ConversationsDeleteResponse": {
        "docs": "The response for deleting a conversation.",
        "type": "map<string, unknown>",
      },
      "ConversationsExportResponse": {
        "docs": undefined,
        "properties": {
          "conversations": {
            "docs": "The resulting collection of conversation items.",
            "type": "list<conversation>",
          },
        },
      },
      "ConversationsGetResponse": {
        "docs": "The response to getting a conversation's information.",
        "properties": {
          "conversation": "conversation",
        },
      },
      "ConversationsListResponse": {
        "docs": "The response to listing the conversations.",
        "properties": {
          "conversations": {
            "docs": "The list of conversations.",
            "type": "list<conversation>",
          },
          "next_cursor": {
            "docs": "The cursor used to iterate subsequent results in accordance to the
sort order. If not set, then no later elements exist.
",
            "type": "optional<string>",
          },
          "prev_cursor": {
            "docs": "The cursor used to iterate preceding results in accordance to the
sort order. If not set, then no prior elements exist.
",
            "type": "optional<string>",
          },
        },
      },
      "ConversationsUpdateRequestAppliesToParts": {
        "docs": undefined,
        "properties": {
          "set": {
            "docs": "Updates the parts that the conversation applies to.",
            "type": "optional<list<string>>",
          },
        },
      },
      "ConversationsUpdateRequestMetadata": {
        "docs": undefined,
        "properties": {
          "url_context": "optional<string>",
        },
      },
      "ConversationsUpdateRequestTags": {
        "docs": undefined,
        "properties": {
          "set": {
            "docs": "Sets the tag IDs to the provided tags.",
            "type": "optional<list<SetTagWithValue>>",
          },
        },
      },
      "ConversationsUpdateRequestUserSessions": {
        "docs": undefined,
        "properties": {
          "set": {
            "docs": "The updated user sessions that the conversation is associated with.
",
            "type": "optional<list<string>>",
          },
        },
      },
      "ConversationsUpdateResponse": {
        "docs": "The response for updating a conversation.",
        "properties": {
          "conversation": "conversation",
        },
      },
      "CreateEmailInfo": {
        "docs": "Information related to an email.",
        "properties": {
          "address": {
            "docs": "The address of the email address.",
            "type": "string",
          },
          "name": {
            "docs": "The name of the email address.",
            "type": "optional<string>",
          },
          "user": {
            "docs": "The ID of the user associated with the email address.",
            "type": "optional<string>",
          },
        },
      },
      "CreateEmailInlineAttachment": {
        "docs": "An inline attachment.",
        "properties": {
          "artifact": {
            "docs": "The artifact of the attachment.",
            "type": "optional<string>",
          },
          "content_id": {
            "docs": "The content id of the attachment.",
            "type": "optional<string>",
          },
        },
      },
      "CreateEmailPreviewWidget": {
        "docs": "An email preview widget.",
        "properties": {
          "bcc": {
            "docs": "The list of bcc addresses.",
            "type": "optional<list<CreateEmailInfo>>",
          },
          "cc": {
            "docs": "The list of cc addresses.",
            "type": "optional<list<CreateEmailInfo>>",
          },
          "from": {
            "docs": "The list of from addresses.",
            "type": "optional<list<CreateEmailInfo>>",
          },
          "html_body": {
            "docs": "The html body of the email.",
            "type": "optional<string>",
          },
          "in_reply_to": {
            "docs": "The in reply to of the email.",
            "type": "optional<string>",
          },
          "inlines": {
            "docs": "The list of inline attachments.",
            "type": "optional<list<CreateEmailInlineAttachment>>",
          },
          "message_id": {
            "docs": "The message id of the email.",
            "type": "optional<string>",
          },
          "raw_email_artifact": {
            "docs": "The raw email artifact.",
            "type": "optional<string>",
          },
          "references": {
            "docs": "The list of references in the email.",
            "type": "optional<list<string>>",
          },
          "reply_to": {
            "docs": "The list of reply to addresses.",
            "type": "optional<list<CreateEmailInfo>>",
          },
          "sent_timestamp": {
            "docs": "The time the email was sent.",
            "type": "optional<datetime>",
          },
          "subject": {
            "docs": "The subject of the email.",
            "type": "optional<string>",
          },
          "text_body": {
            "docs": "The text body of the email.",
            "type": "optional<string>",
          },
          "to": {
            "docs": "The list of to addresses.",
            "type": "optional<list<CreateEmailInfo>>",
          },
        },
      },
      "CreateOrgScheduleInterval": {
        "docs": undefined,
        "properties": {
          "from": {
            "docs": "Date (inclusive) on which the interval begins.",
            "type": "datetime",
          },
          "is_excluded": {
            "docs": "If true, no organization schedule is looked up for these days and
they are marked as holidays.
",
            "type": "optional<boolean>",
          },
          "name": {
            "docs": "The name of the period, for example the event or holiday it
represents.
",
            "type": "string",
          },
          "to": {
            "docs": "Date (exclusive) on which the interval ends. If omitted, it is a
single day interval.
",
            "type": "optional<datetime>",
          },
        },
      },
      "CreateWeeklyOrgScheduleInterval": {
        "docs": undefined,
        "properties": {
          "from": {
            "docs": "Duration in minutes of the week when the interval starts. 0 is
Sunday midnight, when Sunday ends and Monday begins.
",
            "type": "integer",
          },
          "to": {
            "docs": "Duration in minutes of the week when the interval ends (must be
larger than 'from'). 0 is Sunday midnight, when Sunday ends and
Monday begins.
",
            "type": "integer",
          },
        },
      },
      "CuratedVistaSummary": {
        "docs": "Static collection of Devrev objects.",
        "type": "VistaBaseSummary",
      },
      "CustomSchemaFragment": {
        "base-properties": {},
        "discriminant": "type",
        "docs": undefined,
        "union": {
          "app_fragment": "AppFragment",
          "custom_type_fragment": "CustomTypeFragment",
          "tenant_fragment": "TenantFragment",
        },
      },
      "CustomSchemaFragmentBase": {
        "docs": undefined,
        "extends": [
          "AtomBase",
        ],
        "properties": {
          "conditions": {
            "docs": "The conditions associated with the fields.",
            "type": "optional<list<CustomSchemaFragmentCondition>>",
          },
          "deprecated": {
            "docs": "Indicates if the fragment has been deprecated. Modifications to
this field are done in-place and don't result in creation of a new
fragment in chain.
",
            "type": "optional<boolean>",
          },
          "description": {
            "docs": "Description of the custom schema fragment.",
            "type": "optional<string>",
          },
          "fields": {
            "docs": "List of all fields in this custom schema fragment.",
            "type": "optional<list<SchemaFieldDescriptor>>",
          },
          "fragment_type": "optional<CustomSchemaFragmentFragmentType>",
          "leaf_type": {
            "docs": "Leaf type this fragment applies to.",
            "type": "optional<string>",
          },
          "new_fragment_ref": "optional<CustomSchemaFragmentSummary>",
          "old_fragment_ref": "optional<CustomSchemaFragmentSummary>",
        },
      },
      "CustomSchemaFragmentBaseSummary": "AtomBaseSummary",
      "CustomSchemaFragmentCondition": {
        "docs": "The condition associated with a field.",
        "type": "map<string, unknown>",
      },
      "CustomSchemaFragmentFragmentType": {
        "docs": "Type of the custom schema fragment.",
        "enum": [
          "app",
          "custom_type",
          "tenant",
        ],
      },
      "CustomSchemaFragmentSummary": {
        "base-properties": {},
        "discriminant": "type",
        "docs": undefined,
        "union": {
          "app_fragment": "AppFragmentSummary",
          "custom_type_fragment": "CustomTypeFragmentSummary",
          "tenant_fragment": "TenantFragmentSummary",
        },
      },
      "CustomSchemaFragmentType": {
        "enum": [
          "app_fragment",
          "custom_type_fragment",
          "tenant_fragment",
        ],
      },
      "CustomSchemaFragmentsGetResponse": {
        "docs": undefined,
        "properties": {
          "fragment": "CustomSchemaFragment",
        },
      },
      "CustomSchemaFragmentsListRequestPrune": "literal<"fields">",
      "CustomSchemaFragmentsListResponse": {
        "docs": undefined,
        "properties": {
          "cursor": {
            "docs": "The cursor to resume iteration from, otherwise if not provided,
then iteration starts from the beginning.
",
            "type": "optional<string>",
          },
          "result": {
            "docs": "The custom schema fragments.",
            "type": "list<CustomSchemaFragment>",
          },
        },
      },
      "CustomSchemaFragmentsSetRequest": {
        "base-properties": {
          "conditions": {
            "docs": "List of conditions for this fragment.",
            "type": "optional<list<CustomSchemaFragmentCondition>>",
          },
          "deleted_fields": {
            "docs": "List of field names which are being dropped.",
            "type": "optional<list<string>>",
          },
          "deprecated": {
            "docs": "Whether this fragment has been deprecated.",
            "type": "optional<boolean>",
          },
          "description": {
            "docs": "The description of the custom schema fragment.",
            "type": "string",
          },
          "fields": {
            "docs": "List of all fields in this fragment.",
            "type": "optional<list<SchemaFieldDescriptor>>",
          },
          "leaf_type": {
            "docs": "The leaf type this fragment applies to.",
            "type": "string",
          },
        },
        "discriminant": "type",
        "docs": undefined,
        "union": {
          "app_fragment": "CustomSchemaFragmentsSetRequestAppFragment",
          "custom_type_fragment": "CustomSchemaFragmentsSetRequestCustomTypeFragment",
          "tenant_fragment": "CustomSchemaFragmentsSetRequestTenantFragment",
        },
      },
      "CustomSchemaFragmentsSetRequestAppFragment": {
        "docs": undefined,
        "properties": {
          "app": {
            "docs": "The app this fragment applies to.",
            "type": "string",
          },
        },
      },
      "CustomSchemaFragmentsSetRequestCustomTypeFragment": {
        "docs": undefined,
        "properties": {
          "path": {
            "docs": "Path components used to display available custom types in tree
form.
",
            "type": "optional<list<CustomTypePathComponent>>",
          },
          "stage_diagram": {
            "docs": "The ID of the associated custom stage diagram.",
            "type": "optional<string>",
          },
          "stock_field_overrides": {
            "docs": "List of Per-DevOrg stock field overrides.",
            "type": "optional<list<StockFieldOverride>>",
          },
          "subtype": {
            "docs": "The string used to populate the subtype in the leaf type.
",
            "type": "string",
          },
          "subtype_display_name": {
            "docs": "The display name of the subtype.",
            "type": "optional<string>",
          },
        },
      },
      "CustomSchemaFragmentsSetRequestTenantFragment": {
        "docs": undefined,
        "properties": {
          "stock_field_overrides": {
            "docs": "List of Per-DevOrg stock field overrides.",
            "type": "optional<list<StockFieldOverride>>",
          },
        },
      },
      "CustomSchemaFragmentsSetRequestType": {
        "enum": [
          "app_fragment",
          "custom_type_fragment",
          "tenant_fragment",
        ],
      },
      "CustomSchemaFragmentsSetResponse": {
        "docs": undefined,
        "properties": {
          "id": {
            "docs": "The ID of the custom schema fragment.",
            "type": "string",
          },
        },
      },
      "CustomSchemaSpec": {
        "docs": "Requested custom schemas described abstractly. Every provided schema's
custom field must be specified, otherwise a bad request error is
returned. If a new custom schema specifier is provided, then it will be
added to the work, otherwise if a custom schema is omitted from the
specifier, it remains unmodified.
",
        "properties": {
          "apps": {
            "docs": "List of apps that are requested.",
            "type": "optional<list<string>>",
          },
          "subtype": {
            "docs": "Name of the subtype requested.",
            "type": "optional<string>",
          },
          "tenant_fragment": {
            "docs": "Whether the tenant schema is requested.",
            "type": "optional<boolean>",
          },
          "validate_required_fields": {
            "docs": "Whether to enforce required fields validation.",
            "type": "optional<boolean>",
          },
        },
      },
      "CustomTypeFragment": {
        "docs": undefined,
        "extends": [
          "CustomSchemaFragmentBase",
        ],
        "properties": {
          "stage_diagram": "optional<StageDiagramSummary>",
          "subtype": {
            "docs": "The string used to populate the subtype in the leaf type.
",
            "type": "optional<string>",
          },
          "subtype_display_name": {
            "docs": "Display name of the subtype. Modifications to this field are done
in-place and don't result in creation of a new fragment in chain.
",
            "type": "optional<string>",
          },
        },
      },
      "CustomTypeFragmentSummary": "CustomSchemaFragmentBaseSummary",
      "CustomTypePathComponent": {
        "docs": "Path component for rendering custom type lists in tree form.",
        "type": "map<string, unknown>",
      },
      "DateFilter": {
        "base-properties": {},
        "discriminant": "type",
        "docs": "Provides ways to specify date ranges on objects.",
        "union": {
          "preset": "DateTimePreset",
          "range": "DateTimeFilter",
        },
      },
      "DateFilterType": {
        "docs": "Type of date filter.",
        "enum": [
          "preset",
          "range",
        ],
      },
      "DateTimeFilter": {
        "docs": undefined,
        "properties": {
          "after": {
            "docs": "Filters for objects created after the provided timestamp
(inclusive).
",
            "type": "optional<datetime>",
          },
          "before": {
            "docs": "Filters for objects created before the provided timestamp
(inclusive).
",
            "type": "optional<datetime>",
          },
        },
      },
      "DateTimePreset": {
        "base-properties": {},
        "discriminant": "preset_type",
        "docs": "Provides preset types for date filter.",
        "union": {
          "last_n_days": "DateTimePresetLastNDays",
          "next_n_days": "DateTimePresetNextNDays",
        },
      },
      "DateTimePresetLastNDays": {
        "docs": undefined,
        "properties": {
          "days": {
            "docs": "The range starts from the current timestamp and continues for the
past n days.
",
            "type": "integer",
          },
        },
      },
      "DateTimePresetNextNDays": {
        "docs": undefined,
        "properties": {
          "days": {
            "docs": "The range starts from the current timestamp and continues for the
next n days.
",
            "type": "integer",
          },
        },
      },
      "DateTimePresetType": {
        "docs": "Type of date preset.",
        "enum": [
          "last_n_days",
          "next_n_days",
        ],
      },
      "DevOrgAuthConnectionsCreateRequest": {
        "base-properties": {
          "display_name": {
            "docs": "Display name of the authentication connection. This name will be
visible to all the users when they sign in to this Dev
organization. For example, if the display_name is 'abclogin', then
it would appear on the login button as 'Log in to abclogin'.
",
            "type": "optional<string>",
          },
        },
        "discriminant": "type",
        "docs": "Request to create a new enterprise authentication connection.
",
        "union": {
          "google_apps": "AuthConnectionOptionsGoogleApps",
          "oidc": "AuthConnectionOptionsOidc",
          "samlp": "AuthConnectionOptionsSaml",
          "waad": "AuthConnectionOptionsAzureAd",
        },
      },
      "DevOrgAuthConnectionsCreateRequestType": {
        "docs": "Defines the type for the authentication connection. Different types of
authentication connections have different configuration parameters.
",
        "enum": [
          "google_apps",
          "oidc",
          "samlp",
          "waad",
        ],
      },
      "DevOrgAuthConnectionsCreateResponse": {
        "docs": "Response for the request to create a new enterprise authentication
connection.
",
        "properties": {
          "auth_connection": "AuthConnection",
        },
      },
      "DevOrgAuthConnectionsGetResponse": {
        "docs": "Response object encapsulating the configuration details of an
authentication connection.
",
        "properties": {
          "auth_connection": "AuthConnection",
        },
      },
      "DevOrgAuthConnectionsListResponse": {
        "docs": "Response object for the request to list all the social and enterprise
authentication connections configured for a Dev organization.
",
        "properties": {
          "auth_connections": {
            "docs": "List of all the authentication connections currently configured for
a Dev organization.
",
            "type": "list<AuthConnection>",
          },
        },
      },
      "DevOrgAuthConnectionsUpdateRequest": {
        "base-properties": {
          "display_name": {
            "docs": "New display name of the authentication connection. This name will
be visible to all the users when they sign in to this Dev
organization. For example, if the display_name is 'abclogin', then
it would appear on the login button as 'Log in to abclogin'.
",
            "type": "optional<string>",
          },
          "id": {
            "docs": "ID of the authentication connection which is to be updated.
",
            "type": "string",
          },
        },
        "discriminant": "type",
        "docs": "Request to update an enterprise authentication connection for a Dev
organization.
",
        "union": {
          "google_apps": "AuthConnectionOptionsGoogleApps",
          "none": "empty",
          "oidc": "AuthConnectionOptionsOidc",
          "samlp": "AuthConnectionOptionsSaml",
          "waad": "AuthConnectionOptionsAzureAd",
        },
      },
      "DevOrgAuthConnectionsUpdateRequestType": {
        "docs": "Specifies the type for the authentication connection. Different types
of authentication connections have different configuration parameters
that can be updated.
",
        "enum": [
          "google_apps",
          "none",
          "oidc",
          "samlp",
          "waad",
        ],
      },
      "DevOrgAuthConnectionsUpdateResponse": {
        "docs": "Response for the request to update an enterprise authentication
connection.
",
        "properties": {
          "auth_connection": "AuthConnection",
        },
      },
      "DevUser": {
        "docs": undefined,
        "extends": [
          "UserBase",
        ],
        "properties": {
          "external_identities": {
            "docs": "IDs of the Dev User outside the DevRev SOR.",
            "type": "optional<list<ExternalIdentity>>",
          },
        },
      },
      "DevUserExternalIdentityFilter": {
        "docs": undefined,
        "properties": {
          "id": {
            "docs": "Unique ID of the user in the external source.",
            "type": "optional<string>",
          },
          "issuer": {
            "docs": "Issuer of the external identity of the user.",
            "type": "optional<string>",
          },
        },
      },
      "DevUserSummary": "UserBaseSummary",
      "DevUsersGetResponse": {
        "docs": "The response to getting the information for the Dev user.",
        "properties": {
          "dev_user": "DevUser",
        },
      },
      "DevUsersListResponse": {
        "docs": "The response to listing the Dev users.",
        "properties": {
          "dev_users": {
            "docs": "The list of Dev users.",
            "type": "list<DevUser>",
          },
          "next_cursor": {
            "docs": "The cursor used to iterate subsequent results in accordance to the
sort order. If not set, then no later elements exist.
",
            "type": "optional<string>",
          },
          "prev_cursor": {
            "docs": "The cursor used to iterate preceding results in accordance to the
sort order. If not set, then no prior elements exist.
",
            "type": "optional<string>",
          },
        },
      },
      "DevUsersSelfRequest": {
        "docs": "A request to get the authenticated user's information.",
        "type": "map<string, unknown>",
      },
      "DevUsersSelfResponse": {
        "docs": "The response to getting the information for the authenticated user.
",
        "properties": {
          "dev_user": "DevUser",
        },
      },
      "DirectorySummary": "AtomBaseSummary",
      "DynamicGroupInfo": {
        "docs": "Information to define dynamic groups.",
        "type": "map<string, unknown>",
      },
      "DynamicVistaSummary": {
        "docs": "Dynamic collection of Devrev objects, all adhering to a specific
filter.
",
        "type": "VistaBaseSummary",
      },
      "EmailInfo": {
        "docs": undefined,
        "properties": {
          "address": {
            "docs": "The email address.",
            "type": "string",
          },
          "name": {
            "docs": "The email recipient's name.",
            "type": "optional<string>",
          },
          "user": "optional<UserSummary>",
        },
      },
      "EmailInlineAttachment": {
        "docs": undefined,
        "properties": {
          "artifact": "optional<ArtifactSummary>",
          "content_id": {
            "docs": "The content id of the attachment.",
            "type": "optional<string>",
          },
        },
      },
      "EmailPreviewWidget": {
        "docs": undefined,
        "extends": [
          "SnapWidgetBase",
        ],
        "properties": {
          "bcc": {
            "docs": "The list of bcc addresses.",
            "type": "list<EmailInfo>",
          },
          "cc": {
            "docs": "The list of cc addresses.",
            "type": "list<EmailInfo>",
          },
          "from": {
            "docs": "The list of from addresses.",
            "type": "list<EmailInfo>",
          },
          "html_body": {
            "docs": "The html body of the email.",
            "type": "optional<string>",
          },
          "in_reply_to": {
            "docs": "The in-reply-to header of the email.",
            "type": "optional<string>",
          },
          "inlines": {
            "docs": "The list of inline attachments.",
            "type": "list<EmailInlineAttachment>",
          },
          "message_id": {
            "docs": "The message id of the email.",
            "type": "optional<string>",
          },
          "raw_email_artifact": "optional<ArtifactSummary>",
          "references": {
            "docs": "The references header in the email.",
            "type": "list<string>",
          },
          "reply_to": {
            "docs": "The list of reply to addresses.",
            "type": "list<EmailInfo>",
          },
          "sent_timestamp": {
            "docs": "The time the email was sent.",
            "type": "optional<datetime>",
          },
          "subject": {
            "docs": "The subject of the email.",
            "type": "optional<string>",
          },
          "text_body": {
            "docs": "The text body of the email.",
            "type": "optional<string>",
          },
          "to": {
            "docs": "The list of to addresses.",
            "type": "list<EmailInfo>",
          },
        },
      },
      "EngagementSummary": "AtomBaseSummary",
      "EngagementType": {
        "docs": "Type of engagement.",
        "enum": [
          "call",
          "default",
          "email",
          "linked_in",
          "meeting",
          "offline",
          "survey",
        ],
      },
      "EngagementsCountResponse": {
        "docs": undefined,
        "properties": {
          "count": {
            "docs": "The number of engagements matching the filter.",
            "type": "integer",
          },
        },
      },
      "EngagementsCreateRequestEngagementType": {
        "docs": "The type of engagement.",
        "enum": [
          "call",
          "default",
          "email",
          "linked_in",
          "offline",
        ],
      },
      "EngagementsCreateResponse": {
        "docs": undefined,
        "properties": {
          "engagement": "engagement",
        },
      },
      "EngagementsDeleteResponse": "map<string, unknown>",
      "EngagementsGetResponse": {
        "docs": undefined,
        "properties": {
          "engagement": "engagement",
        },
      },
      "EngagementsListResponse": {
        "docs": undefined,
        "properties": {
          "engagements": {
            "docs": "The list of engagements.",
            "type": "list<engagement>",
          },
          "next_cursor": {
            "docs": "The cursor used to iterate subsequent results in accordance to the
sort order. If not set, then no later elements exist.
",
            "type": "optional<string>",
          },
          "prev_cursor": {
            "docs": "The cursor used to iterate preceding results in accordance to the
sort order. If not set, then no prior elements exist.
",
            "type": "optional<string>",
          },
        },
      },
      "EngagementsUpdateRequestArtifactIds": {
        "docs": undefined,
        "properties": {
          "set": {
            "docs": "Sets the IDs to the provided artifact IDs.",
            "type": "optional<list<string>>",
          },
        },
      },
      "EngagementsUpdateRequestMembers": {
        "docs": undefined,
        "properties": {
          "set": {
            "docs": "Sets the members to the provided user IDs. If specified, this must
not be empty.
",
            "type": "optional<list<string>>",
          },
        },
      },
      "EngagementsUpdateRequestTags": {
        "docs": undefined,
        "properties": {
          "set": {
            "docs": "Sets the provided tags on the engagement item.",
            "type": "optional<list<SetTagWithValue>>",
          },
        },
      },
      "EngagementsUpdateResponse": {
        "docs": undefined,
        "properties": {
          "engagement": "engagement",
        },
      },
      "Enhancement": "PartBase",
      "EnhancementSummary": "PartBaseSummary",
      "ErrorBadRequest": {
        "docs": undefined,
        "extends": [
          "ErrorBase",
        ],
        "properties": {},
      },
      "ErrorBadRequestBadRequest": "map<string, unknown>",
      "ErrorBadRequestInvalidApiVersion": {
        "docs": undefined,
        "properties": {
          "value": {
            "docs": "The provided API version.",
            "type": "string",
          },
        },
      },
      "ErrorBadRequestInvalidEnumValue": {
        "docs": undefined,
        "properties": {
          "allowed_values": {
            "docs": "The allowed values for the field.",
            "type": "list<string>",
          },
          "field_name": {
            "docs": "The field whose enum value is invalid.",
            "type": "string",
          },
          "value": {
            "docs": "The value that was received.",
            "type": "string",
          },
        },
      },
      "ErrorBadRequestInvalidField": {
        "docs": undefined,
        "properties": {
          "field_name": {
            "docs": "The field name that's invalid.",
            "type": "string",
          },
        },
      },
      "ErrorBadRequestMissingDependency": {
        "docs": undefined,
        "properties": {
          "dependencies": {
            "docs": "The dependent fields.",
            "type": "optional<list<ErrorBadRequestMissingDependencyDependency>>",
          },
          "dependent_field_name": {
            "docs": "The field on which the value depends.",
            "type": "optional<string>",
          },
          "dependent_field_value": {
            "docs": "The value which needs to be set of the dependent field.",
            "type": "optional<string>",
          },
          "provided_field_name": {
            "docs": "The field whose value was received.",
            "type": "optional<string>",
          },
          "provided_field_value": {
            "docs": "The value that was received.",
            "type": "optional<string>",
          },
        },
      },
      "ErrorBadRequestMissingDependencyDependency": {
        "docs": undefined,
        "properties": {
          "field_name": {
            "docs": "The dependent field name.",
            "type": "string",
          },
          "field_value": {
            "docs": "The dependent field value.",
            "type": "string",
          },
        },
      },
      "ErrorBadRequestMissingRequiredField": {
        "docs": undefined,
        "properties": {
          "field_name": {
            "docs": "The missing field's name.",
            "type": "string",
          },
        },
      },
      "ErrorBadRequestParseError": "map<string, unknown>",
      "ErrorBadRequestStaleSchemaFragments": {
        "docs": "Error indicating that the request contained one or more stale schema
fragments, which are schema fragments that have been replaced by a
newer version and are therefore considered deprecated schema fragments.
The caller should refresh and use the latest schema fragments in their
request.
",
        "type": "map<string, unknown>",
      },
      "ErrorBadRequestType": {
        "enum": [
          "bad_request",
          "invalid_api_version",
          "invalid_enum_value",
          "invalid_field",
          "missing_dependency",
          "missing_required_field",
          "parse_error",
          "stale_schema_fragments",
          "unexpected_json_type",
          "value_not_permitted",
        ],
      },
      "ErrorBadRequestUnexpectedJsonType": {
        "docs": undefined,
        "properties": {
          "actual": "ErrorBadRequestUnexpectedJsonTypeType",
          "expected": "ErrorBadRequestUnexpectedJsonTypeType",
          "field_name": {
            "docs": "The field name that's invalid.",
            "type": "string",
          },
        },
      },
      "ErrorBadRequestUnexpectedJsonTypeType": {
        "enum": [
          "array",
          "bool",
          "null",
          "number",
          "object",
          "string",
        ],
      },
      "ErrorBadRequestValueNotPermitted": {
        "docs": undefined,
        "properties": {
          "allowed_values": {
            "docs": "The allowed values for the field.",
            "type": "optional<list<string>>",
          },
          "field_name": {
            "docs": "The field whose value is not permitted.",
            "type": "string",
          },
          "reason": {
            "docs": "The reason the value isn't permitted.",
            "type": "optional<string>",
          },
        },
      },
      "ErrorBase": {
        "docs": undefined,
        "properties": {
          "detail": {
            "docs": "Error detail information.",
            "type": "optional<string>",
          },
          "message": {
            "docs": "The message associated with the error.",
            "type": "optional<string>",
          },
        },
      },
      "ErrorConflict": {
        "docs": undefined,
        "extends": [
          "ErrorBase",
        ],
        "properties": {},
      },
      "ErrorConflictConflict": "map<string, unknown>",
      "ErrorConflictType": "literal<"conflict">",
      "ErrorForbidden": {
        "docs": undefined,
        "extends": [
          "ErrorBase",
        ],
        "properties": {},
      },
      "ErrorForbiddenForbidden": "map<string, unknown>",
      "ErrorForbiddenType": "literal<"forbidden">",
      "ErrorInternalServerError": {
        "docs": undefined,
        "extends": [
          "ErrorBase",
        ],
        "properties": {},
      },
      "ErrorInternalServerErrorInternalError": "map<string, unknown>",
      "ErrorInternalServerErrorType": "literal<"internal_error">",
      "ErrorNotFound": {
        "docs": undefined,
        "extends": [
          "ErrorBase",
        ],
        "properties": {},
      },
      "ErrorNotFoundNotFound": "map<string, unknown>",
      "ErrorNotFoundType": "literal<"not_found">",
      "ErrorServiceUnavailable": {
        "docs": undefined,
        "extends": [
          "ErrorBase",
        ],
        "properties": {},
      },
      "ErrorServiceUnavailableServiceUnavailable": "map<string, unknown>",
      "ErrorServiceUnavailableType": "literal<"service_unavailable">",
      "ErrorTooManyRequests": {
        "docs": undefined,
        "extends": [
          "ErrorBase",
        ],
        "properties": {},
      },
      "ErrorTooManyRequestsTooManyRequests": "map<string, unknown>",
      "ErrorTooManyRequestsType": "literal<"too_many_requests">",
      "ErrorUnauthorized": {
        "docs": undefined,
        "extends": [
          "ErrorBase",
        ],
        "properties": {},
      },
      "ErrorUnauthorizedType": "literal<"unauthenticated">",
      "ErrorUnauthorizedUnauthenticated": "map<string, unknown>",
      "EventAccountCreated": {
        "docs": undefined,
        "properties": {
          "account": "account",
        },
      },
      "EventAccountDeleted": {
        "docs": undefined,
        "properties": {
          "id": {
            "docs": "The ID of the account that was deleted.",
            "type": "string",
          },
        },
      },
      "EventAccountUpdated": {
        "docs": undefined,
        "properties": {
          "account": "account",
        },
      },
      "EventConversationCreated": {
        "docs": undefined,
        "properties": {
          "conversation": "conversation",
        },
      },
      "EventConversationDeleted": {
        "docs": undefined,
        "properties": {
          "id": {
            "docs": "The ID of the conversation that was deleted.",
            "type": "string",
          },
        },
      },
      "EventConversationUpdated": {
        "docs": undefined,
        "properties": {
          "conversation": "conversation",
        },
      },
      "EventDevUserCreated": {
        "docs": undefined,
        "properties": {
          "dev_user": "DevUser",
        },
      },
      "EventDevUserDeleted": {
        "docs": undefined,
        "properties": {
          "id": {
            "docs": "The ID of the Dev user that was deleted.",
            "type": "string",
          },
        },
      },
      "EventDevUserUpdated": {
        "docs": undefined,
        "properties": {
          "dev_user": "DevUser",
        },
      },
      "EventPartCreated": {
        "docs": undefined,
        "properties": {
          "part": "part",
        },
      },
      "EventPartDeleted": {
        "docs": undefined,
        "properties": {
          "id": {
            "docs": "The ID of the part that was deleted.",
            "type": "string",
          },
        },
      },
      "EventPartUpdated": {
        "docs": undefined,
        "properties": {
          "part": "part",
        },
      },
      "EventRevOrgCreated": {
        "docs": undefined,
        "properties": {
          "rev_org": "RevOrg",
        },
      },
      "EventRevOrgDeleted": {
        "docs": undefined,
        "properties": {
          "id": {
            "docs": "The ID of the Rev organization that was deleted.",
            "type": "string",
          },
        },
      },
      "EventRevOrgUpdated": {
        "docs": undefined,
        "properties": {
          "rev_org": "RevOrg",
        },
      },
      "EventRevUserCreated": {
        "docs": undefined,
        "properties": {
          "rev_user": "RevUser",
        },
      },
      "EventRevUserDeleted": {
        "docs": undefined,
        "properties": {
          "id": {
            "docs": "The ID of the Rev user that was deleted.",
            "type": "string",
          },
        },
      },
      "EventRevUserUpdated": {
        "docs": undefined,
        "properties": {
          "rev_user": "RevUser",
        },
      },
      "EventSlaTrackerCreated": {
        "docs": undefined,
        "properties": {
          "sla_tracker": "SlaTracker",
        },
      },
      "EventSlaTrackerDeleted": {
        "docs": undefined,
        "properties": {
          "id": {
            "docs": "The ID of the SLA tracker that was deleted.",
            "type": "string",
          },
        },
      },
      "EventSlaTrackerUpdated": {
        "docs": undefined,
        "properties": {
          "sla_tracker": "SlaTracker",
        },
      },
      "EventSource": {
        "docs": undefined,
        "extends": [
          "AtomBase",
        ],
        "properties": {
          "config": {
            "docs": "Configuration of the event source. Fields depend on the event
source type.
",
            "type": "optional<map<string, unknown>>",
          },
          "name": {
            "docs": "Name of the event source.",
            "type": "optional<string>",
          },
          "setup_instructions": "optional<EventSourceSetupInstructions>",
          "status": "optional<EventSourceStatus>",
          "trigger_url": {
            "docs": "The URL to trigger the event source. Valid only for HTTP
based-event sources. This URL supports both GET and POST requests.
",
            "type": "optional<string>",
          },
        },
      },
      "EventSourceGetResponse": {
        "docs": undefined,
        "properties": {
          "event_source": "EventSource",
        },
      },
      "EventSourceSetupInstructions": {
        "docs": "Instructions for setting up the event source.",
        "properties": {
          "content": {
            "docs": "Content of the instructions.",
            "type": "optional<string>",
          },
        },
      },
      "EventSourceStatus": {
        "docs": "Status of the event source. Note that paused/blocked event sources
return NotFound error on triggering.
",
        "enum": [
          "active",
          "blocked",
          "paused",
        ],
      },
      "EventSourcesScheduleEventResponse": {
        "docs": undefined,
        "properties": {
          "event_key": {
            "docs": "The event key for this event. Auto-generated if the caller doesn't
specify the event key. This may be empty if the event was published
immediately.
",
            "type": "optional<string>",
          },
        },
      },
      "EventTagCreated": {
        "docs": undefined,
        "properties": {
          "tag": "tag",
        },
      },
      "EventTagDeleted": {
        "docs": undefined,
        "properties": {
          "id": {
            "docs": "The ID of the tag that was deleted.",
            "type": "string",
          },
        },
      },
      "EventTagUpdated": {
        "docs": undefined,
        "properties": {
          "tag": "tag",
        },
      },
      "EventTimelineEntryCreated": {
        "docs": undefined,
        "properties": {
          "entry": "TimelineEntry",
        },
      },
      "EventTimelineEntryDeleted": {
        "docs": undefined,
        "properties": {
          "id": {
            "docs": "The ID of the timeline entry that was deleted.",
            "type": "string",
          },
        },
      },
      "EventTimelineEntryUpdated": {
        "docs": undefined,
        "properties": {
          "entry": "TimelineEntry",
        },
      },
      "EventWebhookCreated": {
        "docs": undefined,
        "properties": {
          "webhook": "webhook",
        },
      },
      "EventWebhookDeleted": {
        "docs": undefined,
        "properties": {
          "id": {
            "docs": "The ID of the webhook that was deleted.",
            "type": "string",
          },
        },
      },
      "EventWebhookUpdated": {
        "docs": undefined,
        "properties": {
          "webhook": "webhook",
        },
      },
      "EventWorkCreated": {
        "docs": undefined,
        "properties": {
          "work": "work",
        },
      },
      "EventWorkDeleted": {
        "docs": undefined,
        "properties": {
          "id": {
            "docs": "The ID of the work that was deleted.",
            "type": "string",
          },
        },
      },
      "EventWorkUpdated": {
        "docs": undefined,
        "properties": {
          "work": "work",
        },
      },
      "ExternalIdentity": {
        "docs": "External identity of a user.",
        "type": "map<string, unknown>",
      },
      "Feature": "PartBase",
      "FeatureSummary": "PartBaseSummary",
      "FieldDescriptor": {
        "docs": "Set of field attributes.",
        "type": "map<string, unknown>",
      },
      "GroupMemberType": {
        "docs": "Type of the members in the group.",
        "enum": [
          "dev_user",
          "rev_user",
        ],
      },
      "GroupMembersAddResponse": "map<string, unknown>",
      "GroupMembersListResponse": {
        "docs": "List of group members.",
        "properties": {
          "members": {
            "docs": "List of members.",
            "type": "list<GroupMembersListResponseMember>",
          },
          "next_cursor": {
            "docs": "The cursor used to iterate subsequent results in accordance to the
sort order. If not set, then no later elements exist.
",
            "type": "optional<string>",
          },
          "prev_cursor": {
            "docs": "The cursor used to iterate preceding results in accordance to the
sort order. If not set, then no prior elements exist.
",
            "type": "optional<string>",
          },
        },
      },
      "GroupMembersListResponseMember": {
        "docs": "A group member.",
        "properties": {
          "member": "MemberSummary",
        },
      },
      "GroupMembersRemoveResponse": "map<string, unknown>",
      "GroupSearchSummary": {
        "docs": undefined,
        "extends": [
          "SearchSummaryBase",
        ],
        "properties": {
          "group": "GroupSummary",
        },
      },
      "GroupSummary": {
        "docs": undefined,
        "extends": [
          "AtomBaseSummary",
        ],
        "properties": {
          "name": {
            "docs": "Name of the group.",
            "type": "optional<string>",
          },
        },
      },
      "GroupType": {
        "docs": "Type of the group.",
        "enum": [
          "dynamic",
          "static",
        ],
      },
      "GroupedVistaFlavor": {
        "docs": "Denotes the use case of the grouped vista.",
        "enum": [
          "nnl",
          "sprint_board",
          "support_inbox",
        ],
      },
      "GroupedVistaSummary": {
        "docs": "Represents a group of multiple vistas as a single unit.",
        "extends": [
          "VistaBaseSummary",
        ],
        "properties": {
          "flavor": "optional<GroupedVistaFlavor>",
        },
      },
      "GroupsCreateResponse": {
        "docs": "The response to group creation.",
        "properties": {
          "group": "group",
        },
      },
      "GroupsGetResponse": {
        "docs": "The response to getting the group.",
        "properties": {
          "group": "group",
        },
      },
      "GroupsListResponse": {
        "docs": "The response to listing the groups.",
        "properties": {
          "groups": {
            "docs": "The list of groups.",
            "type": "list<group>",
          },
          "next_cursor": {
            "docs": "The cursor used to iterate subsequent results in accordance to the
sort order. If not set, then no later elements exist.
",
            "type": "optional<string>",
          },
          "prev_cursor": {
            "docs": "The cursor used to iterate preceding results in accordance to the
sort order. If not set, then no prior elements exist.
",
            "type": "optional<string>",
          },
        },
      },
      "GroupsUpdateResponse": {
        "docs": "The response to group update.",
        "properties": {
          "group": "group",
        },
      },
      "IssuePriority": {
        "docs": "Priority of the work based upon impact and criticality.",
        "enum": [
          "p0",
          "p1",
          "p2",
          "p3",
        ],
      },
      "IssueSummary": {
        "docs": undefined,
        "extends": [
          "WorkBaseSummary",
        ],
        "properties": {
          "priority": "optional<IssuePriority>",
        },
      },
      "LegacyStage": {
        "docs": "Describes the current stage of a work item.",
        "properties": {
          "name": {
            "docs": "Current stage name of the work item.",
            "type": "string",
          },
        },
      },
      "LegacyStageSummary": {
        "docs": "Describes the current stage of a work item.",
        "properties": {
          "name": {
            "docs": "Current stage name of the work item.",
            "type": "string",
          },
        },
      },
      "LinesOfCode": {
        "docs": "Details of lines of code in this code change.",
        "properties": {
          "file_count": {
            "docs": "Count of files involved in this code change.",
            "type": "optional<integer>",
          },
          "lines_added": {
            "docs": "Number of new lines added in this code change.",
            "type": "optional<integer>",
          },
          "lines_deleted": {
            "docs": "Number of lines deleted in this code change.",
            "type": "optional<integer>",
          },
          "lines_modified": {
            "docs": "Number of lines modified in this code change.",
            "type": "optional<integer>",
          },
        },
      },
      "LinkEndpointSummary": {
        "base-properties": {},
        "discriminant": "type",
        "docs": undefined,
        "union": {
          "capability": "CapabilitySummary",
          "conversation": "ConversationSummary",
          "enhancement": "EnhancementSummary",
          "feature": "FeatureSummary",
          "issue": "IssueSummary",
          "opportunity": "OpportunitySummary",
          "product": "ProductSummary",
          "task": "TaskSummary",
          "ticket": "TicketSummary",
        },
      },
      "LinkEndpointType": {
        "enum": [
          "capability",
          "conversation",
          "enhancement",
          "feature",
          "issue",
          "opportunity",
          "product",
          "task",
          "ticket",
        ],
      },
      "LinkRevUserToRevOrgResponse": {
        "docs": "The response to link a rev user to a rev org.",
        "properties": {
          "rev_user": "RevUser",
        },
      },
      "LinkSearchSummary": {
        "docs": undefined,
        "extends": [
          "SearchSummaryBase",
        ],
        "properties": {
          "link": "LinkSummary",
        },
      },
      "LinkSummary": {
        "docs": undefined,
        "extends": [
          "AtomBaseSummary",
        ],
        "properties": {
          "link_type": "LinkType",
          "source": "LinkEndpointSummary",
          "target": "LinkEndpointSummary",
        },
      },
      "LinkType": {
        "docs": "Type of link used to define the relationship.",
        "enum": [
          "developed_with",
          "imports",
          "is_dependent_on",
          "is_duplicate_of",
          "is_parent_of",
          "is_part_of",
          "is_related_to",
          "serves",
        ],
      },
      "LinksCreateResponse": {
        "docs": "The response to creating a new link.",
        "properties": {
          "link": "link",
        },
      },
      "LinksDeleteResponse": {
        "docs": "The response for deleting a link.",
        "type": "map<string, unknown>",
      },
      "LinksDirection": {
        "docs": "The direction of link, which can either be outbound such that the
object is the source of the link, otherwise inbound where the object is
the target of the link.
",
        "enum": [
          "is_source",
          "is_target",
        ],
      },
      "LinksGetResponse": {
        "docs": "The response to getting a link's information.",
        "properties": {
          "link": "link",
        },
      },
      "LinksListResponse": {
        "docs": "The response to listing the links.",
        "properties": {
          "links": {
            "docs": "The list of links.",
            "type": "list<link>",
          },
          "next_cursor": {
            "docs": "The cursor used to iterate subsequent results in accordance to the
sort order. If not set, then no later elements exist.
",
            "type": "optional<string>",
          },
          "prev_cursor": {
            "docs": "The cursor used to iterate preceding results in accordance to the
sort order. If not set, then no prior elements exist.
",
            "type": "optional<string>",
          },
        },
      },
      "ListMode": {
        "docs": "The iteration mode to use. If "after", then entries after the provided
cursor will be returned, or if no cursor is provided, then from the
beginning. If "before", then entries before the provided cursor will be
returned, or if no cursor is provided, then from the end. Entries will
always be returned in the specified sort-by order.
",
        "enum": [
          "after",
          "before",
        ],
      },
      "MeetingSummary": "AtomBaseSummary",
      "MemberSummary": {
        "base-properties": {},
        "discriminant": "type",
        "docs": undefined,
        "union": {
          "dev_user": "DevUserSummary",
          "rev_user": "RevUserSummary",
          "sys_user": "SysUserSummary",
        },
      },
      "MemberType": {
        "enum": [
          "dev_user",
          "rev_user",
          "sys_user",
        ],
      },
      "MetricDataPoint": {
        "docs": undefined,
        "properties": {
          "dimensions": {
            "docs": "Key-value pairs for specifying additional attributes.",
            "type": "optional<list<MetricDataPointDimension>>",
          },
          "id": {
            "docs": "An ID that uniquely identifies the metric data point. This ID will
be used for deduplication. Clients can generate its own ID and send
it in the request. If not provided, DevRev will perform
content-based deduplication.
",
            "type": "optional<string>",
          },
          "timestamp": {
            "docs": "Timestamp when metric value is captured.",
            "type": "datetime",
          },
          "value": {
            "docs": "The value corresponding to the metric. For simply recording
occurrence of an event, this value should be 1.0.
",
            "type": "double",
          },
        },
      },
      "MetricDataPointDimension": {
        "docs": undefined,
        "properties": {
          "key": {
            "docs": "The key for the dimension. The keys must be unique and it is not
allowed to have more than one value with the same key. Key must be
at least one character long and cannot be longer than 64
characters.Key can only contain alphanumeric characters (A-Z, a-z,
and 0-9) and underscores (_). Key cannot start with a number and is
case-insensitive.
",
            "type": "string",
          },
          "value": {
            "docs": "The value for the dimension. Value could be any string and cannot
be longer than 256 characters.
",
            "type": "string",
          },
        },
      },
      "MetricDefinition": "AtomBase",
      "MetricDefinitionAppliesTo": {
        "docs": "The list of item types on which the metric might be applied.",
        "enum": [
          "conversation",
          "ticket",
        ],
      },
      "MetricDefinitionMetricType": {
        "docs": "The type of the metric. 'time' metrics track the time spent in some
state, supporting operations like 'start', 'stop', 'pause', 'resume'.
'value' metrics track a value, supporting operations like 'set',
'increment', 'decrement'.
",
        "enum": [
          "time",
          "value",
        ],
      },
      "MetricDefinitionsListResponse": {
        "docs": undefined,
        "properties": {
          "metric_definitions": {
            "docs": "The list of metric definitions.",
            "type": "list<MetricDefinition>",
          },
          "next_cursor": {
            "docs": "The cursor used to iterate subsequent results in accordance to the
sort order. If not set, then no later elements exist.
",
            "type": "optional<string>",
          },
          "prev_cursor": {
            "docs": "The cursor used to iterate preceding results in accordance to the
sort order. If not set, then no prior elements exist.
",
            "type": "optional<string>",
          },
        },
      },
      "MetricsData": {
        "docs": undefined,
        "properties": {
          "data_points": {
            "docs": "One or more data points collected for a given metric such as object
usage, object state etc.
",
            "type": "list<MetricDataPoint>",
          },
          "name": {
            "docs": "Name of the metric which is being measured. For example,
num_api_calls, num_active_users, etc.
",
            "type": "string",
          },
          "org_ref": {
            "docs": "Rev Org ID or external_ref for which metric is being published.Rev
Org ID is DevRev DON ID. For example,
don:identity:dvrv-us-1:devo/0:revo/156. External_ref is the
identification of DevRev customer's customers and maintained by
DevRev's customers. Devrev will internally resolve external_ref to
Rev Org ID and use it for further processing. For example,
external_ref=org_customer_1 may resolve to
don:identity:dvrv-us-1:devo/0:revo/155.
",
            "type": "string",
          },
          "user_ref": {
            "docs": "Rev User ID or user ref for which metric is being published.
",
            "type": "optional<string>",
          },
        },
      },
      "ObjectMemberSearchSummary": {
        "docs": undefined,
        "extends": [
          "SearchSummaryBase",
        ],
        "properties": {
          "object_member": "ObjectMemberSummary",
        },
      },
      "ObjectMemberSummary": "AtomBaseSummary",
      "Opportunity": "WorkBase",
      "OpportunityForecastCategory": {
        "docs": "Forecast category of the opportunity.",
        "enum": [
          "commit",
          "omitted",
          "pipeline",
          "strong_upside",
          "upside",
          "won",
        ],
      },
      "OpportunityPriority": {
        "docs": "Priority of the opportunity.",
        "enum": [
          "p0",
          "p1",
          "p2",
          "p3",
        ],
      },
      "OpportunitySummary": "WorkBaseSummary",
      "OrgBase": {
        "docs": undefined,
        "extends": [
          "AtomBase",
        ],
        "properties": {
          "display_name": {
            "docs": "Name of the Organization.",
            "type": "optional<string>",
          },
        },
      },
      "OrgBaseSummary": {
        "docs": undefined,
        "extends": [
          "AtomBaseSummary",
        ],
        "properties": {
          "display_name": {
            "docs": "Name of the Organization.",
            "type": "optional<string>",
          },
        },
      },
      "OrgEnvironment": {
        "docs": "The environment of the Org. Defaults to 'production' if not specified.
",
        "enum": [
          "production",
          "staging",
          "test",
        ],
      },
      "OrgSchedule": {
        "docs": undefined,
        "extends": [
          "AtomBase",
        ],
        "properties": {
          "default_weekly_org_schedule": "optional<WeeklyOrgSchedule>",
          "min_valid_days": {
            "docs": "The schedule must be valid and well-defined for at least this many
days in the future, otherwise a warning notification is generated.
Default is 0 if not specified.
",
            "type": "optional<integer>",
          },
          "name": {
            "docs": "Human-readable name.",
            "type": "optional<string>",
          },
          "org_schedule_fragments": {
            "docs": "The list of schedule fragments. It must be an ordered list of
contiguous fragments (the next starting when the previous one
ends), updates in a published schedule are only allowed to add new
ones to the future.
",
            "type": "optional<list<OrgScheduleFragmentOverview>>",
          },
          "status": "OrgScheduleStatus",
          "timezone": {
            "docs": "Timezone in which this is defined. Only organization schedules in
the same timezone can be directly combined.
",
            "type": "optional<string>",
          },
          "valid_until": {
            "docs": "Derived field indicating when a valid organization schedule will
become invalid. If omitted, the schedule is already invalid. A
schedule is valid if it has a weekly schedule for all named periods
for all its schedule fragments, and if it has a schedule fragment
for the time period in question.
",
            "type": "optional<datetime>",
          },
          "weekly_org_schedules": {
            "docs": "If the organization schedule fragment specifies that the given day
belongs to a named period, a weekly schedule from this list with
the matching name will be selected.
",
            "type": "optional<list<WeeklyOrgSchedule>>",
          },
        },
      },
      "OrgScheduleFragment": {
        "docs": undefined,
        "extends": [
          "AtomBase",
        ],
        "properties": {
          "from": {
            "docs": "The date (inclusive) on which the organization schedule fragment
begins.
",
            "type": "optional<datetime>",
          },
          "intervals": {
            "docs": "Periods during which the schedule is considered to be 'off' or to
be in some specific named period.
",
            "type": "optional<list<OrgScheduleInterval>>",
          },
          "name": {
            "docs": "Human-readable name, indicating the purpose of the schedule.
",
            "type": "optional<string>",
          },
          "region_codes": {
            "docs": "CLDR region code of the countries/regions it is meant to be valid
for. Does not drive logic, serves only for easier filtering and
organization.
",
            "type": "optional<list<string>>",
          },
          "status": "OrgScheduleFragmentStatus",
          "to": {
            "docs": "The date (exclusive) on which the organization schedule fragment's
validity ends.
",
            "type": "optional<datetime>",
          },
        },
      },
      "OrgScheduleFragmentOverview": {
        "docs": "The representation of the organization schedule fragment embedded
inside a organization schedule, used to quickly look up the schedule
fragment for the right period.
",
        "type": "map<string, unknown>",
      },
      "OrgScheduleFragmentStatus": {
        "docs": "Status determines how an item can be used. In 'draft' status an item
can be edited but can't be used. When 'published' the item can longer
be edited but can be used. 'Archived' is read-only.
",
        "enum": [
          "archived",
          "draft",
          "published",
        ],
      },
      "OrgScheduleFragmentsCreateResponse": {
        "docs": undefined,
        "properties": {
          "org_schedule_fragment": "OrgScheduleFragment",
        },
      },
      "OrgScheduleFragmentsGetResponse": {
        "docs": undefined,
        "properties": {
          "org_schedule_fragment": "OrgScheduleFragment",
        },
      },
      "OrgScheduleFragmentsTransitionResponse": {
        "docs": undefined,
        "properties": {
          "org_schedule_fragment": "OrgScheduleFragment",
        },
      },
      "OrgScheduleInterval": {
        "docs": "An optionally named period on day granularity.",
        "type": "map<string, unknown>",
      },
      "OrgScheduleStatus": {
        "docs": "Status determines how an item can be used. In 'draft' status an item
can be edited but can't be used. When 'published' the item can longer
be edited but can be used. 'Archived' is read-only.
",
        "enum": [
          "archived",
          "draft",
          "published",
        ],
      },
      "OrgSchedulesCreateResponse": {
        "docs": undefined,
        "properties": {
          "org_schedule": "OrgSchedule",
        },
      },
      "OrgSchedulesGetResponse": {
        "docs": undefined,
        "properties": {
          "org_schedule": "OrgSchedule",
        },
      },
      "OrgSchedulesListResponse": {
        "docs": undefined,
        "properties": {
          "next_cursor": {
            "docs": "The cursor used to iterate subsequent results in accordance to the
sort order. If not set, then no later elements exist.
",
            "type": "optional<string>",
          },
          "org_schedules": {
            "docs": "The list of organization schedules.",
            "type": "list<OrgSchedule>",
          },
          "prev_cursor": {
            "docs": "The cursor used to iterate preceding results in accordance to the
sort order. If not set, then no prior elements exist.
",
            "type": "optional<string>",
          },
        },
      },
      "OrgSchedulesSetFutureResponse": {
        "docs": undefined,
        "properties": {
          "org_schedule": "OrgSchedule",
        },
      },
      "OrgSchedulesTransitionResponse": {
        "docs": undefined,
        "properties": {
          "org_schedule": "OrgSchedule",
        },
      },
      "OrgSchedulesUpdateResponse": {
        "docs": undefined,
        "properties": {
          "org_schedule": "OrgSchedule",
        },
      },
      "OrgSearchSummary": {
        "docs": undefined,
        "extends": [
          "SearchSummaryBase",
        ],
        "properties": {
          "org": "OrgSummary",
        },
      },
      "OrgSummary": {
        "base-properties": {},
        "discriminant": "type",
        "docs": undefined,
        "union": {
          "account": "AccountSummary",
          "rev_org": "RevOrgSummary",
        },
      },
      "OrgType": {
        "enum": [
          "account",
          "rev_org",
        ],
      },
      "ParentPartFilter": {
        "docs": "The filter for specifying parent part.",
        "properties": {
          "level": {
            "docs": "Number of levels to fetch the part hierarchy up to.",
            "type": "optional<integer>",
          },
          "parts": {
            "docs": "Part IDs to fetch the hierarchy for.",
            "type": "list<string>",
          },
        },
      },
      "PartBase": {
        "docs": undefined,
        "extends": [
          "AtomBase",
        ],
        "properties": {
          "artifacts": {
            "docs": "The attached artifacts.",
            "type": "optional<list<ArtifactSummary>>",
          },
          "custom_fields": {
            "docs": "Custom fields.",
            "type": "optional<map<string, unknown>>",
          },
          "custom_schema_fragments": {
            "docs": "Custom schema fragments.",
            "type": "optional<list<string>>",
          },
          "description": {
            "docs": "Description of the part.",
            "type": "optional<string>",
          },
          "name": {
            "docs": "Name of the part.",
            "type": "string",
          },
          "owned_by": {
            "docs": "The users that own the part.",
            "type": "list<UserSummary>",
          },
          "stock_schema_fragment": {
            "docs": "Stock schema fragment.",
            "type": "optional<string>",
          },
          "subtype": {
            "docs": "Subtype corresponding to the custom type fragment.",
            "type": "optional<string>",
          },
          "tags": {
            "docs": "Tags associated with the object.",
            "type": "optional<list<TagWithValue>>",
          },
        },
      },
      "PartBaseSummary": {
        "docs": undefined,
        "extends": [
          "AtomBaseSummary",
        ],
        "properties": {
          "name": {
            "docs": "Name of the part.",
            "type": "string",
          },
        },
      },
      "PartSearchSummary": {
        "docs": undefined,
        "extends": [
          "SearchSummaryBase",
        ],
        "properties": {
          "part": "PartSummary",
        },
      },
      "PartSummary": {
        "base-properties": {},
        "discriminant": "type",
        "docs": undefined,
        "union": {
          "capability": "CapabilitySummary",
          "enhancement": "EnhancementSummary",
          "feature": "FeatureSummary",
          "product": "ProductSummary",
        },
      },
      "PartType": {
        "enum": [
          "capability",
          "enhancement",
          "feature",
          "product",
        ],
      },
      "PartsCreateRequest": {
        "base-properties": {
          "artifacts": {
            "docs": "The IDs of the artifacts.",
            "type": "optional<list<string>>",
          },
          "custom_fields": {
            "docs": "Custom fields.",
            "type": "optional<map<string, unknown>>",
          },
          "custom_schema_fragments": {
            "docs": "The custom schema fragments to use.",
            "type": "optional<list<string>>",
          },
          "description": {
            "docs": "Description of the part.",
            "type": "optional<string>",
          },
          "name": {
            "docs": "Name of the part.",
            "type": "string",
          },
          "owned_by": {
            "docs": "The users that own the part.",
            "type": "list<string>",
          },
        },
        "discriminant": "type",
        "docs": undefined,
        "union": {
          "capability": "PartsCreateRequestCapability",
          "enhancement": "PartsCreateRequestEnhancement",
          "feature": "PartsCreateRequestFeature",
          "product": "PartsCreateRequestProduct",
        },
      },
      "PartsCreateRequestCapability": {
        "docs": undefined,
        "properties": {
          "parent_part": {
            "docs": "ID of the parent product for the capability.",
            "type": "list<string>",
          },
        },
      },
      "PartsCreateRequestEnhancement": {
        "docs": undefined,
        "properties": {
          "parent_part": {
            "docs": "ID of the parent part on which the enhancement is to be created.
",
            "type": "list<string>",
          },
          "target_close_date": {
            "docs": "Target close date by which enhancement is expected to be closed.
",
            "type": "optional<datetime>",
          },
          "target_start_date": {
            "docs": "Target start date by which enhancement is expected to be started.
Example Date Format: 2000-11-01T01:01:01Z
",
            "type": "optional<datetime>",
          },
        },
      },
      "PartsCreateRequestFeature": {
        "docs": undefined,
        "properties": {
          "parent_part": {
            "docs": "ID of the parent capability/feature for the feature.",
            "type": "list<string>",
          },
        },
      },
      "PartsCreateRequestProduct": "map<string, unknown>",
      "PartsCreateResponse": {
        "docs": undefined,
        "properties": {
          "part": "part",
        },
      },
      "PartsDeleteResponse": "map<string, unknown>",
      "PartsGetResponse": {
        "docs": undefined,
        "properties": {
          "part": "part",
        },
      },
      "PartsListResponse": {
        "docs": undefined,
        "properties": {
          "next_cursor": {
            "docs": "The cursor used to iterate subsequent results in accordance to the
sort order. If not set, then no later elements exist.
",
            "type": "optional<string>",
          },
          "parts": {
            "docs": "The list of parts.",
            "type": "list<part>",
          },
          "prev_cursor": {
            "docs": "The cursor used to iterate preceding results in accordance to the
sort order. If not set, then no prior elements exist.
",
            "type": "optional<string>",
          },
        },
      },
      "PartsUpdateRequest": {
        "base-properties": {
          "artifacts": "optional<PartsUpdateRequestArtifacts>",
          "custom_fields": {
            "docs": "Custom fields.",
            "type": "optional<map<string, unknown>>",
          },
          "custom_schema_fragments": {
            "docs": "The custom schema fragments to use.",
            "type": "optional<list<string>>",
          },
          "description": {
            "docs": "The updated description of the part.",
            "type": "optional<string>",
          },
          "id": {
            "docs": "The ID of the part to update.",
            "type": "string",
          },
          "name": {
            "docs": "The updated name of the part.",
            "type": "optional<string>",
          },
          "owned_by": "optional<PartsUpdateRequestOwnedBy>",
        },
        "discriminant": "type",
        "docs": undefined,
        "union": {
          "capability": "PartsUpdateRequestCapability",
          "enhancement": "PartsUpdateRequestEnhancement",
          "feature": "PartsUpdateRequestFeature",
          "none": "empty",
          "product": "PartsUpdateRequestProduct",
        },
      },
      "PartsUpdateRequestArtifacts": {
        "docs": undefined,
        "properties": {
          "set": {
            "docs": "Sets the artifacts to the provided IDs.",
            "type": "optional<list<string>>",
          },
        },
      },
      "PartsUpdateRequestCapability": "map<string, unknown>",
      "PartsUpdateRequestEnhancement": {
        "docs": undefined,
        "properties": {
          "target_close_date": {
            "docs": "Updates the target close date of the enhancement.",
            "type": "optional<datetime>",
          },
          "target_start_date": {
            "docs": "Updates the target start date of the enhancement. Example Date
Format: 2000-11-01T01:01:01Z
",
            "type": "optional<datetime>",
          },
        },
      },
      "PartsUpdateRequestFeature": "map<string, unknown>",
      "PartsUpdateRequestOwnedBy": {
        "docs": undefined,
        "properties": {
          "set": {
            "docs": "Sets the owner IDs to the provided user IDs. This must not be
empty.
",
            "type": "optional<list<string>>",
          },
        },
      },
      "PartsUpdateRequestProduct": "map<string, unknown>",
      "PartsUpdateResponse": {
        "docs": undefined,
        "properties": {
          "part": "part",
        },
      },
      "Product": "PartBase",
      "ProductSummary": "PartBaseSummary",
      "QuestionAnswerSearchSummary": {
        "docs": undefined,
        "extends": [
          "SearchSummaryBase",
        ],
        "properties": {
          "question_answer": "QuestionAnswerSummary",
        },
      },
      "QuestionAnswerSummary": {
        "docs": undefined,
        "extends": [
          "AtomBaseSummary",
        ],
        "properties": {
          "question": {
            "docs": "The Question.",
            "type": "optional<string>",
          },
        },
      },
      "ResourceSummary": {
        "docs": "Resource details.",
        "properties": {
          "artifacts": {
            "docs": "Ids of the artifacts.",
            "type": "optional<list<ArtifactSummary>>",
          },
          "url": {
            "docs": "URL of the external article.",
            "type": "optional<string>",
          },
        },
      },
      "RevOrg": {
        "docs": undefined,
        "extends": [
          "OrgBase",
        ],
        "properties": {
          "account": "optional<AccountSummary>",
          "artifacts": {
            "docs": "The artifacts attached to the Rev organization.",
            "type": "optional<list<ArtifactSummary>>",
          },
          "custom_fields": {
            "docs": "Custom fields.",
            "type": "optional<map<string, unknown>>",
          },
          "custom_schema_fragments": {
            "docs": "Custom schema fragments.",
            "type": "optional<list<string>>",
          },
          "description": {
            "docs": "Description of the Rev organization.",
            "type": "optional<string>",
          },
          "domain": {
            "docs": "Company's domain name. Example - 'devrev.ai'.",
            "type": "optional<string>",
          },
          "external_ref": {
            "docs": "External ref is a unique identifier for the Rev (customer)
organization from your primary customer system of records. If none
is specified, a system-generated identifier will be assigned to the
organization.
",
            "type": "optional<string>",
          },
          "stock_schema_fragment": {
            "docs": "Stock schema fragment.",
            "type": "optional<string>",
          },
          "subtype": {
            "docs": "Subtype corresponding to the custom type fragment.",
            "type": "optional<string>",
          },
          "tags": {
            "docs": "Tags associated with an object.",
            "type": "optional<list<TagWithValue>>",
          },
        },
      },
      "RevOrgSummary": "OrgBaseSummary",
      "RevOrgsCreateResponse": {
        "docs": "Response object for request to create a new Rev organization.
",
        "properties": {
          "rev_org": "RevOrg",
        },
      },
      "RevOrgsDeleteResponse": {
        "docs": "The response to deleting a Rev organization.",
        "type": "map<string, unknown>",
      },
      "RevOrgsGetResponse": {
        "docs": "The response to getting a Rev organization's information.",
        "properties": {
          "rev_org": "RevOrg",
        },
      },
      "RevOrgsListResponse": {
        "docs": "The response to getting a list of Rev organizations' information.
",
        "properties": {
          "next_cursor": {
            "docs": "The cursor used to iterate subsequent results in accordance to the
sort order. If not set, then no later elements exist.
",
            "type": "optional<string>",
          },
          "prev_cursor": {
            "docs": "The cursor used to iterate preceding results in accordance to the
sort order. If not set, then no prior elements exist.
",
            "type": "optional<string>",
          },
          "rev_orgs": {
            "docs": "List with all of the Rev organizations' information.",
            "type": "list<RevOrg>",
          },
        },
      },
      "RevOrgsUpdateRequestArtifacts": {
        "docs": undefined,
        "properties": {
          "set": {
            "docs": "Sets the IDs to the provided artifact IDs.",
            "type": "optional<list<string>>",
          },
        },
      },
      "RevOrgsUpdateResponse": {
        "docs": "Response object to updating Rev organization's information.",
        "properties": {
          "rev_org": "RevOrg",
        },
      },
      "RevUser": {
        "docs": undefined,
        "extends": [
          "UserBase",
        ],
        "properties": {
          "artifacts": {
            "docs": "The artifacts attached to the Rev user.",
            "type": "optional<list<ArtifactSummary>>",
          },
          "custom_fields": {
            "docs": "Custom fields.",
            "type": "optional<map<string, unknown>>",
          },
          "custom_schema_fragments": {
            "docs": "Custom schema fragments.",
            "type": "optional<list<string>>",
          },
          "description": {
            "docs": "Description of the Rev user.",
            "type": "optional<string>",
          },
          "external_ref": {
            "docs": "External ref is a mutable unique identifier for a user within the
Rev organization from your primary customer record. If none is
available, a good alternative is the email address/phone number
which could uniquely identify the user. If none is specified, a
system-generated identifier will be assigned to the user.
",
            "type": "optional<string>",
          },
          "is_verified": {
            "docs": "Whether the Rev user is verified or not.",
            "type": "optional<boolean>",
          },
          "rev_org": "optional<OrgSummary>",
          "stock_schema_fragment": {
            "docs": "Stock schema fragment.",
            "type": "optional<string>",
          },
          "subtype": {
            "docs": "Subtype corresponding to the custom type fragment.",
            "type": "optional<string>",
          },
          "tags": {
            "docs": "Tags associated with the object.",
            "type": "optional<list<TagWithValue>>",
          },
        },
      },
      "RevUserSummary": {
        "docs": undefined,
        "extends": [
          "UserBaseSummary",
        ],
        "properties": {
          "external_ref": {
            "docs": "External ref is a mutable unique identifier for a user within the
Rev organization from your primary customer record. If none is
available, a good alternative is the email address/phone number
which could uniquely identify the user. If none is specified, a
system-generated identifier will be assigned to the user.
",
            "type": "optional<string>",
          },
          "rev_org": "optional<OrgSummary>",
        },
      },
      "RevUsersCreateResponse": {
        "docs": "Response object for creating a new Rev user for Rev organization.
",
        "properties": {
          "rev_user": "RevUser",
        },
      },
      "RevUsersDeleteResponse": {
        "docs": "The response to deleting a Rev user of a Rev organization.",
        "type": "map<string, unknown>",
      },
      "RevUsersGetResponse": {
        "docs": "The returned Rev user.",
        "properties": {
          "rev_user": "RevUser",
        },
      },
      "RevUsersListResponse": {
        "docs": "The response to listing all Rev users matching the filter criteria.
",
        "properties": {
          "next_cursor": {
            "docs": "The cursor used to iterate subsequent results in accordance to the
sort order. If not set, then no later elements exist.
",
            "type": "optional<string>",
          },
          "prev_cursor": {
            "docs": "The cursor used to iterate preceding results in accordance to the
sort order. If not set, then no prior elements exist.
",
            "type": "optional<string>",
          },
          "rev_users": {
            "docs": "List containing all the Rev users.",
            "type": "list<RevUser>",
          },
        },
      },
      "RevUsersUpdateRequestArtifacts": {
        "docs": undefined,
        "properties": {
          "set": {
            "docs": "Sets the IDs to the provided artifact IDs.",
            "type": "optional<list<string>>",
          },
        },
      },
      "RevUsersUpdateRequestCustomSchemaFragments": {
        "docs": undefined,
        "properties": {
          "set": {
            "docs": "Sets the IDs to the provided schema fragment IDs.",
            "type": "optional<list<string>>",
          },
        },
      },
      "RevUsersUpdateResponse": {
        "docs": "Updated Rev user object.",
        "properties": {
          "rev_user": "RevUser",
        },
      },
      "SchemaBoolFieldDescriptor": {
        "docs": undefined,
        "extends": [
          "SchemaFieldDescriptorBase",
        ],
        "properties": {
          "default_value": {
            "docs": "Default value.",
            "type": "optional<boolean>",
          },
        },
      },
      "SchemaBoolListFieldDescriptor": {
        "docs": undefined,
        "extends": [
          "SchemaFieldDescriptorBase",
        ],
        "properties": {
          "default_value": {
            "docs": "Default value.",
            "type": "optional<list<boolean>>",
          },
        },
      },
      "SchemaCompositeFieldDescriptor": {
        "docs": undefined,
        "extends": [
          "SchemaFieldDescriptorBase",
        ],
        "properties": {
          "composite_type": {
            "docs": "Composite type. Required when field type is composite.",
            "type": "optional<string>",
          },
        },
      },
      "SchemaCompositeListFieldDescriptor": {
        "docs": undefined,
        "extends": [
          "SchemaFieldDescriptorBase",
        ],
        "properties": {
          "composite_type": {
            "docs": "Composite type. Required when field type is composite.",
            "type": "optional<string>",
          },
        },
      },
      "SchemaDateFieldDescriptor": {
        "docs": undefined,
        "extends": [
          "SchemaFieldDescriptorBase",
        ],
        "properties": {
          "default_value": {
            "docs": "Default value.",
            "type": "optional<string>",
          },
        },
      },
      "SchemaDateListFieldDescriptor": {
        "docs": undefined,
        "extends": [
          "SchemaFieldDescriptorBase",
        ],
        "properties": {
          "default_value": {
            "docs": "Default value.",
            "type": "optional<list<string>>",
          },
        },
      },
      "SchemaDoubleFieldDescriptor": {
        "docs": undefined,
        "extends": [
          "SchemaFieldDescriptorBase",
        ],
        "properties": {
          "default_value": {
            "docs": "Default value.",
            "type": "optional<double>",
          },
        },
      },
      "SchemaDoubleListFieldDescriptor": {
        "docs": undefined,
        "extends": [
          "SchemaFieldDescriptorBase",
        ],
        "properties": {
          "default_value": {
            "docs": "Default value.",
            "type": "optional<list<double>>",
          },
        },
      },
      "SchemaEnumFieldDescriptor": {
        "docs": undefined,
        "extends": [
          "SchemaFieldDescriptorBase",
        ],
        "properties": {
          "allowed_values": {
            "docs": "Allowed values for the field.",
            "type": "list<string>",
          },
          "default_value": {
            "docs": "Default value.",
            "type": "optional<string>",
          },
        },
      },
      "SchemaEnumListFieldDescriptor": {
        "docs": undefined,
        "extends": [
          "SchemaFieldDescriptorBase",
        ],
        "properties": {
          "allowed_values": {
            "docs": "Allowed values for the field.",
            "type": "list<string>",
          },
          "default_value": {
            "docs": "Default value.",
            "type": "optional<list<string>>",
          },
        },
      },
      "SchemaFieldCreateViewUiMetadata": {
        "docs": "Create view UI hint overrides.",
        "properties": {
          "is_hidden": {
            "docs": "Whether field is hidden in the UI create view.",
            "type": "optional<boolean>",
          },
        },
      },
      "SchemaFieldDescriptor": {
        "base-properties": {},
        "discriminant": "field_type",
        "docs": "Set of field attributes.",
        "union": {
          "array": "SchemaFieldDescriptorArrayType",
          "bool": "SchemaBoolFieldDescriptor",
          "composite": "SchemaCompositeFieldDescriptor",
          "date": "SchemaDateFieldDescriptor",
          "double": "SchemaDoubleFieldDescriptor",
          "enum": "SchemaEnumFieldDescriptor",
          "id": "SchemaIdFieldDescriptor",
          "int": "SchemaIntFieldDescriptor",
          "rich_text": "SchemaRichTextFieldDescriptor",
          "text": "SchemaTextFieldDescriptor",
          "timestamp": "SchemaTimestampFieldDescriptor",
          "tokens": "SchemaTokensFieldDescriptor",
          "uenum": "SchemaUenumFieldDescriptor",
          "unknown": "SchemaUnknownFieldDescriptor",
        },
      },
      "SchemaFieldDescriptorArrayType": {
        "base-properties": {
          "eq_items": {
            "docs": "The exact array length.",
            "type": "optional<integer>",
          },
          "max_items": {
            "docs": "The maximum array length.",
            "type": "optional<integer>",
          },
          "min_items": {
            "docs": "The minimum array length.",
            "type": "optional<integer>",
          },
        },
        "discriminant": "base_type",
        "docs": undefined,
        "union": {
          "bool": "SchemaBoolListFieldDescriptor",
          "composite": "SchemaCompositeListFieldDescriptor",
          "date": "SchemaDateListFieldDescriptor",
          "double": "SchemaDoubleListFieldDescriptor",
          "enum": "SchemaEnumListFieldDescriptor",
          "id": "SchemaIdListFieldDescriptor",
          "int": "SchemaIntListFieldDescriptor",
          "rich_text": "SchemaRichTextListFieldDescriptor",
          "text": "SchemaTextListFieldDescriptor",
          "timestamp": "SchemaTimestampListFieldDescriptor",
          "tokens": "SchemaTokensListFieldDescriptor",
          "uenum": "SchemaUenumListFieldDescriptor",
        },
      },
      "SchemaFieldDescriptorArrayTypeBaseType": {
        "enum": [
          "bool",
          "composite",
          "date",
          "double",
          "enum",
          "id",
          "int",
          "rich_text",
          "text",
          "timestamp",
          "tokens",
          "uenum",
        ],
      },
      "SchemaFieldDescriptorBase": {
        "docs": undefined,
        "properties": {
          "description": {
            "docs": "Description of the field.",
            "type": "optional<string>",
          },
          "is_filterable": {
            "docs": "Whether this field is filterable, groupable and sortable.
",
            "type": "optional<boolean>",
          },
          "is_pii": {
            "docs": "Whether this field can hold Personally Identifiable Information
(PII).
",
            "type": "optional<boolean>",
          },
          "is_required": {
            "docs": "Whether this field is required or not.",
            "type": "optional<boolean>",
          },
          "mfz": "optional<SchemaFieldMfzMetadata>",
          "name": {
            "docs": "Name of the field.",
            "type": "string",
          },
          "origin": {
            "docs": "Type this field is from.",
            "type": "optional<string>",
          },
          "ui": "optional<SchemaFieldUiMetadata>",
        },
      },
      "SchemaFieldDescriptorFieldType": {
        "enum": [
          "array",
          "bool",
          "composite",
          "date",
          "double",
          "enum",
          "id",
          "int",
          "rich_text",
          "text",
          "timestamp",
          "tokens",
          "uenum",
          "unknown",
        ],
      },
      "SchemaFieldDetailViewUiMetadata": {
        "docs": "Detail view UI hint overrides.",
        "properties": {
          "is_hidden": {
            "docs": "Whether the field is hidden in the UI detail view.",
            "type": "optional<boolean>",
          },
        },
      },
      "SchemaFieldFilterViewUiMetadata": {
        "docs": "Filter view UI hint overrides.",
        "properties": {
          "is_hidden": {
            "docs": "Whether field is hidden in the UI filter view.",
            "type": "optional<boolean>",
          },
        },
      },
      "SchemaFieldListViewUiMetadata": {
        "docs": "List view UI hint overrides.",
        "properties": {
          "is_hidden": {
            "docs": "Whether the field is hidden in the UI list view.",
            "type": "optional<boolean>",
          },
        },
      },
      "SchemaFieldMfzMetadata": {
        "docs": "The schema of MFZ specific fields.",
        "type": "map<string, unknown>",
      },
      "SchemaFieldSummaryViewUiMetadata": {
        "docs": "Summary view UI hint overrides.",
        "properties": {
          "is_hidden": {
            "docs": "Whether field is hidden in the UI summary view.",
            "type": "optional<boolean>",
          },
        },
      },
      "SchemaFieldUenumValue": {
        "docs": "A unified enum value.",
        "type": "map<string, unknown>",
      },
      "SchemaFieldUiMetadata": {
        "docs": "The schema of ui specific fields.",
        "properties": {
          "create_view": "optional<SchemaFieldCreateViewUiMetadata>",
          "detail_view": "optional<SchemaFieldDetailViewUiMetadata>",
          "display_name": {
            "docs": "The display name of the field.",
            "type": "optional<string>",
          },
          "filter_view": "optional<SchemaFieldFilterViewUiMetadata>",
          "group_name": {
            "docs": "An optional group name for the field.",
            "type": "optional<string>",
          },
          "is_active_in_detail_view": {
            "docs": "Whether the field is active in the UI detail view.",
            "type": "optional<boolean>",
          },
          "is_bulk_action_enabled": {
            "docs": "Whether the field supports bulk action.",
            "type": "optional<boolean>",
          },
          "is_groupable": {
            "docs": "Whether the field is groupable in the UI.",
            "type": "optional<boolean>",
          },
          "is_hidden": {
            "docs": "Whether the field is hidden in the UI.",
            "type": "optional<boolean>",
          },
          "is_hidden_during_create": {
            "docs": "Whether the field is hidden in the UI during creation.",
            "type": "optional<boolean>",
          },
          "is_read_only": {
            "docs": "Whether the field is read-only in the UI.",
            "type": "optional<boolean>",
          },
          "is_shown_in_summary": {
            "docs": "Whether the field is shown in the UI summary view.",
            "type": "optional<boolean>",
          },
          "is_sortable": {
            "docs": "Whether the field is sortable in the UI.",
            "type": "optional<boolean>",
          },
          "list_view": "optional<SchemaFieldListViewUiMetadata>",
          "placeholder": {
            "docs": "A placeholder for the field.",
            "type": "optional<string>",
          },
          "summary_view": "optional<SchemaFieldSummaryViewUiMetadata>",
          "tooltip": {
            "docs": "Tooltip for the field.",
            "type": "optional<string>",
          },
        },
      },
      "SchemaIdFieldDescriptor": {
        "docs": undefined,
        "extends": [
          "SchemaFieldDescriptorBase",
        ],
        "properties": {
          "default_value": {
            "docs": "Default value.",
            "type": "optional<string>",
          },
          "id_type": {
            "docs": "Object ID types. Required when field type is ID.",
            "type": "optional<list<string>>",
          },
        },
      },
      "SchemaIdListFieldDescriptor": {
        "docs": undefined,
        "extends": [
          "SchemaFieldDescriptorBase",
        ],
        "properties": {
          "default_value": {
            "docs": "Default value.",
            "type": "optional<list<string>>",
          },
          "id_type": {
            "docs": "Object ID types. Required when field type is ID.",
            "type": "optional<list<string>>",
          },
        },
      },
      "SchemaIntFieldDescriptor": {
        "docs": undefined,
        "extends": [
          "SchemaFieldDescriptorBase",
        ],
        "properties": {
          "default_value": {
            "docs": "Default value.",
            "type": "optional<integer>",
          },
          "gt": {
            "docs": "The minimum value for the integer (exclusive).",
            "type": "optional<integer>",
          },
          "gte": {
            "docs": "The minimum value for the integer (inclusive).",
            "type": "optional<integer>",
          },
          "lt": {
            "docs": "The maximum value for the integer (exclusive).",
            "type": "optional<integer>",
          },
          "lte": {
            "docs": "The maximum value for the integer (inclusive).",
            "type": "optional<integer>",
          },
        },
      },
      "SchemaIntListFieldDescriptor": {
        "docs": undefined,
        "extends": [
          "SchemaFieldDescriptorBase",
        ],
        "properties": {
          "default_value": {
            "docs": "Default value.",
            "type": "optional<list<integer>>",
          },
          "gt": {
            "docs": "The minimum value for the integer (exclusive).",
            "type": "optional<integer>",
          },
          "gte": {
            "docs": "The minimum value for the integer (inclusive).",
            "type": "optional<integer>",
          },
          "lt": {
            "docs": "The maximum value for the integer (exclusive).",
            "type": "optional<integer>",
          },
          "lte": {
            "docs": "The maximum value for the integer (inclusive).",
            "type": "optional<integer>",
          },
        },
      },
      "SchemaRichTextFieldDescriptor": {
        "docs": undefined,
        "extends": [
          "SchemaFieldDescriptorBase",
        ],
        "properties": {
          "contains": {
            "docs": "The contained substring.",
            "type": "optional<string>",
          },
          "default_value": {
            "docs": "Default value.",
            "type": "optional<string>",
          },
          "eq_len": {
            "docs": "The exact string length.",
            "type": "optional<integer>",
          },
          "max_len": {
            "docs": "The maximum string length.",
            "type": "optional<integer>",
          },
          "min_len": {
            "docs": "The minimum string length.",
            "type": "optional<integer>",
          },
          "pattern": {
            "docs": "The string pattern (regular expression).",
            "type": "optional<string>",
          },
          "prefix": {
            "docs": "The string prefix.",
            "type": "optional<string>",
          },
          "suffix": {
            "docs": "The string suffix.",
            "type": "optional<string>",
          },
        },
      },
      "SchemaRichTextListFieldDescriptor": {
        "docs": undefined,
        "extends": [
          "SchemaFieldDescriptorBase",
        ],
        "properties": {
          "contains": {
            "docs": "The contained substring.",
            "type": "optional<string>",
          },
          "default_value": {
            "docs": "Default value.",
            "type": "optional<list<string>>",
          },
          "eq_len": {
            "docs": "The exact string length.",
            "type": "optional<integer>",
          },
          "max_len": {
            "docs": "The maximum string length.",
            "type": "optional<integer>",
          },
          "min_len": {
            "docs": "The minimum string length.",
            "type": "optional<integer>",
          },
          "pattern": {
            "docs": "The string pattern (regular expression).",
            "type": "optional<string>",
          },
          "prefix": {
            "docs": "The string prefix.",
            "type": "optional<string>",
          },
          "suffix": {
            "docs": "The string suffix.",
            "type": "optional<string>",
          },
        },
      },
      "SchemaTextFieldDescriptor": {
        "docs": undefined,
        "extends": [
          "SchemaFieldDescriptorBase",
        ],
        "properties": {
          "contains": {
            "docs": "The contained substring.",
            "type": "optional<string>",
          },
          "default_value": {
            "docs": "Default value.",
            "type": "optional<string>",
          },
          "eq_len": {
            "docs": "The exact string length.",
            "type": "optional<integer>",
          },
          "max_len": {
            "docs": "The maximum string length.",
            "type": "optional<integer>",
          },
          "min_len": {
            "docs": "The minimum string length.",
            "type": "optional<integer>",
          },
          "pattern": {
            "docs": "The string pattern (regular expression).",
            "type": "optional<string>",
          },
          "prefix": {
            "docs": "The string prefix.",
            "type": "optional<string>",
          },
          "suffix": {
            "docs": "The string suffix.",
            "type": "optional<string>",
          },
        },
      },
      "SchemaTextListFieldDescriptor": {
        "docs": undefined,
        "extends": [
          "SchemaFieldDescriptorBase",
        ],
        "properties": {
          "contains": {
            "docs": "The contained substring.",
            "type": "optional<string>",
          },
          "default_value": {
            "docs": "Default value.",
            "type": "optional<list<string>>",
          },
          "eq_len": {
            "docs": "The exact string length.",
            "type": "optional<integer>",
          },
          "max_len": {
            "docs": "The maximum string length.",
            "type": "optional<integer>",
          },
          "min_len": {
            "docs": "The minimum string length.",
            "type": "optional<integer>",
          },
          "pattern": {
            "docs": "The string pattern (regular expression).",
            "type": "optional<string>",
          },
          "prefix": {
            "docs": "The string prefix.",
            "type": "optional<string>",
          },
          "suffix": {
            "docs": "The string suffix.",
            "type": "optional<string>",
          },
        },
      },
      "SchemaTimestampFieldDescriptor": {
        "docs": undefined,
        "extends": [
          "SchemaFieldDescriptorBase",
        ],
        "properties": {
          "default_value": {
            "docs": "Default value.",
            "type": "optional<string>",
          },
        },
      },
      "SchemaTimestampListFieldDescriptor": {
        "docs": undefined,
        "extends": [
          "SchemaFieldDescriptorBase",
        ],
        "properties": {
          "default_value": {
            "docs": "Default value.",
            "type": "optional<list<string>>",
          },
        },
      },
      "SchemaTokensFieldDescriptor": {
        "docs": undefined,
        "extends": [
          "SchemaFieldDescriptorBase",
        ],
        "properties": {
          "contains": {
            "docs": "The contained substring.",
            "type": "optional<string>",
          },
          "default_value": {
            "docs": "Default value.",
            "type": "optional<string>",
          },
          "eq_len": {
            "docs": "The exact string length.",
            "type": "optional<integer>",
          },
          "max_len": {
            "docs": "The maximum string length.",
            "type": "optional<integer>",
          },
          "min_len": {
            "docs": "The minimum string length.",
            "type": "optional<integer>",
          },
          "pattern": {
            "docs": "The string pattern (regular expression).",
            "type": "optional<string>",
          },
          "prefix": {
            "docs": "The string prefix.",
            "type": "optional<string>",
          },
          "suffix": {
            "docs": "The string suffix.",
            "type": "optional<string>",
          },
        },
      },
      "SchemaTokensListFieldDescriptor": {
        "docs": undefined,
        "extends": [
          "SchemaFieldDescriptorBase",
        ],
        "properties": {
          "contains": {
            "docs": "The contained substring.",
            "type": "optional<string>",
          },
          "default_value": {
            "docs": "Default value.",
            "type": "optional<list<string>>",
          },
          "eq_len": {
            "docs": "The exact string length.",
            "type": "optional<integer>",
          },
          "max_len": {
            "docs": "The maximum string length.",
            "type": "optional<integer>",
          },
          "min_len": {
            "docs": "The minimum string length.",
            "type": "optional<integer>",
          },
          "pattern": {
            "docs": "The string pattern (regular expression).",
            "type": "optional<string>",
          },
          "prefix": {
            "docs": "The string prefix.",
            "type": "optional<string>",
          },
          "suffix": {
            "docs": "The string suffix.",
            "type": "optional<string>",
          },
        },
      },
      "SchemaUenumFieldDescriptor": {
        "docs": undefined,
        "extends": [
          "SchemaFieldDescriptorBase",
        ],
        "properties": {
          "allowed_values": {
            "docs": "Allowed values for the field.",
            "type": "list<SchemaFieldUenumValue>",
          },
          "default_value": {
            "docs": "Default value.",
            "type": "optional<integer>",
          },
        },
      },
      "SchemaUenumListFieldDescriptor": {
        "docs": undefined,
        "extends": [
          "SchemaFieldDescriptorBase",
        ],
        "properties": {
          "allowed_values": {
            "docs": "Allowed values for the field.",
            "type": "list<SchemaFieldUenumValue>",
          },
          "default_value": {
            "docs": "Default value.",
            "type": "optional<list<integer>>",
          },
        },
      },
      "SchemaUnknownFieldDescriptor": "SchemaFieldDescriptorBase",
      "SearchCoreResponse": {
        "docs": "Search response.",
        "properties": {
          "cursor": {
            "docs": "The cursor from where to begin iteration. Start from beginning if
not provided.
",
            "type": "optional<string>",
          },
          "results": {
            "docs": "The search results.",
            "type": "list<SearchResult>",
          },
        },
      },
      "SearchNamespace": {
        "docs": "The namespaces to search in.",
        "enum": [
          "account",
          "article",
          "capability",
          "component",
          "conversation",
          "custom_part",
          "custom_work",
          "dev_user",
          "enhancement",
          "feature",
          "group",
          "issue",
          "linkable",
          "microservice",
          "object_member",
          "opportunity",
          "product",
          "project",
          "question_answer",
          "rev_org",
          "rev_user",
          "runnable",
          "service_account",
          "sys_user",
          "tag",
          "task",
          "ticket",
          "vista",
        ],
      },
      "SearchResult": {
        "base-properties": {},
        "discriminant": "type",
        "docs": undefined,
        "union": {
          "account": "AccountSearchSummary",
          "article": "ArticleSearchSummary",
          "artifact": "ArtifactSearchSummary",
          "conversation": "ConversationSearchSummary",
          "group": "GroupSearchSummary",
          "link": "LinkSearchSummary",
          "object_member": "ObjectMemberSearchSummary",
          "org": "OrgSearchSummary",
          "part": "PartSearchSummary",
          "question_answer": "QuestionAnswerSearchSummary",
          "tag": "TagSearchSummary",
          "user": "UserSearchSummary",
          "vista": "VistaSearchSummary",
          "work": "WorkSearchSummary",
        },
      },
      "SearchResultType": {
        "enum": [
          "account",
          "article",
          "artifact",
          "conversation",
          "group",
          "link",
          "object_member",
          "org",
          "part",
          "question_answer",
          "tag",
          "user",
          "vista",
          "work",
        ],
      },
      "SearchSortByParam": {
        "docs": "Search sort by parameters.",
        "enum": [
          "created_date",
          "modified_date",
          "relevance",
        ],
      },
      "SearchSortOrderParam": {
        "docs": "Search sort order parameters.",
        "enum": [
          "asc",
          "desc",
        ],
      },
      "SearchSummaryBase": {
        "docs": undefined,
        "properties": {
          "modified_date": {
            "docs": "Timestamp when the object was last modified.",
            "type": "optional<datetime>",
          },
          "snippet": {
            "docs": "Text snippet where the search hit occurred.",
            "type": "optional<string>",
          },
        },
      },
      "ServiceAccount": "UserBase",
      "ServiceAccountSummary": "UserBaseSummary",
      "ServiceAccountsGetResponse": {
        "docs": "The response object that carries the service account's information
corresponding to the request.
",
        "properties": {
          "service_account": "ServiceAccount",
        },
      },
      "SetOrgScheduleFragmentSummary": {
        "docs": undefined,
        "properties": {
          "id": {
            "docs": "Organization schedule fragment ID.",
            "type": "string",
          },
        },
      },
      "SetSlaPolicy": {
        "docs": undefined,
        "properties": {
          "metrics": {
            "docs": "Metrics to apply to the selected items.",
            "type": "optional<list<SetSupportMetricTarget>>",
          },
          "name": {
            "docs": "Human-readable name.",
            "type": "string",
          },
          "selector": "SetSlaSelector",
        },
      },
      "SetSlaSelector": {
        "docs": undefined,
        "properties": {
          "applies_to": "SlaSelectorAppliesTo",
          "custom_fields": {
            "docs": "Custom fields with their fully qualified names and associated with
their exact allowed values. The SLA policy applies to records where
all named custom fields have exactly the specified values. If the
value is null, the field must have null value or not be present.
",
            "type": "optional<map<string, unknown>>",
          },
          "parts": {
            "docs": "The SLA policy applies to the tickets of these parts.",
            "type": "optional<list<string>>",
          },
          "priority": {
            "docs": "The SLA policy applies to conversations with these priorities.
",
            "type": "optional<list<SlaSelectorPriority>>",
          },
          "severity": {
            "docs": "The SLA policy applies to tickets with these severities.",
            "type": "optional<list<SlaSelectorSeverity>>",
          },
          "source_channel": {
            "docs": "The SLA policy applies to conversations with these sources.
",
            "type": "optional<list<string>>",
          },
          "subtype": {
            "docs": "The SLA policy applies to tickets with these subtypes.",
            "type": "optional<list<string>>",
          },
          "tags": {
            "docs": "The SLA policy applies to items with these tags.",
            "type": "optional<list<string>>",
          },
        },
      },
      "SetSupportMetricTarget": {
        "docs": undefined,
        "properties": {
          "metric": {
            "docs": "The metric to apply.",
            "type": "string",
          },
          "org_schedule_id": {
            "docs": "The organization schedule controlling this metrics calculation.
Time based metrics don't consume time while their schedule is off.
",
            "type": "optional<string>",
          },
          "performance": {
            "docs": "The percentage of instances for which this metric's target must not
be breached, in order to avoid breaching the overall SLA policy.
",
            "type": "optional<double>",
          },
          "target": {
            "docs": "The target value to be achieved, for example the time in which to
do something, or the maximum allowed number of message pairs. The
units and interpretation of the value is controlled by the
properties of the referenced metric.
",
            "type": "integer",
          },
          "warning_target": {
            "docs": "The threshold in the same units as target where the metric is
considered to be 'at risk'.
",
            "type": "optional<integer>",
          },
        },
      },
      "SetTagWithValue": {
        "docs": undefined,
        "properties": {
          "id": {
            "docs": "The ID of the tag.",
            "type": "string",
          },
          "value": {
            "docs": "The value for the object's association with the tag. If specified,
the value must be one that's specified in the tag's allowed values.
",
            "type": "optional<string>",
          },
        },
      },
      "SetWeeklyOrgSchedule": {
        "docs": undefined,
        "properties": {
          "intervals": {
            "docs": "The 'on' intervals of the week.",
            "type": "list<CreateWeeklyOrgScheduleInterval>",
          },
          "period_name": {
            "docs": "The name of the period during which the organization schedule
applies.
",
            "type": "string",
          },
        },
      },
      "SharedWithMembership": {
        "docs": "Information about the role the member receives due to the share.
",
        "type": "map<string, unknown>",
      },
      "SharedWithMembershipFilter": {
        "docs": "Filter on target item based on intended audience.",
        "type": "map<string, unknown>",
      },
      "SlaAssignResult": {
        "docs": undefined,
        "properties": {
          "error": "optional<error>",
          "rev_org": "RevOrgSummary",
        },
      },
      "SlaCompensation": {
        "docs": "Describes the compensation to be provided in case of SLA breach. It is
not 'self-executing', it is the responsibility of the organization
providing the SLA to actually transfer the promised credit, resource or
other payment.
",
        "type": "map<string, unknown>",
      },
      "SlaEvaluationPeriod": {
        "docs": "Specifies the frequency of when the contractually-meaningful evaluation
of the SLA happens. The organization for their own information might
evaluate the various metrics contained in the policy as often as we can
make it feasible for them, but only the evaluation at the end of the
evaluation period triggers a compensation and needs to be shared with
the customer.
",
        "enum": [
          "monthly",
          "quarterly",
          "weekly",
          "yearly",
        ],
      },
      "SlaPolicy": {
        "docs": "A policy that represents a promise to your revs.",
        "type": "map<string, unknown>",
      },
      "SlaSelectorAppliesTo": {
        "docs": "The item type for which the SLA policy applies.",
        "enum": [
          "conversation",
          "ticket",
        ],
      },
      "SlaSelectorPriority": {
        "docs": "Th SLA policy applies to conversations with these priorities.
",
        "enum": [
          "p0",
          "p1",
          "p2",
        ],
      },
      "SlaSelectorSeverity": {
        "docs": "The SLA policy applies to tickets with these severities.",
        "enum": [
          "blocker",
          "high",
          "low",
          "medium",
        ],
      },
      "SlaStatus": {
        "docs": "Status determines how an item can be used. In 'draft' status an item
can be edited but can't be used. When 'published' the item can longer
be edited but can be used. 'Archived' is read-only.
",
        "enum": [
          "archived",
          "draft",
          "published",
        ],
      },
      "SlaSummaryFilter": {
        "docs": "The filter for SLA summary.",
        "properties": {
          "stage": {
            "docs": "Filters for records with any of the provided SLA stages.",
            "type": "optional<list<SlaSummaryStage>>",
          },
          "target_time": "optional<DateFilter>",
        },
      },
      "SlaSummaryStage": {
        "docs": "The stage of the SLA. This is the metric stage which is closest to
breach.
",
        "enum": [
          "breached",
          "completed",
          "paused",
          "running",
          "warning",
        ],
      },
      "SlaTracker": "AtomBase",
      "SlasAssignResponse": {
        "docs": undefined,
        "properties": {
          "results": {
            "docs": "The list of outcomes for each Rev organization.",
            "type": "list<SlaAssignResult>",
          },
        },
      },
      "SlasCreateResponse": {
        "docs": undefined,
        "properties": {
          "sla": "sla",
        },
      },
      "SlasGetResponse": {
        "docs": undefined,
        "properties": {
          "sla": "sla",
        },
      },
      "SlasListResponse": {
        "docs": undefined,
        "properties": {
          "next_cursor": {
            "docs": "The cursor used to iterate subsequent results in accordance to the
sort order. If not set, then no later elements exist.
",
            "type": "optional<string>",
          },
          "prev_cursor": {
            "docs": "The cursor used to iterate preceding results in accordance to the
sort order. If not set, then no prior elements exist.
",
            "type": "optional<string>",
          },
          "slas": {
            "docs": "The list of SLAs.",
            "type": "list<sla>",
          },
        },
      },
      "SlasTransitionResponse": {
        "docs": undefined,
        "properties": {
          "sla": "sla",
        },
      },
      "SlasUpdateResponse": {
        "docs": undefined,
        "properties": {
          "sla": "sla",
        },
      },
      "SnapInVersionSummary": "AtomBaseSummary",
      "SnapInsResourcesResponse": {
        "docs": undefined,
        "properties": {
          "event_sources": "optional<SnapInsResourcesResponseEventSourcesEntry>",
          "inputs": {
            "docs": "The inputs for the snap-in.",
            "type": "optional<map<string, unknown>>",
          },
          "keyrings": "optional<SnapInsResourcesResponseKeyringsEntry>",
          "snap_in_version": "SnapInVersionSummary",
        },
      },
      "SnapInsResourcesResponseEventSourcesEntry": {
        "docs": undefined,
        "properties": {
          "key": "string",
          "value": "string",
        },
      },
      "SnapInsResourcesResponseKeyringData": {
        "docs": undefined,
        "properties": {
          "id": {
            "docs": "The ID of the keyring.",
            "type": "string",
          },
          "secret": {
            "docs": "The secret value of the keyring. This must be handled with caution.
",
            "type": "string",
          },
        },
      },
      "SnapInsResourcesResponseKeyringsEntry": {
        "docs": undefined,
        "properties": {
          "key": "string",
          "value": "SnapInsResourcesResponseKeyringData",
        },
      },
      "SnapWidget": {
        "base-properties": {},
        "discriminant": "type",
        "docs": undefined,
        "union": {
          "email_preview": "EmailPreviewWidget",
        },
      },
      "SnapWidgetBase": {
        "docs": undefined,
        "extends": [
          "AtomBase",
        ],
        "properties": {
          "name": {
            "docs": "A human readable name for the snap widget.",
            "type": "string",
          },
          "namespace": "optional<SnapWidgetNamespace>",
          "status": "SnapWidgetStatus",
        },
      },
      "SnapWidgetNamespace": {
        "docs": "Logical grouping of snap widgets. Useful for filtering.",
        "enum": [
          "email_preview",
          "link_preview",
          "plug_nudge",
        ],
      },
      "SnapWidgetStatus": {
        "docs": "The status of the snap widget.",
        "enum": [
          "draft",
          "published",
        ],
      },
      "SnapWidgetType": "literal<"email_preview">",
      "SnapWidgetsCreateRequest": {
        "base-properties": {
          "name": {
            "docs": "A human readable name for the snap widget.",
            "type": "string",
          },
          "namespace": "optional<SnapWidgetNamespace>",
          "status": "optional<SnapWidgetStatus>",
        },
        "discriminant": "type",
        "docs": undefined,
        "union": {
          "email_preview": "CreateEmailPreviewWidget",
        },
      },
      "SnapWidgetsCreateRequestType": "literal<"email_preview">",
      "SnapWidgetsCreateResponse": {
        "docs": undefined,
        "properties": {
          "snap_widget": "SnapWidget",
        },
      },
      "StageDiagramSummary": "AtomBaseSummary",
      "StageFilter": {
        "docs": "The filter for stages.",
        "properties": {
          "name": {
            "docs": "Filters for records in the provided stage(s) by name.",
            "type": "optional<list<string>>",
          },
        },
      },
      "StageInit": {
        "docs": "Sets an object's initial stage.",
        "properties": {
          "name": {
            "docs": "The name of the stage.",
            "type": "optional<string>",
          },
        },
      },
      "StageUpdate": {
        "docs": "Updates an object's stage.",
        "properties": {
          "name": {
            "docs": "The updated name of the stage, otherwise unchanged if not set.
",
            "type": "optional<string>",
          },
        },
      },
      "StagedInfoFilter": {
        "docs": undefined,
        "properties": {
          "is_staged": {
            "docs": "Filters for issues that are staged.",
            "type": "optional<boolean>",
          },
        },
      },
      "StockFieldOverride": {
        "docs": "A stock field override.",
        "type": "map<string, unknown>",
      },
      "StockSchemaFragment": {
        "docs": undefined,
        "extends": [
          "AtomBase",
        ],
        "properties": {
          "description": {
            "docs": "Description of the schema.",
            "type": "optional<string>",
          },
          "fields": {
            "docs": "List of all fields in this schema.",
            "type": "list<SchemaFieldDescriptor>",
          },
          "leaf_type": {
            "docs": "Leaf type this fragment applies to.",
            "type": "optional<string>",
          },
          "new_fragment_ref": "optional<AtomSummary>",
          "old_fragment_ref": "optional<AtomSummary>",
          "title": {
            "docs": "Title of the schema.",
            "type": "optional<string>",
          },
        },
      },
      "StockSchemaFragmentsGetResponse": {
        "docs": undefined,
        "properties": {
          "fragment": "StockSchemaFragment",
        },
      },
      "StockSchemaFragmentsListRequestFilterPreset": {
        "enum": [
          "customizable_types_preset",
          "no_preset",
        ],
      },
      "StockSchemaFragmentsListRequestPrune": {
        "enum": [
          "composite_schemas",
          "fields",
        ],
      },
      "StockSchemaFragmentsListResponse": {
        "docs": undefined,
        "properties": {
          "cursor": {
            "docs": "The cursor to resume iteration from, otherwise if not provided,
then iteration starts from the beginning.
",
            "type": "optional<string>",
          },
          "result": {
            "docs": "The stock schema fragments.",
            "type": "list<StockSchemaFragment>",
          },
        },
      },
      "SubtypesListResponse": {
        "docs": undefined,
        "properties": {
          "subtypes": {
            "docs": "List of subtypes.",
            "type": "list<subtype>",
          },
        },
      },
      "SurveyAggregationFilter": {
        "docs": "The filter for survey aggregation.",
        "type": "map<string, unknown>",
      },
      "SyncMetadataFilter": {
        "docs": undefined,
        "properties": {
          "last_sync_in": "optional<SyncMetadataFilterSyncInFilter>",
          "last_sync_out": "optional<SyncMetadataFilterSyncOutFilter>",
          "origin_system": {
            "docs": "Filters for issues synced from this specific origin system.
",
            "type": "optional<list<string>>",
          },
        },
      },
      "SyncMetadataFilterSyncInFilter": {
        "docs": undefined,
        "properties": {
          "status": {
            "docs": "Filters for works with selected sync statuses.",
            "type": "optional<list<SyncMetadataFilterSyncInFilterStatus>>",
          },
          "sync_date": "optional<DateFilter>",
          "sync_unit": {
            "docs": "Filters for works modified with selected sync units.",
            "type": "optional<list<string>>",
          },
        },
      },
      "SyncMetadataFilterSyncInFilterStatus": {
        "enum": [
          "failed",
          "modified",
          "staged",
          "succeeded",
        ],
      },
      "SyncMetadataFilterSyncOutFilter": {
        "docs": undefined,
        "properties": {
          "status": {
            "docs": "Filters for works with selected sync statuses.",
            "type": "optional<list<SyncMetadataFilterSyncOutFilterStatus>>",
          },
          "sync_date": "optional<DateFilter>",
          "sync_unit": {
            "docs": "Filters for works modified with selected sync units.",
            "type": "optional<list<string>>",
          },
        },
      },
      "SyncMetadataFilterSyncOutFilterStatus": {
        "enum": [
          "failed",
          "succeeded",
        ],
      },
      "SysUser": "UserBase",
      "SysUserSummary": "UserBaseSummary",
      "SysUsersListResponse": {
        "docs": "The response to listing the system users.",
        "properties": {
          "next_cursor": {
            "docs": "The cursor used to iterate subsequent results in accordance to the
sort order. If not set, then no later elements exist.
",
            "type": "optional<string>",
          },
          "prev_cursor": {
            "docs": "The cursor used to iterate preceding results in accordance to the
sort order. If not set, then no prior elements exist.
",
            "type": "optional<string>",
          },
          "sys_users": {
            "docs": "The list of system users.",
            "type": "list<SysUser>",
          },
        },
      },
      "SysUsersUpdateResponse": {
        "docs": "Updated Sys user object.",
        "properties": {
          "sys_user": "SysUser",
        },
      },
      "TagSearchSummary": {
        "docs": undefined,
        "extends": [
          "SearchSummaryBase",
        ],
        "properties": {
          "tag": "TagSummary",
        },
      },
      "TagSummary": {
        "docs": undefined,
        "extends": [
          "AtomBaseSummary",
        ],
        "properties": {
          "name": {
            "docs": "The name of the tag, which denotes the logical concept by which all
tagged objects will be associated. The name is guaranteed to be
unique.
",
            "type": "string",
          },
        },
      },
      "TagWithValue": {
        "docs": undefined,
        "properties": {
          "tag": "TagSummary",
          "value": {
            "docs": "The value for the object's association with the tag.",
            "type": "optional<string>",
          },
        },
      },
      "TagWithValueFilter": {
        "docs": undefined,
        "properties": {
          "id": {
            "docs": "The ID of the tag.",
            "type": "optional<string>",
          },
          "value": {
            "docs": "The value for the object's association with the tag. If specified,
the value must be one that's specified in the tag's allowed values.
",
            "type": "optional<string>",
          },
        },
      },
      "TagsCreateResponse": {
        "docs": "The response to creating a new tag.",
        "properties": {
          "tag": "tag",
        },
      },
      "TagsDeleteResponse": {
        "docs": "The response for deleting a tag.",
        "type": "map<string, unknown>",
      },
      "TagsGetResponse": {
        "docs": "The response to getting a tag's information.",
        "properties": {
          "tag": "tag",
        },
      },
      "TagsListResponse": {
        "docs": "The response to listing the tags.",
        "properties": {
          "next_cursor": {
            "docs": "The cursor used to iterate subsequent results in accordance to the
sort order. If not set, then no later elements exist.
",
            "type": "optional<string>",
          },
          "prev_cursor": {
            "docs": "The cursor used to iterate preceding results in accordance to the
sort order. If not set, then no prior elements exist.
",
            "type": "optional<string>",
          },
          "tags": {
            "docs": "The list of tags.",
            "type": "list<tag>",
          },
        },
      },
      "TagsUpdateAllowedValues": {
        "docs": "Specifies an update to a tag's allowed values.",
        "properties": {
          "set": {
            "docs": "Sets the allowed values for the tag.",
            "type": "optional<list<string>>",
          },
        },
      },
      "TagsUpdateResponse": {
        "docs": "The response for updating a tag.",
        "properties": {
          "tag": "tag",
        },
      },
      "Task": "WorkBase",
      "TaskPriority": {
        "docs": "Priority of the work based upon impact and criticality.",
        "enum": [
          "p0",
          "p1",
          "p2",
          "p3",
        ],
      },
      "TaskSummary": "WorkBaseSummary",
      "TenantFragment": "CustomSchemaFragmentBase",
      "TenantFragmentSummary": "CustomSchemaFragmentBaseSummary",
      "TicketChannels": {
        "docs": "Channels of the ticket.",
        "enum": [
          "email",
          "plug",
          "slack",
        ],
      },
      "TicketSeverity": {
        "docs": "Severity of the ticket.",
        "enum": [
          "blocker",
          "high",
          "low",
          "medium",
        ],
      },
      "TicketSummary": {
        "docs": undefined,
        "extends": [
          "WorkBaseSummary",
        ],
        "properties": {
          "rev_org": "optional<OrgSummary>",
          "severity": "optional<TicketSeverity>",
        },
      },
      "TimelineComment": {
        "docs": undefined,
        "extends": [
          "TimelineEntryBase",
        ],
        "properties": {
          "artifacts": {
            "docs": "The artifacts for the comment.",
            "type": "optional<list<ArtifactSummary>>",
          },
          "body": {
            "docs": "The comment's body. If the comment has been deleted, then no body
will appear in the response.
",
            "type": "optional<string>",
          },
          "body_type": "optional<TimelineCommentBodyType>",
          "snap_kit_body": "optional<TimelineSnapKitBody>",
          "snap_widget_body": {
            "docs": "The snap widget body of the comment.",
            "type": "optional<list<SnapWidget>>",
          },
        },
      },
      "TimelineCommentBodyType": {
        "docs": "The type of the body to use for the comment.",
        "enum": [
          "snap_kit",
          "snap_widget",
          "text",
        ],
      },
      "TimelineCommentSummary": "TimelineEntryBaseSummary",
      "TimelineEntriesCollection": {
        "docs": "Describes collections of timeline entries.",
        "enum": [
          "discussions",
          "events",
        ],
      },
      "TimelineEntriesCreateRequest": {
        "base-properties": {
          "collections": {
            "docs": "The collection(s) that the entry belongs to, otherwise if not
provided, then the entry's default collection is used.
",
            "type": "optional<list<TimelineEntriesCollection>>",
          },
          "expires_at": {
            "docs": "If set, then the entry is ephemeral and will be deleted after the
provided time. The minimum value should be at least a minute more
than the current timestamp.
",
            "type": "optional<datetime>",
          },
          "labels": {
            "docs": "The labels to be associated with the entry.",
            "type": "optional<list<string>>",
          },
          "object": {
            "docs": "The ID of the object to create the timeline entry for.",
            "type": "string",
          },
          "private_to": {
            "docs": "If the visibility of the entry is private, this specifies the users
that the entry is private to. Note the creator is always implicitly
included in this list.
",
            "type": "optional<list<string>>",
          },
          "visibility": "optional<TimelineEntryVisibility>",
        },
        "discriminant": "type",
        "docs": "The request to create a timeline entry for an object.",
        "union": {
          "timeline_comment": "TimelineEntriesCreateRequestTimelineComment",
        },
      },
      "TimelineEntriesCreateRequestTimelineComment": {
        "docs": undefined,
        "properties": {
          "artifacts": {
            "docs": "The IDs of the artifacts attached to the comment.",
            "type": "optional<list<string>>",
          },
          "body": {
            "docs": "The comment's body.",
            "type": "optional<string>",
          },
          "body_type": "optional<TimelineCommentBodyType>",
          "link_previews": {
            "docs": "The IDs of the previews of the links posted in the comment.
",
            "type": "optional<list<string>>",
          },
          "snap_kit_body": "optional<TimelineSnapKitBody>",
          "snap_widget_body": {
            "docs": "The snap widget body of the comment.",
            "type": "optional<list<string>>",
          },
        },
      },
      "TimelineEntriesCreateRequestType": "literal<"timeline_comment">",
      "TimelineEntriesCreateResponse": {
        "docs": "The response to creating a timeline entry for an object.",
        "properties": {
          "timeline_entry": "TimelineEntry",
        },
      },
      "TimelineEntriesDeleteResponse": {
        "docs": "The response to deleting a timeline entry from an object.",
        "type": "map<string, unknown>",
      },
      "TimelineEntriesGetResponse": {
        "docs": "The request to getting a timeline entry.",
        "properties": {
          "timeline_entry": "TimelineEntry",
        },
      },
      "TimelineEntriesListResponse": {
        "docs": "The response to listing timeline entries for an object.",
        "properties": {
          "next_cursor": {
            "docs": "The cursor used to iterate subsequent results in accordance to the
sort order. If not set, then no later elements exist.
",
            "type": "optional<string>",
          },
          "prev_cursor": {
            "docs": "The cursor used to iterate preceding results in accordance to the
sort order. If not set, then no prior elements exist.
",
            "type": "optional<string>",
          },
          "timeline_entries": {
            "docs": "The timeline entries for the object.",
            "type": "list<TimelineEntry>",
          },
        },
      },
      "TimelineEntriesUpdateRequest": {
        "base-properties": {
          "id": {
            "docs": "The ID of the timeline entry to update.",
            "type": "string",
          },
        },
        "discriminant": "type",
        "docs": "The request to update a timeline entry.",
        "union": {
          "timeline_comment": "TimelineEntriesUpdateRequestTimelineComment",
        },
      },
      "TimelineEntriesUpdateRequestTimelineComment": {
        "docs": undefined,
        "properties": {
          "artifacts": "optional<TimelineEntriesUpdateRequestTimelineCommentArtifacts>",
          "body": {
            "docs": "The updated comment's body.",
            "type": "optional<string>",
          },
          "body_type": "optional<TimelineCommentBodyType>",
          "link_previews": "optional<TimelineEntriesUpdateRequestTimelineCommentLinkPreviews>",
          "snap_kit_body": "optional<TimelineSnapKitBody>",
        },
      },
      "TimelineEntriesUpdateRequestTimelineCommentArtifacts": {
        "docs": undefined,
        "properties": {
          "add": {
            "docs": "Adds the provided artifacts to the comment. An artifact cannot be
added more than once, i.e. nothing is done if the artifact is
already attached. Mutually exclusive with \`set\`.
",
            "type": "optional<list<string>>",
          },
          "remove": {
            "docs": "Removes the provided artifacts from the comment. If an artifact is
not present, then it's ignored. Mututally exclusive with \`set\`.
",
            "type": "optional<list<string>>",
          },
          "set": {
            "docs": "Sets the field to the provided artifacts.",
            "type": "optional<list<string>>",
          },
        },
      },
      "TimelineEntriesUpdateRequestTimelineCommentLinkPreviews": {
        "docs": undefined,
        "properties": {
          "add": {
            "docs": "Adds the provided link previews to the comment. A link preview
cannot be added more than once, i.e. nothing is done if the link
preview is already present. Mutually exclusive with \`set\`.
",
            "type": "optional<list<string>>",
          },
          "remove": {
            "docs": "Removes the provided link previews from the comment. If a link
preview is not present, then it's ignored. Mutually exclusive with
\`set\`.
",
            "type": "optional<list<string>>",
          },
          "set": {
            "docs": "Set the link previews to the provided IDs.",
            "type": "optional<list<string>>",
          },
        },
      },
      "TimelineEntriesUpdateRequestType": "literal<"timeline_comment">",
      "TimelineEntriesUpdateResponse": {
        "docs": "The response to updating a timeline entry.",
        "properties": {
          "timeline_entry": "TimelineEntry",
        },
      },
      "TimelineEntry": {
        "base-properties": {},
        "discriminant": "type",
        "docs": undefined,
        "union": {
          "timeline_comment": "TimelineComment",
        },
      },
      "TimelineEntryBase": {
        "docs": undefined,
        "extends": [
          "AtomBase",
        ],
        "properties": {
          "labels": {
            "docs": "Labels that are associated with the Timeline entry.",
            "type": "optional<list<string>>",
          },
          "object": {
            "docs": "The object that the Timeline entry belongs to.",
            "type": "string",
          },
          "object_display_id": {
            "docs": "The display ID of the object that the Timeline entry belongs to.
",
            "type": "string",
          },
          "object_type": "optional<TimelineEntryObjectType>",
          "reactions": {
            "docs": "The reactions to the entry.",
            "type": "optional<list<TimelineReaction>>",
          },
          "thread": "optional<TimelineThread>",
          "visibility": "optional<TimelineEntryVisibility>",
        },
      },
      "TimelineEntryBaseSummary": "AtomBaseSummary",
      "TimelineEntryObjectType": {
        "docs": "The type of object that the Timeline entry belongs to.",
        "enum": [
          "account",
          "capability",
          "conversation",
          "engagement",
          "enhancement",
          "feature",
          "issue",
          "meeting",
          "opportunity",
          "product",
          "rev_org",
          "rev_user",
          "task",
          "ticket",
          "timeline_comment",
        ],
      },
      "TimelineEntryType": "literal<"timeline_comment">",
      "TimelineEntryVisibility": {
        "docs": "The visibility of the entry. If 'private', then the entry is only
visible to the creator, 'internal' is visible with the Dev
organization, 'external' is visible to the Dev organzation and Rev
users, and 'public' is visible to all. If not set, then the default
visibility is 'external'.
",
        "enum": [
          "external",
          "internal",
          "private",
          "public",
        ],
      },
      "TimelineReaction": {
        "docs": "Reaction.",
        "properties": {
          "emoji": {
            "docs": "The reaction emoji's unicode codepoint, e.g. "1f44d".",
            "type": "optional<string>",
          },
          "reacted": {
            "docs": "Whether the requesting user reacted.",
            "type": "optional<boolean>",
          },
          "total_users": {
            "docs": "The total number of users with this reaction.",
            "type": "optional<integer>",
          },
        },
      },
      "TimelineSnapKitBody": {
        "docs": "Snap Kit Body of the comment.",
        "properties": {
          "body": {
            "docs": "The JSON body of the SnapKit.",
            "type": "optional<map<string, unknown>>",
          },
          "snap_in_action_name": {
            "docs": "The name of an action defined in the SnapIn. The combination of
snap_in_id and snap_in_action_name uniquely identifies the
interaction object which is to be called when actions on a snapkit
element is taken.
",
            "type": "optional<string>",
          },
          "snap_in_id": {
            "docs": "ID of the snap-in which created the SnapKit.",
            "type": "optional<string>",
          },
        },
      },
      "TimelineThread": {
        "docs": "Thread.",
        "properties": {
          "total_replies": {
            "docs": "The total number of replies in the thread.",
            "type": "optional<integer>",
          },
        },
      },
      "TrackEvent": {
        "docs": undefined,
        "properties": {
          "client_context": "optional<ClientContext>",
          "event_id": {
            "docs": "Unique ID for the event.",
            "type": "optional<string>",
          },
          "event_time": {
            "docs": "The timestamp at which the event occurred.",
            "type": "optional<datetime>",
          },
          "name": {
            "docs": "Name of the event.",
            "type": "string",
          },
          "payload": {
            "docs": "Payload of the event",
            "type": "map<string, unknown>",
          },
        },
      },
      "TrackEventsPublishResponse": "map<string, unknown>",
      "UnitType": {
        "docs": "This defines the UOM unit type. For example, for 'number of video
calls', unit type will be a number.
",
        "enum": [
          "boolean",
          "number",
        ],
      },
      "UnlinkRevUserFromRevOrgResponse": {
        "docs": "The response to unlink a rev user from a rev org.",
        "properties": {
          "rev_user": "RevUser",
        },
      },
      "UomMetricScope": {
        "docs": "The granularity at which the metrics ingestion data is to be emitted
for the UOM.
",
        "enum": [
          "org",
          "user",
        ],
      },
      "UomsCreateResponse": {
        "docs": undefined,
        "properties": {
          "uom": "uom",
        },
      },
      "UomsGetResponse": {
        "docs": undefined,
        "properties": {
          "uom": "uom",
        },
      },
      "UomsListResponse": {
        "docs": undefined,
        "properties": {
          "next_cursor": {
            "docs": "The cursor used to iterate subsequent results in accordance to the
sort order. If not set, then no later elements exist.
",
            "type": "optional<string>",
          },
          "prev_cursor": {
            "docs": "The cursor used to iterate preceding results in accordance to the
sort order. If not set, then no prior elements exist.
",
            "type": "optional<string>",
          },
          "uoms": {
            "docs": "The list of Unit of Measurement (UOM) objects.",
            "type": "list<uom>",
          },
        },
      },
      "UomsUpdateRequestDimensions": {
        "docs": undefined,
        "properties": {
          "add": {
            "docs": "Adds the provided dimensions to the UOM.",
            "type": "optional<list<string>>",
          },
          "remove": {
            "docs": "Removes the provided dimensions from the UOM.",
            "type": "optional<list<string>>",
          },
        },
      },
      "UomsUpdateResponse": {
        "docs": undefined,
        "properties": {
          "uom": "uom",
        },
      },
      "UserBase": {
        "docs": undefined,
        "extends": [
          "AtomBase",
        ],
        "properties": {
          "display_name": {
            "docs": "The user's display name. The name is non-unique and mutable.
",
            "type": "optional<string>",
          },
          "display_picture": "optional<ArtifactSummary>",
          "email": {
            "docs": "Email address of the user.",
            "type": "optional<string>",
          },
          "full_name": {
            "docs": "Full name of the user.",
            "type": "optional<string>",
          },
          "phone_numbers": {
            "docs": "Phone numbers of the user.",
            "type": "optional<list<string>>",
          },
          "state": "optional<UserState>",
        },
      },
      "UserBaseSummary": {
        "docs": undefined,
        "extends": [
          "AtomBaseSummary",
        ],
        "properties": {
          "display_name": {
            "docs": "The user's display name. The name is non-unique and mutable.
",
            "type": "optional<string>",
          },
          "display_picture": "optional<ArtifactSummary>",
          "email": {
            "docs": "Email address of the user.",
            "type": "optional<string>",
          },
          "full_name": {
            "docs": "Full name of the user.",
            "type": "optional<string>",
          },
          "state": "optional<UserState>",
        },
      },
      "UserSearchSummary": {
        "docs": undefined,
        "extends": [
          "SearchSummaryBase",
        ],
        "properties": {
          "user": "UserSummary",
        },
      },
      "UserState": {
        "docs": "State of the user.",
        "enum": [
          "active",
          "deactivated",
          "deleted",
          "locked",
          "shadow",
          "unassigned",
        ],
      },
      "UserSummary": {
        "base-properties": {},
        "discriminant": "type",
        "docs": undefined,
        "union": {
          "dev_user": "DevUserSummary",
          "rev_user": "RevUserSummary",
          "service_account": "ServiceAccountSummary",
          "sys_user": "SysUserSummary",
        },
      },
      "UserType": {
        "enum": [
          "dev_user",
          "rev_user",
          "service_account",
          "sys_user",
        ],
      },
      "VistaBaseSummary": {
        "docs": undefined,
        "extends": [
          "AtomBaseSummary",
        ],
        "properties": {
          "name": {
            "docs": "Name of the vista.",
            "type": "string",
          },
        },
      },
      "VistaSearchSummary": {
        "docs": undefined,
        "extends": [
          "SearchSummaryBase",
        ],
        "properties": {
          "vista": "VistaSummary",
        },
      },
      "VistaSummary": {
        "base-properties": {},
        "discriminant": "type",
        "docs": "Represents a collection of DevRev objects.",
        "union": {
          "curated": "CuratedVistaSummary",
          "dynamic": "DynamicVistaSummary",
          "grouped": "GroupedVistaSummary",
        },
      },
      "VistaType": {
        "docs": "Type of vista object.",
        "enum": [
          "curated",
          "dynamic",
          "grouped",
        ],
      },
      "WebhookEventRequest": {
        "docs": undefined,
        "properties": {
          "account_created": "optional<EventAccountCreated>",
          "account_deleted": "optional<EventAccountDeleted>",
          "account_updated": "optional<EventAccountUpdated>",
          "conversation_created": "optional<EventConversationCreated>",
          "conversation_deleted": "optional<EventConversationDeleted>",
          "conversation_updated": "optional<EventConversationUpdated>",
          "dev_user_created": "optional<EventDevUserCreated>",
          "dev_user_deleted": "optional<EventDevUserDeleted>",
          "dev_user_updated": "optional<EventDevUserUpdated>",
          "id": {
            "docs": "The event's ID.",
            "type": "string",
          },
          "part_created": "optional<EventPartCreated>",
          "part_deleted": "optional<EventPartDeleted>",
          "part_updated": "optional<EventPartUpdated>",
          "rev_org_created": "optional<EventRevOrgCreated>",
          "rev_org_deleted": "optional<EventRevOrgDeleted>",
          "rev_org_updated": "optional<EventRevOrgUpdated>",
          "rev_user_created": "optional<EventRevUserCreated>",
          "rev_user_deleted": "optional<EventRevUserDeleted>",
          "rev_user_updated": "optional<EventRevUserUpdated>",
          "sla_tracker_created": "optional<EventSlaTrackerCreated>",
          "sla_tracker_deleted": "optional<EventSlaTrackerDeleted>",
          "sla_tracker_updated": "optional<EventSlaTrackerUpdated>",
          "tag_created": "optional<EventTagCreated>",
          "tag_deleted": "optional<EventTagDeleted>",
          "tag_updated": "optional<EventTagUpdated>",
          "timeline_entry_created": "optional<EventTimelineEntryCreated>",
          "timeline_entry_deleted": "optional<EventTimelineEntryDeleted>",
          "timeline_entry_updated": "optional<EventTimelineEntryUpdated>",
          "timestamp": {
            "docs": "Timestamp of the webhook's invocation for the event. Note this
should be used to protect against replay attacks, where the event
should only be processed if the timestamp isn't stale by several
seconds.
",
            "type": "optional<datetime>",
          },
          "type": "optional<WebhookEventType>",
          "verify": "optional<WebhookEventVerify>",
          "webhook_created": "optional<EventWebhookCreated>",
          "webhook_deleted": "optional<EventWebhookDeleted>",
          "webhook_id": {
            "docs": "ID of the webhook for the event.",
            "type": "string",
          },
          "webhook_updated": "optional<EventWebhookUpdated>",
          "work_created": "optional<EventWorkCreated>",
          "work_deleted": "optional<EventWorkDeleted>",
          "work_updated": "optional<EventWorkUpdated>",
        },
      },
      "WebhookEventResponse": {
        "docs": undefined,
        "properties": {
          "challenge": {
            "docs": "The challenge from the "verify" request, otherwise this should not
be set for other request types.
",
            "type": "optional<string>",
          },
        },
      },
      "WebhookEventType": {
        "docs": "The event types that the webhook will receive.",
        "enum": [
          "account_created",
          "account_deleted",
          "account_updated",
          "conversation_created",
          "conversation_deleted",
          "conversation_updated",
          "dev_user_created",
          "dev_user_deleted",
          "dev_user_updated",
          "part_created",
          "part_deleted",
          "part_updated",
          "rev_org_created",
          "rev_org_deleted",
          "rev_org_updated",
          "rev_user_created",
          "rev_user_deleted",
          "rev_user_updated",
          "tag_created",
          "tag_deleted",
          "tag_updated",
          "timeline_entry_created",
          "timeline_entry_deleted",
          "timeline_entry_updated",
          "verify",
          "webhook_created",
          "webhook_deleted",
          "webhook_updated",
          "work_created",
          "work_deleted",
          "work_updated",
        ],
      },
      "WebhookEventVerify": {
        "docs": undefined,
        "properties": {
          "challenge": {
            "docs": "The challenge that must be echoed in the response.",
            "type": "string",
          },
        },
      },
      "WebhookStatus": {
        "docs": "The status of the webhook.",
        "enum": [
          "active",
          "inactive",
          "unverified",
        ],
      },
      "WebhookSummary": "AtomBaseSummary",
      "WebhooksCreateResponse": {
        "docs": "The response to creating a new webhook.",
        "properties": {
          "webhook": "webhook",
        },
      },
      "WebhooksDeleteResponse": {
        "docs": "The response to deleting the webhook.",
        "type": "map<string, unknown>",
      },
      "WebhooksGetResponse": {
        "docs": "The response to getting the information for the webhook.",
        "properties": {
          "webhook": "webhook",
        },
      },
      "WebhooksListRequest": {
        "docs": "The request to list the webhooks.",
        "type": "map<string, unknown>",
      },
      "WebhooksListResponse": {
        "docs": "The response to listing the webhooks.",
        "properties": {
          "webhooks": {
            "docs": "The list of webhooks.",
            "type": "list<webhook>",
          },
        },
      },
      "WebhooksUpdateAction": {
        "docs": "The action to update the webhook's status.",
        "enum": [
          "activate",
          "deactivate",
        ],
      },
      "WebhooksUpdateRequestEventTypes": {
        "docs": undefined,
        "properties": {
          "add": {
            "docs": "The event types to add. If a provided event type is already set for
the webhook, then nothing is done. Note this is mutually exclusive
with 'set'.
",
            "type": "optional<list<WebhookEventType>>",
          },
          "remove": {
            "docs": "The event types to remove. If a provided event type isn't set for
the webhook, then nothing is done. Note this is mutually exclusive
with 'set'.
",
            "type": "optional<list<WebhookEventType>>",
          },
          "set": {
            "docs": "The updated event types, which will replace the webhook's current
event types. Note this is mutually exclusive with 'add' and
'remove'.
",
            "type": "optional<list<WebhookEventType>>",
          },
        },
      },
      "WebhooksUpdateResponse": {
        "docs": "The response to updating the webhook.",
        "properties": {
          "webhook": "webhook",
        },
      },
      "WeeklyOrgSchedule": {
        "docs": "The schedule for each week.",
        "type": "map<string, unknown>",
      },
      "WorkBase": {
        "docs": undefined,
        "extends": [
          "AtomBase",
        ],
        "properties": {
          "applies_to_part": "optional<PartSummary>",
          "artifacts": {
            "docs": "The artifacts attached to the work item.",
            "type": "optional<list<ArtifactSummary>>",
          },
          "body": {
            "docs": "Body of the work object.",
            "type": "optional<string>",
          },
          "custom_fields": {
            "docs": "Custom fields.",
            "type": "optional<map<string, unknown>>",
          },
          "custom_schema_fragments": {
            "docs": "Custom schema fragments.",
            "type": "optional<list<string>>",
          },
          "owned_by": {
            "docs": "The users that own the work.",
            "type": "list<UserSummary>",
          },
          "reported_by": {
            "docs": "Users that reported the work.",
            "type": "optional<list<UserSummary>>",
          },
          "stage": "optional<LegacyStage>",
          "stock_schema_fragment": {
            "docs": "Stock schema fragment.",
            "type": "optional<string>",
          },
          "subtype": {
            "docs": "Subtype corresponding to the custom type fragment.",
            "type": "optional<string>",
          },
          "tags": {
            "docs": "Tags associated with the object.",
            "type": "optional<list<TagWithValue>>",
          },
          "target_close_date": {
            "docs": "Timestamp when the work is expected to be complete.",
            "type": "optional<datetime>",
          },
          "title": {
            "docs": "Title of the work object.",
            "type": "string",
          },
        },
      },
      "WorkBaseSummary": {
        "docs": undefined,
        "extends": [
          "AtomBaseSummary",
        ],
        "properties": {
          "owned_by": {
            "docs": "The users that own the work.",
            "type": "list<UserSummary>",
          },
          "stage": "optional<LegacyStageSummary>",
          "title": {
            "docs": "Title of the work object.",
            "type": "string",
          },
        },
      },
      "WorkSearchSummary": {
        "docs": undefined,
        "extends": [
          "SearchSummaryBase",
        ],
        "properties": {
          "work": "WorkSummary",
        },
      },
      "WorkSummary": {
        "base-properties": {},
        "discriminant": "type",
        "docs": undefined,
        "union": {
          "issue": "IssueSummary",
          "opportunity": "OpportunitySummary",
          "task": "TaskSummary",
          "ticket": "TicketSummary",
        },
      },
      "WorkType": {
        "enum": [
          "issue",
          "opportunity",
          "task",
          "ticket",
        ],
      },
      "WorksCreateRequest": {
        "base-properties": {
          "applies_to_part": {
            "docs": "The [part](https://devrev.ai/docs/product/parts) that the work
applies to. Specifying a part is required when creating tickets and
issues.
",
            "type": "string",
          },
          "artifacts": {
            "docs": "The IDs of the artifacts to associate with the work item.
",
            "type": "optional<list<string>>",
          },
          "body": {
            "docs": "Body of the work object.",
            "type": "optional<string>",
          },
          "custom_fields": {
            "docs": "Custom fields.",
            "type": "optional<map<string, unknown>>",
          },
          "custom_schema_fragments": {
            "docs": "The custom schema fragments to use.",
            "type": "optional<list<string>>",
          },
          "custom_schema_spec": "optional<CustomSchemaSpec>",
          "owned_by": {
            "docs": "The users that own the work.",
            "type": "list<string>",
          },
          "reported_by": {
            "docs": "The users that reported the work.",
            "type": "optional<list<string>>",
          },
          "stage": "optional<StageInit>",
          "tags": {
            "docs": "Tags associated with the work item.",
            "type": "optional<list<SetTagWithValue>>",
          },
          "target_close_date": {
            "docs": "Timestamp for when the work is expected to be complete.",
            "type": "optional<datetime>",
          },
          "title": {
            "docs": "Title of the work object.",
            "type": "string",
          },
        },
        "discriminant": "type",
        "docs": undefined,
        "union": {
          "issue": "WorksCreateRequestIssue",
          "opportunity": "WorksCreateRequestOpportunity",
          "task": "WorksCreateRequestTask",
          "ticket": "WorksCreateRequestTicket",
        },
      },
      "WorksCreateRequestIssue": {
        "docs": undefined,
        "properties": {
          "developed_with": {
            "docs": "The IDs of the parts associated with issue.",
            "type": "optional<list<string>>",
          },
          "priority": "optional<IssuePriority>",
          "priority_v2": {
            "docs": "Priority enum id of the work based upon impact and criticality.
",
            "type": "optional<integer>",
          },
          "sprint": {
            "docs": "The sprint that the issue belongs to.",
            "type": "optional<string>",
          },
        },
      },
      "WorksCreateRequestOpportunity": {
        "docs": undefined,
        "properties": {
          "account": {
            "docs": "The ID of the account that the opportunity is associated with.
",
            "type": "string",
          },
          "amount": {
            "docs": "Total opportunity amount.",
            "type": "optional<double>",
          },
          "contacts": {
            "docs": "Contacts involved in the opportunity.",
            "type": "optional<list<string>>",
          },
          "customer_budget": {
            "docs": "Budget of the customer.",
            "type": "optional<double>",
          },
          "forecast_category": "optional<OpportunityForecastCategory>",
          "priority": "optional<OpportunityPriority>",
          "probability": {
            "docs": "The probability of winning the deal, lies between 0.0 and 1.0.
",
            "type": "optional<double>",
          },
        },
      },
      "WorksCreateRequestTask": {
        "docs": undefined,
        "properties": {
          "embedded": {
            "docs": "Whether the task is embedded in the work.",
            "type": "optional<boolean>",
          },
          "priority": "optional<TaskPriority>",
          "start_date": {
            "docs": "Timestamp when the task was started.",
            "type": "optional<datetime>",
          },
        },
      },
      "WorksCreateRequestTicket": {
        "docs": undefined,
        "properties": {
          "channels": {
            "docs": "Channels of the ticket.",
            "type": "optional<list<TicketChannels>>",
          },
          "group": {
            "docs": "The group that the ticket is associated with.",
            "type": "optional<string>",
          },
          "is_spam": {
            "docs": "Whether the ticket is spam.",
            "type": "optional<boolean>",
          },
          "rev_org": {
            "docs": "The Rev organization that the ticket is associated with.",
            "type": "optional<string>",
          },
          "severity": "optional<TicketSeverity>",
          "source_channel": {
            "docs": "The source channel of the ticket.",
            "type": "optional<string>",
          },
        },
      },
      "WorksCreateResponse": {
        "docs": undefined,
        "properties": {
          "work": "work",
        },
      },
      "WorksDeleteResponse": "map<string, unknown>",
      "WorksExportResponse": {
        "docs": undefined,
        "properties": {
          "works": {
            "docs": "The resulting collection of work items.",
            "type": "list<work>",
          },
        },
      },
      "WorksFilterIssue": {
        "docs": undefined,
        "properties": {
          "accounts": {
            "docs": "Filters for issues with any of the provided Accounts.",
            "type": "optional<list<string>>",
          },
          "priority": {
            "docs": "Filters for issues with any of the provided priorities.",
            "type": "optional<list<IssuePriority>>",
          },
          "priority_v2": {
            "docs": "Filters for issues with any of the provided priority enum ids.
",
            "type": "optional<list<integer>>",
          },
          "rev_orgs": {
            "docs": "Filters for issues with any of the provided Rev organizations.
",
            "type": "optional<list<string>>",
          },
          "subtype": {
            "docs": "Filters for issues with any of the provided subtypes.",
            "type": "optional<list<string>>",
          },
        },
      },
      "WorksFilterOpportunity": {
        "docs": undefined,
        "properties": {
          "account": {
            "docs": "Filters for opportunities belonging to any of the provided
accounts.
",
            "type": "optional<list<string>>",
          },
          "contacts": {
            "docs": "Filters for opportunities with any of the provided contacts.
",
            "type": "optional<list<string>>",
          },
          "subtype": {
            "docs": "Filters for opportunity with any of the provided subtypes.
",
            "type": "optional<list<string>>",
          },
        },
      },
      "WorksFilterTicket": {
        "docs": undefined,
        "properties": {
          "channels": {
            "docs": "Filters for tickets with any of the provided channels.",
            "type": "optional<list<TicketChannels>>",
          },
          "group": {
            "docs": "Filters for tickets belonging to specific groups.",
            "type": "optional<list<string>>",
          },
          "is_spam": {
            "docs": "Filters for tickets that are spam.",
            "type": "optional<boolean>",
          },
          "needs_response": {
            "docs": "Filters for tickets that need response.",
            "type": "optional<boolean>",
          },
          "rev_org": {
            "docs": "Filters for tickets that are associated with any of the provided
Rev organizations.
",
            "type": "optional<list<string>>",
          },
          "severity": {
            "docs": "Filters for tickets with any of the provided severities.",
            "type": "optional<list<TicketSeverity>>",
          },
          "sla_summary": "optional<SlaSummaryFilter>",
          "source_channel": {
            "docs": "Filters for tickets with any of the provided source channels.
",
            "type": "optional<list<string>>",
          },
          "subtype": {
            "docs": "Filters for tickets with any of the provided subtypes.",
            "type": "optional<list<string>>",
          },
          "surveys": "optional<SurveyAggregationFilter>",
        },
      },
      "WorksGetResponse": {
        "docs": undefined,
        "properties": {
          "work": "work",
        },
      },
      "WorksListResponse": {
        "docs": undefined,
        "properties": {
          "next_cursor": {
            "docs": "The cursor used to iterate subsequent results in accordance to the
sort order. If not set, then no later elements exist.
",
            "type": "optional<string>",
          },
          "prev_cursor": {
            "docs": "The cursor used to iterate preceding results in accordance to the
sort order. If not set, then no prior elements exist.
",
            "type": "optional<string>",
          },
          "works": {
            "docs": "The list of works.",
            "type": "list<work>",
          },
        },
      },
      "WorksUpdateRequest": {
        "base-properties": {
          "applies_to_part": {
            "docs": "Updates the part that the work item applies to.",
            "type": "optional<string>",
          },
          "artifacts": "optional<WorksUpdateRequestArtifactIds>",
          "body": {
            "docs": "Updated body of the work object, or unchanged if not provided.
",
            "type": "optional<string>",
          },
          "custom_fields": {
            "docs": "Custom fields.",
            "type": "optional<map<string, unknown>>",
          },
          "custom_schema_fragments": {
            "docs": "The custom schema fragments to use.",
            "type": "optional<list<string>>",
          },
          "custom_schema_spec": "optional<CustomSchemaSpec>",
          "id": {
            "docs": "The work's ID.",
            "type": "string",
          },
          "owned_by": "optional<WorksUpdateRequestOwnedBy>",
          "reported_by": "optional<WorksUpdateRequestReportedBy>",
          "stage": "optional<StageUpdate>",
          "staged_info": "optional<WorksUpdateRequestStagedInfoStagedInfoUpdate>",
          "tags": "optional<WorksUpdateRequestTags>",
          "target_close_date": {
            "docs": "Updates the timestamp for when the work is expected to be complete.
",
            "type": "optional<datetime>",
          },
          "title": {
            "docs": "Updated title of the work object, or unchanged if not provided.
",
            "type": "optional<string>",
          },
        },
        "discriminant": "type",
        "docs": undefined,
        "union": {
          "issue": "WorksUpdateRequestIssue",
          "none": "empty",
          "opportunity": "WorksUpdateRequestOpportunity",
          "task": "WorksUpdateRequestTask",
          "ticket": "WorksUpdateRequestTicket",
        },
      },
      "WorksUpdateRequestArtifactIds": {
        "docs": undefined,
        "properties": {
          "set": {
            "docs": "Sets the IDs to the provided artifact IDs.",
            "type": "optional<list<string>>",
          },
        },
      },
      "WorksUpdateRequestIssue": {
        "docs": undefined,
        "properties": {
          "developed_with": "optional<WorksUpdateRequestIssueDevelopedWith>",
          "priority": "optional<IssuePriority>",
          "priority_v2": {
            "docs": "Priority enum id of the work based upon impact and criticality.
",
            "type": "optional<integer>",
          },
          "sprint": {
            "docs": "Updates the sprint that the issue belongs to.",
            "type": "optional<string>",
          },
        },
      },
      "WorksUpdateRequestIssueDevelopedWith": {
        "docs": undefined,
        "properties": {
          "set": {
            "docs": "Sets the IDs of the parts associated with issue.",
            "type": "optional<list<string>>",
          },
        },
      },
      "WorksUpdateRequestOpportunity": {
        "docs": undefined,
        "properties": {
          "account": {
            "docs": "Updates the account that the opportunity is associated with.
",
            "type": "optional<string>",
          },
          "amount": {
            "docs": "Updates the total opportunity amount.",
            "type": "optional<double>",
          },
          "contacts": "optional<WorksUpdateRequestOpportunityContacts>",
          "customer_budget": {
            "docs": "Updates the customer budget.",
            "type": "optional<double>",
          },
          "probability": {
            "docs": "Updates the probability of winning the deal, lies between 0.0 and
1.0.
",
            "type": "optional<double>",
          },
        },
      },
      "WorksUpdateRequestOpportunityContacts": {
        "docs": undefined,
        "properties": {
          "set": {
            "docs": "Sets the contact IDs to the provided contact IDs.",
            "type": "list<string>",
          },
        },
      },
      "WorksUpdateRequestOwnedBy": {
        "docs": undefined,
        "properties": {
          "set": {
            "docs": "Sets the owner IDs to the provided user IDs. This must not be
empty.
",
            "type": "optional<list<string>>",
          },
        },
      },
      "WorksUpdateRequestReportedBy": {
        "docs": undefined,
        "properties": {
          "set": {
            "docs": "Sets the users that reported the work to the provided user IDs.
",
            "type": "optional<list<string>>",
          },
        },
      },
      "WorksUpdateRequestStagedInfoStagedInfoUpdate": {
        "docs": undefined,
        "properties": {
          "unresolved_fields": {
            "docs": "Updates the unresolved fields of the staged work.",
            "type": "list<string>",
          },
        },
      },
      "WorksUpdateRequestTags": {
        "docs": undefined,
        "properties": {
          "set": {
            "docs": "Sets the provided tags on the work item.",
            "type": "optional<list<SetTagWithValue>>",
          },
        },
      },
      "WorksUpdateRequestTask": {
        "docs": undefined,
        "properties": {
          "embedded": {
            "docs": "Whether the task is embedded in the work.",
            "type": "optional<boolean>",
          },
          "priority": "optional<TaskPriority>",
          "start_date": {
            "docs": "Timestamp when the task was started.",
            "type": "optional<datetime>",
          },
        },
      },
      "WorksUpdateRequestTicket": {
        "docs": undefined,
        "properties": {
          "channels": "optional<WorksUpdateRequestTicketChannels>",
          "group": {
            "docs": "Updates the group that the ticket is associated with.",
            "type": "optional<string>",
          },
          "is_spam": {
            "docs": "Updates whether the ticket is spam.",
            "type": "optional<boolean>",
          },
          "rev_org": {
            "docs": "Updates the Rev organization that the ticket is associated with.
",
            "type": "optional<string>",
          },
          "severity": "optional<TicketSeverity>",
        },
      },
      "WorksUpdateRequestTicketChannels": {
        "docs": undefined,
        "properties": {
          "set": {
            "docs": "Sets the channels to the provided channels.",
            "type": "optional<list<TicketChannels>>",
          },
        },
      },
      "WorksUpdateResponse": {
        "docs": undefined,
        "properties": {
          "work": "work",
        },
      },
      "account": {
        "docs": undefined,
        "extends": [
          "OrgBase",
        ],
        "properties": {
          "artifacts": {
            "docs": "The artifacts attached to the Account.",
            "type": "optional<list<ArtifactSummary>>",
          },
          "custom_fields": {
            "docs": "Custom fields.",
            "type": "optional<map<string, unknown>>",
          },
          "custom_schema_fragments": {
            "docs": "Custom schema fragments.",
            "type": "optional<list<string>>",
          },
          "description": {
            "docs": "Description of the corresponding Account.",
            "type": "optional<string>",
          },
          "domains": {
            "docs": "Company's domain names. Example - 'devrev.ai'.",
            "type": "optional<list<string>>",
          },
          "external_refs": {
            "docs": "External refs are unique identifiers from your customer system of
records, stored as a list.
",
            "type": "list<string>",
          },
          "owned_by": {
            "docs": "List of Dev user IDs owning this Account.",
            "type": "list<UserSummary>",
          },
          "stock_schema_fragment": {
            "docs": "Stock schema fragment.",
            "type": "optional<string>",
          },
          "subtype": {
            "docs": "Subtype corresponding to the custom type fragment.",
            "type": "optional<string>",
          },
          "tags": {
            "docs": "Tags associated with an object.",
            "type": "optional<list<TagWithValue>>",
          },
          "tier": {
            "docs": "The Tier of the corresponding Account.",
            "type": "optional<string>",
          },
        },
      },
      "article": {
        "docs": undefined,
        "extends": [
          "AtomBase",
        ],
        "properties": {
          "applies_to_parts": {
            "docs": "Details of the parts relevant to the article.",
            "type": "list<PartSummary>",
          },
          "description": {
            "docs": "Description of the article.",
            "type": "optional<string>",
          },
          "extracted_content": {
            "docs": "Artifacts containing the extracted content.",
            "type": "optional<list<ArtifactSummary>>",
          },
          "parent": "optional<DirectorySummary>",
          "rank": {
            "docs": "Rank of the article.",
            "type": "optional<string>",
          },
          "resource": "optional<resource>",
          "title": {
            "docs": "Title of the article.",
            "type": "optional<string>",
          },
        },
      },
      "conversation": {
        "docs": undefined,
        "extends": [
          "AtomBase",
        ],
        "properties": {
          "description": {
            "docs": "Description of the conversation object.",
            "type": "optional<string>",
          },
          "group": "optional<GroupSummary>",
          "members": {
            "docs": "The users in the conversation.",
            "type": "list<UserSummary>",
          },
          "messages": {
            "docs": "The latest messages on the conversation.",
            "type": "optional<list<TimelineEntry>>",
          },
          "metadata": "optional<ConversationMetadata>",
          "owned_by": {
            "docs": "Owner IDs for the conversation.",
            "type": "optional<list<UserSummary>>",
          },
          "stage": "optional<LegacyStage>",
          "tags": {
            "docs": "Tags associated with the object.",
            "type": "optional<list<TagWithValue>>",
          },
          "title": {
            "docs": "Title of the conversation object.",
            "type": "optional<string>",
          },
        },
      },
      "empty": "map<string, unknown>",
      "engagement": {
        "docs": undefined,
        "extends": [
          "AtomBase",
        ],
        "properties": {
          "description": {
            "docs": "Description of the engagement object.",
            "type": "optional<string>",
          },
        },
      },
      "error": {
        "docs": undefined,
        "properties": {
          "message": {
            "docs": "Information about the error.",
            "type": "string",
          },
          "status": {
            "docs": "The corresponding HTTP status code.",
            "type": "integer",
          },
          "type": {
            "docs": "The error type.",
            "type": "optional<string>",
          },
        },
      },
      "group": {
        "docs": undefined,
        "extends": [
          "AtomBase",
        ],
        "properties": {
          "description": {
            "docs": "Description of the group.",
            "type": "optional<string>",
          },
          "is_default": {
            "docs": "Whether it is a default group.",
            "type": "boolean",
          },
          "member_type": "optional<GroupMemberType>",
          "name": {
            "docs": "Name of the group.",
            "type": "optional<string>",
          },
          "owner": "optional<UserSummary>",
        },
      },
      "issue": {
        "docs": undefined,
        "extends": [
          "WorkBase",
        ],
        "properties": {
          "developed_with": {
            "docs": "Parts associated based on git events.",
            "type": "optional<list<PartSummary>>",
          },
          "priority": "optional<IssuePriority>",
        },
      },
      "link": {
        "docs": undefined,
        "extends": [
          "AtomBase",
        ],
        "properties": {
          "link_type": "LinkType",
          "source": "LinkEndpointSummary",
          "target": "LinkEndpointSummary",
        },
      },
      "part": {
        "base-properties": {},
        "discriminant": "type",
        "docs": undefined,
        "union": {
          "capability": "Capability",
          "enhancement": "Enhancement",
          "feature": "Feature",
          "product": "Product",
        },
      },
      "resource": {
        "docs": "Resource details.",
        "properties": {
          "artifacts": {
            "docs": "Ids of the artifacts.",
            "type": "optional<list<ArtifactSummary>>",
          },
          "url": {
            "docs": "URL of the external article.",
            "type": "optional<string>",
          },
        },
      },
      "sla": {
        "docs": undefined,
        "extends": [
          "AtomBase",
        ],
        "properties": {
          "compensation": "optional<SlaCompensation>",
          "description": {
            "docs": "Description of the purpose and capabilities of the SLA.",
            "type": "optional<string>",
          },
          "evaluation_period": "optional<SlaEvaluationPeriod>",
          "name": {
            "docs": "Human-readable name.",
            "type": "string",
          },
          "policies": {
            "docs": "The policies encompassed by this SLA, ordered in decreasing
priority.
",
            "type": "optional<list<SlaPolicy>>",
          },
          "status": "SlaStatus",
        },
      },
      "subtype": {
        "docs": undefined,
        "properties": {
          "display_name": {
            "docs": "Display name of the subtype.",
            "type": "optional<string>",
          },
          "fragment_id": {
            "docs": "DON of the custom type fragment this subtype belongs to.",
            "type": "string",
          },
          "leaf_type": {
            "docs": "Leaf type for the subtype.",
            "type": "string",
          },
          "value": {
            "docs": "Value of the subtype.",
            "type": "string",
          },
        },
      },
      "tag": {
        "docs": undefined,
        "extends": [
          "AtomBase",
        ],
        "properties": {
          "allowed_values": {
            "docs": "The allowed values for the tag, where a value is provided when a
tag is associated with an object. If empty, then no value should be
provided when the association is made.
",
            "type": "optional<list<string>>",
          },
          "description": {
            "docs": "An informative description for the tag that should provide context
on the tag's purpose and usage.
",
            "type": "optional<string>",
          },
          "name": {
            "docs": "The name of the tag, which denotes the logical concept by which all
tagged objects will be associated. The name is guaranteed to be
unique.
",
            "type": "string",
          },
        },
      },
      "ticket": {
        "docs": undefined,
        "extends": [
          "WorkBase",
        ],
        "properties": {
          "channels": {
            "docs": "Channels of the ticket.",
            "type": "optional<list<TicketChannels>>",
          },
          "group": "optional<GroupSummary>",
          "rev_org": "optional<OrgSummary>",
          "severity": "optional<TicketSeverity>",
          "source_channel": {
            "docs": "Source channel of the ticket.",
            "type": "optional<string>",
          },
        },
      },
      "unit": {
        "docs": "Unit encapsulates the name of the unit and the type of the unit. For
example, '#Number of API calls' where name is 'number_of_api_calls' and
type is 'number'.
",
        "properties": {
          "name": {
            "docs": "This represents human readable unit name of the UOM For example,
number of API calls.
",
            "type": "string",
          },
          "type": "UnitType",
        },
      },
      "uom": {
        "docs": undefined,
        "extends": [
          "AtomBase",
        ],
        "properties": {
          "aggregation_details": "AggregationDetail",
          "description": {
            "docs": "Description of the UOM.",
            "type": "optional<string>",
          },
          "dimensions": {
            "docs": "The list of dimensions that can be emitted along with the metering
data.
",
            "type": "optional<list<string>>",
          },
          "is_enabled": {
            "docs": "If set to true, then the UOM can be configured as part of
entitlements in skus and metering data only for the enabled uoms
will be passed through the metering pipeline.
",
            "type": "boolean",
          },
          "metric_name": {
            "docs": "Human readable metric name of the UOM.",
            "type": "string",
          },
          "metric_scope": "UomMetricScope",
          "name": {
            "docs": "Human readable name of the UOM.",
            "type": "string",
          },
          "part": "optional<PartSummary>",
          "product": "PartSummary",
          "unit": "unit",
        },
      },
      "webhook": {
        "docs": undefined,
        "extends": [
          "AtomBase",
        ],
        "properties": {
          "event_types": {
            "docs": "The event types that the webhook will receive.",
            "type": "optional<list<WebhookEventType>>",
          },
          "secret": {
            "docs": "The secret to use for verifying webhook events.",
            "type": "string",
          },
          "status": "WebhookStatus",
          "url": {
            "docs": "The URL of the webhook endpoint.",
            "type": "string",
          },
        },
      },
      "work": {
        "base-properties": {},
        "discriminant": "type",
        "docs": undefined,
        "union": {
          "issue": "issue",
          "opportunity": "Opportunity",
          "task": "Task",
          "ticket": "ticket",
        },
      },
    },
  },
  "rootApiFile": {
    "auth": "auth-token",
    "auth-schemes": {
      "auth-token": {
        "header": "Authorization",
        "name": "apiKey",
        "type": "string",
      },
    },
    "default-environment": "Default",
    "display-name": "DevRev REST API",
    "environments": {
      "Default": "https://api.devrev.ai",
    },
    "error-discrimination": {
      "strategy": "status-code",
    },
    "name": "api",
  },
}
`;
