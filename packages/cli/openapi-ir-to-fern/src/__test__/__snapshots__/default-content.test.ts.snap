// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`open api ir to fern default-content docs 1`] = `
{
  "definitionFiles": {
    "generativelanguage.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "BatchEmbedContents": {
            "auth": false,
            "docs": "Generates multiple embeddings from the model given input text in a
synchronous call.",
            "examples": [
              {
                "path-parameters": {
                  "model": "model",
                },
                "request": {
                  "requests": [
                    {
                      "content": {},
                      "model": "model",
                    },
                  ],
                },
                "response": {
                  "body": {
                    "embeddings": [
                      {
                        "values": [
                          1.1,
                        ],
                      },
                    ],
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/v1/models/{model}:batchEmbedContents",
            "path-parameters": {
              "model": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "requests": {
                    "docs": "Required. Embed requests for the batch. The model in each of these requests must
match the model specified \`BatchEmbedContentsRequest.model\`.",
                    "type": "list<root.EmbedContentRequest>",
                  },
                },
              },
              "headers": undefined,
              "name": "BatchEmbedContentsRequest",
              "query-parameters": {
                "$.xgafv": {
                  "docs": "V1 error format.",
                  "type": "optional<BatchEmbedContentsRequestXgafv>",
                },
                "$alt": {
                  "docs": "Data format for response.",
                  "type": "optional<BatchEmbedContentsRequestAlt>",
                },
                "$callback": {
                  "docs": "JSONP",
                  "type": "optional<string>",
                },
                "$prettyPrint": {
                  "docs": "Returns response with indentations and line breaks.",
                  "type": "optional<boolean>",
                },
              },
            },
            "response": {
              "docs": "Successful operation",
              "type": "root.BatchEmbedContentsResponse",
            },
          },
          "CancelOperation": {
            "auth": false,
            "docs": "Starts asynchronous cancellation on a long-running operation.  The server
makes a best effort to cancel the operation, but success is not
guaranteed.  If the server doesn't support this method, it returns
\`google.rpc.Code.UNIMPLEMENTED\`.  Clients can use
Operations.GetOperation or
other methods to check whether the cancellation succeeded or whether the
operation completed despite cancellation. On successful cancellation,
the operation is not deleted; instead, it becomes an operation with
an Operation.error value with a google.rpc.Status.code of 1,
corresponding to \`Code.CANCELLED\`.",
            "examples": [
              {
                "path-parameters": {
                  "operation": "operation",
                  "tunedModel": "tunedModel",
                },
                "request": {},
                "response": {
                  "body": {
                    "string": {
                      "key": "value",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/v1/tunedModels/{tunedModel}/operations/{operation}:cancel",
            "path-parameters": {
              "operation": "string",
              "tunedModel": "string",
            },
            "request": {
              "body": "root.CancelOperationRequest",
              "name": "CancelOperationRequest",
              "query-parameters": {
                "$.xgafv": {
                  "docs": "V1 error format.",
                  "type": "optional<CancelOperationRequestXgafv>",
                },
                "$alt": {
                  "docs": "Data format for response.",
                  "type": "optional<CancelOperationRequestAlt>",
                },
                "$callback": {
                  "docs": "JSONP",
                  "type": "optional<string>",
                },
                "$prettyPrint": {
                  "docs": "Returns response with indentations and line breaks.",
                  "type": "optional<boolean>",
                },
              },
            },
            "response": {
              "docs": "Successful operation",
              "type": "root.Empty",
            },
          },
          "CountTokens": {
            "auth": false,
            "docs": "Runs a model's tokenizer on input content and returns the token count.",
            "examples": [
              {
                "path-parameters": {
                  "model": "model",
                },
                "request": {},
                "response": {
                  "body": {
                    "totalTokens": 1,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/v1/models/{model}:countTokens",
            "path-parameters": {
              "model": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "contents": {
                    "default": undefined,
                    "docs": "Optional. The input given to the model as a prompt. This field is ignored when
\`generate_content_request\` is set.",
                    "type": "optional<list<root.Content>>",
                    "validation": undefined,
                  },
                  "generateContentRequest": {
                    "default": undefined,
                    "docs": "Optional. The overall input given to the model. CountTokens will count prompt,
function calling, etc.",
                    "type": "optional<root.GenerateContentRequest>",
                    "validation": undefined,
                  },
                },
              },
              "headers": undefined,
              "name": "CountTokensRequest",
              "query-parameters": {
                "$.xgafv": {
                  "docs": "V1 error format.",
                  "type": "optional<CountTokensRequestXgafv>",
                },
                "$alt": {
                  "docs": "Data format for response.",
                  "type": "optional<CountTokensRequestAlt>",
                },
                "$callback": {
                  "docs": "JSONP",
                  "type": "optional<string>",
                },
                "$prettyPrint": {
                  "docs": "Returns response with indentations and line breaks.",
                  "type": "optional<boolean>",
                },
              },
            },
            "response": {
              "docs": "Successful operation",
              "type": "root.CountTokensResponse",
            },
          },
          "DeleteOperation": {
            "auth": false,
            "docs": "Deletes a long-running operation. This method indicates that the client is
no longer interested in the operation result. It does not cancel the
operation. If the server doesn't support this method, it returns
\`google.rpc.Code.UNIMPLEMENTED\`.",
            "examples": [
              {
                "path-parameters": {
                  "operationsId": "operationsId",
                },
                "response": {
                  "body": {
                    "string": {
                      "key": "value",
                    },
                  },
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/v1/operations/{operationsId}",
            "path-parameters": {
              "operationsId": {
                "docs": "Part of \`name\`. The name of the operation resource to be deleted.",
                "type": "string",
              },
            },
            "request": {
              "name": "DeleteOperationRequest",
              "query-parameters": {
                "$.xgafv": {
                  "docs": "V1 error format.",
                  "type": "optional<DeleteOperationRequestXgafv>",
                },
                "$alt": {
                  "docs": "Data format for response.",
                  "type": "optional<DeleteOperationRequestAlt>",
                },
                "$callback": {
                  "docs": "JSONP",
                  "type": "optional<string>",
                },
                "$prettyPrint": {
                  "docs": "Returns response with indentations and line breaks.",
                  "type": "optional<boolean>",
                },
              },
            },
            "response": {
              "docs": "Successful operation",
              "type": "root.Empty",
            },
          },
          "EmbedContent": {
            "auth": false,
            "docs": "Generates an embedding from the model given an input \`Content\`.",
            "examples": [
              {
                "path-parameters": {
                  "model": "model",
                },
                "request": {
                  "content": {},
                  "model": "model",
                },
                "response": {
                  "body": {
                    "embedding": {
                      "values": [
                        1.1,
                      ],
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/v1/models/{model}:embedContent",
            "path-parameters": {
              "model": "string",
            },
            "request": {
              "body": "root.EmbedContentRequest",
              "name": "EmbedContentRequest",
              "query-parameters": {
                "$.xgafv": {
                  "docs": "V1 error format.",
                  "type": "optional<EmbedContentRequestXgafv>",
                },
                "$alt": {
                  "docs": "Data format for response.",
                  "type": "optional<EmbedContentRequestAlt>",
                },
                "$callback": {
                  "docs": "JSONP",
                  "type": "optional<string>",
                },
                "$prettyPrint": {
                  "docs": "Returns response with indentations and line breaks.",
                  "type": "optional<boolean>",
                },
              },
            },
            "response": {
              "docs": "Successful operation",
              "type": "root.EmbedContentResponse",
            },
          },
          "GenerateContent": {
            "auth": false,
            "docs": "Generates a response from the model given an input
\`GenerateContentRequest\`.

Input capabilities differ between models, including tuned models. See the
[model guide](https://ai.google.dev/models/gemini) and
[tuning guide](https://ai.google.dev/docs/model_tuning_guidance) for
details.",
            "examples": [
              {
                "path-parameters": {
                  "model": "model",
                },
                "request": {
                  "contents": [
                    {},
                  ],
                  "model": "model",
                },
                "response": {
                  "body": {
                    "candidates": [
                      {
                        "finishReason": "FINISH_REASON_UNSPECIFIED",
                        "index": 1,
                        "safetyRatings": [
                          {
                            "category": "HARM_CATEGORY_UNSPECIFIED",
                            "probability": "HARM_PROBABILITY_UNSPECIFIED",
                          },
                        ],
                        "tokenCount": 1,
                      },
                    ],
                    "promptFeedback": {
                      "blockReason": "BLOCK_REASON_UNSPECIFIED",
                      "safetyRatings": [
                        {
                          "category": "HARM_CATEGORY_UNSPECIFIED",
                          "probability": "HARM_PROBABILITY_UNSPECIFIED",
                        },
                      ],
                    },
                    "usageMetadata": {
                      "candidatesTokenCount": 1,
                      "promptTokenCount": 1,
                      "totalTokenCount": 1,
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/v1/models/{model}:generateContent",
            "path-parameters": {
              "model": "string",
            },
            "request": {
              "body": "root.GenerateContentRequest",
              "name": "GenerateContentRequest",
              "query-parameters": {
                "$.xgafv": {
                  "docs": "V1 error format.",
                  "type": "optional<GenerateContentRequestXgafv>",
                },
                "$alt": {
                  "docs": "Data format for response.",
                  "type": "optional<GenerateContentRequestAlt>",
                },
                "$callback": {
                  "docs": "JSONP",
                  "type": "optional<string>",
                },
                "$prettyPrint": {
                  "docs": "Returns response with indentations and line breaks.",
                  "type": "optional<boolean>",
                },
              },
            },
            "response": {
              "docs": "Successful operation",
              "type": "root.GenerateContentResponse",
            },
          },
          "GenerateContentByTunedModel": {
            "auth": false,
            "docs": "Generates a response from the model given an input
\`GenerateContentRequest\`.

Input capabilities differ between models, including tuned models. See the
[model guide](https://ai.google.dev/models/gemini) and
[tuning guide](https://ai.google.dev/docs/model_tuning_guidance) for
details.",
            "examples": [
              {
                "path-parameters": {
                  "tunedModel": "tunedModel",
                },
                "request": {
                  "contents": [
                    {},
                  ],
                  "model": "model",
                },
                "response": {
                  "body": {
                    "candidates": [
                      {
                        "finishReason": "FINISH_REASON_UNSPECIFIED",
                        "index": 1,
                        "safetyRatings": [
                          {
                            "category": "HARM_CATEGORY_UNSPECIFIED",
                            "probability": "HARM_PROBABILITY_UNSPECIFIED",
                          },
                        ],
                        "tokenCount": 1,
                      },
                    ],
                    "promptFeedback": {
                      "blockReason": "BLOCK_REASON_UNSPECIFIED",
                      "safetyRatings": [
                        {
                          "category": "HARM_CATEGORY_UNSPECIFIED",
                          "probability": "HARM_PROBABILITY_UNSPECIFIED",
                        },
                      ],
                    },
                    "usageMetadata": {
                      "candidatesTokenCount": 1,
                      "promptTokenCount": 1,
                      "totalTokenCount": 1,
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/v1/tunedModels/{tunedModel}:generateContent",
            "path-parameters": {
              "tunedModel": "string",
            },
            "request": {
              "body": "root.GenerateContentRequest",
              "name": "GenerateContentByTunedModelRequest",
              "query-parameters": {
                "$.xgafv": {
                  "docs": "V1 error format.",
                  "type": "optional<GenerateContentByTunedModelRequestXgafv>",
                },
                "$alt": {
                  "docs": "Data format for response.",
                  "type": "optional<GenerateContentByTunedModelRequestAlt>",
                },
                "$callback": {
                  "docs": "JSONP",
                  "type": "optional<string>",
                },
                "$prettyPrint": {
                  "docs": "Returns response with indentations and line breaks.",
                  "type": "optional<boolean>",
                },
              },
            },
            "response": {
              "docs": "Successful operation",
              "type": "root.GenerateContentResponse",
            },
          },
          "GetModel": {
            "auth": false,
            "docs": "Gets information about a specific Model.",
            "examples": [
              {
                "path-parameters": {
                  "model": "model",
                },
                "response": {
                  "body": {
                    "baseModelId": "baseModelId",
                    "description": "description",
                    "displayName": "displayName",
                    "inputTokenLimit": 1,
                    "name": "name",
                    "outputTokenLimit": 1,
                    "supportedGenerationMethods": [
                      "supportedGenerationMethods",
                    ],
                    "temperature": 1.1,
                    "topK": 1,
                    "topP": 1.1,
                    "version": "version",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/v1/models/{model}",
            "path-parameters": {
              "model": "string",
            },
            "request": {
              "name": "GetModelRequest",
              "query-parameters": {
                "$.xgafv": {
                  "docs": "V1 error format.",
                  "type": "optional<GetModelRequestXgafv>",
                },
                "$alt": {
                  "docs": "Data format for response.",
                  "type": "optional<GetModelRequestAlt>",
                },
                "$callback": {
                  "docs": "JSONP",
                  "type": "optional<string>",
                },
                "$prettyPrint": {
                  "docs": "Returns response with indentations and line breaks.",
                  "type": "optional<boolean>",
                },
              },
            },
            "response": {
              "docs": "Successful operation",
              "type": "root.Model",
            },
          },
          "GetOperation": {
            "auth": false,
            "docs": "Gets the latest state of a long-running operation.  Clients can use this
method to poll the operation result at intervals as recommended by the API
service.",
            "examples": [
              {
                "path-parameters": {
                  "operation": "operation",
                  "tunedModel": "tunedModel",
                },
                "response": {
                  "body": {
                    "done": true,
                    "error": {
                      "code": 1,
                      "details": [
                        {},
                      ],
                      "message": "message",
                    },
                    "metadata": {
                      "metadata": {
                        "key": "value",
                      },
                    },
                    "name": "name",
                    "response": {
                      "response": {
                        "key": "value",
                      },
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/v1/tunedModels/{tunedModel}/operations/{operation}",
            "path-parameters": {
              "operation": "string",
              "tunedModel": "string",
            },
            "request": {
              "name": "GetOperationRequest",
              "query-parameters": {
                "$.xgafv": {
                  "docs": "V1 error format.",
                  "type": "optional<GetOperationRequestXgafv>",
                },
                "$alt": {
                  "docs": "Data format for response.",
                  "type": "optional<GetOperationRequestAlt>",
                },
                "$callback": {
                  "docs": "JSONP",
                  "type": "optional<string>",
                },
                "$prettyPrint": {
                  "docs": "Returns response with indentations and line breaks.",
                  "type": "optional<boolean>",
                },
              },
            },
            "response": {
              "docs": "Successful operation",
              "type": "root.Operation",
            },
          },
          "ListModels": {
            "auth": false,
            "docs": "Lists models available through the API.",
            "examples": [
              {
                "response": {
                  "body": {
                    "models": [
                      {
                        "baseModelId": "baseModelId",
                        "description": "description",
                        "displayName": "displayName",
                        "inputTokenLimit": 1,
                        "name": "name",
                        "outputTokenLimit": 1,
                        "supportedGenerationMethods": [
                          "supportedGenerationMethods",
                        ],
                        "temperature": 1.1,
                        "topK": 1,
                        "topP": 1.1,
                        "version": "version",
                      },
                    ],
                    "nextPageToken": "nextPageToken",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/v1/models",
            "request": {
              "name": "ListModelsRequest",
              "query-parameters": {
                "$.xgafv": {
                  "docs": "V1 error format.",
                  "type": "optional<ListModelsRequestXgafv>",
                },
                "$alt": {
                  "docs": "Data format for response.",
                  "type": "optional<ListModelsRequestAlt>",
                },
                "$callback": {
                  "docs": "JSONP",
                  "type": "optional<string>",
                },
                "$prettyPrint": {
                  "docs": "Returns response with indentations and line breaks.",
                  "type": "optional<boolean>",
                },
                "pageSize": {
                  "docs": "The maximum number of \`Models\` to return (per page).

The service may return fewer models.
If unspecified, at most 50 models will be returned per page.
This method returns at most 1000 models per page, even if you pass a larger
page_size.",
                  "type": "optional<integer>",
                },
                "pageToken": {
                  "docs": "A page token, received from a previous \`ListModels\` call.

Provide the \`page_token\` returned by one request as an argument to the next
request to retrieve the next page.

When paginating, all other parameters provided to \`ListModels\` must match
the call that provided the page token.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Successful operation",
              "type": "root.ListModelsResponse",
            },
          },
          "ListOperations": {
            "auth": false,
            "docs": "Lists operations that match the specified filter in the request. If the
server doesn't support this method, it returns \`UNIMPLEMENTED\`.",
            "examples": [
              {
                "response": {
                  "body": {
                    "nextPageToken": "nextPageToken",
                    "operations": [
                      {
                        "done": true,
                        "name": "name",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/v1/operations",
            "request": {
              "name": "ListOperationsRequest",
              "query-parameters": {
                "$.xgafv": {
                  "docs": "V1 error format.",
                  "type": "optional<ListOperationsRequestXgafv>",
                },
                "$alt": {
                  "docs": "Data format for response.",
                  "type": "optional<ListOperationsRequestAlt>",
                },
                "$callback": {
                  "docs": "JSONP",
                  "type": "optional<string>",
                },
                "$prettyPrint": {
                  "docs": "Returns response with indentations and line breaks.",
                  "type": "optional<boolean>",
                },
                "filter": {
                  "docs": "The standard list filter.",
                  "type": "optional<string>",
                },
                "pageSize": {
                  "docs": "The standard list page size.",
                  "type": "optional<integer>",
                },
                "pageToken": {
                  "docs": "The standard list page token.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Successful operation",
              "type": "root.ListOperationsResponse",
            },
          },
          "ListOperationsByTunedModel": {
            "auth": false,
            "docs": "Lists operations that match the specified filter in the request. If the
server doesn't support this method, it returns \`UNIMPLEMENTED\`.",
            "examples": [
              {
                "path-parameters": {
                  "tunedModel": "tunedModel",
                },
                "response": {
                  "body": {
                    "nextPageToken": "nextPageToken",
                    "operations": [
                      {
                        "done": true,
                        "name": "name",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/v1/tunedModels/{tunedModel}/operations",
            "path-parameters": {
              "tunedModel": "string",
            },
            "request": {
              "name": "ListOperationsByTunedModelRequest",
              "query-parameters": {
                "$.xgafv": {
                  "docs": "V1 error format.",
                  "type": "optional<ListOperationsByTunedModelRequestXgafv>",
                },
                "$alt": {
                  "docs": "Data format for response.",
                  "type": "optional<ListOperationsByTunedModelRequestAlt>",
                },
                "$callback": {
                  "docs": "JSONP",
                  "type": "optional<string>",
                },
                "$prettyPrint": {
                  "docs": "Returns response with indentations and line breaks.",
                  "type": "optional<boolean>",
                },
                "filter": {
                  "docs": "The standard list filter.",
                  "type": "optional<string>",
                },
                "pageSize": {
                  "docs": "The standard list page size.",
                  "type": "optional<integer>",
                },
                "pageToken": {
                  "docs": "The standard list page token.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Successful operation",
              "type": "root.ListOperationsResponse",
            },
          },
          "StreamGenerateContent": {
            "auth": false,
            "docs": "Generates a streamed response from the model given an input
\`GenerateContentRequest\`.",
            "examples": [
              {
                "path-parameters": {
                  "model": "model",
                },
                "request": {
                  "contents": [
                    {},
                  ],
                  "model": "model",
                },
                "response": {
                  "body": {
                    "candidates": [
                      {
                        "finishReason": "FINISH_REASON_UNSPECIFIED",
                        "index": 1,
                        "safetyRatings": [
                          {
                            "category": "HARM_CATEGORY_UNSPECIFIED",
                            "probability": "HARM_PROBABILITY_UNSPECIFIED",
                          },
                        ],
                        "tokenCount": 1,
                      },
                    ],
                    "promptFeedback": {
                      "blockReason": "BLOCK_REASON_UNSPECIFIED",
                      "safetyRatings": [
                        {
                          "category": "HARM_CATEGORY_UNSPECIFIED",
                          "probability": "HARM_PROBABILITY_UNSPECIFIED",
                        },
                      ],
                    },
                    "usageMetadata": {
                      "candidatesTokenCount": 1,
                      "promptTokenCount": 1,
                      "totalTokenCount": 1,
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/v1/models/{model}:streamGenerateContent",
            "path-parameters": {
              "model": "string",
            },
            "request": {
              "body": "root.GenerateContentRequest",
              "name": "StreamGenerateContentRequest",
              "query-parameters": {
                "$.xgafv": {
                  "docs": "V1 error format.",
                  "type": "optional<StreamGenerateContentRequestXgafv>",
                },
                "$alt": {
                  "docs": "Data format for response.",
                  "type": "optional<StreamGenerateContentRequestAlt>",
                },
                "$callback": {
                  "docs": "JSONP",
                  "type": "optional<string>",
                },
                "$prettyPrint": {
                  "docs": "Returns response with indentations and line breaks.",
                  "type": "optional<boolean>",
                },
              },
            },
            "response": {
              "docs": "Successful operation",
              "type": "root.GenerateContentResponse",
            },
          },
        },
      },
      "types": {
        "BatchEmbedContentsRequestAlt": {
          "enum": [
            "json",
            "media",
            "proto",
          ],
        },
        "BatchEmbedContentsRequestXgafv": {
          "enum": [
            {
              "name": "One",
              "value": "1",
            },
            {
              "name": "Two",
              "value": "2",
            },
          ],
        },
        "CancelOperationRequestAlt": {
          "enum": [
            "json",
            "media",
            "proto",
          ],
        },
        "CancelOperationRequestXgafv": {
          "enum": [
            {
              "name": "One",
              "value": "1",
            },
            {
              "name": "Two",
              "value": "2",
            },
          ],
        },
        "CountTokensRequestAlt": {
          "enum": [
            "json",
            "media",
            "proto",
          ],
        },
        "CountTokensRequestXgafv": {
          "enum": [
            {
              "name": "One",
              "value": "1",
            },
            {
              "name": "Two",
              "value": "2",
            },
          ],
        },
        "DeleteOperationRequestAlt": {
          "enum": [
            "json",
            "media",
            "proto",
          ],
        },
        "DeleteOperationRequestXgafv": {
          "enum": [
            {
              "name": "One",
              "value": "1",
            },
            {
              "name": "Two",
              "value": "2",
            },
          ],
        },
        "EmbedContentRequestAlt": {
          "enum": [
            "json",
            "media",
            "proto",
          ],
        },
        "EmbedContentRequestXgafv": {
          "enum": [
            {
              "name": "One",
              "value": "1",
            },
            {
              "name": "Two",
              "value": "2",
            },
          ],
        },
        "GenerateContentByTunedModelRequestAlt": {
          "enum": [
            "json",
            "media",
            "proto",
          ],
        },
        "GenerateContentByTunedModelRequestXgafv": {
          "enum": [
            {
              "name": "One",
              "value": "1",
            },
            {
              "name": "Two",
              "value": "2",
            },
          ],
        },
        "GenerateContentRequestAlt": {
          "enum": [
            "json",
            "media",
            "proto",
          ],
        },
        "GenerateContentRequestXgafv": {
          "enum": [
            {
              "name": "One",
              "value": "1",
            },
            {
              "name": "Two",
              "value": "2",
            },
          ],
        },
        "GetModelRequestAlt": {
          "enum": [
            "json",
            "media",
            "proto",
          ],
        },
        "GetModelRequestXgafv": {
          "enum": [
            {
              "name": "One",
              "value": "1",
            },
            {
              "name": "Two",
              "value": "2",
            },
          ],
        },
        "GetOperationRequestAlt": {
          "enum": [
            "json",
            "media",
            "proto",
          ],
        },
        "GetOperationRequestXgafv": {
          "enum": [
            {
              "name": "One",
              "value": "1",
            },
            {
              "name": "Two",
              "value": "2",
            },
          ],
        },
        "ListModelsRequestAlt": {
          "enum": [
            "json",
            "media",
            "proto",
          ],
        },
        "ListModelsRequestXgafv": {
          "enum": [
            {
              "name": "One",
              "value": "1",
            },
            {
              "name": "Two",
              "value": "2",
            },
          ],
        },
        "ListOperationsByTunedModelRequestAlt": {
          "enum": [
            "json",
            "media",
            "proto",
          ],
        },
        "ListOperationsByTunedModelRequestXgafv": {
          "enum": [
            {
              "name": "One",
              "value": "1",
            },
            {
              "name": "Two",
              "value": "2",
            },
          ],
        },
        "ListOperationsRequestAlt": {
          "enum": [
            "json",
            "media",
            "proto",
          ],
        },
        "ListOperationsRequestXgafv": {
          "enum": [
            {
              "name": "One",
              "value": "1",
            },
            {
              "name": "Two",
              "value": "2",
            },
          ],
        },
        "StreamGenerateContentRequestAlt": {
          "enum": [
            "json",
            "media",
            "proto",
          ],
        },
        "StreamGenerateContentRequestXgafv": {
          "enum": [
            {
              "name": "One",
              "value": "1",
            },
            {
              "name": "Two",
              "value": "2",
            },
          ],
        },
      },
    },
  },
  "packageMarkerFile": {
    "types": {
      "BaseOperation": {
        "docs": "This resource represents a long-running operation that is the result of a
network API call.",
        "properties": {
          "done": {
            "default": undefined,
            "docs": "If the value is \`false\`, it means the operation is still in progress.
If \`true\`, the operation is completed, and either \`error\` or \`response\` is
available.",
            "type": "optional<boolean>",
            "validation": undefined,
          },
          "error": {
            "default": undefined,
            "docs": "The error result of the operation in case of failure or cancellation.",
            "type": "optional<Status>",
            "validation": undefined,
          },
          "name": {
            "default": undefined,
            "docs": "The server-assigned name, which is only unique within the same service that
originally returns it. If you use the default HTTP mapping, the
\`name\` should be a resource name ending with \`operations/{unique_id}\`.",
            "type": "optional<string>",
            "validation": undefined,
          },
        },
      },
      "BatchEmbedContentsResponse": {
        "docs": "The response to a \`BatchEmbedContentsRequest\`.",
        "properties": {
          "embeddings": {
            "default": undefined,
            "docs": "Output only. The embeddings for each request, in the same order as provided in the batch
request.",
            "type": "optional<list<ContentEmbedding>>",
            "validation": undefined,
          },
        },
      },
      "Blob": {
        "docs": "Raw media bytes.

Text should not be sent as raw bytes, use the 'text' field.",
        "properties": {
          "data": {
            "default": undefined,
            "docs": "Raw bytes for media formats.",
            "type": "optional<string>",
            "validation": {
              "format": "byte",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "mimeType": {
            "default": undefined,
            "docs": "The IANA standard MIME type of the source data.
Examples:
  - image/png
  - image/jpeg
If an unsupported MIME type is provided, an error will be returned. For a
complete list of supported types, see [Supported file
formats](https://ai.google.dev/gemini-api/docs/prompting_with_media#supported_file_formats).",
            "type": "optional<string>",
            "validation": undefined,
          },
        },
      },
      "CancelOperationRequest": {
        "docs": "The request message for Operations.CancelOperation.",
        "type": "map<string, unknown>",
      },
      "Candidate": {
        "docs": "A response candidate generated from the model.",
        "properties": {
          "citationMetadata": {
            "default": undefined,
            "docs": "Output only. Citation information for model-generated candidate.

This field may be populated with recitation information for any text
included in the \`content\`. These are passages that are "recited" from
copyrighted material in the foundational LLM's training data.",
            "type": "optional<CitationMetadata>",
            "validation": undefined,
          },
          "content": {
            "default": undefined,
            "docs": "Output only. Generated content returned from the model.",
            "type": "optional<Content>",
            "validation": undefined,
          },
          "finishReason": {
            "default": undefined,
            "docs": "Optional. Output only. The reason why the model stopped generating tokens.

If empty, the model has not stopped generating the tokens.",
            "type": "optional<CandidateFinishReason>",
            "validation": undefined,
          },
          "index": {
            "default": undefined,
            "docs": "Output only. Index of the candidate in the list of candidates.",
            "type": "optional<integer>",
            "validation": undefined,
          },
          "safetyRatings": {
            "default": undefined,
            "docs": "List of ratings for the safety of a response candidate.

There is at most one rating per category.",
            "type": "optional<list<SafetyRating>>",
            "validation": undefined,
          },
          "tokenCount": {
            "default": undefined,
            "docs": "Output only. Token count for this candidate.",
            "type": "optional<integer>",
            "validation": undefined,
          },
        },
      },
      "CandidateFinishReason": {
        "docs": "Optional. Output only. The reason why the model stopped generating tokens.

If empty, the model has not stopped generating the tokens.",
        "enum": [
          "FINISH_REASON_UNSPECIFIED",
          "STOP",
          "MAX_TOKENS",
          "SAFETY",
          "RECITATION",
          "OTHER",
        ],
      },
      "CitationMetadata": {
        "docs": "A collection of source attributions for a piece of content.",
        "properties": {
          "citationSources": {
            "default": undefined,
            "docs": "Citations to sources for a specific response.",
            "type": "optional<list<CitationSource>>",
            "validation": undefined,
          },
        },
      },
      "CitationSource": {
        "docs": "A citation to a source for a portion of a specific response.",
        "properties": {
          "endIndex": {
            "default": undefined,
            "docs": "Optional. End of the attributed segment, exclusive.",
            "type": "optional<integer>",
            "validation": undefined,
          },
          "license": {
            "default": undefined,
            "docs": "Optional. License for the GitHub project that is attributed as a source for segment.

License info is required for code citations.",
            "type": "optional<string>",
            "validation": undefined,
          },
          "startIndex": {
            "default": undefined,
            "docs": "Optional. Start of segment of the response that is attributed to this source.

Index indicates the start of the segment, measured in bytes.",
            "type": "optional<integer>",
            "validation": undefined,
          },
          "uri": {
            "default": undefined,
            "docs": "Optional. URI that is attributed as a source for a portion of the text.",
            "type": "optional<string>",
            "validation": undefined,
          },
        },
      },
      "Content": {
        "docs": "The base structured datatype containing multi-part content of a message.

A \`Content\` includes a \`role\` field designating the producer of the \`Content\`
and a \`parts\` field containing multi-part data that contains the content of
the message turn.",
        "properties": {
          "parts": {
            "default": undefined,
            "docs": "Ordered \`Parts\` that constitute a single message. Parts may have different
MIME types.",
            "type": "optional<list<Part>>",
            "validation": undefined,
          },
          "role": {
            "default": undefined,
            "docs": "Optional. The producer of the content. Must be either 'user' or 'model'.

Useful to set for multi-turn conversations, otherwise can be left blank
or unset.",
            "type": "optional<string>",
            "validation": undefined,
          },
        },
      },
      "ContentEmbedding": {
        "docs": "A list of floats representing an embedding.",
        "properties": {
          "values": {
            "default": undefined,
            "docs": "The embedding values.",
            "type": "optional<list<double>>",
            "validation": undefined,
          },
        },
      },
      "CountTokensResponse": {
        "docs": "A response from \`CountTokens\`.

It returns the model's \`token_count\` for the \`prompt\`.",
        "properties": {
          "totalTokens": {
            "default": undefined,
            "docs": "The number of tokens that the \`model\` tokenizes the \`prompt\` into.

Always non-negative.",
            "type": "optional<integer>",
            "validation": undefined,
          },
        },
      },
      "CreateTunedModelMetadata": {
        "docs": "Metadata about the state and progress of creating a tuned model returned from
the long-running operation",
        "properties": {
          "completedPercent": {
            "default": undefined,
            "docs": "The completed percentage for the tuning operation.",
            "type": "optional<double>",
            "validation": undefined,
          },
          "completedSteps": {
            "default": undefined,
            "docs": "The number of steps completed.",
            "type": "optional<integer>",
            "validation": undefined,
          },
          "snapshots": {
            "default": undefined,
            "docs": "Metrics collected during tuning.",
            "type": "optional<list<TuningSnapshot>>",
            "validation": undefined,
          },
          "totalSteps": {
            "default": undefined,
            "docs": "The total number of tuning steps.",
            "type": "optional<integer>",
            "validation": undefined,
          },
          "tunedModel": {
            "default": undefined,
            "docs": "Name of the tuned model associated with the tuning operation.",
            "type": "optional<string>",
            "validation": undefined,
          },
        },
      },
      "EmbedContentRequest": {
        "docs": "Request containing the \`Content\` for the model to embed.",
        "properties": {
          "content": {
            "docs": "Required. The content to embed. Only the \`parts.text\` fields will be counted.",
            "type": "Content",
          },
          "model": {
            "docs": "Required. The model's resource name. This serves as an ID for the Model to use.

This name should match a model name returned by the \`ListModels\` method.

Format: \`models/{model}\`",
            "type": "string",
          },
          "outputDimensionality": {
            "default": undefined,
            "docs": "Optional. Optional reduced dimension for the output embedding. If set, excessive
values in the output embedding are truncated from the end. Supported by
newer models since 2024, and the earlier model (\`models/embedding-001\`)
cannot specify this value.",
            "type": "optional<integer>",
            "validation": undefined,
          },
          "taskType": {
            "default": undefined,
            "docs": "Optional. Optional task type for which the embeddings will be used. Can only be set
for \`models/embedding-001\`.",
            "type": "optional<EmbedContentRequestTaskType>",
            "validation": undefined,
          },
          "title": {
            "default": undefined,
            "docs": "Optional. An optional title for the text. Only applicable when TaskType is
\`RETRIEVAL_DOCUMENT\`.

Note: Specifying a \`title\` for \`RETRIEVAL_DOCUMENT\` provides better quality
embeddings for retrieval.",
            "type": "optional<string>",
            "validation": undefined,
          },
        },
      },
      "EmbedContentRequestTaskType": {
        "docs": "Optional. Optional task type for which the embeddings will be used. Can only be set
for \`models/embedding-001\`.",
        "enum": [
          "TASK_TYPE_UNSPECIFIED",
          "RETRIEVAL_QUERY",
          "RETRIEVAL_DOCUMENT",
          "SEMANTIC_SIMILARITY",
          "CLASSIFICATION",
          "CLUSTERING",
          "QUESTION_ANSWERING",
          "FACT_VERIFICATION",
        ],
      },
      "EmbedContentResponse": {
        "docs": "The response to an \`EmbedContentRequest\`.",
        "properties": {
          "embedding": {
            "default": undefined,
            "docs": "Output only. The embedding generated from the input content.",
            "type": "optional<ContentEmbedding>",
            "validation": undefined,
          },
        },
      },
      "Empty": {
        "docs": "A generic empty message that you can re-use to avoid defining duplicated
empty messages in your APIs. A typical example is to use it as the request
or the response type of an API method. For instance:

    service Foo {
      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
    }",
        "type": "map<string, unknown>",
      },
      "GenerateContentRequest": {
        "docs": "Request to generate a completion from the model.",
        "properties": {
          "contents": {
            "docs": "Required. The content of the current conversation with the model.

For single-turn queries, this is a single instance. For multi-turn queries,
this is a repeated field that contains conversation history + latest
request.",
            "type": "list<Content>",
          },
          "generationConfig": {
            "default": undefined,
            "docs": "Optional. Configuration options for model generation and outputs.",
            "type": "optional<GenerationConfig>",
            "validation": undefined,
          },
          "model": {
            "docs": "Required. The name of the \`Model\` to use for generating the completion.

Format: \`name=models/{model}\`.",
            "type": "string",
          },
          "safetySettings": {
            "default": undefined,
            "docs": "Optional. A list of unique \`SafetySetting\` instances for blocking unsafe content.

This will be enforced on the \`GenerateContentRequest.contents\` and
\`GenerateContentResponse.candidates\`. There should not be more than one
setting for each \`SafetyCategory\` type. The API will block any contents and
responses that fail to meet the thresholds set by these settings. This list
overrides the default settings for each \`SafetyCategory\` specified in the
safety_settings. If there is no \`SafetySetting\` for a given
\`SafetyCategory\` provided in the list, the API will use the default safety
setting for that category. Harm categories HARM_CATEGORY_HATE_SPEECH,
HARM_CATEGORY_SEXUALLY_EXPLICIT, HARM_CATEGORY_DANGEROUS_CONTENT,
HARM_CATEGORY_HARASSMENT are supported.",
            "type": "optional<list<SafetySetting>>",
            "validation": undefined,
          },
        },
      },
      "GenerateContentResponse": {
        "docs": "Response from the model supporting multiple candidates.

Note on safety ratings and content filtering. They are reported for both
prompt in \`GenerateContentResponse.prompt_feedback\` and for each candidate
in \`finish_reason\` and in \`safety_ratings\`. The API contract is that:
 - either all requested candidates are returned or no candidates at all
 - no candidates are returned only if there was something wrong with the
   prompt (see \`prompt_feedback\`)
 - feedback on each candidate is reported on \`finish_reason\` and
   \`safety_ratings\`.",
        "properties": {
          "candidates": {
            "default": undefined,
            "docs": "Candidate responses from the model.",
            "type": "optional<list<Candidate>>",
            "validation": undefined,
          },
          "promptFeedback": {
            "default": undefined,
            "docs": "Returns the prompt's feedback related to the content filters.",
            "type": "optional<PromptFeedback>",
            "validation": undefined,
          },
          "usageMetadata": {
            "default": undefined,
            "docs": "Output only. Metadata on the generation requests' token usage.",
            "type": "optional<UsageMetadata>",
            "validation": undefined,
          },
        },
      },
      "GenerationConfig": {
        "docs": "Configuration options for model generation and outputs. Not all parameters
may be configurable for every model.",
        "properties": {
          "candidateCount": {
            "default": undefined,
            "docs": "Optional. Number of generated responses to return.

Currently, this value can only be set to 1. If unset, this will default
to 1.",
            "type": "optional<integer>",
            "validation": undefined,
          },
          "maxOutputTokens": {
            "default": undefined,
            "docs": "Optional. The maximum number of tokens to include in a candidate.

Note: The default value varies by model, see the \`Model.output_token_limit\`
attribute of the \`Model\` returned from the \`getModel\` function.",
            "type": "optional<integer>",
            "validation": undefined,
          },
          "stopSequences": {
            "default": undefined,
            "docs": "Optional. The set of character sequences (up to 5) that will stop output generation.
If specified, the API will stop at the first appearance of a stop
sequence. The stop sequence will not be included as part of the response.",
            "type": "optional<list<string>>",
            "validation": undefined,
          },
          "temperature": {
            "default": undefined,
            "docs": "Optional. Controls the randomness of the output.

Note: The default value varies by model, see the \`Model.temperature\`
attribute of the \`Model\` returned from the \`getModel\` function.

Values can range from [0.0, 2.0].",
            "type": "optional<double>",
            "validation": undefined,
          },
          "topK": {
            "default": undefined,
            "docs": "Optional. The maximum number of tokens to consider when sampling.

Models use nucleus sampling or combined Top-k and nucleus sampling.
Top-k sampling considers the set of \`top_k\` most probable tokens.
Models running with nucleus sampling don't allow top_k setting.

Note: The default value varies by model, see the \`Model.top_k\`
attribute of the \`Model\` returned from the \`getModel\` function. Empty
\`top_k\` field in \`Model\` indicates the model doesn't apply top-k sampling
and doesn't allow setting \`top_k\` on requests.",
            "type": "optional<integer>",
            "validation": undefined,
          },
          "topP": {
            "default": undefined,
            "docs": "Optional. The maximum cumulative probability of tokens to consider when sampling.

The model uses combined Top-k and nucleus sampling.

Tokens are sorted based on their assigned probabilities so that only the
most likely tokens are considered. Top-k sampling directly limits the
maximum number of tokens to consider, while Nucleus sampling limits number
of tokens based on the cumulative probability.

Note: The default value varies by model, see the \`Model.top_p\`
attribute of the \`Model\` returned from the \`getModel\` function.",
            "type": "optional<double>",
            "validation": undefined,
          },
        },
      },
      "ListModelsResponse": {
        "docs": "Response from \`ListModel\` containing a paginated list of Models.",
        "properties": {
          "models": {
            "default": undefined,
            "docs": "The returned Models.",
            "type": "optional<list<Model>>",
            "validation": undefined,
          },
          "nextPageToken": {
            "default": undefined,
            "docs": "A token, which can be sent as \`page_token\` to retrieve the next page.

If this field is omitted, there are no more pages.",
            "type": "optional<string>",
            "validation": undefined,
          },
        },
      },
      "ListOperationsResponse": {
        "docs": "The response message for Operations.ListOperations.",
        "properties": {
          "nextPageToken": {
            "default": undefined,
            "docs": "The standard List next-page token.",
            "type": "optional<string>",
            "validation": undefined,
          },
          "operations": {
            "default": undefined,
            "docs": "A list of operations that matches the specified filter in the request.",
            "type": "optional<list<Operation>>",
            "validation": undefined,
          },
        },
      },
      "Model": {
        "docs": "Information about a Generative Language Model.",
        "properties": {
          "baseModelId": {
            "docs": "Required. The name of the base model, pass this to the generation request.

Examples:

* \`chat-bison\`",
            "type": "string",
          },
          "description": {
            "default": undefined,
            "docs": "A short description of the model.",
            "type": "optional<string>",
            "validation": undefined,
          },
          "displayName": {
            "default": undefined,
            "docs": "The human-readable name of the model. E.g. "Chat Bison".

The name can be up to 128 characters long and can consist of any UTF-8
characters.",
            "type": "optional<string>",
            "validation": undefined,
          },
          "inputTokenLimit": {
            "default": undefined,
            "docs": "Maximum number of input tokens allowed for this model.",
            "type": "optional<integer>",
            "validation": undefined,
          },
          "name": {
            "docs": "Required. The resource name of the \`Model\`.

Format: \`models/{model}\` with a \`{model}\` naming convention of:

* "{base_model_id}-{version}"

Examples:

* \`models/chat-bison-001\`",
            "type": "string",
          },
          "outputTokenLimit": {
            "default": undefined,
            "docs": "Maximum number of output tokens available for this model.",
            "type": "optional<integer>",
            "validation": undefined,
          },
          "supportedGenerationMethods": {
            "default": undefined,
            "docs": "The model's supported generation methods.

The method names are defined as Pascal case
strings, such as \`generateMessage\` which correspond to API methods.",
            "type": "optional<list<string>>",
            "validation": undefined,
          },
          "temperature": {
            "default": undefined,
            "docs": "Controls the randomness of the output.

Values can range over \`[0.0,1.0]\`, inclusive. A value closer to \`1.0\` will
produce responses that are more varied, while a value closer to \`0.0\` will
typically result in less surprising responses from the model.
This value specifies default to be used by the backend while making the
call to the model.",
            "type": "optional<double>",
            "validation": undefined,
          },
          "topK": {
            "default": undefined,
            "docs": "For Top-k sampling.

Top-k sampling considers the set of \`top_k\` most probable tokens.
This value specifies default to be used by the backend while making the
call to the model.
If empty, indicates the model doesn't use top-k sampling, and \`top_k\` isn't
allowed as a generation parameter.",
            "type": "optional<integer>",
            "validation": undefined,
          },
          "topP": {
            "default": undefined,
            "docs": "For Nucleus sampling.

Nucleus sampling considers the smallest set of tokens whose probability
sum is at least \`top_p\`.
This value specifies default to be used by the backend while making the
call to the model.",
            "type": "optional<double>",
            "validation": undefined,
          },
          "version": {
            "docs": "Required. The version number of the model.

This represents the major version",
            "type": "string",
          },
        },
      },
      "Operation": {
        "docs": "This resource represents a long-running operation that is the result of a
network API call.",
        "extends": [
          "BaseOperation",
        ],
        "properties": {
          "metadata": {
            "default": undefined,
            "docs": "Service-specific metadata associated with the operation.  It typically
contains progress information and common metadata such as create time.
Some services might not provide such metadata.  Any method that returns a
long-running operation should document the metadata type, if any.",
            "type": "optional<map<string, unknown>>",
            "validation": undefined,
          },
          "response": {
            "default": undefined,
            "docs": "The normal, successful response of the operation.  If the original
method returns no data on success, such as \`Delete\`, the response is
\`google.protobuf.Empty\`.  If the original method is standard
\`Get\`/\`Create\`/\`Update\`, the response should be the resource.  For other
methods, the response should have the type \`XxxResponse\`, where \`Xxx\`
is the original method name.  For example, if the original method name
is \`TakeSnapshot()\`, the inferred response type is
\`TakeSnapshotResponse\`.",
            "type": "optional<map<string, unknown>>",
            "validation": undefined,
          },
        },
      },
      "Part": {
        "docs": "A datatype containing media that is part of a multi-part \`Content\` message.

A \`Part\` consists of data which has an associated datatype. A \`Part\` can only
contain one of the accepted types in \`Part.data\`.

A \`Part\` must have a fixed IANA MIME type identifying the type and subtype
of the media if the \`inline_data\` field is filled with raw bytes.",
        "properties": {
          "inlineData": {
            "default": undefined,
            "docs": "Inline media bytes.",
            "type": "optional<Blob>",
            "validation": undefined,
          },
          "text": {
            "default": undefined,
            "docs": "Inline text.",
            "type": "optional<string>",
            "validation": undefined,
          },
        },
      },
      "PromptFeedback": {
        "docs": "A set of the feedback metadata the prompt specified in
\`GenerateContentRequest.content\`.",
        "properties": {
          "blockReason": {
            "default": undefined,
            "docs": "Optional. If set, the prompt was blocked and no candidates are returned.
Rephrase your prompt.",
            "type": "optional<PromptFeedbackBlockReason>",
            "validation": undefined,
          },
          "safetyRatings": {
            "default": undefined,
            "docs": "Ratings for safety of the prompt.
There is at most one rating per category.",
            "type": "optional<list<SafetyRating>>",
            "validation": undefined,
          },
        },
      },
      "PromptFeedbackBlockReason": {
        "docs": "Optional. If set, the prompt was blocked and no candidates are returned.
Rephrase your prompt.",
        "enum": [
          "BLOCK_REASON_UNSPECIFIED",
          "SAFETY",
          "OTHER",
        ],
      },
      "SafetyRating": {
        "docs": "Safety rating for a piece of content.

The safety rating contains the category of harm and the
harm probability level in that category for a piece of content.
Content is classified for safety across a number of
harm categories and the probability of the harm classification is included
here.",
        "properties": {
          "blocked": {
            "default": undefined,
            "docs": "Was this content blocked because of this rating?",
            "type": "optional<boolean>",
            "validation": undefined,
          },
          "category": {
            "docs": "Required. The category for this rating.",
            "type": "SafetyRatingCategory",
          },
          "probability": {
            "docs": "Required. The probability of harm for this content.",
            "type": "SafetyRatingProbability",
          },
        },
      },
      "SafetyRatingCategory": {
        "docs": "Required. The category for this rating.",
        "enum": [
          "HARM_CATEGORY_UNSPECIFIED",
          "HARM_CATEGORY_DEROGATORY",
          "HARM_CATEGORY_TOXICITY",
          "HARM_CATEGORY_VIOLENCE",
          "HARM_CATEGORY_SEXUAL",
          "HARM_CATEGORY_MEDICAL",
          "HARM_CATEGORY_DANGEROUS",
          "HARM_CATEGORY_HARASSMENT",
          "HARM_CATEGORY_HATE_SPEECH",
          "HARM_CATEGORY_SEXUALLY_EXPLICIT",
          "HARM_CATEGORY_DANGEROUS_CONTENT",
        ],
      },
      "SafetyRatingProbability": {
        "docs": "Required. The probability of harm for this content.",
        "enum": [
          "HARM_PROBABILITY_UNSPECIFIED",
          "NEGLIGIBLE",
          "LOW",
          "MEDIUM",
          "HIGH",
        ],
      },
      "SafetySetting": {
        "docs": "Safety setting, affecting the safety-blocking behavior.

Passing a safety setting for a category changes the allowed probability that
content is blocked.",
        "properties": {
          "category": {
            "docs": "Required. The category for this setting.",
            "type": "SafetySettingCategory",
          },
          "threshold": {
            "docs": "Required. Controls the probability threshold at which harm is blocked.",
            "type": "SafetySettingThreshold",
          },
        },
      },
      "SafetySettingCategory": {
        "docs": "Required. The category for this setting.",
        "enum": [
          "HARM_CATEGORY_UNSPECIFIED",
          "HARM_CATEGORY_DEROGATORY",
          "HARM_CATEGORY_TOXICITY",
          "HARM_CATEGORY_VIOLENCE",
          "HARM_CATEGORY_SEXUAL",
          "HARM_CATEGORY_MEDICAL",
          "HARM_CATEGORY_DANGEROUS",
          "HARM_CATEGORY_HARASSMENT",
          "HARM_CATEGORY_HATE_SPEECH",
          "HARM_CATEGORY_SEXUALLY_EXPLICIT",
          "HARM_CATEGORY_DANGEROUS_CONTENT",
        ],
      },
      "SafetySettingThreshold": {
        "docs": "Required. Controls the probability threshold at which harm is blocked.",
        "enum": [
          "HARM_BLOCK_THRESHOLD_UNSPECIFIED",
          "BLOCK_LOW_AND_ABOVE",
          "BLOCK_MEDIUM_AND_ABOVE",
          "BLOCK_ONLY_HIGH",
          "BLOCK_NONE",
        ],
      },
      "Status": {
        "docs": "The \`Status\` type defines a logical error model that is suitable for
different programming environments, including REST APIs and RPC APIs. It is
used by [gRPC](https://github.com/grpc). Each \`Status\` message contains
three pieces of data: error code, error message, and error details.

You can find out more about this error model and how to work with it in the
[API Design Guide](https://cloud.google.com/apis/design/errors).",
        "properties": {
          "code": {
            "default": undefined,
            "docs": "The status code, which should be an enum value of google.rpc.Code.",
            "type": "optional<integer>",
            "validation": undefined,
          },
          "details": {
            "default": undefined,
            "docs": "A list of messages that carry the error details.  There is a common set of
message types for APIs to use.",
            "type": "optional<list<map<string, unknown>>>",
            "validation": undefined,
          },
          "message": {
            "default": undefined,
            "docs": "A developer-facing error message, which should be in English. Any
user-facing error message should be localized and sent in the
google.rpc.Status.details field, or localized by the client.",
            "type": "optional<string>",
            "validation": undefined,
          },
        },
      },
      "TuningSnapshot": {
        "docs": "Record for a single tuning step.",
        "properties": {
          "computeTime": {
            "default": undefined,
            "docs": "Output only. The timestamp when this metric was computed.",
            "type": "optional<datetime>",
            "validation": undefined,
          },
          "epoch": {
            "default": undefined,
            "docs": "Output only. The epoch this step was part of.",
            "type": "optional<integer>",
            "validation": undefined,
          },
          "meanLoss": {
            "default": undefined,
            "docs": "Output only. The mean loss of the training examples for this step.",
            "type": "optional<double>",
            "validation": undefined,
          },
          "step": {
            "default": undefined,
            "docs": "Output only. The tuning step.",
            "type": "optional<integer>",
            "validation": undefined,
          },
        },
      },
      "UsageMetadata": {
        "docs": "Metadata on the generation request's token usage.",
        "properties": {
          "candidatesTokenCount": {
            "default": undefined,
            "docs": "Total number of tokens across the generated candidates.",
            "type": "optional<integer>",
            "validation": undefined,
          },
          "promptTokenCount": {
            "default": undefined,
            "docs": "Number of tokens in the prompt.",
            "type": "optional<integer>",
            "validation": undefined,
          },
          "totalTokenCount": {
            "default": undefined,
            "docs": "Total token count for the generation request (prompt + candidates).",
            "type": "optional<integer>",
            "validation": undefined,
          },
        },
      },
    },
  },
  "rootApiFile": {
    "default-environment": "Default",
    "display-name": "Generative Language API",
    "environments": {
      "Default": "https://generativelanguage.googleapis.com",
    },
    "error-discrimination": {
      "strategy": "status-code",
    },
    "name": "api",
  },
}
`;

exports[`open api ir to fern default-content simple 1`] = `
{
  "definitionFiles": {
    "generativelanguage.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "BatchEmbedContents": {
            "auth": false,
            "docs": "Generates multiple embeddings from the model given input text in a
synchronous call.",
            "examples": [
              {
                "path-parameters": {
                  "model": "model",
                },
                "request": {
                  "requests": [
                    {
                      "content": {},
                      "model": "model",
                    },
                  ],
                },
                "response": {
                  "body": {
                    "embeddings": [
                      {
                        "values": [
                          1.1,
                        ],
                      },
                    ],
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/v1/models/{model}:batchEmbedContents",
            "path-parameters": {
              "model": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "requests": {
                    "docs": "Required. Embed requests for the batch. The model in each of these requests must
match the model specified \`BatchEmbedContentsRequest.model\`.",
                    "type": "list<root.EmbedContentRequest>",
                  },
                },
              },
              "headers": undefined,
              "name": "BatchEmbedContentsRequest",
              "query-parameters": {
                "$.xgafv": {
                  "docs": "V1 error format.",
                  "type": "optional<BatchEmbedContentsRequestXgafv>",
                },
                "$alt": {
                  "docs": "Data format for response.",
                  "type": "optional<BatchEmbedContentsRequestAlt>",
                },
                "$callback": {
                  "docs": "JSONP",
                  "type": "optional<string>",
                },
                "$prettyPrint": {
                  "docs": "Returns response with indentations and line breaks.",
                  "type": "optional<boolean>",
                },
              },
            },
            "response": {
              "docs": "Successful operation",
              "type": "root.BatchEmbedContentsResponse",
            },
          },
          "CancelOperation": {
            "auth": false,
            "docs": "Starts asynchronous cancellation on a long-running operation.  The server
makes a best effort to cancel the operation, but success is not
guaranteed.  If the server doesn't support this method, it returns
\`google.rpc.Code.UNIMPLEMENTED\`.  Clients can use
Operations.GetOperation or
other methods to check whether the cancellation succeeded or whether the
operation completed despite cancellation. On successful cancellation,
the operation is not deleted; instead, it becomes an operation with
an Operation.error value with a google.rpc.Status.code of 1,
corresponding to \`Code.CANCELLED\`.",
            "examples": [
              {
                "path-parameters": {
                  "operation": "operation",
                  "tunedModel": "tunedModel",
                },
                "request": {},
                "response": {
                  "body": {
                    "string": {
                      "key": "value",
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/v1/tunedModels/{tunedModel}/operations/{operation}:cancel",
            "path-parameters": {
              "operation": "string",
              "tunedModel": "string",
            },
            "request": {
              "body": "root.CancelOperationRequest",
              "name": "CancelOperationRequest",
              "query-parameters": {
                "$.xgafv": {
                  "docs": "V1 error format.",
                  "type": "optional<CancelOperationRequestXgafv>",
                },
                "$alt": {
                  "docs": "Data format for response.",
                  "type": "optional<CancelOperationRequestAlt>",
                },
                "$callback": {
                  "docs": "JSONP",
                  "type": "optional<string>",
                },
                "$prettyPrint": {
                  "docs": "Returns response with indentations and line breaks.",
                  "type": "optional<boolean>",
                },
              },
            },
            "response": {
              "docs": "Successful operation",
              "type": "root.Empty",
            },
          },
          "CountTokens": {
            "auth": false,
            "docs": "Runs a model's tokenizer on input content and returns the token count.",
            "examples": [
              {
                "path-parameters": {
                  "model": "model",
                },
                "request": {},
                "response": {
                  "body": {
                    "totalTokens": 1,
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/v1/models/{model}:countTokens",
            "path-parameters": {
              "model": "string",
            },
            "request": {
              "body": {
                "properties": {
                  "contents": {
                    "default": undefined,
                    "docs": "Optional. The input given to the model as a prompt. This field is ignored when
\`generate_content_request\` is set.",
                    "type": "optional<list<root.Content>>",
                    "validation": undefined,
                  },
                  "generateContentRequest": {
                    "default": undefined,
                    "docs": "Optional. The overall input given to the model. CountTokens will count prompt,
function calling, etc.",
                    "type": "optional<root.GenerateContentRequest>",
                    "validation": undefined,
                  },
                },
              },
              "headers": undefined,
              "name": "CountTokensRequest",
              "query-parameters": {
                "$.xgafv": {
                  "docs": "V1 error format.",
                  "type": "optional<CountTokensRequestXgafv>",
                },
                "$alt": {
                  "docs": "Data format for response.",
                  "type": "optional<CountTokensRequestAlt>",
                },
                "$callback": {
                  "docs": "JSONP",
                  "type": "optional<string>",
                },
                "$prettyPrint": {
                  "docs": "Returns response with indentations and line breaks.",
                  "type": "optional<boolean>",
                },
              },
            },
            "response": {
              "docs": "Successful operation",
              "type": "root.CountTokensResponse",
            },
          },
          "DeleteOperation": {
            "auth": false,
            "docs": "Deletes a long-running operation. This method indicates that the client is
no longer interested in the operation result. It does not cancel the
operation. If the server doesn't support this method, it returns
\`google.rpc.Code.UNIMPLEMENTED\`.",
            "examples": [
              {
                "path-parameters": {
                  "operationsId": "operationsId",
                },
                "response": {
                  "body": {
                    "string": {
                      "key": "value",
                    },
                  },
                },
              },
            ],
            "method": "DELETE",
            "pagination": undefined,
            "path": "/v1/operations/{operationsId}",
            "path-parameters": {
              "operationsId": {
                "docs": "Part of \`name\`. The name of the operation resource to be deleted.",
                "type": "string",
              },
            },
            "request": {
              "name": "DeleteOperationRequest",
              "query-parameters": {
                "$.xgafv": {
                  "docs": "V1 error format.",
                  "type": "optional<DeleteOperationRequestXgafv>",
                },
                "$alt": {
                  "docs": "Data format for response.",
                  "type": "optional<DeleteOperationRequestAlt>",
                },
                "$callback": {
                  "docs": "JSONP",
                  "type": "optional<string>",
                },
                "$prettyPrint": {
                  "docs": "Returns response with indentations and line breaks.",
                  "type": "optional<boolean>",
                },
              },
            },
            "response": {
              "docs": "Successful operation",
              "type": "root.Empty",
            },
          },
          "EmbedContent": {
            "auth": false,
            "docs": "Generates an embedding from the model given an input \`Content\`.",
            "examples": [
              {
                "path-parameters": {
                  "model": "model",
                },
                "request": {
                  "content": {},
                  "model": "model",
                },
                "response": {
                  "body": {
                    "embedding": {
                      "values": [
                        1.1,
                      ],
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/v1/models/{model}:embedContent",
            "path-parameters": {
              "model": "string",
            },
            "request": {
              "body": "root.EmbedContentRequest",
              "name": "EmbedContentRequest",
              "query-parameters": {
                "$.xgafv": {
                  "docs": "V1 error format.",
                  "type": "optional<EmbedContentRequestXgafv>",
                },
                "$alt": {
                  "docs": "Data format for response.",
                  "type": "optional<EmbedContentRequestAlt>",
                },
                "$callback": {
                  "docs": "JSONP",
                  "type": "optional<string>",
                },
                "$prettyPrint": {
                  "docs": "Returns response with indentations and line breaks.",
                  "type": "optional<boolean>",
                },
              },
            },
            "response": {
              "docs": "Successful operation",
              "type": "root.EmbedContentResponse",
            },
          },
          "GenerateContent": {
            "auth": false,
            "docs": "Generates a response from the model given an input
\`GenerateContentRequest\`.

Input capabilities differ between models, including tuned models. See the
[model guide](https://ai.google.dev/models/gemini) and
[tuning guide](https://ai.google.dev/docs/model_tuning_guidance) for
details.",
            "examples": [
              {
                "path-parameters": {
                  "model": "model",
                },
                "request": {
                  "contents": [
                    {},
                  ],
                  "model": "model",
                },
                "response": {
                  "body": {
                    "candidates": [
                      {
                        "finishReason": "FINISH_REASON_UNSPECIFIED",
                        "index": 1,
                        "safetyRatings": [
                          {
                            "category": "HARM_CATEGORY_UNSPECIFIED",
                            "probability": "HARM_PROBABILITY_UNSPECIFIED",
                          },
                        ],
                        "tokenCount": 1,
                      },
                    ],
                    "promptFeedback": {
                      "blockReason": "BLOCK_REASON_UNSPECIFIED",
                      "safetyRatings": [
                        {
                          "category": "HARM_CATEGORY_UNSPECIFIED",
                          "probability": "HARM_PROBABILITY_UNSPECIFIED",
                        },
                      ],
                    },
                    "usageMetadata": {
                      "candidatesTokenCount": 1,
                      "promptTokenCount": 1,
                      "totalTokenCount": 1,
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/v1/models/{model}:generateContent",
            "path-parameters": {
              "model": "string",
            },
            "request": {
              "body": "root.GenerateContentRequest",
              "name": "GenerateContentRequest",
              "query-parameters": {
                "$.xgafv": {
                  "docs": "V1 error format.",
                  "type": "optional<GenerateContentRequestXgafv>",
                },
                "$alt": {
                  "docs": "Data format for response.",
                  "type": "optional<GenerateContentRequestAlt>",
                },
                "$callback": {
                  "docs": "JSONP",
                  "type": "optional<string>",
                },
                "$prettyPrint": {
                  "docs": "Returns response with indentations and line breaks.",
                  "type": "optional<boolean>",
                },
              },
            },
            "response": {
              "docs": "Successful operation",
              "type": "root.GenerateContentResponse",
            },
          },
          "GenerateContentByTunedModel": {
            "auth": false,
            "docs": "Generates a response from the model given an input
\`GenerateContentRequest\`.

Input capabilities differ between models, including tuned models. See the
[model guide](https://ai.google.dev/models/gemini) and
[tuning guide](https://ai.google.dev/docs/model_tuning_guidance) for
details.",
            "examples": [
              {
                "path-parameters": {
                  "tunedModel": "tunedModel",
                },
                "request": {
                  "contents": [
                    {},
                  ],
                  "model": "model",
                },
                "response": {
                  "body": {
                    "candidates": [
                      {
                        "finishReason": "FINISH_REASON_UNSPECIFIED",
                        "index": 1,
                        "safetyRatings": [
                          {
                            "category": "HARM_CATEGORY_UNSPECIFIED",
                            "probability": "HARM_PROBABILITY_UNSPECIFIED",
                          },
                        ],
                        "tokenCount": 1,
                      },
                    ],
                    "promptFeedback": {
                      "blockReason": "BLOCK_REASON_UNSPECIFIED",
                      "safetyRatings": [
                        {
                          "category": "HARM_CATEGORY_UNSPECIFIED",
                          "probability": "HARM_PROBABILITY_UNSPECIFIED",
                        },
                      ],
                    },
                    "usageMetadata": {
                      "candidatesTokenCount": 1,
                      "promptTokenCount": 1,
                      "totalTokenCount": 1,
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/v1/tunedModels/{tunedModel}:generateContent",
            "path-parameters": {
              "tunedModel": "string",
            },
            "request": {
              "body": "root.GenerateContentRequest",
              "name": "GenerateContentByTunedModelRequest",
              "query-parameters": {
                "$.xgafv": {
                  "docs": "V1 error format.",
                  "type": "optional<GenerateContentByTunedModelRequestXgafv>",
                },
                "$alt": {
                  "docs": "Data format for response.",
                  "type": "optional<GenerateContentByTunedModelRequestAlt>",
                },
                "$callback": {
                  "docs": "JSONP",
                  "type": "optional<string>",
                },
                "$prettyPrint": {
                  "docs": "Returns response with indentations and line breaks.",
                  "type": "optional<boolean>",
                },
              },
            },
            "response": {
              "docs": "Successful operation",
              "type": "root.GenerateContentResponse",
            },
          },
          "GetModel": {
            "auth": false,
            "docs": "Gets information about a specific Model.",
            "examples": [
              {
                "path-parameters": {
                  "model": "model",
                },
                "response": {
                  "body": {
                    "baseModelId": "baseModelId",
                    "description": "description",
                    "displayName": "displayName",
                    "inputTokenLimit": 1,
                    "name": "name",
                    "outputTokenLimit": 1,
                    "supportedGenerationMethods": [
                      "supportedGenerationMethods",
                    ],
                    "temperature": 1.1,
                    "topK": 1,
                    "topP": 1.1,
                    "version": "version",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/v1/models/{model}",
            "path-parameters": {
              "model": "string",
            },
            "request": {
              "name": "GetModelRequest",
              "query-parameters": {
                "$.xgafv": {
                  "docs": "V1 error format.",
                  "type": "optional<GetModelRequestXgafv>",
                },
                "$alt": {
                  "docs": "Data format for response.",
                  "type": "optional<GetModelRequestAlt>",
                },
                "$callback": {
                  "docs": "JSONP",
                  "type": "optional<string>",
                },
                "$prettyPrint": {
                  "docs": "Returns response with indentations and line breaks.",
                  "type": "optional<boolean>",
                },
              },
            },
            "response": {
              "docs": "Successful operation",
              "type": "root.Model",
            },
          },
          "GetOperation": {
            "auth": false,
            "docs": "Gets the latest state of a long-running operation.  Clients can use this
method to poll the operation result at intervals as recommended by the API
service.",
            "examples": [
              {
                "path-parameters": {
                  "operation": "operation",
                  "tunedModel": "tunedModel",
                },
                "response": {
                  "body": {
                    "done": true,
                    "error": {
                      "code": 1,
                      "details": [
                        {},
                      ],
                      "message": "message",
                    },
                    "metadata": {
                      "metadata": {
                        "key": "value",
                      },
                    },
                    "name": "name",
                    "response": {
                      "response": {
                        "key": "value",
                      },
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/v1/tunedModels/{tunedModel}/operations/{operation}",
            "path-parameters": {
              "operation": "string",
              "tunedModel": "string",
            },
            "request": {
              "name": "GetOperationRequest",
              "query-parameters": {
                "$.xgafv": {
                  "docs": "V1 error format.",
                  "type": "optional<GetOperationRequestXgafv>",
                },
                "$alt": {
                  "docs": "Data format for response.",
                  "type": "optional<GetOperationRequestAlt>",
                },
                "$callback": {
                  "docs": "JSONP",
                  "type": "optional<string>",
                },
                "$prettyPrint": {
                  "docs": "Returns response with indentations and line breaks.",
                  "type": "optional<boolean>",
                },
              },
            },
            "response": {
              "docs": "Successful operation",
              "type": "root.Operation",
            },
          },
          "ListModels": {
            "auth": false,
            "docs": "Lists models available through the API.",
            "examples": [
              {
                "response": {
                  "body": {
                    "models": [
                      {
                        "baseModelId": "baseModelId",
                        "description": "description",
                        "displayName": "displayName",
                        "inputTokenLimit": 1,
                        "name": "name",
                        "outputTokenLimit": 1,
                        "supportedGenerationMethods": [
                          "supportedGenerationMethods",
                        ],
                        "temperature": 1.1,
                        "topK": 1,
                        "topP": 1.1,
                        "version": "version",
                      },
                    ],
                    "nextPageToken": "nextPageToken",
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/v1/models",
            "request": {
              "name": "ListModelsRequest",
              "query-parameters": {
                "$.xgafv": {
                  "docs": "V1 error format.",
                  "type": "optional<ListModelsRequestXgafv>",
                },
                "$alt": {
                  "docs": "Data format for response.",
                  "type": "optional<ListModelsRequestAlt>",
                },
                "$callback": {
                  "docs": "JSONP",
                  "type": "optional<string>",
                },
                "$prettyPrint": {
                  "docs": "Returns response with indentations and line breaks.",
                  "type": "optional<boolean>",
                },
                "pageSize": {
                  "docs": "The maximum number of \`Models\` to return (per page).

The service may return fewer models.
If unspecified, at most 50 models will be returned per page.
This method returns at most 1000 models per page, even if you pass a larger
page_size.",
                  "type": "optional<integer>",
                },
                "pageToken": {
                  "docs": "A page token, received from a previous \`ListModels\` call.

Provide the \`page_token\` returned by one request as an argument to the next
request to retrieve the next page.

When paginating, all other parameters provided to \`ListModels\` must match
the call that provided the page token.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Successful operation",
              "type": "root.ListModelsResponse",
            },
          },
          "ListOperations": {
            "auth": false,
            "docs": "Lists operations that match the specified filter in the request. If the
server doesn't support this method, it returns \`UNIMPLEMENTED\`.",
            "examples": [
              {
                "response": {
                  "body": {
                    "nextPageToken": "nextPageToken",
                    "operations": [
                      {
                        "done": true,
                        "name": "name",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/v1/operations",
            "request": {
              "name": "ListOperationsRequest",
              "query-parameters": {
                "$.xgafv": {
                  "docs": "V1 error format.",
                  "type": "optional<ListOperationsRequestXgafv>",
                },
                "$alt": {
                  "docs": "Data format for response.",
                  "type": "optional<ListOperationsRequestAlt>",
                },
                "$callback": {
                  "docs": "JSONP",
                  "type": "optional<string>",
                },
                "$prettyPrint": {
                  "docs": "Returns response with indentations and line breaks.",
                  "type": "optional<boolean>",
                },
                "filter": {
                  "docs": "The standard list filter.",
                  "type": "optional<string>",
                },
                "pageSize": {
                  "docs": "The standard list page size.",
                  "type": "optional<integer>",
                },
                "pageToken": {
                  "docs": "The standard list page token.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Successful operation",
              "type": "root.ListOperationsResponse",
            },
          },
          "ListOperationsByTunedModel": {
            "auth": false,
            "docs": "Lists operations that match the specified filter in the request. If the
server doesn't support this method, it returns \`UNIMPLEMENTED\`.",
            "examples": [
              {
                "path-parameters": {
                  "tunedModel": "tunedModel",
                },
                "response": {
                  "body": {
                    "nextPageToken": "nextPageToken",
                    "operations": [
                      {
                        "done": true,
                        "name": "name",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "pagination": undefined,
            "path": "/v1/tunedModels/{tunedModel}/operations",
            "path-parameters": {
              "tunedModel": "string",
            },
            "request": {
              "name": "ListOperationsByTunedModelRequest",
              "query-parameters": {
                "$.xgafv": {
                  "docs": "V1 error format.",
                  "type": "optional<ListOperationsByTunedModelRequestXgafv>",
                },
                "$alt": {
                  "docs": "Data format for response.",
                  "type": "optional<ListOperationsByTunedModelRequestAlt>",
                },
                "$callback": {
                  "docs": "JSONP",
                  "type": "optional<string>",
                },
                "$prettyPrint": {
                  "docs": "Returns response with indentations and line breaks.",
                  "type": "optional<boolean>",
                },
                "filter": {
                  "docs": "The standard list filter.",
                  "type": "optional<string>",
                },
                "pageSize": {
                  "docs": "The standard list page size.",
                  "type": "optional<integer>",
                },
                "pageToken": {
                  "docs": "The standard list page token.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Successful operation",
              "type": "root.ListOperationsResponse",
            },
          },
          "StreamGenerateContent": {
            "auth": false,
            "docs": "Generates a streamed response from the model given an input
\`GenerateContentRequest\`.",
            "examples": [
              {
                "path-parameters": {
                  "model": "model",
                },
                "request": {
                  "contents": [
                    {},
                  ],
                  "model": "model",
                },
                "response": {
                  "body": {
                    "candidates": [
                      {
                        "finishReason": "FINISH_REASON_UNSPECIFIED",
                        "index": 1,
                        "safetyRatings": [
                          {
                            "category": "HARM_CATEGORY_UNSPECIFIED",
                            "probability": "HARM_PROBABILITY_UNSPECIFIED",
                          },
                        ],
                        "tokenCount": 1,
                      },
                    ],
                    "promptFeedback": {
                      "blockReason": "BLOCK_REASON_UNSPECIFIED",
                      "safetyRatings": [
                        {
                          "category": "HARM_CATEGORY_UNSPECIFIED",
                          "probability": "HARM_PROBABILITY_UNSPECIFIED",
                        },
                      ],
                    },
                    "usageMetadata": {
                      "candidatesTokenCount": 1,
                      "promptTokenCount": 1,
                      "totalTokenCount": 1,
                    },
                  },
                },
              },
            ],
            "method": "POST",
            "pagination": undefined,
            "path": "/v1/models/{model}:streamGenerateContent",
            "path-parameters": {
              "model": "string",
            },
            "request": {
              "body": "root.GenerateContentRequest",
              "name": "StreamGenerateContentRequest",
              "query-parameters": {
                "$.xgafv": {
                  "docs": "V1 error format.",
                  "type": "optional<StreamGenerateContentRequestXgafv>",
                },
                "$alt": {
                  "docs": "Data format for response.",
                  "type": "optional<StreamGenerateContentRequestAlt>",
                },
                "$callback": {
                  "docs": "JSONP",
                  "type": "optional<string>",
                },
                "$prettyPrint": {
                  "docs": "Returns response with indentations and line breaks.",
                  "type": "optional<boolean>",
                },
              },
            },
            "response": {
              "docs": "Successful operation",
              "type": "root.GenerateContentResponse",
            },
          },
        },
      },
      "types": {
        "BatchEmbedContentsRequestAlt": {
          "enum": [
            "json",
            "media",
            "proto",
          ],
        },
        "BatchEmbedContentsRequestXgafv": {
          "enum": [
            {
              "name": "One",
              "value": "1",
            },
            {
              "name": "Two",
              "value": "2",
            },
          ],
        },
        "CancelOperationRequestAlt": {
          "enum": [
            "json",
            "media",
            "proto",
          ],
        },
        "CancelOperationRequestXgafv": {
          "enum": [
            {
              "name": "One",
              "value": "1",
            },
            {
              "name": "Two",
              "value": "2",
            },
          ],
        },
        "CountTokensRequestAlt": {
          "enum": [
            "json",
            "media",
            "proto",
          ],
        },
        "CountTokensRequestXgafv": {
          "enum": [
            {
              "name": "One",
              "value": "1",
            },
            {
              "name": "Two",
              "value": "2",
            },
          ],
        },
        "DeleteOperationRequestAlt": {
          "enum": [
            "json",
            "media",
            "proto",
          ],
        },
        "DeleteOperationRequestXgafv": {
          "enum": [
            {
              "name": "One",
              "value": "1",
            },
            {
              "name": "Two",
              "value": "2",
            },
          ],
        },
        "EmbedContentRequestAlt": {
          "enum": [
            "json",
            "media",
            "proto",
          ],
        },
        "EmbedContentRequestXgafv": {
          "enum": [
            {
              "name": "One",
              "value": "1",
            },
            {
              "name": "Two",
              "value": "2",
            },
          ],
        },
        "GenerateContentByTunedModelRequestAlt": {
          "enum": [
            "json",
            "media",
            "proto",
          ],
        },
        "GenerateContentByTunedModelRequestXgafv": {
          "enum": [
            {
              "name": "One",
              "value": "1",
            },
            {
              "name": "Two",
              "value": "2",
            },
          ],
        },
        "GenerateContentRequestAlt": {
          "enum": [
            "json",
            "media",
            "proto",
          ],
        },
        "GenerateContentRequestXgafv": {
          "enum": [
            {
              "name": "One",
              "value": "1",
            },
            {
              "name": "Two",
              "value": "2",
            },
          ],
        },
        "GetModelRequestAlt": {
          "enum": [
            "json",
            "media",
            "proto",
          ],
        },
        "GetModelRequestXgafv": {
          "enum": [
            {
              "name": "One",
              "value": "1",
            },
            {
              "name": "Two",
              "value": "2",
            },
          ],
        },
        "GetOperationRequestAlt": {
          "enum": [
            "json",
            "media",
            "proto",
          ],
        },
        "GetOperationRequestXgafv": {
          "enum": [
            {
              "name": "One",
              "value": "1",
            },
            {
              "name": "Two",
              "value": "2",
            },
          ],
        },
        "ListModelsRequestAlt": {
          "enum": [
            "json",
            "media",
            "proto",
          ],
        },
        "ListModelsRequestXgafv": {
          "enum": [
            {
              "name": "One",
              "value": "1",
            },
            {
              "name": "Two",
              "value": "2",
            },
          ],
        },
        "ListOperationsByTunedModelRequestAlt": {
          "enum": [
            "json",
            "media",
            "proto",
          ],
        },
        "ListOperationsByTunedModelRequestXgafv": {
          "enum": [
            {
              "name": "One",
              "value": "1",
            },
            {
              "name": "Two",
              "value": "2",
            },
          ],
        },
        "ListOperationsRequestAlt": {
          "enum": [
            "json",
            "media",
            "proto",
          ],
        },
        "ListOperationsRequestXgafv": {
          "enum": [
            {
              "name": "One",
              "value": "1",
            },
            {
              "name": "Two",
              "value": "2",
            },
          ],
        },
        "StreamGenerateContentRequestAlt": {
          "enum": [
            "json",
            "media",
            "proto",
          ],
        },
        "StreamGenerateContentRequestXgafv": {
          "enum": [
            {
              "name": "One",
              "value": "1",
            },
            {
              "name": "Two",
              "value": "2",
            },
          ],
        },
      },
    },
  },
  "packageMarkerFile": {
    "types": {
      "BaseOperation": {
        "docs": "This resource represents a long-running operation that is the result of a
network API call.",
        "properties": {
          "done": {
            "default": undefined,
            "docs": "If the value is \`false\`, it means the operation is still in progress.
If \`true\`, the operation is completed, and either \`error\` or \`response\` is
available.",
            "type": "optional<boolean>",
            "validation": undefined,
          },
          "error": {
            "default": undefined,
            "docs": "The error result of the operation in case of failure or cancellation.",
            "type": "optional<Status>",
            "validation": undefined,
          },
          "name": {
            "default": undefined,
            "docs": "The server-assigned name, which is only unique within the same service that
originally returns it. If you use the default HTTP mapping, the
\`name\` should be a resource name ending with \`operations/{unique_id}\`.",
            "type": "optional<string>",
            "validation": undefined,
          },
        },
      },
      "BatchEmbedContentsResponse": {
        "docs": "The response to a \`BatchEmbedContentsRequest\`.",
        "properties": {
          "embeddings": {
            "default": undefined,
            "docs": "Output only. The embeddings for each request, in the same order as provided in the batch
request.",
            "type": "optional<list<ContentEmbedding>>",
            "validation": undefined,
          },
        },
      },
      "Blob": {
        "docs": "Raw media bytes.

Text should not be sent as raw bytes, use the 'text' field.",
        "properties": {
          "data": {
            "default": undefined,
            "docs": "Raw bytes for media formats.",
            "type": "optional<string>",
            "validation": {
              "format": "byte",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "mimeType": {
            "default": undefined,
            "docs": "The IANA standard MIME type of the source data.
Examples:
  - image/png
  - image/jpeg
If an unsupported MIME type is provided, an error will be returned. For a
complete list of supported types, see [Supported file
formats](https://ai.google.dev/gemini-api/docs/prompting_with_media#supported_file_formats).",
            "type": "optional<string>",
            "validation": undefined,
          },
        },
      },
      "CancelOperationRequest": {
        "docs": "The request message for Operations.CancelOperation.",
        "type": "map<string, unknown>",
      },
      "Candidate": {
        "docs": "A response candidate generated from the model.",
        "properties": {
          "citationMetadata": {
            "default": undefined,
            "docs": "Output only. Citation information for model-generated candidate.

This field may be populated with recitation information for any text
included in the \`content\`. These are passages that are "recited" from
copyrighted material in the foundational LLM's training data.",
            "type": "optional<CitationMetadata>",
            "validation": undefined,
          },
          "content": {
            "default": undefined,
            "docs": "Output only. Generated content returned from the model.",
            "type": "optional<Content>",
            "validation": undefined,
          },
          "finishReason": {
            "default": undefined,
            "docs": "Optional. Output only. The reason why the model stopped generating tokens.

If empty, the model has not stopped generating the tokens.",
            "type": "optional<CandidateFinishReason>",
            "validation": undefined,
          },
          "index": {
            "default": undefined,
            "docs": "Output only. Index of the candidate in the list of candidates.",
            "type": "optional<integer>",
            "validation": undefined,
          },
          "safetyRatings": {
            "default": undefined,
            "docs": "List of ratings for the safety of a response candidate.

There is at most one rating per category.",
            "type": "optional<list<SafetyRating>>",
            "validation": undefined,
          },
          "tokenCount": {
            "default": undefined,
            "docs": "Output only. Token count for this candidate.",
            "type": "optional<integer>",
            "validation": undefined,
          },
        },
      },
      "CandidateFinishReason": {
        "docs": "Optional. Output only. The reason why the model stopped generating tokens.

If empty, the model has not stopped generating the tokens.",
        "enum": [
          "FINISH_REASON_UNSPECIFIED",
          "STOP",
          "MAX_TOKENS",
          "SAFETY",
          "RECITATION",
          "OTHER",
        ],
      },
      "CitationMetadata": {
        "docs": "A collection of source attributions for a piece of content.",
        "properties": {
          "citationSources": {
            "default": undefined,
            "docs": "Citations to sources for a specific response.",
            "type": "optional<list<CitationSource>>",
            "validation": undefined,
          },
        },
      },
      "CitationSource": {
        "docs": "A citation to a source for a portion of a specific response.",
        "properties": {
          "endIndex": {
            "default": undefined,
            "docs": "Optional. End of the attributed segment, exclusive.",
            "type": "optional<integer>",
            "validation": undefined,
          },
          "license": {
            "default": undefined,
            "docs": "Optional. License for the GitHub project that is attributed as a source for segment.

License info is required for code citations.",
            "type": "optional<string>",
            "validation": undefined,
          },
          "startIndex": {
            "default": undefined,
            "docs": "Optional. Start of segment of the response that is attributed to this source.

Index indicates the start of the segment, measured in bytes.",
            "type": "optional<integer>",
            "validation": undefined,
          },
          "uri": {
            "default": undefined,
            "docs": "Optional. URI that is attributed as a source for a portion of the text.",
            "type": "optional<string>",
            "validation": undefined,
          },
        },
      },
      "Content": {
        "docs": "The base structured datatype containing multi-part content of a message.

A \`Content\` includes a \`role\` field designating the producer of the \`Content\`
and a \`parts\` field containing multi-part data that contains the content of
the message turn.",
        "properties": {
          "parts": {
            "default": undefined,
            "docs": "Ordered \`Parts\` that constitute a single message. Parts may have different
MIME types.",
            "type": "optional<list<Part>>",
            "validation": undefined,
          },
          "role": {
            "default": undefined,
            "docs": "Optional. The producer of the content. Must be either 'user' or 'model'.

Useful to set for multi-turn conversations, otherwise can be left blank
or unset.",
            "type": "optional<string>",
            "validation": undefined,
          },
        },
      },
      "ContentEmbedding": {
        "docs": "A list of floats representing an embedding.",
        "properties": {
          "values": {
            "default": undefined,
            "docs": "The embedding values.",
            "type": "optional<list<double>>",
            "validation": undefined,
          },
        },
      },
      "CountTokensResponse": {
        "docs": "A response from \`CountTokens\`.

It returns the model's \`token_count\` for the \`prompt\`.",
        "properties": {
          "totalTokens": {
            "default": undefined,
            "docs": "The number of tokens that the \`model\` tokenizes the \`prompt\` into.

Always non-negative.",
            "type": "optional<integer>",
            "validation": undefined,
          },
        },
      },
      "CreateTunedModelMetadata": {
        "docs": "Metadata about the state and progress of creating a tuned model returned from
the long-running operation",
        "properties": {
          "completedPercent": {
            "default": undefined,
            "docs": "The completed percentage for the tuning operation.",
            "type": "optional<double>",
            "validation": undefined,
          },
          "completedSteps": {
            "default": undefined,
            "docs": "The number of steps completed.",
            "type": "optional<integer>",
            "validation": undefined,
          },
          "snapshots": {
            "default": undefined,
            "docs": "Metrics collected during tuning.",
            "type": "optional<list<TuningSnapshot>>",
            "validation": undefined,
          },
          "totalSteps": {
            "default": undefined,
            "docs": "The total number of tuning steps.",
            "type": "optional<integer>",
            "validation": undefined,
          },
          "tunedModel": {
            "default": undefined,
            "docs": "Name of the tuned model associated with the tuning operation.",
            "type": "optional<string>",
            "validation": undefined,
          },
        },
      },
      "EmbedContentRequest": {
        "docs": "Request containing the \`Content\` for the model to embed.",
        "properties": {
          "content": {
            "docs": "Required. The content to embed. Only the \`parts.text\` fields will be counted.",
            "type": "Content",
          },
          "model": {
            "docs": "Required. The model's resource name. This serves as an ID for the Model to use.

This name should match a model name returned by the \`ListModels\` method.

Format: \`models/{model}\`",
            "type": "string",
          },
          "outputDimensionality": {
            "default": undefined,
            "docs": "Optional. Optional reduced dimension for the output embedding. If set, excessive
values in the output embedding are truncated from the end. Supported by
newer models since 2024, and the earlier model (\`models/embedding-001\`)
cannot specify this value.",
            "type": "optional<integer>",
            "validation": undefined,
          },
          "taskType": {
            "default": undefined,
            "docs": "Optional. Optional task type for which the embeddings will be used. Can only be set
for \`models/embedding-001\`.",
            "type": "optional<EmbedContentRequestTaskType>",
            "validation": undefined,
          },
          "title": {
            "default": undefined,
            "docs": "Optional. An optional title for the text. Only applicable when TaskType is
\`RETRIEVAL_DOCUMENT\`.

Note: Specifying a \`title\` for \`RETRIEVAL_DOCUMENT\` provides better quality
embeddings for retrieval.",
            "type": "optional<string>",
            "validation": undefined,
          },
        },
      },
      "EmbedContentRequestTaskType": {
        "docs": "Optional. Optional task type for which the embeddings will be used. Can only be set
for \`models/embedding-001\`.",
        "enum": [
          "TASK_TYPE_UNSPECIFIED",
          "RETRIEVAL_QUERY",
          "RETRIEVAL_DOCUMENT",
          "SEMANTIC_SIMILARITY",
          "CLASSIFICATION",
          "CLUSTERING",
          "QUESTION_ANSWERING",
          "FACT_VERIFICATION",
        ],
      },
      "EmbedContentResponse": {
        "docs": "The response to an \`EmbedContentRequest\`.",
        "properties": {
          "embedding": {
            "default": undefined,
            "docs": "Output only. The embedding generated from the input content.",
            "type": "optional<ContentEmbedding>",
            "validation": undefined,
          },
        },
      },
      "Empty": {
        "docs": "A generic empty message that you can re-use to avoid defining duplicated
empty messages in your APIs. A typical example is to use it as the request
or the response type of an API method. For instance:

    service Foo {
      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
    }",
        "type": "map<string, unknown>",
      },
      "GenerateContentRequest": {
        "docs": "Request to generate a completion from the model.",
        "properties": {
          "contents": {
            "docs": "Required. The content of the current conversation with the model.

For single-turn queries, this is a single instance. For multi-turn queries,
this is a repeated field that contains conversation history + latest
request.",
            "type": "list<Content>",
          },
          "generationConfig": {
            "default": undefined,
            "docs": "Optional. Configuration options for model generation and outputs.",
            "type": "optional<GenerationConfig>",
            "validation": undefined,
          },
          "model": {
            "docs": "Required. The name of the \`Model\` to use for generating the completion.

Format: \`name=models/{model}\`.",
            "type": "string",
          },
          "safetySettings": {
            "default": undefined,
            "docs": "Optional. A list of unique \`SafetySetting\` instances for blocking unsafe content.

This will be enforced on the \`GenerateContentRequest.contents\` and
\`GenerateContentResponse.candidates\`. There should not be more than one
setting for each \`SafetyCategory\` type. The API will block any contents and
responses that fail to meet the thresholds set by these settings. This list
overrides the default settings for each \`SafetyCategory\` specified in the
safety_settings. If there is no \`SafetySetting\` for a given
\`SafetyCategory\` provided in the list, the API will use the default safety
setting for that category. Harm categories HARM_CATEGORY_HATE_SPEECH,
HARM_CATEGORY_SEXUALLY_EXPLICIT, HARM_CATEGORY_DANGEROUS_CONTENT,
HARM_CATEGORY_HARASSMENT are supported.",
            "type": "optional<list<SafetySetting>>",
            "validation": undefined,
          },
        },
      },
      "GenerateContentResponse": {
        "docs": "Response from the model supporting multiple candidates.

Note on safety ratings and content filtering. They are reported for both
prompt in \`GenerateContentResponse.prompt_feedback\` and for each candidate
in \`finish_reason\` and in \`safety_ratings\`. The API contract is that:
 - either all requested candidates are returned or no candidates at all
 - no candidates are returned only if there was something wrong with the
   prompt (see \`prompt_feedback\`)
 - feedback on each candidate is reported on \`finish_reason\` and
   \`safety_ratings\`.",
        "properties": {
          "candidates": {
            "default": undefined,
            "docs": "Candidate responses from the model.",
            "type": "optional<list<Candidate>>",
            "validation": undefined,
          },
          "promptFeedback": {
            "default": undefined,
            "docs": "Returns the prompt's feedback related to the content filters.",
            "type": "optional<PromptFeedback>",
            "validation": undefined,
          },
          "usageMetadata": {
            "default": undefined,
            "docs": "Output only. Metadata on the generation requests' token usage.",
            "type": "optional<UsageMetadata>",
            "validation": undefined,
          },
        },
      },
      "GenerationConfig": {
        "docs": "Configuration options for model generation and outputs. Not all parameters
may be configurable for every model.",
        "properties": {
          "candidateCount": {
            "default": undefined,
            "docs": "Optional. Number of generated responses to return.

Currently, this value can only be set to 1. If unset, this will default
to 1.",
            "type": "optional<integer>",
            "validation": undefined,
          },
          "maxOutputTokens": {
            "default": undefined,
            "docs": "Optional. The maximum number of tokens to include in a candidate.

Note: The default value varies by model, see the \`Model.output_token_limit\`
attribute of the \`Model\` returned from the \`getModel\` function.",
            "type": "optional<integer>",
            "validation": undefined,
          },
          "stopSequences": {
            "default": undefined,
            "docs": "Optional. The set of character sequences (up to 5) that will stop output generation.
If specified, the API will stop at the first appearance of a stop
sequence. The stop sequence will not be included as part of the response.",
            "type": "optional<list<string>>",
            "validation": undefined,
          },
          "temperature": {
            "default": undefined,
            "docs": "Optional. Controls the randomness of the output.

Note: The default value varies by model, see the \`Model.temperature\`
attribute of the \`Model\` returned from the \`getModel\` function.

Values can range from [0.0, 2.0].",
            "type": "optional<double>",
            "validation": undefined,
          },
          "topK": {
            "default": undefined,
            "docs": "Optional. The maximum number of tokens to consider when sampling.

Models use nucleus sampling or combined Top-k and nucleus sampling.
Top-k sampling considers the set of \`top_k\` most probable tokens.
Models running with nucleus sampling don't allow top_k setting.

Note: The default value varies by model, see the \`Model.top_k\`
attribute of the \`Model\` returned from the \`getModel\` function. Empty
\`top_k\` field in \`Model\` indicates the model doesn't apply top-k sampling
and doesn't allow setting \`top_k\` on requests.",
            "type": "optional<integer>",
            "validation": undefined,
          },
          "topP": {
            "default": undefined,
            "docs": "Optional. The maximum cumulative probability of tokens to consider when sampling.

The model uses combined Top-k and nucleus sampling.

Tokens are sorted based on their assigned probabilities so that only the
most likely tokens are considered. Top-k sampling directly limits the
maximum number of tokens to consider, while Nucleus sampling limits number
of tokens based on the cumulative probability.

Note: The default value varies by model, see the \`Model.top_p\`
attribute of the \`Model\` returned from the \`getModel\` function.",
            "type": "optional<double>",
            "validation": undefined,
          },
        },
      },
      "ListModelsResponse": {
        "docs": "Response from \`ListModel\` containing a paginated list of Models.",
        "properties": {
          "models": {
            "default": undefined,
            "docs": "The returned Models.",
            "type": "optional<list<Model>>",
            "validation": undefined,
          },
          "nextPageToken": {
            "default": undefined,
            "docs": "A token, which can be sent as \`page_token\` to retrieve the next page.

If this field is omitted, there are no more pages.",
            "type": "optional<string>",
            "validation": undefined,
          },
        },
      },
      "ListOperationsResponse": {
        "docs": "The response message for Operations.ListOperations.",
        "properties": {
          "nextPageToken": {
            "default": undefined,
            "docs": "The standard List next-page token.",
            "type": "optional<string>",
            "validation": undefined,
          },
          "operations": {
            "default": undefined,
            "docs": "A list of operations that matches the specified filter in the request.",
            "type": "optional<list<Operation>>",
            "validation": undefined,
          },
        },
      },
      "Model": {
        "docs": "Information about a Generative Language Model.",
        "properties": {
          "baseModelId": {
            "docs": "Required. The name of the base model, pass this to the generation request.

Examples:

* \`chat-bison\`",
            "type": "string",
          },
          "description": {
            "default": undefined,
            "docs": "A short description of the model.",
            "type": "optional<string>",
            "validation": undefined,
          },
          "displayName": {
            "default": undefined,
            "docs": "The human-readable name of the model. E.g. "Chat Bison".

The name can be up to 128 characters long and can consist of any UTF-8
characters.",
            "type": "optional<string>",
            "validation": undefined,
          },
          "inputTokenLimit": {
            "default": undefined,
            "docs": "Maximum number of input tokens allowed for this model.",
            "type": "optional<integer>",
            "validation": undefined,
          },
          "name": {
            "docs": "Required. The resource name of the \`Model\`.

Format: \`models/{model}\` with a \`{model}\` naming convention of:

* "{base_model_id}-{version}"

Examples:

* \`models/chat-bison-001\`",
            "type": "string",
          },
          "outputTokenLimit": {
            "default": undefined,
            "docs": "Maximum number of output tokens available for this model.",
            "type": "optional<integer>",
            "validation": undefined,
          },
          "supportedGenerationMethods": {
            "default": undefined,
            "docs": "The model's supported generation methods.

The method names are defined as Pascal case
strings, such as \`generateMessage\` which correspond to API methods.",
            "type": "optional<list<string>>",
            "validation": undefined,
          },
          "temperature": {
            "default": undefined,
            "docs": "Controls the randomness of the output.

Values can range over \`[0.0,1.0]\`, inclusive. A value closer to \`1.0\` will
produce responses that are more varied, while a value closer to \`0.0\` will
typically result in less surprising responses from the model.
This value specifies default to be used by the backend while making the
call to the model.",
            "type": "optional<double>",
            "validation": undefined,
          },
          "topK": {
            "default": undefined,
            "docs": "For Top-k sampling.

Top-k sampling considers the set of \`top_k\` most probable tokens.
This value specifies default to be used by the backend while making the
call to the model.
If empty, indicates the model doesn't use top-k sampling, and \`top_k\` isn't
allowed as a generation parameter.",
            "type": "optional<integer>",
            "validation": undefined,
          },
          "topP": {
            "default": undefined,
            "docs": "For Nucleus sampling.

Nucleus sampling considers the smallest set of tokens whose probability
sum is at least \`top_p\`.
This value specifies default to be used by the backend while making the
call to the model.",
            "type": "optional<double>",
            "validation": undefined,
          },
          "version": {
            "docs": "Required. The version number of the model.

This represents the major version",
            "type": "string",
          },
        },
      },
      "Operation": {
        "docs": "This resource represents a long-running operation that is the result of a
network API call.",
        "extends": [
          "BaseOperation",
        ],
        "properties": {
          "metadata": {
            "default": undefined,
            "docs": "Service-specific metadata associated with the operation.  It typically
contains progress information and common metadata such as create time.
Some services might not provide such metadata.  Any method that returns a
long-running operation should document the metadata type, if any.",
            "type": "optional<map<string, unknown>>",
            "validation": undefined,
          },
          "response": {
            "default": undefined,
            "docs": "The normal, successful response of the operation.  If the original
method returns no data on success, such as \`Delete\`, the response is
\`google.protobuf.Empty\`.  If the original method is standard
\`Get\`/\`Create\`/\`Update\`, the response should be the resource.  For other
methods, the response should have the type \`XxxResponse\`, where \`Xxx\`
is the original method name.  For example, if the original method name
is \`TakeSnapshot()\`, the inferred response type is
\`TakeSnapshotResponse\`.",
            "type": "optional<map<string, unknown>>",
            "validation": undefined,
          },
        },
      },
      "Part": {
        "docs": "A datatype containing media that is part of a multi-part \`Content\` message.

A \`Part\` consists of data which has an associated datatype. A \`Part\` can only
contain one of the accepted types in \`Part.data\`.

A \`Part\` must have a fixed IANA MIME type identifying the type and subtype
of the media if the \`inline_data\` field is filled with raw bytes.",
        "properties": {
          "inlineData": {
            "default": undefined,
            "docs": "Inline media bytes.",
            "type": "optional<Blob>",
            "validation": undefined,
          },
          "text": {
            "default": undefined,
            "docs": "Inline text.",
            "type": "optional<string>",
            "validation": undefined,
          },
        },
      },
      "PromptFeedback": {
        "docs": "A set of the feedback metadata the prompt specified in
\`GenerateContentRequest.content\`.",
        "properties": {
          "blockReason": {
            "default": undefined,
            "docs": "Optional. If set, the prompt was blocked and no candidates are returned.
Rephrase your prompt.",
            "type": "optional<PromptFeedbackBlockReason>",
            "validation": undefined,
          },
          "safetyRatings": {
            "default": undefined,
            "docs": "Ratings for safety of the prompt.
There is at most one rating per category.",
            "type": "optional<list<SafetyRating>>",
            "validation": undefined,
          },
        },
      },
      "PromptFeedbackBlockReason": {
        "docs": "Optional. If set, the prompt was blocked and no candidates are returned.
Rephrase your prompt.",
        "enum": [
          "BLOCK_REASON_UNSPECIFIED",
          "SAFETY",
          "OTHER",
        ],
      },
      "SafetyRating": {
        "docs": "Safety rating for a piece of content.

The safety rating contains the category of harm and the
harm probability level in that category for a piece of content.
Content is classified for safety across a number of
harm categories and the probability of the harm classification is included
here.",
        "properties": {
          "blocked": {
            "default": undefined,
            "docs": "Was this content blocked because of this rating?",
            "type": "optional<boolean>",
            "validation": undefined,
          },
          "category": {
            "docs": "Required. The category for this rating.",
            "type": "SafetyRatingCategory",
          },
          "probability": {
            "docs": "Required. The probability of harm for this content.",
            "type": "SafetyRatingProbability",
          },
        },
      },
      "SafetyRatingCategory": {
        "docs": "Required. The category for this rating.",
        "enum": [
          "HARM_CATEGORY_UNSPECIFIED",
          "HARM_CATEGORY_DEROGATORY",
          "HARM_CATEGORY_TOXICITY",
          "HARM_CATEGORY_VIOLENCE",
          "HARM_CATEGORY_SEXUAL",
          "HARM_CATEGORY_MEDICAL",
          "HARM_CATEGORY_DANGEROUS",
          "HARM_CATEGORY_HARASSMENT",
          "HARM_CATEGORY_HATE_SPEECH",
          "HARM_CATEGORY_SEXUALLY_EXPLICIT",
          "HARM_CATEGORY_DANGEROUS_CONTENT",
        ],
      },
      "SafetyRatingProbability": {
        "docs": "Required. The probability of harm for this content.",
        "enum": [
          "HARM_PROBABILITY_UNSPECIFIED",
          "NEGLIGIBLE",
          "LOW",
          "MEDIUM",
          "HIGH",
        ],
      },
      "SafetySetting": {
        "docs": "Safety setting, affecting the safety-blocking behavior.

Passing a safety setting for a category changes the allowed probability that
content is blocked.",
        "properties": {
          "category": {
            "docs": "Required. The category for this setting.",
            "type": "SafetySettingCategory",
          },
          "threshold": {
            "docs": "Required. Controls the probability threshold at which harm is blocked.",
            "type": "SafetySettingThreshold",
          },
        },
      },
      "SafetySettingCategory": {
        "docs": "Required. The category for this setting.",
        "enum": [
          "HARM_CATEGORY_UNSPECIFIED",
          "HARM_CATEGORY_DEROGATORY",
          "HARM_CATEGORY_TOXICITY",
          "HARM_CATEGORY_VIOLENCE",
          "HARM_CATEGORY_SEXUAL",
          "HARM_CATEGORY_MEDICAL",
          "HARM_CATEGORY_DANGEROUS",
          "HARM_CATEGORY_HARASSMENT",
          "HARM_CATEGORY_HATE_SPEECH",
          "HARM_CATEGORY_SEXUALLY_EXPLICIT",
          "HARM_CATEGORY_DANGEROUS_CONTENT",
        ],
      },
      "SafetySettingThreshold": {
        "docs": "Required. Controls the probability threshold at which harm is blocked.",
        "enum": [
          "HARM_BLOCK_THRESHOLD_UNSPECIFIED",
          "BLOCK_LOW_AND_ABOVE",
          "BLOCK_MEDIUM_AND_ABOVE",
          "BLOCK_ONLY_HIGH",
          "BLOCK_NONE",
        ],
      },
      "Status": {
        "docs": "The \`Status\` type defines a logical error model that is suitable for
different programming environments, including REST APIs and RPC APIs. It is
used by [gRPC](https://github.com/grpc). Each \`Status\` message contains
three pieces of data: error code, error message, and error details.

You can find out more about this error model and how to work with it in the
[API Design Guide](https://cloud.google.com/apis/design/errors).",
        "properties": {
          "code": {
            "default": undefined,
            "docs": "The status code, which should be an enum value of google.rpc.Code.",
            "type": "optional<integer>",
            "validation": undefined,
          },
          "details": {
            "default": undefined,
            "docs": "A list of messages that carry the error details.  There is a common set of
message types for APIs to use.",
            "type": "optional<list<map<string, unknown>>>",
            "validation": undefined,
          },
          "message": {
            "default": undefined,
            "docs": "A developer-facing error message, which should be in English. Any
user-facing error message should be localized and sent in the
google.rpc.Status.details field, or localized by the client.",
            "type": "optional<string>",
            "validation": undefined,
          },
        },
      },
      "TuningSnapshot": {
        "docs": "Record for a single tuning step.",
        "properties": {
          "computeTime": {
            "default": undefined,
            "docs": "Output only. The timestamp when this metric was computed.",
            "type": "optional<datetime>",
            "validation": undefined,
          },
          "epoch": {
            "default": undefined,
            "docs": "Output only. The epoch this step was part of.",
            "type": "optional<integer>",
            "validation": undefined,
          },
          "meanLoss": {
            "default": undefined,
            "docs": "Output only. The mean loss of the training examples for this step.",
            "type": "optional<double>",
            "validation": undefined,
          },
          "step": {
            "default": undefined,
            "docs": "Output only. The tuning step.",
            "type": "optional<integer>",
            "validation": undefined,
          },
        },
      },
      "UsageMetadata": {
        "docs": "Metadata on the generation request's token usage.",
        "properties": {
          "candidatesTokenCount": {
            "default": undefined,
            "docs": "Total number of tokens across the generated candidates.",
            "type": "optional<integer>",
            "validation": undefined,
          },
          "promptTokenCount": {
            "default": undefined,
            "docs": "Number of tokens in the prompt.",
            "type": "optional<integer>",
            "validation": undefined,
          },
          "totalTokenCount": {
            "default": undefined,
            "docs": "Total token count for the generation request (prompt + candidates).",
            "type": "optional<integer>",
            "validation": undefined,
          },
        },
      },
    },
  },
  "rootApiFile": {
    "default-environment": "Default",
    "display-name": "Generative Language API",
    "environments": {
      "Default": "https://generativelanguage.googleapis.com",
    },
    "error-discrimination": {
      "strategy": "status-code",
    },
    "name": "api",
  },
}
`;
