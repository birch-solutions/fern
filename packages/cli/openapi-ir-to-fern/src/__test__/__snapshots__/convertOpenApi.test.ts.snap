// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`open api converter axle simple 1`] = `
{
  "definitionFiles": {
    "__package__.yml": {
      "errors": {},
      "service": undefined,
      "types": {
        "Account": {
          "docs": "An Account represents an account with an insurance carrier and includes high-level account information (e.g. name) and any Policy objects associated with the Account.",
          "properties": {
            "carrier": {
              "docs": undefined,
              "type": "string",
            },
            "createdAt": {
              "docs": undefined,
              "type": "string",
            },
            "email": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "firstName": {
              "docs": undefined,
              "type": "string",
            },
            "id": {
              "docs": undefined,
              "type": "string",
            },
            "lastName": {
              "docs": undefined,
              "type": "string",
            },
            "modifiedAt": {
              "docs": undefined,
              "type": "string",
            },
            "phone": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "policies": {
              "docs": undefined,
              "type": "list<string>",
            },
            "refreshedAt": {
              "docs": undefined,
              "type": "string",
            },
          },
        },
        "Address": {
          "docs": undefined,
          "properties": {
            "addressLine1": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "addressLine2": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "city": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "country": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "postalCode": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "state": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "Carrier": {
          "docs": undefined,
          "properties": {
            "address": {
              "docs": undefined,
              "type": "Address",
            },
            "domain": {
              "docs": undefined,
              "type": "string",
            },
            "id": {
              "docs": undefined,
              "type": "string",
            },
            "logoUrl": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "modifiedAt": {
              "docs": undefined,
              "type": "string",
            },
            "name": {
              "docs": undefined,
              "type": "string",
            },
            "phone": {
              "docs": undefined,
              "type": "string",
            },
          },
        },
        "Coverage": {
          "docs": undefined,
          "properties": {
            "code": {
              "docs": undefined,
              "type": "CoverageCode",
            },
            "deductible": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "label": {
              "docs": undefined,
              "type": "string",
            },
            "limitPerAccident": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "limitPerPerson": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "property": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "CoverageCode": {
          "docs": undefined,
          "enum": [
            {
              "name": "BI",
              "value": "BI",
            },
            {
              "name": "PD",
              "value": "PD",
            },
            {
              "name": "UMBI",
              "value": "UMBI",
            },
            {
              "name": "UMPD",
              "value": "UMPD",
            },
            {
              "name": "UIMBI",
              "value": "UIMBI",
            },
            {
              "name": "UIMPD",
              "value": "UIMPD",
            },
            {
              "name": "COLL",
              "value": "COLL",
            },
            {
              "name": "COMP",
              "value": "COMP",
            },
          ],
        },
        "Error": {
          "docs": undefined,
          "properties": {
            "message": {
              "docs": "Provides a reason for why the operation failed, if available.",
              "type": "optional<string>",
            },
            "success": {
              "docs": undefined,
              "type": "optional<Success>",
            },
          },
        },
        "ExchangeTokenResponse": {
          "docs": "",
          "properties": {
            "data": {
              "docs": undefined,
              "type": "ExchangeTokenResponseData",
            },
            "success": {
              "docs": undefined,
              "type": "Success",
            },
          },
        },
        "ExchangeTokenResponseData": {
          "docs": undefined,
          "properties": {
            "accessToken": {
              "docs": "The token required for access to the requested Account and Policy objects.",
              "type": "string",
            },
            "account": {
              "docs": "The unique id for the Account object.",
              "type": "string",
            },
            "policies": {
              "docs": "List of unique ids for the Policy objects. If Ignition is configured to select a single policy (as is the default), the list will only contain 1 item.",
              "type": "list<unknown>",
            },
          },
        },
        "GetAccountResponse": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "optional<Account>",
            },
            "success": {
              "docs": undefined,
              "type": "optional<Success>",
            },
          },
        },
        "GetCarrierResponse": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "optional<Carrier>",
            },
            "success": {
              "docs": undefined,
              "type": "optional<Success>",
            },
          },
        },
        "GetCarriersResponse": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "optional<list<Carrier>>",
            },
            "success": {
              "docs": undefined,
              "type": "optional<Success>",
            },
          },
        },
        "GetPolicyResponse": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "optional<Policy>",
            },
            "success": {
              "docs": undefined,
              "type": "optional<Success>",
            },
          },
        },
        "Insured": {
          "docs": undefined,
          "properties": {
            "dateOfBirth": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "dateOfBirthYear": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "firstName": {
              "docs": undefined,
              "type": "string",
            },
            "lastName": {
              "docs": undefined,
              "type": "string",
            },
            "licenseNo": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "licenseState": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "licenseStatus": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "property": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "type": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "Policy": {
          "docs": "A Policy represents a specific policy associated with an Account and includes high-level policy information (e.g. policy number) and any children objects (e.g., coverages) associated with the policy.",
          "properties": {
            "account": {
              "docs": undefined,
              "type": "string",
            },
            "address": {
              "docs": undefined,
              "type": "Address",
            },
            "carrier": {
              "docs": undefined,
              "type": "string",
            },
            "coverages": {
              "docs": "",
              "type": "list<Coverage>",
            },
            "createdAt": {
              "docs": undefined,
              "type": "string",
            },
            "effectiveDate": {
              "docs": undefined,
              "type": "string",
            },
            "expirationDate": {
              "docs": undefined,
              "type": "string",
            },
            "id": {
              "docs": undefined,
              "type": "string",
            },
            "insureds": {
              "docs": "",
              "type": "list<Insured>",
            },
            "isActive": {
              "docs": undefined,
              "type": "boolean",
            },
            "modifiedAt": {
              "docs": undefined,
              "type": "string",
            },
            "policyNumber": {
              "docs": undefined,
              "type": "string",
            },
            "properties": {
              "docs": "",
              "type": "list<Property>",
            },
            "refreshedAt": {
              "docs": undefined,
              "type": "string",
            },
            "thirdParties": {
              "docs": "",
              "type": "list<ThirdParty>",
            },
            "type": {
              "docs": undefined,
              "type": "PolicyType",
            },
          },
        },
        "PolicyType": {
          "docs": undefined,
          "enum": [
            {
              "name": "auto",
              "value": "auto",
            },
            {
              "name": "motorcycle",
              "value": "motorcycle",
            },
          ],
        },
        "Property": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "Vehicle",
            },
            "id": {
              "docs": undefined,
              "type": "string",
            },
            "type": {
              "docs": undefined,
              "type": "PropertyType",
            },
          },
        },
        "PropertyType": {
          "docs": undefined,
          "enum": [
            {
              "name": "vehicle",
              "value": "vehicle",
            },
          ],
        },
        "StartIgnitionResponse": {
          "docs": "",
          "properties": {
            "data": {
              "docs": undefined,
              "type": "StartIgnitionResponseData",
            },
            "success": {
              "docs": undefined,
              "type": "Success",
            },
          },
        },
        "StartIgnitionResponseData": {
          "docs": undefined,
          "properties": {
            "ignitionToken": {
              "docs": "The unique ID for the ignition session.",
              "type": "string",
            },
            "ignitionUri": {
              "docs": "The url you should direct the user to to link their account.",
              "type": "string",
            },
          },
        },
        "Success": {
          "docs": "Indicates whether the operation was performed successfully.",
          "type": "boolean",
        },
        "ThirdParty": {
          "docs": undefined,
          "properties": {
            "address": {
              "docs": undefined,
              "type": "optional<Address>",
            },
            "name": {
              "docs": undefined,
              "type": "string",
            },
            "property": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "type": {
              "docs": undefined,
              "type": "ThirdPartyType",
            },
          },
        },
        "ThirdPartyType": {
          "docs": undefined,
          "enum": [
            {
              "name": "lienholder",
              "value": "lienholder",
            },
            {
              "name": "lessor",
              "value": "lessor",
            },
            {
              "name": "interest",
              "value": "interest",
            },
          ],
        },
        "User": {
          "docs": "User to attach to Ignition session. If user is set, unique \`id\` must be provided.",
          "properties": {
            "email": {
              "docs": "User's email address.",
              "type": "optional<string>",
            },
            "firstName": {
              "docs": "User's first name.",
              "type": "optional<string>",
            },
            "id": {
              "docs": "Your application's unique user id.",
              "type": "string",
            },
            "lastName": {
              "docs": "User's last name.",
              "type": "optional<string>",
            },
            "phone": {
              "docs": "User's phone number in E.164 format.",
              "type": "optional<string>",
            },
          },
        },
        "Vehicle": {
          "docs": undefined,
          "properties": {
            "bodyStyle": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "make": {
              "docs": undefined,
              "type": "string",
            },
            "model": {
              "docs": undefined,
              "type": "string",
            },
            "vin": {
              "docs": undefined,
              "type": "string",
            },
            "year": {
              "docs": undefined,
              "type": "string",
            },
          },
        },
      },
    },
    "accounts.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "GetAccount": {
            "auth": false,
            "docs": "The Get Account method will return an Account object including high-level account information (e.g., name) and any children objects (e.g., Policies) associated with the Account. Please note that this method will NOT refresh the Account object.",
            "errors": [],
            "method": "GET",
            "path": "/accounts/{id}",
            "path-parameters": {
              "id": {
                "docs": "The unique ID for the requested account. Returned as part of the Token Exchange flow in exchangeToken.",
                "type": "string",
              },
            },
            "request": {
              "name": "GetAccountRequest",
              "query-parameters": {
                "expand": {
                  "allow-multiple": undefined,
                  "docs": "Set to *true* if you would like to expand related entities (e.g., account, policy). Defaults to *false*.",
                  "type": "optional<boolean>",
                },
              },
            },
            "response": {
              "docs": "",
              "type": "root.GetAccountResponse",
            },
          },
        },
      },
    },
    "carriers.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "GetCarrier": {
            "auth": false,
            "docs": "The Get Carrier method returns a Carrier object that include additional details about an Axle-supported insurance carrier.",
            "errors": [],
            "method": "GET",
            "path": "/carriers/{id}",
            "path-parameters": {
              "id": {
                "docs": "The unique ID for the requested carrier. Returned in Account and Policy objects as \`carrier\`.",
                "type": "string",
              },
            },
            "response": {
              "docs": "",
              "type": "root.GetCarrierResponse",
            },
          },
          "GetCarriers": {
            "auth": false,
            "docs": "The Get Carriers method returns an array of Carrier objects.",
            "errors": [],
            "method": "GET",
            "path": "/carriers",
            "response": {
              "docs": "",
              "type": "root.GetCarriersResponse",
            },
          },
        },
      },
    },
    "ignition.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "StartIgnition": {
            "auth": false,
            "docs": "Start an Ignition session. Returns the ignitionUri to direct the user to authenticate.",
            "errors": [],
            "method": "POST",
            "path": "/ignition",
            "request": {
              "body": {
                "properties": {
                  "metadata": {
                    "docs": "Optional object to store ephermeral information about the session, such as \`reservationTime\`. Will be returned in webhook events.",
                    "type": "optional<map<string, unknown>>",
                  },
                  "redirectUri": {
                    "docs": "The URI we should direct the user to after authenticating successfully.",
                    "type": "optional<string>",
                  },
                  "user": {
                    "docs": undefined,
                    "type": "optional<root.User>",
                  },
                  "webhookUri": {
                    "docs": "The URI we should send updates about this session or the resulting account to.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "StartIgnitionRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "",
              "type": "root.StartIgnitionResponse",
            },
          },
        },
      },
    },
    "policies.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "GetPolicy": {
            "auth": false,
            "docs": "The Get Policy method returns a Policy object including high-level policy information (e.g., policy number) and any children objects (e.g., Coverages) associated with the Policy. Please note that this method will NOT refresh the Policy object.",
            "errors": [],
            "method": "GET",
            "path": "/policies/{id}",
            "path-parameters": {
              "id": {
                "docs": "The unique ID for the requested policy. Returned by Get Account for each Policy associated with the Account.",
                "type": "string",
              },
            },
            "request": {
              "name": "GetPolicyRequest",
              "query-parameters": {
                "expand": {
                  "allow-multiple": undefined,
                  "docs": "Set to *true* if you would like to expand related entities (e.g., account, policy). Defaults to *false*.",
                  "type": "optional<boolean>",
                },
              },
            },
            "response": {
              "docs": "",
              "type": "root.GetPolicyResponse",
            },
          },
        },
      },
    },
    "tokens.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "ExchangeToken": {
            "auth": false,
            "docs": "Exchange an authorization code for an access token. Ignition returns an authCode as a query parameter at the redirectUrl upon successful completion of the Ignition flow.

Auth codes are ephemeral and expire after 10 minutes, while accessTokens do not expire.",
            "errors": [],
            "method": "POST",
            "path": "/token/exchange",
            "request": {
              "body": {
                "properties": {
                  "authCode": {
                    "docs": "The authorization code obtained after a user successfully links their account via Ignition. Returned as a query parameter at the redirectUri.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "ExchangeTokenRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "",
              "type": "root.ExchangeTokenResponse",
            },
          },
        },
      },
    },
  },
  "rootApiFile": {
    "auth": "apiKeyAuth",
    "auth-schemes": {
      "apiKeyAuth": {
        "header": "x-access-token",
        "name": "apiKey",
        "type": "string",
      },
    },
    "default-environment": "Production",
    "display-name": "Axle API",
    "environments": {
      "Production": "https://api.axle.insure",
      "Sandbox": "https://sandbox.axle.insure",
    },
    "error-discrimination": {
      "strategy": "status-code",
    },
    "headers": {
      "x-client-id": {
        "docs": "Your client ID. This will be shared with you during onboarding.",
        "name": "clientId",
        "type": "string",
      },
      "x-client-secret": {
        "docs": "Your secret API key. This will be shared with you during onboarding and should be considered sensitive - it’s a password after all!",
        "name": "clientSecret",
        "type": "string",
      },
    },
    "name": "api",
  },
}
`;

exports[`open api converter belvo simple 1`] = `
{
  "definitionFiles": {
    "__package__.yml": {
      "errors": {
        "BadRequestError": {
          "status-code": 400,
          "type": "list<BadRequestErrorBodyItem>",
        },
        "ForbiddenError": {
          "status-code": 403,
          "type": "list<AccessToResourceDenied>",
        },
        "InternalServerError": {
          "status-code": 500,
          "type": "list<UnexpectedError>",
        },
        "NotFoundError": {
          "status-code": 404,
          "type": "list<NotFoundErrorBody>",
        },
        "PreconditionError": {
          "status-code": 428,
          "type": "list<TokenRequiredResponse>",
        },
        "RequestTimeoutError": {
          "status-code": 408,
          "type": "list<RequestTimeoutErrorBody>",
        },
        "UnauthorizedError": {
          "status-code": 401,
          "type": "list<UnauthorizedErrorBody>",
        },
      },
      "service": undefined,
      "types": {
        "AccessToResourceDenied": {
          "docs": "This error occurs when you try to access Belvo's resource without the correct permissions.",
          "properties": {
            "code": {
              "docs": "A unique error code (\`access_to_resource_denied\`) that allows you to classify and handle the error programmatically.

ℹ️ Check our DevPortal for more information on how to handle <a href="https://developers.belvo.com/docs/belvo-api-errors#403-access_to_resource_denied" target="_blank">403 access_to_resource_denied</a>.",
              "type": "optional<string>",
            },
            "message": {
              "docs": "A short description of the error. 

For \`access_to_resource_denied\` errors, the description is:
  
  - \`You don't have access to this resource.\`.",
              "type": "optional<string>",
            },
            "request_id": {
              "docs": "A 32-character unique ID of the request (matching a regex pattern of: \`[a-f0-9]{32}\`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
              "type": "optional<string>",
            },
          },
        },
        "Account": {
          "docs": undefined,
          "properties": {
            "balance": {
              "docs": undefined,
              "type": "AccountsBalance",
            },
            "balance_type": {
              "docs": "Indicates whether this account is either an \`ASSET\` or a \`LIABILITY\`. You can consider the balance of an \`ASSET\` as being positive, while the balance of a \`LIABILITY\` as negative.
",
              "type": "optional<string>",
            },
            "bank_product_id": {
              "docs": "*This field has been deprecated.*

*The institution's product ID for the account type.*
",
              "type": "optional<string>",
            },
            "category": {
              "docs": undefined,
              "type": "EnumAccountCategory",
            },
            "collected_at": {
              "docs": "The ISO-8601 timestamp when the data point was collected.",
              "type": "string",
            },
            "created_at": {
              "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
              "type": "optional<string>",
            },
            "credit_data": {
              "docs": undefined,
              "type": "AccountsCreditData",
            },
            "currency": {
              "docs": "The currency of the account. For example:
- 🇧🇷 BRL (Brazilian Real)
- 🇨🇴 COP (Colombian Peso)
- 🇲🇽 MXN (Mexican Peso)

 Please note that other currencies other than in the list above may be returned.",
              "type": "optional<string>",
            },
            "funds_data": {
              "docs": "One or more funds that contribute to the the pension account.",
              "type": "optional<list<AccountsFundsData>>",
            },
            "id": {
              "docs": "The unique identifier created by Belvo used to reference the current account.",
              "type": "optional<string>",
            },
            "institution": {
              "docs": undefined,
              "type": "optional<InstitutionAccount>",
            },
            "internal_identification": {
              "docs": "*This field has been deprecated.*

*The institution's internal identification for the account.*
",
              "type": "optional<string>",
            },
            "last_accessed_at": {
              "docs": "The ISO-8601 timestamp of Belvo's most recent successful access to the institution for the given link.",
              "type": "optional<string>",
            },
            "link": {
              "docs": "The \`link.id\` the account belongs to.",
              "type": "optional<string>",
            },
            "loan_data": {
              "docs": undefined,
              "type": "AccountsLoanData",
            },
            "name": {
              "docs": "The account name, as given by the institution.",
              "type": "optional<string>",
            },
            "number": {
              "docs": "The account number, as designated by the institution.",
              "type": "optional<string>",
            },
            "public_identification_name": {
              "docs": "The public name for the type of identification. For example: \`"CLABE"\`.

ℹ️ For 🇧🇷 Brazilian savings and checking accounts, this field will be \`AGENCY/ACCOUNT\`.
",
              "type": "optional<string>",
            },
            "public_identification_value": {
              "docs": "The value for the \`public_identification_name\`.

ℹ️ For 🇧🇷 Brazilian savings and checking accounts, this field will be the agency and bank account number, separated by a slash.
For example: \`0444/45722-0\`.
",
              "type": "optional<string>",
            },
            "receivables_data": {
              "docs": undefined,
              "type": "optional<AccountsReceivablesData>",
            },
            "type": {
              "docs": "The account type, as designated by the institution.",
              "type": "optional<string>",
            },
          },
        },
        "AccountsBalance": {
          "docs": "Details regarding the current and available balances for the account.
",
          "properties": {
            "available": {
              "docs": "The balance that the account owner can use.
- **💰 Checking and saving accounts**:

The available balance may be different to the \`current\` balance due to pending transactions.
- **💳 Credit cards**:

The credit amount the user still has available for the current period. The \`available\` balance may be different to the \`current\` balance due to pending transactions or future instalments.
- **🏡 Loan accounts**:

The present value required to pay off the loan, as provided by the institution.

**Note:** If the institution does not provide this value, we return \`null\`.",
              "type": "optional<double>",
            },
            "current": {
              "docs": "The current balance is calculated differently according to the type of account.

- **💰 Checking and saving accounts**:

The user's account balance at the \`collected_at\` timestamp.
- **💳 Credit cards**:

The amount the user has spent in the current card billing period (see \`credit_data.cutting_date\` for information on when the current billing period finishes).
- **🏡 Loan accounts**:

The amount remaining to pay on the users's loan (same as \`loan_data.outstanding_balance\`).",
              "type": "optional<double>",
            },
          },
        },
        "AccountsCreditData": {
          "docs": undefined,
          "properties": {
            "collected_at": {
              "docs": "The ISO-8601 timestamp when the data point was collected.",
              "type": "optional<string>",
            },
            "credit_limit": {
              "docs": "The maximum amount of credit the owner can receive.",
              "type": "optional<double>",
            },
            "cutting_date": {
              "docs": "The closing date of the credit period.",
              "type": "optional<string>",
            },
            "end_date": {
              "docs": "*This field has been deprecated.*
",
              "type": "optional<string>",
            },
            "interest_rate": {
              "docs": "The annualized interest rate of the credit.",
              "type": "optional<double>",
            },
            "last_payment_date": {
              "docs": "*This field has been deprecated.*


*The date when the last credit payment was made.*
",
              "type": "optional<string>",
            },
            "minimum_payment": {
              "docs": "The minimum amount to be paid on the \`next_payment_date\`.",
              "type": "optional<double>",
            },
            "monthly_payment": {
              "docs": "*This field has been deprecated.*

*The recurrent monthly payment, if applicable.*
",
              "type": "optional<double>",
            },
            "next_payment_date": {
              "docs": "The due date for the next payment (\`YYYY-MM-DD\`).",
              "type": "optional<string>",
            },
            "no_interest_payment": {
              "docs": "The minimum amount required to pay to avoid generating interest.",
              "type": "optional<double>",
            },
          },
        },
        "AccountsFundsData": {
          "docs": undefined,
          "properties": {
            "balance": {
              "docs": "The amount in the fund.",
              "type": "optional<double>",
            },
            "collected_at": {
              "docs": "The ISO-8601 timestamp when the data point was collected.",
              "type": "optional<string>",
            },
            "name": {
              "docs": "The pension fund name.",
              "type": "optional<string>",
            },
            "percentage": {
              "docs": "How much this fund, as a percentage, contributes to the pension account's total.",
              "type": "optional<double>",
            },
            "public_identifications": {
              "docs": "The fund's public IDs.",
              "type": "optional<list<AccountsFundsDataPublicIdentifications>>",
            },
            "type": {
              "docs": "Type of pension fund.",
              "type": "optional<string>",
            },
          },
        },
        "AccountsFundsDataPublicIdentifications": {
          "docs": undefined,
          "properties": {
            "name": {
              "docs": "The type of identification number for the fund.",
              "type": "string",
            },
            "value": {
              "docs": "The fund's identification number.",
              "type": "optional<string>",
            },
          },
        },
        "AccountsLoanData": {
          "docs": undefined,
          "properties": {
            "collected_at": {
              "docs": "The ISO-8601 timestamp when the data point was collected.",
              "type": "string",
            },
            "contract_amount": {
              "docs": "The initial total loan amount, calculated by the institution, when the contract was signed. This amount includes the principal + interest + taxes + fees.",
              "type": "optional<double>",
            },
            "contract_end_date": {
              "docs": "The date when the loan is expected to be completed.",
              "type": "optional<string>",
            },
            "contract_number": {
              "docs": "The contract number of the loan, as given by the institution.",
              "type": "optional<string>",
            },
            "contract_start_date": {
              "docs": "The date when the loan contract was signed (\`YYYY-MM-DD\`).",
              "type": "optional<string>",
            },
            "credit_limit": {
              "docs": "This field has been deprecated.

Please see \`principal\` instead.
",
              "type": "optional<double>",
            },
            "cutting_date": {
              "docs": "This field has been deprecated.

The closing date of the loan period.
",
              "type": "optional<string>",
            },
            "cutting_day": {
              "docs": "This field has been deprecated.

The closing day of the month for the loan.
",
              "type": "optional<string>",
            },
            "fees": {
              "docs": "Breakdown of the fees applied to the loan.",
              "type": "optional<list<AccountsLoanDataFees>>",
            },
            "interest_rate": {
              "docs": "This field has been deprecated.

Please see the \`interest_rates\` object instead.
",
              "type": "optional<double>",
            },
            "interest_rates": {
              "docs": "Breakdown of the interest applied to the loan.",
              "type": "optional<list<AccountsLoanDataInterestRate>>",
            },
            "last_payment_date": {
              "docs": "This field has been deprecated.

The date when the last loan payment was made.
",
              "type": "optional<string>",
            },
            "last_period_balance": {
              "docs": "This field has been deprecated.

Please see \`outstanding_balance\` instead.
",
              "type": "optional<double>",
            },
            "limit_day": {
              "docs": "This field has been deprecated.

Please see \`payment_day\` instead.
",
              "type": "optional<string>",
            },
            "loan_type": {
              "docs": "The type of the loan, according to the institution.",
              "type": "optional<string>",
            },
            "monthly_payment": {
              "docs": "The recurrent monthly payment, if applicable.",
              "type": "optional<double>",
            },
            "no_interest_payment": {
              "docs": "This field has been deprecated.

The minimum amount required to pay to avoid generating interest.
",
              "type": "optional<double>",
            },
            "number_of_installments_outstanding": {
              "docs": "The number of installments left to pay.",
              "type": "optional<integer>",
            },
            "number_of_installments_total": {
              "docs": "The total number of installments required to pay the loan.",
              "type": "optional<integer>",
            },
            "outstanding_balance": {
              "docs": "The amount remaining to pay in total, including interest.",
              "type": "optional<double>",
            },
            "outstanding_principal": {
              "docs": "Outstanding loan amount, that is, how much remains to pay on the principal (not including interest).
",
              "type": "optional<double>",
            },
            "payment_day": {
              "docs": "The day of the month by which the owner needs to pay the loan (\`YYYY-MM-DD\`).",
              "type": "optional<string>",
            },
            "principal": {
              "docs": "Total amount of the loan (the amount the user receives).",
              "type": "optional<double>",
            },
          },
        },
        "AccountsLoanDataFees": {
          "docs": undefined,
          "properties": {
            "type": {
              "docs": undefined,
              "type": "EnumLoanDataFeeType",
            },
            "value": {
              "docs": "The total value of the fee. Same currency of the Loan.
",
              "type": "double",
            },
          },
        },
        "AccountsLoanDataInterestRate": {
          "docs": "Breakdown of the interest applied to the loan.",
          "properties": {
            "name": {
              "docs": "The name of the type of interest rate applied to the loan.",
              "type": "optional<string>",
            },
            "type": {
              "docs": undefined,
              "type": "EnumLoanDataInterestRateType",
            },
            "value": {
              "docs": "The interest rate (in percent or currency value).",
              "type": "optional<double>",
            },
          },
        },
        "AccountsPaginatedResponse": {
          "docs": undefined,
          "properties": {
            "count": {
              "docs": "The total number of results in your Belvo account.",
              "type": "optional<integer>",
            },
            "next": {
              "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is \`null\`.

In our documentation example, we use \`{endpoint}\` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, \`accounts\` or \`owners\`).
",
              "type": "optional<string>",
            },
            "previous": {
              "docs": "The URL to the previous page of results. If there is no previous page, the value is \`null\`.",
              "type": "optional<string>",
            },
            "results": {
              "docs": "An array of Account objects.",
              "type": "optional<list<Account>>",
            },
          },
        },
        "AccountsReceivablesData": {
          "docs": undefined,
          "properties": {
            "anticipated": {
              "docs": "The amount that the owner of the account received earlier than contracted.",
              "type": "optional<double>",
            },
            "available": {
              "docs": "The amount that the owner of the account will receive according to an established date.",
              "type": "optional<double>",
            },
            "collected_at": {
              "docs": "The ISO-8601 timestamp when the data point was collected.",
              "type": "string",
            },
            "current": {
              "docs": "The total sum of all receivables (\`available\` + \`anticipated\`)",
              "type": "optional<double>",
            },
          },
        },
        "AnnualCostsAndDeductionsStatementBusiness": {
          "docs": "Object containing the reported annual costs and applicable deductions.",
          "properties": {
            "administration_expenses": {
              "docs": "Total costs of the company related to training, company offsites, or similar.",
              "type": "double",
            },
            "costs": {
              "docs": "Total costs for the company to operate.",
              "type": "double",
            },
            "distribution_and_sales_expenses": {
              "docs": "Total costs the company incurred in order to distribute or sell their product.",
              "type": "double",
            },
            "financial_expenses": {
              "docs": "Total value of any fees incurred by the company to operate (such as bank fees).",
              "type": "double",
            },
            "total_costs_and_deductible_expenses": {
              "docs": "Total value of all costs and dedictible expenses.",
              "type": "double",
            },
          },
        },
        "AnnualIncomeStatementBusiness": {
          "docs": "Object containing the reported annual incomes, deductions, and final balances of the tax payer.",
          "properties": {
            "dividends": {
              "docs": "Total income that the company generated from dividends.",
              "type": "double",
            },
            "gross_income_from_ordinary_activities": {
              "docs": "Total gross income that the company generated from their main economic activity.",
              "type": "double",
            },
            "other_income": {
              "docs": "Total income that the company generated from activities not associated with their main economic activity.",
              "type": "double",
            },
            "returns_rebates_and_discounts_on_sales": {
              "docs": "Total value of cancelled orders, corrected invoices, or similar, that can be discounted from the \`total_gross_income\`.",
              "type": "double",
            },
            "total_gross_income": {
              "docs": "Total gross income the company generated.",
              "type": "double",
            },
            "total_net_income": {
              "docs": "Total net income of the company, taking into account \`returns_rebates_and_discounts_on_sales\`.",
              "type": "double",
            },
          },
        },
        "AnnualIncomeStatementIndividual": {
          "docs": "Object containing the reported annual incomes, deductions, and final balances of the tax payer.",
          "properties": {
            "annual_totals": {
              "docs": undefined,
              "type": "AnnualTotalsIndividual",
            },
            "gross_income": {
              "docs": undefined,
              "type": "GrossIncomeIndividual",
            },
            "net_income": {
              "docs": undefined,
              "type": "NetIncomeIndividual",
            },
            "non_taxable_income": {
              "docs": undefined,
              "type": "NonTaxableIncomeIndividual",
            },
          },
        },
        "AnnualTotalsIndividual": {
          "docs": "Object containing the tax payers total exempt, deducted, and ordinary net incomes.",
          "properties": {
            "total_applicable_deductions": {
              "docs": "Total deductions that the taxpayer can apply to their income, according to the institution.",
              "type": "double",
            },
            "total_exempt_income": {
              "docs": "Total income that is not taxable, according to the institution.",
              "type": "double",
            },
            "total_exemptions_and_deductions": {
              "docs": "Sum total of all exempt and deductions that can be applied to the taxpayer's income.",
              "type": "double",
            },
            "total_ordinary_net_income": {
              "docs": "Sum total of the taxpayer's income (gross income - exemptions - deductions).",
              "type": "double",
            },
          },
        },
        "AsynchronousAccepted202": {
          "docs": undefined,
          "properties": {
            "request_id": {
              "docs": "The unique ID for this request. We recommend you store this value to later identify which webhook event relates to an asynchronous request.",
              "type": "optional<string>",
            },
          },
        },
        "BadRequestErrorBodyItem": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "InvalidAccessMode",
            },
            {
              "docs": undefined,
              "type": "TooManySessionsError",
            },
            {
              "docs": undefined,
              "type": "LoginError",
            },
            {
              "docs": undefined,
              "type": "SessionExpiredError",
            },
            {
              "docs": undefined,
              "type": "ValidationError",
            },
            {
              "docs": undefined,
              "type": "InstitutionDownError",
            },
            {
              "docs": undefined,
              "type": "InstitutionUnavailableError",
            },
            {
              "docs": undefined,
              "type": "InstitutionInactiveError",
            },
            {
              "docs": undefined,
              "type": "UnsupportedOperationError",
            },
            {
              "docs": undefined,
              "type": "InvalidLinkError",
            },
            {
              "docs": undefined,
              "type": "UnconfirmedLinkError",
            },
          ],
        },
        "Balance": {
          "docs": undefined,
          "properties": {
            "account": {
              "docs": undefined,
              "type": "optional<Account>",
            },
            "balance": {
              "docs": "The funds available in the account by the end of the \`value_date\`.",
              "type": "optional<double>",
            },
            "collected_at": {
              "docs": "This field has been deprecated.

The ISO-8601 timestamp when the data point was collected.
",
              "type": "optional<string>",
            },
            "current_balance": {
              "docs": "*This field has been deprecated. Please use the \`balance\` field instead.*
",
              "type": "optional<double>",
            },
            "id": {
              "docs": "Belvo's unique ID for the balance request.",
              "type": "optional<string>",
            },
            "statement": {
              "docs": "*This field has been deprecated.*

*The ID of the banking statement used to extract the \`balance\`.*
",
              "type": "optional<string>",
            },
            "value_date": {
              "docs": "The date when the \`balance\` was available, in \`YYYY-MM-DD\` format.",
              "type": "optional<string>",
            },
          },
        },
        "BalancesPaginatedResponse": {
          "docs": undefined,
          "properties": {
            "count": {
              "docs": "The total number of results in your Belvo account.",
              "type": "optional<integer>",
            },
            "next": {
              "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is \`null\`.

In our documentation example, we use \`{endpoint}\` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, \`accounts\` or \`owners\`).
",
              "type": "optional<string>",
            },
            "previous": {
              "docs": "The URL to the previous page of results. If there is no previous page, the value is \`null\`.",
              "type": "optional<string>",
            },
            "results": {
              "docs": "Array of balance objects.",
              "type": "optional<list<Balance>>",
            },
          },
        },
        "BankAccountBusinessPse": {
          "docs": undefined,
          "properties": {
            "created_at": {
              "docs": "The ISO-8601 timestamp of when the data point was first created in Belvo's database.",
              "type": "string",
            },
            "created_by": {
              "docs": "Belvo's unique ID for the user that created the bank account.",
              "type": "string",
            },
            "customer": {
              "docs": "Belvo's unique ID for the customer associated with the bank account.
For \`BUSINESS\` bank accounts, this field is \`null\`.",
              "type": "optional<string>",
            },
            "details": {
              "docs": "For PSE, this field will return an empty object.",
              "type": "map<string, unknown>",
            },
            "holder": {
              "docs": undefined,
              "type": "HolderBusinessResponsePse",
            },
            "id": {
              "docs": "Belvo's unique ID for the current bank account.",
              "type": "string",
            },
            "institution": {
              "docs": "Belvo's unique ID for the institution that the bank account is created in.
For \`BUSINESS\` bank accounts that Belvo creates for organizations, this field is \`null\`.",
              "type": "optional<string>",
            },
            "metadata": {
              "docs": "Optional and customizable object where you can provide any additional key-value pairs for your internal purposes. For example, an internal reference number for the payment intent.

⚠️ **Note**: You can only provide up to 50 keys (keys can have up to 50 characters each and each value can be up to 500 characters). We do not support nested objects, only ASCII values.",
              "type": "optional<map<string, unknown>>",
            },
            "number": {
              "docs": "The bank account number of the payment beneficiary.
",
              "type": "string",
            },
          },
        },
        "BankAccountDetailsOfpi": {
          "docs": undefined,
          "properties": {
            "account_type": {
              "docs": undefined,
              "type": "EnumBankAccountPixAccountTypeOfpi",
            },
            "agency": {
              "docs": "The agency (branch number) of the institution where the account was created.",
              "type": "string",
            },
            "country": {
              "docs": undefined,
              "type": "EnumPaymentsCountry",
            },
            "number": {
              "docs": "The bank account number.",
              "type": "string",
            },
          },
        },
        "BankAccountDetailsOfpiPix": {
          "docs": undefined,
          "properties": {
            "country": {
              "docs": undefined,
              "type": "EnumPaymentsCountry",
            },
            "pix_key": {
              "docs": "The PIX key identifier of the bank account.",
              "type": "string",
            },
          },
        },
        "BankAccountDetailsOpenFinance": {
          "docs": undefined,
          "properties": {
            "account_type": {
              "docs": undefined,
              "type": "EnumBankAccountPixAccountTypeOfpi",
            },
            "agency": {
              "docs": "The agency (branch number) of the institution where the account was created.",
              "type": "string",
            },
            "country": {
              "docs": undefined,
              "type": "EnumPaymentsCountry",
            },
            "number": {
              "docs": "The bank account number.",
              "type": "string",
            },
          },
        },
        "BankAccountDetailsOpenFinancePix": {
          "docs": undefined,
          "properties": {
            "country": {
              "docs": undefined,
              "type": "EnumPaymentsCountry",
            },
            "pix_key": {
              "docs": "The PIX key identifier of the bank account.",
              "type": "string",
            },
          },
        },
        "BankAccountHolderRequestOfpi": {
          "docs": "Details regarding the business bank account holder.",
          "properties": {
            "information": {
              "docs": undefined,
              "type": "BankAccountHolderRequestOfpiInformation",
            },
            "type": {
              "docs": undefined,
              "type": "EnumBankAccountHolderTypeOfpi",
            },
          },
        },
        "BankAccountHolderRequestOfpiInformation": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "HolderInformationBusinessOfpi",
            },
            {
              "docs": undefined,
              "type": "HolderInformationIndividualOfpi",
            },
          ],
        },
        "BankAccountInformationContentPse": {
          "docs": "Information about the payer's institution",
          "properties": {
            "payer_institution": {
              "docs": "Belvo's unique identifier for the payer’s institution.",
              "type": "optional<string>",
            },
          },
        },
        "BankAccountInformationPse": {
          "docs": "Information about the payer's bank account. Belvo returns this object when the payer's bank account information is not saved in the Belvo database.",
          "properties": {
            "bank_account_information": {
              "docs": undefined,
              "type": "optional<BankAccountInformationContentPse>",
            },
          },
        },
        "BankAccountOfpiResponse": {
          "docs": undefined,
          "properties": {
            "created_at": {
              "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
              "type": "string",
            },
            "created_by": {
              "docs": "Belvo's unique ID for the user that created the bank account.",
              "type": "string",
            },
            "customer": {
              "docs": "Belvo's unique ID for the customer associated with the bank account.
For \`BUSINESS\` bank accounts, this field is \`null\`.",
              "type": "optional<string>",
            },
            "details": {
              "docs": undefined,
              "type": "BankAccountOfpiResponseDetails",
            },
            "holder": {
              "docs": undefined,
              "type": "HolderResponseOfpi",
            },
            "id": {
              "docs": "Belvo's unique ID for the current bank account.",
              "type": "string",
            },
            "institution": {
              "docs": "Belvo's unique ID for the institution that the bank account is created in.
For \`BUSINESS\` bank accounts that Belvo creates for organizations, this field is \`null\`.",
              "type": "optional<string>",
            },
          },
        },
        "BankAccountOfpiResponseDetails": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "BankAccountDetailsOfpi",
            },
            {
              "docs": undefined,
              "type": "BankAccountDetailsOfpiPix",
            },
          ],
        },
        "BankAccountPaginatedResponse": {
          "docs": undefined,
          "properties": {
            "count": {
              "docs": "The total number of results in your Belvo account.",
              "type": "optional<integer>",
            },
            "next": {
              "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is \`null\`.

In our documentation example, we use \`{endpoint}\` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, \`customer\` or \`bank-accounts\`).
",
              "type": "optional<string>",
            },
            "previous": {
              "docs": "The URL to the previous page of results. If there is no previous page, the value is \`null\`.",
              "type": "optional<string>",
            },
            "results": {
              "docs": "Array of bank account objects.",
              "type": "optional<list<BankAccountPaginatedResponseResultsItem>>",
            },
          },
        },
        "BankAccountPaginatedResponseResultsItem": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "BankAccountOfpiResponse",
            },
            {
              "docs": undefined,
              "type": "BankAccountPseResponse",
            },
          ],
        },
        "BankAccountPseResponse": {
          "docs": undefined,
          "type": "BankAccountBusinessPse",
        },
        "BeneficiaryBankAccountOfpi": {
          "docs": undefined,
          "properties": {
            "created_at": {
              "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
              "type": "string",
            },
            "created_by": {
              "docs": "Belvo's unique ID for the user that created the bank account.",
              "type": "string",
            },
            "details": {
              "docs": undefined,
              "type": "optional<BeneficiaryBankAccountOfpiDetails>",
            },
            "holder": {
              "docs": undefined,
              "type": "HolderResponseOfpi",
            },
            "id": {
              "docs": "Belvo's unique ID for the beneficiary bank account.",
              "type": "string",
            },
            "institution": {
              "docs": undefined,
              "type": "PaymentInstitution",
            },
          },
        },
        "BeneficiaryBankAccountOfpiDetails": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "BankAccountDetailsOpenFinance",
            },
            {
              "docs": undefined,
              "type": "BankAccountDetailsOpenFinancePix",
            },
          ],
        },
        "BeneficiaryBankAccountPse": {
          "docs": undefined,
          "properties": {
            "holder": {
              "docs": undefined,
              "type": "optional<HolderBusinessResponsePse>",
            },
            "id": {
              "docs": "Belvo's unique ID for the beneficiary bank account.",
              "type": "optional<string>",
            },
            "institution": {
              "docs": "Belvo's unique ID for the institution that the bank account is created in.",
              "type": "optional<string>",
            },
            "number": {
              "docs": "The bank account number.",
              "type": "optional<string>",
            },
          },
        },
        "Categorization": {
          "docs": undefined,
          "properties": {
            "transactions": {
              "docs": "An array of enriched transaction objects.",
              "type": "optional<list<CategorizationBody>>",
            },
          },
        },
        "CategorizationBody": {
          "docs": undefined,
          "properties": {
            "account_category": {
              "docs": undefined,
              "type": "EnumCategorizationAccountCategory",
            },
            "account_holder_id": {
              "docs": "The unique ID for the account holder in your system.",
              "type": "string",
            },
            "account_holder_type": {
              "docs": undefined,
              "type": "EnumCategorizationAccountHolderType",
            },
            "account_id": {
              "docs": "The unique ID for the account where the transaction occurred in your system.",
              "type": "string",
            },
            "amount": {
              "docs": "The transaction amount.",
              "type": "double",
            },
            "category": {
              "docs": undefined,
              "type": "EnumCategorizationTransactionCategory",
            },
            "currency": {
              "docs": "The currency of the account, in ISO-4217 format. For example:
- 🇧🇷 BRL (Brazilian Real)
- 🇨🇴 COP (Colombian Peso)
- 🇲🇽 MXN (Mexican Peso)",
              "type": "string",
            },
            "description": {
              "docs": "The description of the transaction.",
              "type": "string",
            },
            "institution": {
              "docs": "The institution where the account is registered.

>**Note:** This is the name that you use in your system to identify an institution.",
              "type": "string",
            },
            "mcc": {
              "docs": "The four-digit ISO 18245 Merchant Category Code (MCC). We only return this value when \`account_type\` = \`CREDIT_CARD\`.",
              "type": "optional<integer>",
            },
            "merchant": {
              "docs": undefined,
              "type": "CategorizationMerchantData",
            },
            "subcategory": {
              "docs": undefined,
              "type": "optional<EnumCategorizationTransactionSubcategory>",
            },
            "transaction_id": {
              "docs": "The unique ID for the transaction in your system.",
              "type": "string",
            },
            "type": {
              "docs": undefined,
              "type": "EnumCategorizationTransactionType",
            },
            "value_date": {
              "docs": "The date when the transaction occurred, in \`YYYY-MM-DD\` format.",
              "type": "string",
            },
          },
        },
        "CategorizationBodyRequest": {
          "docs": undefined,
          "properties": {
            "account_category": {
              "docs": undefined,
              "type": "EnumCategorizationAccountCategory",
            },
            "account_holder_id": {
              "docs": "Your unique ID for the account holder.",
              "type": "string",
            },
            "account_holder_type": {
              "docs": undefined,
              "type": "EnumCategorizationAccountHolderType",
            },
            "account_id": {
              "docs": "Your unique ID for the account where the transaction occurred.",
              "type": "string",
            },
            "amount": {
              "docs": "The transaction amount.",
              "type": "double",
            },
            "currency": {
              "docs": "The currency of the account, in ISO-4217 format. For example: - 🇧🇷 BRL (Brazilian Real) - 🇨🇴 COP (Colombian Peso) - 🇲🇽 MXN (Mexican Peso)",
              "type": "string",
            },
            "description": {
              "docs": "The description of the transaction.",
              "type": "string",
            },
            "institution": {
              "docs": "The institution where the account is registered.

>**Note:** This is the name that you use in your system to identify an institution.",
              "type": "string",
            },
            "mcc": {
              "docs": "The four-digit ISO 18245 Merchant Category Code (MCC). Only required when \`account_category\` = \`CREDIT_CARD\`.",
              "type": "optional<integer>",
            },
            "transaction_id": {
              "docs": "Your unique ID for the transaction.",
              "type": "string",
            },
            "type": {
              "docs": undefined,
              "type": "EnumCategorizationTransactionType",
            },
            "value_date": {
              "docs": "The date when the transaction occurred, in \`YYYY-MM-DD\` format.",
              "type": "string",
            },
          },
        },
        "CategorizationMerchantData": {
          "docs": undefined,
          "properties": {
            "logo": {
              "docs": "The URL to the merchant's logo.",
              "type": "optional<string>",
            },
            "merchant_name": {
              "docs": "The name of the merchant.",
              "type": "optional<string>",
            },
            "website": {
              "docs": "The URL to the merchant's website.",
              "type": "optional<string>",
            },
          },
        },
        "Charge": {
          "docs": undefined,
          "properties": {
            "amount": {
              "docs": "The amount of the charge.
",
              "type": "optional<string>",
            },
            "beneficiary": {
              "docs": "Belvo's unique ID used to identify the beneficiary’s bank account.",
              "type": "string",
            },
            "created_at": {
              "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
              "type": "string",
            },
            "created_by": {
              "docs": "Belvo's unique ID for the user that created the charge.",
              "type": "optional<string>",
            },
            "currency": {
              "docs": undefined,
              "type": "optional<EnumPaymentsCurrency>",
            },
            "customer": {
              "docs": "Belvo's unique ID for the customer that the charge was created for.",
              "type": "optional<string>",
            },
            "description": {
              "docs": "The description of the payment.
",
              "type": "optional<string>",
            },
            "failure_code": {
              "docs": "Error code that explains the reason behind a payment being unsuccessful (if applicable).
",
              "type": "optional<string>",
            },
            "failure_message": {
              "docs": "Further information regarding the \`failure_code\`.
",
              "type": "optional<string>",
            },
            "id": {
              "docs": "Belvo's unique ID for the current charge.",
              "type": "string",
            },
            "metadata": {
              "docs": "Optional and customizable object where you can provide any additional key-value pairs for your internal purposes. For example, an internal reference number.

⚠️ **Note**: You can only provide up to 50 keys (keys can have up to 50 characters each and each value can be up to 500 characters). We do not support nested objects, only ASCII values.",
              "type": "map<string, unknown>",
            },
            "payment_intent": {
              "docs": "The \`payment_intent.id\` associated with this charge.",
              "type": "optional<string>",
            },
            "payment_method_details": {
              "docs": undefined,
              "type": "ChargePaymentMethodDetails",
            },
            "payment_method_information": {
              "docs": undefined,
              "type": "PaymentMethodInformationPse",
            },
            "payment_method_type": {
              "docs": undefined,
              "type": "optional<EnumPaymentLinkAllowedPaymentMethod>",
            },
            "provider": {
              "docs": undefined,
              "type": "EnumPaymentLinkProvider",
            },
            "status": {
              "docs": "The current status of the charge.
",
              "type": "ChargeStatus",
            },
            "transactions": {
              "docs": "An array of Transaction objects relating to the charge.",
              "type": "optional<list<PaymentTransaction>>",
            },
            "updated_at": {
              "docs": "The ISO-8601 timestamp of when the status of the charge was last updated.
",
              "type": "optional<string>",
            },
          },
        },
        "ChargePaymentMethodDetails": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "ChargePaymentMethodDetailsPse",
            },
            {
              "docs": undefined,
              "type": "ChargePaymentMethodDetailsOfpi",
            },
          ],
        },
        "ChargePaymentMethodDetailsOfpi": {
          "docs": "Details about the payment method.",
          "properties": {
            "open_finance": {
              "docs": undefined,
              "type": "optional<ChargePaymentMethodDetailsOfpiContent>",
            },
          },
        },
        "ChargePaymentMethodDetailsOfpiContent": {
          "docs": "Information about the payer of a PSE payment.",
          "properties": {
            "beneficiary_bank_account": {
              "docs": "Belvo's unique ID used to identify the beneficiary's bank account.",
              "type": "optional<string>",
            },
            "payer_institution": {
              "docs": "Unique identifier for the payer’s institution.",
              "type": "optional<string>",
            },
          },
        },
        "ChargePaymentMethodDetailsPse": {
          "docs": "Details about the payment method.",
          "properties": {
            "pse": {
              "docs": undefined,
              "type": "optional<ChargePaymentMethodDetailsPseContent>",
            },
          },
        },
        "ChargePaymentMethodDetailsPseContent": {
          "docs": "Information about the payer of a PSE payment.",
          "properties": {
            "payer_bank_account": {
              "docs": "Belvo's unique ID used to identify the customer’s bank account.",
              "type": "optional<string>",
            },
            "payer_institution": {
              "docs": "Unique identifier for the payer’s institution.",
              "type": "optional<string>",
            },
          },
        },
        "ChargeStatus": {
          "docs": "The current status of the charge.
",
          "enum": [
            {
              "name": "PENDING",
              "value": "PENDING",
            },
            {
              "name": "SUCCEEDED",
              "value": "SUCCEEDED",
            },
            {
              "name": "FAILED",
              "value": "FAILED",
            },
          ],
        },
        "CreateBankAccountOfpi": {
          "docs": undefined,
          "properties": {
            "details": {
              "docs": "Information regarding the bank account.",
              "type": "CreateBankAccountOfpiDetails",
            },
            "holder": {
              "docs": "Information regarding the individual bank account holder.",
              "type": "BankAccountHolderRequestOfpi",
            },
            "institution": {
              "docs": "Belvo's unique ID for the institution that the bank account is created in.",
              "type": "string",
            },
          },
        },
        "CreateBankAccountOfpiDetails": {
          "discriminated": false,
          "docs": "Information regarding the bank account.",
          "union": [
            {
              "docs": undefined,
              "type": "BankAccountDetailsOfpi",
            },
            {
              "docs": undefined,
              "type": "BankAccountDetailsOfpiPix",
            },
          ],
        },
        "CreateBankAccountPse": {
          "docs": undefined,
          "properties": {
            "holder": {
              "docs": "Information regarding the business bank account holder.",
              "type": "HolderBusinessPse",
            },
            "metadata": {
              "docs": "Optional and customizable object where you can provide any additional key-value pairs for your internal purposes. For example, an internal reference number for the payment intent.

⚠️ **Note**: You can only provide up to 50 keys (keys can have up to 50 characters each and each value can be up to 500 characters). We do not support nested objects, only ASCII values.",
              "type": "optional<map<string, unknown>>",
            },
            "number": {
              "docs": "The bank account number of the payment beneficiary.
",
              "type": "string",
            },
            "providers": {
              "docs": "Information about the payment service provider, required in order to establish a connection and process requests. For PSE, the value must be \`payments_way\`.",
              "type": "ProvidersPse",
            },
          },
        },
        "CreateBankAccountRequest": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "CreateBankAccountOfpi",
            },
            {
              "docs": undefined,
              "type": "CreateBankAccountPse",
            },
          ],
        },
        "CreateBankAccountResponse": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "BankAccountOfpiResponse",
            },
            {
              "docs": undefined,
              "type": "BankAccountPseResponse",
            },
          ],
        },
        "CreateCustomerOfpi": {
          "docs": undefined,
          "properties": {
            "address": {
              "docs": "The customer's physical address.
",
              "type": "optional<string>",
            },
            "country": {
              "docs": undefined,
              "type": "EnumPaymentsCountry",
            },
            "customer_type": {
              "docs": undefined,
              "type": "EnumCustomerType",
            },
            "email": {
              "docs": "The customer's email address.
",
              "type": "string",
            },
            "identifier": {
              "docs": "The document number of the customer's ID.
",
              "type": "string",
            },
            "identifier_type": {
              "docs": undefined,
              "type": "EnumCustomerIdentifierTypeOfpi",
            },
            "name": {
              "docs": "The full name of the customer you want to create.
",
              "type": "string",
            },
            "phone": {
              "docs": "The customer's phone number.
",
              "type": "optional<string>",
            },
          },
        },
        "CreateCustomerPse": {
          "docs": undefined,
          "properties": {
            "address": {
              "docs": "The customer's physical address.
",
              "type": "optional<string>",
            },
            "country": {
              "docs": undefined,
              "type": "EnumPaymentsCountry",
            },
            "customer_type": {
              "docs": undefined,
              "type": "EnumCustomerType",
            },
            "email": {
              "docs": "The customer's email address.
",
              "type": "string",
            },
            "identifier": {
              "docs": "The document number of the customer's ID.
",
              "type": "string",
            },
            "identifier_type": {
              "docs": undefined,
              "type": "EnumCustomerIdentifierTypePse",
            },
            "name": {
              "docs": "The full name of the customer you want to create.
",
              "type": "string",
            },
            "phone": {
              "docs": "The customer's phone number.
",
              "type": "optional<string>",
            },
          },
        },
        "CreateCustomerRequest": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "CreateCustomerOfpi",
            },
            {
              "docs": undefined,
              "type": "CreateCustomerPse",
            },
          ],
        },
        "CreateCustomerResponse": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "CustomerOfpi",
            },
            {
              "docs": undefined,
              "type": "CustomerPse",
            },
          ],
        },
        "CreatePaymentIntentPse": {
          "docs": undefined,
          "properties": {
            "allowed_payment_method_types": {
              "docs": "A list of payment method types allowed in this payment intent. For PSE, this value must be set to \`pse\`.",
              "type": "list<EnumPaymentLinkAllowedPaymentMethod>",
            },
            "amount": {
              "docs": "Amount to be paid by your customer. For PSE, you can only send whole numbers. For example: \`350000\`.

**Note:** You can send through this value either as a string or an integer. Regardless of the type you choose to send the \`amount\` as, Belvo returns a string with two decimal points, separated by a period ( \`.\`). For example, \`350000.00\`.
",
              "type": "CreatePaymentIntentPseAmount",
            },
            "customer": {
              "docs": "Belvo's unique ID to reference the customer.
",
              "type": "string",
            },
            "description": {
              "docs": "The description of the payment.
",
              "type": "string",
            },
            "metadata": {
              "docs": "Optional and customizable object where you can provide any additional key-value pairs for your internal purposes. For example, an internal reference number for the payment intent.

⚠️ **Note**: You can only provide up to 50 keys (keys can have up to 50 characters each and each value can be up to 500 characters). We do not support nested objects, only ASCII values.",
              "type": "optional<map<string, unknown>>",
            },
            "payment_method_details": {
              "docs": undefined,
              "type": "PaymentIntentsPaymentMethodDetailsPse",
            },
            "provider": {
              "docs": undefined,
              "type": "EnumPaymentLinkProvider",
            },
          },
        },
        "CreatePaymentIntentPseAmount": {
          "discriminated": false,
          "docs": "Amount to be paid by your customer. For PSE, you can only send whole numbers. For example: \`350000\`.

**Note:** You can send through this value either as a string or an integer. Regardless of the type you choose to send the \`amount\` as, Belvo returns a string with two decimal points, separated by a period ( \`.\`). For example, \`350000.00\`.
",
          "union": [
            {
              "docs": undefined,
              "type": "string",
            },
            {
              "docs": undefined,
              "type": "integer",
            },
          ],
        },
        "CreatePaymentLinkOfpi": {
          "docs": undefined,
          "properties": {
            "allowed_payment_method_types": {
              "docs": "A list of payment method types allowed in this payment intent. For OFPI, this value must be set to \`open_finance\`.",
              "type": "list<EnumPaymentLinkAllowedPaymentMethod>",
            },
            "amount": {
              "docs": "Amount to be paid by your customer. For OFPI, you can send through numbers with up to two decimal points, separated by a \`.\` period. For example: \`1234.12\`

**Note:** You can send through this value either as a string or an float. Regardless of the type you choose to send the \`amount\` as, Belvo returns a string with two decimal points, separated by a period ( \`.\`). For example, \`1234.12\`.
",
              "type": "CreatePaymentLinkOfpiAmount",
            },
            "callback_urls": {
              "docs": undefined,
              "type": "optional<PaymentLinkCallbackUrls>",
            },
            "customer": {
              "docs": "Belvo's unique ID to reference the customer.
",
              "type": "string",
            },
            "description": {
              "docs": "The description of the payment.
",
              "type": "string",
            },
            "expires_in": {
              "docs": "The payment link expiration time. It allows the following formats to be sent through:

  - whole number + \`m\` for x amount of minutes. For example: \`15m\` for 15 minutes.
  - whole number + \`h\` for x amount of hours. For example: \`12h\` for 12 hours.
  - whole number + \`d\` for x amount of days. For example: \`30d\` for 30 days.

  ℹ️ The minimum expiration time allowed for a payment link is \`1m\` (1 minute) and the maximum is \`90d\` (90 days).",
              "type": "optional<string>",
            },
            "payment_method_details": {
              "docs": undefined,
              "type": "PaymentMethodDetailsOfpi",
            },
            "provider": {
              "docs": undefined,
              "type": "EnumPaymentLinkProvider",
            },
          },
        },
        "CreatePaymentLinkOfpiAmount": {
          "discriminated": false,
          "docs": "Amount to be paid by your customer. For OFPI, you can send through numbers with up to two decimal points, separated by a \`.\` period. For example: \`1234.12\`

**Note:** You can send through this value either as a string or an float. Regardless of the type you choose to send the \`amount\` as, Belvo returns a string with two decimal points, separated by a period ( \`.\`). For example, \`1234.12\`.
",
          "union": [
            {
              "docs": undefined,
              "type": "string",
            },
            {
              "docs": undefined,
              "type": "double",
            },
          ],
        },
        "CreatePaymentLinkPse": {
          "docs": undefined,
          "properties": {
            "allowed_payment_method_types": {
              "docs": "A list of payment method types allowed in this payment intent. For PSE, this value must be set to \`pse\`.",
              "type": "optional<list<EnumPaymentLinkAllowedPaymentMethod>>",
            },
            "amount": {
              "docs": "Amount to be paid by your customer. For PSE, you can only send whole numbers. For example: \`350000\`.

**Note:** You can send this value either as a string or an integer. Regardless of the type you choose to send the \`amount\` as, Belvo returns a string with two decimal points, separated by a period ( \`.\`). For example, \`350000.00\`.
",
              "type": "CreatePaymentLinkPseAmount",
            },
            "callback_urls": {
              "docs": undefined,
              "type": "optional<PaymentLinkCallbackUrls>",
            },
            "customer": {
              "docs": "Belvo's unique ID to reference the customer.
",
              "type": "string",
            },
            "description": {
              "docs": "The description of the payment.
",
              "type": "string",
            },
            "expires_in": {
              "docs": "The payment link expiration time. It allows the following formats to be sent through:

  - whole number + \`m\` for x amount of minutes. For example: \`15m\` for 15 minutes.
  - whole number + \`h\` for x amount of hours. For example: \`12h\` for 12 hours.
  - whole number + \`d\` for x amount of days. For example: \`30d\` for 30 days.

  ℹ️ The minimum expiration time allowed for a payment link is \`1m\` (1 minute) and the maximum is \`90d\` (90 days).",
              "type": "optional<string>",
            },
            "payment_method_details": {
              "docs": undefined,
              "type": "PaymentMethodDetailsPse",
            },
            "provider": {
              "docs": undefined,
              "type": "EnumPaymentLinkProvider",
            },
          },
        },
        "CreatePaymentLinkPseAmount": {
          "discriminated": false,
          "docs": "Amount to be paid by your customer. For PSE, you can only send whole numbers. For example: \`350000\`.

**Note:** You can send this value either as a string or an integer. Regardless of the type you choose to send the \`amount\` as, Belvo returns a string with two decimal points, separated by a period ( \`.\`). For example, \`350000.00\`.
",
          "union": [
            {
              "docs": undefined,
              "type": "string",
            },
            {
              "docs": undefined,
              "type": "integer",
            },
          ],
        },
        "CreatePaymentlinkRequest": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "CreatePaymentLinkOfpi",
            },
            {
              "docs": undefined,
              "type": "CreatePaymentLinkPse",
            },
          ],
        },
        "CreatePaymentlinkResponse": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "PaymentLinkOfpi",
            },
            {
              "docs": undefined,
              "type": "PaymentLinkPse",
            },
          ],
        },
        "CustomerOfpi": {
          "docs": undefined,
          "properties": {
            "address": {
              "docs": "The customers physical address.
",
              "type": "optional<string>",
            },
            "country": {
              "docs": undefined,
              "type": "EnumPaymentsCountry",
            },
            "created_at": {
              "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
              "type": "string",
            },
            "created_by": {
              "docs": "Belvo's unique ID for the user that created the customer.",
              "type": "string",
            },
            "customer_type": {
              "docs": undefined,
              "type": "EnumCustomerType",
            },
            "email": {
              "docs": "The customer's email address.
",
              "type": "string",
            },
            "id": {
              "docs": "Belvo's unique ID for the current customer.",
              "type": "string",
            },
            "identifier": {
              "docs": "The document number of the customer's ID.
",
              "type": "string",
            },
            "identifier_type": {
              "docs": undefined,
              "type": "EnumCustomerIdentifierTypeOfpi",
            },
            "name": {
              "docs": "The full name of the customer.
",
              "type": "string",
            },
            "phone": {
              "docs": "The customer's phone number.
",
              "type": "optional<string>",
            },
          },
        },
        "CustomerPaginatedResponse": {
          "docs": undefined,
          "properties": {
            "count": {
              "docs": "The total number of results in your Belvo account.",
              "type": "optional<integer>",
            },
            "next": {
              "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is \`null\`.

In our documentation example, we use \`{endpoint}\` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, \`customer\` or \`bank-accounts\`).
",
              "type": "optional<string>",
            },
            "previous": {
              "docs": "The URL to the previous page of results. If there is no previous page, the value is \`null\`.",
              "type": "optional<string>",
            },
            "results": {
              "docs": "Array of customer objects.",
              "type": "optional<list<CustomerPaginatedResponseResultsItem>>",
            },
          },
        },
        "CustomerPaginatedResponseResultsItem": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "CustomerOfpi",
            },
            {
              "docs": undefined,
              "type": "CustomerPse",
            },
          ],
        },
        "CustomerPse": {
          "docs": undefined,
          "properties": {
            "address": {
              "docs": "The customers physical address.


**Note:** Apart from the first two and last two characters, all the rest of the characters are masked.
",
              "type": "optional<string>",
            },
            "country": {
              "docs": undefined,
              "type": "EnumPaymentsCountry",
            },
            "created_at": {
              "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
              "type": "string",
            },
            "created_by": {
              "docs": "Belvo's unique ID for the user that created the customer.",
              "type": "string",
            },
            "customer_type": {
              "docs": undefined,
              "type": "EnumCustomerType",
            },
            "email": {
              "docs": "The customer's email address.
",
              "type": "string",
            },
            "id": {
              "docs": "Belvo's unique ID for the current customer.",
              "type": "string",
            },
            "identifier": {
              "docs": "The document number of the customer's ID.
",
              "type": "string",
            },
            "identifier_type": {
              "docs": undefined,
              "type": "EnumCustomerIdentifierTypePse",
            },
            "name": {
              "docs": "The full name of the customer.
",
              "type": "string",
            },
            "phone": {
              "docs": "The customer's phone number.


**Note:** Apart from the first two and last two characters, all the rest of the characters are masked.
",
              "type": "optional<string>",
            },
          },
        },
        "DetailBankAccountResponse": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "BankAccountOfpiResponse",
            },
            {
              "docs": undefined,
              "type": "BankAccountPseResponse",
            },
          ],
        },
        "DetailCreatePaymentlinkResponse": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "PaymentLinkOfpi",
            },
            {
              "docs": undefined,
              "type": "PaymentLinkPse",
            },
          ],
        },
        "DetailCustomerResponse": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "CustomerOfpi",
            },
            {
              "docs": undefined,
              "type": "CustomerPse",
            },
          ],
        },
        "DetailInvoiceResponse": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "InvoiceWithIdSat",
            },
            {
              "docs": undefined,
              "type": "InvoiceDian",
            },
          ],
        },
        "DetailTaxDeclarationResponse": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "TaxDeclarationIndividual",
            },
            {
              "docs": undefined,
              "type": "TaxDeclarationBusiness",
            },
          ],
        },
        "DetailTaxReturnResponse": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "TaxReturnPersonal",
            },
            {
              "docs": undefined,
              "type": "TaxReturnPersonalMonthly",
            },
            {
              "docs": undefined,
              "type": "TaxReturnBusiness",
            },
            {
              "docs": undefined,
              "type": "TaxReturnBusinessMonthly",
            },
          ],
        },
        "DetailTaxStatusResponse": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "TaxStatusSat",
            },
            {
              "docs": undefined,
              "type": "TaxStatusDian",
            },
          ],
        },
        "DisplayConfirmationRequiredContentPse": {
          "docs": "Object detailing the next steps you should follow for a specific \`next_step\` type.",
          "properties": {
            "payer_institution": {
              "docs": undefined,
              "type": "optional<PaymentInstitution>",
            },
          },
        },
        "DisplayConfirmationRequiredOfpi": {
          "docs": "Object detailing the next steps you should follow for a specific \`next_step\` type.",
          "properties": {
            "beneficiary_bank_account": {
              "docs": undefined,
              "type": "optional<BeneficiaryBankAccountOfpi>",
            },
            "payer_identifier": {
              "docs": "The payer's ID.",
              "type": "optional<string>",
            },
            "payer_institution": {
              "docs": undefined,
              "type": "optional<PaymentInstitution>",
            },
            "payer_name": {
              "docs": "The name of the payer.",
              "type": "optional<string>",
            },
          },
        },
        "DisplayCredentialsRequiredContentPse": {
          "docs": "Object containing form fields for the required credentials (for example, \`username\` or \`password\`) in this step.",
          "properties": {
            "payer_institution": {
              "docs": undefined,
              "type": "optional<PaymentInstitution>",
            },
          },
        },
        "DisplayCustomerBankAccountsContentPse": {
          "docs": "Object detailing what payment method information you need to display.",
          "properties": {
            "beneficiary_bank_account": {
              "docs": undefined,
              "type": "optional<BeneficiaryBankAccountPse>",
            },
            "customer_bank_accounts": {
              "docs": "Array of customer bank account objects.",
              "type": "optional<list<PaymentMethodInfoCustomerBankAccountsPse>>",
            },
          },
        },
        "DisplayPaymentFailed": {
          "docs": "Details regarding the payer institution.",
          "properties": {
            "payer_institution": {
              "docs": undefined,
              "type": "optional<PaymentInstitution>",
            },
          },
        },
        "DisplayPaymentMethodInformationContentOfpi": {
          "docs": "Object detailing what payment method information you need to display.",
          "properties": {
            "institutions": {
              "docs": "An array of institution objects.",
              "type": "optional<list<PaymentInstitution>>",
            },
          },
        },
        "DisplayPaymentMethodInformationContentPse": {
          "docs": "Object detailing what payment method information you need to display.",
          "properties": {
            "customer_bank_accounts": {
              "docs": "Array of bank account objects.

**Note**: If there are no customer accounts saved in the Belvo database, we return an empty array.",
              "type": "optional<list<PaymentMethodInfoCustomerBankAccountsPse>>",
            },
            "institutions": {
              "docs": "An array of institution objects.",
              "type": "optional<list<PaymentInstitution>>",
            },
          },
        },
        "DisplayPaymentProcessing": {
          "docs": "Details regarding the payer institution.",
          "properties": {
            "payer_institution": {
              "docs": undefined,
              "type": "optional<PaymentInstitution>",
            },
          },
        },
        "DisplayPaymentSucceeded": {
          "docs": "Details regarding the payer institution.",
          "properties": {
            "payer_institution": {
              "docs": undefined,
              "type": "optional<PaymentInstitution>",
            },
          },
        },
        "DisplayTokenRequiredContentPse": {
          "docs": undefined,
          "properties": {
            "payer_institution": {
              "docs": undefined,
              "type": "optional<PaymentInstitution>",
            },
          },
        },
        "DocumentIdBusiness": {
          "docs": "Object containing information about the ID document of the tax payer.",
          "properties": {
            "document_number": {
              "docs": "The number of the ID document.",
              "type": "string",
            },
            "document_type": {
              "docs": "The type of ID document.",
              "type": "string",
            },
          },
        },
        "DocumentIdIndividual": {
          "docs": "Object containing information about the ID document of the tax payer.",
          "properties": {
            "document_number": {
              "docs": "The number of the ID document.",
              "type": "string",
            },
            "document_type": {
              "docs": "The type of ID document.",
              "type": "string",
            },
          },
        },
        "DocumentInformationBusiness": {
          "docs": "Object containing detailed information about the fiscal document.",
          "properties": {
            "form_number": {
              "docs": "The institution-provided identifier for the tax declaration.",
              "type": "string",
            },
            "name": {
              "docs": "The name of the tax document.",
              "type": "string",
            },
            "type": {
              "docs": "The type of tax declaration form. For DIAN, this will be either \`110\` or \`210\`.",
              "type": "string",
            },
            "year": {
              "docs": "The year of this tax declaration.
",
              "type": "optional<integer>",
            },
          },
        },
        "DocumentInformationIndividual": {
          "docs": "Object containing detailed information about the fiscal document.",
          "properties": {
            "form_number": {
              "docs": "Institution-provided identifier for the tax declaration.",
              "type": "string",
            },
            "name": {
              "docs": "The name of the tax document.",
              "type": "string",
            },
            "type": {
              "docs": "The type of tax declaration form. For DIAN, this will be either \`110\` or \`210\`.",
              "type": "string",
            },
            "year": {
              "docs": "The year of this tax declaration.
",
              "type": "optional<integer>",
            },
          },
        },
        "EmploymentRecord": {
          "docs": "Emploment record response payload",
          "properties": {
            "collected_at": {
              "docs": "The ISO-8601 timestamp when the data point was collected.",
              "type": "optional<string>",
            },
            "created_at": {
              "docs": "The ISO-8601 timestamp of when the data point was initially created in Belvo's database.",
              "type": "optional<string>",
            },
            "employment_records": {
              "docs": "Details regarding the individual's employment history.",
              "type": "optional<list<EmploymentRecordDetail>>",
            },
            "files": {
              "docs": "Additional PDF binary files relating to the individual's employment.",
              "type": "optional<list<EmploymentRecordFile>>",
            },
            "id": {
              "docs": "The unique identifier created by Belvo for the current IMSS statement.",
              "type": "optional<string>",
            },
            "internal_identification": {
              "docs": "Unique ID for user according to the institution. For IMSS Mexico, this is the CURP.",
              "type": "optional<string>",
            },
            "link": {
              "docs": "The unique identifier created by Belvo for the current user.",
              "type": "optional<string>",
            },
            "personal_data": {
              "docs": undefined,
              "type": "optional<EmploymentRecordPersonalData>",
            },
            "report_date": {
              "docs": "The date when the employment record report was generated, in \`YYYY-MM-DD\` format.",
              "type": "optional<string>",
            },
            "social_security_summary": {
              "docs": undefined,
              "type": "optional<EmploymentRecordSocialSecuritySummary>",
            },
          },
        },
        "EmploymentRecordDetail": {
          "docs": "Details regarding the individual's employment history.",
          "properties": {
            "collected_at": {
              "docs": "The ISO-8601 timestamp when the data point was collected.",
              "type": "optional<string>",
            },
            "currency": {
              "docs": "The three-letter currency code in which the salary is paid.
",
              "type": "optional<string>",
            },
            "employer": {
              "docs": "The official name of the employer.
",
              "type": "optional<string>",
            },
            "employer_id": {
              "docs": "The official ID of the employer, according to the country.
",
              "type": "optional<string>",
            },
            "employment_status_updates": {
              "docs": "Details regarding any employment changes of the individual.",
              "type": "optional<list<EmploymentRecordEmploymentStatusUpdates>>",
            },
            "end_date": {
              "docs": "Date when employment finished, in \`YYYY-MM-DD\` format.
",
              "type": "optional<string>",
            },
            "monthly_salary": {
              "docs": "The monthly salary of the individual, including any additional perks.
",
              "type": "optional<double>",
            },
            "most_recent_base_salary": {
              "docs": "The most recent base salary the individual earned.

For Mexico, this is the *daily* rate that the individual earned, including the perks that the individual is entitled to throughout the year.
",
              "type": "optional<double>",
            },
            "start_date": {
              "docs": "Date when employment started, in \`YYYY-MM-DD\` format.
",
              "type": "optional<string>",
            },
            "state": {
              "docs": "In what geographical state the individual was employed, according to the country.
",
              "type": "optional<string>",
            },
            "weeks_employed": {
              "docs": "Number of weeks that the individual was employed.
",
              "type": "optional<integer>",
            },
          },
        },
        "EmploymentRecordDocumentId": {
          "docs": "Details regarding the individual's ID documents.",
          "properties": {
            "document_number": {
              "docs": "The ID document's number (as a string).
",
              "type": "optional<string>",
            },
            "document_type": {
              "docs": undefined,
              "type": "optional<EnumEmploymentRecordDocumentType>",
            },
          },
        },
        "EmploymentRecordEmploymentStatusUpdates": {
          "docs": "Details regarding any employment changes of the individual.",
          "properties": {
            "base_salary": {
              "docs": "The base salary of the individual, current as of the \`update_date\`.
",
              "type": "optional<double>",
            },
            "event": {
              "docs": undefined,
              "type": "optional<EnumEmploymentRecordStatusUpdateEvents>",
            },
            "update_date": {
              "docs": "The date that the employment event occured, in \`YYYY-MM-DD\` format.
",
              "type": "optional<string>",
            },
          },
        },
        "EmploymentRecordEntitlement": {
          "docs": "Details regarding the benefits the individual is entitled to.",
          "properties": {
            "entitled_to_company_benefits": {
              "docs": "Indicates whether or not the individual is entitled to company benefits.
",
              "type": "optional<boolean>",
            },
            "entitled_to_health_insurance": {
              "docs": "Indicated whether or not the individual is entitled to health insurance.
",
              "type": "optional<boolean>",
            },
            "status": {
              "docs": undefined,
              "type": "optional<EnumEmploymentRecordStatus>",
            },
            "valid_until": {
              "docs": "Date until when the individual is covered by health insurance and/or company benefits. If \`null\` the employee is currently working and no end date is required.
",
              "type": "optional<string>",
            },
          },
        },
        "EmploymentRecordFile": {
          "docs": "Additional PDF binary files relating to the individual's employment.",
          "properties": {
            "type": {
              "docs": "The title of the document.
",
              "type": "optional<string>",
            },
            "value": {
              "docs": "The PDF binary of the file (as a string).
",
              "type": "optional<string>",
            },
          },
        },
        "EmploymentRecordPersonalData": {
          "docs": "Details regarding the personal information of the individual.",
          "properties": {
            "birth_date": {
              "docs": "The date of the birth of the individual, in \`YYYY-MM-DD\` format.
",
              "type": "optional<string>",
            },
            "document_ids": {
              "docs": "Details regarding the individual's ID documents.",
              "type": "optional<list<EmploymentRecordDocumentId>>",
            },
            "email": {
              "docs": "The email address of the individual (as provided in the initial POST request).
",
              "type": "optional<string>",
            },
            "entitlements": {
              "docs": undefined,
              "type": "optional<EmploymentRecordEntitlement>",
            },
            "first_name": {
              "docs": "The first name of the individual.
",
              "type": "optional<string>",
            },
            "last_name": {
              "docs": "The last name of the individual.
",
              "type": "optional<string>",
            },
            "official_name": {
              "docs": "The legal name of the individual
",
              "type": "optional<string>",
            },
          },
        },
        "EmploymentRecordSocialSecuritySummary": {
          "docs": "Details regarding the individual's social security contributions.",
          "properties": {
            "weeks_contributed": {
              "docs": "Number of weeks the individual has contributed to their social security, based on the number of weeks the individual has worked according to IMSS.
",
              "type": "optional<integer>",
            },
            "weeks_redeemed": {
              "docs": "Number of weeks the individual needed to take out of their pension.
",
              "type": "optional<integer>",
            },
            "weeks_reinstated": {
              "docs": "Number of weeks the individual has paid back into their pension (*AFORE*), after having redeemed them previously.
",
              "type": "optional<integer>",
            },
          },
        },
        "EmploymentRecordsPaginatedResponse": {
          "docs": undefined,
          "properties": {
            "count": {
              "docs": "The total number of results in your Belvo account.",
              "type": "optional<integer>",
            },
            "next": {
              "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is \`null\`.

In our documentation example, we use \`{endpoint}\` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, \`accounts\` or \`owners\`).
",
              "type": "optional<string>",
            },
            "previous": {
              "docs": "The URL to the previous page of results. If there is no previous page, the value is \`null\`.",
              "type": "optional<string>",
            },
            "results": {
              "docs": "Array of employment record objects.",
              "type": "optional<list<EmploymentRecord>>",
            },
          },
        },
        "EnumAccountCategory": {
          "docs": "The type of account.
We return one of the following enum values:
  - \`CHECKING_ACCOUNT\`
  - \`CREDIT_CARD\`
  - \`INVESTMENT_ACCOUNT\`
  - \`LOAN_ACCOUNT\`
  - \`PENSION_FUND_ACCOUNT\`
  - \`RECEIVABLES_ACCOUNT\`
  - \`SAVINGS_ACCOUNT\`
  - \`UNCATEGORIZED\`
  - \`null\`
",
          "type": "optional<string>",
        },
        "EnumBankAccountHolderTypeOfpi": {
          "docs": "The type of bank account. Can be either \`INDIVIDUAL\` or \`BUSINESS\`.",
          "enum": [
            {
              "name": "INDIVIDUAL",
              "value": "INDIVIDUAL",
            },
            {
              "name": "BUSINESS",
              "value": "BUSINESS",
            },
          ],
        },
        "EnumBankAccountHolderTypePse": {
          "docs": "The type of bank account to create in Belvo. For business bank accounts, this field must the set to \`BUSINESS\`.",
          "enum": [
            {
              "name": "BUSINESS",
              "value": "BUSINESS",
            },
          ],
        },
        "EnumBankAccountPixAccountTypeOfpi": {
          "docs": "The type of bank account. Can be either:

  - \`CHECKINGS\`
  - \`SAVINGS\`
  - \`SALARY\`",
          "enum": [
            {
              "name": "CHECKINGS",
              "value": "CHECKINGS",
            },
            {
              "name": "SAVINGS",
              "value": "SAVINGS",
            },
            {
              "name": "SALARY",
              "value": "SALARY",
            },
          ],
        },
        "EnumCategorizationAccountCategory": {
          "docs": "The type of account.
Can be either:
  - \`CHECKING_ACCOUNT\`
  - \`CREDIT_CARD\`
  - \`LOAN_ACCOUNT\`
  - \`SAVINGS_ACCOUNT\`",
          "enum": [
            {
              "name": "CHECKING_ACCOUNT",
              "value": "CHECKING_ACCOUNT",
            },
            {
              "name": "CREDIT_CARD",
              "value": "CREDIT_CARD",
            },
            {
              "name": "LOAN_ACCOUNT",
              "value": "LOAN_ACCOUNT",
            },
            {
              "name": "SAVINGS_ACCOUNT",
              "value": "SAVINGS_ACCOUNT",
            },
          ],
        },
        "EnumCategorizationAccountHolderType": {
          "docs": "The type of account holder.
Can be either:

  - \`INDIVIDUAL\`
  - \`BUSINESS\`",
          "enum": [
            {
              "name": "INDIVIDUAL",
              "value": "INDIVIDUAL",
            },
            {
              "name": "BUSINESS",
              "value": "BUSINESS",
            },
          ],
        },
        "EnumCategorizationTransactionCategory": {
          "docs": "The name of the category to which this transaction belongs. For more info about this feature, check our [Transaction categorization](https://developers.belvo.com/docs/banking#categorizing-transactions) article. 

We return one of the following enum values:

  - \`Bills & Utilities\`
  - \`Credits & Loans\`
  - \`Deposits\`
  - \`Fees & Charges\`
  - \`Food & Groceries\`
  - \`Home & Life\`
  - \`Income & Payments\`
  - \`Insurance\`
  - \`Investments & Savings\`
  - \`Online Platforms & Leisure\`
  - \`Personal Shopping\`
  - \`Taxes\`
  - \`Transfers\`
  - \`Transport & Travel\`
  - \`Unknown\`
  - \`Withdrawal & ATM\`
  - \`null\`
",
          "type": "optional<string>",
        },
        "EnumCategorizationTransactionSubcategory": {
          "docs": "The transactions subcategory. For more info about this feature, check our [Transaction categorization](https://developers.belvo.com/docs/banking#categorizing-transactions) article. 

We return one of the following enum values:

  - \`Electricity & Energy\`
  - \`Rent\`
  - \`Telecommunications\`
  - \`Water\`
  - \`Auto\`
  - \`Credit Card\`
  - \`Instalment\`
  - \`Interest & Charges\`
  - \`Mortgage\`
  - \`Pay Advance\`
  - \`Personal\`
  - \`Adjustments\`
  - \`Bank Fees\`
  - \`Chargeback\`
  - \`Refund\`
  - \`Blocked Balances\`
  - \`Alimony\`
  - \`Alcohol & Tobacco\`
  - \`Bakery & Coffee\`
  - \`Bars & Nightclubs\`
  - \`Convenience Store\`
  - \`Delivery\`
  - \`Groceries\`
  - \`Restaurants\`
  - \`Education\`
  - \`Gyms & Fitness\`
  - \`Hair & Beauty\`
  - \`Health\`
  - \`Home Decor & Appliances\`
  - \`Laundry & Dry Cleaning\`
  - \`Pharmacies\`
  - \`Professional Services\`
  - \`Veterinary Services\`
  - \`Freelance\`
  - \`Interest\`
  - \`Retirement\`
  - \`Salary\`
  - \`Government\`
  - \`Home Insurance\`
  - \`Auto Insurance\`
  - \`Health & Life Insurance\`
  - \`Savings\`
  - \`Fixed income\`
  - \`Equity\`
  - \`Investment Funds\`
  - \`Derivatives\`
  - \`Cryptocurrencies\`
  - \`Apps, Software and Cloud Services\`
  - \`Events, Parks and Museums\`
  - \`Gambling\`
  - \`Gaming\`
  - \`Lottery\`
  - \`Movie & Audio\`
  - \`Books & News\`
  - \`Clothing & Accessories\`
  - \`Department Store\`
  - \`Electronics\`
  - \`E-commerce\`
  - \`Gifts\`
  - \`Office Supplies\`
  - \`Pet Supplies\`
  - \`Auto Tax & Fees\`
  - \`Donation\`
  - \`Government Fees\`
  - \`Income Tax\`
  - \`Real Estate Tax & Fees\`
  - \`Tax Return\`
  - \`Accommodation\`
  - \`Auto Expenses\`
  - \`Auto Rental\`
  - \`Flights\`
  - \`Gas\`
  - \`Mileage Programs\`
  - \`Parking & Tolls\`
  - \`Public Transit\`
  - \`Taxis & Rideshares\`
  - \`Other\`
  - \`null\`",
          "type": "optional<string>",
        },
        "EnumCategorizationTransactionType": {
          "docs": "The direction of the transaction.
Can be either:

  - \`INFLOW\` indicates a received transaction.
  - \`OUTFLOW\` indicates a sent transaction.",
          "enum": [
            {
              "name": "INFLOW",
              "value": "INFLOW",
            },
            {
              "name": "OUTFLOW",
              "value": "OUTFLOW",
            },
          ],
        },
        "EnumCustomerIdentifierTypeOfpi": {
          "docs": "The customer's ID document type.

- 🇧🇷 Brazil options: \`CPF\` or \`CNPJ\`.
",
          "enum": [
            {
              "name": "CPF",
              "value": "CPF",
            },
            {
              "name": "CNPJ",
              "value": "CNPJ",
            },
          ],
        },
        "EnumCustomerIdentifierTypePse": {
          "docs": "The customer's ID document type.

- 🇨🇴 Colombia options: \`CC\`, \`PP\`, \`CE\`, \`TI\`, or \`NIT\`.
",
          "enum": [
            {
              "name": "CC",
              "value": "CC",
            },
            {
              "name": "PP",
              "value": "PP",
            },
            {
              "name": "CE",
              "value": "CE",
            },
            {
              "name": "TI",
              "value": "TI",
            },
            {
              "name": "NIT",
              "value": "NIT",
            },
          ],
        },
        "EnumCustomerType": {
          "docs": "The type of customer. Can be either:

  - \`INDIVIDUAL\`
  - \`BUSINESS\`
    

**Notes:** For 🇨🇴 Colombia's PSE, you can only create customers of type \`INDIVIDUAL\`.
",
          "enum": [
            {
              "name": "INDIVIDUAL",
              "value": "INDIVIDUAL",
            },
            {
              "name": "BUSINESS",
              "value": "BUSINESS",
            },
          ],
        },
        "EnumEmploymentRecordDocumentType": {
          "docs": undefined,
          "enum": [
            {
              "name": "NSS",
              "value": "NSS",
            },
            {
              "name": "CURP",
              "value": "CURP",
            },
          ],
        },
        "EnumEmploymentRecordStatus": {
          "docs": undefined,
          "enum": [
            {
              "name": "EMPLOYED",
              "value": "EMPLOYED",
            },
            {
              "name": "UNEMPLOYED",
              "value": "UNEMPLOYED",
            },
          ],
        },
        "EnumEmploymentRecordStatusUpdateEvents": {
          "docs": "The event that caused the change in employment status or salary. We return one of the following values:
  
  - \`DISMISSED_RESIGNED\`
  - \`SALARY_MODIFICATION\`
  - \`HIRED\`
  - \`VOLUNTARY_CONTRIBUTION\`
  - \`ABSENCE\`
  - \`SICK_LEAVE\`
",
          "enum": [
            {
              "name": "DISMISSED_RESIGNED",
              "value": "DISMISSED_RESIGNED",
            },
            {
              "name": "SALARY_MODIFICATION",
              "value": "SALARY_MODIFICATION",
            },
            {
              "name": "HIRED",
              "value": "HIRED",
            },
            {
              "name": "VOLUNTARY_CONTRIBUTION",
              "value": "VOLUNTARY_CONTRIBUTION",
            },
            {
              "name": "ABSENCE",
              "value": "ABSENCE",
            },
            {
              "name": "SICK_LEAVE",
              "value": "SICK_LEAVE",
            },
          ],
        },
        "EnumIncomeMinimumConfidenceLevelRequest": {
          "docs": "The minimum confidence level of the incomes you want to get information for.

You can send through one of the following values:

  - \`HIGH\`
  - \`MEDIUM\`
  - \`LOW\`
",
          "enum": [
            {
              "name": "HIGH",
              "value": "HIGH",
            },
            {
              "name": "MEDIUM",
              "value": "MEDIUM",
            },
            {
              "name": "LOW",
              "value": "LOW",
            },
          ],
        },
        "EnumIncomeSourceType": {
          "docs": "The type of source we generate income insights from.
We return one of the following enum values:

  - \`BANK\`
",
          "enum": [
            {
              "name": "BANK",
              "value": "BANK",
            },
          ],
        },
        "EnumIncomeStreamConfidence": {
          "docs": "Belvo's level of confidence for future incomes.

We return one of the following enum values:

  - \`HIGH\`
  - \`MEDIUM\`
  - \`LOW\`
",
          "enum": [
            {
              "name": "HIGH",
              "value": "HIGH",
            },
            {
              "name": "MEDIUM",
              "value": "MEDIUM",
            },
            {
              "name": "LOW",
              "value": "LOW",
            },
          ],
        },
        "EnumIncomeStreamFrequency": {
          "docs": "How often the income is received.

We return one of the following enum values:

  - \`MONTHLY\` - For transactions that occur once per month.
  - \`FORTNIGHTLY\` - For transactions that occur once every two weeks.
  - \`WEEKLY\` - For transactions that occur once per week.
  - \`IRREGULAR\` - For transactions that do not occur on a defined frequency pattern.
  - \`SINGLE\` - For transactions that occur only once and do not repeat.
",
          "enum": [
            {
              "name": "MONTHLY",
              "value": "MONTHLY",
            },
            {
              "name": "FORTNIGHTLY",
              "value": "FORTNIGHTLY",
            },
            {
              "name": "WEEKLY",
              "value": "WEEKLY",
            },
            {
              "name": "IRREGULAR",
              "value": "IRREGULAR",
            },
            {
              "name": "SINGLE",
              "value": "SINGLE",
            },
          ],
        },
        "EnumIncomeStreamType": {
          "docs": "The type of income used in the calculations.

We return one of the following enum values:

  - \`SALARY\`
  - \`GOVERNMENT\`
  - \`INTEREST\`
  - \`RENT\`
  - \`RETIREMENT\`
  - \`FREELANCE\`
  - \`ALTERNATIVE_INCOME\`
  - \`TRANSFER\`
  - \`DEPOSIT\`
  - \`UNKNOWN\`
",
          "enum": [
            {
              "name": "SALARY",
              "value": "SALARY",
            },
            {
              "name": "GOVERNMENT",
              "value": "GOVERNMENT",
            },
            {
              "name": "INTEREST",
              "value": "INTEREST",
            },
            {
              "name": "RENT",
              "value": "RENT",
            },
            {
              "name": "RETIREMENT",
              "value": "RETIREMENT",
            },
            {
              "name": "FREELANCE",
              "value": "FREELANCE",
            },
            {
              "name": "ALTERNATIVE_INCOME",
              "value": "ALTERNATIVE_INCOME",
            },
            {
              "name": "TRANSFER",
              "value": "TRANSFER",
            },
            {
              "name": "DEPOSIT",
              "value": "DEPOSIT",
            },
            {
              "name": "UNKNOWN",
              "value": "UNKNOWN",
            },
          ],
        },
        "EnumIncomeVerificationAccountCategory": {
          "docs": "The type of account.
Can be either:
  - \`CHECKING_ACCOUNT\`
  - \`SAVINGS_ACCOUNT\`",
          "enum": [
            {
              "name": "CHECKING_ACCOUNT",
              "value": "CHECKING_ACCOUNT",
            },
            {
              "name": "SAVINGS_ACCOUNT",
              "value": "SAVINGS_ACCOUNT",
            },
          ],
        },
        "EnumIncomeVerificationAccountHolderType": {
          "docs": "The type of account holder. Can be:

  - \`INDIVIDUAL\`",
          "enum": [
            {
              "name": "INDIVIDUAL",
              "value": "INDIVIDUAL",
            },
          ],
        },
        "EnumIncomeVerificationType": {
          "docs": undefined,
          "enum": [
            {
              "name": "INFLOW",
              "value": "INFLOW",
            },
          ],
        },
        "EnumInstitutionIntegrationType": {
          "docs": "The type of technology used to access the institution. We return one of the following values:

- \`credentials\`: Uses Belvo's scraping technology, combined with user credentials, to perform requests.
- \`openbanking\`: Uses the bank's openbanking API to perform requests.
",
          "enum": [
            {
              "name": "credentials",
              "value": "credentials",
            },
            {
              "name": "openbanking",
              "value": "openbanking",
            },
          ],
        },
        "EnumInstitutionStatus": {
          "docs": "Indicates whether Belvo's integration with the institution is currently active (\`healthy\`) or undergoing maintenance (\`down\`).
",
          "enum": [
            {
              "name": "healthy",
              "value": "healthy",
            },
            {
              "name": "down",
              "value": "down",
            },
          ],
        },
        "EnumInstitutionType": {
          "docs": "The type of institution. We return one of the following values:

  - \`bank\`
  - \`fiscal\`
  - \`employment\`
",
          "enum": [
            {
              "name": "bank",
              "value": "bank",
            },
            {
              "name": "fiscal",
              "value": "fiscal",
            },
            {
              "name": "employment",
              "value": "employment",
            },
          ],
        },
        "EnumInvestmentPortfolioInstrumentType": {
          "docs": "The instrument type. For more information about instruments, please see our [Investments DevPortal article](https://developers.belvo.com/docs/investments#instruments).

We return one of the following values:

  - \`BOND\`
  - \`DEPOSIT\`
  - \`ETF\`
  - \`FUND\`
  - \`OTHER\`
  - \`PENSION\`
  - \`STOCK\`
",
          "enum": [
            {
              "name": "BOND",
              "value": "BOND",
            },
            {
              "name": "DEPOSIT",
              "value": "DEPOSIT",
            },
            {
              "name": "ETF",
              "value": "ETF",
            },
            {
              "name": "FUND",
              "value": "FUND",
            },
            {
              "name": "OTHER",
              "value": "OTHER",
            },
            {
              "name": "PENSION",
              "value": "PENSION",
            },
            {
              "name": "STOCK",
              "value": "STOCK",
            },
          ],
        },
        "EnumInvestmentPortfolioType": {
          "docs": "The portfolio type.

We return one of the following values:

  - \`FIXED_INCOME\`
  - \`OTHER\`
  - \`PENSION\`
  - \`VARIABLE_INCOME\`
",
          "enum": [
            {
              "name": "FIXED_INCOME",
              "value": "FIXED_INCOME",
            },
            {
              "name": "OTHER",
              "value": "OTHER",
            },
            {
              "name": "PENSION",
              "value": "PENSION",
            },
            {
              "name": "VARIABLE_INCOME",
              "value": "VARIABLE_INCOME",
            },
          ],
        },
        "EnumInvoiceAllowedIncomeTypesRequest": {
          "docs": "The categories of the incomes you want to get information for. 
You can send through one or more of the following values:
  - \`SALARY\`
  - \`GOVERNMENT\`
  - \`INTEREST\`
  - \`RENT\`
  - \`RETIREMENT\`
  - \`FREELANCE\`
  - \`ALTERNATIVE_INCOME\`
  - \`TRANSFER\`
  - \`DEPOSIT\`
  - \`UNKNOWN\`",
          "enum": [
            {
              "name": "SALARY",
              "value": "SALARY",
            },
            {
              "name": "GOVERNMENT",
              "value": "GOVERNMENT",
            },
            {
              "name": "INTEREST",
              "value": "INTEREST",
            },
            {
              "name": "RENT",
              "value": "RENT",
            },
            {
              "name": "RETIREMENT",
              "value": "RETIREMENT",
            },
            {
              "name": "FREELANCE",
              "value": "FREELANCE",
            },
            {
              "name": "ALTERNATIVE_INCOME",
              "value": "ALTERNATIVE_INCOME",
            },
            {
              "name": "TRANSFER",
              "value": "TRANSFER",
            },
            {
              "name": "DEPOSIT",
              "value": "DEPOSIT",
            },
            {
              "name": "UNKNOWN",
              "value": "UNKNOWN",
            },
          ],
        },
        "EnumInvoiceDianInvoiceType": {
          "docs": undefined,
          "enum": [
            {
              "name": "FacturaElectronicaDeVenta",
              "value": "Factura Electrónica de Venta",
            },
          ],
        },
        "EnumInvoiceDianPaymentMethod": {
          "docs": "The payment method used for this invoice, as defined by the legal entity of the country.

For DIAN Colombia, we return one of the following values:

  - \`Contado\`
  - \`Crédito\`
  - \`null\`
",
          "type": "optional<string>",
        },
        "EnumInvoiceSatInvoiceType": {
          "docs": undefined,
          "enum": [
            {
              "name": "Egreso",
              "value": "Egreso",
            },
            {
              "name": "Ingreso",
              "value": "Ingreso",
            },
            {
              "name": "Nomina",
              "value": "Nómina",
            },
            {
              "name": "Pago",
              "value": "Pago",
            },
            {
              "name": "Traslado",
              "value": "Traslado",
            },
          ],
        },
        "EnumInvoiceSatPaymentMethod": {
          "docs": "The payment method code used for this invoice, as defined by the legal entity of the country.

- 🇲🇽 Mexico [SAT catalog reference article](https://developers.belvo.com/docs/sat-catalogs#payment-method). For Mexico, we return \`PUE\`, \`PIP\`, \`PPD\`, or \`null\`.
",
          "type": "optional<string>",
        },
        "EnumInvoiceType": {
          "docs": "The direction of the invoice (from the perspective of the Link owner).
- \`OUTFLOW\` indicates a sent invoice. - \`INFLOW\` indicates a received invoice.
",
          "type": "optional<string>",
        },
        "EnumLinkAccessModeRequest": {
          "docs": "The type of link to create.

- Use \`single\` to do ad hoc one-time POST requests for accounts, owners, and transactions.
- Use \`recurrent\` to have Belvo access information on a recurrent basis so you always have fresh account, owner, balance, and transaction data.

For more information, see our [Links](https://developers.belvo.com/docs/links-and-institutions#links) article.
",
          "enum": [
            {
              "name": "single",
              "value": "single",
            },
            {
              "name": "recurrent",
              "value": "recurrent",
            },
          ],
        },
        "EnumLinkAccessModeResponse": {
          "docs": "The link type.
For more information, see our [Links](https://developers.belvo.com/docs/links-and-institutions#links) article.
We return one of the following enum values:
  - \`single\`
  - \`recurrent\`
  - \`null\`
",
          "type": "optional<string>",
        },
        "EnumLinkRefreshRate": {
          "docs": "The update refresh rate for the recurrent link. For more information, check out our [recurrent link documentation](https://developers.belvo.com/docs/links-and-institutions#recurrent-links) in our DevPortal.
We return one of the following enum values:
  - \`6h\`
  - \`12h\`
  - \`24h\`
  - \`7d\` (default)
  - \`30d\` (once a month)
  - \`null\` (for single links)
",
          "type": "optional<string>",
        },
        "EnumLinkStatus": {
          "docs": "The current status of the link. For more information, see our [Link](https://developers.belvo.com/docs/links-and-institutions#links) article in the devportal.
We return one of the following values:
  - \`valid\`
  - \`invalid\`
  - \`unconfirmed\`
  - \`token_required\`
",
          "enum": [
            {
              "name": "valid",
              "value": "valid",
            },
            {
              "name": "invalid",
              "value": "invalid",
            },
            {
              "name": "unconfirmed",
              "value": "unconfirmed",
            },
            {
              "name": "token_required",
              "value": "token_required",
            },
          ],
        },
        "EnumLoanDataFeeType": {
          "docs": "The type of fee. We return one of the following values:

  - \`OPERATION_FEE\`
  - \`INSURANCE_FEE\`
  - \`OTHERS\`
",
          "enum": [
            {
              "name": "OPERATION_FEE",
              "value": "OPERATION_FEE",
            },
            {
              "name": "INSURANCE_FEE",
              "value": "INSURANCE_FEE",
            },
            {
              "name": "OTHERS",
              "value": "OTHERS",
            },
          ],
        },
        "EnumLoanDataInterestRateType": {
          "docs": undefined,
          "enum": [
            {
              "name": "MONTHLY",
              "value": "MONTHLY",
            },
            {
              "name": "YEARLY",
              "value": "YEARLY",
            },
          ],
        },
        "EnumPaymentIntentHolderTypePse": {
          "docs": "Type of bank account holder. For PSE, this value must be \`INDIVIDUAL\`.",
          "enum": [
            {
              "name": "INDIVIDUAL",
              "value": "INDIVIDUAL",
            },
            {
              "name": "BUSINESS",
              "value": "BUSINESS",
            },
          ],
        },
        "EnumPaymentIntentStatus": {
          "docs": "The current status of the payment intent.
",
          "enum": [
            {
              "name": "REQUIRES_PAYMENT_METHOD",
              "value": "REQUIRES_PAYMENT_METHOD",
            },
            {
              "name": "REQUIRES_ACTION",
              "value": "REQUIRES_ACTION",
            },
            {
              "name": "SUCCEEDED",
              "value": "SUCCEEDED",
            },
            {
              "name": "PROCESSING",
              "value": "PROCESSING",
            },
            {
              "name": "FAILED",
              "value": "FAILED",
            },
          ],
        },
        "EnumPaymentLinkAllowedPaymentMethod": {
          "docs": "Selected payment method type.

  - For 🇧🇷 Brazil's OFPI, the value must be \`open_finance\`.  
  - For 🇨🇴 Colombia's PSE, the value must be \`pse\`.",
          "enum": [
            {
              "name": "open_finance",
              "value": "open_finance",
            },
            {
              "name": "pse",
              "value": "pse",
            },
          ],
        },
        "EnumPaymentLinkProvider": {
          "docs": "The provider used for the payment link. 


- For 🇧🇷 Brazil's OFPI, the value must be \`belvo\`.  
- For 🇨🇴 Colombia's PSE, the value must be \`payments_way\`.
",
          "enum": [
            {
              "name": "belvo",
              "value": "belvo",
            },
            {
              "name": "payments_way",
              "value": "payments_way",
            },
          ],
        },
        "EnumPaymentLinksStatus": {
          "docs": "The current status of the payment link. Can be either:

  - \`ACTIVE\` meaning that the payment intent's status is either \`REQUIRES_PAYMENT_METHOD\`, \`REQUIRES_ACTION\`, or \`PROCESSING\`.
  - \`INACTIVE\` meaning that the payment intent's status is either \`SUCCEEDED\` or \`FAILED\`.

**Note:** You can retrieve the complete payment intent by using our [Get details of a payment link](https://developers.belvo.com/reference/detailcreatepaymentlink) request.",
          "enum": [
            {
              "name": "ACTIVE",
              "value": "ACTIVE",
            },
            {
              "name": "INACTIVE",
              "value": "INACTIVE",
            },
          ],
        },
        "EnumPaymentTransactionType": {
          "docs": "The direction of the transaction.

  - \`INFLOW\` indicates money coming into the account.
  - \`OUTFLOW\` indicates money coming out of the account.",
          "enum": [
            {
              "name": "INFLOW",
              "value": "INFLOW",
            },
            {
              "name": "OUTFLOW",
              "value": "OUTFLOW",
            },
          ],
        },
        "EnumPaymentsCountry": {
          "docs": "The customer's country of residence.


-  BRA (🇧🇷 Brazil)
-  COL (🇨🇴 Colombia)
",
          "enum": [
            {
              "name": "BRA",
              "value": "BRA",
            },
            {
              "name": "COL",
              "value": "COL",
            },
          ],
        },
        "EnumPaymentsCurrency": {
          "docs": "The currency of the amount paid.


  - 🇧🇷 BRL (Brazilian Real)
  - 🇨🇴 COP (Colombian Peso)",
          "enum": [
            {
              "name": "BRL",
              "value": "BRL",
            },
            {
              "name": "COP",
              "value": "COP",
            },
          ],
        },
        "EnumReceivableTransactionFeeType": {
          "docs": undefined,
          "enum": [
            {
              "name": "TRANSACTION_FEE",
              "value": "TRANSACTION_FEE",
            },
          ],
        },
        "EnumReceivableTransactionStatus": {
          "docs": undefined,
          "enum": [
            {
              "name": "APPROVED",
              "value": "APPROVED",
            },
            {
              "name": "CANCELLED",
              "value": "CANCELLED",
            },
            {
              "name": "REVERTED",
              "value": "REVERTED",
            },
            {
              "name": "UNCATEGORIZED",
              "value": "UNCATEGORIZED",
            },
          ],
        },
        "EnumReceivableTransactionType": {
          "docs": "The type of transaction. For example, whether the transaction was a \`VISA_DEBIT\` or a \`MASTERCARD_CREDIT\`.

We return one of the following values:

  - \`VISA_CREDIT\`
  - \`VISA_DEBIT\`
  - \`MASTERCARD_CREDIT\`
  - \`MASTERCARD_DEBIT\`
  - \`ELO_CREDIT\`
  - \`ELO_DEBIT\`
  - \`null\`
",
          "type": "optional<string>",
        },
        "EnumRecurringExpenseCategory": {
          "docs": "The transaction category for the recurring expense. For more information on the available categories, please see our [Transaction categorization documentation](https://developers.belvo.com/docs/banking#categorizing-transactions).

- \`Online Platforms & Leisure\` (Netflix, Spotify, Gym Memberships)
- \`Bills & Utilities\` (electricity, telephone, internet)
- \`Credits & Loans\` (credit card cash advances, student loan, watercraft lease)
- \`Insurance\` (home, car, and health & life insurance)
- \`Transport & Travel\` (Uber trip, airbnb, parking)
- \`Taxes\` (service fee, donation, court taxes)
",
          "enum": [
            {
              "name": "BillsUtilities",
              "value": "Bills & Utilities",
            },
            {
              "name": "CreditsLoans",
              "value": "Credits & Loans",
            },
            {
              "name": "Insurance",
              "value": "Insurance",
            },
            {
              "name": "OnlinePlatformsLeisure",
              "value": "Online Platforms & Leisure",
            },
            {
              "name": "TransportTravel",
              "value": "Transport & Travel",
            },
            {
              "name": "Taxes",
              "value": "Taxes",
            },
          ],
        },
        "EnumRecurringExpenseFrequency": {
          "docs": "The frequency at which this recurring expense occurs.


ℹ️ **Note:** Belvo only identifies \`MONTHLY\` frequencies.
",
          "enum": [
            {
              "name": "MONTHLY",
              "value": "MONTHLY",
            },
          ],
        },
        "EnumRecurringExpensePaymentType": {
          "docs": undefined,
          "enum": [
            {
              "name": "SUBSCRIPTION",
              "value": "SUBSCRIPTION",
            },
            {
              "name": "REGULAR",
              "value": "REGULAR",
            },
          ],
        },
        "EnumTaxComplianceStatusOutcome": {
          "docs": undefined,
          "enum": [
            {
              "name": "POSITIVE",
              "value": "POSITIVE",
            },
            {
              "name": "NEGATIVE",
              "value": "NEGATIVE",
            },
            {
              "name": "NO_OBLIGATIONS",
              "value": "NO_OBLIGATIONS",
            },
          ],
        },
        "EnumTaxRetentionPaymentStatus": {
          "docs": undefined,
          "enum": [
            {
              "name": "PAID",
              "value": "PAID",
            },
            {
              "name": "PROVISIONED",
              "value": "PROVISIONED",
            },
          ],
        },
        "EnumTaxRetentionReceiverNationality": {
          "docs": undefined,
          "enum": [
            {
              "name": "NATIONAL",
              "value": "NATIONAL",
            },
            {
              "name": "FOREIGN",
              "value": "FOREIGN",
            },
          ],
        },
        "EnumTaxRetentionType": {
          "docs": "The type of tax retention in relation to the invoice (from the perspective of the Link owner).

- \`OUTFLOW\` relates to a tax retention for a sent invoice.
- \`INFLOW\` related to a tax retention for a received invoice.
",
          "enum": [
            {
              "name": "OUTFLOW",
              "value": "OUTFLOW",
            },
            {
              "name": "INFLOW",
              "value": "INFLOW",
            },
          ],
        },
        "EnumTransactionBillStatus": {
          "docs": "The status of the bill that the transaction appears on. Can be one of:

  - \`PAID\`: The bill has been paid in full.
  - \`CLOSED\`: The bill has been closed by the institution.
  - \`OPEN\`: The bill is currently open. (Note: This is the main bill that Belvo retrieves balance data from).
  - \`FUTURE\`: The bill is pending.
  - \`null\`: No bill status was identified.
  
ℹ️ Note: Some banks consider CLOSED as PAID.",
          "type": "optional<string>",
        },
        "EnumTransactionCategory": {
          "docs": "The name of the category to which this transaction belongs.

> **Get transaction categorization**
With [Transaction categorization](https://developers.belvo.com/docs/banking#categorizing-transactions), we clean and categorize transactions for you, turning raw data into actionable insights. To enable this feature, just [reach out](https://belvo.com/contact/?utm_source=documentation) to us, and we'll get right to it.

We return one of the following enum values:

  - \`Bills & Utilities\`
  - \`Credits & Loans\`
  - \`Deposits\`
  - \`Fees & Charges\`
  - \`Food & Groceries\`
  - \`Home & Life\`
  - \`Income & Payments\`
  - \`Insurance\`
  - \`Investments & Savings\`
  - \`Online Platforms & Leisure\`
  - \`Personal Shopping\`
  - \`Taxes\`
  - \`Transfers\`
  - \`Transport & Travel\`
  - \`Unknown\`*
  - \`Withdrawal & ATM\`
  - \`null\`


  \\* For clients not using our Transaction Categorization product, we return \`null\` instead.
",
          "type": "optional<string>",
        },
        "EnumTransactionStatus": {
          "docs": "The status of the transaction. We return one of the following values:

  - \`PENDING\`
  - \`PROCESSED\`
  - \`UNCATEGORIZED\`
  - \`null\`
",
          "type": "optional<string>",
        },
        "EnumTransactionSubcategory": {
          "docs": "The transactions subcategory.

  > **Get transaction categorization**
  For clients not using our [Transaction categorization](https://developers.belvo.com/docs/banking#categorizing-transactions), we return \`null\` instead. To enable this feature, just [reach out](https://belvo.com/contact/?utm_source=documentation) to us, and we'll get right to it.


We return one of the following enum values:

  - \`Electricity & Energy\`
  - \`Rent\`
  - \`Telecommunications\`
  - \`Water\`
  - \`Auto\`
  - \`Credit Card\`
  - \`Instalment\`
  - \`Interest & Charges\`
  - \`Mortgage\`
  - \`Pay Advance\`
  - \`Personal\`
  - \`Adjustments\`
  - \`Bank Fees\`
  - \`Chargeback\`
  - \`Refund\`
  - \`Blocked Balances\`
  - \`Alimony\`
  - \`Alcohol & Tobacco\`
  - \`Bakery & Coffee\`
  - \`Bars & Nightclubs\`
  - \`Convenience Store\`
  - \`Delivery\`
  - \`Groceries\`
  - \`Restaurants\`
  - \`Education\`
  - \`Gyms & Fitness\`
  - \`Hair & Beauty\`
  - \`Health\`
  - \`Home Decor & Appliances\`
  - \`Laundry & Dry Cleaning\`
  - \`Pharmacies\`
  - \`Professional Services\`
  - \`Veterinary Services\`
  - \`Freelance\`
  - \`Interest\`
  - \`Retirement\`
  - \`Salary\`
  - \`Government\`
  - \`Home Insurance\`
  - \`Auto Insurance\`
  - \`Health & Life Insurance\`
  - \`Savings\`
  - \`Fixed income\`
  - \`Equity\`
  - \`Investment Funds\`
  - \`Derivatives\`
  - \`Cryptocurrencies\`
  - \`Apps, Software and Cloud Services\`
  - \`Events, Parks and Museums\`
  - \`Gambling\`
  - \`Gaming\`
  - \`Lottery\`
  - \`Movie & Audio\`
  - \`Books & News\`
  - \`Clothing & Accessories\`
  - \`Department Store\`
  - \`Electronics\`
  - \`E-commerce\`
  - \`Gifts\`
  - \`Office Supplies\`
  - \`Pet Supplies\`
  - \`Auto Tax & Fees\`
  - \`Donation\`
  - \`Government Fees\`
  - \`Income Tax\`
  - \`Real Estate Tax & Fees\`
  - \`Tax Return\`
  - \`Accommodation\`
  - \`Auto Expenses\`
  - \`Auto Rental\`
  - \`Flights\`
  - \`Gas\`
  - \`Mileage Programs\`
  - \`Parking & Tolls\`
  - \`Public Transit\`
  - \`Taxis & Rideshares\`
  - \`Other\`
  - \`null\`",
          "type": "optional<string>",
        },
        "EnumTransactionType": {
          "docs": "The direction of the transaction:
- \`INFLOW\` indicates money coming into the account.
- \`OUTFLOW\` indicates money going out of the account.
- \`null\` when no information was present regarding the direction of the transaction.
",
          "type": "optional<string>",
        },
        "EquityStatementBusiness": {
          "docs": "Object containing the general fiscal situation of the taxpayer.",
          "properties": {
            "accounts_documents_and_finance_leases_receivable": {
              "docs": "Total of all payments the company expects to receive (for example, from partial invoices that have not been paid yet).",
              "type": "double",
            },
            "cash_and_cash_equivalents": {
              "docs": "Total cash (or cash equivalents) that the business currently holds at the end of the fiscal year.",
              "type": "double",
            },
            "debts": {
              "docs": "Total debts that the company currently has.",
              "type": "double",
            },
            "inventory": {
              "docs": "Total financial value of the company's sellable inventory.",
              "type": "double",
            },
            "investments_and_derivative_financial_instruments": {
              "docs": "Total value of all investments, stocks, or similar, that the company has.",
              "type": "double",
            },
            "property_plant_and_equipment_investment_properties": {
              "docs": "Total value of real estate, plant infrastructure, or equipment that has been purchased.",
              "type": "double",
            },
            "total_gross_equity": {
              "docs": "Total gross equity.",
              "type": "double",
            },
            "total_net_equity": {
              "docs": "The total net equity of the company (\`total_gross_equity\` - \`debts\`).",
              "type": "double",
            },
          },
        },
        "EquityStatementIndividual": {
          "docs": "Object containing the general fiscal situation of the taxpayer.",
          "properties": {
            "total_debts": {
              "docs": "The total debts of the tax_payer",
              "type": "double",
            },
            "total_gross_equity": {
              "docs": "The total gross equity of the tax payer.",
              "type": "double",
            },
            "total_net_equity": {
              "docs": "The total net equity value of the taxpayer.",
              "type": "double",
            },
          },
        },
        "EyodIncomeVerificationBodyRequest": {
          "docs": undefined,
          "properties": {
            "account_category": {
              "docs": undefined,
              "type": "EnumIncomeVerificationAccountCategory",
            },
            "account_holder_id": {
              "docs": "Your unique ID for the account holder, in UUID format.",
              "type": "string",
            },
            "account_holder_type": {
              "docs": undefined,
              "type": "EnumIncomeVerificationAccountHolderType",
            },
            "account_id": {
              "docs": "Your unique ID for the account where the transaction occurred.",
              "type": "string",
            },
            "amount": {
              "docs": "The income amount.",
              "type": "double",
            },
            "currency": {
              "docs": "The three-letter currency code of the income. For example:

  • 🇧🇷 BRL (Brazilian Real)
  • 🇨🇴 COP (Colombian Peso)
  • 🇲🇽 MXN (Mexican Peso)",
              "type": "string",
            },
            "description": {
              "docs": "The description of the income.",
              "type": "string",
            },
            "institution": {
              "docs": "The institution where the account is registered.

**Note:** This is the name that you use in your system to identify the institution. For example BBVA Retail.",
              "type": "string",
            },
            "transaction_id": {
              "docs": "Your unique ID for the income.",
              "type": "string",
            },
            "type": {
              "docs": undefined,
              "type": "EnumIncomeVerificationType",
            },
            "value_date": {
              "docs": "The date when the income transaction occurred, in \`YYYY-MM-DD\` format.",
              "type": "string",
            },
          },
        },
        "GrossIncomeIndividual": {
          "docs": "Object containing the declared gross income of the tax payer.",
          "properties": {
            "capital_income": {
              "docs": "Income received from an investment (such as dividends or from renting a property).",
              "type": "double",
            },
            "earned_income": {
              "docs": "Income received from employment.",
              "type": "double",
            },
            "fee_based_income": {
              "docs": "Income received from emitted invoices (for example, income that independent contractors or freelancers receive).",
              "type": "double",
            },
            "non_labor_income": {
              "docs": "Income that cannot be classified into the other three fields (such as income from cryptocurrencies or regular transfers from parents).",
              "type": "double",
            },
          },
        },
        "HolderBankAccountInformationPse": {
          "docs": "Object with additional information about the individual that holds the bank account.",
          "properties": {
            "first_name": {
              "docs": "The account holder's first name.",
              "type": "optional<string>",
            },
            "last_name": {
              "docs": "The account holder's last name.",
              "type": "optional<string>",
            },
          },
        },
        "HolderBankAccountPse": {
          "docs": "Details regarding the bank account holder.",
          "properties": {
            "information": {
              "docs": undefined,
              "type": "optional<HolderBankAccountInformationPse>",
            },
            "type": {
              "docs": undefined,
              "type": "optional<EnumPaymentIntentHolderTypePse>",
            },
          },
        },
        "HolderBusinessPse": {
          "docs": "Details regarding the business bank account holder.",
          "properties": {
            "information": {
              "docs": undefined,
              "type": "HolderInformationBusinessPse",
            },
            "type": {
              "docs": undefined,
              "type": "EnumBankAccountHolderTypePse",
            },
          },
        },
        "HolderBusinessResponsePse": {
          "docs": "Details regarding the business bank account holder.",
          "properties": {
            "Information": {
              "docs": undefined,
              "type": "optional<HolderInformationBusinessPseResponse>",
            },
            "type": {
              "docs": undefined,
              "type": "EnumBankAccountHolderTypePse",
            },
          },
        },
        "HolderInformationBusinessOfpi": {
          "docs": "Additional information about the bank account holder required in order to create the account for OFPI.",
          "properties": {
            "identifier": {
              "docs": "The document number of the company's ID.",
              "type": "string",
            },
            "identifier_type": {
              "docs": undefined,
              "type": "EnumCustomerIdentifierTypeOfpi",
            },
            "name": {
              "docs": "The bank account holder's first name.",
              "type": "string",
            },
          },
        },
        "HolderInformationBusinessOfpiResponse": {
          "docs": undefined,
          "properties": {
            "identifier": {
              "docs": "The document number of the company's ID.",
              "type": "string",
            },
            "identifier_type": {
              "docs": undefined,
              "type": "EnumCustomerIdentifierTypeOfpi",
            },
            "name": {
              "docs": "The bank account holder's first name.",
              "type": "string",
            },
          },
        },
        "HolderInformationBusinessPse": {
          "docs": undefined,
          "properties": {
            "name": {
              "docs": "The business name.

Note, this is only applicable if the \`holder.type\` is set to \`BUSINESS\`.",
              "type": "string",
            },
          },
        },
        "HolderInformationBusinessPseResponse": {
          "docs": undefined,
          "properties": {
            "name": {
              "docs": "The business name. This value is obfuscated.

Note, this is only applicable if the \`holder.type\` is set to \`BUSINESS\`.",
              "type": "string",
            },
          },
        },
        "HolderInformationIndividualOfpi": {
          "docs": "Additional information about the bank account holder required in order to create the account for OFPI.",
          "properties": {
            "first_name": {
              "docs": "The bank account holder's first name.",
              "type": "string",
            },
            "identifier": {
              "docs": "The document number of the customer's ID.",
              "type": "string",
            },
            "identifier_type": {
              "docs": undefined,
              "type": "EnumCustomerIdentifierTypeOfpi",
            },
            "last_name": {
              "docs": "The bank account holder's last name.",
              "type": "string",
            },
          },
        },
        "HolderInformationIndividualOfpiResponse": {
          "docs": undefined,
          "properties": {
            "first_name": {
              "docs": "The bank account holder's first name.",
              "type": "string",
            },
            "identifier": {
              "docs": "The document number of the customer's ID.",
              "type": "string",
            },
            "identifier_type": {
              "docs": undefined,
              "type": "EnumCustomerIdentifierTypeOfpi",
            },
            "last_name": {
              "docs": "The bank account holder's last name.",
              "type": "string",
            },
          },
        },
        "HolderResponseOfpi": {
          "docs": "Details regarding the bank account holder.",
          "properties": {
            "information": {
              "docs": undefined,
              "type": "HolderResponseOfpiInformation",
            },
            "type": {
              "docs": undefined,
              "type": "EnumBankAccountHolderTypeOfpi",
            },
          },
        },
        "HolderResponseOfpiInformation": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "HolderInformationBusinessOfpiResponse",
            },
            {
              "docs": undefined,
              "type": "HolderInformationIndividualOfpiResponse",
            },
          ],
        },
        "Income": {
          "docs": "Income insights",
          "properties": {
            "created_at": {
              "docs": "The ISO-8601 timestamp of when the data point was created in Belvo's database.",
              "type": "string",
            },
            "first_transaction_date": {
              "docs": "The date when the first transaction occurred, in \`YYYY-MM-DD\` format.
",
              "type": "optional<string>",
            },
            "id": {
              "docs": "Belvo's unique identifier for the current income.",
              "type": "string",
            },
            "income_source_type": {
              "docs": undefined,
              "type": "EnumIncomeSourceType",
            },
            "income_streams": {
              "docs": "An array of enriched income stream objects.",
              "type": "list<IncomeStreamsBody>",
            },
            "last_transaction_date": {
              "docs": "The date when when the last transaction occurred, in \`YYYY-MM-DD\` format.
",
              "type": "string",
            },
            "link": {
              "docs": "The \`link.id\` the account belongs to.",
              "type": "string",
            },
            "monthly_average": {
              "docs": "Average amount of income received per month across all the accounts for the specific user.
",
              "type": "double",
            },
            "monthly_average_high_confidence": {
              "docs": "Average amount of income received per month for the specific user with \`HIGH\` confidence.
",
              "type": "double",
            },
            "monthly_average_irregular": {
              "docs": "Average amount of irregular income (with a frequency of \`SINGLE\` or \`IRREGULAR\`) received per month for the specific user.
",
              "type": "double",
            },
            "monthly_average_low_confidence": {
              "docs": "Average amount of income received per month for the specific user with \`LOW\` confidence.
",
              "type": "double",
            },
            "monthly_average_medium_confidence": {
              "docs": "Average amount of income received per month for the specific user with \`MEDIUM\` confidence.
",
              "type": "double",
            },
            "monthly_average_regular": {
              "docs": "Average amount of regular income (with a frequency of \`MONTHLY\`, \`FORTNIGHTLY\`, or \`WEEKLY\`) received per month for the specific user.
",
              "type": "double",
            },
            "number_of_income_streams": {
              "docs": "Number of total income streams analized.
",
              "type": "integer",
            },
            "total_high_confidence": {
              "docs": "Total amount of income for the specific user with \`HIGH\` confidence.
",
              "type": "double",
            },
            "total_income_amount": {
              "docs": "Total amount of all income received for the specific user.
",
              "type": "double",
            },
            "total_irregular_income_amount": {
              "docs": "Total amount of irregular income (with a frequency of \`SINGLE\` or \`IRREGULAR\`) for the specific user.
",
              "type": "optional<double>",
            },
            "total_low_confidence": {
              "docs": "Total amount of income for the specific user with \`LOW\` confidence.
",
              "type": "double",
            },
            "total_medium_confidence": {
              "docs": "Total amount of income for the specific user with \`MEDIUM\` confidence.
",
              "type": "double",
            },
            "total_regular_income_amount": {
              "docs": "Total amount of regular income (with a frequency of \`MONTHLY\`, \`FORTNIGHTLY\`, \`WEEKLY\`) for the specific user.
",
              "type": "double",
            },
          },
        },
        "IncomeStreamsBody": {
          "docs": "A list of income streams for the account.

For each income stream, we provide additional insights such as:
- Frequency, stability, and confidence level of the income transactions.
- Key metrics about the transaction amounts.
ℹ️ If no income sources are found, we return an empty array.
",
          "properties": {
            "account_id": {
              "docs": "Unique ID for the bank account to be verified for income streams.",
              "type": "string",
            },
            "average_income_amount": {
              "docs": "The average income transaction amount from the source.
",
              "type": "double",
            },
            "confidence": {
              "docs": undefined,
              "type": "EnumIncomeStreamConfidence",
            },
            "currency": {
              "docs": "The three-letter currency code of the income. For example:

  • 🇧🇷 BRL (Brazilian Real)
  • 🇨🇴 COP (Colombian Peso)
  • 🇲🇽 MXN (Mexican Peso)",
              "type": "string",
            },
            "frequency": {
              "docs": undefined,
              "type": "EnumIncomeStreamFrequency",
            },
            "full_periods": {
              "docs": "Number of period units (based on *rolling months*) with data to perform calculations.

**Note:** A *rolling month* is a period of 30 days. For example, 2023-01-15 to 2023-02-2023.
",
              "type": "integer",
            },
            "income_type": {
              "docs": undefined,
              "type": "EnumIncomeStreamType",
            },
            "last_income_amount": {
              "docs": "The amount of the most recent income received from the source.
",
              "type": "double",
            },
            "last_income_date": {
              "docs": "The date when the most recent income from the stream was received, in \`YYYY-MM-DD\` format.
",
              "type": "string",
            },
            "last_income_description": "unknown",
            "lookback_periods": {
              "docs": "Number of period units (based on *rolling months*) used to generate insights and calculations.

**Note:** A *rolling month* is a period of 30 days. For example, 2023-01-15 to 2023-02-2023.
",
              "type": "integer",
            },
            "monthly_average": {
              "docs": "The average amount of income received from the source over \`lookback_periods\`.
",
              "type": "double",
            },
            "number_of_incomes": {
              "docs": "Number of income transactions over the \`lookback_periods\`.
",
              "type": "integer",
            },
            "periods_with_income": {
              "docs": "Number of period units (based on *rolling months*) with at least one income available.

**Note:** A *rolling month* is a period of 30 days. For example, 2023-01-15 to 2023-02-2023.
",
              "type": "integer",
            },
            "regularity": {
              "docs": "The regularity of the income basde in its frequency, with a range from 0 to 1, where 1 represents perfect regularity.

**Note:** For transactions with \`frequency\`=\`SINGLE\`, this value returns \`null\`.
",
              "type": "optional<double>",
            },
            "stability": {
              "docs": "The stability of the income based on its amount, with a range from 0 to 1, where 1 represents perfect stability.

**Note:** For transactions with \`frequency\`=\`SINGLE\`, this value returns \`null\`.
",
              "type": "optional<double>",
            },
            "trend": {
              "docs": "The income trend during a period of time calculated between last income and first income received, where:
  - a negative float means that the income trend is decreasing during the time period.
  - a positive float means that the income trend is increasing during the time period.

**Note:** For transactions with \`frequency\`=\`SINGLE\`, this value returns \`null\`.
",
              "type": "optional<double>",
            },
          },
        },
        "IncomesPaginatedResponse": {
          "docs": undefined,
          "properties": {
            "count": {
              "docs": "The total number of results in your Belvo account.",
              "type": "optional<integer>",
            },
            "next": {
              "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is \`null\`.

In our documentation example, we use \`{endpoint}\` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, \`accounts\` or \`owners\`).
",
              "type": "optional<string>",
            },
            "previous": {
              "docs": "The URL to the previous page of results. If there is no previous page, the value is \`null\`.",
              "type": "optional<string>",
            },
            "results": {
              "docs": "Array of income objects.",
              "type": "optional<list<Income>>",
            },
          },
        },
        "Institution": {
          "docs": undefined,
          "properties": {
            "country_codes": {
              "docs": "The country codes where the institution is available, for example:
- 🇧🇷 BR (Brazil)
- 🇨🇴 CO (Colombia)
- 🇲🇽 MX (Mexico)
",
              "type": "optional<list<string>>",
            },
            "display_name": {
              "docs": "The customer-facing name of the institution.",
              "type": "optional<string>",
            },
            "features": {
              "docs": "The features that the institution supports. If the institution has no special features, then Belvo returns an empty array.

Here is a list of the available features:
- \`token_required\` indicates that the institution may require a token during link creation or when making any other requests.
",
              "type": "optional<list<InstitutionsFeature>>",
            },
            "form_fields": {
              "docs": undefined,
              "type": "optional<list<InstitutionsFormField>>",
            },
            "icon_logo": {
              "docs": "The URL of the institution's icon logo.",
              "type": "optional<string>",
            },
            "id": {
              "docs": "The ID of the institution as designated by Belvo.",
              "type": "optional<integer>",
            },
            "integration_type": {
              "docs": undefined,
              "type": "optional<EnumInstitutionIntegrationType>",
            },
            "logo": {
              "docs": "The URL of the institution's logo.",
              "type": "optional<string>",
            },
            "name": {
              "docs": "The name of the institution, as designated by Belvo.
Please see our [Institutions](https://developers.belvo.com/docs/institution) DevPortal article for a detailed list of institution names.",
              "type": "optional<string>",
            },
            "primary_color": {
              "docs": "The primary color on the institution's website.",
              "type": "optional<string>",
            },
            "resources": {
              "docs": "A list of Belvo resources that you can use with the institution. This list includes one or more of the following resources:

  - \`ACCOUNTS\`
  - \`BALANCES\`
  - \`INCOMES\`
  - \`INVESTMENTS_PORTFOLIOS\` 
  - \`INVESTMENTS_TRANSACTIONS\` *This field has been deprecated.*
  - \`INVOICES\`
  - \`OWNERS\`
  - \`RECURRING_EXPENSES\`
  - \`RISK_INSIGHTS\`
  - \`TRANSACTIONS\`
  - \`TAX_COMPLIANCE_STATUS\`
  - \`TAX_STATUS\`
  - \`TAX_RETURNS\`
",
              "type": "optional<list<string>>",
            },
            "status": {
              "docs": undefined,
              "type": "optional<EnumInstitutionStatus>",
            },
            "text_logo": {
              "docs": "The URL of the institution's text logo.",
              "type": "optional<string>",
            },
            "type": {
              "docs": undefined,
              "type": "optional<EnumInstitutionType>",
            },
            "website": {
              "docs": "The URL of the institution's website.",
              "type": "optional<string>",
            },
          },
        },
        "InstitutionAccount": {
          "docs": "Details regarding the institution.",
          "properties": {
            "name": {
              "docs": "The name of the institution, as designated by Belvo.
Please see our [Institutions](https://developers.belvo.com/docs/institution) DevPortal article for a detailed list of institution names.",
              "type": "optional<string>",
            },
            "type": {
              "docs": undefined,
              "type": "optional<EnumInstitutionType>",
            },
          },
        },
        "InstitutionDownError": {
          "docs": "This error occurs when the institution's website that you're trying to access is down due to maintenance or other issues, which means Belvo is unable to create new links or retrieve new data.",
          "properties": {
            "code": {
              "docs": "A unique error code (\`institution_down\`) that allows you to classify and handle the error programmatically.

ℹ️ Check our DevPortal for more information on how to handle <a href="https://developers.belvo.com/docs/belvo-api-errors#400-institution_down" target="_blank">400 institution_down errors</a>.",
              "type": "optional<string>",
            },
            "message": {
              "docs": "A short description of the error. 

For \`institution_down\` errors, the description is:
  
  - \`The financial institution is down, try again later\`.",
              "type": "optional<string>",
            },
            "request_id": {
              "docs": "A 32-character unique ID of the request (matching a regex pattern of: \`[a-f0-9]{32}\`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
              "type": "optional<string>",
            },
          },
        },
        "InstitutionFormField": {
          "docs": undefined,
          "properties": {
            "label": {
              "docs": "The label of the form field. For example:
- Document
- Clave
- Token
",
              "type": "optional<string>",
            },
            "length": {
              "docs": "Number of digits allowed when the type is \`token\`.",
              "type": "optional<integer>",
            },
            "name": {
              "docs": "The username, password, or username type field.",
              "type": "optional<string>",
            },
            "optional": {
              "docs": "It indicates whether this form field is optional.",
              "type": "optional<boolean>",
            },
            "placeholder": {
              "docs": "The placeholder text in the form field.",
              "type": "optional<string>",
            },
            "type": {
              "docs": "The input type for the form field. For example, string.",
              "type": "optional<string>",
            },
            "validation": {
              "docs": "The type of input validation used for the field.",
              "type": "optional<string>",
            },
            "validation_message": {
              "docs": "The message displayed when an invalid input is provided in the form field.",
              "type": "optional<string>",
            },
            "values": {
              "docs": "Array of additional form field values.",
              "type": "optional<list<InstitutionsFormFieldValues>>",
            },
          },
        },
        "InstitutionInactiveError": {
          "docs": "This error occurs when we (Belvo) have deactivated the institution in our API.",
          "properties": {
            "code": {
              "docs": "A unique error code (\`institution_inactive\`) that allows you to classify and handle the error programmatically.

ℹ️ Check our DevPortal for more information on how to handle <a href="https://developers.belvo.com/docs/belvo-api-errors#400-institution_inactive" target="_blank">400 institution_inactive errors</a>.",
              "type": "optional<string>",
            },
            "message": {
              "docs": "A short description of the error. 

For \`institution_inactive\` errors, the description is:
  
  - \`The institution has been temporarily deactivated\`.",
              "type": "optional<string>",
            },
            "request_id": {
              "docs": "A 32-character unique ID of the request (matching a regex pattern of: \`[a-f0-9]{32}\`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
              "type": "optional<string>",
            },
          },
        },
        "InstitutionUnavailableError": {
          "docs": "This error occurs when the institution's website that you're trying to access is down due to maintenance or other issues, which means Belvo is unable to create new links or retrieve new data.",
          "properties": {
            "code": {
              "docs": "A unique error code (\`institution_unavailable\`) that allows you to classify and handle the error programmatically.

ℹ️ Check our DevPortal for more information on how handle <a href="https://developers.belvo.com/docs/belvo-api-errors#400-institution_unavailable" target="_blank">400 institution_unavailable errors</a>.",
              "type": "optional<string>",
            },
            "message": {
              "docs": "A short description of the error.

For \`institution_unavailable\` errors, the description is:
  
  - \`The financial institution is unavailable\`.",
              "type": "optional<string>",
            },
            "request_id": {
              "docs": "A 32-character unique ID of the request (matching a regex pattern of: \`[a-f0-9]{32}\`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
              "type": "optional<string>",
            },
          },
        },
        "InstitutionsFeature": {
          "docs": undefined,
          "properties": {
            "description": {
              "docs": "The description of the feature.",
              "type": "optional<string>",
            },
            "name": {
              "docs": "The name of the feature.",
              "type": "optional<string>",
            },
          },
        },
        "InstitutionsFormField": {
          "docs": undefined,
          "properties": {
            "label": {
              "docs": "The label of the form field. For example:
- Client number
- Key Bancanet
- Document
",
              "type": "optional<string>",
            },
            "name": {
              "docs": "The username, password, or username type field.",
              "type": "optional<string>",
            },
            "placeholder": {
              "docs": "The placeholder text in the form field.",
              "type": "optional<string>",
            },
            "type": {
              "docs": "The input type for the form field. For example, string.",
              "type": "optional<string>",
            },
            "validation": {
              "docs": "The type of input validation used for the field.",
              "type": "optional<string>",
            },
            "validation_message": {
              "docs": "The message displayed when an invalid input is provided in the form field.",
              "type": "optional<string>",
            },
            "values": {
              "docs": "If the form field is for documents, the institution may require additional input regarding the document type.",
              "type": "optional<list<InstitutionsFormFieldValues>>",
            },
          },
        },
        "InstitutionsFormFieldValues": {
          "docs": undefined,
          "properties": {
            "code": {
              "docs": "The code of the document.",
              "type": "optional<string>",
            },
            "label": {
              "docs": "The label for the field. For example:
- Cédula de Ciudadanía
- Cédula de Extranjería
- Pasaporte
",
              "type": "optional<string>",
            },
            "placeholder": {
              "docs": "The placeholder text in the form field.",
              "type": "optional<string>",
            },
            "validation": {
              "docs": "The type of input validation used for the field.",
              "type": "optional<string>",
            },
            "validation_message": {
              "docs": "The message displayed when an invalid input is provided in the form field.",
              "type": "optional<string>",
            },
          },
        },
        "InstitutionsPaginatedResponse": {
          "docs": undefined,
          "properties": {
            "count": {
              "docs": "The total number of results in your Belvo account.",
              "type": "optional<integer>",
            },
            "next": {
              "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is \`null\`.

In our documentation example, we use \`{endpoint}\` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, \`accounts\` or \`owners\`).
",
              "type": "optional<string>",
            },
            "previous": {
              "docs": "The URL to the previous page of results. If there is no previous page, the value is \`null\`.",
              "type": "optional<string>",
            },
            "results": {
              "docs": "Array of institution objects.",
              "type": "optional<list<Institution>>",
            },
          },
        },
        "InvalidAccessMode": {
          "docs": "This error occurs when you try to update a link from single to recurrent, but there are no login credentials stored for the user.",
          "properties": {
            "code": {
              "docs": "A unique error code (\`invalid_access_mode_switch\`) that allows you to classify and handle the error programmatically.

ℹ️ Check our DevPortal for more information on how to handle <a href="https://developers.belvo.com/docs/belvo-api-errors#400-invalid_access_mode_switch" target="_blank">400 invalid_access_mode_switch errors</a>.",
              "type": "optional<string>",
            },
            "message": {
              "docs": "A short description of the error. 

For \`invalid_access_mode_switch\` errors, the description is:
  
  - \`This link doesn't have stored credentials hence it can't be switched to recurrent mode"\`.",
              "type": "optional<string>",
            },
            "request_id": {
              "docs": "A 32-character unique ID of the request (matching a regex pattern of: \`[a-f0-9]{32}\`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
              "type": "optional<string>",
            },
          },
        },
        "InvalidLinkError": {
          "docs": "This error occurs when you try to access an account but the user credentials are no longer valid, prompting an error from the institution.",
          "properties": {
            "code": {
              "docs": "A unique error code (\`invalid_link\`) that allows you to classify and handle the error programmatically.

ℹ️ Check our DevPortal for more information on how to handle <a href="https://developers.belvo.com/docs/belvo-api-errors#400-invalid_link" target="_blank">400 invalid_link errors</a>.",
              "type": "optional<string>",
            },
            "message": {
              "docs": "A short description of the error. 

For \`invalid_link\` errors, the description is:
  
  - \`The link has been invalidated. You may need to update link credentials\`.",
              "type": "optional<string>",
            },
            "request_id": {
              "docs": "A 32-character unique ID of the request (matching a regex pattern of: \`[a-f0-9]{32}\`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
              "type": "optional<string>",
            },
          },
        },
        "InvalidPeriodError": {
          "docs": "This error occurs when you request incomes for a link within a given date range, however, the period between \`date_from\` and \`date_to\` is less than 90 days.",
          "properties": {
            "code": {
              "docs": "A unique error code (\`invalid_period\`) that allows you to classify and handle the error programmatically.

ℹ️ Check our DevPortal for more information on how to handle <a href="https://developers.belvo.com/docs/belvo-api-errors#400-invalid_period" target="_blank">400 invalid_period errors</a>.",
              "type": "optional<string>",
            },
            "message": {
              "docs": "A short description of the error. 

For \`invalid_period\` errors, the description is:
  
  - \`The number of days between date_from and date_to must be at least 90 days\`.",
              "type": "optional<string>",
            },
            "request_id": {
              "docs": "A 32-character unique ID of the request (matching a regex pattern of: \`[a-f0-9]{32}\`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
              "type": "optional<string>",
            },
          },
        },
        "InvestmentsPortfolio": {
          "docs": undefined,
          "properties": {
            "balance_gross": {
              "docs": "The current gross total value of the entire portfolio and all its underlying instruments, as given by the institution.
",
              "type": "optional<double>",
            },
            "balance_net": {
              "docs": "The total current value of the entire portfolio and all its underlying instruments, as given by the institution.

ℹ️ **Note:** In Brazil, this is usually calculated based on the net value (that is, not including tax).
",
              "type": "optional<double>",
            },
            "balance_type": {
              "docs": "Indicates whether this account is either an \`ASSET\` or a \`LIABILITY\`. You can consider the balance of an \`ASSET\` as being positive, while the balance of a \`LIABILITY\` as negative.
",
              "type": "optional<string>",
            },
            "currency": {
              "docs": "The currency of the portfolio. For example:


- 🇧🇷 BRL (Brazilian Real)
- 🇨🇴 COP (Colombian Peso)
- 🇲🇽 MXN (Mexican Peso)


Please note that other currencies other than in the list above may be returned.
",
              "type": "string",
            },
            "id": {
              "docs": "Belvo's unique ID for the current portfolio.",
              "type": "optional<string>",
            },
            "instruments": {
              "docs": "An array of instruments that fall into the investment portfolio.",
              "type": "optional<list<InvestmentsPortfolioInstrument>>",
            },
            "name": {
              "docs": "The name of the portfolio, as given in the institution.
",
              "type": "string",
            },
            "type": {
              "docs": undefined,
              "type": "EnumInvestmentPortfolioType",
            },
          },
        },
        "InvestmentsPortfolioInstrument": {
          "docs": undefined,
          "properties": {
            "average_acquisition_price": {
              "docs": "The average price of each share acquired in the instrument.",
              "type": "optional<double>",
            },
            "balance_gross": {
              "docs": "The total gross value of the instrument (including taxes).",
              "type": "optional<double>",
            },
            "balance_net": {
              "docs": "The total net value of the instrument (excluding taxes).",
              "type": "optional<double>",
            },
            "currency": {
              "docs": "The currency of the instrument. For example:

- 🇧🇷 BRL (Brazilian Real)
- 🇨🇴 COP (Colombian Peso)
- 🇲🇽 MXN (Mexican Peso)
- 🇺🇸 USD (US Dollar)


Please note that other currencies other than in the list above may be returned.
",
              "type": "string",
            },
            "fees": {
              "docs": "An array of fees that apply to the instrument.",
              "type": "optional<list<InvestmentsPortfolioInstrumentFees>>",
            },
            "id": {
              "docs": "Belvo's unique ID for the current instrument.",
              "type": "optional<string>",
            },
            "interest_rates": {
              "docs": "An array of interest rates that apply to the instrument.",
              "type": "optional<list<InvestmentsPortfolioInstrumentInterestRate>>",
            },
            "name": {
              "docs": "The name of the instrument, as given by the institution.",
              "type": "string",
            },
            "open_date": {
              "docs": "The start date of the instrument. Only applicable for instruments of type \`bond\` or \`savings\`.",
              "type": "optional<string>",
            },
            "price": {
              "docs": "The current price of one share in the instrument.",
              "type": "optional<double>",
            },
            "profit": {
              "docs": "The current profit earned in the instrument.",
              "type": "optional<double>",
            },
            "public_id": {
              "docs": "The public identifiers for the instrument.",
              "type": "optional<list<InvestmentsPortfolioInstrumentPublicId>>",
            },
            "quantity": {
              "docs": "The total amount of shares owned in the instrument.",
              "type": "optional<double>",
            },
            "redemption_conditions": {
              "docs": "An array of conditions that apply to the instrument in order to retrieve the final value.

For example, the due date, the liquidity date, the previdencia type, and so on.
",
              "type": "optional<list<InvestmentsPortfolioInstrumentRedemptionConditions>>",
            },
            "subtype": {
              "docs": "The subtype for the instrument, as given by the institution.",
              "type": "optional<string>",
            },
            "type": {
              "docs": undefined,
              "type": "EnumInvestmentPortfolioInstrumentType",
            },
          },
        },
        "InvestmentsPortfolioInstrumentFees": {
          "docs": undefined,
          "properties": {
            "type": {
              "docs": "The fee type incurred when making the purchase of the instrument.",
              "type": "string",
            },
            "value": {
              "docs": "The value of \`fees.type\`. The currency of the fee is the same as the currency of the instrument.",
              "type": "double",
            },
          },
        },
        "InvestmentsPortfolioInstrumentInterestRate": {
          "docs": undefined,
          "properties": {
            "index": {
              "docs": "If applicable, the index type that the \`interest_rates.value\` is calculated against.",
              "type": "optional<string>",
            },
            "type": {
              "docs": "How often the interest rate is calculated on the instrument.",
              "type": "string",
            },
            "value": {
              "docs": "The interest rate for the instrument, in percent.


ℹ️  **Note:** If the \`interest_rate.index\` is present, this value is a percentage of the index. For example, if \`interest_rate.index\` = \`CDI\` and \`interest_rate.value\` = \`90\`, then the total interest rate applied is 90% of the CDI.
",
              "type": "double",
            },
          },
        },
        "InvestmentsPortfolioInstrumentPublicId": {
          "docs": "The public identifiers for the instrument.",
          "properties": {
            "type": {
              "docs": "The type of public identifier for the instrument.",
              "type": "string",
            },
            "value": {
              "docs": "The value of the \`public_id.type\`.",
              "type": "string",
            },
          },
        },
        "InvestmentsPortfolioInstrumentRedemptionConditions": {
          "docs": undefined,
          "properties": {
            "type": {
              "docs": "The name of the redemption condition.",
              "type": "string",
            },
            "value": {
              "docs": "The value of \`redemption_conditions.type\`.",
              "type": "string",
            },
          },
        },
        "InvestmentsPortfoliosPaginatedResponse": {
          "docs": undefined,
          "properties": {
            "count": {
              "docs": "The total number of results in your Belvo account.",
              "type": "optional<integer>",
            },
            "next": {
              "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is \`null\`.

In our documentation example, we use \`{endpoint}\` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, \`accounts\` or \`owners\`).
",
              "type": "optional<string>",
            },
            "previous": {
              "docs": "The URL to the previous page of results. If there is no previous page, the value is \`null\`.",
              "type": "optional<string>",
            },
            "results": {
              "docs": "Array of investment portfolio objects.",
              "type": "optional<list<InvestmentsPortfolio>>",
            },
          },
        },
        "InvoiceDetailDian": {
          "docs": undefined,
          "properties": {
            "collected_at": {
              "docs": "The ISO-8601 timestamp when the data point was collected.",
              "type": "optional<string>",
            },
            "description": {
              "docs": "The description of the invoice item (an invoice can have one or more items).",
              "type": "optional<string>",
            },
            "pre_tax_amount": {
              "docs": "The total price for this item before tax is applied (\`quantity\` x \`unit_amount\`).",
              "type": "optional<double>",
            },
            "product_identification": {
              "docs": "The identification code of the product or the service, as defined by the legal entity in the country.
",
              "type": "optional<string>",
            },
            "quantity": {
              "docs": "The quantity of this invoice item.",
              "type": "optional<double>",
            },
            "tax_amount": {
              "docs": "The amount of tax for this invoice item (\`pre_tax_amount\` x \`tax_percentage\`).",
              "type": "optional<double>",
            },
            "tax_percentage": {
              "docs": "The tax percentage to apply.",
              "type": "optional<double>",
            },
            "tax_type": {
              "docs": "The item's tax type.",
              "type": "optional<string>",
            },
            "total_amount": {
              "docs": "The total price for this invoice item (\`pre_tax_amount\` + \`tax_amount\`).",
              "type": "optional<double>",
            },
            "unit_amount": {
              "docs": "The price of one singular item.",
              "type": "optional<double>",
            },
            "unit_code": {
              "docs": "The unit of measure, as defined by the legal entity in the country.
",
              "type": "optional<string>",
            },
            "unit_description": {
              "docs": "The description of the item, as defined by the legal entity in the country.
",
              "type": "optional<string>",
            },
          },
        },
        "InvoiceDetailRetainedTaxSat": {
          "docs": undefined,
          "properties": {
            "collected_at": {
              "docs": "The ISO-8601 timestamp when the data point was collected.",
              "type": "optional<string>",
            },
            "retained_tax_amount": {
              "docs": "The amount of retained tax.",
              "type": "optional<double>",
            },
            "tax": {
              "docs": "The type of retained tax (for example, ISR, IVA or IEPS).",
              "type": "optional<string>",
            },
            "tax_percentage": {
              "docs": "The percentage of tax retained.",
              "type": "optional<double>",
            },
            "tax_type": {
              "docs": "**Note**: This field is not applicable for SAT Mexico and will return \`null\`.
",
              "type": "optional<string>",
            },
          },
        },
        "InvoiceDetailSat": {
          "docs": undefined,
          "properties": {
            "collected_at": {
              "docs": "The ISO-8601 timestamp when the data point was collected.",
              "type": "optional<string>",
            },
            "description": {
              "docs": "The description of the invoice item (an invoice can have one or more items).",
              "type": "optional<string>",
            },
            "pre_tax_amount": {
              "docs": "The total price for this item before tax is applied (\`quantity\` x \`unit_amount\`).",
              "type": "optional<double>",
            },
            "product_identification": {
              "docs": "The identification code of the product or the service, as defined by the legal entity in the country.
- 🇲🇽 [Mexico](http://200.57.3.89/Pys/catPyS.aspx)
",
              "type": "optional<string>",
            },
            "quantity": {
              "docs": "The quantity of this invoice item.",
              "type": "optional<integer>",
            },
            "retained_taxes": {
              "docs": "The retained tax on the invoice item.",
              "type": "optional<list<InvoiceDetailRetainedTaxSat>>",
            },
            "tax_amount": {
              "docs": "The amount of tax for this invoice item (\`pre_tax_amount\` x \`tax_percentage\`).",
              "type": "optional<double>",
            },
            "tax_percentage": {
              "docs": "The tax percentage to apply.",
              "type": "optional<double>",
            },
            "tax_type": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "optional<string>",
            },
            "total_amount": {
              "docs": "The total price for this invoice item (\`pre_tax_amount\` + \`tax_amount\`).",
              "type": "optional<double>",
            },
            "unit_amount": {
              "docs": "The price of one a singular item.",
              "type": "optional<double>",
            },
            "unit_code": {
              "docs": "The unit of measure, as defined by the legal entity in the country. 
- 🇲🇽 Mexico [SAT catalog reference](https://developers.belvo.com/docs/sat-catalogs#unit-code)
",
              "type": "optional<string>",
            },
            "unit_description": {
              "docs": "The description of the item, as defined by the legal entity in the country.
- 🇲🇽 Mexico [SAT catalog reference](https://developers.belvo.com/docs/sat-catalogs#unit-code)
",
              "type": "optional<string>",
            },
          },
        },
        "InvoiceDian": {
          "docs": undefined,
          "properties": {
            "cancelation_status": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.",
              "type": "optional<string>",
            },
            "cancelation_update_date": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "optional<string>",
            },
            "certification_authority": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "optional<string>",
            },
            "certification_date": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "optional<string>",
            },
            "collected_at": {
              "docs": "The ISO-8601 timestamp when the data point was collected.",
              "type": "optional<string>",
            },
            "created_at": {
              "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
              "type": "optional<string>",
            },
            "currency": {
              "docs": "The currency of the invoice. For example:
 
 - 🇧🇷 BRL (Brazilian Real)
 - 🇨🇴 COP (Colombian Peso)
 - 🇲🇽 MXN (Mexican Peso)
 - 🇺🇸 USD (United States Dollar)
",
              "type": "optional<string>",
            },
            "discount_amount": {
              "docs": "The total amount discounted in this invoice.
",
              "type": "optional<double>",
            },
            "exchange_rate": {
              "docs": "The exchange rate used in this invoice for the currency.
",
              "type": "optional<double>",
            },
            "expiration_date": {
              "docs": "Indicates when the invoice is set to expire.

For example: If the invoice is paid in installments, this field indicates the date when the installment is to be paid.
",
              "type": "optional<string>",
            },
            "folio": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "optional<string>",
            },
            "id": {
              "docs": "Belvo's unique identifier for the current invoice.",
              "type": "optional<string>",
            },
            "invoice_date": {
              "docs": "The date of the invoice.",
              "type": "optional<string>",
            },
            "invoice_details": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "list<InvoiceDetailDian>",
            },
            "invoice_identification": {
              "docs": "The fiscal institution's unique ID for the invoice.",
              "type": "optional<string>",
            },
            "invoice_type": {
              "docs": undefined,
              "type": "EnumInvoiceDianInvoiceType",
            },
            "link": {
              "docs": "The \`link.id\` the invoice belongs to.",
              "type": "optional<string>",
            },
            "payment_method": {
              "docs": undefined,
              "type": "optional<EnumInvoiceDianPaymentMethod>",
            },
            "payment_method_description": {
              "docs": "The description of the payment method used for this invoice.
",
              "type": "optional<string>",
            },
            "payment_type": {
              "docs": "The payment type code used for this invoice, as defined by the country legal entity.

For detailed information regarding DIAN's payment types, please see their [official PDF](https://www.dian.gov.co/impuestos/factura-electronica/Documents/Anexo_tecnico_factura_electronica_vr_1_7_2020.pdf).
",
              "type": "optional<string>",
            },
            "payment_type_description": {
              "docs": "The description of the payment method used for this invoice.
",
              "type": "optional<string>",
            },
            "payments": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "list<InvoicesPaymentsDian>",
            },
            "payroll": {
              "docs": undefined,
              "type": "InvoicesPayrollDian",
            },
            "place_of_issue": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "optional<string>",
            },
            "receiver_details": {
              "docs": undefined,
              "type": "optional<InvoicesReceiverDetailsDian>",
            },
            "receiver_id": {
              "docs": "The fiscal ID of the invoice receiver.",
              "type": "optional<string>",
            },
            "receiver_name": {
              "docs": "The name of the invoice receiver.",
              "type": "optional<string>",
            },
            "receiver_tax_fraud_status": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.",
              "type": "optional<string>",
            },
            "sender_details": {
              "docs": undefined,
              "type": "optional<InvoiceSenderDetailsDian>",
            },
            "sender_id": {
              "docs": "The fiscal ID of the invoice sender.",
              "type": "optional<string>",
            },
            "sender_name": {
              "docs": "The name of the invoice sender.",
              "type": "optional<string>",
            },
            "sender_tax_fraud_status": {
              "docs": "Indicates whether or not the sender is on a tax fraud list for having submitted incorrect data, having outstanding payments, or having conducted business that is in violation of the fiscal institution's regulations.
**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.",
              "type": "optional<string>",
            },
            "status": {
              "docs": "The status of the invoice. Can be one of:

  - *Vigente* (valid)
  - *Cancelado* (cancelled)
  - *Aprobado* (approved)",
              "type": "optional<string>",
            },
            "subtotal_amount": {
              "docs": "The pretax amount of this invoice (sum of each item's \`pre_tax_amount\`).
",
              "type": "optional<double>",
            },
            "tax_amount": {
              "docs": "The amount of tax for this invoice (sum of each item's \`tax_amount\`).
",
              "type": "optional<double>",
            },
            "total_amount": {
              "docs": "The total amount of the invoice (\`subtotal_amount\` + \`tax_amount\` - \`discount_amount\`)",
              "type": "optional<double>",
            },
            "type": {
              "docs": undefined,
              "type": "EnumInvoiceType",
            },
            "usage": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "optional<string>",
            },
            "version": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "optional<string>",
            },
            "warnings": {
              "docs": undefined,
              "type": "optional<InvoiceWarningsDian>",
            },
            "xml": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "optional<string>",
            },
          },
        },
        "InvoiceSenderDetailsDian": {
          "docs": undefined,
          "properties": {
            "address": {
              "docs": "The sender's address.
",
              "type": "optional<string>",
            },
            "collected_at": {
              "docs": "The ISO-8601 timestamp when the data point was collected.",
              "type": "optional<string>",
            },
            "country": {
              "docs": "The country where the sender pays their taxes.
",
              "type": "optional<string>",
            },
            "email": {
              "docs": "The sender's email address.
",
              "type": "optional<string>",
            },
            "phone_number": {
              "docs": "The sender's phone number.
",
              "type": "optional<string>",
            },
            "regimen": {
              "docs": "The sender's regimen type.

For detailed information regarding DIAN's regimens, please see their [official PDF](https://www.dian.gov.co/impuestos/factura-electronica/Documents/Anexo_tecnico_factura_electronica_vr_1_7_2020.pdf).
",
              "type": "optional<string>",
            },
            "tax_payer_type": {
              "docs": "Indicates if the sender is a business or an individual. Can be either:
  
  - \`Persona Jurídica\`
  - \`Persona Natural\`
",
              "type": "optional<string>",
            },
            "tax_scheme": {
              "docs": "The sender's fiscal responsibilities.

For detailed information regarding DIAN's tax schemes, please see their [official PDF](https://www.dian.gov.co/impuestos/factura-electronica/Documents/Anexo_tecnico_factura_electronica_vr_1_7_2020.pdf).
",
              "type": "optional<string>",
            },
          },
        },
        "InvoiceWarningsDian": {
          "docs": undefined,
          "properties": {
            "code": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "optional<string>",
            },
            "message": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "optional<string>",
            },
          },
        },
        "InvoiceWarningsSat": {
          "docs": undefined,
          "properties": {
            "code": {
              "docs": "The warning code.
",
              "type": "optional<string>",
            },
            "message": {
              "docs": "The description of the warning.
",
              "type": "optional<string>",
            },
          },
        },
        "InvoiceWithIdSat": {
          "docs": undefined,
          "properties": {
            "cancelation_status": {
              "docs": "If the invoice is cancelled, this field indicates the status of the cancellation.",
              "type": "optional<string>",
            },
            "cancelation_update_date": {
              "docs": "The date of the invoice cancelation.
",
              "type": "optional<string>",
            },
            "certification_authority": {
              "docs": "The fiscal ID of the certification provider.
",
              "type": "optional<string>",
            },
            "certification_date": {
              "docs": "The date of the fiscal certification.
",
              "type": "optional<string>",
            },
            "collected_at": {
              "docs": "The ISO-8601 timestamp when the data point was collected.",
              "type": "optional<string>",
            },
            "created_at": {
              "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
              "type": "optional<string>",
            },
            "currency": {
              "docs": "The currency of the invoice. For example:
 
 - 🇧🇷 BRL (Brazilian Real)
 - 🇨🇴 COP (Colombian Peso)
 - 🇲🇽 MXN (Mexican Peso)
 - 🇺🇸 USD (United States Dollar)
",
              "type": "optional<string>",
            },
            "discount_amount": {
              "docs": "The total amount discounted in this invoice.
",
              "type": "optional<double>",
            },
            "exchange_rate": {
              "docs": "The exchange rate used in this invoice for the currency.
",
              "type": "optional<double>",
            },
            "folio": {
              "docs": "The internal control number that the taxpayer assigns to the invoice.
",
              "type": "optional<string>",
            },
            "id": {
              "docs": "Belvo's unique identifier used to reference the current invoice.",
              "type": "optional<string>",
            },
            "invoice_date": {
              "docs": "The date of the invoice.",
              "type": "optional<string>",
            },
            "invoice_details": {
              "docs": "A list of descriptions for each item (purchased product or service provided) in the invoice.
",
              "type": "list<InvoiceDetailSat>",
            },
            "invoice_identification": {
              "docs": "The fiscal institution's unique ID for the invoice.",
              "type": "optional<string>",
            },
            "invoice_type": {
              "docs": undefined,
              "type": "EnumInvoiceSatInvoiceType",
            },
            "link": {
              "docs": "The \`link.id\` the invoice belongs to.",
              "type": "optional<string>",
            },
            "payment_method": {
              "docs": undefined,
              "type": "optional<EnumInvoiceSatPaymentMethod>",
            },
            "payment_method_description": {
              "docs": "*This field has been deprecated.*

*The description of the payment method used for this invoice.*
",
              "type": "optional<string>",
            },
            "payment_type": {
              "docs": "The payment type code used for this invoice, as defined by the country legal entity.

- 🇲🇽 Mexico [SAT catalog reference article](https://developers.belvo.com/docs/sat-catalogs#payment-type)
",
              "type": "optional<string>",
            },
            "payment_type_description": {
              "docs": "*This field has been deprecated.*
",
              "type": "optional<string>",
            },
            "payments": {
              "docs": "A list detailing all the invoice payments.
",
              "type": "list<InvoicesPaymentsSat>",
            },
            "payroll": {
              "docs": undefined,
              "type": "InvoicesPayrollSat",
            },
            "place_of_issue": {
              "docs": "The postcode of where the invoice was issued.
",
              "type": "optional<string>",
            },
            "receiver_blacklist_status": {
              "docs": "This field has been deprecated. Please use \`receiver_tax_fraud_status\` instead.
",
              "type": "optional<string>",
            },
            "receiver_id": {
              "docs": "The fiscal ID of the invoice receiver.",
              "type": "optional<string>",
            },
            "receiver_name": {
              "docs": "The name of the invoice receiver.",
              "type": "optional<string>",
            },
            "receiver_tax_fraud_status": {
              "docs": "Indicates whether or not the receiver is on SAT's tax fraud list for having submitted incorrect data, having outstanding payments, or having conducted business that is in violation of the fiscal institution's regulations.<br><br>
SAT updates the tax fraud list every three months. <br><br>
For more information regarding the reason's a taxpayer can be put on the tax fraud list, please see [Article 69](http://omawww.sat.gob.mx/cifras_sat/Paginas/datos/vinculo.html?page=ListCompleta69.html) and [Article 69-B](http://omawww.sat.gob.mx/cifras_sat/Paginas/datos/vinculo.html?page=ListCompleta69B.html) of Mexico's Código Fiscal de la Federación. <br><br>
Possible statuses are:
- \`INVESTIGATING\` <br> The fiscal institution has identified irregularities and open an investigation regarding the taxpayer. <br> - \`DISMISSED\` <br> The fiscal institution has investigated the taxpayer and declared them innocent. <br> - \`CONFIRMED\` <br> The fiscal institution has confirmed that the taxpayer is guilty. <br> - \`OVERTURNED\` <br> The fiscal institution has reassessed a previously confirmed taxpayer and, based on new evidence, has taken the taxpayer off the tax fraud list. <br> - \`NO_TAX_FRAUD_STATUS\` <br> The receiver or sender is not found in the list (in other words, they are complying with the fiscal institution's regulations).",
              "type": "optional<string>",
            },
            "sender_blacklist_status": {
              "docs": "This field has been deprecated. Please use \`sender_tax_fraud_status\` instead.
",
              "type": "optional<string>",
            },
            "sender_id": {
              "docs": "The fiscal ID of the invoice sender",
              "type": "optional<string>",
            },
            "sender_name": {
              "docs": "The name of the invoice sender.",
              "type": "optional<string>",
            },
            "sender_tax_fraud_status": {
              "docs": "Indicates whether or not the sender is on SAT's tax fraud list for having submitted incorrect data, having outstanding payments, or having conducted business that is in violation of the fiscal institution's regulations.<br><br>
SAT updates the tax fraud list every three months. <br><br>
For more information regarding the reason's a taxpayer can be put on the tax fraud list, please see [Article 69](http://omawww.sat.gob.mx/cifras_sat/Paginas/datos/vinculo.html?page=ListCompleta69.html) and [Article 69-B](http://omawww.sat.gob.mx/cifras_sat/Paginas/datos/vinculo.html?page=ListCompleta69B.html) of Mexico's Código Fiscal de la Federación. <br><br>
Possible statuses are:
- \`INVESTIGATING\` <br> The fiscal institution has identified irregularities and open an investigation regarding the taxpayer. <br> - \`DISMISSED\` <br> The fiscal institution has investigated the taxpayer and declared them innocent. <br> - \`CONFIRMED\` <br> The fiscal institution has confirmed that the taxpayer is guilty. <br> - \`OVERTURNED\` <br> The fiscal institution has reassessed a previously confirmed taxpayer and, based on new evidence, has taken the taxpayer off the tax fraud list. <br> - \`NO_TAX_FRAUD_STATUS\` <br> The receiver or sender is not found in the list (in other words, they are complying with the fiscal institution's regulations).",
              "type": "optional<string>",
            },
            "status": {
              "docs": "The status of the invoice. Can be either *Vigente* (valid) or *Cancelado* (cancelled).",
              "type": "optional<string>",
            },
            "subtotal_amount": {
              "docs": "The pretax amount of this invoice (sum of each item's \`pre_tax_amount\`).
",
              "type": "optional<double>",
            },
            "tax_amount": {
              "docs": "The amount of tax for this invoice (sum of each item's \`tax_amount\`).
",
              "type": "optional<double>",
            },
            "total_amount": {
              "docs": "The total amount of the invoice (\`subtotal_amount\` + \`tax_amount\` - \`discount_amount\`)",
              "type": "optional<double>",
            },
            "type": {
              "docs": undefined,
              "type": "EnumInvoiceType",
            },
            "usage": {
              "docs": "The invoice's usage code, as defined by the legal entity of the country. 

- 🇲🇽 Mexico [SAT catalog reference article](https://developers.belvo.com/docs/sat-catalogs#usage)
",
              "type": "optional<string>",
            },
            "version": {
              "docs": "The CFDI version of the invoice.
",
              "type": "optional<string>",
            },
            "warnings": {
              "docs": undefined,
              "type": "optional<InvoiceWarningsSat>",
            },
            "xml": {
              "docs": "XML of the invoice document.
",
              "type": "optional<string>",
            },
          },
        },
        "InvoicesPaymentsDian": {
          "docs": undefined,
          "properties": {
            "amount": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "optional<double>",
            },
            "beneficiary_account_number": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "optional<string>",
            },
            "beneficiary_rfc": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "optional<string>",
            },
            "currency": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "optional<string>",
            },
            "date": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "optional<string>",
            },
            "exchange_rate": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "optional<string>",
            },
            "operation_number": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "optional<string>",
            },
            "payer_account_number": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "optional<string>",
            },
            "payer_bank_name": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "optional<string>",
            },
            "payer_rfc": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "optional<string>",
            },
            "payment_type": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "optional<string>",
            },
            "related_documents": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "list<InvoicesPaymentsRelatedDocumentsDian>",
            },
          },
        },
        "InvoicesPaymentsRelatedDocumentsDian": {
          "docs": "List of all the related deferred invoices affected by the payment.",
          "properties": {
            "amount_paid": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "optional<double>",
            },
            "currency": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "optional<string>",
            },
            "invoice_identification": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "optional<string>",
            },
            "outstanding_balance": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "optional<double>",
            },
            "partiality_number": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "optional<integer>",
            },
            "payment_method": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "optional<string>",
            },
            "previous_balance": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "optional<double>",
            },
          },
        },
        "InvoicesPaymentsRelatedDocumentsSat": {
          "docs": "List of all the related deferred invoices affected by the payment.",
          "properties": {
            "amount_paid": {
              "docs": "The amount paid in this installment.
",
              "type": "optional<double>",
            },
            "currency": {
              "docs": "The currency of the related invoice. For example:
    
- 🇧🇷 BRL (Brazilian Real)
- 🇨🇴 COP (Colombian Peso)
- 🇲🇽 MXN (Mexican Peso)
  
  Please note that other currencies other than in the list above may be returned.
",
              "type": "optional<string>",
            },
            "invoice_identification": {
              "docs": "The fiscal institution's unique ID for the related deferred invoice.
",
              "type": "optional<string>",
            },
            "outstanding_balance": {
              "docs": "The amount remaining to be paid.
",
              "type": "optional<double>",
            },
            "partiality_number": {
              "docs": "The payment installment number.
",
              "type": "optional<integer>",
            },
            "payment_method": {
              "docs": "The payment method of the related invoice.
",
              "type": "optional<string>",
            },
            "previous_balance": {
              "docs": "The invoice amount before the payment.
",
              "type": "optional<double>",
            },
          },
        },
        "InvoicesPaymentsSat": {
          "docs": undefined,
          "properties": {
            "amount": {
              "docs": "The invoice amount, in the currency of the original invoice.
",
              "type": "optional<double>",
            },
            "beneficiary_account_number": {
              "docs": "The bank account number of the payment beneficiary.
",
              "type": "optional<string>",
            },
            "beneficiary_rfc": {
              "docs": "The fiscal ID of the payment beneficiary.
",
              "type": "optional<string>",
            },
            "currency": {
              "docs": "The currency of the payment. For example:

- 🇧🇷 BRL (Brazilian Real)
- 🇨🇴 COP (Colombian Peso)
- 🇲🇽 MXN (Mexican Peso)

Please note that other currencies other than in the list above may be returned.
",
              "type": "optional<string>",
            },
            "date": {
              "docs": "ISO-8601 timestamp when the payment was made.
",
              "type": "optional<string>",
            },
            "exchange_rate": {
              "docs": "The \`currency\` to MXN currency exchange rate when the payment was made.
",
              "type": "optional<string>",
            },
            "operation_number": {
              "docs": "The fiscal institution's internal identifier for the operation.
",
              "type": "optional<string>",
            },
            "payer_account_number": {
              "docs": "The bank account number of the payment issuer.
",
              "type": "optional<string>",
            },
            "payer_bank_name": {
              "docs": "The banking institution that was used by the payment issuer.
",
              "type": "optional<string>",
            },
            "payer_rfc": {
              "docs": "The fiscal ID of the payment issuer.
",
              "type": "optional<string>",
            },
            "payment_type": {
              "docs": "Payment type code used for this invoice, as defined by the country's legal entity.

- 🇲🇽 Mexico [SAT catalog reference article](https://developers.belvo.com/docs/sat-catalogs#payment-type)
",
              "type": "optional<string>",
            },
            "related_documents": {
              "docs": "A list of all the related deferred invoices affected by the payment.
",
              "type": "list<InvoicesPaymentsRelatedDocumentsSat>",
            },
          },
        },
        "InvoicesPayrollDian": {
          "docs": undefined,
          "properties": {
            "amount": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "optional<double>",
            },
            "collected_at": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.",
              "type": "optional<string>",
            },
            "date_from": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "optional<string>",
            },
            "date_to": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "optional<string>",
            },
            "days": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "optional<integer>",
            },
            "payment_date": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "optional<string>",
            },
            "type": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "optional<string>",
            },
            "version": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "optional<string>",
            },
          },
        },
        "InvoicesPayrollSat": {
          "docs": undefined,
          "properties": {
            "amount": {
              "docs": "The total amount of the payroll payment.
",
              "type": "double",
            },
            "collected_at": {
              "docs": "The ISO-8601 timestamp when the data point was collected.",
              "type": "optional<string>",
            },
            "date_from": {
              "docs": "The start date of the payment period.
",
              "type": "optional<string>",
            },
            "date_to": {
              "docs": "The end date of the payment period.
",
              "type": "optional<string>",
            },
            "days": {
              "docs": "The number of days covered by the payment.
",
              "type": "optional<integer>",
            },
            "payment_date": {
              "docs": "The payment date.
",
              "type": "string",
            },
            "type": {
              "docs": "The payroll type, as defined by the legal entity of the country.

- 🇲🇽 Mexico [SAT catalog reference article](https://developers.belvo.com/docs/sat-catalogs#payroll-type)
",
              "type": "optional<string>",
            },
            "version": {
              "docs": "The version of the payroll object.
",
              "type": "string",
            },
          },
        },
        "InvoicesReceiverDetailsDian": {
          "docs": undefined,
          "properties": {
            "address": {
              "docs": "The receiver's address.
",
              "type": "optional<string>",
            },
            "collected_at": {
              "docs": "The ISO-8601 timestamp when the data point was collected.",
              "type": "optional<string>",
            },
            "country": {
              "docs": "The country where the receiver pays their taxes.
",
              "type": "optional<string>",
            },
            "email": {
              "docs": "The receiver's email address.
",
              "type": "optional<string>",
            },
            "phone_number": {
              "docs": "The receiver's phone number.
",
              "type": "optional<string>",
            },
            "regimen": {
              "docs": "The receiver's regimen type.

For detailed information regarding DIAN's regimens, please see their [official PDF](https://www.dian.gov.co/impuestos/factura-electronica/Documents/Anexo_tecnico_factura_electronica_vr_1_7_2020.pdf).
",
              "type": "optional<string>",
            },
            "tax_payer_type": {
              "docs": "Indicates if the receiver is a business or an individual. Can be either:
  
  - \`Persona Jurídica\`
  - \`Persona Natural\`
",
              "type": "optional<string>",
            },
            "tax_scheme": {
              "docs": "The receiver's fiscal responsibilities.

For detailed information regarding DIAN's tax schemes, please see their [official PDF](https://www.dian.gov.co/impuestos/factura-electronica/Documents/Anexo_tecnico_factura_electronica_vr_1_7_2020.pdf).
",
              "type": "optional<string>",
            },
          },
        },
        "InvoicesResponsePaginatedResponse": {
          "docs": undefined,
          "properties": {
            "count": {
              "docs": "The total number of results in your Belvo account.",
              "type": "optional<integer>",
            },
            "next": {
              "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is \`null\`.

In our documentation example, we use \`{endpoint}\` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, \`accounts\` or \`owners\`).
",
              "type": "optional<string>",
            },
            "previous": {
              "docs": "The URL to the previous page of results. If there is no previous page, the value is \`null\`.",
              "type": "optional<string>",
            },
            "results": {
              "docs": "Array of invoice objects.",
              "type": "optional<list<InvoicesResponsePaginatedResponseResultsItem>>",
            },
          },
        },
        "InvoicesResponsePaginatedResponseResultsItem": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "InvoiceWithIdSat",
            },
            {
              "docs": undefined,
              "type": "InvoiceDian",
            },
          ],
        },
        "LastErrorInvalidCredentials": {
          "docs": "Information about the error you ran into in the previous step of the payment intent, if applicable. This error can occur when the credentials that your customer provides are incorrect.",
          "properties": {
            "error_code": {
              "docs": "A unique error code (\`invalid_credentials\`) that allows you to classify and handle the error programmatically.",
              "type": "string",
            },
            "error_message": {
              "docs": "A short description of the error.",
              "type": "string",
            },
          },
        },
        "LastErrorInvalidToken": {
          "docs": "Information about the error you ran into in the previous step of the payment intent, if applicable. This error can occur when the MFA token your customer provides is invalid.",
          "properties": {
            "error_code": {
              "docs": "A unique error code (\`invalid_token\`) that allows you to classify and handle the error programmatically.",
              "type": "string",
            },
            "error_message": {
              "docs": "A short description of the error.",
              "type": "string",
            },
          },
        },
        "LastErrorLoginError": {
          "docs": "Information about the error you ran into in the previous step of the payment intent, if applicable. This error can occur when something unexpected happened in the \`pse_display_credentials_required\` next step.",
          "properties": {
            "error_code": {
              "docs": "A unique error code (\`login_error\`) that allows you to classify and handle the error programmatically.",
              "type": "string",
            },
            "error_message": {
              "docs": "A short description of the error.",
              "type": "string",
            },
          },
        },
        "LastErrorPaymentError": {
          "docs": "Information about the error you ran into in the previous step of the payment intent, if applicable. This error can occur when something unexpected happened during the payment intent process.",
          "properties": {
            "error_code": {
              "docs": "A unique error code (\`payment_error\`) that allows you to classify and handle the error programmatically.",
              "type": "string",
            },
            "error_message": {
              "docs": "A short description of the error.",
              "type": "string",
            },
          },
        },
        "LastErrorSessionExpired": {
          "docs": "Information about the error you ran into in the previous step of the payment intent, if applicable. This error occurs when you try to send a PATCH request after the session has already expired (the session expires after 10 minutes).",
          "properties": {
            "error_code": {
              "docs": "A unique error code (\`session_expired\`) that allows you to classify and handle the error programmatically.",
              "type": "string",
            },
            "error_message": {
              "docs": "A short description of the error.",
              "type": "string",
            },
          },
        },
        "LastErrorTwoFactor": {
          "docs": "Information about the error you ran into in the previous step of the payment intent, if applicable. This error can occur when something unexpected happened in the \`pse_display_token_required\` next step.",
          "properties": {
            "error_code": {
              "docs": "A unique error code (\`login_two_factor_error\`) that allows you to classify and handle the error programmatically.",
              "type": "string",
            },
            "error_message": {
              "docs": "A short description of the error.",
              "type": "string",
            },
          },
        },
        "Link": {
          "docs": undefined,
          "properties": {
            "access_mode": {
              "docs": undefined,
              "type": "optional<EnumLinkAccessModeResponse>",
            },
            "created_at": {
              "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
              "type": "optional<string>",
            },
            "created_by": {
              "docs": "The unique ID for the user that created this link.",
              "type": "optional<string>",
            },
            "external_id": {
              "docs": "The \`external_id\` you provided as an additional identifier for the link. For more information, see our [Link creation article](https://developers.belvo.com/docs/link-creation-best-practices#adding-your-own-identifier).",
              "type": "optional<string>",
            },
            "id": {
              "docs": "Belvo's unique ID for the current Link.",
              "type": "optional<string>",
            },
            "institution": {
              "docs": "Belvo's name for the institution.
",
              "type": "optional<string>",
            },
            "institution_user_id": {
              "docs": "<div style="background-color:#f4f6f8; border-left: 6px solid #0663F9;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right: 25px"> <strong>Info:</strong> Only applicable for links created <b>after 08-02-2022</b>. </div>

A unique 44-character string that can be used to identify a user at a given institution.

📚 Check out our [Avoiding duplicated links](https://developers.belvo.com/docs/link-creation-best-practices#avoiding-duplicated-links) DevPortal article for more information and tips on how to use it.",
              "type": "optional<string>",
            },
            "last_accessed_at": {
              "docs": "The ISO-8601 timestamp of Belvo's most recent successful access to the institution for the given link.",
              "type": "optional<string>",
            },
            "refresh_rate": {
              "docs": undefined,
              "type": "optional<EnumLinkRefreshRate>",
            },
            "status": {
              "docs": undefined,
              "type": "optional<EnumLinkStatus>",
            },
          },
        },
        "ListPaymentLinksRequestOrdering": {
          "docs": undefined,
          "enum": [
            {
              "name": "Ascending",
              "value": "created_at",
            },
            {
              "name": "Descending",
              "value": "-created_at",
            },
          ],
        },
        "ListPaymentLinksRequestStatus": {
          "docs": undefined,
          "enum": [
            {
              "name": "ACTIVE",
              "value": "ACTIVE",
            },
            {
              "name": "INACTIVE",
              "value": "INACTIVE",
            },
          ],
        },
        "ListTaxDeclarationsResponse": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "TaxDeclarationIndividualPaginated",
            },
            {
              "docs": undefined,
              "type": "TaxDeclarationBusinessPaginated",
            },
          ],
        },
        "ListTaxReturnsResponse": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "TaxReturnsPersonalPaginated",
            },
            {
              "docs": undefined,
              "type": "TaxReturnsPersonalMonthlyPaginated",
            },
            {
              "docs": undefined,
              "type": "TaxReturnsBusinessPaginated",
            },
            {
              "docs": undefined,
              "type": "TaxReturnsBusinessMonthlyPaginated",
            },
          ],
        },
        "LoginError": {
          "docs": "This error can occur when:

  - the credentials that your user provides are incorrect or missing.
  - the MFA token your user provides is not supported by Belvo.
  - there is an issue with the institution that prevents logins.
  - the user's account is either locked or the user does not have permission to access their internet banking.",
          "properties": {
            "code": {
              "docs": "A unique error code (\`login_error\`) that allows you to classify and handle the error programmatically.

ℹ️ Check our DevPortal for more information on how to handle <a href="https://developers.belvo.com/docs/belvo-api-errors#400-login_error" target="_blank">400 login_error errors</a>.",
              "type": "optional<string>",
            },
            "message": {
              "docs": "A short description of the error. 

For \`login_error\` errors, the description can be one of the following:

  - \`Invalid credentials provided to login to the institution\`
  - \`A MFA token is required by the institution, but it's not supported yet by Belvo.\`
  - \`Impossible to login, something unexpected happened while logging into the institution. Try again later.\`
  - \`Login not attempted due to invalid credentials\`
  - \`Missing credentials to login to the institution\`
  - \`The user account access was forbidden by the institution\`
  - \`The user account is locked, user needs to contact the institution to unlock it\`",
              "type": "optional<string>",
            },
            "request_id": {
              "docs": "A 32-character unique ID of the request (matching a regex pattern of: \`[a-f0-9]{32}\`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
              "type": "optional<string>",
            },
          },
        },
        "NeedsRedirectContent": {
          "docs": "Details regarding the payer institution.",
          "properties": {
            "payer_institution": {
              "docs": undefined,
              "type": "optional<PaymentInstitution>",
            },
          },
        },
        "NeedsRedirectContentPse": {
          "docs": "Details regarding the payer institution.",
          "properties": {
            "payer_institution": {
              "docs": undefined,
              "type": "optional<InstitutionFormField>",
            },
          },
        },
        "NetIncomeIndividual": {
          "docs": "Object containing the declared net income of the tax payer. The values are calculated as the \`gross_income\` - \`non_taxable_income\`.",
          "properties": {
            "capital_income": {
              "docs": "Income received from an investment (such as dividends or from renting a property).",
              "type": "double",
            },
            "earned_income": {
              "docs": "Income received from employment.",
              "type": "double",
            },
            "fee_based_income": {
              "docs": "Income received from emitted invoices (for example, income independent contractors or freelancers receive).",
              "type": "double",
            },
            "non_labor_income": {
              "docs": "Income that cannot be classified into the other three fields (such as income from cryptocurrencies or regular transfers from parents).",
              "type": "double",
            },
          },
        },
        "NextStepDisplayConfirmationRequiredOfpi": {
          "docs": "Object detailing the next steps you should follow for a specific \`next_step\` type.",
          "properties": {
            "open_finance_display_confirmation_required": {
              "docs": undefined,
              "type": "optional<DisplayConfirmationRequiredOfpi>",
            },
            "ready_to_confirm": {
              "docs": "Boolean that indicates whether the payment intent is ready to be confirmed. 

  **Note:** When set to \`true\`, you need to confirm the payment by making a PATCH request sending through \`confirm: true\`.",
              "type": "optional<boolean>",
            },
            "type": {
              "docs": "The type of \`next_step\` you need to follow.
",
              "type": "optional<NextStepDisplayConfirmationRequiredOfpiType>",
            },
          },
        },
        "NextStepDisplayConfirmationRequiredOfpiType": {
          "docs": undefined,
          "enum": [
            {
              "name": "open_finance_display_payment_method_information",
              "value": "open_finance_display_payment_method_information",
            },
            {
              "name": "open_finance_display_confirmation_required",
              "value": "open_finance_display_confirmation_required",
            },
            {
              "name": "open_finance_display_needs_redirect",
              "value": "open_finance_display_needs_redirect",
            },
            {
              "name": "open_finance_display_payment_processing",
              "value": "open_finance_display_payment_processing",
            },
            {
              "name": "open_finance_display_payment_succeeded",
              "value": "open_finance_display_payment_succeeded",
            },
            {
              "name": "open_finance_display_payment_failed",
              "value": "open_finance_display_payment_failed",
            },
          ],
        },
        "NextStepDisplayConfirmationRequiredPse": {
          "docs": "Object detailing the next steps you should follow for a specific \`next_step\` type.",
          "properties": {
            "pse_display_confirmation_required": {
              "docs": undefined,
              "type": "optional<DisplayConfirmationRequiredContentPse>",
            },
            "ready_to_confirm": {
              "docs": "Boolean that indicates whether the payment intent is ready to be confirmed. 

  **Note:** When the value is \`true\`, you'll need to make a PATCH request sending through \`confirm: true\` to confirm the payment.",
              "type": "optional<boolean>",
            },
            "type": {
              "docs": "The type of \`next_step\` you need to follow.
",
              "type": "optional<NextStepDisplayConfirmationRequiredPseType>",
            },
          },
        },
        "NextStepDisplayConfirmationRequiredPseType": {
          "docs": undefined,
          "enum": [
            {
              "name": "pse_display_payment_method_information",
              "value": "pse_display_payment_method_information",
            },
            {
              "name": "pse_display_credentials_required",
              "value": "pse_display_credentials_required",
            },
            {
              "name": "pse_display_needs_redirect",
              "value": "pse_display_needs_redirect",
            },
            {
              "name": "pse_display_token_required",
              "value": "pse_display_token_required",
            },
            {
              "name": "pse_display_customer_bank_accounts",
              "value": "pse_display_customer_bank_accounts",
            },
            {
              "name": "pse_display_confirmation_required",
              "value": "pse_display_confirmation_required",
            },
            {
              "name": "pse_display_payment_processing",
              "value": "pse_display_payment_processing",
            },
            {
              "name": "pse_display_payment_failed",
              "value": "pse_display_payment_failed",
            },
            {
              "name": "pse_display_payment_succeeded",
              "value": "pse_display_payment_succeeded",
            },
          ],
        },
        "NextStepDisplayCredentialsRequiredPse": {
          "docs": "Object detailing the next steps you should follow for a specific \`next_step\` type.",
          "properties": {
            "pse_display_credentials_required": {
              "docs": undefined,
              "type": "optional<DisplayCredentialsRequiredContentPse>",
            },
            "ready_to_confirm": {
              "docs": "Boolean that indicates whether the payment intent is ready to be confirmed. 

  **Note:** When the value is \`true\`, you'll need to make a PATCH request sending through \`confirm: true\` to confirm the payment.",
              "type": "optional<boolean>",
            },
            "type": {
              "docs": "The type of \`next_step\` you need to follow.
",
              "type": "optional<NextStepDisplayCredentialsRequiredPseType>",
            },
          },
        },
        "NextStepDisplayCredentialsRequiredPseType": {
          "docs": undefined,
          "enum": [
            {
              "name": "pse_display_payment_method_information",
              "value": "pse_display_payment_method_information",
            },
            {
              "name": "pse_display_credentials_required",
              "value": "pse_display_credentials_required",
            },
            {
              "name": "pse_display_needs_redirect",
              "value": "pse_display_needs_redirect",
            },
            {
              "name": "pse_display_token_required",
              "value": "pse_display_token_required",
            },
            {
              "name": "pse_display_customer_bank_accounts",
              "value": "pse_display_customer_bank_accounts",
            },
            {
              "name": "pse_display_confirmation_required",
              "value": "pse_display_confirmation_required",
            },
            {
              "name": "pse_display_payment_processing",
              "value": "pse_display_payment_processing",
            },
            {
              "name": "pse_display_payment_failed",
              "value": "pse_display_payment_failed",
            },
            {
              "name": "pse_display_payment_succeeded",
              "value": "pse_display_payment_succeeded",
            },
          ],
        },
        "NextStepDisplayCustomerBankAccountsPse": {
          "docs": "Object detailing the next steps you should follow for a specific \`next_step\` type.",
          "properties": {
            "pse_display_customer_bank_accounts": {
              "docs": undefined,
              "type": "optional<DisplayCustomerBankAccountsContentPse>",
            },
            "ready_to_confirm": {
              "docs": "Boolean that indicates whether the payment intent is ready to be confirmed. 

  **Note:** When the value is \`true\`, you'll need to make a PATCH request sending through \`confirm: true\` to confirm the payment.",
              "type": "optional<boolean>",
            },
            "type": {
              "docs": "The type of \`next_step\` you need to follow.
",
              "type": "optional<NextStepDisplayCustomerBankAccountsPseType>",
            },
          },
        },
        "NextStepDisplayCustomerBankAccountsPseType": {
          "docs": undefined,
          "enum": [
            {
              "name": "pse_display_payment_method_information",
              "value": "pse_display_payment_method_information",
            },
            {
              "name": "pse_display_credentials_required",
              "value": "pse_display_credentials_required",
            },
            {
              "name": "pse_display_needs_redirect",
              "value": "pse_display_needs_redirect",
            },
            {
              "name": "pse_display_token_required",
              "value": "pse_display_token_required",
            },
            {
              "name": "pse_display_customer_bank_accounts",
              "value": "pse_display_customer_bank_accounts",
            },
            {
              "name": "pse_display_confirmation_required",
              "value": "pse_display_confirmation_required",
            },
            {
              "name": "pse_display_payment_processing",
              "value": "pse_display_payment_processing",
            },
            {
              "name": "pse_display_payment_failed",
              "value": "pse_display_payment_failed",
            },
            {
              "name": "pse_display_payment_succeeded",
              "value": "pse_display_payment_succeeded",
            },
          ],
        },
        "NextStepDisplayNeedsRedirectPse": {
          "docs": "Object detailing the next steps you should follow for a specific \`next_step\` type.",
          "properties": {
            "pse_display_needs_redirect": {
              "docs": undefined,
              "type": "optional<NeedsRedirectContentPse>",
            },
            "ready_to_confirm": {
              "docs": "Boolean that indicates whether the payment intent is ready to be confirmed. 

  **Note:** When the value is \`true\`, you'll need to make a PATCH request sending through \`confirm: true\` to confirm the payment.",
              "type": "optional<boolean>",
            },
            "type": {
              "docs": "The type of \`next_step\` you need to follow.
",
              "type": "optional<NextStepDisplayNeedsRedirectPseType>",
            },
          },
        },
        "NextStepDisplayNeedsRedirectPseType": {
          "docs": undefined,
          "enum": [
            {
              "name": "pse_display_payment_method_information",
              "value": "pse_display_payment_method_information",
            },
            {
              "name": "pse_display_credentials_required",
              "value": "pse_display_credentials_required",
            },
            {
              "name": "pse_display_needs_redirect",
              "value": "pse_display_needs_redirect",
            },
            {
              "name": "pse_display_token_required",
              "value": "pse_display_token_required",
            },
            {
              "name": "pse_display_customer_bank_accounts",
              "value": "pse_display_customer_bank_accounts",
            },
            {
              "name": "pse_display_confirmation_required",
              "value": "pse_display_confirmation_required",
            },
            {
              "name": "pse_display_payment_processing",
              "value": "pse_display_payment_processing",
            },
            {
              "name": "pse_display_payment_failed",
              "value": "pse_display_payment_failed",
            },
            {
              "name": "pse_display_payment_succeeded",
              "value": "pse_display_payment_succeeded",
            },
          ],
        },
        "NextStepDisplayPaymentFailed": {
          "docs": "Object detailing the next steps you should follow for a specific \`next_step\` type.",
          "properties": {
            "open_finance_display_payment_failed": {
              "docs": undefined,
              "type": "optional<DisplayPaymentFailed>",
            },
            "ready_to_confirm": {
              "docs": "Boolean that indicates whether the payment intent is ready to be confirmed. 

  **Note:** When set to \`true\`,you need to confirm the payment by making a PATCH request sending through \`confirm: true\`.",
              "type": "optional<boolean>",
            },
            "type": {
              "docs": "The type of \`next_step\` you need to follow.
",
              "type": "optional<NextStepDisplayPaymentFailedType>",
            },
          },
        },
        "NextStepDisplayPaymentFailedType": {
          "docs": undefined,
          "enum": [
            {
              "name": "open_finance_display_payment_method_information",
              "value": "open_finance_display_payment_method_information",
            },
            {
              "name": "open_finance_display_confirmation_required",
              "value": "open_finance_display_confirmation_required",
            },
            {
              "name": "open_finance_display_needs_redirect",
              "value": "open_finance_display_needs_redirect",
            },
            {
              "name": "open_finance_display_payment_processing",
              "value": "open_finance_display_payment_processing",
            },
            {
              "name": "open_finance_display_payment_succeeded",
              "value": "open_finance_display_payment_succeeded",
            },
            {
              "name": "open_finance_display_payment_failed",
              "value": "open_finance_display_payment_failed",
            },
          ],
        },
        "NextStepDisplayPaymentMethodInformation": {
          "docs": "Object detailing the next steps you should follow for a specific \`next_step\` type.",
          "properties": {
            "open_finance_display_payment_method_information": {
              "docs": undefined,
              "type": "optional<DisplayPaymentMethodInformationContentOfpi>",
            },
            "ready_to_confirm": {
              "docs": "Boolean that indicates whether the payment intent is ready to be confirmed. 

  **Note:** When set to \`true\`, you need to confirm the payment by making a PATCH request sending through \`confirm: true\`.",
              "type": "optional<boolean>",
            },
            "type": {
              "docs": "The type of \`next_step\` you need to follow.
",
              "type": "optional<NextStepDisplayPaymentMethodInformationType>",
            },
          },
        },
        "NextStepDisplayPaymentMethodInformationPse": {
          "docs": "Object detailing the next steps you should follow for a specific \`next_step\` type. You'll need to send a PATCH request with the institution selected by the customer or their bank accounts (if there are accounts already saved in the Belvo database).",
          "properties": {
            "pse_display_payment_method_information": {
              "docs": undefined,
              "type": "optional<DisplayPaymentMethodInformationContentPse>",
            },
            "ready_to_confirm": {
              "docs": "Boolean that indicates whether the payment intent is ready to be confirmed. 

  **Note:** When the value is \`true\`, you'll need to make a PATCH request sending through \`confirm: true\` to confirm the payment.",
              "type": "optional<boolean>",
            },
            "type": {
              "docs": "The type of \`next_step\` you need to follow.
",
              "type": "optional<NextStepDisplayPaymentMethodInformationPseType>",
            },
          },
        },
        "NextStepDisplayPaymentMethodInformationPseType": {
          "docs": undefined,
          "enum": [
            {
              "name": "pse_display_payment_method_information",
              "value": "pse_display_payment_method_information",
            },
            {
              "name": "pse_display_credentials_required",
              "value": "pse_display_credentials_required",
            },
            {
              "name": "pse_display_needs_redirect",
              "value": "pse_display_needs_redirect",
            },
            {
              "name": "pse_display_token_required",
              "value": "pse_display_token_required",
            },
            {
              "name": "pse_display_customer_bank_accounts",
              "value": "pse_display_customer_bank_accounts",
            },
            {
              "name": "pse_display_confirmation_required",
              "value": "pse_display_confirmation_required",
            },
            {
              "name": "pse_display_payment_processing",
              "value": "pse_display_payment_processing",
            },
            {
              "name": "pse_display_payment_failed",
              "value": "pse_display_payment_failed",
            },
            {
              "name": "pse_display_payment_succeeded",
              "value": "pse_display_payment_succeeded",
            },
          ],
        },
        "NextStepDisplayPaymentMethodInformationType": {
          "docs": undefined,
          "enum": [
            {
              "name": "open_finance_display_payment_method_information",
              "value": "open_finance_display_payment_method_information",
            },
            {
              "name": "open_finance_display_confirmation_required",
              "value": "open_finance_display_confirmation_required",
            },
            {
              "name": "open_finance_display_needs_redirect",
              "value": "open_finance_display_needs_redirect",
            },
            {
              "name": "open_finance_display_payment_processing",
              "value": "open_finance_display_payment_processing",
            },
            {
              "name": "open_finance_display_payment_succeeded",
              "value": "open_finance_display_payment_succeeded",
            },
            {
              "name": "open_finance_display_payment_failed",
              "value": "open_finance_display_payment_failed",
            },
          ],
        },
        "NextStepDisplayPaymentProcessing": {
          "docs": "Object detailing the next steps you should follow for a specific \`next_step\` type.",
          "properties": {
            "open_finance_display_payment_processing": {
              "docs": undefined,
              "type": "optional<DisplayPaymentProcessing>",
            },
            "ready_to_confirm": {
              "docs": "Boolean that indicates whether the payment intent is ready to be confirmed. 

  **Note:** When set to \`true\`, you need to confirm the payment by making a PATCH request sending through \`confirm: true\`.",
              "type": "optional<boolean>",
            },
            "type": {
              "docs": "The type of \`next_step\` you need to follow.
",
              "type": "optional<NextStepDisplayPaymentProcessingType>",
            },
          },
        },
        "NextStepDisplayPaymentProcessingType": {
          "docs": undefined,
          "enum": [
            {
              "name": "open_finance_display_payment_method_information",
              "value": "open_finance_display_payment_method_information",
            },
            {
              "name": "open_finance_display_confirmation_required",
              "value": "open_finance_display_confirmation_required",
            },
            {
              "name": "open_finance_display_needs_redirect",
              "value": "open_finance_display_needs_redirect",
            },
            {
              "name": "open_finance_display_payment_processing",
              "value": "open_finance_display_payment_processing",
            },
            {
              "name": "open_finance_display_payment_succeeded",
              "value": "open_finance_display_payment_succeeded",
            },
            {
              "name": "open_finance_display_payment_failed",
              "value": "open_finance_display_payment_failed",
            },
          ],
        },
        "NextStepDisplayPaymentSucceeded": {
          "docs": "Object detailing the next steps you should follow for a specific \`next_step\` type.",
          "properties": {
            "open_finance_display_payment_succeeded": {
              "docs": undefined,
              "type": "optional<DisplayPaymentSucceeded>",
            },
            "ready_to_confirm": {
              "docs": "Boolean that indicates whether the payment intent is ready to be confirmed. 

  **Note:** When set to \`true\`, you need to confirm the payment by making a PATCH request sending through \`confirm: true\`.",
              "type": "optional<boolean>",
            },
            "type": {
              "docs": "The type of \`next_step\` you need to follow.
",
              "type": "optional<NextStepDisplayPaymentSucceededType>",
            },
          },
        },
        "NextStepDisplayPaymentSucceededType": {
          "docs": undefined,
          "enum": [
            {
              "name": "open_finance_display_payment_method_information",
              "value": "open_finance_display_payment_method_information",
            },
            {
              "name": "open_finance_display_confirmation_required",
              "value": "open_finance_display_confirmation_required",
            },
            {
              "name": "open_finance_display_needs_redirect",
              "value": "open_finance_display_needs_redirect",
            },
            {
              "name": "open_finance_display_payment_processing",
              "value": "open_finance_display_payment_processing",
            },
            {
              "name": "open_finance_display_payment_succeeded",
              "value": "open_finance_display_payment_succeeded",
            },
            {
              "name": "open_finance_display_payment_failed",
              "value": "open_finance_display_payment_failed",
            },
          ],
        },
        "NextStepDisplayTokenRequiredPse": {
          "docs": "Object detailing the next steps you should follow for a specific \`next_step\` type.",
          "properties": {
            "pse_display_token_required": {
              "docs": undefined,
              "type": "optional<DisplayTokenRequiredContentPse>",
            },
            "ready_to_confirm": {
              "docs": "Boolean that indicates whether the payment intent is ready to be confirmed. This value will return: 

  - \`false\` when a customer wants to pay for the very first time. This is so because you still need to input information about your customer in the following steps to process a payment successfully. 
  - \`true\` when a customer wants to pay and this is not their first time. This is so because the payment intent has all the information needed about the customer to process a payment. 


**Note:** When the value is \`true\`, you'll need to confirm the payment intent. You can do this by making a PATCH request sending through the parameter \`confirm: true\`.",
              "type": "optional<boolean>",
            },
            "type": {
              "docs": "The type of \`next_step\` you need to follow.
",
              "type": "optional<NextStepDisplayTokenRequiredPseType>",
            },
          },
        },
        "NextStepDisplayTokenRequiredPseType": {
          "docs": undefined,
          "enum": [
            {
              "name": "pse_display_payment_method_information",
              "value": "pse_display_payment_method_information",
            },
            {
              "name": "pse_display_credentials_required",
              "value": "pse_display_credentials_required",
            },
            {
              "name": "pse_display_needs_redirect",
              "value": "pse_display_needs_redirect",
            },
            {
              "name": "pse_display_token_required",
              "value": "pse_display_token_required",
            },
            {
              "name": "pse_display_customer_bank_accounts",
              "value": "pse_display_customer_bank_accounts",
            },
            {
              "name": "pse_display_confirmation_required",
              "value": "pse_display_confirmation_required",
            },
            {
              "name": "pse_display_payment_processing",
              "value": "pse_display_payment_processing",
            },
            {
              "name": "pse_display_payment_failed",
              "value": "pse_display_payment_failed",
            },
            {
              "name": "pse_display_payment_succeeded",
              "value": "pse_display_payment_succeeded",
            },
          ],
        },
        "NextStepNeedsRedirect": {
          "docs": "Object detailing the next steps you should follow for a specific \`next_step\` type.",
          "properties": {
            "open_finance_display_needs_redirect": {
              "docs": undefined,
              "type": "optional<NeedsRedirectContent>",
            },
            "ready_to_confirm": {
              "docs": "Boolean that indicates whether the payment intent is ready to be confirmed. 

  **Note:** When set to \`true\`, you need to confirm the payment by making a PATCH request sending through \`confirm: true\`.",
              "type": "optional<boolean>",
            },
            "type": {
              "docs": "The type of \`next_step\` you need to follow.",
              "type": "optional<NextStepNeedsRedirectType>",
            },
          },
        },
        "NextStepNeedsRedirectType": {
          "docs": undefined,
          "enum": [
            {
              "name": "open_finance_display_payment_method_information",
              "value": "open_finance_display_payment_method_information",
            },
            {
              "name": "open_finance_display_confirmation_required",
              "value": "open_finance_display_confirmation_required",
            },
            {
              "name": "open_finance_display_needs_redirect",
              "value": "open_finance_display_needs_redirect",
            },
            {
              "name": "open_finance_display_payment_processing",
              "value": "open_finance_display_payment_processing",
            },
            {
              "name": "open_finance_display_payment_succeeded",
              "value": "open_finance_display_payment_succeeded",
            },
            {
              "name": "open_finance_display_payment_failed",
              "value": "open_finance_display_payment_failed",
            },
          ],
        },
        "NonTaxableIncomeIndividual": {
          "docs": "Object containing the declared non-taxable income of the tax payer.",
          "properties": {
            "capital_income": {
              "docs": "Income received from an investment (such as dividends or from renting a property).",
              "type": "double",
            },
            "earned_income": {
              "docs": "Income received from employment.",
              "type": "double",
            },
            "fee_based_income": {
              "docs": "Income received from emitted invoices (for example, income independent contractors or freelancers receive).",
              "type": "double",
            },
            "non_labor_income": {
              "docs": "Income that cannot be classified into the other three fields (such as income from cryptocurrencies or regular transfers from parents).",
              "type": "double",
            },
          },
        },
        "NotFoundErrorBody": {
          "docs": undefined,
          "properties": {
            "code": {
              "docs": "A unique error code (\`not_found\`) that allows you to classify and handle the error programmatically.

ℹ️ Check our DevPortal for more information on how to handle <a href="https://developers.belvo.com/docs/belvo-api-errors#404-not_found" target="_blank">404 not_found errors</a>.",
              "type": "optional<string>",
            },
            "message": {
              "docs": "A short description of the error. 

For \`not_found\` errors, the description is:
  
  - \`Not found\`",
              "type": "optional<string>",
            },
            "request_id": {
              "docs": "A 32-character unique ID of the request (matching a regex pattern of: \`[a-f0-9]{32}\`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
              "type": "optional<string>",
            },
          },
        },
        "Owner": {
          "docs": undefined,
          "properties": {
            "address": {
              "docs": "The accounts owners registered address.",
              "type": "optional<string>",
            },
            "collected_at": {
              "docs": "The ISO-8601 timestamp when the data point was collected.",
              "type": "optional<string>",
            },
            "created_at": {
              "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
              "type": "optional<string>",
            },
            "display_name": {
              "docs": "The full name of the owner, as provided by the bank.",
              "type": "optional<string>",
            },
            "document_id": {
              "docs": undefined,
              "type": "optional<OwnerDocumentId>",
            },
            "email": {
              "docs": "The account owner's registered email address.",
              "type": "optional<string>",
            },
            "first_name": {
              "docs": "*This field has been deprecated.*

*The first name of the account owner.*
",
              "type": "optional<string>",
            },
            "id": {
              "docs": "Belvo's unique identifier used to reference the current owner.",
              "type": "optional<string>",
            },
            "internal_identification": {
              "docs": "The institution's internal identifier for the owner.",
              "type": "optional<string>",
            },
            "last_name": {
              "docs": "*This field has been deprecated.*

*The last name of the account owner.*
",
              "type": "optional<string>",
            },
            "link": {
              "docs": "Belvo's unique ID for the current Link.",
              "type": "optional<string>",
            },
            "phone_number": {
              "docs": "The account owner's registered phone number.",
              "type": "optional<string>",
            },
            "second_last_name": {
              "docs": "*This field has been deprecated.*

*The second last name of the account owner.*
",
              "type": "optional<string>",
            },
          },
        },
        "OwnerDocumentId": {
          "docs": undefined,
          "properties": {
            "document_number": {
              "docs": "The document's identification number.",
              "type": "optional<string>",
            },
            "document_type": {
              "docs": "The type of document the owner provided to the institution to open the account. Common document types are:

🇧🇷 Brazil
- \`CPF\` (*Cadastro de Pessoas Físicas*)
- \`CNPJ\`(*Cadastro Nacional de Pessoas Jurídicas*)

🇨🇴 Colombia
- \`CC\`(*Cédula de Ciudadanía*)
- \`NIT\` (*Número de Identificación Tributaria*)

🇲🇽 Mexico
- \`CURP\` (*Clave Única de Registro de Población*)
- \`NISS\` (*Número de Seguridad Social*)
",
              "type": "optional<string>",
            },
          },
        },
        "OwnersPaginatedResponse": {
          "docs": undefined,
          "properties": {
            "count": {
              "docs": "The total number of results in your Belvo account.",
              "type": "optional<integer>",
            },
            "next": {
              "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is \`null\`.

In our documentation example, we use \`{endpoint}\` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, \`accounts\` or \`owners\`).
",
              "type": "optional<string>",
            },
            "previous": {
              "docs": "The URL to the previous page of results. If there is no previous page, the value is \`null\`.",
              "type": "optional<string>",
            },
            "results": {
              "docs": "Array of owner objects.",
              "type": "optional<list<Owner>>",
            },
          },
        },
        "PaginatedResponseLink": {
          "docs": undefined,
          "properties": {
            "count": {
              "docs": "The total number of results in your Belvo account.",
              "type": "optional<integer>",
            },
            "next": {
              "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is \`null\`.

In our documentation example, we use \`{endpoint}\` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, \`accounts\` or \`owners\`).
",
              "type": "optional<string>",
            },
            "previous": {
              "docs": "The URL to the previous page of results. If there is no previous page, the value is \`null\`.",
              "type": "optional<string>",
            },
            "results": {
              "docs": undefined,
              "type": "optional<list<Link>>",
            },
          },
        },
        "PatchBody": {
          "docs": "A JSON object containing a session UUID and a MFA token",
          "properties": {
            "link": {
              "docs": "The \`link.id\` you want to resume. Must be the same \`link.id\` as the one you receive in the 428 Token Required response that contains the \`session\` ID.",
              "type": "string",
            },
            "save_data": {
              "docs": "Indicates whether or not to persist the data in Belvo. By default, this is set to \`true\` and we return a 201 Created response.
When set to \`false\`, the data won't be persisted and we return a 200 OK response.",
              "type": "optional<boolean>",
            },
            "session": {
              "docs": "The session you want to resume. You need to use the \`session\` value that is provided in the 428 Token Required response that you receive after you make your POST request.",
              "type": "string",
            },
            "token": {
              "docs": "The MFA token generated by the institution and required to continue a session.",
              "type": "optional<string>",
            },
          },
        },
        "PatchBodyWithoutSaveData": {
          "docs": "A JSON object containing a session UUID and a MFA token",
          "properties": {
            "link": {
              "docs": "The \`link.id\` you want to resume. Must be the same \`link.id\` as the one you receive in the 428 Token Required response that contains the \`session\` ID.",
              "type": "string",
            },
            "session": {
              "docs": "The session you want to resume. You need to use the \`session\` value that is provided in the 428 Token Required response that you receive after you make your POST request.",
              "type": "string",
            },
            "token": {
              "docs": "The MFA token generated by the institution and required to continue a session.",
              "type": "optional<string>",
            },
          },
        },
        "PatchInvoicesResponseItem": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "InvoiceWithIdSat",
            },
            {
              "docs": undefined,
              "type": "InvoiceDian",
            },
          ],
        },
        "PatchPaymentIntentsBodyPse": {
          "docs": undefined,
          "properties": {
            "pse": {
              "docs": undefined,
              "type": "optional<PatchPaymentMethodDetailsPse>",
            },
          },
        },
        "PatchPaymentMethodDetailsPse": {
          "docs": "Object with required fields to fill information in the payment intent object. The information you need to send through depends on the next step Belvo returns in the response.",
          "properties": {
            "password": {
              "docs": "The password used to log in to the institution.

**Note**: You need to send through this information after you received the \`pse_display_credentials_required\` next step in the payment intent.",
              "type": "optional<string>",
            },
            "payer_bank_account": {
              "docs": "Belvo's unique identifier for the payer’s bank account.

**Note**: You need to send through this information after you received the \`pse_display_customer_bank_accounts\` next step in the payment intent.",
              "type": "optional<string>",
            },
            "payer_institution": {
              "docs": "Belvo's unique identifier for the payer’s institution.

**Note**: You need to send through this information after you received the \`pse_display_payment_method_information\` next step in the payment intent.",
              "type": "optional<string>",
            },
            "payer_token": {
              "docs": "The MFA token generated by the institution and required to continue the payment flow.

**Note**: You need to send through this information if you received the \`pse_display_token_required\` next step in the payment intent.",
              "type": "optional<string>",
            },
            "username": {
              "docs": "The username used to log in to the institution.

**Note**: You need to send through this information after you received the \`pse_display_credentials_required\` next step in the payment intent.",
              "type": "optional<string>",
            },
          },
        },
        "PaymentInstitution": {
          "docs": undefined,
          "properties": {
            "active": {
              "docs": "Indicates whether this institution is available for use or not.",
              "type": "optional<boolean>",
            },
            "country": {
              "docs": undefined,
              "type": "optional<EnumPaymentsCountry>",
            },
            "display_name": {
              "docs": "The customer-facing name of the institution.",
              "type": "optional<string>",
            },
            "form_fields": {
              "docs": undefined,
              "type": "optional<list<InstitutionFormField>>",
            },
            "icon_logo": {
              "docs": "The URL of the institution's icon logo.",
              "type": "optional<string>",
            },
            "id": {
              "docs": "Belvo's unique ID to reference the institution.",
              "type": "optional<string>",
            },
            "legal_entity_name": {
              "docs": "The name of the legal entity of the institution, as registered with the relevant regulatory authority. Only applicable for 🇧🇷 Brazil OFPI.",
              "type": "optional<string>",
            },
            "logo": {
              "docs": "The URL of the institution's logo.",
              "type": "optional<string>",
            },
            "name": {
              "docs": "The name of the institution, as designated by Belvo.",
              "type": "optional<string>",
            },
            "primary_color": {
              "docs": "The primary color on the institution's website.",
              "type": "optional<string>",
            },
            "text_logo": {
              "docs": "The URL of the institution's text logo.",
              "type": "optional<string>",
            },
            "website": {
              "docs": "The URL of the institution's website.",
              "type": "optional<string>",
            },
          },
        },
        "PaymentIntentOfpi": {
          "docs": undefined,
          "properties": {
            "allowed_payment_method_types": {
              "docs": "A list of payment method types allowed in this payment intent. For OFPI, the value will be \`open_finance\`.",
              "type": "list<string>",
            },
            "amount": {
              "docs": "Amount to be paid by your customer.
",
              "type": "string",
            },
            "charges": {
              "docs": "An array of charge objects related to this paymnet intent. If no charges are associated, we return an empty array.

**Note**: The charges resource will be deprecated and removed from our API by end of Q1 2023. We recommend not using any data from this resource.",
              "type": "optional<list<Charge>>",
            },
            "created_at": {
              "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
              "type": "string",
            },
            "created_by": {
              "docs": "Belvo's unique ID for the user that created this payment intent.",
              "type": "string",
            },
            "currency": {
              "docs": undefined,
              "type": "EnumPaymentsCurrency",
            },
            "customer": {
              "docs": "Belvo's unique ID for the customer related to this payment intent.",
              "type": "string",
            },
            "description": {
              "docs": "The description of the payment.
",
              "type": "string",
            },
            "failure_code": {
              "docs": "Error code that explains the reason behind a payment being unsuccessful (if applicable).
",
              "type": "optional<string>",
            },
            "failure_message": {
              "docs": "Further information regarding the \`failure_code\`.
",
              "type": "optional<string>",
            },
            "id": {
              "docs": "Belvo's unique ID for the current payment intent.",
              "type": "string",
            },
            "last_error": {
              "docs": undefined,
              "type": "LastErrorPaymentError",
            },
            "metadata": {
              "docs": "Optional and customizable object where you can provide any additional key-value pairs for your internal purposes. For example, an internal reference number.

⚠️ **Note**: You can only provide up to 50 keys (keys can have up to 50 characters each and each value can be up to 500 characters). We do not support nested objects, only ASCII values.",
              "type": "optional<map<string, unknown>>",
            },
            "next_step": {
              "docs": undefined,
              "type": "PaymentIntentOfpiNextStep",
            },
            "payment_method_details": {
              "docs": undefined,
              "type": "PaymentIntentOfpiPaymentMethodDetails",
            },
            "payment_method_information": {
              "docs": undefined,
              "type": "PaymentMethodInformationOfpi",
            },
            "provider": {
              "docs": undefined,
              "type": "EnumPaymentLinkProvider",
            },
            "selected_payment_method_type": {
              "docs": undefined,
              "type": "EnumPaymentLinkAllowedPaymentMethod",
            },
            "status": {
              "docs": undefined,
              "type": "EnumPaymentIntentStatus",
            },
            "updated_at": {
              "docs": "The ISO-8601 timestamp of when the payment intent was last updated.
",
              "type": "optional<string>",
            },
          },
        },
        "PaymentIntentOfpiNextStep": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "NextStepDisplayPaymentMethodInformation",
            },
            {
              "docs": undefined,
              "type": "NextStepNeedsRedirect",
            },
            {
              "docs": undefined,
              "type": "NextStepDisplayConfirmationRequiredOfpi",
            },
            {
              "docs": undefined,
              "type": "NextStepDisplayPaymentProcessing",
            },
            {
              "docs": undefined,
              "type": "NextStepDisplayPaymentSucceeded",
            },
            {
              "docs": undefined,
              "type": "NextStepDisplayPaymentFailed",
            },
          ],
        },
        "PaymentIntentOfpiPaymentMethodDetails": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "PaymentIntentPaymentMethodDetailsIndividualOfpi",
            },
            {
              "docs": undefined,
              "type": "PaymentIntentPaymentMethodDetailsBusinessOfpi",
            },
          ],
        },
        "PaymentIntentPaginatedResponse": {
          "docs": undefined,
          "properties": {
            "count": {
              "docs": "The total number of results in your Belvo account.",
              "type": "optional<integer>",
            },
            "next": {
              "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is \`null\`.

In our documentation example, we use \`{endpoint}\` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, \`customer\` or \`bank-accounts\`).
",
              "type": "optional<string>",
            },
            "previous": {
              "docs": "The URL to the previous page of results. If there is no previous page, the value is \`null\`.",
              "type": "optional<string>",
            },
            "results": {
              "docs": "Array of payment intent objects.",
              "type": "optional<list<PaymentIntentPse>>",
            },
          },
        },
        "PaymentIntentPaymentMethodDetailsBodyBusinessOfpi": {
          "docs": "Payment method type selected.",
          "properties": {
            "beneficiary_bank_account": {
              "docs": "Belvo's unique ID used to identify the beneficiary's bank account.",
              "type": "string",
            },
            "callback_url": {
              "docs": "The callback URL that your user will be redirected to after confirming the payment in their banking application.",
              "type": "string",
            },
            "cpf": {
              "docs": "The customer's CPF number. Only required when the \`customer_type\` is \`BUSINESS\`.

**Note:** This value is obfuscated.",
              "type": "optional<string>",
            },
            "payer_institution": {
              "docs": "Belvo's unique ID to reference the payer's institution.",
              "type": "string",
            },
          },
        },
        "PaymentIntentPaymentMethodDetailsBodyIndividualOfpi": {
          "docs": "Payment method type selected.",
          "properties": {
            "beneficiary_bank_account": {
              "docs": "Belvo's unique ID used to identify the beneficiary's bank account.",
              "type": "string",
            },
            "callback_url": {
              "docs": "The callback URL that your user will be redirected to after confirming the payment in their banking application.",
              "type": "string",
            },
            "cpf": {
              "docs": "The customer's CPF number. Only required when the \`customer_type\` is \`BUSINESS\`.

**Note:** This value is obfuscated.",
              "type": "optional<string>",
            },
            "payer_institution": {
              "docs": "Belvo's unique ID to reference the payer's institution.",
              "type": "string",
            },
          },
        },
        "PaymentIntentPaymentMethodDetailsBodyPse": {
          "docs": "Details about the payment method type selected.",
          "properties": {
            "belvo_flow": {
              "docs": "This parameter determines the payment flow of the payment intent. By default, this is set to \`true\` and the payment intent created is processed using the Belvo's payment flow and Belvo-integrated institutions. When set to \`false\`, the payment intent process uses institutions not integrated into Belvo's flow.",
              "type": "boolean",
            },
            "beneficiary_bank_account": {
              "docs": "Belvo's unique ID used to identify the beneficiary’s bank account.",
              "type": "string",
            },
            "callback_url": {
              "docs": "The callback URL that your user will be redirected to after confirming the payment in their banking application.",
              "type": "string",
            },
            "password": {
              "docs": "The password used to log in to the institution. This value is obfuscated.",
              "type": "optional<string>",
            },
            "payer_bank_account": {
              "docs": "Belvo's unique ID used to identify the customer’s bank account.",
              "type": "optional<string>",
            },
            "payer_institution": {
              "docs": "Belvo's unique identifier for the payer’s institution.",
              "type": "optional<string>",
            },
            "username": {
              "docs": "The username used to log in to the institution. This value is obfuscated.",
              "type": "optional<string>",
            },
          },
        },
        "PaymentIntentPaymentMethodDetailsBusinessOfpi": {
          "docs": "Details about the OFPI payment method.",
          "properties": {
            "open_finance": {
              "docs": undefined,
              "type": "PaymentIntentPaymentMethodDetailsBodyBusinessOfpi",
            },
          },
        },
        "PaymentIntentPaymentMethodDetailsIndividualOfpi": {
          "docs": "Details about the OFPI payment method.",
          "properties": {
            "open_finance": {
              "docs": undefined,
              "type": "PaymentIntentPaymentMethodDetailsBodyIndividualOfpi",
            },
          },
        },
        "PaymentIntentPaymentMethodDetailsPse": {
          "docs": "Details about the PSE payment method.",
          "properties": {
            "pse": {
              "docs": undefined,
              "type": "optional<PaymentIntentPaymentMethodDetailsBodyPse>",
            },
          },
        },
        "PaymentIntentPse": {
          "docs": undefined,
          "properties": {
            "allowed_payment_method_types": {
              "docs": "A list of payment method types allowed in this payment intent. For PSE, the value will be \`pse\`.",
              "type": "list<EnumPaymentLinkAllowedPaymentMethod>",
            },
            "amount": {
              "docs": "Amount to be paid by your customer.
",
              "type": "string",
            },
            "charges": {
              "docs": "An array of charge objects related to this paymnet intent. If no charges are associated, we return an empty array.

**Note**: The charges resource will be deprecated and removed from our API by end of Q1 2023. We recommend not using any data from this resource.",
              "type": "optional<list<Charge>>",
            },
            "created_at": {
              "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
              "type": "string",
            },
            "created_by": {
              "docs": "Belvo's unique ID for the user that created this payment intent.",
              "type": "string",
            },
            "currency": {
              "docs": undefined,
              "type": "EnumPaymentsCurrency",
            },
            "customer": {
              "docs": "Belvo's unique ID for the customer related to this payment intent.",
              "type": "string",
            },
            "description": {
              "docs": "The description of the payment.
",
              "type": "string",
            },
            "failure_code": {
              "docs": "Error code that explains the reason behind a payment being unsuccessful (if applicable).
",
              "type": "optional<string>",
            },
            "failure_message": {
              "docs": "Further information regarding the \`failure_code\`.
",
              "type": "optional<string>",
            },
            "id": {
              "docs": "Belvo's unique ID for the current payment intent.",
              "type": "string",
            },
            "last_error": {
              "docs": undefined,
              "type": "PaymentIntentPseLastError",
            },
            "metadata": {
              "docs": "Optional and customizable object where you can provide any additional key-value pairs for your internal purposes. For example, an internal reference number.

⚠️ **Note**: You can only provide up to 50 keys (keys can have up to 50 characters each and each value can be up to 500 characters). We do not support nested objects, only ASCII values.",
              "type": "optional<map<string, unknown>>",
            },
            "next_step": {
              "docs": undefined,
              "type": "PaymentIntentPseNextStep",
            },
            "payment_method_details": {
              "docs": undefined,
              "type": "PaymentIntentPaymentMethodDetailsPse",
            },
            "payment_method_information": {
              "docs": undefined,
              "type": "PaymentMethodInformationPse",
            },
            "provider": {
              "docs": undefined,
              "type": "EnumPaymentLinkProvider",
            },
            "selected_payment_method_type": {
              "docs": undefined,
              "type": "EnumPaymentLinkAllowedPaymentMethod",
            },
            "status": {
              "docs": undefined,
              "type": "EnumPaymentIntentStatus",
            },
            "updated_at": {
              "docs": "The ISO-8601 timestamp of when the payment intent was last updated.
",
              "type": "optional<string>",
            },
          },
        },
        "PaymentIntentPseLastError": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "LastErrorInvalidCredentials",
            },
            {
              "docs": undefined,
              "type": "LastErrorInvalidToken",
            },
            {
              "docs": undefined,
              "type": "LastErrorLoginError",
            },
            {
              "docs": undefined,
              "type": "LastErrorTwoFactor",
            },
            {
              "docs": undefined,
              "type": "LastErrorPaymentError",
            },
            {
              "docs": undefined,
              "type": "LastErrorSessionExpired",
            },
          ],
        },
        "PaymentIntentPseNextStep": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "NextStepDisplayPaymentMethodInformationPse",
            },
            {
              "docs": undefined,
              "type": "NextStepDisplayCredentialsRequiredPse",
            },
            {
              "docs": undefined,
              "type": "NextStepDisplayNeedsRedirectPse",
            },
            {
              "docs": undefined,
              "type": "NextStepDisplayTokenRequiredPse",
            },
            {
              "docs": undefined,
              "type": "NextStepDisplayCustomerBankAccountsPse",
            },
            {
              "docs": undefined,
              "type": "NextStepDisplayConfirmationRequiredPse",
            },
          ],
        },
        "PaymentIntentsPaymentMethodDetailsBodyPse": {
          "docs": "Details about the organization's bank account that will receive the payment.",
          "properties": {
            "belvo_flow": {
              "docs": "This parameter determines the payment flow of the payment intent. By default, this is set to \`true\` and the payment intent created is processed using Belvo's payment flow and Belvo-integrated institutions. When set to \`false\`, the payment intent process uses institutions not integrated into Belvo's flow.",
              "type": "boolean",
            },
            "beneficiary_bank_account": {
              "docs": "Belvo's unique ID used to identify the beneficiary's bank account.",
              "type": "string",
            },
            "callback_url": {
              "docs": "The URL to your application that your customer will be directed to once they confirm the payment in their bank application.",
              "type": "optional<string>",
            },
          },
        },
        "PaymentIntentsPaymentMethodDetailsPse": {
          "docs": "Object with payment method details to create a payment intent.",
          "properties": {
            "pse": {
              "docs": undefined,
              "type": "PaymentIntentsPaymentMethodDetailsBodyPse",
            },
          },
        },
        "PaymentLinkCallbackUrls": {
          "docs": undefined,
          "properties": {
            "cancel": {
              "docs": "The URL that the user should be redirected to if they decide to cancel the payment process or if an error occurs.

**Note:** Not required if your integration only generates payment links through the [Belvo Dashboard](https://dashboard.belvo.com/).",
              "type": "optional<string>",
            },
            "success": {
              "docs": "The URL that the user should be redirected to when they complete the payment process successfully.

**Note:** Not required if your integration only generates payment links through the [Belvo Dashboard](https://dashboard.belvo.com/).",
              "type": "optional<string>",
            },
          },
        },
        "PaymentLinkCallbackUrlsResponse": {
          "docs": "The URLs that the user should be redirected to.

**Note:** This field will return an empty object if your integration only generates payment links through the [Belvo Dashboard](https://dashboard.belvo.com/).",
          "properties": {
            "cancel": {
              "docs": "The URL that the user should be redirected to if they decide to cancel the payment process or if an error occurs.",
              "type": "optional<string>",
            },
            "success": {
              "docs": "The URL that the user should be redirected to when they complete the payment process successfully.",
              "type": "optional<string>",
            },
          },
        },
        "PaymentLinkListOfpi": {
          "docs": undefined,
          "properties": {
            "access_token": {
              "docs": "The Belvo-generated access token for the payment link.

**Note:** You'll need the \`access_token\` to make [Get details for a payment link](https://developers.belvo.com/reference/detailcreatepaymentlink) requests.",
              "type": "optional<string>",
            },
            "callback_urls": {
              "docs": undefined,
              "type": "PaymentLinkCallbackUrlsResponse",
            },
            "created_at": {
              "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
              "type": "string",
            },
            "created_by": {
              "docs": "Belvo's unique ID for the user that created the payment link.",
              "type": "string",
            },
            "expires_at": {
              "docs": "The ISO-8601 timestamp of when the payment link is set to expire.
",
              "type": "string",
            },
            "expires_in": {
              "docs": "The payment link expiration time.  ",
              "type": "string",
            },
            "id": {
              "docs": "Belvo's unique ID for the current payment link.",
              "type": "string",
            },
            "payment_intent": {
              "docs": "Belvo's unique ID for the payment intent. You can retrieve the complete payment intent by using our [Get details of a payment link](https://developers.belvo.com/reference/detailcreatepaymentlink) request.",
              "type": "optional<string>",
            },
            "payment_url": {
              "docs": "The URL for the hosted-widget that will guide your user through the payments process.",
              "type": "string",
            },
            "status": {
              "docs": undefined,
              "type": "EnumPaymentLinksStatus",
            },
            "updated_at": {
              "docs": "The ISO-8601 timestamp of when the payment link was last updated.
",
              "type": "optional<string>",
            },
          },
        },
        "PaymentLinkListPse": {
          "docs": undefined,
          "properties": {
            "access_token": {
              "docs": "The Belvo-generated access token for the payment link.

**Note:** You'll need the \`access_token\` to make [Get details for a payment link](https://developers.belvo.com/reference/detailcreatepaymentlink) requests.",
              "type": "optional<string>",
            },
            "callback_urls": {
              "docs": undefined,
              "type": "PaymentLinkCallbackUrlsResponse",
            },
            "created_at": {
              "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
              "type": "string",
            },
            "created_by": {
              "docs": "Belvo's unique ID for the user that created the payment link.",
              "type": "string",
            },
            "expires_at": {
              "docs": "The ISO-8601 timestamp of when the payment link is set to expire.
",
              "type": "string",
            },
            "expires_in": {
              "docs": "The payment link expiration time.  ",
              "type": "string",
            },
            "id": {
              "docs": "Belvo's unique ID for the current payment link.",
              "type": "string",
            },
            "payment_intent": {
              "docs": "Belvo's unique ID for the payment intent. You can retrieve the complete payment intent by using our [Get details of a payment link](https://developers.belvo.com/reference/detailcreatepaymentlink) request.",
              "type": "optional<string>",
            },
            "payment_url": {
              "docs": "The URL for the hosted-widget that will guide your user through the payments process.",
              "type": "string",
            },
            "status": {
              "docs": undefined,
              "type": "EnumPaymentLinksStatus",
            },
            "updated_at": {
              "docs": "The ISO-8601 timestamp of when the payment link was last updated.
",
              "type": "optional<string>",
            },
          },
        },
        "PaymentLinkOfpi": {
          "docs": undefined,
          "properties": {
            "access_token": {
              "docs": "The Belvo-generated access token for the payment link.

**Note:** You'll need the \`access_token\` to make [Get details for a payment link](https://developers.belvo.com/reference/detailcreatepaymentlink) requests.",
              "type": "optional<string>",
            },
            "callback_urls": {
              "docs": undefined,
              "type": "PaymentLinkCallbackUrlsResponse",
            },
            "created_at": {
              "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
              "type": "string",
            },
            "created_by": {
              "docs": "Belvo's unique ID for the user that created the payment link.",
              "type": "string",
            },
            "expires_at": {
              "docs": "The ISO-8601 timestamp of when the payment link is set to expire.
",
              "type": "string",
            },
            "expires_in": {
              "docs": "The payment link expiration time.  ",
              "type": "string",
            },
            "id": {
              "docs": "Belvo's unique ID for the current payment link.",
              "type": "string",
            },
            "payment_intent": {
              "docs": undefined,
              "type": "optional<PaymentIntentOfpi>",
            },
            "payment_url": {
              "docs": "The URL for the hosted-widget that will guide your user through the payments process.",
              "type": "string",
            },
            "status": {
              "docs": undefined,
              "type": "EnumPaymentLinksStatus",
            },
            "updated_at": {
              "docs": "The ISO-8601 timestamp of when the payment link was last updated.
",
              "type": "optional<string>",
            },
          },
        },
        "PaymentLinkPaginatedResponse": {
          "docs": undefined,
          "properties": {
            "count": {
              "docs": "The total number of results in your Belvo account.",
              "type": "optional<integer>",
            },
            "next": {
              "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is \`null\`.

In our documentation example, we use \`{endpoint}\` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, \`customer\` or \`bank-accounts\`).
",
              "type": "optional<string>",
            },
            "previous": {
              "docs": "The URL to the previous page of results. If there is no previous page, the value is \`null\`.",
              "type": "optional<string>",
            },
            "results": {
              "docs": "Array of bank account objects.",
              "type": "optional<list<PaymentLinkPaginatedResponseResultsItem>>",
            },
          },
        },
        "PaymentLinkPaginatedResponseResultsItem": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "PaymentLinkListOfpi",
            },
            {
              "docs": undefined,
              "type": "PaymentLinkListPse",
            },
          ],
        },
        "PaymentLinkPse": {
          "docs": undefined,
          "properties": {
            "access_token": {
              "docs": "The Belvo-generated access token for the payment link.

**Note:** You'll need the \`access_token\` to make [Get details for a payment link](https://developers.belvo.com/reference/detailcreatepaymentlink) requests.",
              "type": "optional<string>",
            },
            "callback_urls": {
              "docs": undefined,
              "type": "PaymentLinkCallbackUrlsResponse",
            },
            "created_at": {
              "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
              "type": "string",
            },
            "created_by": {
              "docs": "Belvo's unique ID for the user that created the payment link.",
              "type": "string",
            },
            "expires_at": {
              "docs": "The ISO-8601 timestamp of when the payment link is set to expire.
",
              "type": "string",
            },
            "expires_in": {
              "docs": "The payment link expiration time. ",
              "type": "string",
            },
            "id": {
              "docs": "Belvo's unique ID for the current payment link.",
              "type": "string",
            },
            "payment_intent": {
              "docs": undefined,
              "type": "optional<PaymentIntentPse>",
            },
            "payment_url": {
              "docs": "The URL for the hosted-widget that will guide your user through the payments process.",
              "type": "string",
            },
            "status": {
              "docs": undefined,
              "type": "EnumPaymentLinksStatus",
            },
            "updated_at": {
              "docs": "The ISO-8601 timestamp of when the payment link was last updated.
",
              "type": "optional<string>",
            },
          },
        },
        "PaymentLinksPaymentMethodDetailsBodyOfpi": {
          "docs": "Details about the organization's bank account that will receive the payment.",
          "properties": {
            "beneficiary_bank_account": {
              "docs": "Belvo's unique ID used to identify the beneficiary's bank account.",
              "type": "string",
            },
            "callback_url": {
              "docs": "The URL to your application that your customer will be directed to once they confirm the payment in their bank application.",
              "type": "optional<string>",
            },
          },
        },
        "PaymentLinksPaymentMethodDetailsBodyPse": {
          "docs": "Details about the organization's bank account that will receive the payment.",
          "properties": {
            "belvo_flow": {
              "docs": "This parameter determines the payment flow of the payment intent. By default, this is set to \`true\` and the payment intent created is processed using the Belvo's payment flow and Belvo-integrated institutions. When set to \`false\`, the payment intent process uses institutions not integrated into Belvo's flow.",
              "type": "boolean",
            },
            "beneficiary_bank_account": {
              "docs": "Belvo's unique ID used to identify the beneficiary's bank account.",
              "type": "string",
            },
            "callback_url": {
              "docs": "The URL to your application that your customer will be directed to once they confirm the payment in their bank application.",
              "type": "optional<string>",
            },
          },
        },
        "PaymentMethodDetailsOfpi": {
          "docs": "Object with information required by Open Finance Payments in Brazil to create a payment intent.",
          "properties": {
            "open_finance": {
              "docs": undefined,
              "type": "PaymentLinksPaymentMethodDetailsBodyOfpi",
            },
          },
        },
        "PaymentMethodDetailsPse": {
          "docs": "Object with information required by PSE to create a payment intent.",
          "properties": {
            "pse": {
              "docs": undefined,
              "type": "PaymentLinksPaymentMethodDetailsBodyPse",
            },
          },
        },
        "PaymentMethodInfoCustomerBankAccountsPse": {
          "docs": undefined,
          "properties": {
            "customer": {
              "docs": "Belvo's unique ID for the current customer.",
              "type": "optional<string>",
            },
            "details": {
              "docs": undefined,
              "type": "optional<PaymentMethodInformationDetailsPse>",
            },
            "holder": {
              "docs": undefined,
              "type": "optional<HolderBankAccountPse>",
            },
            "id": {
              "docs": "Belvo's unique ID used to identify the customer’s bank account.",
              "type": "optional<string>",
            },
            "institution": {
              "docs": undefined,
              "type": "optional<PaymentInstitution>",
            },
            "number": {
              "docs": "The customer's bank account number. This value is obfuscated.",
              "type": "optional<string>",
            },
          },
        },
        "PaymentMethodInformationBodyOfpi": {
          "docs": "Payment method type selected.",
          "properties": {
            "end_to_end_id": {
              "docs": "A unique ID for the transaction in the Brazil's PIX payment system.",
              "type": "optional<string>",
            },
            "provider_request_id": {
              "docs": "Unique ID for the payment, as sent by the provider.",
              "type": "optional<string>",
            },
            "redirect_url": {
              "docs": "URL that redirects the user to the institution's website.",
              "type": "optional<string>",
            },
          },
        },
        "PaymentMethodInformationBodyPse": {
          "docs": "Payment method type selected.",
          "properties": {
            "bank_payment_id": {
              "docs": "Unique payment ID provided the institution.",
              "type": "optional<string>",
            },
            "end_to_end_id": {
              "docs": "A unique ID for the transaction in Colombia's Payments Way system.",
              "type": "optional<string>",
            },
            "provider_request_id": {
              "docs": "Unique ID for the payment, as sent by the provider.",
              "type": "optional<string>",
            },
            "redirect_url": {
              "docs": "URL that redirects the user to the institution's website.",
              "type": "optional<string>",
            },
          },
        },
        "PaymentMethodInformationDetailsPse": {
          "docs": undefined,
          "properties": {
            "account_type": {
              "docs": "The type of bank account. For example, \`Ahorros\` or \`Corriente\`.",
              "type": "optional<string>",
            },
            "country": {
              "docs": undefined,
              "type": "optional<EnumPaymentsCountry>",
            },
          },
        },
        "PaymentMethodInformationOfpi": {
          "docs": "Information about the payment method selected.",
          "properties": {
            "open_finance": {
              "docs": undefined,
              "type": "optional<PaymentMethodInformationBodyOfpi>",
            },
          },
        },
        "PaymentMethodInformationPse": {
          "docs": "Information about the payment method selected.

**Note**: If no payment method information is associated, we return an empty array.",
          "properties": {
            "pse": {
              "docs": undefined,
              "type": "optional<PaymentMethodInformationBodyPse>",
            },
          },
        },
        "PaymentTransaction": {
          "docs": undefined,
          "properties": {
            "amount": {
              "docs": "The transaction amount.


**Note**: The amount displayed is always positive as we indicate the direction of the transaction in \`transaction_type\` parameter.
",
              "type": "string",
            },
            "beneficiary": {
              "docs": "Belvo's unique ID used to identify the beneficiary's bank account.",
              "type": "string",
            },
            "created_at": {
              "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
              "type": "string",
            },
            "created_by": {
              "docs": "Belvo's unique ID for the user that created the payment.",
              "type": "string",
            },
            "currency": {
              "docs": undefined,
              "type": "EnumPaymentsCurrency",
            },
            "customer": {
              "docs": "Belvo's unique ID for the customer asscociated with this transaction.",
              "type": "optional<string>",
            },
            "description": {
              "docs": "The description of the payment.
",
              "type": "string",
            },
            "id": {
              "docs": "Belvo’s unique ID to reference the transaction.",
              "type": "string",
            },
            "payer": {
              "docs": undefined,
              "type": "PaymentTransactionPayer",
            },
            "payment_intent": {
              "docs": "The unique ID of the payment intent associated with the transaction.",
              "type": "optional<string>",
            },
            "transaction_type": {
              "docs": undefined,
              "type": "EnumPaymentTransactionType",
            },
          },
        },
        "PaymentTransactionPayer": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "TransactionBankAccountOfpi",
            },
            {
              "docs": undefined,
              "type": "TransactionBankAccountPse",
            },
          ],
        },
        "PaymentWebhook": {
          "docs": undefined,
          "properties": {
            "auth_header": {
              "docs": "The authentication header for the request. **Must** be set to \`Authorization\`.",
              "type": "optional<string>",
            },
            "auth_token": {
              "docs": "The authentication token you need to send webhook events. This value is obfuscated.",
              "type": "optional<string>",
            },
            "created_at": {
              "docs": "The ISO-8601 timestamp of when the webhook was created in our database.
",
              "type": "string",
            },
            "created_by": {
              "docs": "Belvo's unique ID of the user that created the webhook.",
              "type": "string",
            },
            "id": {
              "docs": "Belvo's unique ID for the webhook.",
              "type": "string",
            },
            "name": "unknown",
            "url": {
              "docs": "The URL where webhook events should be sent to.",
              "type": "string",
            },
          },
        },
        "PaymentsInstitutionsPaginatedResponse": {
          "docs": undefined,
          "properties": {
            "count": {
              "docs": "The total number of results in your Belvo account.",
              "type": "optional<integer>",
            },
            "next": {
              "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is \`null\`.

In our documentation example, we use \`{endpoint}\` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, \`customer\` or \`bank-accounts\`).
",
              "type": "optional<string>",
            },
            "previous": {
              "docs": "The URL to the previous page of results. If there is no previous page, the value is \`null\`.",
              "type": "optional<string>",
            },
            "results": {
              "docs": "Array of institution objects.",
              "type": "optional<list<PaymentInstitution>>",
            },
          },
        },
        "PaymentsTransactionsPaginatedResponse": {
          "docs": undefined,
          "properties": {
            "count": {
              "docs": "The total number of results in your Belvo account.",
              "type": "optional<integer>",
            },
            "next": {
              "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is \`null\`.

In our documentation example, we use \`{endpoint}\` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, \`customer\` or \`bank-accounts\`).
",
              "type": "optional<string>",
            },
            "previous": {
              "docs": "The URL to the previous page of results. If there is no previous page, the value is \`null\`.",
              "type": "optional<string>",
            },
            "results": {
              "docs": "Array of transaction objects.",
              "type": "optional<list<PaymentTransaction>>",
            },
          },
        },
        "PaymentsWay": {
          "docs": undefined,
          "properties": {
            "form_id": {
              "docs": "Your unique Payments Way form ID.

**Note:** Belvo provides you with the Payments Way form ID during your onboarding process. If you don't have one yet, just reach out to us at payments-info@belvo.com and we'll give you a hand with this. 🙂",
              "type": "integer",
            },
            "terminal_id": {
              "docs": "Your unique Payments Way terminal ID.

**Note:** Belvo provides you with the Payments Way terminal ID during your onboarding process. If you don't have one yet, just reach out to us at payments-info@belvo.com and we'll give you a hand with this. 🙂",
              "type": "integer",
            },
          },
        },
        "PaymentsWebhooksPaginatedResponse": {
          "docs": undefined,
          "properties": {
            "count": {
              "docs": "The total number of results in your Belvo account.",
              "type": "optional<integer>",
            },
            "next": {
              "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is \`null\`.

In our documentation example, we use \`{endpoint}\` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, \`customer\` or \`bank-accounts\`).
",
              "type": "optional<string>",
            },
            "previous": {
              "docs": "The URL to the previous page of results. If there is no previous page, the value is \`null\`.",
              "type": "optional<string>",
            },
            "results": {
              "docs": "Array of webhook objects.",
              "type": "optional<list<PaymentWebhook>>",
            },
          },
        },
        "PensionIncomeStatementIndividual": {
          "docs": "Object containing the tax payer's total pension income.",
          "properties": {
            "net_pension_income": {
              "docs": "The total net pension of the taxpayer.",
              "type": "double",
            },
            "net_taxable_pension_income": {
              "docs": "The total taxable pension income of the taxpayer.",
              "type": "double",
            },
          },
        },
        "ProvidersPse": {
          "docs": undefined,
          "properties": {
            "payments_way": {
              "docs": undefined,
              "type": "optional<PaymentsWay>",
            },
          },
        },
        "ReceivablesTransaction": {
          "docs": undefined,
          "properties": {
            "account": {
              "docs": undefined,
              "type": "ReceivablesTransactionAccount",
            },
            "collected_at": {
              "docs": "The ISO timestamp when the data point was collected.",
              "type": "string",
            },
            "created_at": {
              "docs": "The ISO timestamp of when the data point was last updated in Belvo's database.",
              "type": "string",
            },
            "currency": {
              "docs": "The currency of the transaction. For example:
- 🇧🇷 BRL (Brazilian Real)
- 🇨🇴 COP (Colombian Peso)
- 🇲🇽 MXN (Mexican Peso)

 Please note that currencies other than those listed above may be returned.",
              "type": "string",
            },
            "fees": {
              "docs": undefined,
              "type": "list<RecevablesTransactionFees>",
            },
            "gross_amount": {
              "docs": "The total gross amount of the transaction.",
              "type": "optional<double>",
            },
            "id": {
              "docs": "Belvo's unique ID for the current receivable transaction.",
              "type": "string",
            },
            "institution_transaction_id": {
              "docs": "Internal identification number that the acquirer uses to identify the transaction.
ℹ️ **Note**: For Brazil, this number is the NSU.",
              "type": "string",
            },
            "net_amount": {
              "docs": "The net amount of the transaction.",
              "type": "optional<double>",
            },
            "number_of_installments": {
              "docs": undefined,
              "type": "ReceivablesTransactionNumberOfInstallments",
            },
            "status": {
              "docs": undefined,
              "type": "EnumReceivableTransactionStatus",
            },
            "type": {
              "docs": undefined,
              "type": "EnumReceivableTransactionType",
            },
            "value_date": {
              "docs": "The date that the transactions occurred, according to the institution, in \`YYYY-MM-DD\` format.",
              "type": "string",
            },
            "value_hour": {
              "docs": "The time that the transaction occurred, according to the institution, in \`HH:MM\` format.",
              "type": "string",
            },
          },
        },
        "ReceivablesTransactionAccount": {
          "docs": "Basic information about the account associated with the transaction.",
          "properties": {
            "id": {
              "docs": "Belvo's unique ID for the account associated with the transaction.",
              "type": "string",
            },
            "institution": {
              "docs": undefined,
              "type": "InstitutionAccount",
            },
          },
        },
        "ReceivablesTransactionNumberOfInstallments": {
          "docs": undefined,
          "properties": {
            "paid": {
              "docs": "The number of payments already made to pay the cost of the transaction.",
              "type": "optional<integer>",
            },
            "total": {
              "docs": "The number of payments required to pay the cost of the transaction.",
              "type": "optional<integer>",
            },
          },
        },
        "ReceivablesTransactionsPaginatedResponse": {
          "docs": undefined,
          "properties": {
            "count": {
              "docs": "The total number of results in your Belvo account.",
              "type": "optional<integer>",
            },
            "next": {
              "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is \`null\`.

In our documentation example, we use \`{endpoint}\` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, \`accounts\` or \`owners\`).
",
              "type": "optional<string>",
            },
            "previous": {
              "docs": "The URL to the previous page of results. If there is no previous page, the value is \`null\`.",
              "type": "optional<string>",
            },
            "results": {
              "docs": "Array of receivables objects.",
              "type": "optional<list<ReceivablesTransaction>>",
            },
          },
        },
        "RecevablesTransactionFees": {
          "docs": "Details regarding the fees applied to the transaction.",
          "properties": {
            "type": {
              "docs": undefined,
              "type": "EnumReceivableTransactionFeeType",
            },
            "value": {
              "docs": "The value of \`fees.type\`.",
              "type": "double",
            },
          },
        },
        "RecurringExpenseSourceTransaction": {
          "docs": undefined,
          "properties": {
            "amount": {
              "docs": "The transaction amount.",
              "type": "double",
            },
            "description": {
              "docs": "The description of the transaction provided by the institution. Usually, this is the text that the end user would see in the bank statement. The description can be an empty string.",
              "type": "optional<string>",
            },
            "value_date": {
              "docs": "The date when the transaction occurred, in \`YYYY-MM-DD\` format.",
              "type": "string",
            },
          },
        },
        "RecurringExpenses": {
          "docs": "Recurring expense insights.


ℹ️ If no recurring expense insights are found, we return an empty array.
",
          "properties": {
            "account": {
              "docs": undefined,
              "type": "Account",
            },
            "average_transaction_amount": {
              "docs": "The average transaction amount of the recurring expense.",
              "type": "double",
            },
            "category": {
              "docs": undefined,
              "type": "EnumRecurringExpenseCategory",
            },
            "days_since_last_transaction": {
              "docs": "Number of days since the last recurring expense occurred.

Based on the frequency, you can infer how many days until the next charge will occur.
",
              "type": "integer",
            },
            "frequency": {
              "docs": undefined,
              "type": "EnumRecurringExpenseFrequency",
            },
            "id": {
              "docs": "Belvo's unique identifier used to reference the current recurring expense.",
              "type": "optional<string>",
            },
            "median_transaction_amount": {
              "docs": "The median transaction amount of the recurring expense.",
              "type": "double",
            },
            "name": {
              "docs": "The name for the recurring expense.

ℹ️ **Note**: This information is taken from the description section of a transaction and then normalized to provide you with an easy-to-read name. As such, sometimes the name will reflect the merchant the payment is made to (for example, Netflix.com), while for other recurring expenses, this could be something like "Monthly payment to John".
",
              "type": "optional<string>",
            },
            "payment_type": {
              "docs": undefined,
              "type": "EnumRecurringExpensePaymentType",
            },
            "transactions": {
              "docs": "An array of minified transaction objects used to evaluate the recurring expense. If no transactions were found, we return an empty array.",
              "type": "list<RecurringExpenseSourceTransaction>",
            },
          },
        },
        "RecurringExpensesPaginatedResponse": {
          "docs": undefined,
          "properties": {
            "count": {
              "docs": "The total number of results in your Belvo account.",
              "type": "optional<integer>",
            },
            "next": {
              "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is \`null\`.

In our documentation example, we use \`{endpoint}\` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, \`accounts\` or \`owners\`).
",
              "type": "optional<string>",
            },
            "previous": {
              "docs": "The URL to the previous page of results. If there is no previous page, the value is \`null\`.",
              "type": "optional<string>",
            },
            "results": {
              "docs": "Array of recurring expense objects.",
              "type": "optional<list<RecurringExpenses>>",
            },
          },
        },
        "ReportingId": {
          "docs": "Object containing information about where the tax payer reports their income.",
          "properties": {
            "reporting_type": {
              "docs": "The type of reporting ID. For DIAN, this is the sectional address code (*Codigo Dirrecion Seccional*)",
              "type": "string",
            },
            "reporting_value": {
              "docs": "The value of the reporting ID.",
              "type": "string",
            },
          },
        },
        "RequestTimeoutErrorBody": {
          "docs": "Belvo has a limit regarding the time it takes to log in, retrieve account data, and log out. A timeout occurs when there is a very high amount of data and everything could not be obtained within the allotted time.",
          "properties": {
            "code": {
              "docs": "A unique error code (\`request_timeout\`) that allows you to classify and handle the error programmatically.

ℹ️ Check our DevPortal for more information on how to handle <a href="https://developers.belvo.com/docs/belvo-api-errors#408-request_timeout" target="_blank">408 request_timeout errors</a>.",
              "type": "optional<string>",
            },
            "message": {
              "docs": "A short description of the error. 

For \`request_timeout\` errors, the description is:
  
  - \`The request timed out, you can retry asking for less data by changing your query parameters\`.",
              "type": "optional<string>",
            },
            "request_id": {
              "docs": "A 32-character unique ID of the request (matching a regex pattern of: \`[a-f0-9]{32}\`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
              "type": "optional<string>",
            },
          },
        },
        "RetentionBreakdown": {
          "docs": "A breakdown of the retained taxes",
          "properties": {
            "base_amount": {
              "docs": "The base amount that was used to calculate the tax retention.
",
              "type": "optional<double>",
            },
            "payment_status": {
              "docs": undefined,
              "type": "EnumTaxRetentionPaymentStatus",
            },
            "retained_amount": {
              "docs": "The amount retained.
",
              "type": "optional<double>",
            },
            "tax_type": {
              "docs": "Optional attribute to indicate the type of tax withheld for the period or year according to the [SAT catalog](https://developers.belvo.com/docs/sat-catalogs#retention-code).
",
              "type": "optional<string>",
            },
          },
        },
        "RetrieveInvoicesResponseItem": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "InvoiceWithIdSat",
            },
            {
              "docs": undefined,
              "type": "InvoiceDian",
            },
          ],
        },
        "RetrieveTaxDeclarationsResponseItem": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "TaxDeclarationBusiness",
            },
            {
              "docs": undefined,
              "type": "TaxDeclarationIndividual",
            },
          ],
        },
        "RetrieveTaxReturnsRequestBody": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "TaxReturnsMonthlyRequest",
            },
            {
              "docs": undefined,
              "type": "TaxReturnsYearlyRequest",
            },
          ],
        },
        "RetrieveTaxReturnsResponseItem": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "TaxReturnPersonal",
            },
            {
              "docs": undefined,
              "type": "TaxReturnPersonalMonthly",
            },
            {
              "docs": undefined,
              "type": "TaxReturnBusiness",
            },
            {
              "docs": undefined,
              "type": "TaxReturnBusinessMonthly",
            },
          ],
        },
        "RetrieveTaxStatusResponse": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "TaxStatusSat",
            },
            {
              "docs": undefined,
              "type": "TaxStatusDian",
            },
          ],
        },
        "RiskInsights": {
          "docs": undefined,
          "properties": {
            "accounts": {
              "docs": "An array of Belvo-generated account numbers (UUIDs) that were used during the risk insights analysis. If no accounts were found, we return an empty array.",
              "type": "optional<list<string>>",
            },
            "balances_metrics": {
              "docs": undefined,
              "type": "RiskInsightsBalanceMetrics",
            },
            "cashflow_metrics": {
              "docs": undefined,
              "type": "RiskInsightsCashflowMetrics",
            },
            "created_at": {
              "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
              "type": "string",
            },
            "credit_cards_metrics": {
              "docs": undefined,
              "type": "RiskInsightsCreditCardMetrics",
            },
            "id": {
              "docs": "Belvo's unique ID for the risk insights request.",
              "type": "string",
            },
            "link": {
              "docs": "The \`link.id\` the risk insights analysis belongs to.",
              "type": "string",
            },
            "loans_metrics": {
              "docs": undefined,
              "type": "RiskInsightsLoansMetrics",
            },
            "transactions_metrics": {
              "docs": undefined,
              "type": "RiskInsightsTransactionMetrics",
            },
          },
        },
        "RiskInsightsBalanceMetrics": {
          "docs": undefined,
          "properties": {
            "balance_threshold_x": {
              "docs": "The threshold used to compute \`days_balance_below_x_period\`. Please note, this is value is country specific (both in terms of the amount and the currency).
",
              "type": "double",
            },
            "closing_balance": {
              "docs": "The balance of all the accounts at the \`collected_at\` time.
",
              "type": "optional<double>",
            },
            "days_balance_below_0_1m": {
              "docs": "The number of days that the total balance of the account is less than or equal to 0 in the last month.
",
              "type": "optional<integer>",
            },
            "days_balance_below_0_1w": {
              "docs": "The number of days that the total balance of the account is less than or equal to 0 in the last week.
",
              "type": "optional<integer>",
            },
            "days_balance_below_0_3m": {
              "docs": "The number of days that the total balance of the account is less than or equal to 0 in the last three months.
",
              "type": "optional<integer>",
            },
            "days_balance_below_x_1m": {
              "docs": "The number of days that the total balance of the account is less than or equal to the amount specified in \`balance_threshold_x\` in the last month.
",
              "type": "optional<integer>",
            },
            "days_balance_below_x_1w": {
              "docs": "The number of days that the total balance of the account is less than or equal to the amount specified in \`balance_threshold_x\` in the last week.
",
              "type": "optional<integer>",
            },
            "days_balance_below_x_3m": {
              "docs": "The number of days that the total balance of the account is less than or equal to the amount specified in \`balance_threshold_x\` in the last three months.
",
              "type": "optional<integer>",
            },
            "max_balance_1m": {
              "docs": "The maximum balance in the period (one month).
",
              "type": "optional<double>",
            },
            "max_balance_1w": {
              "docs": "The maximum balance in the period (one week).
",
              "type": "optional<double>",
            },
            "max_balance_3m": {
              "docs": "The maximum balance in the period (three months).
",
              "type": "optional<double>",
            },
            "min_balance_1m": {
              "docs": "The minimum balance in the period (one month).
",
              "type": "optional<double>",
            },
            "min_balance_1w": {
              "docs": "The minimum balance in the period (one week).
",
              "type": "optional<double>",
            },
            "min_balance_3m": {
              "docs": "The minimum balance in the period (three months).
",
              "type": "optional<double>",
            },
          },
        },
        "RiskInsightsCashflowMetrics": {
          "docs": undefined,
          "properties": {
            "positive_to_negative_ratio_1m": {
              "docs": "The ratio between sum_positive / sum_negative  in the last month (counted from the time of the request).

ℹ️ If the ratio is greater than \`1\`, it means that the user has more income than outgoing, indicating that they spend less than they earn.
",
              "type": "optional<double>",
            },
            "positive_to_negative_ratio_1w": {
              "docs": "The ratio between sum_positive / sum_negative  in the last week (counted from the time of the request).

ℹ️ If the ratio is greater than \`1\`, it means that the user has more income than outgoing, indicating that they spend less than they earn.

**Note**: In the case that there have been no outgoing transactions, the value will be \`null\`.
",
              "type": "optional<double>",
            },
            "positive_to_negative_ratio_3m": {
              "docs": "The ratio between sum_positive / sum_negative  in the last three months (counted from the time of the request).

ℹ️ If the ratio is greater than \`1\`, it means that the user has more income than outgoing, indicating that they spend less than they earn.
",
              "type": "optional<double>",
            },
            "sum_negative_1m": {
              "docs": "Sum total of all transactions leading to a negative cashflow in the last month (counted from the time of the request).
",
              "type": "optional<double>",
            },
            "sum_negative_1w": {
              "docs": "Sum total of all transactions leading to a negative cashflow in the last week (counted from the time of the request).
",
              "type": "optional<double>",
            },
            "sum_negative_3m": {
              "docs": "Sum total of all transactions leading to a negative cashflow in the last three months (counted from the time of the request).
",
              "type": "optional<double>",
            },
            "sum_positive_1m": {
              "docs": "Sum total of all transactions leading to a positive cashflow in the last month (counted from the time of the request).
",
              "type": "optional<double>",
            },
            "sum_positive_1w": {
              "docs": "Sum total of all transactions leading to a positive cashflow in the last week (counted from the time of the request).
",
              "type": "optional<double>",
            },
            "sum_positive_3m": {
              "docs": "Sum total of all transactions leading to a positive cashflow in the last three months (counted from the time of the request).
",
              "type": "optional<double>",
            },
          },
        },
        "RiskInsightsCreditCardMetrics": {
          "docs": undefined,
          "properties": {
            "num_accounts": {
              "docs": "Number of credit cards accounts associated to the link.
",
              "type": "integer",
            },
            "sum_credit_limit": {
              "docs": "Sum total of all credit cards' limits.
",
              "type": "optional<double>",
            },
            "sum_credit_used": {
              "docs": "Sum total of all credit used.
",
              "type": "optional<double>",
            },
          },
        },
        "RiskInsightsLoansMetrics": {
          "docs": undefined,
          "properties": {
            "num_accounts": {
              "docs": "Number of loan accounts associated with the link.
",
              "type": "integer",
            },
            "sum_loans_monthly_payment": {
              "docs": "Sum total of the monthly payments for all the link's loan accounts.
",
              "type": "optional<double>",
            },
            "sum_loans_outstanding_principal": {
              "docs": "Sum total of the outstanding principal for all the link's loan accounts.
",
              "type": "optional<double>",
            },
            "sum_loans_principal": {
              "docs": "Sum total of the principal for all of the link's loan accounts.
",
              "type": "optional<double>",
            },
          },
        },
        "RiskInsightsPaginatedResponse": {
          "docs": undefined,
          "properties": {
            "count": {
              "docs": "The total number of results in your Belvo account.",
              "type": "optional<integer>",
            },
            "next": {
              "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is \`null\`.

In our documentation example, we use \`{endpoint}\` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, \`accounts\` or \`owners\`).
",
              "type": "optional<string>",
            },
            "previous": {
              "docs": "The URL to the previous page of results. If there is no previous page, the value is \`null\`.",
              "type": "optional<string>",
            },
            "results": {
              "docs": "Array of risk insights objects.",
              "type": "optional<list<RiskInsights>>",
            },
          },
        },
        "RiskInsightsTransactionMetrics": {
          "docs": undefined,
          "properties": {
            "max_incoming_amount_1m": {
              "docs": "The highest value inflow transaction in the last month.
",
              "type": "optional<double>",
            },
            "max_incoming_amount_1w": {
              "docs": "The highest value inflow transaction in the last week.
",
              "type": "optional<double>",
            },
            "max_incoming_amount_3m": {
              "docs": "The highest value inflow transaction in the last three months.
",
              "type": "optional<double>",
            },
            "max_outgoing_amount_1m": {
              "docs": "The highest value outflow transaction in the last month.
",
              "type": "optional<double>",
            },
            "max_outgoing_amount_1w": {
              "docs": "The highest value outflow transaction in the last week.
",
              "type": "optional<double>",
            },
            "max_outgoing_amount_3m": {
              "docs": "The highest value outflow transaction in the last three months.
",
              "type": "optional<double>",
            },
            "mean_incoming_amount_1m": {
              "docs": "The mean incoming value of all transactions in the last month.
",
              "type": "optional<double>",
            },
            "mean_incoming_amount_1w": {
              "docs": "The mean incoming value of all transactions in the last week.
",
              "type": "optional<double>",
            },
            "mean_incoming_amount_3m": {
              "docs": "The mean incoming value of all transactions in the last three months.
",
              "type": "optional<double>",
            },
            "mean_outgoing_amount_1m": {
              "docs": "The mean outgoing value of all transaction in the last month.
",
              "type": "optional<double>",
            },
            "mean_outgoing_amount_1w": {
              "docs": "The mean outgoing value of all transaction in the last week.
",
              "type": "optional<double>",
            },
            "mean_outgoing_amount_3m": {
              "docs": "The mean outgoing value of all transaction in the last three months.
",
              "type": "optional<double>",
            },
            "num_incoming_transactions_1m": {
              "docs": "The total number of inflow transactions for the last month.

ℹ️ **Note**: If there are no transactions between the request date and the last seven or thirty days, the value is \`0\`.

If the account has not been open long enough to have the transaction data for a given period, we return \`null\`. For example, if the account has only been open for five days, we return values for \`_1w\` and \`_1m\`, however, the value for \`_3m\` will be \`null\`.
",
              "type": "integer",
            },
            "num_incoming_transactions_1w": {
              "docs": "The total number of inflow transactions for the last week.

ℹ️ **Note**: If there are no transactions between the request date and the last seven or thirty days, the value is \`0\`.

If the account has not been open long enough to have the transaction data for a given period, we return \`null\`. For example, if the account has only been open for five days, we return values for \`_1w\` and \`_1m\`, however, the value for \`_3m\` will be \`null\`.
",
              "type": "integer",
            },
            "num_incoming_transactions_3m": {
              "docs": "The total number of inflow transactions for the last three months.

ℹ️ **Note**: If there are no transactions between the request date and the last seven or thirty days, the value is \`0\`.

If the account has not been open long enough to have the transaction data for a given period, we return \`null\`. For example, if the account has only been open for five days, we return values for \`_1w\` and \`_1m\`, however, the value for \`_3m\` will be \`null\`.
",
              "type": "integer",
            },
            "num_outgoing_transactions_1m": {
              "docs": "To total number of outflow transactions in the last month.

ℹ️ **Note**: If there are no transactions between the request date and the last seven or thirty days, the value is \`0\`.

If the account has not been open long enough to have the transaction data for a given period, we return \`null\`. For example, if the account has only been open for five days, we return values for \`_1w\` and \`_1m\`, however, the value for \`_3m\` will be \`null\`.
",
              "type": "integer",
            },
            "num_outgoing_transactions_1w": {
              "docs": "To total number of outflow transactions in the last week.

ℹ️ **Note**: If there are no transactions between the request date and the last seven or thirty days, the value is \`0\`.

If the account has not been open long enough to have the transaction data for a given period, we return \`null\`. For example, if the account has only been open for five days, we return values for \`_1w\` and \`_1m\`, however, the value for \`_3m\` will be \`null\`.
",
              "type": "integer",
            },
            "num_outgoing_transactions_3m": {
              "docs": "To total number of outflow transactions in the last three months.

ℹ️ **Note**: If there are no transactions between the request date and the last seven or thirty days, the value is \`0\`.

If the account has not been open long enough to have the transaction data for a given period, we return \`null\`. For example, if the account has only been open for five days, we return values for \`_1w\` and \`_1m\`, however, the value for \`_3m\` will be \`null\`.
",
              "type": "integer",
            },
            "num_transactions_1m": {
              "docs": "The total number of transactions analyzed to determine the risk insights for the last month (incoming and outgoing).
",
              "type": "integer",
            },
            "num_transactions_1w": {
              "docs": "The total number of transactions analyzed to determine the risk insights for the last week (incoming and outgoing).
",
              "type": "integer",
            },
            "num_transactions_3m": {
              "docs": "The total number of transactions analyzed to determine the risk insights for the last three months (incoming and outgoing).
",
              "type": "integer",
            },
            "sum_incoming_amount_1m": {
              "docs": "The total sum of all inflow transactions for the last month.
",
              "type": "optional<double>",
            },
            "sum_incoming_amount_1w": {
              "docs": "The total sum of all inflow transactions for the last week.
",
              "type": "optional<double>",
            },
            "sum_incoming_amount_3m": {
              "docs": "The total sum of all inflow transactions for the last three months.
",
              "type": "optional<double>",
            },
            "sum_outgoing_amount_1m": {
              "docs": "The total sum of all outflow transactions for the last month.
",
              "type": "optional<double>",
            },
            "sum_outgoing_amount_1w": {
              "docs": "The total sum of all outflow transactions for the last week.
",
              "type": "optional<double>",
            },
            "sum_outgoing_amount_3m": {
              "docs": "The total sum of all outflow transactions for the last three months.
",
              "type": "optional<double>",
            },
          },
        },
        "SecretKeys": {
          "docs": undefined,
          "properties": {
            "created_at": {
              "docs": "The ISO-8601 timestamp of when the secret key was created.
",
              "type": "string",
            },
            "id": {
              "docs": "Belvo's unique ID for the Payments API \`secretId\`.",
              "type": "string",
            },
            "last_used": {
              "docs": "The ISO-8601 timestamp of when the secret key was last used.
",
              "type": "string",
            },
            "password": {
              "docs": "Your Payments API \`secretPassword\`. This value is obfuscated.",
              "type": "string",
            },
          },
        },
        "SecretKeysPaginatedResponse": {
          "docs": undefined,
          "properties": {
            "count": {
              "docs": "The total number of results in your Belvo account.",
              "type": "optional<integer>",
            },
            "next": {
              "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is \`null\`.

In our documentation example, we use \`{endpoint}\` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, \`customer\` or \`bank-accounts\`).
",
              "type": "optional<string>",
            },
            "previous": {
              "docs": "The URL to the previous page of results. If there is no previous page, the value is \`null\`.",
              "type": "optional<string>",
            },
            "results": {
              "docs": "Array of secret keys objects.",
              "type": "optional<list<SecretKeys>>",
            },
          },
        },
        "SessionExpiredError": {
          "docs": "This error occurs when you try to resume a request session that has already expired. This is usually because the user took too long to provide their authentication token.",
          "properties": {
            "code": {
              "docs": "A unique error code (\`session_expired\`) that allows you to classify and handle the error programmatically.

ℹ️ Check our DevPortal for more information on how to handle <a href="https://developers.belvo.com/docs/belvo-api-errors#400-session_expired" target="_blank">400 session_expired errors</a>.",
              "type": "optional<string>",
            },
            "message": {
              "docs": "A short description of the error. 

For \`session_expired\` errors, the description is:
  
  - \`The session you are trying to resume has expired, please start again from register/retrieve endpoint\`.",
              "type": "optional<string>",
            },
            "request_id": {
              "docs": "A 32-character unique ID of the request (matching a regex pattern of: \`[a-f0-9]{32}\`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
              "type": "optional<string>",
            },
          },
        },
        "StandardRequest": {
          "docs": undefined,
          "properties": {
            "link": {
              "docs": "The \`link.id\` that you want to get information for.",
              "type": "string",
            },
            "save_data": {
              "docs": "Indicates whether or not to persist the data in Belvo. By default, this is set to \`true\` and we return a 201 Created response.
When set to \`false\`, the data won't be persisted and we return a 200 OK response.",
              "type": "optional<boolean>",
            },
            "token": {
              "docs": "The OTP token generated by the bank.",
              "type": "optional<string>",
            },
          },
        },
        "TaxAssessmentBusiness": {
          "docs": "Object containing the calculated tax assessment of the tax payer. This includes the total taxable income, the income tax applied, and taxes already withheld.",
          "properties": {
            "fortuitous_profit_tax": {
              "docs": "The tax applied on your unexpected income (such as lottery wins or house sales).",
              "type": "double",
            },
            "net_income_tax": {
              "docs": "After additional deductions that you can apply, this will be the net income tax. If no further deduction are identified, this value will be the same as \`total_tax_on_taxable_net_income\`.",
              "type": "double",
            },
            "net_income_taxable": {
              "docs": "The net income on which tax can be applied.",
              "type": "double",
            },
            "total_balance_in_favor": {
              "docs": "How much the tax payer is expected to receive.",
              "type": "double",
            },
            "total_balance_payable": {
              "docs": "How much the tax payer is required to pay.",
              "type": "double",
            },
            "total_payment": {
              "docs": "The total the tax payer is required to pay, taking into account deductions and fiscal credits.",
              "type": "double",
            },
            "total_tax_due": {
              "docs": "After further deductions, this is the final calculated tax that the taxpayer is required to pay.",
              "type": "double",
            },
            "total_tax_on_taxable_net_income": {
              "docs": "The calculated total tax that can be applied on the tax payer's taxable income (total income - exemptions - deductions).",
              "type": "double",
            },
            "total_withholdings_for_the_taxable_year_to_be_declared": {
              "docs": "How much the tax payer has already paid througout the fiscal year.",
              "type": "double",
            },
          },
        },
        "TaxAssessmentIndividual": {
          "docs": "Object containing the calculated tax assessment of the tax payer. This includes the total taxable income, the income tax applied, and taxes already withheld.",
          "properties": {
            "balance_payable": {
              "docs": "How much the tax payer is required to pay.",
              "type": "double",
            },
            "balance_refundable": {
              "docs": "How much the tax payer is expected to receive. For DIAN, this will count as credit for the next fiscal year (see \`previous_year_balance\`).",
              "type": "double",
            },
            "fortuitous_profit_tax": {
              "docs": "The tax applied on your unexpected income (such as lottery wins or house sales).",
              "type": "double",
            },
            "net_income_tax": {
              "docs": "After additional deductions that you can apply, this will be the net income tax. If not further deduction are identified, this value will be the same as \`total_tax_on_taxable_net_income\`.",
              "type": "double",
            },
            "previous_year_balance": {
              "docs": "Only applicable for DIAN.


The amount the tax payer has as a "credit" fromt he previous year (this is equal to the \`balance_refundable\`) of the previous year.
",
              "type": "double",
            },
            "total_payment": {
              "docs": "The total the tax payer is required to pay, taking into account deductions and fiscal credits.",
              "type": "double",
            },
            "total_tax_due": {
              "docs": "After further deductions, this is the final calculated tax that the taxpayer is required to pay.",
              "type": "double",
            },
            "total_tax_on_taxable_net_income": {
              "docs": "The calculated total tax that can be applied on the tax payer's taxable income (total income - exemptions - deductions).",
              "type": "double",
            },
            "total_withheld_tax": {
              "docs": "The total tax already withheld in the current fiscal year.",
              "type": "double",
            },
          },
        },
        "TaxComplianceStatus": {
          "docs": undefined,
          "properties": {
            "collected_at": {
              "docs": "The ISO-8601 timestamp when the data point was collected.",
              "type": "optional<string>",
            },
            "created_at": {
              "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
              "type": "optional<string>",
            },
            "id": {
              "docs": "Unique identifier created by Belvo used to reference the current Tax Compliance Status.",
              "type": "optional<string>",
            },
            "internal_identification": {
              "docs": "The institution’s internal identification number for the document.",
              "type": "optional<string>",
            },
            "outcome": {
              "docs": undefined,
              "type": "optional<EnumTaxComplianceStatusOutcome>",
            },
            "pdf": {
              "docs": "Tax compliance status PDF as a binary.",
              "type": "optional<string>",
            },
            "rfc": {
              "docs": "The account holder's RFC (Registro Federal de Contribuyentes) number.",
              "type": "optional<string>",
            },
          },
        },
        "TaxComplianceStatusPaginatedResponse": {
          "docs": undefined,
          "properties": {
            "count": {
              "docs": "The total number of results in your Belvo account.",
              "type": "optional<integer>",
            },
            "next": {
              "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is \`null\`.

In our documentation example, we use \`{endpoint}\` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, \`accounts\` or \`owners\`).
",
              "type": "optional<string>",
            },
            "previous": {
              "docs": "The URL to the previous page of results. If there is no previous page, the value is \`null\`.",
              "type": "optional<string>",
            },
            "results": {
              "docs": "Array of tax compliance status objects.",
              "type": "optional<list<TaxComplianceStatus>>",
            },
          },
        },
        "TaxDeclarationBusiness": {
          "docs": undefined,
          "properties": {
            "annual_costs_and_deductions_statement": {
              "docs": undefined,
              "type": "AnnualCostsAndDeductionsStatementBusiness",
            },
            "annual_income_statement": {
              "docs": undefined,
              "type": "AnnualIncomeStatementBusiness",
            },
            "collected_at": {
              "docs": "The ISO-8601 timestamp when the data point was collected.",
              "type": "string",
            },
            "created_at": {
              "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
              "type": "string",
            },
            "date_issued": {
              "docs": "The date the tax declaration was issued by the fiscal institution.",
              "type": "string",
            },
            "document_information": {
              "docs": undefined,
              "type": "DocumentInformationBusiness",
            },
            "equity_statement": {
              "docs": undefined,
              "type": "EquityStatementBusiness",
            },
            "id": {
              "docs": "Belvo's unique ID for the current tax declaration.",
              "type": "string",
            },
            "link": {
              "docs": "Belvo's unique ID of the user that this tax declaration is associated with.",
              "type": "string",
            },
            "pdf": {
              "docs": "The PDF of the tax declaration, as a binary string.",
              "type": "optional<string>",
            },
            "tax_assessment": {
              "docs": undefined,
              "type": "TaxAssessmentBusiness",
            },
            "tax_payer_information": {
              "docs": undefined,
              "type": "TaxPayerInformationBusiness",
            },
          },
        },
        "TaxDeclarationBusinessPaginated": {
          "docs": undefined,
          "properties": {
            "count": {
              "docs": "The total number of results in your Belvo account.",
              "type": "optional<integer>",
            },
            "next": {
              "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is \`null\`.

In our documentation example, we use \`{endpoint}\` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, \`accounts\` or \`owners\`).
",
              "type": "optional<string>",
            },
            "previous": {
              "docs": "The URL to the previous page of results. If there is no previous page, the value is \`null\`.",
              "type": "optional<string>",
            },
            "results": {
              "docs": "Array of Business Tax Declaration objects.",
              "type": "optional<list<TaxDeclarationBusiness>>",
            },
          },
        },
        "TaxDeclarationIndividual": {
          "docs": undefined,
          "properties": {
            "annual_income_statement": {
              "docs": undefined,
              "type": "AnnualIncomeStatementIndividual",
            },
            "collected_at": {
              "docs": "The ISO-8601 timestamp when the data point was collected.",
              "type": "string",
            },
            "created_at": {
              "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
              "type": "string",
            },
            "date_issued": {
              "docs": "The date the tax declaration was issued by the fiscal institution.",
              "type": "string",
            },
            "document_information": {
              "docs": undefined,
              "type": "DocumentInformationIndividual",
            },
            "equity_statement": {
              "docs": undefined,
              "type": "EquityStatementIndividual",
            },
            "id": {
              "docs": "Belvo's unique ID for the current tax declaration.",
              "type": "string",
            },
            "link": {
              "docs": "Belvo's unique ID of the user that this tax declaration is associated with.",
              "type": "string",
            },
            "pdf": {
              "docs": "The PDF of the tax declaration, as a binary string.",
              "type": "optional<string>",
            },
            "pension_income_statement": {
              "docs": undefined,
              "type": "PensionIncomeStatementIndividual",
            },
            "tax_assessment": {
              "docs": undefined,
              "type": "TaxAssessmentIndividual",
            },
            "tax_payer_information": {
              "docs": undefined,
              "type": "TaxPayerInformationIndividual",
            },
          },
        },
        "TaxDeclarationIndividualPaginated": {
          "docs": undefined,
          "properties": {
            "count": {
              "docs": "The total number of results in your Belvo account.",
              "type": "optional<integer>",
            },
            "next": {
              "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is \`null\`.

In our documentation example, we use \`{endpoint}\` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, \`accounts\` or \`owners\`).
",
              "type": "optional<string>",
            },
            "previous": {
              "docs": "The URL to the previous page of results. If there is no previous page, the value is \`null\`.",
              "type": "optional<string>",
            },
            "results": {
              "docs": "Array of Individual Tax Declaration objects.",
              "type": "optional<list<TaxDeclarationIndividual>>",
            },
          },
        },
        "TaxPayerInformationBusiness": {
          "docs": "Object containing information about the tax payer.",
          "properties": {
            "company_name": {
              "docs": "The name of the company, as registered at the institution.",
              "type": "string",
            },
            "document_id": {
              "docs": undefined,
              "type": "DocumentIdBusiness",
            },
            "first_last_name": {
              "docs": "The tax payer's first last name.",
              "type": "optional<string>",
            },
            "first_name": {
              "docs": "The tax payer's first name.",
              "type": "optional<string>",
            },
            "main_economic_activity": {
              "docs": "The main economic activity the tax payer is involved in.",
              "type": "string",
            },
            "other_names": {
              "docs": "Additional names of the tax payer.",
              "type": "optional<string>",
            },
            "reporting_id": {
              "docs": undefined,
              "type": "ReportingId",
            },
            "second_last_name": {
              "docs": "The tax payer's second last name.",
              "type": "optional<string>",
            },
          },
        },
        "TaxPayerInformationIndividual": {
          "docs": "Object containing information about the tax payer.",
          "properties": {
            "document_id": {
              "docs": undefined,
              "type": "DocumentIdIndividual",
            },
            "first_last_name": {
              "docs": "The tax payer's first last name.",
              "type": "string",
            },
            "first_name": {
              "docs": "The tax payer's first name.",
              "type": "string",
            },
            "main_economic_activity": {
              "docs": "The main economic activity the tax payer is involved in.",
              "type": "string",
            },
            "other_names": {
              "docs": "Additional names of the tax payer.",
              "type": "string",
            },
            "reporting_id": {
              "docs": undefined,
              "type": "ReportingId",
            },
            "second_last_name": {
              "docs": "The tax payer's second last name.",
              "type": "string",
            },
          },
        },
        "TaxRetentions": {
          "docs": undefined,
          "properties": {
            "cancelled_at": {
              "docs": "The ISO-8601 timestamp of when the tax retention was canceled (if applicable).
",
              "type": "optional<string>",
            },
            "certified_at": {
              "docs": "The ISO-8601 timestamp of when the tax retention was certified.
",
              "type": "optional<string>",
            },
            "code": {
              "docs": "The tax retention code. For more information, see our [SAT Catalogs DevPortal article](https://developers.belvo.com/docs/sat-catalogs#retention-code).
",
              "type": "optional<integer>",
            },
            "collected_at": {
              "docs": "The ISO-8601 timestamp of when the data point was collected.
",
              "type": "optional<string>",
            },
            "created_at": {
              "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.
",
              "type": "optional<string>",
            },
            "id": {
              "docs": "Belvo's unique identifier used to reference the current tax retention statement.",
              "type": "optional<string>",
            },
            "invoice_identification": {
              "docs": "The fiscal institution's unique ID for the invoice that the tax retention relates to.
",
              "type": "optional<string>",
            },
            "issued_at": {
              "docs": "The ISO-8601 timestamp of when the tax retention was issued.
",
              "type": "optional<string>",
            },
            "link": {
              "docs": "The \`link.id\` the tax retention belongs to.",
              "type": "optional<string>",
            },
            "receiver_id": {
              "docs": "The fiscal ID of the invoice receiver.
",
              "type": "optional<string>",
            },
            "receiver_name": {
              "docs": "The name of the invoice receiver.
",
              "type": "optional<string>",
            },
            "receiver_nationality": {
              "docs": undefined,
              "type": "EnumTaxRetentionReceiverNationality",
            },
            "retention_breakdown": {
              "docs": "A breakdown of the retained taxes.",
              "type": "optional<list<RetentionBreakdown>>",
            },
            "sender_id": {
              "docs": "The fiscal ID of the invoice sender.
",
              "type": "optional<string>",
            },
            "sender_name": {
              "docs": "The name of the invoice sender.
",
              "type": "optional<string>",
            },
            "total_exempt_amount": {
              "docs": "Total amount that is exempt from taxation.
",
              "type": "optional<double>",
            },
            "total_invoice_amount": {
              "docs": "The total amount of the invoice that the tax retention relates to.
",
              "type": "optional<double>",
            },
            "total_retained_amount": {
              "docs": "Total tax retained.
",
              "type": "optional<double>",
            },
            "total_taxable_amount": {
              "docs": "The total amount that can be taxed. Calculated as \`total_invoice_amount\` - \`total_exempt_amount\`.
",
              "type": "optional<double>",
            },
            "version": {
              "docs": "The CFDI version of the tax retentions.
",
              "type": "optional<string>",
            },
            "xml": {
              "docs": "The tax retention document in XML form.
",
              "type": "optional<string>",
            },
          },
        },
        "TaxRetentionsPaginatedResponse": {
          "docs": undefined,
          "properties": {
            "count": {
              "docs": "The total number of results in your Belvo account.",
              "type": "optional<integer>",
            },
            "next": {
              "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is \`null\`.

In our documentation example, we use \`{endpoint}\` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, \`accounts\` or \`owners\`).
",
              "type": "optional<string>",
            },
            "previous": {
              "docs": "The URL to the previous page of results. If there is no previous page, the value is \`null\`.",
              "type": "optional<string>",
            },
            "results": {
              "docs": "Array of tax retentions objects.",
              "type": "optional<list<TaxRetentions>>",
            },
          },
        },
        "TaxReturnBusiness": {
          "docs": undefined,
          "type": "map<string, unknown>",
        },
        "TaxReturnBusinessMonthly": {
          "docs": undefined,
          "type": "map<string, unknown>",
        },
        "TaxReturnPersonal": {
          "docs": undefined,
          "type": "map<string, unknown>",
        },
        "TaxReturnPersonalMonthly": {
          "docs": undefined,
          "type": "map<string, unknown>",
        },
        "TaxReturnsBusinessMonthlyPaginated": {
          "docs": undefined,
          "type": "map<string, unknown>",
        },
        "TaxReturnsBusinessPaginated": {
          "docs": undefined,
          "type": "map<string, unknown>",
        },
        "TaxReturnsMonthlyRequest": {
          "docs": "Request body for monthly tax returns",
          "properties": {
            "attach_pdf": {
              "docs": "When this is set to \`true\`, you will receive the PDF as a binary string in the response.",
              "type": "optional<boolean>",
            },
            "date_from": {
              "docs": "The starting date you want to get tax returns for, in \`YYYY-MM-DD\` format.

⚠️ The value of \`date_from\` cannot be greater than \`date_to\`.",
              "type": "string",
            },
            "date_to": {
              "docs": "The date you want to stop getting tax returns for, in \`YYYY-MM-DD\` format.

⚠️ The value of \`date_to\` cannot be greater than today's date (in other words, no future dates).",
              "type": "string",
            },
            "link": {
              "docs": "The fiscal \`link.id\` you want specific tax return information for.",
              "type": "string",
            },
            "save_data": {
              "docs": "Indicates whether or not to persist the data in Belvo. By default, this is set to \`true\` and we return a 201 Created response.
When set to \`false\`, the data won't be persisted and we return a 200 OK response.",
              "type": "optional<boolean>",
            },
            "type": {
              "docs": "The type of tax return to return. For monthly tax returns, this field must be set to \`monthly\`.
",
              "type": "string",
            },
          },
        },
        "TaxReturnsPersonalMonthlyPaginated": {
          "docs": undefined,
          "type": "map<string, unknown>",
        },
        "TaxReturnsPersonalPaginated": {
          "docs": undefined,
          "type": "map<string, unknown>",
        },
        "TaxReturnsYearlyRequest": {
          "docs": "Request body for yearly tax returns",
          "properties": {
            "attach_pdf": {
              "docs": "When this is set to \`true\`, you will receive the PDF as a binary string in the response.",
              "type": "optional<boolean>",
            },
            "link": {
              "docs": "The fiscal \`link.id\` you want specific tax return information for.",
              "type": "string",
            },
            "save_data": {
              "docs": "Indicates whether or not to persist the data in Belvo. By default, this is set to \`true\` and we return a 201 Created response.
When set to \`false\`, the data won't be persisted and we return a 200 OK response.",
              "type": "optional<boolean>",
            },
            "type": {
              "docs": "The type of tax return to return. For yearly tax returns this must be set to \`yearly\`.

By default, Belvo returns the yearly (annual) tax returns.
",
              "type": "string",
            },
            "year_from": {
              "docs": "The starting year you want to get tax returns for, in \`YYYY\` format.
",
              "type": "string",
            },
            "year_to": {
              "docs": "The year you want to stop getting tax returns for, in \`YYYY\` format.
",
              "type": "string",
            },
          },
        },
        "TaxStatusAddressBetweenStreetDian": {
          "docs": undefined,
          "properties": {
            "street_one": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "optional<string>",
            },
            "street_two": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "optional<string>",
            },
          },
        },
        "TaxStatusAddressBetweenStreetSat": {
          "docs": undefined,
          "properties": {
            "street_one": {
              "docs": "The first street that \`street\` is located between.",
              "type": "optional<string>",
            },
            "street_two": {
              "docs": "The second street that \`street\` is located between.",
              "type": "optional<string>",
            },
          },
        },
        "TaxStatusAddressDian": {
          "docs": undefined,
          "properties": {
            "between_street": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "optional<list<TaxStatusAddressBetweenStreetDian>>",
            },
            "exterior_number": {
              "docs": "The street number.",
              "type": "optional<string>",
            },
            "interior_number": {
              "docs": "Additional address information.",
              "type": "optional<string>",
            },
            "locality": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "optional<string>",
            },
            "municipality": {
              "docs": "The municipality of the address.",
              "type": "optional<string>",
            },
            "postal_code": {
              "docs": "The postcode of the address.
",
              "type": "optional<string>",
            },
            "state": {
              "docs": "The state that the address is in.",
              "type": "optional<string>",
            },
            "street": {
              "docs": "The tax payers street.",
              "type": "optional<string>",
            },
            "street_type": {
              "docs": "The \`street\` type.",
              "type": "optional<string>",
            },
            "suburb": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "optional<string>",
            },
          },
        },
        "TaxStatusAddressSat": {
          "docs": undefined,
          "properties": {
            "between_street": {
              "docs": "Additional information about where the \`street\` is located.
",
              "type": "optional<list<TaxStatusAddressBetweenStreetSat>>",
            },
            "exterior_number": {
              "docs": "The street number.",
              "type": "optional<string>",
            },
            "interior_number": {
              "docs": "Additional address information.",
              "type": "optional<string>",
            },
            "locality": {
              "docs": "The locality of the address.
",
              "type": "optional<string>",
            },
            "municipality": {
              "docs": "The municipality of the address.",
              "type": "optional<string>",
            },
            "postal_code": {
              "docs": "The postcode of the address.
",
              "type": "optional<string>",
            },
            "state": {
              "docs": "The state that the address is in.",
              "type": "optional<string>",
            },
            "street": {
              "docs": "The tax payers street.",
              "type": "optional<string>",
            },
            "street_type": {
              "docs": "The \`street\` type.",
              "type": "optional<string>",
            },
            "suburb": {
              "docs": "The suburb of the tax payer.
",
              "type": "optional<string>",
            },
          },
        },
        "TaxStatusDian": {
          "docs": undefined,
          "properties": {
            "address": {
              "docs": undefined,
              "type": "TaxStatusAddressDian",
            },
            "collected_at": {
              "docs": "The ISO-8601 timestamp when the data point was collected.",
              "type": "optional<string>",
            },
            "created_at": {
              "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
              "type": "string",
            },
            "digital_stamp": {
              "docs": "The validation certificate of the document.",
              "type": "optional<string>",
            },
            "digital_stamp_chain": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "optional<string>",
            },
            "economic_activity": {
              "docs": "A list of economic activity objects.
",
              "type": "optional<list<TaxStatusEconomicActivityDian>>",
            },
            "id": {
              "docs": "Unique identifier created by Belvo used to reference the current Tax Status.",
              "type": "string",
            },
            "id_cif": {
              "docs": "The taxpayer's *Cédula de ciudadanía* (CC) ID. Only applicable for individuals.
",
              "type": "optional<string>",
            },
            "link": {
              "docs": "The \`link.id\` that the tax status is associated with.",
              "type": "string",
            },
            "obligations": {
              "docs": "Details regarding a business's obligations.

ℹ️ For non-business accounts, this field will return empty.
",
              "type": "optional<list<TaxStatusObligationsDian>>",
            },
            "official_name": {
              "docs": "The name of the business.

Note: For individuals in Colombia, this field will return \`null\`.
",
              "type": "optional<string>",
            },
            "pdf": {
              "docs": "Tax status PDF as a binary string.",
              "type": "optional<string>",
            },
            "place_and_date_of_issuance": {
              "docs": "The date when the tax status was issued. For example, \`2020-08-05/18:55:16\`.",
              "type": "optional<string>",
            },
            "regimes": {
              "docs": "A list of regimen objects.
",
              "type": "optional<list<TaxStatusRegimensDian>>",
            },
            "tax_payer_information": {
              "docs": undefined,
              "type": "TaxStatusTaxPayerInformationDian",
            },
          },
        },
        "TaxStatusEconomicActivityDian": {
          "docs": undefined,
          "properties": {
            "economic_activity": {
              "docs": "The economic activity code, according to the fiscal institution.

For detailed information regarding DIAN's economic activities, please see their [official PDF](https://www.dian.gov.co/impuestos/factura-electronica/Documents/Anexo_tecnico_factura_electronica_vr_1_7_2020.pdf).
",
              "type": "optional<string>",
            },
            "end_date": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "optional<string>",
            },
            "initial_date": {
              "docs": "The start date of the economic activity.",
              "type": "optional<string>",
            },
            "order": {
              "docs": "The order of the economic activity.",
              "type": "optional<string>",
            },
            "percentage": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "optional<string>",
            },
          },
        },
        "TaxStatusEconomicActivitySat": {
          "docs": undefined,
          "properties": {
            "economic_activity": {
              "docs": "The description of the economic activity.",
              "type": "optional<string>",
            },
            "end_date": {
              "docs": "The end date of the economic activity.
",
              "type": "optional<string>",
            },
            "initial_date": {
              "docs": "The start date of the economic activity.",
              "type": "optional<string>",
            },
            "order": {
              "docs": "The order of the economic activity.",
              "type": "optional<string>",
            },
            "percentage": {
              "docs": "The percentage of the economic activity.
",
              "type": "optional<string>",
            },
          },
        },
        "TaxStatusObligationsDian": {
          "docs": "Details regarding a business's obligations.

ℹ️ For non-business accounts, this field will return empty.
",
          "properties": {
            "end_date": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "optional<string>",
            },
            "expiration": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "optional<string>",
            },
            "initial_date": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "optional<string>",
            },
            "obligation": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "optional<string>",
            },
          },
        },
        "TaxStatusObligationsSat": {
          "docs": "Details regarding a business's obligations.

ℹ️ For non-business accounts, this field will return empty.
",
          "properties": {
            "end_date": {
              "docs": "The date when obligation ended.
",
              "type": "optional<string>",
            },
            "expiration": {
              "docs": "The deadline to fulfill the obligation, as imposed by the tax authority.
",
              "type": "optional<string>",
            },
            "initial_date": {
              "docs": "The date when obligation started.
",
              "type": "optional<string>",
            },
            "obligation": {
              "docs": "The description of the obligation.
",
              "type": "optional<string>",
            },
          },
        },
        "TaxStatusPaginatedResponse": {
          "docs": undefined,
          "properties": {
            "count": {
              "docs": "The total number of results in your Belvo account.",
              "type": "optional<integer>",
            },
            "next": {
              "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is \`null\`.

In our documentation example, we use \`{endpoint}\` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, \`accounts\` or \`owners\`).
",
              "type": "optional<string>",
            },
            "previous": {
              "docs": "The URL to the previous page of results. If there is no previous page, the value is \`null\`.",
              "type": "optional<string>",
            },
            "results": {
              "docs": "Array of tax status objects.",
              "type": "optional<list<TaxStatusPaginatedResponseResultsItem>>",
            },
          },
        },
        "TaxStatusPaginatedResponseResultsItem": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "TaxStatusSat",
            },
            {
              "docs": undefined,
              "type": "TaxStatusDian",
            },
          ],
        },
        "TaxStatusRegimensDian": {
          "docs": undefined,
          "properties": {
            "end_date": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "optional<string>",
            },
            "initial_date": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "optional<string>",
            },
            "regimen": {
              "docs": "The description of the regimen.",
              "type": "optional<string>",
            },
          },
        },
        "TaxStatusRegimensSat": {
          "docs": undefined,
          "properties": {
            "end_date": {
              "docs": "The end date of the regimen.
",
              "type": "optional<string>",
            },
            "initial_date": {
              "docs": "The start date of the regimen.
",
              "type": "optional<string>",
            },
            "regimen": {
              "docs": "The description of the regimen.",
              "type": "optional<string>",
            },
          },
        },
        "TaxStatusSat": {
          "docs": undefined,
          "properties": {
            "address": {
              "docs": undefined,
              "type": "TaxStatusAddressSat",
            },
            "collected_at": {
              "docs": "The ISO-8601 timestamp when the data point was collected.",
              "type": "optional<string>",
            },
            "created_at": {
              "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
              "type": "string",
            },
            "digital_stamp": {
              "docs": "The validation certificate of the document.",
              "type": "optional<string>",
            },
            "digital_stamp_chain": {
              "docs": "A data chain containing the basic structure of a fiscal digital check. For Mexico, this is the *Comprobante Fiscal Digital por Internet* (CFDI).
",
              "type": "optional<string>",
            },
            "economic_activity": {
              "docs": "A list of economic activity objects.
",
              "type": "optional<list<TaxStatusEconomicActivitySat>>",
            },
            "id": {
              "docs": "Unique identifier created by Belvo used to reference the current Tax Status.",
              "type": "string",
            },
            "id_cif": {
              "docs": "The taxpayer's *Cédula de Identificación Fiscal* (CIF) ID.
",
              "type": "optional<string>",
            },
            "link": {
              "docs": "The \`link.id\` that the tax status is associated with.",
              "type": "string",
            },
            "obligations": {
              "docs": "Details regarding a business's obligations.

ℹ️ For non-business accounts, this field will return empty.
",
              "type": "optional<list<TaxStatusObligationsSat>>",
            },
            "official_name": {
              "docs": "The name of the person or business.",
              "type": "optional<string>",
            },
            "pdf": {
              "docs": "Tax status PDF as a binary string.",
              "type": "optional<string>",
            },
            "place_and_date_of_issuance": {
              "docs": "The place and date of that the tax status was issued.",
              "type": "optional<string>",
            },
            "regimes": {
              "docs": "A list of regimen objects.
",
              "type": "optional<list<TaxStatusRegimensSat>>",
            },
            "tax_payer_information": {
              "docs": undefined,
              "type": "TaxStatusTaxPayerInformationSat",
            },
          },
        },
        "TaxStatusTaxPayerInformationDian": {
          "docs": undefined,
          "properties": {
            "commercial_name": {
              "docs": "The name of the business designated for consumers and the general public.

**Note**: Only applicable for businesses.
",
              "type": "optional<string>",
            },
            "curp": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "optional<string>",
            },
            "email": {
              "docs": "Contact email address for the tax payer.",
              "type": "optional<string>",
            },
            "first_last_name": {
              "docs": "The tax payers's first last name.",
              "type": "optional<string>",
            },
            "last_status_change_date": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "optional<string>",
            },
            "name": {
              "docs": "The tax payers's first name.",
              "type": "optional<string>",
            },
            "phone": {
              "docs": "Contact phone number for the tax payer.",
              "type": "optional<string>",
            },
            "rfc": {
              "docs": "The tax payers's identification number (NIT).
",
              "type": "optional<string>",
            },
            "second_last_name": {
              "docs": "The tax payers's second last name.",
              "type": "optional<string>",
            },
            "social_name": {
              "docs": "The unique and exclusive name within the national territory that companies receive for legal or administrative purposes.
**Note**: Only applicable for businesses.",
              "type": "optional<string>",
            },
            "start_operations_date": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.
",
              "type": "optional<string>",
            },
            "status_padron": {
              "docs": "**Note**: This field is not applicable for DIAN Colombia and will return \`null\`.",
              "type": "optional<string>",
            },
          },
        },
        "TaxStatusTaxPayerInformationSat": {
          "docs": undefined,
          "properties": {
            "commercial_name": {
              "docs": "The name of the business designated for consumers and the general public.

**Note**: Only applicable for businesses.
",
              "type": "optional<string>",
            },
            "curp": {
              "docs": "The tax payers's *Clave Única de Registro de Población* (CURP) number.
",
              "type": "optional<string>",
            },
            "email": {
              "docs": "Contact email address for the tax payer.",
              "type": "optional<string>",
            },
            "first_last_name": {
              "docs": "The tax payers's first last name.",
              "type": "optional<string>",
            },
            "last_status_change_date": {
              "docs": "Date when \`status_padron\` was most recently updated.
",
              "type": "optional<string>",
            },
            "name": {
              "docs": "The tax payers's first name.",
              "type": "optional<string>",
            },
            "phone": {
              "docs": "Contact phone number for the tax payer.",
              "type": "optional<string>",
            },
            "rfc": {
              "docs": "The tax payers's identification number (For Mexico, this is the RFC).
",
              "type": "optional<string>",
            },
            "second_last_name": {
              "docs": "The tax payers's second last name.",
              "type": "optional<string>",
            },
            "social_name": {
              "docs": "The unique and exclusive name within the national territory that companies receive for legal or administrative purposes.
**Note**: Only applicable for businesses.",
              "type": "optional<string>",
            },
            "start_operations_date": {
              "docs": "Date when the tax payer commenced taxable commercial activities.
",
              "type": "optional<string>",
            },
            "status_padron": {
              "docs": "Status of the taxpayer in the Federal Register of Taxpayers (RFC). Can be \`ACTIVO\` or \`INACTIVO\`.",
              "type": "optional<string>",
            },
          },
        },
        "TokenRequiredResponse": {
          "docs": "MFA Token Required",
          "properties": {
            "code": {
              "docs": "A unique error code (\`token_required\`) that allows you to classify and handle the error programmatically.

ℹ️ Check our DevPortal for more information on how to handle <a href="https://developers.belvo.com/docs/belvo-api-errors#428-token_required" target="_blank">428 token_required errors</a>.",
              "type": "optional<string>",
            },
            "expiry": {
              "docs": "Session duration time in seconds.",
              "type": "optional<integer>",
            },
            "link": {
              "docs": "Unique identifier created by Belvo, used to reference the current Link.",
              "type": "optional<string>",
            },
            "message": {
              "docs": "A short description of the error. 

For \`token_required\` errors, the description is:
  
  - \`A MFA token is required by the institution to login\`.",
              "type": "optional<string>",
            },
            "request_id": {
              "docs": "A 32-character unique ID of the request (matching a regex pattern of: \`[a-f0-9]{32}\`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
              "type": "optional<string>",
            },
            "session": {
              "docs": "A 32-character unique ID of the login session (matching a regex pattern of: \`[a-f0-9]{32}\`).",
              "type": "optional<string>",
            },
            "token_generation_data": {
              "docs": undefined,
              "type": "optional<TokenRequiredResponseTokenGenerationData>",
            },
          },
        },
        "TokenRequiredResponseTokenGenerationData": {
          "docs": "Details on how to generate the token.",
          "properties": {
            "expects_user_input": {
              "docs": "Indicates whether the user needs to provide input in order to complete the authentication.
When set to \`false\`, your user may need to:
- confirm the login on another device - scan a QR code
You will still need to make a PATCH call to complete the request.",
              "type": "optional<boolean>",
            },
            "instructions": {
              "docs": "Instructions for token generation.",
              "type": "optional<string>",
            },
            "type": {
              "docs": "Type of the data to generate the token (QR code, numeric challenge).",
              "type": "optional<string>",
            },
            "value": {
              "docs": "Value to use to generate the token.",
              "type": "optional<string>",
            },
          },
        },
        "TooManySessionsError": {
          "docs": "This error occurs when:

  - a user is attempting to log in to their institution via Belvo while also already being logged in to their institution on a web browser or mobile app.
  - you make a request for information while Belvo is scraping data from the institution for that user.",
          "properties": {
            "code": {
              "docs": "A unique error code (\`too_many_sessions\`) that allows you to classify and handle the error programmatically.

ℹ️ Check our DevPortal for more information on how to handle <a href="https://developers.belvo.com/docs/belvo-api-errors#400-too_many_sessions" target="_blank">400 too_many_sessions errors</a>.",
              "type": "optional<string>",
            },
            "message": {
              "docs": "A short description of the error. 

For \`too_many_sessions\` errors, the description is:
  
  - \`Impossible to login, a session is already opened with the institution for these credentials\`.",
              "type": "optional<string>",
            },
            "request_id": {
              "docs": "A 32-character unique ID of the request (matching a regex pattern of: \`[a-f0-9]{32}\`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
              "type": "optional<string>",
            },
          },
        },
        "Transaction": {
          "docs": undefined,
          "properties": {
            "account": {
              "docs": undefined,
              "type": "Account",
            },
            "accounting_date": {
              "docs": "The ISO timestamp when the transaction was processed and accounted for by the institution.",
              "type": "optional<string>",
            },
            "amount": {
              "docs": "The transaction amount.
ℹ️ The amount displayed is always positive as we indicate the direction of the transaction in the \`type\` parameter.
",
              "type": "optional<double>",
            },
            "balance": {
              "docs": "The balance at the end of the transaction.",
              "type": "optional<double>",
            },
            "category": {
              "docs": undefined,
              "type": "EnumTransactionCategory",
            },
            "collected_at": {
              "docs": "The ISO-8601 timestamp when the data point was collected.",
              "type": "optional<string>",
            },
            "created_at": {
              "docs": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
              "type": "optional<string>",
            },
            "credit_card_data": {
              "docs": undefined,
              "type": "optional<TransactionCreditCardData>",
            },
            "currency": {
              "docs": "The three-letter currency code (ISO-4217).
",
              "type": "optional<string>",
            },
            "description": {
              "docs": "The description of transaction provided by the institution. Usually this is the text that the end user sees in the online platform.",
              "type": "optional<string>",
            },
            "id": {
              "docs": "Belvo's unique ID for the transaction.",
              "type": "optional<string>",
            },
            "internal_identification": {
              "docs": "The institution's internal identification for the transaction.
",
              "type": "optional<string>",
            },
            "merchant": {
              "docs": undefined,
              "type": "TransactionMerchantData",
            },
            "observations": {
              "docs": "Additional observations provided by the institution on the transaction.",
              "type": "optional<string>",
            },
            "reference": {
              "docs": "The reference number of the transaction, provided by the bank.",
              "type": "optional<string>",
            },
            "status": {
              "docs": undefined,
              "type": "EnumTransactionStatus",
            },
            "subcategory": {
              "docs": undefined,
              "type": "optional<EnumTransactionSubcategory>",
            },
            "type": {
              "docs": undefined,
              "type": "EnumTransactionType",
            },
            "value_date": {
              "docs": "The date when the transaction occurred, in \`YYYY-MM-DD\` format.",
              "type": "optional<string>",
            },
          },
        },
        "TransactionBankAccountBodyPse": {
          "docs": "Information about the payer's bank account. Belvo returns the bank account ID when the account is already saved in the Belvo database.",
          "properties": {
            "bank_account": {
              "docs": "Belvo's unique identifier for the payer’s bank account.",
              "type": "optional<string>",
            },
          },
        },
        "TransactionBankAccountOfpi": {
          "docs": "Object containing the payer's bank account information. For OFPI, this field will return an empty object.",
          "type": "map<string, unknown>",
        },
        "TransactionBankAccountPse": {
          "discriminated": false,
          "docs": "Object containing the payer's bank account information.",
          "union": [
            {
              "docs": undefined,
              "type": "TransactionBankAccountBodyPse",
            },
            {
              "docs": undefined,
              "type": "BankAccountInformationPse",
            },
          ],
        },
        "TransactionCreditCardData": {
          "docs": undefined,
          "properties": {
            "bill_amount": {
              "docs": "The aggregate bill amount, as of \`collected_at\`.",
              "type": "optional<double>",
            },
            "bill_name": {
              "docs": "The title of the monthly credit card bill the transaction belongs to. The format of the returned value is institution specific, however, some common examples are:

- diciembre-2021
- dec-2021
- dec-21
",
              "type": "optional<string>",
            },
            "bill_status": {
              "docs": undefined,
              "type": "optional<EnumTransactionBillStatus>",
            },
            "collected_at": {
              "docs": "The ISO-8601 timestamp when the data point was collected.",
              "type": "optional<string>",
            },
            "previous_bill_total": {
              "docs": "The total amount of the previous month's bill, if available.",
              "type": "optional<string>",
            },
          },
        },
        "TransactionMerchantData": {
          "docs": undefined,
          "properties": {
            "logo": {
              "docs": "The URL to the merchant's logo.",
              "type": "optional<string>",
            },
            "merchant_name": {
              "docs": "The name of the merchant.",
              "type": "optional<string>",
            },
            "website": {
              "docs": "The URL to the merchant's website.",
              "type": "optional<string>",
            },
          },
        },
        "TransactionsPaginatedResponse": {
          "docs": undefined,
          "properties": {
            "count": {
              "docs": "The total number of results in your Belvo account.",
              "type": "optional<integer>",
            },
            "next": {
              "docs": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is \`null\`.

In our documentation example, we use \`{endpoint}\` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, \`accounts\` or \`owners\`).
",
              "type": "optional<string>",
            },
            "previous": {
              "docs": "The URL to the previous page of results. If there is no previous page, the value is \`null\`.",
              "type": "optional<string>",
            },
            "results": {
              "docs": "Array of transaction objects.",
              "type": "optional<list<Transaction>>",
            },
          },
        },
        "TransactionsRequest": {
          "docs": undefined,
          "properties": {
            "account": {
              "docs": "If provided, we return transactions only from this account.",
              "type": "optional<string>",
            },
            "date_from": {
              "docs": "The date from which you want to start getting transactions for, in \`YYYY-MM-DD\` format.

⚠️ The value of \`date_from\` cannot be greater than \`date_to\`.",
              "type": "string",
            },
            "date_to": {
              "docs": "The date you want to stop getting transactions for, in \`YYYY-MM-DD\` format.

⚠️ The value of \`date_to\` cannot be greater than today's date (in other words, no future dates).",
              "type": "string",
            },
            "link": {
              "docs": "The \`link.id\` that you want to get information for.",
              "type": "string",
            },
            "save_data": {
              "docs": "Indicates whether or not to persist the data in Belvo. By default, this is set to \`true\` and we return a 201 Created response.
When set to \`false\`, the data won't be persisted and we return a 200 OK response.",
              "type": "optional<boolean>",
            },
            "token": {
              "docs": "The OTP token generated by the bank.",
              "type": "optional<string>",
            },
          },
        },
        "UnauthorizedErrorBody": {
          "docs": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
          "properties": {
            "code": {
              "docs": "A unique error code (\`authentication_failed\`) that allows you to classify and handle the error programmatically.

ℹ️ Check our DevPortal for more information on how to handle <a href="https://developers.belvo.com/docs/belvo-api-errors#401-authentication_failed" target="_blank">401 authentication_failed errors</a>.",
              "type": "optional<string>",
            },
            "message": {
              "docs": "A short description of the error. 

For \`authentication_failed\` errors, the description is:

  - \`Invalid Secret Keys\`.",
              "type": "optional<string>",
            },
            "request_id": {
              "docs": "A 32-character unique ID of the request (matching a regex pattern of: \`[a-f0-9]{32}\`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
              "type": "optional<string>",
            },
          },
        },
        "UnconfirmedLinkError": {
          "docs": "This error occurs when you try to access a link that was paused previously (and as such is not active now).
A Link's status is set to \`unconfirmed_link\` when your user has not completed the Link creation process successfully (for example, they might not provide a valid MFA token).",
          "properties": {
            "code": {
              "docs": "A unique error code (\`unconfirmed_link\`) that allows you to classify and handle the error programmatically.

ℹ️ Check our DevPortal for more information on how to handle <a href="https://developers.belvo.com/docs/belvo-api-errors#400-unconfirmed_link" target="_blank">400 unconfirmed_link errors</a>.",
              "type": "optional<string>",
            },
            "message": {
              "docs": "A short description of the error. 

For \`unconfirmed_link\` errors, the description is:
  
  - \`The link creation has not been completed yet\`.",
              "type": "optional<string>",
            },
            "request_id": {
              "docs": "A 32-character unique ID of the request (matching a regex pattern of: \`[a-f0-9]{32}\`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
              "type": "optional<string>",
            },
          },
        },
        "UnexpectedError": {
          "docs": "This error occurs when we (Belvo) have encountered an internal system error (sorry about that) or due to an unsupported response from the institution.",
          "properties": {
            "code": {
              "docs": "A unique error code (\`unexpected_error\`) that allows you to classify and handle the error programmatically.

ℹ️ Check our DevPortal for more information on how to handle <a href="https://developers.belvo.com/docs/belvo-api-errors#500-unexpected_error" target="_blank">500 unexpected_error errors</a>.",
              "type": "optional<string>",
            },
            "message": {
              "docs": "A short description of the error. 

For \`unexpected_error\` errors, the description is:
  
  - \`Belvo is unable to process the request due to an internal system issue or to an unsupported response from an institution\`.",
              "type": "optional<string>",
            },
            "request_id": {
              "docs": "A 32-character unique ID of the request (matching a regex pattern of: \`[a-f0-9]{32}\`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
              "type": "optional<string>",
            },
          },
        },
        "UnsupportedOperationError": {
          "docs": "This error occurs when you try to access some data operation that Belvo does not support for an institution. For example, trying to access the Balances resource for fiscal institutions.",
          "properties": {
            "code": {
              "docs": "A unique error code (\`unsupported_operation\`) that allows you to classify and handle the error programmatically.

ℹ️ Check our DevPortal for more information on how to handle <a href="https://developers.belvo.com/docs/belvo-api-errors#400-unsupported_operation" target="_blank">400 unsupported_operation errors</a>.",
              "type": "optional<string>",
            },
            "message": {
              "docs": "A short description of the error. 

For \`unsupported_operation\` errors, the description is:
  
  - \`The resource you are trying to access is not supported by this institution\`.",
              "type": "optional<string>",
            },
            "request_id": {
              "docs": "A 32-character unique ID of the request (matching a regex pattern of: \`[a-f0-9]{32}\`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
              "type": "optional<string>",
            },
          },
        },
        "ValidationError": {
          "docs": "This error occurs when you try to resume a request session that has already expired. This is usually because the user took too long to provide their authentication token.",
          "properties": {
            "code": {
              "docs": "A unique error code (\`null\`, \`does_not_exist\`, \`required\`) that allows you to classify and handle the error programmatically.

ℹ️ Check our DevPortal for more information on how to handle:
  - <a href="https://developers.belvo.com/docs/belvo-api-errors#400-blank" target="_blank">400 blank errors</a>
  - <a href="https://developers.belvo.com/docs/belvo-api-errors#400-null" target="_blank">400 null errors</a>
  - <a href="https://developers.belvo.com/docs/belvo-api-errors#400-does_not_exist" target="_blank">400 does_not_exist errors</a>
  - <a href="https://developers.belvo.com/docs/belvo-api-errors#400-required" target="_blank">400 required errors</a>",
              "type": "optional<string>",
            },
            "field": {
              "docs": "Name of the field where the error was encountered.",
              "type": "optional<string>",
            },
            "message": {
              "docs": "A short description of the error. 

For \`session_expired\` errors, the description can be (among others):
  
  - \`This field is required.\`
  - \`Object with name=narnia does not exist.\`
  - \`This field may not be null.\`
  - \`This field may not be blank.\`",
              "type": "optional<string>",
            },
            "request_id": {
              "docs": "A 32-character unique ID of the request (matching a regex pattern of: \`[a-f0-9]{32}\`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
              "type": "optional<string>",
            },
          },
        },
      },
    },
    "accounts.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "DestroyAccount": {
            "auth": true,
            "docs": "Delete a specific account and all associated transactions, as well as owners, from your Belvo account.",
            "errors": [
              "root.UnauthorizedError",
              "root.NotFoundError",
            ],
            "method": "DELETE",
            "path": "/api/accounts/{id}",
            "path-parameters": {
              "id": {
                "docs": "The \`account.id\` you want to delete",
                "type": "string",
              },
            },
          },
          "DetailAccount": {
            "auth": true,
            "docs": "Get the details of a specific account.

  > 🚧 Scheduled field deprecation
  >
  > Please note that we will soon be deprecating the following fields in our \`loan_data\` object:
  > - \`cutting_date\`
  > - \`cutting_day\`
  > - \`credit_limit\`: replaced by the \`principal\` field.
  > - \`interest_rate\`: replaced by the \`interest_rates\` object.
  > - \`last_payment_date\`
  > - \`last_period_balance\`: replaced by the \`outstanding_balance \` field.
  > - \`limit_day\`
  > - \`limit_date\`: replaced by the \`payment_day \` field.
  > - \`no_interest_payment\`
  > - \`payment_due_day\`",
            "errors": [
              "root.UnauthorizedError",
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/api/accounts/{id}",
            "path-parameters": {
              "id": {
                "docs": "The \`account.id\` you want to get detailed information about.",
                "type": "string",
              },
            },
            "request": {
              "name": "DetailAccountRequest",
              "query-parameters": {
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.Account",
            },
          },
          "ListAccounts": {
            "auth": true,
            "docs": "Get a paginated list of all existing accounts in your Belvo account. By default, we return up to 100 results per page.",
            "errors": [
              "root.UnauthorizedError",
            ],
            "method": "GET",
            "path": "/api/accounts",
            "request": {
              "name": "ListAccountsRequest",
              "query-parameters": {
                "balance__available": {
                  "allow-multiple": undefined,
                  "docs": "Return accounts that have a \`balance.available\` matching exactly this value.",
                  "type": "optional<string>",
                },
                "balance__available__gt": {
                  "allow-multiple": undefined,
                  "docs": "Return accounts that have a \`balance.available\` greater than this value.",
                  "type": "optional<string>",
                },
                "balance__available__gte": {
                  "allow-multiple": undefined,
                  "docs": "Return accounts that have a \`balance.available\` greater than or equal to this value.",
                  "type": "optional<string>",
                },
                "balance__available__lt": {
                  "allow-multiple": undefined,
                  "docs": "Return accounts that have a \`balance.available\` less than this value.",
                  "type": "optional<string>",
                },
                "balance__available__lte": {
                  "allow-multiple": undefined,
                  "docs": "Return accounts that have a \`balance.available\` less than or equal to this value.",
                  "type": "optional<string>",
                },
                "balance__available__range": {
                  "allow-multiple": undefined,
                  "docs": "Return accounts that have a \`balance.available\` within a range of two values.",
                  "type": "optional<string>",
                },
                "balance__current": {
                  "allow-multiple": undefined,
                  "docs": "Return accounts that have a \`balance.current\` matching exactly this value.",
                  "type": "optional<string>",
                },
                "balance__current__gt": {
                  "allow-multiple": undefined,
                  "docs": "Return accounts that have a \`balance.current\` greater than this value.",
                  "type": "optional<string>",
                },
                "balance__current__gte": {
                  "allow-multiple": undefined,
                  "docs": "Return accounts that have a \`balance.available\` greater than or equal to this value.",
                  "type": "optional<string>",
                },
                "balance__current__lt": {
                  "allow-multiple": undefined,
                  "docs": "Return accounts that have a \`balance.current\` less than this value.",
                  "type": "optional<string>",
                },
                "balance__current__lte": {
                  "allow-multiple": undefined,
                  "docs": "Return accounts that have a \`balance.available\` less than or equal to this value.",
                  "type": "optional<string>",
                },
                "balance__current__range": {
                  "allow-multiple": undefined,
                  "docs": "Return accounts that have a \`balance.available\` within a range of two values.",
                  "type": "optional<string>",
                },
                "category": {
                  "allow-multiple": undefined,
                  "docs": "Return accounts only for the given category (for example, \`CHECKING_ACCOUNT\` and \`SAVINGS_ACCOUNT\`).",
                  "type": "optional<string>",
                },
                "category__in": {
                  "allow-multiple": undefined,
                  "docs": "Return accounts only for the given categories (for example, \`CHECKING_ACCOUNT\` and \`SAVINGS_ACCOUNT\`).",
                  "type": "optional<string>",
                },
                "created_at__gt": {
                  "allow-multiple": undefined,
                  "docs": "Return accounts that were last updated in Belvo's database after this date (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "created_at__gte": {
                  "allow-multiple": undefined,
                  "docs": "Return accounts that were last updated in Belvo's database after or on this date (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "created_at__lt": {
                  "allow-multiple": undefined,
                  "docs": "Return accounts that were last updated in Belvo's database before this date (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "created_at__lte": {
                  "allow-multiple": undefined,
                  "docs": "Return accounts that were last updated in Belvo's database before or on this date (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "created_at__range": {
                  "allow-multiple": undefined,
                  "docs": "Return accounts that were last updated in Belvo's database between two dates (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "currency": {
                  "allow-multiple": undefined,
                  "docs": "Return accounts that hold finances in only this three-letter currency code.",
                  "type": "optional<string>",
                },
                "currency__in": {
                  "allow-multiple": undefined,
                  "docs": "Return accounts that hold finances in one of these three-letter currency codes.",
                  "type": "optional<string>",
                },
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "id": {
                  "allow-multiple": undefined,
                  "docs": "Return information only for this \`account.id\`.",
                  "type": "optional<string>",
                },
                "id__in": {
                  "allow-multiple": undefined,
                  "docs": "Return information for these \`account.id\`s.",
                  "type": "optional<string>",
                },
                "institution": {
                  "allow-multiple": undefined,
                  "docs": "Return accounts only for this institution (use the Belvo-designated name, such as \`erebor_mx_retail\`).",
                  "type": "optional<string>",
                },
                "institution__in": {
                  "allow-multiple": undefined,
                  "docs": "Return accounts only for these institutions (use the Belvo-designated names, such as \`erebor_mx_retail\` and \`gringotts_mx_retail\`).",
                  "type": "optional<string>",
                },
                "link": {
                  "allow-multiple": undefined,
                  "docs": "The \`link.id\` you want to filter by.

ℹ️ We highly recommend adding the \`link.id\` filter in order to improve your performance.
",
                  "type": "optional<string>",
                },
                "link__in": {
                  "allow-multiple": undefined,
                  "docs": "Return accounts only for these \`link.id\`s.",
                  "type": "optional<string>",
                },
                "name": {
                  "allow-multiple": undefined,
                  "docs": "Return accounts with exactly this internal (specified by the institution) name.",
                  "type": "optional<string>",
                },
                "name__icontains": {
                  "allow-multiple": undefined,
                  "docs": "Return accounts partially matching this internal (specified by the institution) name.",
                  "type": "optional<string>",
                },
                "number": {
                  "allow-multiple": undefined,
                  "docs": "Return information only for this account number (as specified by the institution).",
                  "type": "optional<string>",
                },
                "number__in": {
                  "allow-multiple": undefined,
                  "docs": "Return information for these account numbers (as specified by the institution).",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "page": {
                  "allow-multiple": undefined,
                  "docs": "A page number within the paginated result set.",
                  "type": "optional<integer>",
                },
                "page_size": {
                  "allow-multiple": undefined,
                  "docs": "Indicates how many results to return per page. By default we return 100 results per page. 

ℹ️ The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).
",
                  "type": "optional<integer>",
                },
                "public_identification_name": {
                  "allow-multiple": undefined,
                  "docs": "Return information only for this type of account ID. For example, CLABE accounts.",
                  "type": "optional<string>",
                },
                "public_identification_value": {
                  "allow-multiple": undefined,
                  "docs": "Return information only for this account ID. For example, the account number for a CLABE account.",
                  "type": "optional<string>",
                },
                "type": {
                  "allow-multiple": undefined,
                  "docs": "Return information only for accounts matching this account type, as designated by the institution.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.AccountsPaginatedResponse",
            },
          },
          "PatchAccounts": {
            "auth": true,
            "docs": "Used to resume an Account retrieve session that was paused because an MFA token was required by the institution.

  > 🚧 Scheduled field deprecation
  > 
  > Please note that we will soon be deprecating the following fields in our \`loan_data\` object:
  > - \`cutting_date\`
  > - \`cutting_day\`
  > - \`credit_limit\`: replaced by the \`principal\` field.
  > - \`interest_rate\`: replaced by the \`interest_rates\` object.
  > - \`last_payment_date\`
  > - \`last_period_balance\`: replaced by the \`outstanding_balance \` field.
  > - \`limit_day\`
  > - \`limit_date\`: replaced by the \`payment_day \` field.
  > - \`no_interest_payment\`
  > - \`payment_due_day\`",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.RequestTimeoutError",
              "root.PreconditionError",
              "root.InternalServerError",
            ],
            "method": "PATCH",
            "path": "/api/accounts",
            "request": {
              "body": {
                "docs": "A JSON object containing a session UUID and a MFA token",
                "type": "root.PatchBody",
              },
              "name": "PatchAccountsRequest",
              "query-parameters": {
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok (when \`save_data=false\`)",
              "type": "list<root.Account>",
            },
          },
          "RetrieveAccounts": {
            "auth": true,
            "docs": "Retrieve accounts from an existing link.

  > 🚧 Scheduled field deprecation
  > 
  > Please note that we will soon be deprecating the following fields in our \`loan_data\` object:
  > - \`cutting_date\`
  > - \`cutting_day\`
  > - \`credit_limit\`: replaced by the \`principal\` field.
  > - \`interest_rate\`: replaced by the \`interest_rates\` object.
  > - \`last_payment_date\`
  > - \`last_period_balance\`: replaced by the \`outstanding_balance \` field.
  > - \`limit_day\`
  > - \`limit_date\`: replaced by the \`payment_day \` field.
  > - \`no_interest_payment\`
  > - \`payment_due_day\`",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.RequestTimeoutError",
              "root.PreconditionError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/api/accounts",
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.StandardRequest",
              },
              "name": "RetrieveAccountsRequest",
              "query-parameters": {
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok (when \`save_data=false\`)",
              "type": "list<root.Account>",
            },
          },
        },
      },
    },
    "balances.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "DestroyBalance": {
            "auth": true,
            "docs": "Delete a specific balance from your Belvo account.",
            "errors": [
              "root.UnauthorizedError",
              "root.NotFoundError",
            ],
            "method": "DELETE",
            "path": "/api/balances/{id}",
            "path-parameters": {
              "id": {
                "docs": "The \`balance.id\` that you want to delete.",
                "type": "string",
              },
            },
          },
          "DetailBalance": {
            "auth": true,
            "docs": "Get the details of a specific balance.",
            "errors": [
              "root.UnauthorizedError",
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/api/balances/{id}",
            "path-parameters": {
              "id": {
                "docs": "The \`balance.id\` you want to get detailed information about.",
                "type": "string",
              },
            },
            "request": {
              "name": "DetailBalanceRequest",
              "query-parameters": {
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.Balance",
            },
          },
          "ListBalances": {
            "auth": true,
            "docs": "Get a paginated list of all existing balances in your Belvo account. By default, we return up to 100 results per page.",
            "errors": [
              "root.UnauthorizedError",
            ],
            "method": "GET",
            "path": "/api/balances",
            "request": {
              "name": "ListBalancesRequest",
              "query-parameters": {
                "account": {
                  "allow-multiple": undefined,
                  "docs": "The \`account.id\` you want to filter by.

ℹ️ We highly recommend adding either the \`link.id\` or the \`account.id\` filters in order to improve your performance.
",
                  "type": "optional<string>",
                },
                "account__in": {
                  "allow-multiple": undefined,
                  "docs": "Return balances only for these \`account.id\`s.",
                  "type": "optional<string>",
                },
                "account__type": {
                  "allow-multiple": undefined,
                  "docs": "Return information only for accounts matching this account type, as designated by the institution.",
                  "type": "optional<string>",
                },
                "account__type__in": {
                  "allow-multiple": undefined,
                  "docs": "Return information only for accounts matching these account types, as designated by the institution.",
                  "type": "optional<string>",
                },
                "balance": {
                  "allow-multiple": undefined,
                  "docs": "Return balances matching exactly this value.",
                  "type": "optional<string>",
                },
                "balance__gt": {
                  "allow-multiple": undefined,
                  "docs": "Return balances greater than this value.",
                  "type": "optional<string>",
                },
                "balance__gte": {
                  "allow-multiple": undefined,
                  "docs": "Return balances greater than or equal to this value.",
                  "type": "optional<string>",
                },
                "balance__lt": {
                  "allow-multiple": undefined,
                  "docs": "Return balances less than this value.",
                  "type": "optional<string>",
                },
                "balance__lte": {
                  "allow-multiple": undefined,
                  "docs": "Return balances less than or equal to this value.",
                  "type": "optional<string>",
                },
                "balance__range": {
                  "allow-multiple": undefined,
                  "docs": "Return balances between these two values.",
                  "type": "optional<string>",
                },
                "currency": {
                  "allow-multiple": undefined,
                  "docs": "Return balances that are in this three-letter currency code.",
                  "type": "optional<string>",
                },
                "currency__in": {
                  "allow-multiple": undefined,
                  "docs": "Return balances that are in these three-letter currency codes.",
                  "type": "optional<string>",
                },
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "id": {
                  "allow-multiple": undefined,
                  "docs": "Return information only for this \`balance.id\`.",
                  "type": "optional<string>",
                },
                "id__in": {
                  "allow-multiple": undefined,
                  "docs": "Return information only for these \`balance.id\`s.",
                  "type": "optional<string>",
                },
                "institution": {
                  "allow-multiple": undefined,
                  "docs": "Return balances only for this institution (use the Belvo-designated name, such as \`erebor_mx_retail\`).",
                  "type": "optional<string>",
                },
                "institution__in": {
                  "allow-multiple": undefined,
                  "docs": "Return balances only for these institutions (use the Belvo-designated names, such as \`erebor_mx_retail\` and \`gringotts_mx_retail\`).",
                  "type": "optional<string>",
                },
                "link": {
                  "allow-multiple": undefined,
                  "docs": "The \`link.id\` you want to filter by.

ℹ️ We highly recommend adding either the \`link.id\` or the \`account.id\` filters in order to improve your performance.
",
                  "type": "optional<string>",
                },
                "link__in": {
                  "allow-multiple": undefined,
                  "docs": "Return balances only for these \`link.id\`s.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "page": {
                  "allow-multiple": undefined,
                  "docs": "A page number within the paginated result set.",
                  "type": "optional<integer>",
                },
                "page_size": {
                  "allow-multiple": undefined,
                  "docs": "Indicates how many results to return per page. By default we return 100 results per page. 

ℹ️ The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).
",
                  "type": "optional<integer>",
                },
                "value_date": {
                  "allow-multiple": undefined,
                  "docs": "Return balances for exactly this date (\`YYYY-MM-DD\` or full ISO-8601 timestamp).",
                  "type": "optional<string>",
                },
                "value_date__gt": {
                  "allow-multiple": undefined,
                  "docs": "Return balances for after this date (\`YYYY-MM-DD\` or full ISO-8601 timestamp).",
                  "type": "optional<string>",
                },
                "value_date__gte": {
                  "allow-multiple": undefined,
                  "docs": "Return balances for this date or later (\`YYYY-MM-DD\` or full ISO-8601 timestamp).",
                  "type": "optional<string>",
                },
                "value_date__lt": {
                  "allow-multiple": undefined,
                  "docs": "Return balances for before this date (\`YYYY-MM-DD\` or full ISO-8601 timestamp).",
                  "type": "optional<string>",
                },
                "value_date__lte": {
                  "allow-multiple": undefined,
                  "docs": "Return balances for this date or earlier (\`YYYY-MM-DD\` or full ISO-8601 timestamp).",
                  "type": "optional<string>",
                },
                "value_date__range": {
                  "allow-multiple": undefined,
                  "docs": "Return balances for this date range (\`YYYY-MM-DD\` or full ISO-8601 timestamp).",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.BalancesPaginatedResponse",
            },
          },
          "PatchBalances": {
            "auth": true,
            "docs": "Used to resume a Balance retrieve session that was paused because an MFA token was required by the institution.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.RequestTimeoutError",
              "root.PreconditionError",
              "root.InternalServerError",
            ],
            "method": "PATCH",
            "path": "/api/balances",
            "request": {
              "body": {
                "docs": "A JSON object containing a session UUID and a MFA token",
                "type": "root.PatchBody",
              },
              "name": "PatchBalancesRequest",
              "query-parameters": {
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok (when \`save_data=false\`)",
              "type": "list<root.Balance>",
            },
          },
          "RetrieveBalances": {
            "auth": true,
            "docs": "Retrieve balances from one or more accounts for a specific link within a specified date range.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.RequestTimeoutError",
              "root.PreconditionError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/api/balances",
            "request": {
              "body": {
                "properties": {
                  "account": {
                    "docs": "If provided, only balances matching this \`account.id\` are returned.",
                    "type": "optional<string>",
                  },
                  "date_from": {
                    "docs": "Date from which you want to start receiving balances, in \`YYYY-MM-DD\` format.

⚠️ The value of \`date_from\` cannot be greater than \`date_to\`.",
                    "type": "string",
                  },
                  "date_to": {
                    "docs": "Date that you want to stop receiving balances, in \`YYYY-MM-DD\` format.

⚠️ The value of \`date_to\` cannot be greater than today's date (in other words, no future dates).",
                    "type": "string",
                  },
                  "link": {
                    "docs": "The \`link.id\` that you want to get information for.",
                    "type": "string",
                  },
                  "save_data": {
                    "docs": "Indicates whether or not to persist the data in Belvo. By default, this is set to \`true\` and we return a 201 Created response.
When set to \`false\`, the data won't be persisted and we return a 200 OK response.",
                    "type": "optional<boolean>",
                  },
                  "token": {
                    "docs": "The OTP token generated by the bank.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "BalancesRequest",
              "query-parameters": {
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok (when \`save_data=false\`)",
              "type": "list<root.Balance>",
            },
          },
        },
      },
    },
    "bankAccounts.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "CreateBankAccount": {
            "auth": true,
            "docs": "Create a new bank account from which to send or request funds.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.RequestTimeoutError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/payments/bank-accounts",
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.CreateBankAccountRequest",
              },
            },
            "response": {
              "docs": "OK (Created)",
              "type": "root.CreateBankAccountResponse",
            },
          },
          "DetailBankAccount": {
            "auth": true,
            "docs": "Get the details about a specific bank account",
            "errors": [
              "root.UnauthorizedError",
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/payments/bank-accounts/{id}",
            "path-parameters": {
              "id": {
                "docs": "The \`bank-account.id\` you want to get detailed information about.",
                "type": "string",
              },
            },
            "response": {
              "docs": "OK",
              "type": "root.DetailBankAccountResponse",
            },
          },
          "ListBankAccount": {
            "auth": true,
            "docs": "List all bank accounts associated with your Belvo account.",
            "errors": [
              "root.UnauthorizedError",
            ],
            "method": "GET",
            "path": "/payments/bank-accounts",
            "request": {
              "name": "ListBankAccountRequest",
              "query-parameters": {
                "created_at": {
                  "allow-multiple": undefined,
                  "docs": "Return results only for this date (in \`YYYY-MM-DD\` format).",
                  "type": "optional<string>",
                },
                "created_at__gt": {
                  "allow-multiple": undefined,
                  "docs": "Return results only after this date (in \`YYYY-MM-DD\` format).",
                  "type": "optional<string>",
                },
                "created_at__gte": {
                  "allow-multiple": undefined,
                  "docs": "Return results only for this date and after (in \`YYYY-MM-DD\` format).",
                  "type": "optional<string>",
                },
                "created_at__lt": {
                  "allow-multiple": undefined,
                  "docs": "Return results only before this date (in \`YYYY-MM-DD\` format).",
                  "type": "optional<string>",
                },
                "created_at__lte": {
                  "allow-multiple": undefined,
                  "docs": "Return results only for this date and before (in \`YYYY-MM-DD\` format).",
                  "type": "optional<string>",
                },
                "created_at__range": {
                  "allow-multiple": undefined,
                  "docs": "Return results between this date range (in \`YYYY-MM-DD\` format).",
                  "type": "optional<string>",
                },
                "customer": {
                  "allow-multiple": undefined,
                  "docs": "The \`customer.id\` you want to get results for.",
                  "type": "optional<string>",
                },
                "holder__type": {
                  "allow-multiple": undefined,
                  "docs": "Return results for a matched value type.",
                  "type": "optional<string>",
                },
                "holder__type__in": {
                  "allow-multiple": undefined,
                  "docs": "Return results for listed holder types.",
                  "type": "optional<string>",
                },
                "id__in": {
                  "allow-multiple": undefined,
                  "docs": "One or more \`bank-account.id\`s (comma separated) that you want to get results for.",
                  "type": "optional<string>",
                },
                "institution": {
                  "allow-multiple": undefined,
                  "docs": "The \`institution.id\` you want to get results for.",
                  "type": "optional<string>",
                },
                "number": {
                  "allow-multiple": undefined,
                  "docs": "Return results that exactly match a value.",
                  "type": "optional<string>",
                },
                "number__in": {
                  "allow-multiple": undefined,
                  "docs": "Return results for listed numbers.",
                  "type": "optional<string>",
                },
                "page": {
                  "allow-multiple": undefined,
                  "docs": "A page number within the paginated result set.",
                  "type": "optional<integer>",
                },
                "providers": {
                  "allow-multiple": undefined,
                  "docs": "Return results only for this value.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "OK",
              "type": "root.BankAccountPaginatedResponse",
            },
          },
        },
      },
    },
    "categorization.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "CategorizeTransactions": {
            "auth": true,
            "docs": "Send through your raw transaction data and receive enriched information for each of your transactions.

<div style="background-color:#f4f6f8; border-left: 6px solid #5bc0de;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right: 25px">
<strong>Note: </strong> Belvo can process up to 10,000 unique transactions per request.
</div>",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/api/categorization",
            "request": {
              "body": {
                "properties": {
                  "language": {
                    "docs": "Two-letter ISO 639-1 code for the language of the transaction.",
                    "type": "string",
                  },
                  "transactions": {
                    "docs": "An array of transaction objects that you want categorized.

**Note:** Each object corresponds to one, unique transaction and you can send through up to 10,000 transactions per request.",
                    "type": "list<root.CategorizationBodyRequest>",
                  },
                },
              },
              "headers": undefined,
              "name": "CategorizationRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Ok",
              "type": "root.Categorization",
            },
          },
        },
      },
    },
    "customers.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "CreateCustomer": {
            "auth": true,
            "docs": "Create a new customer to send or request funds.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/payments/customers",
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.CreateCustomerRequest",
              },
            },
            "response": {
              "docs": "OK (Created)",
              "type": "root.CreateCustomerResponse",
            },
          },
          "DetailCustomer": {
            "auth": true,
            "docs": "Get the details about a specific customer",
            "errors": [
              "root.UnauthorizedError",
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/payments/customers/{id}",
            "path-parameters": {
              "id": {
                "docs": "The \`customer.id\` you want to get detailed information about.",
                "type": "string",
              },
            },
            "response": {
              "docs": "OK",
              "type": "root.DetailCustomerResponse",
            },
          },
          "ListCustomers": {
            "auth": true,
            "docs": "List all customers associated with your Belvo account.",
            "errors": [
              "root.UnauthorizedError",
            ],
            "method": "GET",
            "path": "/payments/customers",
            "request": {
              "name": "ListCustomersRequest",
              "query-parameters": {
                "created_at": {
                  "allow-multiple": undefined,
                  "docs": "Return results only for this date (in \`YYYY-MM-DD\` format).",
                  "type": "optional<string>",
                },
                "created_at__gt": {
                  "allow-multiple": undefined,
                  "docs": "Return results only after this date (in \`YYYY-MM-DD\` format).",
                  "type": "optional<string>",
                },
                "created_at__gte": {
                  "allow-multiple": undefined,
                  "docs": "Return results only for this date and after (in \`YYYY-MM-DD\` format).",
                  "type": "optional<string>",
                },
                "created_at__lt": {
                  "allow-multiple": undefined,
                  "docs": "Return results only before this date (in \`YYYY-MM-DD\` format).",
                  "type": "optional<string>",
                },
                "created_at__lte": {
                  "allow-multiple": undefined,
                  "docs": "Return results only for this date and before (in \`YYYY-MM-DD\` format).",
                  "type": "optional<string>",
                },
                "created_at__range": {
                  "allow-multiple": undefined,
                  "docs": "Return results between this date range (in \`YYYY-MM-DD\` format).",
                  "type": "optional<string>",
                },
                "customer__type": {
                  "allow-multiple": undefined,
                  "docs": "Return results only for this customer type (either \`INDIVIDUAL\` or \`BUSINESS\`).",
                  "type": "optional<string>",
                },
                "id__in": {
                  "allow-multiple": undefined,
                  "docs": "One or more \`customer.id\`s (comma separated) that you want to get results for.",
                  "type": "optional<string>",
                },
                "page": {
                  "allow-multiple": undefined,
                  "docs": "A page number within the paginated result set.",
                  "type": "optional<integer>",
                },
                "search": {
                  "allow-multiple": undefined,
                  "docs": "Return results for one or more customers that match either the name or email you searched for. 

**Note:** This filter supports both full and partial search queries, with a minimum of three characters required. For example, searching for \`car\` may match the following values:

  - \`Carlos Vives\`
  - \`Carmen Domínguez\` 
  - \`carlos.vives@musicacolombia.co\`",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "OK",
              "type": "root.CustomerPaginatedResponse",
            },
          },
        },
      },
    },
    "employmentRecords.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "DestroyEmploymentRecord": {
            "auth": true,
            "docs": "Delete a specific employment record from your Belvo account.",
            "errors": [
              "root.UnauthorizedError",
              "root.NotFoundError",
            ],
            "method": "DELETE",
            "path": "/api/employment-records/{id}",
            "path-parameters": {
              "id": {
                "docs": "The \`employment-record.id\` that you want to delete.",
                "type": "string",
              },
            },
          },
          "DetailEmploymentRecord": {
            "auth": true,
            "docs": "Get the details of a specific employment record.",
            "errors": [
              "root.UnauthorizedError",
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/api/employment-records/{id}",
            "path-parameters": {
              "id": {
                "docs": "The \`employment-record.id\` you want to get detailed information about.",
                "type": "string",
              },
            },
            "request": {
              "name": "DetailEmploymentRecordRequest",
              "query-parameters": {
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.EmploymentRecord",
            },
          },
          "ListEmploymentRecords": {
            "auth": true,
            "docs": "Get a paginated list of all existing employment records in your Belvo account. By default, we return up to 100 results per page.",
            "errors": [
              "root.UnauthorizedError",
            ],
            "method": "GET",
            "path": "/api/employment-records",
            "request": {
              "name": "ListEmploymentRecordsRequest",
              "query-parameters": {
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "page": {
                  "allow-multiple": undefined,
                  "docs": "A page number within the paginated result set.",
                  "type": "optional<integer>",
                },
                "page_size": {
                  "allow-multiple": undefined,
                  "docs": "Indicates how many results to return per page. By default we return 100 results per page. 

ℹ️ The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).
",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.EmploymentRecordsPaginatedResponse",
            },
          },
          "RetrieveEmploymentRecordDetails": {
            "auth": true,
            "docs": "Retrieve employment record details for an individual.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.RequestTimeoutError",
              "root.PreconditionError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/api/employment-records",
            "request": {
              "body": {
                "properties": {
                  "attach_pdf": {
                    "docs": "When set to \`true\`, you will receive the PDF in binary format in the response.",
                    "type": "optional<boolean>",
                  },
                  "link": {
                    "docs": "The \`link.id\` you want to retrieve employment records for.",
                    "type": "string",
                  },
                  "save_data": {
                    "docs": "Indicates whether or not to persist the data in Belvo. By default, this is set to \`true\` and we return a 201 Created response.
When set to \`false\`, the data won't be persisted and we return a 200 OK response.",
                    "type": "optional<boolean>",
                  },
                },
              },
              "headers": undefined,
              "name": "EmploymentRecordRequest",
              "query-parameters": {
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "list<root.EmploymentRecord>",
            },
          },
        },
      },
    },
    "incomeVerification.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "VerifyIncome": {
            "auth": true,
            "docs": "Send through your raw data and receive enriched information for each of your user's income streams.

<div style="background-color:#f4f6f8; border-left: 6px solid #5bc0de;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right: 25px">
<strong>Note: </strong> Belvo can process up to 10,000 unique transactions per request.
</div>",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/api/enrich/incomes",
            "request": {
              "body": {
                "properties": {
                  "allowed_income_types": {
                    "docs": undefined,
                    "type": "optional<list<root.EnumInvoiceAllowedIncomeTypesRequest>>",
                  },
                  "date_from": {
                    "docs": "The date from which you want to start getting incomes for, in \`YYYY-MM-DD\` format, within the last 365 days. When you use this parameter, you must also send \`date_to\`.

⚠️ The value of \`date_from\` cannot be greater than \`date_to\`.",
                    "type": "optional<string>",
                  },
                  "date_to": {
                    "docs": "The date you want to stop getting incomes for, in \`YYYY-MM-DD\` format, within the last 365 days. When you use this parameter, you must also send \`date_from\`.

⚠️ The value of \`date_to\` cannot be greater than today's date (in other words, no future dates).",
                    "type": "optional<string>",
                  },
                  "language": {
                    "docs": "Two-letter ISO 639-1 code for the language of the transaction.",
                    "type": "string",
                  },
                  "minimum_confidence_level": {
                    "docs": undefined,
                    "type": "optional<root.EnumIncomeMinimumConfidenceLevelRequest>",
                  },
                  "transactions": {
                    "docs": "An array of transaction objects that you want enriched.

**Note:** Each object corresponds to one, unique transaction and you can send through up to 10,000 transactions per request.",
                    "type": "list<root.EyodIncomeVerificationBodyRequest>",
                  },
                },
              },
              "headers": undefined,
              "name": "EyodIncomeVerificationRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Ok",
              "type": "list<root.Income>",
            },
          },
        },
      },
    },
    "incomes.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "DestroyIncomes": {
            "auth": true,
            "docs": "Delete a specific income from your Belvo account.",
            "errors": [
              "root.UnauthorizedError",
              "root.NotFoundError",
            ],
            "method": "DELETE",
            "path": "/api/incomes/{id}",
            "path-parameters": {
              "id": {
                "docs": "the \`income.id\` that you want to delete",
                "type": "string",
              },
            },
          },
          "DetailIncome": {
            "auth": true,
            "docs": "Get the details of a specific income.",
            "errors": [
              "root.UnauthorizedError",
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/api/incomes/{id}",
            "path-parameters": {
              "id": {
                "docs": "The \`income.id\` you want to get detailed information about.",
                "type": "string",
              },
            },
            "request": {
              "name": "DetailIncomeRequest",
              "query-parameters": {
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "list<root.Income>",
            },
          },
          "ListIncomes": {
            "auth": true,
            "docs": "Get a paginated list of all incomes in your Belvo account. By default, we return up to 100 results per page.",
            "errors": [
              "root.UnauthorizedError",
            ],
            "method": "GET",
            "path": "/api/incomes",
            "request": {
              "name": "ListIncomesRequest",
              "query-parameters": {
                "account": {
                  "allow-multiple": undefined,
                  "docs": "The \`account.id\` you want to filter by.

ℹ️ We highly recommend adding the \`account.id\` filter in order to improve your performance.
",
                  "type": "optional<string>",
                },
                "account__in": {
                  "allow-multiple": undefined,
                  "docs": "Return incomes for these \`account.id\`s.",
                  "type": "optional<string>",
                },
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "link": {
                  "allow-multiple": undefined,
                  "docs": "The \`link.id\` you want to filter by.

ℹ️ We highly recommend adding either the \`link.id\` or the \`account.id\` filters in order to improve your performance.
",
                  "type": "optional<string>",
                },
                "link__in": {
                  "allow-multiple": undefined,
                  "docs": "Return incomes only for these \`link.id\`s.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "page": {
                  "allow-multiple": undefined,
                  "docs": "A page number within the paginated result set.",
                  "type": "optional<integer>",
                },
                "page_size": {
                  "allow-multiple": undefined,
                  "docs": "Indicates how many results to return per page. By default we return 100 results per page. 

ℹ️ The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).
",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.IncomesPaginatedResponse",
            },
          },
          "PatchIncomes": {
            "auth": true,
            "docs": "Used to resume an Income retrieve session that was paused because an MFA token was required by the institution.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.RequestTimeoutError",
              "root.PreconditionError",
              "root.InternalServerError",
            ],
            "method": "PATCH",
            "path": "/api/incomes",
            "request": {
              "body": {
                "docs": "A JSON object containing a session UUID and a MFA token",
                "type": "root.PatchBody",
              },
              "name": "PatchIncomesRequest",
              "query-parameters": {
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok (when \`save_data=false\`)",
              "type": "list<root.Income>",
            },
          },
          "RetrieveIncome": {
            "auth": true,
            "docs": "Retrieve income insights for <b>checking and savings accounts</b> from a specific link. You can receive insights for a period of up to 365 days, depending on the transaction history available for each [bank](https://developers.belvo.com/docs/institution).",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.RequestTimeoutError",
              "root.PreconditionError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/api/incomes",
            "request": {
              "body": {
                "properties": {
                  "allowed_income_types": {
                    "docs": undefined,
                    "type": "optional<list<root.EnumInvoiceAllowedIncomeTypesRequest>>",
                  },
                  "date_from": {
                    "docs": "The date from which you want to start getting incomes for, in \`YYYY-MM-DD\` format, within the last 365 days. When you use this parameter, you must also send \`date_to\`.

⚠️ You must have at least 90 days between \`date_from\` and \`date_to\`.

⚠️ The value of \`date_from\` cannot be greater than \`date_to\`.",
                    "type": "optional<string>",
                  },
                  "date_to": {
                    "docs": "The date you want to stop getting incomes for, in \`YYYY-MM-DD\` format, within the last 365 days. When you use this parameter, you must also send \`date_from\`.

⚠️ You must have at least 90 days between \`date_from\` and \`date_to\`.

⚠️ The value of \`date_to\` cannot be greater than today's date (in other words, no future dates).",
                    "type": "optional<string>",
                  },
                  "link": {
                    "docs": "The \`link.id\` that you want to get information for.",
                    "type": "string",
                  },
                  "minimum_confidence_level": {
                    "docs": undefined,
                    "type": "optional<root.EnumIncomeMinimumConfidenceLevelRequest>",
                  },
                  "save_data": {
                    "docs": "Indicates whether or not to persist the data in Belvo. By default, this is set to \`true\` and we return a 201 Created response.
When set to \`false\`, the data won't be persisted and we return a 200 OK response.",
                    "type": "optional<boolean>",
                  },
                  "token": {
                    "docs": "The OTP token generated by the bank.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "IncomesRequest",
              "query-parameters": {
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok (when \`save_data=false\`)",
              "type": "root.Income",
            },
          },
        },
      },
    },
    "institutions.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "DetailInstitution": {
            "auth": true,
            "docs": "Get the details of a specific institution.",
            "errors": [
              "root.UnauthorizedError",
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/api/institutions/{id}",
            "path-parameters": {
              "id": {
                "docs": "The \`institution.id\` you want to get detailed information about.",
                "type": "string",
              },
            },
            "request": {
              "name": "DetailInstitutionRequest",
              "query-parameters": {
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.Institution",
            },
          },
          "ListInstitutions": {
            "auth": true,
            "docs": "Get a paginated list of all the institutions currently supported by Belvo. By default, we return up to 100 results per page.",
            "errors": [
              "root.UnauthorizedError",
            ],
            "method": "GET",
            "path": "/api/institutions",
            "request": {
              "name": "ListInstitutionsRequest",
              "query-parameters": {
                "country_code": {
                  "allow-multiple": undefined,
                  "docs": "Return institutions only for this two-letter country code.",
                  "type": "optional<string>",
                },
                "country_code__in": {
                  "allow-multiple": undefined,
                  "docs": "Return institutions only for these two-letter country codes.",
                  "type": "optional<string>",
                },
                "display_name": {
                  "allow-multiple": undefined,
                  "docs": "Return institutions that partially match this display name.",
                  "type": "optional<string>",
                },
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "name": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "name__in": {
                  "allow-multiple": undefined,
                  "docs": "Return institutions with one or more of these Belvo-designated names.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "page": {
                  "allow-multiple": undefined,
                  "docs": "A page number within the paginated result set.",
                  "type": "optional<integer>",
                },
                "page_size": {
                  "allow-multiple": undefined,
                  "docs": "Indicates how many results to return per page. By default we return 100 results per page. 

ℹ️ The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).
",
                  "type": "optional<integer>",
                },
                "resources__allin": {
                  "allow-multiple": undefined,
                  "docs": "Return institutions that support these resources.",
                  "type": "optional<string>",
                },
                "status": {
                  "allow-multiple": undefined,
                  "docs": "Return institutions with the given status. You can choose between \`healthy\` or \`down\`.",
                  "type": "optional<string>",
                },
                "status__in": {
                  "allow-multiple": undefined,
                  "docs": "Return institutions with one of the given statuses. You can choose between \`healthy\` or \`down\`.",
                  "type": "optional<string>",
                },
                "type": {
                  "allow-multiple": undefined,
                  "docs": "Return institutions of this type. You can choose between \`bank\` or \`fiscal\`.",
                  "type": "optional<string>",
                },
                "type__in": {
                  "allow-multiple": undefined,
                  "docs": "Return institutions of one of these types. You can choose between \`bank\` or \`fiscal\`.",
                  "type": "optional<string>",
                },
                "website": {
                  "allow-multiple": undefined,
                  "docs": "Return institutions with this website URL.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.InstitutionsPaginatedResponse",
            },
          },
        },
      },
    },
    "investmentPortfolios.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "DestroyPortfolio": {
            "auth": true,
            "docs": "Delete a specific investment portfolio and all associated instruments, transactions, and owners from your Belvo account.",
            "errors": [
              "root.UnauthorizedError",
              "root.NotFoundError",
            ],
            "method": "DELETE",
            "path": "/investments/portfolios/{id}",
            "path-parameters": {
              "id": {
                "docs": "The \`portfolio.id\` that you want to delete.",
                "type": "string",
              },
            },
          },
          "DetailPortfolio": {
            "auth": true,
            "docs": "Get the details of a specific portfolio.",
            "errors": [
              "root.UnauthorizedError",
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/investments/portfolios/{id}",
            "path-parameters": {
              "id": {
                "docs": "The \`portfolio.id\` you want to get detailed information about.",
                "type": "string",
              },
            },
            "request": {
              "name": "DetailPortfolioRequest",
              "query-parameters": {
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.InvestmentsPortfolio",
            },
          },
          "ListPortfolio": {
            "auth": true,
            "docs": "Get a paginated list of all the existing portfolios (and their instruments) in your Belvo account. By default, we return up to 100 results per page.",
            "errors": [
              "root.UnauthorizedError",
            ],
            "method": "GET",
            "path": "/investments/portfolios",
            "request": {
              "name": "ListPortfolioRequest",
              "query-parameters": {
                "created_at__gt": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "created_at__gte": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "created_at__lt": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "created_at__lte": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "created_at__range": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "link": {
                  "allow-multiple": undefined,
                  "docs": "The \`link.id\` you want to filter by.

ℹ️ We highly recommend adding the \`link.id\` filter in order to improve your performance.
",
                  "type": "optional<string>",
                },
                "link__in": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "page": {
                  "allow-multiple": undefined,
                  "docs": "A page number within the paginated result set.",
                  "type": "optional<integer>",
                },
                "page_size": {
                  "allow-multiple": undefined,
                  "docs": "Indicates how many results to return per page. By default we return 100 results per page. 

ℹ️ The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).
",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.InvestmentsPortfoliosPaginatedResponse",
            },
          },
          "PatchPortfolio": {
            "auth": true,
            "docs": "Used to resume a portfolio retrieve session that was paused because an MFA token was required by the institution.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.PreconditionError",
              "root.InternalServerError",
            ],
            "method": "PATCH",
            "path": "/investments/portfolios",
            "request": {
              "body": {
                "docs": "A JSON object containing a session UUID and a MFA token",
                "type": "root.PatchBodyWithoutSaveData",
              },
              "name": "PatchPortfolioRequest",
              "query-parameters": {
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok (when \`save_data=false\`)",
              "type": "root.InvestmentsPortfolio",
            },
          },
          "RetrievePortfolio": {
            "auth": true,
            "docs": "Retrieve all portfolios for an existing link.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.PreconditionError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/investments/portfolios",
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.StandardRequest",
              },
              "name": "RetrievePortfolioRequest",
              "query-parameters": {
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok (when \`save_data=false\`)",
              "type": "root.InvestmentsPortfolio",
            },
          },
        },
      },
    },
    "invoices.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "DestroyInvoice": {
            "auth": true,
            "docs": "Delete a specific invoice from your Belvo account.",
            "errors": [
              "root.UnauthorizedError",
              "root.NotFoundError",
            ],
            "method": "DELETE",
            "path": "/api/invoices/{id}",
            "path-parameters": {
              "id": {
                "docs": "The \`invoice.id\` that you want to delete.",
                "type": "string",
              },
            },
          },
          "DetailInvoice": {
            "auth": true,
            "docs": "Get the details of a specific invoice.",
            "errors": [
              "root.UnauthorizedError",
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/api/invoices/{id}",
            "path-parameters": {
              "id": {
                "docs": "The \`invoice.id\` you want to get detailed information about.",
                "type": "string",
              },
            },
            "request": {
              "name": "DetailInvoiceRequest",
              "query-parameters": {
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.DetailInvoiceResponse",
            },
          },
          "ListInvoices": {
            "auth": true,
            "docs": "Get a paginated list of all existing invoices in your Belvo account. By default, we return 100 results per page.",
            "errors": [
              "root.UnauthorizedError",
            ],
            "method": "GET",
            "path": "/api/invoices",
            "request": {
              "name": "ListInvoicesRequest",
              "query-parameters": {
                "created_at__gt": {
                  "allow-multiple": undefined,
                  "docs": "Return invoices that were last updated in Belvo's database after this date (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "created_at__gte": {
                  "allow-multiple": undefined,
                  "docs": "Return invoices that were last updated in Belvo's database after or on this date (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "created_at__lt": {
                  "allow-multiple": undefined,
                  "docs": "Return invoices that were last updated in Belvo's database before this date (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "created_at__lte": {
                  "allow-multiple": undefined,
                  "docs": "Return invoices that were last updated in Belvo's database before or on this date (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "created_at__range": {
                  "allow-multiple": undefined,
                  "docs": "Return invoices that were last updated in Belvo's database between two dates (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "id": {
                  "allow-multiple": undefined,
                  "docs": "Return information only for this \`invoice.id\`.",
                  "type": "optional<string>",
                },
                "id__in": {
                  "allow-multiple": undefined,
                  "docs": "Return information only for these \`invoice.id\`s.",
                  "type": "optional<string>",
                },
                "invoice_date": {
                  "allow-multiple": undefined,
                  "docs": "Return invoices issued exactly on this date (\`YYYY-MM-DD\` or full ISO-8601 timestamp).",
                  "type": "optional<string>",
                },
                "invoice_date__gt": {
                  "allow-multiple": undefined,
                  "docs": "Return invoices issued after this date (\`YYYY-MM-DD\` or full ISO-8601 timestamp).",
                  "type": "optional<string>",
                },
                "invoice_date__gte": {
                  "allow-multiple": undefined,
                  "docs": "Return invoices issued on this date or later (\`YYYY-MM-DD\` or full ISO-8601 timestamp).",
                  "type": "optional<string>",
                },
                "invoice_date__lt": {
                  "allow-multiple": undefined,
                  "docs": "Return balances issued before this date (\`YYYY-MM-DD\` or full ISO-8601 timestamp).",
                  "type": "optional<string>",
                },
                "invoice_date__lte": {
                  "allow-multiple": undefined,
                  "docs": "Return balances issued on this date or earlier (\`YYYY-MM-DD\` or full ISO-8601 timestamp).",
                  "type": "optional<string>",
                },
                "invoice_date__range": {
                  "allow-multiple": undefined,
                  "docs": "Return invoices issued within this date range (\`YYYY-MM-DD\` or full ISO-8601 timestamp).",
                  "type": "optional<string>",
                },
                "invoice_identification": {
                  "allow-multiple": undefined,
                  "docs": "Return an invoice with this ID (as provided by the insitution).",
                  "type": "optional<string>",
                },
                "invoice_identification__in": {
                  "allow-multiple": undefined,
                  "docs": "Return invoices with these IDs (as provided by the institution).",
                  "type": "optional<string>",
                },
                "link": {
                  "allow-multiple": undefined,
                  "docs": "The \`link.id\` you want to filter by.

ℹ️ We highly recommend adding the \`link.id\` filter in order to improve your performance.
",
                  "type": "optional<string>",
                },
                "link__in": {
                  "allow-multiple": undefined,
                  "docs": "Return invoices only for these \`link.id\`s.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "page": {
                  "allow-multiple": undefined,
                  "docs": "A page number within the paginated result set.",
                  "type": "optional<integer>",
                },
                "page_size": {
                  "allow-multiple": undefined,
                  "docs": "Indicates how many results to return per page. By default we return 100 results per page. 

ℹ️ The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).
",
                  "type": "optional<integer>",
                },
                "status": {
                  "allow-multiple": undefined,
                  "docs": "Return invoices with this status. Can be either \`Vigente\` (valid) or \`Cancelado\` (cancelled).",
                  "type": "optional<string>",
                },
                "status__in": {
                  "allow-multiple": undefined,
                  "docs": "Return invoices with these statuses. Can be either \`Vigente\` (valid) or \`Cancelado\` (cancelled).",
                  "type": "optional<string>",
                },
                "total_amount": {
                  "allow-multiple": undefined,
                  "docs": "Return invoices matching exactly this value.",
                  "type": "optional<string>",
                },
                "total_amount__gt": {
                  "allow-multiple": undefined,
                  "docs": "Return invoices greater than this value.",
                  "type": "optional<string>",
                },
                "total_amount__gte": {
                  "allow-multiple": undefined,
                  "docs": "Return invoices greater than or equal to this value.",
                  "type": "optional<string>",
                },
                "total_amount__lt": {
                  "allow-multiple": undefined,
                  "docs": "Return invoices less than this value.",
                  "type": "optional<string>",
                },
                "total_amount__lte": {
                  "allow-multiple": undefined,
                  "docs": "Return invoices less than or equal to this value.",
                  "type": "optional<string>",
                },
                "total_amount__range": {
                  "allow-multiple": undefined,
                  "docs": "Return invoices between these two values.",
                  "type": "optional<string>",
                },
                "type": {
                  "allow-multiple": undefined,
                  "docs": "Return invoices of this type. Can be either \`OUTFLOW\` or \`INFLOW\`.",
                  "type": "optional<string>",
                },
                "type__in": {
                  "allow-multiple": undefined,
                  "docs": "Return invoices of these types. Can be either \`OUTFLOW\` or \`INFLOW\`.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.InvoicesResponsePaginatedResponse",
            },
          },
          "PatchInvoices": {
            "auth": true,
            "docs": "Used to resume an Invoice retrieve session that was paused because an MFA token was required by the institution.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.RequestTimeoutError",
              "root.PreconditionError",
              "root.InternalServerError",
            ],
            "method": "PATCH",
            "path": "/api/invoices",
            "request": {
              "body": {
                "docs": "A JSON object containing a session UUID and a MFA token",
                "type": "root.PatchBody",
              },
              "name": "PatchInvoicesRequest",
              "query-parameters": {
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok (when \`save_data=false\`)",
              "type": "list<root.PatchInvoicesResponseItem>",
            },
          },
          "RetrieveInvoices": {
            "auth": true,
            "docs": "Retrieve invoice information from a specific fiscal link.
<div style="background-color:#f4f6f8; border-left: 6px solid #0663F9;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right: 25px"> <strong>Info: </strong> You can ask for up to **one** year (365 days) of invoices per request. If you need invoices for more than one year, just make another request. </div>
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.RequestTimeoutError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/api/invoices",
            "request": {
              "body": {
                "properties": {
                  "attach_xml": {
                    "docs": "When set to \`true\`, you will receive the XML invoice in the response.",
                    "type": "optional<boolean>",
                  },
                  "date_from": {
                    "docs": "The date from which you want to start getting invoices for, in \`YYYY-MM-DD\` format.

⚠️ The value of \`date_from\` cannot be greater than \`date_to\`.
",
                    "type": "string",
                  },
                  "date_to": {
                    "docs": "The date you want to stop getting invoices for, in \`YYYY-MM-DD\` format.

⚠️ The number of days between \`date_from\` and \`date_to\` cannot be over 365.

⚠️ The value of \`date_to\` cannot be greater than today's date (in other words, no future dates).
",
                    "type": "string",
                  },
                  "link": {
                    "docs": "The fiscal \`link.id\` to use.",
                    "type": "string",
                  },
                  "save_data": {
                    "docs": "Indicates whether or not to persist the data in Belvo. By default, this is set to \`true\` and we return a 201 Created response.
When set to \`false\`, the data won't be persisted and we return a 200 OK response.",
                    "type": "optional<boolean>",
                  },
                  "type": {
                    "docs": undefined,
                    "type": "root.EnumInvoiceType",
                  },
                },
              },
              "headers": undefined,
              "name": "InvoicesRequest",
              "query-parameters": {
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok (when \`save_data=false\`)",
              "type": "list<root.RetrieveInvoicesResponseItem>",
            },
          },
        },
      },
    },
    "links.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "ChangeLinkAccessMode": {
            "auth": true,
            "docs": "Change a link's access mode from \`single\` to \`recurrent\` or from \`recurrent\` to single.
ℹ️ **Note**: When you change a link from \`single\`\` to \`recurrent\`, they will only be updated the next day at the scheduled interval.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.NotFoundError",
              "root.PreconditionError",
              "root.InternalServerError",
            ],
            "method": "PATCH",
            "path": "/api/links/{id}",
            "path-parameters": {
              "id": {
                "docs": "The \`link.id\` you want to change the \`access_mode\` for.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "access_mode": {
                    "docs": undefined,
                    "type": "root.EnumLinkAccessModeRequest",
                  },
                },
              },
              "headers": undefined,
              "name": "ChangeAccessMode",
              "query-parameters": {
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.Link",
            },
          },
          "DestroyLink": {
            "auth": true,
            "docs": "Delete a specific link and all associated accounts, transactions, and owners from your Belvo account.
# Deleting links in batches
To delete links in bulk, we recommend looping through the list of links you want to delete and making the delete request.

  > 🚧 **Rate limiting and IP blocking**
  > 
  > An important technical note for performing operations in batches is to take into consideration our rate-limiting: up to 80 requests every 30 seconds. If you exceed this limit, you run the risk of Belvo blocking your IP from making further requests.
  > 
  > For more information, or if your IP address has been blocked, please contact our [support team](https://support.belvo.com/hc/en-us/requests/new).",
            "errors": [
              "root.UnauthorizedError",
              "root.NotFoundError",
            ],
            "method": "DELETE",
            "path": "/api/links/{id}",
            "path-parameters": {
              "id": {
                "docs": "The \`link.id\` that you want to delete.",
                "type": "string",
              },
            },
          },
          "DetailLink": {
            "auth": true,
            "docs": "Get the details of a specific link.",
            "errors": [
              "root.UnauthorizedError",
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/api/links/{id}",
            "path-parameters": {
              "id": {
                "docs": "The \`link.id\` you want to get detailed information about.",
                "type": "string",
              },
            },
            "request": {
              "name": "DetailLinkRequest",
              "query-parameters": {
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.Link",
            },
          },
          "ListLinks": {
            "auth": true,
            "docs": "Get a paginated list of all the existing links in your Belvo account. By default, we return up to 100 results per page.",
            "errors": [
              "root.UnauthorizedError",
            ],
            "method": "GET",
            "path": "/api/links",
            "request": {
              "name": "ListLinksRequest",
              "query-parameters": {
                "access_mode": {
                  "allow-multiple": undefined,
                  "docs": "Return links only with this access mode. Can be either \`single\` or \`recurrent\`.",
                  "type": "optional<string>",
                },
                "created_at": {
                  "allow-multiple": undefined,
                  "docs": "Return links that were last updated in Belvo's database on this date (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "created_at__gt": {
                  "allow-multiple": undefined,
                  "docs": "Return links that were last updated in Belvo's database after this date (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "created_at__gte": {
                  "allow-multiple": undefined,
                  "docs": "Return links that were last updated in Belvo's database after or on this date (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "created_at__lt": {
                  "allow-multiple": undefined,
                  "docs": "Return links that were last updated in Belvo's database before this date (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "created_at__lte": {
                  "allow-multiple": undefined,
                  "docs": "Return links that were last updated in Belvo's database before or on this date (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "created_at__range": {
                  "allow-multiple": undefined,
                  "docs": "Return links that were last updated in Belvo's database between two dates (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "created_by__not_in": {
                  "allow-multiple": undefined,
                  "docs": "Return links that were not created by these Belvo users.",
                  "type": "optional<string>",
                },
                "external_id": {
                  "allow-multiple": undefined,
                  "docs": "Return links with this external ID.",
                  "type": "optional<string>",
                },
                "external_id__in": {
                  "allow-multiple": undefined,
                  "docs": "Return links with these external IDs.",
                  "type": "optional<string>",
                },
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "id": {
                  "allow-multiple": undefined,
                  "docs": "Return information only for this \`link.id\`.",
                  "type": "optional<string>",
                },
                "id__in": {
                  "allow-multiple": undefined,
                  "docs": "Return information only for these \`link.id\`s.",
                  "type": "optional<string>",
                },
                "institution": {
                  "allow-multiple": undefined,
                  "docs": "Return links created for this institution (use the Belvo-designated name, such as \`erebor_mx_retail\`).",
                  "type": "optional<string>",
                },
                "institution__in": {
                  "allow-multiple": undefined,
                  "docs": "Return links created for these institutions (use the Belvo-designated name, such as \`erebor_mx_retail\` and \`gringotts_co_retail\`).",
                  "type": "optional<string>",
                },
                "institution_user_id": {
                  "allow-multiple": undefined,
                  "docs": "Return links with this specific institution user ID.",
                  "type": "optional<string>",
                },
                "institution_user_id__in": {
                  "allow-multiple": undefined,
                  "docs": "Return links with these institution user IDs.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "page": {
                  "allow-multiple": undefined,
                  "docs": "A page number within the paginated result set.",
                  "type": "optional<integer>",
                },
                "page_size": {
                  "allow-multiple": undefined,
                  "docs": "Indicates how many results to return per page. By default we return 100 results per page. 

ℹ️ The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).
",
                  "type": "optional<integer>",
                },
                "refresh_rate": {
                  "allow-multiple": undefined,
                  "docs": "Return links with this refresh rate. Choose between \`6h\`, \`12h\`, \`24h\`, \`7d\`, or \`30d\`.",
                  "type": "optional<string>",
                },
                "status": {
                  "allow-multiple": undefined,
                  "docs": "Return links with this status. Choose between \`valid\`, \`invalid\`, \`unconfirmed\`, or \`token_required\`.",
                  "type": "optional<string>",
                },
                "status__in": {
                  "allow-multiple": undefined,
                  "docs": "Return links with these statuses. Choose between \`valid\`, \`invalid\`, \`unconfirmed\`, or \`token_required\`.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.PaginatedResponseLink",
            },
          },
          "PatchLinks": {
            "auth": true,
            "docs": "Used to resume a Link register session that was paused because an MFA token was required by the institution.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.PreconditionError",
              "root.InternalServerError",
            ],
            "method": "PATCH",
            "path": "/api/links",
            "request": {
              "body": {
                "docs": "A JSON object containing a session UUID and a MFA token",
                "type": "root.PatchBodyWithoutSaveData",
              },
              "name": "PatchLinksRequest",
              "query-parameters": {
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.Link",
            },
          },
          "RegisterLink": {
            "auth": true,
            "docs": "Register a new link with your Belvo account.

<div style="background-color:#f4f6f8; border-left: 6px solid #4CAF50;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right: 25px">
<strong>Note: </strong> We recommend using our <a href="https://developers.belvo.com/docs/connect-widget" target="_blank">Connect Widget</a> to handle link creation and link status updates.
</div>
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.PreconditionError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/api/links",
            "request": {
              "body": {
                "properties": {
                  "access_mode": {
                    "docs": undefined,
                    "type": "optional<root.EnumLinkAccessModeRequest>",
                  },
                  "certificate": {
                    "docs": "For certain fiscal institutions, it is possible to log in using a certificate and a private key, which enables a faster connection to the institution.

Belvo supports a base64 encoded \`certificate\`. If the \`certificate\` parameter is used, you *must* also provide the \`private_key\` parameter.
",
                    "type": "optional<string>",
                  },
                  "credentials_storage": {
                    "docs": "Indicates whether or not to store credentials (and the duration for which to store the credentials). By default, this is set to \`store\`. For links where \`access_mode=recurrent\`, this must be set to \`store\`.

Choose either:
  - \`store\` to store credentials
  - \`nostore\` to not store credentials
  - \`30d\` to store credentials only for 30 days
",
                    "type": "optional<string>",
                  },
                  "external_id": {
                    "docs": "An additional identifier for the link, provided by you, to store in the Belvo database. **Cannot** include any Personal Identifiable Information (PII). **Must** be at least three characters long.

If we identify that the identifier contains PII, we will force a \`null\` value. For more information, see our [Link creation article](https://developers.belvo.com/docs/link-creation-best-practices#adding-your-own-identifier).",
                    "type": "optional<string>",
                  },
                  "fetch_historical": {
                    "docs": "Indicates whether or not to retrieve historical information for the link or not. For links where \`access_mode=single\`, the default is \`false\`. For links where \`access_mode=recurrent\` this is hardcoded to \`true\`.
",
                    "type": "optional<boolean>",
                  },
                  "institution": {
                    "docs": "The Belvo name for the institution.",
                    "type": "string",
                  },
                  "password": {
                    "docs": "The end-user's password used to log in to the institution.

ℹ️ **Note**: You must send through a password for all institutions except for IMSS (\`imss_mx_employment\`).
",
                    "type": "optional<string>",
                  },
                  "password2": {
                    "docs": "The end-user's second password used to log in to the institution.

ℹ️ This is only required by some institutions. To know which institutions require a second password, get the [details](https://developers.belvo.com/reference/detailinstitution) for the institution and check the \`form_fields\` array in the response.
",
                    "type": "optional<string>",
                  },
                  "private_key": {
                    "docs": "For certain fiscal institutions, it is possible to log in using a certificate and a private key, which enables a faster connection to the institution.

Belvo supports a base64 encoded \`private_key\`. If the \`private_key\` parameter is used, you *must* also provide the \`certificate\` parameter.
",
                    "type": "optional<string>",
                  },
                  "token": {
                    "docs": "The MFA token required by the bank to log in.

We do not recommend sending the authentication token in the same request as registering the user. See our [Handling multi-factor authentication](https://developers.belvo.com/docs/handling-2-factor-authentication) article for more information and best practices.
",
                    "type": "optional<string>",
                  },
                  "username": {
                    "docs": "The end-user's username (or ID) used to log in to the institution.",
                    "type": "string",
                  },
                  "username2": {
                    "docs": "The end-user's second username (or email address) used to log in to the institution.

ℹ️ This is only required by some institutions. To know which institutions require a second username, get the [details](https://developers.belvo.com/reference/detailinstitution) for the institution and check the \`form_fields\` array in the response.
",
                    "type": "optional<string>",
                  },
                  "username3": {
                    "docs": "The end-user's third username used to log in to the institution.

ℹ️ This is only required by some institutions. To know which institutions require a third username, get the [details](https://developers.belvo.com/reference/detailinstitution) for the institution and check the \`form_fields\` array in the response.
",
                    "type": "optional<string>",
                  },
                  "username_type": {
                    "docs": "Type of document to be used as a username.

Some banking institutions accept different documents to be used as the \`username\` to login. For example, the *Cédula de Ciudadanía*, *Cédula de Extranjería*, *Pasaporte'*, and so on.

For banks that require a document to log in, you **must** provide the \`username_type\` parameter to specify which document is used when creating the link.

ℹ️ To know which institutions require the \`username_type\` parameter, get the [details](https://developers.belvo.com/reference/detailinstitution) for the institution and check the \`form_fields\` array in the response.

For a list of standards codes, see the table below.

| Code | Description |
|-----------|-------|
| \`001\` | Cédula de Ciudadanía |
| \`002\` | Cédula de Extranjería |
| \`003\` | Pasaporte |
| \`004\` | Tarjeta de Identidad |
| \`005\` | Registro Civil |
| \`006\` | Número Identificación Personal |
| \`020\` | NIT |
| \`021\` | NIT Persona Natural |
| \`022\` | NIT Persona Extranjera |
| \`023\` | NIT Persona Jurídica |
| \`024\` | NIT Menores |
| \`025\` | NIT Desasociado |
| \`030\` | Trj. Seguro Social Extranjero |
| \`031\` | Sociedad Extranjera sin NIT en Colombia |
| \`032\` | Fideicomiso |
| \`033\` | RIF Venezuela |
| \`034\` | CIF |
| \`035\` | Número de Identidad |
| \`036\` | RTN |
| \`037\` | Cédula de Identidad |
| \`038\` | DIMEX |
| \`039\` | CED |
| \`040\` | PAS |
| \`041\` | Documento Único de Identidad |
| \`042\` | NIT Salvadoreño |
| \`100\` | Agência e conta |
| \`101\` | Código do operador |
| \`102\` | Cartão de crédito |
| \`103\` | CPF |
",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "LinksRequest",
              "query-parameters": {
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Created",
              "type": "root.Link",
            },
          },
          "UpdateLink": {
            "auth": true,
            "docs": "Update the credentials of a specific link. If the successfully updated link is a recurrent one, we automatically trigger an update of the link. If we find fresh data, you'll [receive historical update](https://developers.belvo.com/docs/webhooks) webhooks.
<div style="background-color:#f4f6f8; border-left: 6px solid #4CAF50;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right: 25px"> <strong>Note: </strong> We recommend using our <a href="https://developers.belvo.com/docs/connect-widget" target="_blank">Connect Widget</a> to handle updating <code>invalid</code> or <code>token_required</code> links. </div>
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.NotFoundError",
              "root.PreconditionError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/links/{id}",
            "path-parameters": {
              "id": {
                "docs": "The \`link.id\` you want to update.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "certificate": {
                    "docs": "For certain fiscal institutions, it is possible to log in using a certificate and a private key, which enables a faster connection to the institution.

Belvo supports a base64 encoded \`certificate\`. If the \`certificate\` parameter is used, you *must* also provide the \`private_key\` parameter.
",
                    "type": "optional<string>",
                  },
                  "password": {
                    "docs": "The end-user's password used to log in to the institution.",
                    "type": "string",
                  },
                  "password2": {
                    "docs": "The end-user's second password used to log in to the institution.

ℹ️ This is only required by some institutions. To know which institutions require a second password, get the [details](https://developers.belvo.com/reference/detailinstitution) for the institution and check the \`form_fields\` array in the response.
",
                    "type": "optional<string>",
                  },
                  "private_key": {
                    "docs": "For certain fiscal institutions, it is possible to log in using a certificate and a private key, which enables a faster connection to the institution.

Belvo supports a base64 encoded \`private_key\`. If the \`private_key\` parameter is used, you *must* also provide the \`certificate\` parameter.
",
                    "type": "optional<string>",
                  },
                  "token": {
                    "docs": "The MFA token required by the bank to log in.
",
                    "type": "optional<string>",
                  },
                  "username_type": {
                    "docs": "Type of document to be used as a username.

  Some banking institutions accept different documents to be used as the \`username\` to login. For example, the *Cédula de Ciudadanía*, *Cédula de Extranjería*, *Pasaporte'*, and so on.

  For banks that require a document to log in, you **must** provide the \`username_type\` parameter to specify which document is used when creating the link.

  ℹ️ To know which institutions require the \`username_type\` parameter, get the [details](https://developers.belvo.com/reference/detailinstitution) for the institution and check the \`form_fields\` array in the response.

  For a list of standards codes, see the table below.

| Code | Description |
|-----------|-------|
| \`001\` | Cédula de Ciudadanía |
| \`002\` | Cédula de Extranjería |
| \`003\` | Pasaporte |
| \`004\` | Tarjeta de Identidad |
| \`005\` | Registro Civil |
| \`006\` | Número Identificación Personal |
| \`020\` | NIT |
| \`021\` | NIT Persona Natural |
| \`022\` | NIT Persona Extranjera |
| \`023\` | NIT Persona Jurídica |
| \`024\` | NIT Menores |
| \`025\` | NIT Desasociado |
| \`030\` | Trj. Seguro Social Extranjero |
| \`031\` | Sociedad Extranjera sin NIT en Colombia |
| \`032\` | Fideicomiso |
| \`033\` | RIF Venezuela |
| \`034\` | CIF |
| \`035\` | Número de Identidad |
| \`036\` | RTN |
| \`037\` | Cédula de Identidad |
| \`038\` | DIMEX |
| \`039\` | CED |
| \`040\` | PAS |
| \`041\` | Documento Único de Identidad |
| \`042\` | NIT Salvadoreño |
| \`100\` | Agência e conta |
| \`101\` | Código do operador |
| \`102\` | Cartão de crédito |
| \`103\` | CPF |
",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "LinksPutRequest",
              "query-parameters": {
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.Link",
            },
          },
        },
      },
    },
    "owners.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "DestroyOwner": {
            "auth": true,
            "docs": "Delete a specific owner from your Belvo account.",
            "errors": [
              "root.UnauthorizedError",
              "root.NotFoundError",
            ],
            "method": "DELETE",
            "path": "/api/owners/{id}",
            "path-parameters": {
              "id": {
                "docs": "The \`owner.id\` that you want to delete.",
                "type": "string",
              },
            },
          },
          "DetailOwner": {
            "auth": true,
            "docs": "Get the details of a specific owner.",
            "errors": [
              "root.UnauthorizedError",
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/api/owners/{id}",
            "path-parameters": {
              "id": {
                "docs": "The \`owner.id\` you want to get detailed information about.",
                "type": "string",
              },
            },
            "request": {
              "name": "DetailOwnerRequest",
              "query-parameters": {
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.Owner",
            },
          },
          "ListOwners": {
            "auth": true,
            "docs": "Get a paginated list of all existing owners in your Belvo account. We return up to 100 results per page.",
            "errors": [
              "root.UnauthorizedError",
            ],
            "method": "GET",
            "path": "/api/owners",
            "request": {
              "name": "ListOwnersRequest",
              "query-parameters": {
                "created_at__gt": {
                  "allow-multiple": undefined,
                  "docs": "Return owners that were last updated in Belvo's database after this date (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "created_at__gte": {
                  "allow-multiple": undefined,
                  "docs": "Return owners that were last updated in Belvo's database after or on this date (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "created_at__lt": {
                  "allow-multiple": undefined,
                  "docs": "Return owners that were last updated in Belvo's database before this date (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "created_at__lte": {
                  "allow-multiple": undefined,
                  "docs": "Return owners that were last updated in Belvo's database before or on this date (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "created_at__range": {
                  "allow-multiple": undefined,
                  "docs": "Return owners that were last updated in Belvo's database between two dates (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "display_name__icontains": {
                  "allow-multiple": undefined,
                  "docs": "Return owners whose full display name partially matches your query. For example, \`mar\` will return results for Mark, Maria, Neymar, Remarque, and so on.",
                  "type": "optional<string>",
                },
                "email": {
                  "allow-multiple": undefined,
                  "docs": "Returns owners whose email address match your query.",
                  "type": "optional<string>",
                },
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "id": {
                  "allow-multiple": undefined,
                  "docs": "Return information only for this \`owner.id\`.",
                  "type": "optional<string>",
                },
                "id__in": {
                  "allow-multiple": undefined,
                  "docs": "Return information only for these \`owner.id\`s.",
                  "type": "optional<string>",
                },
                "link": {
                  "allow-multiple": undefined,
                  "docs": "Return information only for this \`link.id\`.",
                  "type": "optional<string>",
                },
                "link__in": {
                  "allow-multiple": undefined,
                  "docs": "Return balances only for these \`link.id\`s.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "page": {
                  "allow-multiple": undefined,
                  "docs": "A page number within the paginated result set.",
                  "type": "optional<integer>",
                },
                "page_size": {
                  "allow-multiple": undefined,
                  "docs": "Indicates how many results to return per page. By default we return 100 results per page. 

ℹ️ The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).
",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.OwnersPaginatedResponse",
            },
          },
          "PatchOwners": {
            "auth": true,
            "docs": "Used to resume an Owner retrieve session that was paused because an MFA token was required by the institution.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.RequestTimeoutError",
              "root.PreconditionError",
              "root.InternalServerError",
            ],
            "method": "PATCH",
            "path": "/api/owners",
            "request": {
              "body": {
                "docs": "A JSON object containing a session UUID and a MFA token",
                "type": "root.PatchBody",
              },
              "name": "PatchOwnersRequest",
              "query-parameters": {
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok (when \`save_data=false\`)",
              "type": "list<root.Owner>",
            },
          },
          "RetrieveOwners": {
            "auth": true,
            "docs": "Retrieve owner information from a specific link.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.RequestTimeoutError",
              "root.PreconditionError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/api/owners",
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.StandardRequest",
              },
              "name": "RetrieveOwnersRequest",
              "query-parameters": {
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok (when \`save_data=false\`)",
              "type": "list<root.Owner>",
            },
          },
        },
      },
    },
    "paymentInstitutions.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "DetailPaymentInstitution": {
            "auth": true,
            "docs": "Get the details about a specific payment institution",
            "errors": [
              "root.UnauthorizedError",
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/payments/institutions/{id}",
            "path-parameters": {
              "id": {
                "docs": "The payment \`institution.id\` you want to get detailed information about.",
                "type": "string",
              },
            },
            "response": {
              "docs": "OK",
              "type": "root.PaymentInstitution",
            },
          },
          "ListPaymentInstitutions": {
            "auth": true,
            "docs": "List all available payment institutions.",
            "errors": [
              "root.UnauthorizedError",
            ],
            "method": "GET",
            "path": "/payments/institutions",
            "request": {
              "name": "ListPaymentInstitutionsRequest",
              "query-parameters": {
                "country": {
                  "allow-multiple": undefined,
                  "docs": "Return institutions only for this country.",
                  "type": "optional<string>",
                },
                "country__in": {
                  "allow-multiple": undefined,
                  "docs": "Return institutions only for one of these countries.",
                  "type": "optional<string>",
                },
                "created_at": {
                  "allow-multiple": undefined,
                  "docs": "Return results only for this date (in \`YYYY-MM-DD\` format).",
                  "type": "optional<string>",
                },
                "created_at__gt": {
                  "allow-multiple": undefined,
                  "docs": "Return results only after this date (in \`YYYY-MM-DD\` format).",
                  "type": "optional<string>",
                },
                "created_at__gte": {
                  "allow-multiple": undefined,
                  "docs": "Return results only for this date and after (in \`YYYY-MM-DD\` format).",
                  "type": "optional<string>",
                },
                "created_at__lt": {
                  "allow-multiple": undefined,
                  "docs": "Return results only before this date (in \`YYYY-MM-DD\` format).",
                  "type": "optional<string>",
                },
                "created_at__lte": {
                  "allow-multiple": undefined,
                  "docs": "Return results only for this date and before (in \`YYYY-MM-DD\` format).",
                  "type": "optional<string>",
                },
                "created_at__range": {
                  "allow-multiple": undefined,
                  "docs": "Return results between this date range (in \`YYYY-MM-DD\` format).",
                  "type": "optional<string>",
                },
                "page": {
                  "allow-multiple": undefined,
                  "docs": "A page number within the paginated result set.",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "OK",
              "type": "root.PaymentsInstitutionsPaginatedResponse",
            },
          },
        },
      },
    },
    "paymentIntents.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "CreatePaymentIntent": {
            "auth": true,
            "docs": "Create a payment intent.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.RequestTimeoutError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/payments/payment-intents",
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.CreatePaymentIntentPse",
              },
            },
            "response": {
              "docs": "OK (Created)",
              "type": "root.PaymentIntentPse",
            },
          },
          "DetailPaymentIntent": {
            "auth": true,
            "docs": "Get the details about a specific payment intent.",
            "errors": [
              "root.UnauthorizedError",
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/payments/payment-intents/{id}",
            "path-parameters": {
              "id": {
                "docs": "The \`payment-intent.id\` you want to get detailed information about.",
                "type": "string",
              },
            },
            "response": {
              "docs": "OK",
              "type": "root.PaymentIntentPse",
            },
          },
          "ListPaymentIntents": {
            "auth": true,
            "docs": "List all payment intents associated with your Belvo account.",
            "errors": [
              "root.UnauthorizedError",
            ],
            "method": "GET",
            "path": "/payments/payment-intents",
            "request": {
              "name": "ListPaymentIntentsRequest",
              "query-parameters": {
                "amount": {
                  "allow-multiple": undefined,
                  "docs": "Return results only for this value.",
                  "type": "optional<string>",
                },
                "amount__gt": {
                  "allow-multiple": undefined,
                  "docs": "Return results only for more than this amount.",
                  "type": "optional<string>",
                },
                "amount__gte": {
                  "allow-multiple": undefined,
                  "docs": "Return results only for and more than this amount.",
                  "type": "optional<string>",
                },
                "amount__lt": {
                  "allow-multiple": undefined,
                  "docs": "Return results only for less than this amount.",
                  "type": "optional<string>",
                },
                "amount__lte": {
                  "allow-multiple": undefined,
                  "docs": "Return results only for this amount or less.",
                  "type": "optional<string>",
                },
                "created_at": {
                  "allow-multiple": undefined,
                  "docs": "Return results only for this date (in \`YYYY-MM-DD\` format).",
                  "type": "optional<string>",
                },
                "created_at__gt": {
                  "allow-multiple": undefined,
                  "docs": "Return results only after this date (in \`YYYY-MM-DD\` format).",
                  "type": "optional<string>",
                },
                "created_at__gte": {
                  "allow-multiple": undefined,
                  "docs": "Return results only for this date and after (in \`YYYY-MM-DD\` format).",
                  "type": "optional<string>",
                },
                "created_at__lt": {
                  "allow-multiple": undefined,
                  "docs": "Return results only before this date (in \`YYYY-MM-DD\` format).",
                  "type": "optional<string>",
                },
                "created_at__lte": {
                  "allow-multiple": undefined,
                  "docs": "Return results only for this date and before (in \`YYYY-MM-DD\` format).",
                  "type": "optional<string>",
                },
                "created_at__range": {
                  "allow-multiple": undefined,
                  "docs": "Return results between this date range (in \`YYYY-MM-DD\` format).",
                  "type": "optional<string>",
                },
                "customer": {
                  "allow-multiple": undefined,
                  "docs": "The \`customer.id\` you want to get results for.",
                  "type": "optional<string>",
                },
                "customer__in": {
                  "allow-multiple": undefined,
                  "docs": "One or more \`customer.id\`s (comma separated) that you want to get results for.",
                  "type": "optional<string>",
                },
                "id__in": {
                  "allow-multiple": undefined,
                  "docs": "One or more \`payment-intent.id\`s (comma separated) that you want to get results for.",
                  "type": "optional<string>",
                },
                "page": {
                  "allow-multiple": undefined,
                  "docs": "A page number within the paginated result set.",
                  "type": "optional<integer>",
                },
                "payment_method_type": {
                  "allow-multiple": undefined,
                  "docs": "Return results only for this value.",
                  "type": "optional<string>",
                },
                "provider": {
                  "allow-multiple": undefined,
                  "docs": "Return results only for this value.",
                  "type": "optional<string>",
                },
                "status": {
                  "allow-multiple": undefined,
                  "docs": "Return results only for this value.",
                  "type": "optional<string>",
                },
                "status__in": {
                  "allow-multiple": undefined,
                  "docs": "Return results for listed status.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "OK",
              "type": "root.PaymentIntentPaginatedResponse",
            },
          },
          "PatchPaymentIntent": {
            "auth": true,
            "docs": "Complete a new payment intent.

During the payment intent flow, you need to fill in the payment intent with required information about your customer (their institution, bank account, and login credentials). This is done by sending PATCH requests with the information that Belvo asked you display in each \`next_step\` object. If you need more information on how to complete a payment intent, check our <a href="https://developers.belvo.com/docs/colombia-pse#payment-intents" target="_blank">PSE payment initiation</a> guides for  🇨🇴 Colombia.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
            ],
            "method": "PATCH",
            "path": "/payments/payment-intents/{id}",
            "path-parameters": {
              "id": {
                "docs": "The \`payment-intent.id\` you want to get detailed information about.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "confirm": {
                    "docs": "Boolean that indicates whether this request confirms the payment intent. 

**Note:** You'll need to send this parameter set to \`true\` when the payment intent next_step returns \`ready_to_confirm: true\`, meaning the payment intent is ready to be confirmed.",
                    "type": "optional<boolean>",
                  },
                  "payment_method_details": {
                    "docs": undefined,
                    "type": "root.PatchPaymentIntentsBodyPse",
                  },
                },
              },
              "headers": undefined,
              "name": "PatchPaymentIntentPse",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "OK (Created)",
              "type": "root.PaymentIntentPse",
            },
          },
        },
      },
    },
    "paymentLinks.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "CreatePaymentlink": {
            "auth": true,
            "docs": "Create a new payment link to start a hosted-widget payment.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.RequestTimeoutError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/payments/payment-links",
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.CreatePaymentlinkRequest",
              },
            },
            "response": {
              "docs": "OK (Created)",
              "type": "root.CreatePaymentlinkResponse",
            },
          },
          "DetailCreatePaymentlink": {
            "auth": true,
            "docs": "Get the details about a payment link.",
            "errors": [
              "root.UnauthorizedError",
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/payments/payment-links/{access_token}",
            "path-parameters": {
              "access_token": {
                "docs": "The \`access_token\` of the payment link you want to get detailed information about. 

**Note:** You can retrieve the \`access_token\` for a payment link by making a [GET List all payment links](https://developers.belvo.com/reference/listpaymentlinks) request.",
                "type": "string",
              },
            },
            "response": {
              "docs": "OK (Created)",
              "type": "root.DetailCreatePaymentlinkResponse",
            },
          },
          "ListPaymentLinks": {
            "auth": true,
            "docs": "List all payment links associated with your Belvo account. By default, we return up to 100 results per page.",
            "errors": [
              "root.UnauthorizedError",
            ],
            "method": "GET",
            "path": "/payments/payment-links",
            "request": {
              "name": "ListPaymentLinksRequest",
              "query-parameters": {
                "created_at": {
                  "allow-multiple": undefined,
                  "docs": "Return results only for this date (in \`YYYY-MM-DD\` format).",
                  "type": "optional<string>",
                },
                "created_at__gt": {
                  "allow-multiple": undefined,
                  "docs": "Return results only after this date (in \`YYYY-MM-DD\` format).",
                  "type": "optional<string>",
                },
                "created_at__gte": {
                  "allow-multiple": undefined,
                  "docs": "Return results only for this date and after (in \`YYYY-MM-DD\` format).",
                  "type": "optional<string>",
                },
                "created_at__lt": {
                  "allow-multiple": undefined,
                  "docs": "Return results only before this date (in \`YYYY-MM-DD\` format).",
                  "type": "optional<string>",
                },
                "created_at__lte": {
                  "allow-multiple": undefined,
                  "docs": "Return results only for this date and before (in \`YYYY-MM-DD\` format).",
                  "type": "optional<string>",
                },
                "created_at__range": {
                  "allow-multiple": undefined,
                  "docs": "Return results between this date range (in \`YYYY-MM-DD\` format).",
                  "type": "optional<string>",
                },
                "ordering": {
                  "allow-multiple": undefined,
                  "docs": "Return results in a specified time order. Can be either:

  - \`created_at\` returns payment links from newest to oldest (in ascending order).
  - \`-created_at\` returns payment links from oldest to newest (in descending order).",
                  "type": "optional<root.ListPaymentLinksRequestOrdering>",
                },
                "page": {
                  "allow-multiple": undefined,
                  "docs": "A page number within the paginated result set.",
                  "type": "optional<integer>",
                },
                "page_size": {
                  "allow-multiple": undefined,
                  "docs": "Indicates how many results to return per page. By default we return 100 results per page.

ℹ️ The minimum number of results returned per page is 1 and the maximum is 100. If you enter a value greater than 100, our API will default to the maximum value (1000).
",
                  "type": "optional<integer>",
                },
                "search": {
                  "allow-multiple": undefined,
                  "docs": "Return results for one or more payment links that match the description you searched for. 

**Note:** This filter supports both full and partial search queries, with a minimum of three characters required. For example, searching for \`trai\` may match the following values:

  - \`Awesome training sneakers\` 
  - \`Training equipment\`",
                  "type": "optional<string>",
                },
                "status": {
                  "allow-multiple": undefined,
                  "docs": "Return payment links with this status. Can be either \`ACTIVE\` or \`INACTIVE\`.",
                  "type": "optional<root.ListPaymentLinksRequestStatus>",
                },
              },
            },
            "response": {
              "docs": "OK",
              "type": "root.PaymentLinkPaginatedResponse",
            },
          },
        },
      },
    },
    "paymentTransactions.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "DetailPaymentTransactions": {
            "auth": true,
            "docs": "Get the details about a specific payment transaction.",
            "errors": [
              "root.UnauthorizedError",
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/payments/transactions/{id}",
            "path-parameters": {
              "id": {
                "docs": "The \`transaction.id\` you want to get detailed information about.",
                "type": "string",
              },
            },
            "response": {
              "docs": "OK",
              "type": "root.PaymentTransaction",
            },
          },
          "ListPaymentTransactions": {
            "auth": true,
            "docs": "List all payment transactions associated with your Belvo account.",
            "errors": [
              "root.UnauthorizedError",
            ],
            "method": "GET",
            "path": "/payments/transactions",
            "request": {
              "name": "ListPaymentTransactionsRequest",
              "query-parameters": {
                "amount": {
                  "allow-multiple": undefined,
                  "docs": "Return results only for this value.",
                  "type": "optional<string>",
                },
                "amount__gt": {
                  "allow-multiple": undefined,
                  "docs": "Return results only for more than this amount.",
                  "type": "optional<string>",
                },
                "amount__gte": {
                  "allow-multiple": undefined,
                  "docs": "Return results only for and more than this amount.",
                  "type": "optional<string>",
                },
                "amount__lt": {
                  "allow-multiple": undefined,
                  "docs": "Return results only for less than this amount.",
                  "type": "optional<string>",
                },
                "amount__lte": {
                  "allow-multiple": undefined,
                  "docs": "Return results only for this amount or less.",
                  "type": "optional<string>",
                },
                "amount__range": {
                  "allow-multiple": undefined,
                  "docs": "Return results between this amount range",
                  "type": "optional<string>",
                },
                "beneficiary": {
                  "allow-multiple": undefined,
                  "docs": "The \`beneficiary.id\` you want to get results for.",
                  "type": "optional<string>",
                },
                "beneficiary__in": {
                  "allow-multiple": undefined,
                  "docs": "One or more \`beneficiary.id\`s (comma separated) that you want to get results for.",
                  "type": "optional<string>",
                },
                "charge": {
                  "allow-multiple": undefined,
                  "docs": "The \`charge.id\` you want to get results for.",
                  "type": "optional<string>",
                },
                "charge__in": {
                  "allow-multiple": undefined,
                  "docs": "One or more \`charge.id\`s (comma separated) that you want to get results for.",
                  "type": "optional<string>",
                },
                "created_at": {
                  "allow-multiple": undefined,
                  "docs": "Return results only for this date (in \`YYYY-MM-DD\` format).",
                  "type": "optional<string>",
                },
                "created_at__gt": {
                  "allow-multiple": undefined,
                  "docs": "Return results only after this date (in \`YYYY-MM-DD\` format).",
                  "type": "optional<string>",
                },
                "created_at__gte": {
                  "allow-multiple": undefined,
                  "docs": "Return results only for this date and after (in \`YYYY-MM-DD\` format).",
                  "type": "optional<string>",
                },
                "created_at__lt": {
                  "allow-multiple": undefined,
                  "docs": "Return results only before this date (in \`YYYY-MM-DD\` format).",
                  "type": "optional<string>",
                },
                "created_at__lte": {
                  "allow-multiple": undefined,
                  "docs": "Return results only for this date and before (in \`YYYY-MM-DD\` format).",
                  "type": "optional<string>",
                },
                "created_at__range": {
                  "allow-multiple": undefined,
                  "docs": "Return results between this date range (in \`YYYY-MM-DD\` format).",
                  "type": "optional<string>",
                },
                "currency": {
                  "allow-multiple": undefined,
                  "docs": "Return results for a matched value type.",
                  "type": "optional<string>",
                },
                "description": {
                  "allow-multiple": undefined,
                  "docs": "Return results for a matched value type.",
                  "type": "optional<string>",
                },
                "id__in": {
                  "allow-multiple": undefined,
                  "docs": "One or more payment \`transaction.id\`s (comma separated) that you want to get results for.",
                  "type": "optional<string>",
                },
                "page": {
                  "allow-multiple": undefined,
                  "docs": "A page number within the paginated result set.",
                  "type": "optional<integer>",
                },
                "payer": {
                  "allow-multiple": undefined,
                  "docs": "The payer's \`bank-account.id\` you want to get results for.",
                  "type": "optional<string>",
                },
                "payer__in": {
                  "allow-multiple": undefined,
                  "docs": "One or more payer \`bank-account.id\`s (comma separated) that you want to get results for.",
                  "type": "optional<string>",
                },
                "transaction__type": {
                  "allow-multiple": undefined,
                  "docs": "Return results for a matched value type.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "OK",
              "type": "root.PaymentsTransactionsPaginatedResponse",
            },
          },
        },
      },
    },
    "paymentWebhooks.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "DeletePaymentWebhooks": {
            "auth": true,
            "docs": "Delete a specific payment webhook from your Belvo account.",
            "errors": [
              "root.UnauthorizedError",
              "root.NotFoundError",
            ],
            "method": "DELETE",
            "path": "/payments/webhooks/{id}",
            "path-parameters": {
              "id": {
                "docs": "The \`webhook.id\` that you want to delete.",
                "type": "string",
              },
            },
          },
          "DetailPaymentWebhooks": {
            "auth": true,
            "docs": "Get the details about a specific payment webhook.",
            "errors": [
              "root.UnauthorizedError",
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/payments/webhooks/{id}",
            "path-parameters": {
              "id": {
                "docs": "The \`webhook.id\` you want to get detailed information about.",
                "type": "string",
              },
            },
            "response": {
              "docs": "OK",
              "type": "root.PaymentWebhook",
            },
          },
          "ListPaymentWebhooks": {
            "auth": true,
            "docs": "List all payment webhooks associated with your Belvo account.",
            "errors": [
              "root.UnauthorizedError",
            ],
            "method": "GET",
            "path": "/payments/webhooks",
            "response": {
              "docs": "OK",
              "type": "root.PaymentsWebhooksPaginatedResponse",
            },
          },
          "RegisterPaymentWebhook": {
            "auth": true,
            "docs": "Register a new payments webhook for your Belvo account.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.RequestTimeoutError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/payments/webhooks",
            "request": {
              "body": {
                "properties": {
                  "auth_header": {
                    "docs": "The authentication header for the request. **Must** be set to \`Authorization\`.",
                    "type": "optional<string>",
                  },
                  "auth_token": {
                    "docs": "The authentication token you need to send webhook events. Can be either:


  - \`Bearer\` and a token (for Bearer authentication). 
  - \`Basic\` and a base64-encoded username:password string (for Basic authentication).",
                    "type": "optional<string>",
                  },
                  "name": {
                    "docs": "The name you want to provide to identify the webhook.",
                    "type": "string",
                  },
                  "url": {
                    "docs": "The URL where webhook events should be sent to.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "PaymentWebhookRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Ok",
              "type": "list<root.PaymentWebhook>",
            },
          },
        },
      },
    },
    "receivableTransactions.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "DestroyReceivableTransaction": {
            "auth": true,
            "docs": "Delete a specific receivable transaction from your Belvo account.",
            "errors": [
              "root.UnauthorizedError",
              "root.NotFoundError",
            ],
            "method": "DELETE",
            "path": "/receivables/transactions/{id}",
            "path-parameters": {
              "id": {
                "docs": "The \`transaction.id\` that you want to delete.",
                "type": "string",
              },
            },
          },
          "DetailReceivableTransaction": {
            "auth": true,
            "docs": "Get the details of a specific receivable transaction.",
            "errors": [
              "root.UnauthorizedError",
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/receivables/transactions/{id}",
            "path-parameters": {
              "id": {
                "docs": "The \`transaction.id\` you want to get detailed information about.",
                "type": "string",
              },
            },
            "request": {
              "name": "DetailReceivableTransactionRequest",
              "query-parameters": {
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.ReceivablesTransaction",
            },
          },
          "ListReceivableTransactions": {
            "auth": true,
            "docs": "Get a paginated list of all the existing receivable transactions in your Belvo account. We return up to 100 results per page.",
            "errors": [
              "root.UnauthorizedError",
            ],
            "method": "GET",
            "path": "/receivables/transactions",
            "request": {
              "name": "ListReceivableTransactionsRequest",
              "query-parameters": {
                "account": {
                  "allow-multiple": undefined,
                  "docs": "The \`account.id\` you want to filter by.

ℹ️ We highly recommend adding either the \`link.id\` or the \`account.id\` filters in order to improve your performance.
",
                  "type": "optional<string>",
                },
                "account__in": {
                  "allow-multiple": undefined,
                  "docs": "Return receivable transactions only for these \`account.id\`s.",
                  "type": "optional<string>",
                },
                "created_at__gt": {
                  "allow-multiple": undefined,
                  "docs": "Return receivable transactions that were last updated in Belvo's database after this date (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "created_at__gte": {
                  "allow-multiple": undefined,
                  "docs": "Return receivable transactions that were last updated in Belvo's database after or on this date (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "created_at__lt": {
                  "allow-multiple": undefined,
                  "docs": "Return receivable transactions that were last updated in Belvo's database before this date (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "created_at__lte": {
                  "allow-multiple": undefined,
                  "docs": "Return receivable transactions that were last updated in Belvo's database before or on this date (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "created_at__range": {
                  "allow-multiple": undefined,
                  "docs": "Return receivable transactions that were last updated in Belvo's database between two dates (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "link": {
                  "allow-multiple": undefined,
                  "docs": "The \`link.id\` you want to filter by.

ℹ️ We highly recommend adding either the \`link.id\` or the \`account.id\` filters in order to improve your performance.
",
                  "type": "optional<string>",
                },
                "link__in": {
                  "allow-multiple": undefined,
                  "docs": "Return information for these \`link.id\`s.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "page": {
                  "allow-multiple": undefined,
                  "docs": "A page number within the paginated result set.",
                  "type": "optional<integer>",
                },
                "page_size": {
                  "allow-multiple": undefined,
                  "docs": "Indicates how many results to return per page. By default we return 100 results per page. 

ℹ️ The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).
",
                  "type": "optional<integer>",
                },
                "value_date": {
                  "allow-multiple": undefined,
                  "docs": "Return receivable transactions for exactly this date (\`YYYY-MM-DD\` or full ISO-8601 timestamp).",
                  "type": "optional<string>",
                },
                "value_date__gt": {
                  "allow-multiple": undefined,
                  "docs": "Return receivable transactions for after this date (\`YYYY-MM-DD\` or full ISO-8601 timestamp).",
                  "type": "optional<string>",
                },
                "value_date__gte": {
                  "allow-multiple": undefined,
                  "docs": "Return receivable transactions for this date or later (\`YYYY-MM-DD\` or full ISO-8601 timestamp).",
                  "type": "optional<string>",
                },
                "value_date__lt": {
                  "allow-multiple": undefined,
                  "docs": "Return receivable transactions for before this date (\`YYYY-MM-DD\` or full ISO-8601 timestamp).",
                  "type": "optional<string>",
                },
                "value_date__lte": {
                  "allow-multiple": undefined,
                  "docs": "Return receivable transactions for this date or earlier (\`YYYY-MM-DD\` or full ISO-8601 timestamp).",
                  "type": "optional<string>",
                },
                "value_date__range": {
                  "allow-multiple": undefined,
                  "docs": "Return receivable transactions for this date range (\`YYYY-MM-DD\` or full ISO-8601 timestamp).",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.ReceivablesTransactionsPaginatedResponse",
            },
          },
          "RetrieveReceivableTransactions": {
            "auth": true,
            "docs": "Retrieve all receivable transactions for an existing link.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.PreconditionError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/receivables/transactions",
            "request": {
              "body": {
                "properties": {
                  "date_from": {
                    "docs": "The date from which you want to start getting transactions for, in \`YYYY-MM-DD\` format.

⚠️ The value of \`date_from\` cannot be greater than \`date_to\`.",
                    "type": "string",
                  },
                  "date_to": {
                    "docs": "The date you want to stop getting transactions for, in \`YYYY-MM-DD\` format.

⚠️ The value of \`date_to\` cannot be greater than today's date (in other words, no future dates).",
                    "type": "string",
                  },
                  "link": {
                    "docs": "The \`link.id\` that you want to get information for.",
                    "type": "string",
                  },
                  "save_data": {
                    "docs": "Indicates whether or not to persist the data in Belvo. By default, this is set to \`true\` and we return a 201 Created response.
When set to \`false\`, the data won't be persisted and we return a 200 OK response.",
                    "type": "optional<boolean>",
                  },
                  "token": {
                    "docs": "The OTP token generated by the bank.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "ReceivableTransactionRequest",
              "query-parameters": {
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok (when \`save_data=false\`)",
              "type": "root.ReceivablesTransaction",
            },
          },
        },
      },
    },
    "recurringExpenses.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "DestroyRecurringExpense": {
            "auth": true,
            "docs": "Delete a specific recurring expense from your Belvo account.",
            "errors": [
              "root.UnauthorizedError",
              "root.NotFoundError",
            ],
            "method": "DELETE",
            "path": "/api/recurring-expenses/{id}",
            "path-parameters": {
              "id": {
                "docs": "The \`recurring-expenses.id\` that you want to delete",
                "type": "string",
              },
            },
          },
          "DetailRecurringExpense": {
            "auth": true,
            "docs": "Get the details of a specific recurring expense.",
            "errors": [
              "root.UnauthorizedError",
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/api/recurring-expenses/{id}",
            "path-parameters": {
              "id": {
                "docs": "The \`recurring-expenses.id\` you want to get detailed information about.",
                "type": "string",
              },
            },
            "request": {
              "name": "DetailRecurringExpenseRequest",
              "query-parameters": {
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "list<root.RecurringExpenses>",
            },
          },
          "ListRecurringExpenses": {
            "auth": true,
            "docs": "Get a paginated list of all recurring expenses in your Belvo account. By default, we return up to 100 results per page.",
            "errors": [
              "root.UnauthorizedError",
            ],
            "method": "GET",
            "path": "/api/recurring-expenses",
            "request": {
              "name": "ListRecurringExpensesRequest",
              "query-parameters": {
                "account": {
                  "allow-multiple": undefined,
                  "docs": "The \`account.id\` you want to filter by.

ℹ️ We highly recommend adding either the \`link.id\` or the \`account.id\` filters in order to improve your performance.
",
                  "type": "optional<string>",
                },
                "account_in": {
                  "allow-multiple": undefined,
                  "docs": "Return recurring expenses for these \`accound.id\`s.",
                  "type": "optional<string>",
                },
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "id": {
                  "allow-multiple": undefined,
                  "docs": "Return information for this \`recurring-expense.id\`.",
                  "type": "optional<string>",
                },
                "id__in": {
                  "allow-multiple": undefined,
                  "docs": "Return information for these \`recurring-expense.id\`s.",
                  "type": "optional<string>",
                },
                "link": {
                  "allow-multiple": undefined,
                  "docs": "The \`link.id\` you want to filter by.

ℹ️ We highly recommend adding either the \`link.id\` or the \`account.id\` filters in order to improve your performance.
",
                  "type": "optional<string>",
                },
                "link__in": {
                  "allow-multiple": undefined,
                  "docs": "Return information for these \`link.id\`s.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "page": {
                  "allow-multiple": undefined,
                  "docs": "A page number within the paginated result set.",
                  "type": "optional<integer>",
                },
                "page_size": {
                  "allow-multiple": undefined,
                  "docs": "Indicates how many results to return per page. By default we return 100 results per page. 

ℹ️ The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).
",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.RecurringExpensesPaginatedResponse",
            },
          },
          "PatchRecurringExpenses": {
            "auth": true,
            "docs": "Used to resume an Recurring Expenses retrieve session that was paused because an MFA token was required by the institution.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.RequestTimeoutError",
              "root.PreconditionError",
              "root.InternalServerError",
            ],
            "method": "PATCH",
            "path": "/api/recurring-expenses",
            "request": {
              "body": {
                "docs": "A JSON object containing a session UUID and a MFA token",
                "type": "root.PatchBody",
              },
              "name": "PatchRecurringExpensesRequest",
              "query-parameters": {
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok (when save_data=false)",
              "type": "list<root.RecurringExpenses>",
            },
          },
          "RetrieveRecurringExpenses": {
            "auth": true,
            "docs": "Retrieve recurring expense insights for <b>checking and savings accounts</b> from a specific link. You can receive insights for a period of up to 365 days, depending on the transaction history available for each [bank](https://developers.belvo.com/docs/institution).",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.RequestTimeoutError",
              "root.PreconditionError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/api/recurring-expenses",
            "request": {
              "body": {
                "properties": {
                  "date_from": {
                    "docs": "The date from which you want to start getting recurring expenses for, in \`YYYY-MM-DD\` format, within the last 365 days. When you use this parameter, you must also send \`date_to\`.



⚠️ The value of \`date_from\` cannot be greater than \`date_to\`.",
                    "type": "optional<string>",
                  },
                  "date_to": {
                    "docs": "The date you want to stop getting recurring expenses for, in \`YYYY-MM-DD\` format, within the last 365 days. When you use this parameter, you must also send \`date_from\`.



⚠️ The value of \`date_to\` cannot be greater than today's date (in other words, no future dates).",
                    "type": "optional<string>",
                  },
                  "link": {
                    "docs": "The \`link.id\` that you want to get information for.",
                    "type": "string",
                  },
                  "save_data": {
                    "docs": "Indicates whether or not to persist the data in Belvo. By default, this is set to \`true\` and we return a 201 Created response.
When set to \`false\`, the data won't be persisted and we return a 200 OK response.",
                    "type": "optional<boolean>",
                  },
                  "token": {
                    "docs": "The OTP token generated by the bank.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "RecurringExpensesRequest",
              "query-parameters": {
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok (when save_data=false)",
              "type": "list<root.RecurringExpenses>",
            },
          },
        },
      },
    },
    "riskInsights.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "DestroyRiskInsights": {
            "auth": true,
            "docs": "Delete a specific risk insight from your Belvo account.",
            "errors": [
              "root.UnauthorizedError",
              "root.NotFoundError",
            ],
            "method": "DELETE",
            "path": "/api/risk-insights/{id}",
            "path-parameters": {
              "id": {
                "docs": "The \`risk-insights.id\` that you want to delete",
                "type": "string",
              },
            },
          },
          "DetailRiskInsights": {
            "auth": true,
            "docs": "Get the details of a specific risk insight.",
            "errors": [
              "root.UnauthorizedError",
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/api/risk-insights/{id}",
            "path-parameters": {
              "id": {
                "docs": "The \`risk-insights.id\` you want to get detailed information about.",
                "type": "string",
              },
            },
            "request": {
              "name": "DetailRiskInsightsRequest",
              "query-parameters": {
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "list<root.RiskInsights>",
            },
          },
          "ListRiskInsights": {
            "auth": true,
            "docs": "Get a paginated list of all risk insight analyses in your Belvo account. By default, we return up to 100 results per page.",
            "errors": [
              "root.UnauthorizedError",
            ],
            "method": "GET",
            "path": "/api/risk-insights",
            "request": {
              "name": "ListRiskInsightsRequest",
              "query-parameters": {
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "id": {
                  "allow-multiple": undefined,
                  "docs": "Return information for this \`risk-insight.id\`.",
                  "type": "optional<string>",
                },
                "id__in": {
                  "allow-multiple": undefined,
                  "docs": "Return information for these \`risk-insight.id\`s.",
                  "type": "optional<string>",
                },
                "link": {
                  "allow-multiple": undefined,
                  "docs": "The \`link.id\` you want to filter by.

ℹ️ We highly recommend adding the \`link.id\` filter in order to improve your performance.
",
                  "type": "optional<string>",
                },
                "link__in": {
                  "allow-multiple": undefined,
                  "docs": "Return information for these \`link.id\`s.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "page": {
                  "allow-multiple": undefined,
                  "docs": "A page number within the paginated result set.",
                  "type": "optional<integer>",
                },
                "page_size": {
                  "allow-multiple": undefined,
                  "docs": "Indicates how many results to return per page. By default we return 100 results per page. 

ℹ️ The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).
",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.RiskInsightsPaginatedResponse",
            },
          },
          "PatchRiskInsights": {
            "auth": true,
            "docs": "Used to resume an Risk insights retrieve session that was paused because an MFA token was required by the institution.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.RequestTimeoutError",
              "root.PreconditionError",
              "root.InternalServerError",
            ],
            "method": "PATCH",
            "path": "/api/risk-insights",
            "request": {
              "body": {
                "docs": "A JSON object containing a session UUID and a MFA token",
                "type": "root.PatchBody",
              },
              "name": "PatchRiskInsightsRequest",
              "query-parameters": {
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok (when save_data=false)",
              "type": "list<root.RiskInsights>",
            },
          },
          "RetrieveRiskInsights": {
            "auth": true,
            "docs": "Request the risk insights for a given link ID.

If you need to know the currency of the account, just do a GET Details to the accounts endpoint (using the ID you receive from the accounts response).",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.RequestTimeoutError",
              "root.PreconditionError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/api/risk-insights",
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.StandardRequest",
              },
              "name": "RetrieveRiskInsightsRequest",
              "query-parameters": {
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok (when save_data=false)",
              "type": "list<root.RiskInsights>",
            },
          },
        },
      },
    },
    "secretKeys.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "CreateSecretKeys": {
            "auth": true,
            "docs": "Request API keys to use with Belvo's Payments API.

You will need to send through the username and password (in plain text) you use to login to the Belvo dashboard in the Authorization header.

For example:

  \`\`\`curl
  POST https://api.belvo.com/payments/secret-keys/
  Authorization: Basic username:password
  \`\`\`
",
            "errors": [
              "root.BadRequestError",
              "root.RequestTimeoutError",
            ],
            "method": "POST",
            "path": "/payments/secret-keys",
            "response": {
              "docs": "Ok",
              "type": "list<root.SecretKeys>",
            },
          },
          "ListSecretKeys": {
            "auth": true,
            "docs": "Get a paginated list of all existing secret keys in your Belvo account. We return up to 100 results per page.


  **Note**: We only return the ID of the secret keys.",
            "errors": [
              "root.UnauthorizedError",
            ],
            "method": "GET",
            "path": "/payments/secret-keys",
            "response": {
              "docs": "OK",
              "type": "root.SecretKeysPaginatedResponse",
            },
          },
        },
      },
    },
    "taxComplianceStatus.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "DestroyTaxComplianceStatus": {
            "auth": true,
            "docs": "Delete a specific Tax compliance status from your Belvo account.",
            "errors": [
              "root.UnauthorizedError",
              "root.NotFoundError",
            ],
            "method": "DELETE",
            "path": "/api/tax-compliance-status/{id}",
            "path-parameters": {
              "id": {
                "docs": "The \`tax-compliance-status.id\` that you want to delete.",
                "type": "string",
              },
            },
          },
          "DetailTaxComplianceStatus": {
            "auth": true,
            "docs": "Get the details of a specific Tax compliance status.",
            "errors": [
              "root.UnauthorizedError",
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/api/tax-compliance-status/{id}",
            "path-parameters": {
              "id": {
                "docs": "The \`tax-compliance-status.id\` you want to get detailed information about.",
                "type": "string",
              },
            },
            "request": {
              "name": "DetailTaxComplianceStatusRequest",
              "query-parameters": {
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.TaxComplianceStatus",
            },
          },
          "ListTaxComplianceStatus": {
            "auth": true,
            "docs": "Get a paginated list of all existing Tax compliance statuses in your Belvo account. By default, we return up to 100 results per page.",
            "errors": [
              "root.UnauthorizedError",
            ],
            "method": "GET",
            "path": "/api/tax-compliance-status",
            "request": {
              "name": "ListTaxComplianceStatusRequest",
              "query-parameters": {
                "created_at__gt": {
                  "allow-multiple": undefined,
                  "docs": "Return tax compliance statuses that were last updated in Belvo's database after this date (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "created_at__gte": {
                  "allow-multiple": undefined,
                  "docs": "Return tax compliance statuses that were last updated in Belvo's database after or on this date (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "created_at__lt": {
                  "allow-multiple": undefined,
                  "docs": "Return tax compliance statuses that were last updated in Belvo's database before this date (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "created_at__lte": {
                  "allow-multiple": undefined,
                  "docs": "Return tax compliance statuses that were last updated in Belvo's database before or on this date (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "created_at__range": {
                  "allow-multiple": undefined,
                  "docs": "Return tax compliance statuses that were last updated in Belvo's database between two dates (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "id": {
                  "allow-multiple": undefined,
                  "docs": "Return information for this \`tax-compliance-status.id\`.",
                  "type": "optional<string>",
                },
                "id__in": {
                  "allow-multiple": undefined,
                  "docs": "Return information for these \`tax-compliance-status.id\`s.",
                  "type": "optional<string>",
                },
                "link": {
                  "allow-multiple": undefined,
                  "docs": "The \`link.id\` you want to filter by.

ℹ️ We highly recommend adding the \`link.id\` filter in order to improve your performance.
",
                  "type": "optional<string>",
                },
                "link__in": {
                  "allow-multiple": undefined,
                  "docs": "Return information for these \`link.id\`s.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "page": {
                  "allow-multiple": undefined,
                  "docs": "A page number within the paginated result set.",
                  "type": "optional<integer>",
                },
                "page_size": {
                  "allow-multiple": undefined,
                  "docs": "Indicates how many results to return per page. By default we return 100 results per page. 

ℹ️ The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).
",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.TaxComplianceStatusPaginatedResponse",
            },
          },
          "RetrieveTaxComplianceStatus": {
            "auth": true,
            "docs": "Retrieve the Tax compliance status information for a specific fiscal link.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.RequestTimeoutError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/api/tax-compliance-status",
            "request": {
              "body": {
                "properties": {
                  "attach_pdf": {
                    "docs": "When set to \`true\`, you will receive the PDF in binary format in the response.",
                    "type": "optional<boolean>",
                  },
                  "link": {
                    "docs": "The fiscal \`link.id\` to use.",
                    "type": "string",
                  },
                  "save_data": {
                    "docs": "Indicates whether or not to persist the data in Belvo. By default, this is set to \`true\` and we return a 201 Created response.
When set to \`false\`, the data won't be persisted and we return a 200 OK response.",
                    "type": "optional<boolean>",
                  },
                },
              },
              "headers": undefined,
              "name": "TaxComplianceStatusRequest",
              "query-parameters": {
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok (when \`save_data=false\`)",
              "type": "root.TaxComplianceStatus",
            },
          },
        },
      },
    },
    "taxDeclarations.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "DestroyTaxDeclaration": {
            "auth": true,
            "docs": "Delete a specific Tax declaration from your Belvo account.",
            "errors": [
              "root.UnauthorizedError",
              "root.NotFoundError",
            ],
            "method": "DELETE",
            "path": "/api/tax-declarations/{id}",
            "path-parameters": {
              "id": {
                "docs": "The \`tax-declration.id\` that you want to delete.",
                "type": "string",
              },
            },
          },
          "DetailTaxDeclaration": {
            "auth": true,
            "docs": "Get the details of a specific Tax declaration.",
            "errors": [
              "root.UnauthorizedError",
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/api/tax-declarations/{id}",
            "path-parameters": {
              "id": {
                "docs": "The \`tax-declaration.id\` you want to get detailed information about.",
                "type": "string",
              },
            },
            "request": {
              "name": "DetailTaxDeclarationRequest",
              "query-parameters": {
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.DetailTaxDeclarationResponse",
            },
          },
          "ListTaxDeclarations": {
            "auth": true,
            "docs": "Get a paginated list of all existing tax declarations in your Belvo account. By default, we return up to 100 results per page.",
            "errors": [
              "root.UnauthorizedError",
            ],
            "method": "GET",
            "path": "/api/tax-declarations",
            "request": {
              "name": "ListTaxDeclarationsRequest",
              "query-parameters": {
                "created_at__gt": {
                  "allow-multiple": undefined,
                  "docs": "Return tax declarations that were last updated in Belvo's database after this date (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "created_at__gte": {
                  "allow-multiple": undefined,
                  "docs": "Return tax declarations that were last updated in Belvo's database after or on this date (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "created_at__lt": {
                  "allow-multiple": undefined,
                  "docs": "Return tax declarations that were last updated in Belvo's database before this date (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "created_at__lte": {
                  "allow-multiple": undefined,
                  "docs": "Return tax declarations that were last updated in Belvo's database before or on this date (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "created_at__range": {
                  "allow-multiple": undefined,
                  "docs": "Return tax declarations that were last updated in Belvo's database between two dates (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "id": {
                  "allow-multiple": undefined,
                  "docs": "Return information for this \`tax-declaration.id\`.",
                  "type": "optional<string>",
                },
                "id__in": {
                  "allow-multiple": undefined,
                  "docs": "Return information for these \`tax-declaration.id\`s.",
                  "type": "optional<string>",
                },
                "link": {
                  "allow-multiple": undefined,
                  "docs": "The \`link.id\` you want to filter by.

ℹ️ We highly recommend adding the \`link.id\` filter in order to improve your performance.
",
                  "type": "optional<string>",
                },
                "link__in": {
                  "allow-multiple": undefined,
                  "docs": "Return information for these \`link.id\`s.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "page": {
                  "allow-multiple": undefined,
                  "docs": "A page number within the paginated result set.",
                  "type": "optional<integer>",
                },
                "page_size": {
                  "allow-multiple": undefined,
                  "docs": "Indicates how many results to return per page. By default we return 100 results per page. 

ℹ️ The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).
",
                  "type": "optional<integer>",
                },
                "year": {
                  "allow-multiple": undefined,
                  "docs": "Return tax declarations for this year (\`YYYY\`).",
                  "type": "optional<string>",
                },
                "year__gt": {
                  "allow-multiple": undefined,
                  "docs": "Return tax declarations for after this year (\`YYYY\`).",
                  "type": "optional<string>",
                },
                "year__gte": {
                  "allow-multiple": undefined,
                  "docs": "Return tax declarations for this year or after (\`YYYY\`).",
                  "type": "optional<string>",
                },
                "year__lt": {
                  "allow-multiple": undefined,
                  "docs": "Return tax declarations for before this year (\`YYYY\`).",
                  "type": "optional<string>",
                },
                "year__lte": {
                  "allow-multiple": undefined,
                  "docs": "Return tax declarations for this year or earlier (\`YYYY\`).",
                  "type": "optional<string>",
                },
                "year__range": {
                  "allow-multiple": undefined,
                  "docs": "Return tax declarations between these two years (\`YYYY\`).",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.ListTaxDeclarationsResponse",
            },
          },
          "RetrieveTaxDeclarations": {
            "auth": true,
            "docs": "Retrieve tax declaration information for a specific fiscal link.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.RequestTimeoutError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/api/tax-declarations",
            "request": {
              "body": {
                "properties": {
                  "attach_pdf": {
                    "docs": "When this is set to \`true\`, you will receive the PDF as a binary string in the response.",
                    "type": "optional<boolean>",
                  },
                  "link": {
                    "docs": "The fiscal \`link.id\` you want specific tax declaration information for.",
                    "type": "string",
                  },
                  "save_data": {
                    "docs": "Indicates whether or not to persist the data in Belvo. By default, this is set to \`true\` and we return a 201 Created response.
When set to \`false\`, the data won't be persisted and we return a 200 OK response.",
                    "type": "optional<boolean>",
                  },
                  "year_from": {
                    "docs": "The starting year you want to get tax declaration for, in \`YYYY\` format.
",
                    "type": "string",
                  },
                  "year_to": {
                    "docs": "The year you want to stop getting tax declaration for, in \`YYYY\` format.
",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "TaxDeclarationsRequest",
              "query-parameters": {
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok (when \`save_data=false\`)",
              "type": "list<root.RetrieveTaxDeclarationsResponseItem>",
            },
          },
        },
      },
    },
    "taxRetentions.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "DestroyTaxRetention": {
            "auth": true,
            "docs": "Delete a specific tax retention from your Belvo account.",
            "errors": [
              "root.UnauthorizedError",
              "root.NotFoundError",
            ],
            "method": "DELETE",
            "path": "/api/tax-retentions/{id}",
            "path-parameters": {
              "id": {
                "docs": "The \`tax-retention.id\` that you want to delete.",
                "type": "string",
              },
            },
          },
          "DetailTaxRetentions": {
            "auth": true,
            "docs": "Get the details of a specific tax retention.",
            "errors": [
              "root.UnauthorizedError",
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/api/tax-retentions/{id}",
            "path-parameters": {
              "id": {
                "docs": "The \`tax-retention.id\` you want to get detailed information about.",
                "type": "string",
              },
            },
            "request": {
              "name": "DetailTaxRetentionsRequest",
              "query-parameters": {
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.TaxRetentions",
            },
          },
          "ListTaxRetentions": {
            "auth": true,
            "docs": "Get a paginated list of all existing tax retentions in your Belvo account. We return up to 100 results per page.",
            "errors": [
              "root.UnauthorizedError",
            ],
            "method": "GET",
            "path": "/api/tax-retentions",
            "request": {
              "name": "ListTaxRetentionsRequest",
              "query-parameters": {
                "created_at__gt": {
                  "allow-multiple": undefined,
                  "docs": "Return tax retentions that were last updated in Belvo's database after this date (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "created_at__gte": {
                  "allow-multiple": undefined,
                  "docs": "Return tax retentions that were last updated in Belvo's database after or on this date (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "created_at__lt": {
                  "allow-multiple": undefined,
                  "docs": "Return tax retentions that were last updated in Belvo's database before this date (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "created_at__lte": {
                  "allow-multiple": undefined,
                  "docs": "Return tax retentions that were last updated in Belvo's database before or on this date (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "created_at__range": {
                  "allow-multiple": undefined,
                  "docs": "Return tax retentions that were last updated in Belvo's database between two dates (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "link": {
                  "allow-multiple": undefined,
                  "docs": "The \`link.id\` you want to filter by.

ℹ️ We highly recommend adding the \`link.id\` filter in order to improve your performance.
",
                  "type": "optional<string>",
                },
                "link__in": {
                  "allow-multiple": undefined,
                  "docs": "Return information for these \`link.id\`s.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "page": {
                  "allow-multiple": undefined,
                  "docs": "A page number within the paginated result set.",
                  "type": "optional<integer>",
                },
                "page_size": {
                  "allow-multiple": undefined,
                  "docs": "Indicates how many results to return per page. By default we return 100 results per page. 

ℹ️ The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).
",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.TaxRetentionsPaginatedResponse",
            },
          },
          "RetrieveTaxRetentions": {
            "auth": true,
            "docs": "Retrieve tax retention information from a specific link. The maximum number of tax retentions that can be returned for a period is 500.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.RequestTimeoutError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/api/tax-retentions",
            "request": {
              "body": {
                "properties": {
                  "attach_xml": {
                    "docs": "When set to \`true\`, you will receive the XML tax retention in the response.",
                    "type": "optional<boolean>",
                  },
                  "date_from": {
                    "docs": "The date from which you want to start getting tax retentions for, in \`YYYY-MM-DD\` format.

⚠️ The value of \`date_from\` cannot be greater than \`date_to\`.
",
                    "type": "string",
                  },
                  "date_to": {
                    "docs": "The date you want to stop getting tax retentions for, in \`YYYY-MM-DD\` format.

⚠️ The number of days between \`date_from\` and \`date_to\` cannot be over 365.
",
                    "type": "string",
                  },
                  "link": {
                    "docs": "The \`link.id\` that you want to get information for.
",
                    "type": "string",
                  },
                  "save_data": {
                    "docs": "Indicates whether or not to persist the data in Belvo. By default, this is set to \`true\` and we return a 201 Created response.
When set to \`false\`, the data won't be persisted and we return a 200 OK response.",
                    "type": "optional<boolean>",
                  },
                  "type": {
                    "docs": undefined,
                    "type": "root.EnumTaxRetentionType",
                  },
                },
              },
              "headers": undefined,
              "name": "TaxRetentionsRequest",
              "query-parameters": {
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok (when \`save_data=false\`)",
              "type": "list<root.TaxRetentions>",
            },
          },
        },
      },
    },
    "taxReturns.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "DestroyTaxReturn": {
            "auth": true,
            "docs": "Delete a specific tax return from your Belvo account.",
            "errors": [
              "root.UnauthorizedError",
              "root.NotFoundError",
            ],
            "method": "DELETE",
            "path": "/api/tax-returns/{id}",
            "path-parameters": {
              "id": {
                "docs": "The ID of the tax return you want to delete.",
                "type": "string",
              },
            },
          },
          "DetailTaxReturn": {
            "auth": true,
            "docs": "Get the details of a specific tax return.",
            "errors": [
              "root.UnauthorizedError",
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/api/tax-returns/{id}",
            "path-parameters": {
              "id": {
                "docs": "The \`tax-return.id\` you want to get detailed information about.",
                "type": "string",
              },
            },
            "request": {
              "name": "DetailTaxReturnRequest",
              "query-parameters": {
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.DetailTaxReturnResponse",
            },
          },
          "ListTaxReturns": {
            "auth": true,
            "docs": "Get a paginated list of all existing tax returns in your Belvo account. By default, we return up to 100 results per page. The results will include a mix of both monthly and yearly tax returns.",
            "errors": [
              "root.UnauthorizedError",
            ],
            "method": "GET",
            "path": "/api/tax-returns",
            "request": {
              "name": "ListTaxReturnsRequest",
              "query-parameters": {
                "created_at__gt": {
                  "allow-multiple": undefined,
                  "docs": "Return tax returns that were last updated in Belvo's database after this date (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "created_at__gte": {
                  "allow-multiple": undefined,
                  "docs": "Return tax returns that were last updated in Belvo's database after or on this date (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "created_at__lt": {
                  "allow-multiple": undefined,
                  "docs": "Return tax returns that were last updated in Belvo's database before this date (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "created_at__lte": {
                  "allow-multiple": undefined,
                  "docs": "Return tax returns that were last updated in Belvo's database before or on this date (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "created_at__range": {
                  "allow-multiple": undefined,
                  "docs": "Return tax returns that were last updated in Belvo's database between two dates (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "ejercicio": {
                  "allow-multiple": undefined,
                  "docs": "Return tax returns for exactly this year (\`YYYY\`).",
                  "type": "optional<string>",
                },
                "ejercicio__gt": {
                  "allow-multiple": undefined,
                  "docs": "Return tax returns for after this year (\`YYYY\`).",
                  "type": "optional<string>",
                },
                "ejercicio__gte": {
                  "allow-multiple": undefined,
                  "docs": "Return tax returns for this year or later (\`YYYY\`).",
                  "type": "optional<string>",
                },
                "ejercicio__lt": {
                  "allow-multiple": undefined,
                  "docs": "Return tax returns for before this year (\`YYYY\`).",
                  "type": "optional<string>",
                },
                "ejercicio__lte": {
                  "allow-multiple": undefined,
                  "docs": "Return tax returns for this year and earlier (\`YYYY\`).",
                  "type": "optional<string>",
                },
                "ejercicio__range": {
                  "allow-multiple": undefined,
                  "docs": "Return tax returns for this range of years (\`YYYY\`).",
                  "type": "optional<string>",
                },
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "id": {
                  "allow-multiple": undefined,
                  "docs": "Return information for this \`tax-return.id\`.",
                  "type": "optional<string>",
                },
                "id__in": {
                  "allow-multiple": undefined,
                  "docs": "Return information for these \`tax-return.id\`s.",
                  "type": "optional<string>",
                },
                "link": {
                  "allow-multiple": undefined,
                  "docs": "The \`link.id\` you want to filter by.

ℹ️ We highly recommend adding the \`link.id\` filter in order to improve your performance.
",
                  "type": "optional<string>",
                },
                "link__in": {
                  "allow-multiple": undefined,
                  "docs": "Return information for these \`link.id\`s.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "page": {
                  "allow-multiple": undefined,
                  "docs": "A page number within the paginated result set.",
                  "type": "optional<integer>",
                },
                "page_size": {
                  "allow-multiple": undefined,
                  "docs": "Indicates how many results to return per page. By default we return 100 results per page. 

ℹ️ The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).
",
                  "type": "optional<integer>",
                },
                "tipo_declaracion": {
                  "allow-multiple": undefined,
                  "docs": "Return tax returns with this declaration type.",
                  "type": "optional<string>",
                },
                "tipo_declaracion__in": {
                  "allow-multiple": undefined,
                  "docs": "Return tax returns with these declaration types.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.ListTaxReturnsResponse",
            },
          },
          "RetrieveTaxReturns": {
            "auth": true,
            "docs": "Retrieve tax return information for a specific fiscal link.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.RequestTimeoutError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/api/tax-returns",
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.RetrieveTaxReturnsRequestBody",
              },
              "name": "RetrieveTaxReturnsRequest",
              "query-parameters": {
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok (when \`save_data=false\`)",
              "type": "list<root.RetrieveTaxReturnsResponseItem>",
            },
          },
        },
      },
    },
    "taxStatus.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "DestroyTaxStatus": {
            "auth": true,
            "docs": "Delete a specific tax status from your Belvo account.",
            "errors": [
              "root.UnauthorizedError",
              "root.NotFoundError",
            ],
            "method": "DELETE",
            "path": "/api/tax-status/{id}",
            "path-parameters": {
              "id": {
                "docs": "the \`tax-status.id\` that you want to delete",
                "type": "string",
              },
            },
          },
          "DetailTaxStatus": {
            "auth": true,
            "docs": "Get the details of a specific tax status.",
            "errors": [
              "root.UnauthorizedError",
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/api/tax-status/{id}",
            "path-parameters": {
              "id": {
                "docs": "The \`tax-status.id\` you want to get detailed information about.",
                "type": "string",
              },
            },
            "request": {
              "name": "DetailTaxStatusRequest",
              "query-parameters": {
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.DetailTaxStatusResponse",
            },
          },
          "ListTaxStatus": {
            "auth": true,
            "docs": "Get a paginated list of all existing tax status in your Belvo account. By default, we return up to 100 results per page.",
            "errors": [
              "root.UnauthorizedError",
            ],
            "method": "GET",
            "path": "/api/tax-status",
            "request": {
              "name": "ListTaxStatusRequest",
              "query-parameters": {
                "created_at__gt": {
                  "allow-multiple": undefined,
                  "docs": "Return tax statuses that were last updated in Belvo's database after this date (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "created_at__gte": {
                  "allow-multiple": undefined,
                  "docs": "Return tax statuses that were last updated in Belvo's database after or on this date (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "created_at__lt": {
                  "allow-multiple": undefined,
                  "docs": "Return tax statuses that were last updated in Belvo's database before this date (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "created_at__lte": {
                  "allow-multiple": undefined,
                  "docs": "Return tax statuses that were last updated in Belvo's database before or on this date (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "created_at__range": {
                  "allow-multiple": undefined,
                  "docs": "Return tax statuses that were last updated in Belvo's database between two dates (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "id": {
                  "allow-multiple": undefined,
                  "docs": "Return information for this \`tax-status.id\`.",
                  "type": "optional<string>",
                },
                "id__in": {
                  "allow-multiple": undefined,
                  "docs": "Return information for these \`tax-status.id\`s.",
                  "type": "optional<string>",
                },
                "link": {
                  "allow-multiple": undefined,
                  "docs": "The \`link.id\` you want to filter by.

ℹ️ We highly recommend adding the \`link.id\` filter in order to improve your performance.
",
                  "type": "optional<string>",
                },
                "link__in": {
                  "allow-multiple": undefined,
                  "docs": "Return information for these \`link.id\`s.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "page": {
                  "allow-multiple": undefined,
                  "docs": "A page number within the paginated result set.",
                  "type": "optional<integer>",
                },
                "page_size": {
                  "allow-multiple": undefined,
                  "docs": "Indicates how many results to return per page. By default we return 100 results per page. 

ℹ️ The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).
",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.TaxStatusPaginatedResponse",
            },
          },
          "RetrieveTaxStatus": {
            "auth": true,
            "docs": "Retrieve tax status information for a specific fiscal link.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.RequestTimeoutError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/api/tax-status",
            "request": {
              "body": {
                "properties": {
                  "attach_pdf": {
                    "docs": "When set to \`true\`, you will receive the PDF in binary format in the response.",
                    "type": "optional<boolean>",
                  },
                  "link": {
                    "docs": "The fiscal \`link.id\` to use.",
                    "type": "string",
                  },
                  "save_data": {
                    "docs": "Indicates whether or not to persist the data in Belvo. By default, this is set to \`true\` and we return a 201 Created response.
When set to \`false\`, the data won't be persisted and we return a 200 OK response.",
                    "type": "optional<boolean>",
                  },
                },
              },
              "headers": undefined,
              "name": "TaxStatusRequest",
              "query-parameters": {
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok (when \`save_data=false\`)",
              "type": "root.RetrieveTaxStatusResponse",
            },
          },
        },
      },
    },
    "transactions.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "DestroyTransaction": {
            "auth": true,
            "docs": "Delete a specific transaction from your Belvo account.",
            "errors": [
              "root.UnauthorizedError",
              "root.NotFoundError",
            ],
            "method": "DELETE",
            "path": "/api/transactions/{id}",
            "path-parameters": {
              "id": {
                "docs": "The \`transaction.id\` that you want to delete.",
                "type": "string",
              },
            },
          },
          "DetailTransaction": {
            "auth": true,
            "docs": "Get the details of a specific transaction.",
            "errors": [
              "root.UnauthorizedError",
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/api/transactions/{id}",
            "path-parameters": {
              "id": {
                "docs": "The \`transaction.id\` you want to get detailed information about.",
                "type": "string",
              },
            },
            "request": {
              "name": "DetailTransactionRequest",
              "query-parameters": {
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.Transaction",
            },
          },
          "ListTransactions": {
            "auth": true,
            "docs": "Get a paginated list of all existing transactions in your Belvo account. By default, we return up to 100 results per page.",
            "errors": [
              "root.UnauthorizedError",
            ],
            "method": "GET",
            "path": "/api/transactions",
            "request": {
              "name": "ListTransactionsRequest",
              "query-parameters": {
                "account": {
                  "allow-multiple": undefined,
                  "docs": "The \`account.id\` you want to filter by.

ℹ️ We highly recommend adding the \`account.id\` filter in order to improve your performance.
",
                  "type": "optional<string>",
                },
                "account__balance__available": {
                  "allow-multiple": undefined,
                  "docs": "Return transactions that have a \`account.balance.available\` matching exactly this value.",
                  "type": "optional<string>",
                },
                "account__balance__available__lt": {
                  "allow-multiple": undefined,
                  "docs": "Return transactions that have a \`account.balance.available\` less than this value.",
                  "type": "optional<string>",
                },
                "account__balance__available__lte": {
                  "allow-multiple": undefined,
                  "docs": "Return transactions that have a \`account.balance.available\` less than or equal to this value.",
                  "type": "optional<string>",
                },
                "account__balance__available__range": {
                  "allow-multiple": undefined,
                  "docs": "Return transactions that have a \`account.balance.available\` within a range of two values.",
                  "type": "optional<string>",
                },
                "account__balance__current": {
                  "allow-multiple": undefined,
                  "docs": "Return transactions that have a \`account.balance.current\` matching exactly this value.",
                  "type": "optional<string>",
                },
                "account__balance__current__gt": {
                  "allow-multiple": undefined,
                  "docs": "Return transactions that have a \`account.balance.current\` greater than this value.",
                  "type": "optional<string>",
                },
                "account__balance__current__gte": {
                  "allow-multiple": undefined,
                  "docs": "Return transactions that have a \`account.balance.current\` greater than or equal to this value.",
                  "type": "optional<string>",
                },
                "account__balance__current__lt": {
                  "allow-multiple": undefined,
                  "docs": "Return transactions that have a \`account.balance.current\` less than this value.",
                  "type": "optional<string>",
                },
                "account__balance__current__lte": {
                  "allow-multiple": undefined,
                  "docs": "Return transactions that have a \`account.balance.current\` less than or equal to this value.",
                  "type": "optional<string>",
                },
                "account__balance__current__range": {
                  "allow-multiple": undefined,
                  "docs": "Return transactions that have a \`account.balance.current\` within a range of two values.",
                  "type": "optional<string>",
                },
                "account__in": {
                  "allow-multiple": undefined,
                  "docs": "Return transactions only for these \`account.id\`s.",
                  "type": "optional<string>",
                },
                "account_type": {
                  "allow-multiple": undefined,
                  "docs": "Return information only for transactions matching this account type, as designated by the institution.",
                  "type": "optional<string>",
                },
                "account_type__in": {
                  "allow-multiple": undefined,
                  "docs": "Return information only for transactions matching these account types, as designated by the institution.",
                  "type": "optional<string>",
                },
                "accounting_date": {
                  "allow-multiple": undefined,
                  "docs": "Return transactions that were processed by the institution on exactly this date (\`YYYY-MM-DD\` or full ISO-8601 timestamp).",
                  "type": "optional<string>",
                },
                "accounting_date__gt": {
                  "allow-multiple": undefined,
                  "docs": "Return transactions that were processed by the institution after this date (\`YYYY-MM-DD\` or full ISO-8601 timestamp).",
                  "type": "optional<string>",
                },
                "accounting_date__gte": {
                  "allow-multiple": undefined,
                  "docs": "Return transactions that were processed by the institution on this date or later (\`YYYY-MM-DD\` or full ISO-8601 timestamp).",
                  "type": "optional<string>",
                },
                "accounting_date__lt": {
                  "allow-multiple": undefined,
                  "docs": "Return transactions that were processed by the institution before this date (\`YYYY-MM-DD\` or full ISO-8601 timestamp).",
                  "type": "optional<string>",
                },
                "accounting_date__lte": {
                  "allow-multiple": undefined,
                  "docs": "Return transactions that were processed by the institution on this date or earlier (\`YYYY-MM-DD\` or full ISO-8601 timestamp).",
                  "type": "optional<string>",
                },
                "accounting_date__range": {
                  "allow-multiple": undefined,
                  "docs": "Return transactions that were processed by the institution in this date range (\`YYYY-MM-DD\` or full ISO-8601 timestamp).",
                  "type": "optional<string>",
                },
                "amount": {
                  "allow-multiple": undefined,
                  "docs": "Return transactions matching exactly this value.",
                  "type": "optional<string>",
                },
                "amount__gt": {
                  "allow-multiple": undefined,
                  "docs": "Return transactions greater than this value.",
                  "type": "optional<string>",
                },
                "amount__gte": {
                  "allow-multiple": undefined,
                  "docs": "Return transactions greater than or equal to this value.",
                  "type": "optional<string>",
                },
                "amount__lt": {
                  "allow-multiple": undefined,
                  "docs": "Return transactions less than this value.",
                  "type": "optional<string>",
                },
                "amount__lte": {
                  "allow-multiple": undefined,
                  "docs": "Return transactions less than or equal to this value.",
                  "type": "optional<string>",
                },
                "amount__range": {
                  "allow-multiple": undefined,
                  "docs": "Return transactions between these two values.",
                  "type": "optional<string>",
                },
                "collected_at": {
                  "allow-multiple": undefined,
                  "docs": "Return transactions that were retrieved from the institution on this date (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "collected_at__gt": {
                  "allow-multiple": undefined,
                  "docs": "Return transactions that were retrieved from the institution after this date (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "collected_at__gte": {
                  "allow-multiple": undefined,
                  "docs": "Return transactions that were retrieved from the institution after or on this date (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "collected_at__lt": {
                  "allow-multiple": undefined,
                  "docs": "Return transactions that were retrieved from the institution before this date (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "collected_at__lte": {
                  "allow-multiple": undefined,
                  "docs": "Return transactions that were retrieved from the institution before or on this date (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "collected_at__range": {
                  "allow-multiple": undefined,
                  "docs": "Return transactions that were retrieved from the institution between two dates (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "created_at": {
                  "allow-multiple": undefined,
                  "docs": "Return transactions that were last updated in Belvo's database on this date (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "created_at__gt": {
                  "allow-multiple": undefined,
                  "docs": "Return transactions that were last updated in Belvo's database after this date (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "created_at__gte": {
                  "allow-multiple": undefined,
                  "docs": "Return transactions that were last updated in Belvo's database after or on this date (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "created_at__lt": {
                  "allow-multiple": undefined,
                  "docs": "Return transactions that were last updated in Belvo's database before this date (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "created_at__lte": {
                  "allow-multiple": undefined,
                  "docs": "Return transactions that were last updated in Belvo's database before or on this date (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "created_at__range": {
                  "allow-multiple": undefined,
                  "docs": "Return transactions that were last updated in Belvo's database between two dates (\`YYYY-MM-DD\` or full \`ISO-8601\` timestamp).",
                  "type": "optional<string>",
                },
                "credit_card_data__bill_name__in": {
                  "allow-multiple": undefined,
                  "docs": "Return transactions for one of these bill names.",
                  "type": "optional<string>",
                },
                "currency": {
                  "allow-multiple": undefined,
                  "docs": "Return transactions in only this three-letter currency code.",
                  "type": "optional<string>",
                },
                "currency__in": {
                  "allow-multiple": undefined,
                  "docs": "Return transactions in one of these three-letter currency codes.",
                  "type": "optional<string>",
                },
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "link": {
                  "allow-multiple": undefined,
                  "docs": "The \`link.id\` you want to filter by.

ℹ️ We highly recommend adding the \`account.id\` filter as well in order to improve your performance.
",
                  "type": "string",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "page": {
                  "allow-multiple": undefined,
                  "docs": "A page number within the paginated result set.",
                  "type": "optional<integer>",
                },
                "page_size": {
                  "allow-multiple": undefined,
                  "docs": "Indicates how many results to return per page. By default we return 100 results per page.

ℹ️ The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).
",
                  "type": "optional<integer>",
                },
                "reference": {
                  "allow-multiple": undefined,
                  "docs": "Returns transactions with this institution-assigned reference number.",
                  "type": "optional<string>",
                },
                "reference__in": {
                  "allow-multiple": undefined,
                  "docs": "Returns transactions with these institution-assigned reference numbers.",
                  "type": "optional<string>",
                },
                "status": {
                  "allow-multiple": undefined,
                  "docs": "Return transactions with this status. Can be either \`PENDING\`, \`PROCESSED\`, or \`UNCATEGORIZED\`.",
                  "type": "optional<string>",
                },
                "status__in": {
                  "allow-multiple": undefined,
                  "docs": "Return transactions with these statuses. Can be either \`PENDING\`, \`PROCESSED\`, or \`UNCATEGORIZED\`.",
                  "type": "optional<string>",
                },
                "type": {
                  "allow-multiple": undefined,
                  "docs": "Return transactions with this type. Can be either \`INFLOW\` or \`OUTFLOW\`.",
                  "type": "optional<string>",
                },
                "type__in": {
                  "allow-multiple": undefined,
                  "docs": "Return transactions with this types. Can be either \`INFLOW\` or \`OUTFLOW\`.",
                  "type": "optional<string>",
                },
                "value_date": {
                  "allow-multiple": undefined,
                  "docs": "Return transactions that occurred on exactly this date (\`YYYY-MM-DD\` or full ISO-8601 timestamp).",
                  "type": "optional<string>",
                },
                "value_date__gt": {
                  "allow-multiple": undefined,
                  "docs": "Return transactions that occurred after this date (\`YYYY-MM-DD\` or full ISO-8601 timestamp).",
                  "type": "optional<string>",
                },
                "value_date__gte": {
                  "allow-multiple": undefined,
                  "docs": "Return transactions that occurred on this date or later (\`YYYY-MM-DD\` or full ISO-8601 timestamp).",
                  "type": "optional<string>",
                },
                "value_date__lt": {
                  "allow-multiple": undefined,
                  "docs": "Return transactions that occurred before this date (\`YYYY-MM-DD\` or full ISO-8601 timestamp).",
                  "type": "optional<string>",
                },
                "value_date__lte": {
                  "allow-multiple": undefined,
                  "docs": "Return transactions that occurred on this date or earlier (\`YYYY-MM-DD\` or full ISO-8601 timestamp).",
                  "type": "optional<string>",
                },
                "value_date__range": {
                  "allow-multiple": undefined,
                  "docs": "Return transactions for this date range (\`YYYY-MM-DD\` or full ISO-8601 timestamp).",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.TransactionsPaginatedResponse",
            },
          },
          "PatchTransactions": {
            "auth": true,
            "docs": "Used to resume a Transaction retrieve session that was paused because an MFA token was required by the institution.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.RequestTimeoutError",
              "root.PreconditionError",
              "root.InternalServerError",
            ],
            "method": "PATCH",
            "path": "/api/transactions",
            "request": {
              "body": {
                "docs": "A JSON object containing a session UUID and a MFA token",
                "type": "root.PatchBody",
              },
              "name": "PatchTransactionsRequest",
              "query-parameters": {
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok (when \`save_data=false\`)",
              "type": "list<root.Transaction>",
            },
          },
          "RetrieveTransactions": {
            "auth": true,
            "docs": "Retrieve transactions for one or more accounts from a specific link.
<div style="background-color:#f4f6f8; border-left: 6px solid #0663F9;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right: 25px"> <strong>Info: </strong> When retrieving transactions, it is important to understand that the available transaction data ranges depend on each institution. <br><br>
If you try to access older information than what we can access, we will return all the data we can read within that date range. For example, if you request transactions for the last year and we can only access the last six months, we will return the information corresponding to these six months of data. </div>
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.RequestTimeoutError",
              "root.PreconditionError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/api/transactions",
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.TransactionsRequest",
              },
              "name": "RetrieveTransactionsRequest",
              "query-parameters": {
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Ok (when \`save_data=false\`)",
              "type": "list<root.Transaction>",
            },
          },
          "RetrieveTransactions_async": {
            "auth": true,
            "docs": "Retrieve transactions for one or more accounts from a specific link.
<div style="background-color:#f4f6f8; border-left: 6px solid #0663F9;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right: 25px"> <strong>Info: </strong> When retrieving transactions, it is important to understand that the available transaction data ranges depend on each institution. <br><br>
If you try to access older information than what we can access, we will return all the data we can read within that date range. For example, if you request transactions for the last year and we can only access the last six months, we will return the information corresponding to these six months of data. </div>
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.RequestTimeoutError",
              "root.PreconditionError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/api/transactions",
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.TransactionsRequest",
              },
              "headers": {
                "X-Belvo-Request-Mode": {
                  "docs": undefined,
                  "name": "belvoRequestMode",
                  "type": "literal<"async">",
                },
              },
              "name": "RetrieveTransactionsAsyncRequest",
              "query-parameters": {
                "fields": {
                  "allow-multiple": undefined,
                  "docs": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
                "omit": {
                  "allow-multiple": undefined,
                  "docs": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Accepted (when \`X-Belvo-Request-Mode\` is \`async\`)",
              "type": "root.AsynchronousAccepted202",
            },
          },
        },
      },
    },
  },
  "rootApiFile": {
    "auth": "basic",
    "default-environment": "Production",
    "display-name": "Belvo API Docs",
    "environments": {
      "Development": "https://development.belvo.com",
      "Production": "https://api.belvo.com",
      "Sandbox": "https://sandbox.belvo.com",
    },
    "error-discrimination": {
      "strategy": "status-code",
    },
    "name": "api",
  },
}
`;

exports[`open api converter buzzshot simple 1`] = `
{
  "definitionFiles": {
    "__package__.yml": {
      "errors": {},
      "service": undefined,
      "types": {
        "Game": {
          "docs": undefined,
          "properties": {
            "added_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "complete": {
              "docs": undefined,
              "type": "GameComplete",
            },
            "date": {
              "docs": undefined,
              "type": "string",
            },
            "extra_fields": {
              "docs": undefined,
              "type": "list<GameExtraFieldsItem>",
            },
            "group": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "photos": {
              "docs": undefined,
              "type": "optional<list<GamePhotosItem>>",
            },
            "room": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "start_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "time": {
              "docs": undefined,
              "type": "string",
            },
            "updated_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "GameComplete": {
          "docs": undefined,
          "properties": {
            "completed_at": {
              "docs": undefined,
              "type": "string",
            },
            "completion_time": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "did_win": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "hints": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "score": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "GameExtraFieldsItem": {
          "docs": undefined,
          "properties": {
            "key": {
              "docs": undefined,
              "type": "string",
            },
            "label": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "present": {
              "docs": undefined,
              "type": "boolean",
            },
            "value": {
              "docs": undefined,
              "type": "optional<map<string, unknown>>",
            },
          },
        },
        "GamePhotosItem": {
          "docs": undefined,
          "properties": {
            "added_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "photo": {
              "docs": undefined,
              "type": "string",
            },
            "processed_image": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "ready": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "Group": {
          "docs": undefined,
          "properties": {
            "added_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "date": {
              "docs": undefined,
              "type": "string",
            },
            "games": {
              "docs": undefined,
              "type": "optional<list<GroupGamesItem>>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "is_event": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "photos": {
              "docs": undefined,
              "type": "optional<list<GroupPhotosItem>>",
            },
            "players": {
              "docs": undefined,
              "type": "list<GroupPlayersItem>",
            },
            "start_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "time": {
              "docs": undefined,
              "type": "string",
            },
            "updated_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "GroupGamesItem": {
          "docs": undefined,
          "properties": {
            "added_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "complete": {
              "docs": undefined,
              "type": "GroupGamesItemComplete",
            },
            "date": {
              "docs": undefined,
              "type": "string",
            },
            "extra_fields": {
              "docs": undefined,
              "type": "list<GroupGamesItemExtraFieldsItem>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "room": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "start_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "time": {
              "docs": undefined,
              "type": "string",
            },
            "updated_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "GroupGamesItemComplete": {
          "docs": undefined,
          "properties": {
            "completed_at": {
              "docs": undefined,
              "type": "string",
            },
            "completion_time": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "did_win": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "hints": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "score": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "GroupGamesItemExtraFieldsItem": {
          "docs": undefined,
          "properties": {
            "key": {
              "docs": undefined,
              "type": "string",
            },
            "label": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "present": {
              "docs": undefined,
              "type": "boolean",
            },
            "value": {
              "docs": undefined,
              "type": "optional<map<string, unknown>>",
            },
          },
        },
        "GroupPhotosItem": {
          "docs": undefined,
          "properties": {
            "added_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "game": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "photo": {
              "docs": undefined,
              "type": "string",
            },
            "processed_image": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "ready": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "GroupPlayersItem": {
          "docs": undefined,
          "properties": {
            "added_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "email": {
              "docs": undefined,
              "type": "string",
            },
            "extra_fields": {
              "docs": undefined,
              "type": "list<GroupPlayersItemExtraFieldsItem>",
            },
            "first_name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "last_name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "phone": {
              "docs": undefined,
              "type": "string",
            },
            "player": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "signature": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "updated_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "GroupPlayersItemExtraFieldsItem": {
          "docs": undefined,
          "properties": {
            "key": {
              "docs": undefined,
              "type": "string",
            },
            "label": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "present": {
              "docs": undefined,
              "type": "boolean",
            },
            "value": {
              "docs": undefined,
              "type": "optional<map<string, unknown>>",
            },
          },
        },
        "ListAccountsResponse": {
          "docs": undefined,
          "properties": {
            "count": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "next": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "previous": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "results": {
              "docs": undefined,
              "type": "optional<list<Room>>",
            },
          },
        },
        "ListGamesResponse": {
          "docs": undefined,
          "properties": {
            "count": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "next": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "previous": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "results": {
              "docs": undefined,
              "type": "optional<list<Game>>",
            },
          },
        },
        "ListGroupsResponse": {
          "docs": undefined,
          "properties": {
            "count": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "next": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "previous": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "results": {
              "docs": undefined,
              "type": "optional<list<Group>>",
            },
          },
        },
        "ListLocationsResponse": {
          "docs": undefined,
          "properties": {
            "count": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "next": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "previous": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "results": {
              "docs": undefined,
              "type": "optional<list<Room>>",
            },
          },
        },
        "ListPhotosResponse": {
          "docs": undefined,
          "properties": {
            "count": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "next": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "previous": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "results": {
              "docs": undefined,
              "type": "optional<list<Photo>>",
            },
          },
        },
        "ListPlayersResponse": {
          "docs": undefined,
          "properties": {
            "count": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "next": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "previous": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "results": {
              "docs": undefined,
              "type": "optional<list<Player>>",
            },
          },
        },
        "Photo": {
          "docs": undefined,
          "properties": {
            "added_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "original_image": {
              "docs": undefined,
              "type": "string",
            },
            "processed": {
              "docs": undefined,
              "type": "list<PhotoProcessedItem>",
            },
          },
        },
        "PhotoProcessedItem": {
          "docs": undefined,
          "properties": {
            "added_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "game": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "group": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "photo": {
              "docs": undefined,
              "type": "string",
            },
            "processed_image": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "ready": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "Player": {
          "docs": undefined,
          "properties": {
            "added_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "email": {
              "docs": undefined,
              "type": "string",
            },
            "extra_fields": {
              "docs": undefined,
              "type": "list<PlayerExtraFieldsItem>",
            },
            "first_name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "last_name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "marketing_email_allowed": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "phone": {
              "docs": undefined,
              "type": "string",
            },
            "updated_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "PlayerExtraFieldsItem": {
          "docs": undefined,
          "properties": {
            "key": {
              "docs": undefined,
              "type": "string",
            },
            "label": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "present": {
              "docs": undefined,
              "type": "boolean",
            },
            "value": {
              "docs": undefined,
              "type": "optional<map<string, unknown>>",
            },
          },
        },
        "Room": {
          "docs": undefined,
          "properties": {
            "hidden": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "name": {
              "docs": undefined,
              "type": "string",
            },
          },
        },
      },
    },
    "api.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "listAccounts": {
            "auth": false,
            "docs": "",
            "errors": [],
            "method": "GET",
            "path": "/api/v2/accounts",
            "request": {
              "name": "listAccountsRequest",
              "query-parameters": {
                "page": {
                  "allow-multiple": undefined,
                  "docs": "A page number within the paginated result set.",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "",
              "type": "root.ListAccountsResponse",
            },
          },
          "listGames": {
            "auth": false,
            "docs": "",
            "errors": [],
            "method": "GET",
            "path": "/api/v2/games",
            "request": {
              "name": "listGamesRequest",
              "query-parameters": {
                "after": {
                  "allow-multiple": undefined,
                  "docs": "After",
                  "type": "optional<string>",
                },
                "before": {
                  "allow-multiple": undefined,
                  "docs": "Before",
                  "type": "optional<string>",
                },
                "complete": {
                  "allow-multiple": undefined,
                  "docs": "complete",
                  "type": "optional<string>",
                },
                "date": {
                  "allow-multiple": undefined,
                  "docs": "Date",
                  "type": "optional<string>",
                },
                "page": {
                  "allow-multiple": undefined,
                  "docs": "A page number within the paginated result set.",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "",
              "type": "root.ListGamesResponse",
            },
          },
          "listGroups": {
            "auth": false,
            "docs": "",
            "errors": [],
            "method": "GET",
            "path": "/api/v2/groups",
            "request": {
              "name": "listGroupsRequest",
              "query-parameters": {
                "complete": {
                  "allow-multiple": undefined,
                  "docs": "complete",
                  "type": "optional<string>",
                },
                "is_event": {
                  "allow-multiple": undefined,
                  "docs": "is_event",
                  "type": "optional<string>",
                },
                "page": {
                  "allow-multiple": undefined,
                  "docs": "A page number within the paginated result set.",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "",
              "type": "root.ListGroupsResponse",
            },
          },
          "listLocations": {
            "auth": false,
            "docs": "",
            "errors": [],
            "method": "GET",
            "path": "/api/v2/rooms",
            "request": {
              "name": "listLocationsRequest",
              "query-parameters": {
                "page": {
                  "allow-multiple": undefined,
                  "docs": "A page number within the paginated result set.",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "",
              "type": "root.ListLocationsResponse",
            },
          },
          "listPhotos": {
            "auth": false,
            "docs": "",
            "errors": [],
            "method": "GET",
            "path": "/api/v2/photos",
            "request": {
              "name": "listPhotosRequest",
              "query-parameters": {
                "page": {
                  "allow-multiple": undefined,
                  "docs": "A page number within the paginated result set.",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "",
              "type": "root.ListPhotosResponse",
            },
          },
          "listPlayers": {
            "auth": false,
            "docs": "",
            "errors": [],
            "method": "GET",
            "path": "/api/v2/players",
            "request": {
              "name": "listPlayersRequest",
              "query-parameters": {
                "page": {
                  "allow-multiple": undefined,
                  "docs": "A page number within the paginated result set.",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "",
              "type": "root.ListPlayersResponse",
            },
          },
          "retrieveAccount": {
            "auth": false,
            "docs": "",
            "errors": [],
            "method": "GET",
            "path": "/api/v2/accounts/{id}",
            "path-parameters": {
              "id": {
                "docs": "A unique integer value identifying this account.",
                "type": "string",
              },
            },
            "response": {
              "docs": "",
              "type": "root.Room",
            },
          },
          "retrieveGame": {
            "auth": false,
            "docs": "",
            "errors": [],
            "method": "GET",
            "path": "/api/v2/games/{id}",
            "path-parameters": {
              "id": {
                "docs": "A unique integer value identifying this group.",
                "type": "string",
              },
            },
            "request": {
              "name": "retrieveGameRequest",
              "query-parameters": {
                "after": {
                  "allow-multiple": undefined,
                  "docs": "After",
                  "type": "optional<string>",
                },
                "before": {
                  "allow-multiple": undefined,
                  "docs": "Before",
                  "type": "optional<string>",
                },
                "complete": {
                  "allow-multiple": undefined,
                  "docs": "complete",
                  "type": "optional<string>",
                },
                "date": {
                  "allow-multiple": undefined,
                  "docs": "Date",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "",
              "type": "root.Game",
            },
          },
          "retrieveGroup": {
            "auth": false,
            "docs": "",
            "errors": [],
            "method": "GET",
            "path": "/api/v2/groups/{id}",
            "path-parameters": {
              "id": {
                "docs": "A unique integer value identifying this group.",
                "type": "string",
              },
            },
            "request": {
              "name": "retrieveGroupRequest",
              "query-parameters": {
                "complete": {
                  "allow-multiple": undefined,
                  "docs": "complete",
                  "type": "optional<string>",
                },
                "is_event": {
                  "allow-multiple": undefined,
                  "docs": "is_event",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "",
              "type": "root.Group",
            },
          },
          "retrieveLocation": {
            "auth": false,
            "docs": "",
            "errors": [],
            "method": "GET",
            "path": "/api/v2/rooms/{id}",
            "path-parameters": {
              "id": {
                "docs": "A unique integer value identifying this location.",
                "type": "string",
              },
            },
            "response": {
              "docs": "",
              "type": "root.Room",
            },
          },
          "retrievePhoto": {
            "auth": false,
            "docs": "",
            "errors": [],
            "method": "GET",
            "path": "/api/v2/photos/{photo_id}",
            "path-parameters": {
              "photo_id": {
                "docs": "",
                "type": "string",
              },
            },
            "response": {
              "docs": "",
              "type": "root.Photo",
            },
          },
          "retrievePlayer": {
            "auth": false,
            "docs": "",
            "errors": [],
            "method": "GET",
            "path": "/api/v2/players/{id}",
            "path-parameters": {
              "id": {
                "docs": "A unique integer value identifying this player.",
                "type": "string",
              },
            },
            "response": {
              "docs": "",
              "type": "root.Player",
            },
          },
        },
      },
    },
  },
  "rootApiFile": {
    "auth": "bearer",
    "display-name": "",
    "error-discrimination": {
      "strategy": "status-code",
    },
    "name": "api",
  },
}
`;

exports[`open api converter devrev simple 1`] = `
{
  "definitionFiles": {
    "__package__.yml": {
      "errors": {
        "BadRequestError": {
          "status-code": 400,
          "type": "ErrorBadRequest",
        },
        "ForbiddenError": {
          "status-code": 403,
          "type": "ErrorForbidden",
        },
        "InternalServerError": {
          "status-code": 500,
          "type": "ErrorInternalServerError",
        },
        "NotFoundError": {
          "status-code": 404,
          "type": "ErrorNotFound",
        },
        "ServiceUnavailableError": {
          "status-code": 503,
          "type": "ErrorServiceUnavailable",
        },
        "TooManyRequestsError": {
          "status-code": 429,
          "type": "ErrorTooManyRequests",
        },
        "UnauthorizedError": {
          "status-code": 401,
          "type": "ErrorUnauthorized",
        },
      },
      "service": undefined,
      "types": {
        "ArtifactSummary": {
          "docs": undefined,
          "type": "AtomBaseSummary",
        },
        "ArtifactsLocateResponse": {
          "docs": "The response to getting an artifact's download URL.",
          "properties": {
            "expires_at": {
              "docs": "The expiration timestamp of the URL.",
              "type": "optional<string>",
            },
            "url": {
              "docs": "The artifact's download URL.",
              "type": "string",
            },
          },
        },
        "ArtifactsPrepareResponse": {
          "docs": "The response to preparing a URL to upload a file.",
          "properties": {
            "form_data": {
              "docs": "The POST policy form data.",
              "type": "list<ArtifactsPrepareResponseFormData>",
            },
            "id": {
              "docs": "The generated artifact's ID.",
              "type": "string",
            },
            "url": {
              "docs": "The URL that the file's data should be uploaded to.",
              "type": "string",
            },
          },
        },
        "ArtifactsPrepareResponseFormData": {
          "docs": undefined,
          "properties": {
            "key": {
              "docs": "Key of the form field.",
              "type": "string",
            },
            "value": {
              "docs": "Value corresponding to the key.",
              "type": "string",
            },
          },
        },
        "AtomBase": {
          "docs": undefined,
          "properties": {
            "created_by": {
              "docs": undefined,
              "type": "optional<UserSummary>",
            },
            "created_date": {
              "docs": "Timestamp when the object was created.",
              "type": "optional<string>",
            },
            "display_id": {
              "docs": "Human-readable object ID unique to the Dev organization.",
              "type": "optional<string>",
            },
            "id": {
              "docs": "Globally unique object ID.",
              "type": "string",
            },
            "modified_by": {
              "docs": undefined,
              "type": "optional<UserSummary>",
            },
            "modified_date": {
              "docs": "Timestamp when the object was last modified.",
              "type": "optional<string>",
            },
          },
        },
        "AtomBaseSummary": {
          "docs": undefined,
          "properties": {
            "display_id": {
              "docs": "Human-readable object ID unique to the Dev organization.",
              "type": "optional<string>",
            },
            "id": {
              "docs": "Globally unique object ID.",
              "type": "string",
            },
          },
        },
        "AuthConnection": {
          "base-properties": {
            "display_name": {
              "docs": "Display name of the authentication connection. This name will be
visible to all the users when they sign in to this Dev
organization. For example, if the display_name is 'abclogin', then
it would appear on the login button as 'Log in to abclogin'.
",
              "type": "optional<string>",
            },
            "enabled": {
              "docs": "Whether the authentication connection is enabled or disabled. If
set to false, the authentication connection will not show up on the
login screen as a login option.
",
              "type": "optional<boolean>",
            },
            "id": {
              "docs": "ID of the authentication connection.",
              "type": "string",
            },
          },
          "docs": "Connection object that specifies the configuration for an
authentication connection that is set up for a Dev organization.
",
          "union": {
            "google_apps": {
              "docs": undefined,
              "type": "AuthConnectionOptionsGoogleApps",
            },
            "oidc": {
              "docs": undefined,
              "type": "AuthConnectionOptionsOidc",
            },
            "samlp": {
              "docs": undefined,
              "type": "AuthConnectionOptionsSaml",
            },
            "social": {
              "docs": undefined,
              "type": "auth-connection-options-social",
            },
            "waad": {
              "docs": undefined,
              "type": "AuthConnectionOptionsAzureAd",
            },
          },
        },
        "AuthConnectionOptionsAzureAd": {
          "docs": "Object encapsulating the configuration parameters for an Azure AD
authentication connection.
",
          "properties": {
            "client_id": {
              "docs": "Client ID for the Azure authentication connection.",
              "type": "optional<string>",
            },
            "client_secret": {
              "docs": "Client secret for the Azure authentication connection.",
              "type": "optional<string>",
            },
            "domain": {
              "docs": "Domain URL of the Azure authentication connection.",
              "type": "optional<string>",
            },
          },
        },
        "AuthConnectionOptionsGoogleApps": {
          "docs": "Object encapsulating the configuration parameters for a Google Apps
authentication connection.
",
          "properties": {
            "client_id": {
              "docs": "Client ID for the Google Apps authentication connection.",
              "type": "optional<string>",
            },
            "client_secret": {
              "docs": "Client secret for the Google Apps authentication connection.
",
              "type": "optional<string>",
            },
            "tenant_domain": {
              "docs": "Tenant domain URL of the Google Apps authentication connection.
",
              "type": "optional<string>",
            },
          },
        },
        "AuthConnectionOptionsOidc": {
          "docs": "Object encapsulating the configuration parameters for an OIDC
authentication connection.
",
          "properties": {
            "client_id": {
              "docs": "Client ID for the OIDC authentication connection.",
              "type": "optional<string>",
            },
            "client_secret": {
              "docs": "Client secret for the OIDC authentication connection.",
              "type": "optional<string>",
            },
            "issuer": {
              "docs": "Issuer URL of the OIDC authentication connection.",
              "type": "optional<string>",
            },
          },
        },
        "AuthConnectionOptionsSaml": {
          "docs": "Object encapsulating the configuration parameters for a SAML
authentication connection.
",
          "properties": {
            "sign_in_endpoint": {
              "docs": "Sign In endpoint for the SAML authentication connection.",
              "type": "optional<string>",
            },
            "signing_cert": {
              "docs": "Signing certificate for the SAML authentication connection.
",
              "type": "optional<string>",
            },
          },
        },
        "AuthConnectionToggle": {
          "docs": undefined,
          "enum": [
            {
              "name": "disable",
              "value": "disable",
            },
            {
              "name": "enable",
              "value": "enable",
            },
          ],
        },
        "AuthConnectionType": {
          "docs": "Defines the type for the authentication connection. The configuration
for each authentication connection will depend on the type value.
",
          "enum": [
            {
              "name": "google_apps",
              "value": "google_apps",
            },
            {
              "name": "oidc",
              "value": "oidc",
            },
            {
              "name": "samlp",
              "value": "samlp",
            },
            {
              "name": "social",
              "value": "social",
            },
            {
              "name": "waad",
              "value": "waad",
            },
          ],
        },
        "AuthToken": {
          "docs": undefined,
          "properties": {
            "client_id": {
              "docs": "An identifier that represents the application that requested the
token. Only applicable for application access tokens.
",
              "type": "optional<string>",
            },
            "expires_at": {
              "docs": "The time at which the token expires.",
              "type": "optional<string>",
            },
            "issued_at": {
              "docs": "The time at which the token was issued.",
              "type": "optional<string>",
            },
            "requested_token_type": {
              "docs": undefined,
              "type": "optional<AuthTokenRequestedTokenType>",
            },
            "scopes": {
              "docs": "The scopes associated with the issued token.",
              "type": "optional<list<string>>",
            },
            "status": {
              "docs": undefined,
              "type": "optional<AuthTokenStatus>",
            },
            "subject": {
              "docs": "The subject of the token.",
              "type": "optional<string>",
            },
            "token_hint": {
              "docs": "A hint that identifies the token.",
              "type": "optional<string>",
            },
          },
        },
        "AuthTokenGrantType": {
          "docs": "Specifies the process of obtaining a token.",
          "enum": [
            {
              "name": "UrnDevrevParamsOauthGrantTypeTokenIssue",
              "value": "urn:devrev:params:oauth:grant-type:token-issue",
            },
            {
              "name": "UrnIetfParamsOauthGrantTypeTokenExchange",
              "value": "urn:ietf:params:oauth:grant-type:token-exchange",
            },
          ],
        },
        "AuthTokenRequestedTokenType": {
          "docs": "The type of the requested token.",
          "enum": [
            {
              "name": "UrnDevrevParamsOauthTokenTypeAat",
              "value": "urn:devrev:params:oauth:token-type:aat",
            },
            {
              "name": "UrnDevrevParamsOauthTokenTypeAatPublic",
              "value": "urn:devrev:params:oauth:token-type:aat:public",
            },
            {
              "name": "UrnDevrevParamsOauthTokenTypeDev",
              "value": "urn:devrev:params:oauth:token-type:dev",
            },
            {
              "name": "UrnDevrevParamsOauthTokenTypePat",
              "value": "urn:devrev:params:oauth:token-type:pat",
            },
            {
              "name": "UrnDevrevParamsOauthTokenTypeRev",
              "value": "urn:devrev:params:oauth:token-type:rev",
            },
            {
              "name": "UrnDevrevParamsOauthTokenTypeSession",
              "value": "urn:devrev:params:oauth:token-type:session",
            },
            {
              "name": "UrnDevrevParamsOauthTokenTypeSessionDev0",
              "value": "urn:devrev:params:oauth:token-type:session:dev0",
            },
            {
              "name": "UrnDevrevParamsOauthTokenTypeSys",
              "value": "urn:devrev:params:oauth:token-type:sys",
            },
            {
              "name": "UrnIetfParamsOauthTokenTypeJwt",
              "value": "urn:ietf:params:oauth:token-type:jwt",
            },
          ],
        },
        "AuthTokenStatus": {
          "docs": "The status of the token.",
          "enum": [
            {
              "name": "active",
              "value": "active",
            },
            {
              "name": "expired",
              "value": "expired",
            },
            {
              "name": "revoked",
              "value": "revoked",
            },
          ],
        },
        "AuthTokenSubjectTokenType": {
          "docs": "The type of the subject token.",
          "enum": [
            {
              "name": "UrnDevrevParamsOauthTokenTypeJwtAuth0",
              "value": "urn:devrev:params:oauth:token-type:jwt:auth0",
            },
            {
              "name": "UrnDevrevParamsOauthTokenTypeJwtDev",
              "value": "urn:devrev:params:oauth:token-type:jwt:dev",
            },
            {
              "name": "UrnDevrevParamsOauthTokenTypeRevinfo",
              "value": "urn:devrev:params:oauth:token-type:revinfo",
            },
            {
              "name": "UrnDevrevParamsOauthTokenTypeSysu",
              "value": "urn:devrev:params:oauth:token-type:sysu",
            },
            {
              "name": "UrnDevrevParamsOauthTokenTypeUserinfo",
              "value": "urn:devrev:params:oauth:token-type:userinfo",
            },
            {
              "name": "UrnDevrevParamsOauthTokenTypeUserinfoProfile",
              "value": "urn:devrev:params:oauth:token-type:userinfo:profile",
            },
            {
              "name": "UrnIetfParamsOauthTokenTypeJwt",
              "value": "urn:ietf:params:oauth:token-type:jwt",
            },
          ],
        },
        "AuthTokenTokenType": {
          "docs": "The type of the issued token. Bearer is the only supported token type.
",
          "enum": [
            {
              "name": "bearer",
              "value": "bearer",
            },
          ],
        },
        "AuthTokensCreateResponse": {
          "docs": "Response for the request to create a new token corresponding to the
requested token type.
",
          "properties": {
            "access_token": {
              "docs": "The issued JSON Web Token (JWT) corresponding to the requested
token type.
",
              "type": "string",
            },
            "client_id": {
              "docs": "An identifier that represents the application which is requesting
the token. Only present in a response corresponding to an
application access token (AAT).
",
              "type": "optional<string>",
            },
            "expires_in": {
              "docs": "The validity lifetime of the token specified in seconds since Unix
epoch.
",
              "type": "integer",
            },
            "refresh_token": {
              "docs": "A token to refresh the issued token.",
              "type": "optional<string>",
            },
            "scope": {
              "docs": "The scopes associated with the issued token. A space-delimited list
of values in which the order of values does not matter.
",
              "type": "optional<string>",
            },
            "token_type": {
              "docs": undefined,
              "type": "AuthTokenTokenType",
            },
          },
        },
        "AuthTokensGetResponse": {
          "docs": "The response to get the token metadata.",
          "properties": {
            "token": {
              "docs": undefined,
              "type": "AuthToken",
            },
          },
        },
        "AuthTokensListResponse": {
          "docs": "The response to list the token metadata.",
          "properties": {
            "tokens": {
              "docs": "The list of token metadata.",
              "type": "list<AuthToken>",
            },
          },
        },
        "AuthTokensOrgTraits": {
          "docs": "Carries Rev org info.",
          "properties": {
            "display_name": {
              "docs": "The display name of the Rev org.",
              "type": "optional<string>",
            },
            "domain": {
              "docs": "The domain of the Rev org.",
              "type": "optional<string>",
            },
          },
        },
        "AuthTokensRevInfo": {
          "docs": "Carries info corresponding to the Rev user to be provisioned and/or
issue a Rev session token.
",
          "properties": {
            "org_ref": {
              "docs": "An identifier which uniquely identifies a Rev org.",
              "type": "optional<string>",
            },
            "org_traits": {
              "docs": undefined,
              "type": "optional<AuthTokensOrgTraits>",
            },
            "rev_user_id": {
              "docs": "The unique ID of the Rev user.",
              "type": "optional<string>",
            },
            "user_ref": {
              "docs": "An identifier which uniquely identifies a Rev user.",
              "type": "string",
            },
            "user_traits": {
              "docs": undefined,
              "type": "optional<AuthTokensUserTraits>",
            },
          },
        },
        "AuthTokensUpdateResponse": {
          "docs": "Response for the request to update the token metadata.",
          "properties": {
            "token": {
              "docs": undefined,
              "type": "AuthToken",
            },
          },
        },
        "AuthTokensUserTraits": {
          "docs": "Carries Rev user info.",
          "properties": {
            "display_name": {
              "docs": "The display name of the Rev user.",
              "type": "optional<string>",
            },
            "email": {
              "docs": "The email address of the Rev user.",
              "type": "optional<string>",
            },
            "full_name": {
              "docs": "The full name of the Rev user.",
              "type": "optional<string>",
            },
          },
        },
        "Capability": {
          "docs": undefined,
          "type": "PartBase",
        },
        "CapabilitySummary": {
          "docs": undefined,
          "type": "PartBaseSummary",
        },
        "DevOrgAuthConnectionsCreateRequest": {
          "base-properties": {
            "display_name": {
              "docs": "Display name of the authentication connection. This name will be
visible to all the users when they sign in to this Dev
organization. For example, if the display_name is 'abclogin', then
it would appear on the login button as 'Log in to abclogin'.
",
              "type": "optional<string>",
            },
          },
          "docs": "Request to create a new enterprise authentication connection.
",
          "union": {
            "google_apps": {
              "docs": undefined,
              "type": "AuthConnectionOptionsGoogleApps",
            },
            "oidc": {
              "docs": undefined,
              "type": "AuthConnectionOptionsOidc",
            },
            "samlp": {
              "docs": undefined,
              "type": "AuthConnectionOptionsSaml",
            },
            "waad": {
              "docs": undefined,
              "type": "AuthConnectionOptionsAzureAd",
            },
          },
        },
        "DevOrgAuthConnectionsCreateRequestType": {
          "docs": "Defines the type for the authentication connection. Different types of
authentication connections have different configuration parameters.
",
          "enum": [
            {
              "name": "google_apps",
              "value": "google_apps",
            },
            {
              "name": "oidc",
              "value": "oidc",
            },
            {
              "name": "samlp",
              "value": "samlp",
            },
            {
              "name": "waad",
              "value": "waad",
            },
          ],
        },
        "DevOrgAuthConnectionsCreateResponse": {
          "docs": "Response for the request to create a new enterprise authentication
connection.
",
          "properties": {
            "auth_connection": {
              "docs": undefined,
              "type": "AuthConnection",
            },
          },
        },
        "DevOrgAuthConnectionsGetResponse": {
          "docs": "Response object encapsulating the configuration details of an
authentication connection.
",
          "properties": {
            "auth_connection": {
              "docs": undefined,
              "type": "AuthConnection",
            },
          },
        },
        "DevOrgAuthConnectionsListResponse": {
          "docs": "Response object for the request to list all the social and enterprise
authentication connections configured for a Dev organization.
",
          "properties": {
            "auth_connections": {
              "docs": "List of all the authentication connections currently configured for
a Dev organization.
",
              "type": "list<AuthConnection>",
            },
          },
        },
        "DevOrgAuthConnectionsUpdateRequest": {
          "base-properties": {
            "display_name": {
              "docs": "New display name of the authentication connection. This name will
be visible to all the users when they sign in to this Dev
organization. For example, if the display_name is 'abclogin', then
it would appear on the login button as 'Log in to abclogin'.
",
              "type": "optional<string>",
            },
            "id": {
              "docs": "ID of the authentication connection which is to be updated.
",
              "type": "string",
            },
          },
          "docs": "Request to update an enterprise authentication connection for a Dev
organization.
",
          "union": {
            "google_apps": {
              "docs": undefined,
              "type": "AuthConnectionOptionsGoogleApps",
            },
            "none": {
              "docs": undefined,
              "type": "empty",
            },
            "oidc": {
              "docs": undefined,
              "type": "AuthConnectionOptionsOidc",
            },
            "samlp": {
              "docs": undefined,
              "type": "AuthConnectionOptionsSaml",
            },
            "waad": {
              "docs": undefined,
              "type": "AuthConnectionOptionsAzureAd",
            },
          },
        },
        "DevOrgAuthConnectionsUpdateRequestType": {
          "docs": "Specifies the type for the authentication connection. Different types
of authentication connections have different configuration parameters
that can be updated.
",
          "enum": [
            {
              "name": "google_apps",
              "value": "google_apps",
            },
            {
              "name": "none",
              "value": "none",
            },
            {
              "name": "oidc",
              "value": "oidc",
            },
            {
              "name": "samlp",
              "value": "samlp",
            },
            {
              "name": "waad",
              "value": "waad",
            },
          ],
        },
        "DevOrgAuthConnectionsUpdateResponse": {
          "docs": "Response for the request to update an enterprise authentication
connection.
",
          "properties": {
            "auth_connection": {
              "docs": undefined,
              "type": "AuthConnection",
            },
          },
        },
        "DevUser": {
          "docs": undefined,
          "properties": {
            "external_identities": {
              "docs": "IDs of the Dev User outside the DevRev SOR.",
              "type": "optional<list<external-identity>>",
            },
          },
        },
        "DevUserSummary": {
          "docs": undefined,
          "type": "UserBaseSummary",
        },
        "DevUsersListResponse": {
          "docs": "The response to listing the Dev users.",
          "properties": {
            "dev_users": {
              "docs": "The list of Dev users.",
              "type": "list<DevUser>",
            },
            "next_cursor": {
              "docs": "The cursor used to iterate subsequent results in accordance to the
sort order. If not set, then no later elements exist.
",
              "type": "optional<string>",
            },
            "prev_cursor": {
              "docs": "The cursor used to iterate preceding results in accordance to the
sort order. If not set, then no prior elements exist.
",
              "type": "optional<string>",
            },
          },
        },
        "DevUsersSelfResponse": {
          "docs": "The response to getting the information for the authenticated user.
",
          "properties": {
            "dev_user": {
              "docs": undefined,
              "type": "DevUser",
            },
          },
        },
        "Enhancement": {
          "docs": undefined,
          "properties": {
            "target_close_date": {
              "docs": "Timestamp when the enhancement is expected to be closed.",
              "type": "optional<string>",
            },
          },
        },
        "EnhancementSummary": {
          "docs": undefined,
          "type": "PartBaseSummary",
        },
        "ErrorBadRequest": {
          "docs": undefined,
          "properties": {
            "type": {
              "docs": undefined,
              "type": "ErrorBadRequestType",
            },
          },
        },
        "ErrorBadRequestInvalidEnumValue": {
          "docs": undefined,
          "properties": {
            "allowed_values": {
              "docs": "The allowed values for the field.",
              "type": "list<string>",
            },
            "field_name": {
              "docs": "The field whose enum value is invalid.",
              "type": "string",
            },
            "value": {
              "docs": "The value that was received.",
              "type": "string",
            },
          },
        },
        "ErrorBadRequestMissingRequiredField": {
          "docs": undefined,
          "properties": {
            "field_name": {
              "docs": "The missing field's name.",
              "type": "string",
            },
          },
        },
        "ErrorBadRequestType": {
          "docs": undefined,
          "enum": [
            {
              "name": "bad_request",
              "value": "bad_request",
            },
            {
              "name": "invalid_enum_value",
              "value": "invalid_enum_value",
            },
            {
              "name": "missing_required_field",
              "value": "missing_required_field",
            },
            {
              "name": "parse_error",
              "value": "parse_error",
            },
            {
              "name": "value_not_permitted",
              "value": "value_not_permitted",
            },
          ],
        },
        "ErrorBadRequestValueNotPermitted": {
          "docs": undefined,
          "properties": {
            "field_name": {
              "docs": "The field whose value is not permitted.",
              "type": "string",
            },
            "reason": {
              "docs": "The reason the value isn't permitted.",
              "type": "optional<string>",
            },
          },
        },
        "ErrorBase": {
          "docs": undefined,
          "properties": {
            "message": {
              "docs": "The message associated with the error.",
              "type": "optional<string>",
            },
          },
        },
        "ErrorForbidden": {
          "docs": undefined,
          "properties": {
            "type": {
              "docs": undefined,
              "type": "ErrorForbiddenType",
            },
          },
        },
        "ErrorForbiddenType": {
          "docs": undefined,
          "enum": [
            {
              "name": "forbidden",
              "value": "forbidden",
            },
          ],
        },
        "ErrorInternalServerError": {
          "docs": undefined,
          "properties": {
            "reference_id": {
              "docs": "A unique ID that's generated for the error that can be used for
inquiry.
",
              "type": "optional<string>",
            },
            "type": {
              "docs": undefined,
              "type": "ErrorInternalServerErrorType",
            },
          },
        },
        "ErrorInternalServerErrorType": {
          "docs": undefined,
          "enum": [
            {
              "name": "internal_error",
              "value": "internal_error",
            },
          ],
        },
        "ErrorNotFound": {
          "docs": undefined,
          "properties": {
            "type": {
              "docs": undefined,
              "type": "ErrorNotFoundType",
            },
          },
        },
        "ErrorNotFoundType": {
          "docs": undefined,
          "enum": [
            {
              "name": "not_found",
              "value": "not_found",
            },
          ],
        },
        "ErrorServiceUnavailable": {
          "docs": undefined,
          "properties": {
            "type": {
              "docs": undefined,
              "type": "ErrorServiceUnavailableType",
            },
          },
        },
        "ErrorServiceUnavailableType": {
          "docs": undefined,
          "enum": [
            {
              "name": "service_unavailable",
              "value": "service_unavailable",
            },
          ],
        },
        "ErrorTooManyRequests": {
          "docs": undefined,
          "properties": {
            "retry_after": {
              "docs": "The number of seconds after which the client should retry.
",
              "type": "optional<integer>",
            },
            "type": {
              "docs": undefined,
              "type": "ErrorTooManyRequestsType",
            },
          },
        },
        "ErrorTooManyRequestsType": {
          "docs": undefined,
          "enum": [
            {
              "name": "too_many_requests",
              "value": "too_many_requests",
            },
          ],
        },
        "ErrorUnauthorized": {
          "docs": undefined,
          "properties": {
            "type": {
              "docs": undefined,
              "type": "ErrorUnauthorizedType",
            },
          },
        },
        "ErrorUnauthorizedType": {
          "docs": undefined,
          "enum": [
            {
              "name": "unauthenticated",
              "value": "unauthenticated",
            },
          ],
        },
        "EventPartCreated": {
          "docs": undefined,
          "properties": {
            "part": {
              "docs": undefined,
              "type": "Part",
            },
          },
        },
        "EventPartDeleted": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": "The ID of the part that was deleted.",
              "type": "string",
            },
          },
        },
        "EventPartUpdated": {
          "docs": undefined,
          "properties": {
            "part": {
              "docs": undefined,
              "type": "Part",
            },
          },
        },
        "EventRevOrgCreated": {
          "docs": undefined,
          "properties": {
            "rev_org": {
              "docs": undefined,
              "type": "RevOrg",
            },
          },
        },
        "EventRevOrgDeleted": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": "The ID of the Rev organization that was deleted.",
              "type": "string",
            },
          },
        },
        "EventRevOrgUpdated": {
          "docs": undefined,
          "properties": {
            "rev_org": {
              "docs": undefined,
              "type": "RevOrg",
            },
          },
        },
        "EventTagCreated": {
          "docs": undefined,
          "properties": {
            "tag": {
              "docs": undefined,
              "type": "Tag",
            },
          },
        },
        "EventTagDeleted": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": "The ID of the tag that was deleted.",
              "type": "string",
            },
          },
        },
        "EventTagUpdated": {
          "docs": undefined,
          "properties": {
            "tag": {
              "docs": undefined,
              "type": "Tag",
            },
          },
        },
        "EventTimelineEntryCreated": {
          "docs": undefined,
          "properties": {
            "entry": {
              "docs": undefined,
              "type": "TimelineEntry",
            },
          },
        },
        "EventTimelineEntryDeleted": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": "The ID of the timeline entry that was deleted.",
              "type": "string",
            },
          },
        },
        "EventTimelineEntryUpdated": {
          "docs": undefined,
          "properties": {
            "entry": {
              "docs": undefined,
              "type": "TimelineEntry",
            },
          },
        },
        "EventWebhookCreated": {
          "docs": undefined,
          "properties": {
            "webhook": {
              "docs": undefined,
              "type": "Webhook",
            },
          },
        },
        "EventWebhookDeleted": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": "The ID of the webhook that was deleted.",
              "type": "string",
            },
          },
        },
        "EventWebhookUpdated": {
          "docs": undefined,
          "properties": {
            "webhook": {
              "docs": undefined,
              "type": "Webhook",
            },
          },
        },
        "EventWorkCreated": {
          "docs": undefined,
          "properties": {
            "work": {
              "docs": undefined,
              "type": "Work",
            },
          },
        },
        "EventWorkDeleted": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": "The ID of the work that was deleted.",
              "type": "string",
            },
          },
        },
        "EventWorkUpdated": {
          "docs": undefined,
          "properties": {
            "work": {
              "docs": undefined,
              "type": "Work",
            },
          },
        },
        "Feature": {
          "docs": undefined,
          "type": "PartBase",
        },
        "FeatureSummary": {
          "docs": undefined,
          "type": "PartBaseSummary",
        },
        "GroupSummary": {
          "docs": undefined,
          "type": "AtomBaseSummary",
        },
        "Issue": {
          "docs": undefined,
          "properties": {
            "priority": {
              "docs": undefined,
              "type": "optional<IssuePriority>",
            },
          },
        },
        "IssuePriority": {
          "docs": "Priority of the work based upon impact and criticality.",
          "enum": [
            {
              "name": "p0",
              "value": "p0",
            },
            {
              "name": "p1",
              "value": "p1",
            },
            {
              "name": "p2",
              "value": "p2",
            },
            {
              "name": "p3",
              "value": "p3",
            },
          ],
        },
        "ListMode": {
          "docs": "The iteration mode to use. If "after", then entries after the provided
cursor will be returned, or if no cursor is provided, then from the
beginning. If "before", then entries before the provided cursor will be
returned, or if no cursor is provided, then from the end. Entries will
always be returned in the specified sort-by order.
",
          "enum": [
            {
              "name": "after",
              "value": "after",
            },
            {
              "name": "before",
              "value": "before",
            },
          ],
        },
        "OrgBase": {
          "docs": undefined,
          "properties": {
            "display_name": {
              "docs": "Name of the Organization.",
              "type": "optional<string>",
            },
          },
        },
        "OrgBaseSummary": {
          "docs": undefined,
          "properties": {
            "display_name": {
              "docs": "Name of the Organization.",
              "type": "optional<string>",
            },
          },
        },
        "OrgEnvironment": {
          "docs": "The environment of the Org. Defaults to 'production' if not specified.
",
          "enum": [
            {
              "name": "production",
              "value": "production",
            },
            {
              "name": "staging",
              "value": "staging",
            },
            {
              "name": "test",
              "value": "test",
            },
          ],
        },
        "OrgSummary": {
          "base-properties": {},
          "docs": undefined,
          "union": {
            "rev_org": {
              "docs": undefined,
              "type": "RevOrgSummary",
            },
          },
        },
        "OrgType": {
          "docs": undefined,
          "enum": [
            {
              "name": "rev_org",
              "value": "rev_org",
            },
          ],
        },
        "Part": {
          "base-properties": {},
          "docs": undefined,
          "union": {
            "capability": {
              "docs": undefined,
              "type": "Capability",
            },
            "enhancement": {
              "docs": undefined,
              "type": "Enhancement",
            },
            "feature": {
              "docs": undefined,
              "type": "Feature",
            },
            "product": {
              "docs": undefined,
              "type": "Product",
            },
          },
        },
        "PartBase": {
          "docs": undefined,
          "properties": {
            "artifacts": {
              "docs": "The attached artifacts.",
              "type": "optional<list<ArtifactSummary>>",
            },
            "description": {
              "docs": "Description of the part.",
              "type": "optional<string>",
            },
            "name": {
              "docs": "Name of the part.",
              "type": "string",
            },
            "owned_by": {
              "docs": "The users that own the part.",
              "type": "list<UserSummary>",
            },
            "tags": {
              "docs": "Tags associated with the object.",
              "type": "optional<list<TagWithValue>>",
            },
          },
        },
        "PartBaseSummary": {
          "docs": undefined,
          "properties": {
            "name": {
              "docs": "Name of the part.",
              "type": "string",
            },
          },
        },
        "PartSummary": {
          "base-properties": {},
          "docs": undefined,
          "union": {
            "capability": {
              "docs": undefined,
              "type": "CapabilitySummary",
            },
            "enhancement": {
              "docs": undefined,
              "type": "EnhancementSummary",
            },
            "feature": {
              "docs": undefined,
              "type": "FeatureSummary",
            },
            "product": {
              "docs": undefined,
              "type": "ProductSummary",
            },
          },
        },
        "PartType": {
          "docs": undefined,
          "enum": [
            {
              "name": "capability",
              "value": "capability",
            },
            {
              "name": "enhancement",
              "value": "enhancement",
            },
            {
              "name": "feature",
              "value": "feature",
            },
            {
              "name": "product",
              "value": "product",
            },
          ],
        },
        "PartsCreateRequest": {
          "base-properties": {
            "description": {
              "docs": "Description of the part.",
              "type": "optional<string>",
            },
            "name": {
              "docs": "Name of the part.",
              "type": "string",
            },
            "owned_by": {
              "docs": "The users that own the part.",
              "type": "list<string>",
            },
          },
          "docs": undefined,
          "union": {
            "capability": {
              "docs": undefined,
              "type": "PartsCreateRequestCapability",
            },
            "enhancement": {
              "docs": undefined,
              "type": "PartsCreateRequestEnhancement",
            },
            "feature": {
              "docs": undefined,
              "type": "PartsCreateRequestFeature",
            },
            "product": {
              "docs": undefined,
              "type": "parts-create-request-product",
            },
          },
        },
        "PartsCreateRequestCapability": {
          "docs": undefined,
          "properties": {
            "parent_part": {
              "docs": "ID of the parent product for the capability.",
              "type": "list<string>",
            },
          },
        },
        "PartsCreateRequestEnhancement": {
          "docs": undefined,
          "properties": {
            "parent_part": {
              "docs": "ID of the parent part on which the enhancement is to be created.
",
              "type": "list<string>",
            },
            "target_close_date": {
              "docs": "Target close date by which enhancement is expected to be closed.
",
              "type": "optional<string>",
            },
          },
        },
        "PartsCreateRequestFeature": {
          "docs": undefined,
          "properties": {
            "parent_part": {
              "docs": "ID of the parent capability/feature for the feature.",
              "type": "list<string>",
            },
          },
        },
        "PartsCreateResponse": {
          "docs": undefined,
          "properties": {
            "part": {
              "docs": undefined,
              "type": "Part",
            },
          },
        },
        "PartsGetResponse": {
          "docs": undefined,
          "properties": {
            "part": {
              "docs": undefined,
              "type": "Part",
            },
          },
        },
        "PartsListResponse": {
          "docs": undefined,
          "properties": {
            "next_cursor": {
              "docs": "The cursor used to iterate subsequent results in accordance to the
sort order. If not set, then no later elements exist.
",
              "type": "optional<string>",
            },
            "parts": {
              "docs": "The list of parts.",
              "type": "list<Part>",
            },
            "prev_cursor": {
              "docs": "The cursor used to iterate preceding results in accordance to the
sort order. If not set, then no prior elements exist.
",
              "type": "optional<string>",
            },
          },
        },
        "PartsUpdateRequest": {
          "base-properties": {
            "description": {
              "docs": "The updated description of the part.",
              "type": "optional<string>",
            },
            "id": {
              "docs": "The ID of the part to update.",
              "type": "string",
            },
            "name": {
              "docs": "The updated name of the part.",
              "type": "optional<string>",
            },
            "owned_by": {
              "docs": undefined,
              "type": "optional<PartsUpdateRequestOwnedBy>",
            },
          },
          "docs": undefined,
          "union": {
            "capability": {
              "docs": undefined,
              "type": "parts-update-request-capability",
            },
            "enhancement": {
              "docs": undefined,
              "type": "PartsUpdateRequestEnhancement",
            },
            "feature": {
              "docs": undefined,
              "type": "parts-update-request-feature",
            },
            "none": {
              "docs": undefined,
              "type": "empty",
            },
            "product": {
              "docs": undefined,
              "type": "parts-update-request-product",
            },
          },
        },
        "PartsUpdateRequestEnhancement": {
          "docs": undefined,
          "properties": {
            "target_close_date": {
              "docs": "Updates the target close date of the enhancement.",
              "type": "optional<string>",
            },
          },
        },
        "PartsUpdateRequestOwnedBy": {
          "docs": undefined,
          "properties": {
            "set": {
              "docs": "Sets the owner IDs to the provided user IDs. This must not be
empty.
",
              "type": "optional<list<string>>",
            },
          },
        },
        "PartsUpdateResponse": {
          "docs": undefined,
          "properties": {
            "part": {
              "docs": undefined,
              "type": "Part",
            },
          },
        },
        "Product": {
          "docs": undefined,
          "type": "PartBase",
        },
        "ProductSummary": {
          "docs": undefined,
          "type": "PartBaseSummary",
        },
        "RevOrg": {
          "docs": undefined,
          "properties": {
            "description": {
              "docs": "Description of the Rev organization.",
              "type": "optional<string>",
            },
            "domain": {
              "docs": "Company's domain name. Example - 'devrev.ai'.",
              "type": "optional<string>",
            },
            "external_ref": {
              "docs": "External ref is a unique identifier for the Rev (customer)
organization from your primary customer system of records. If none
is specified, a system-generated identifier will be assigned to the
organization.
",
              "type": "optional<string>",
            },
          },
        },
        "RevOrgSummary": {
          "docs": undefined,
          "type": "OrgBaseSummary",
        },
        "RevOrgsCreateResponse": {
          "docs": "Response object for request to create a new Rev organization.
",
          "properties": {
            "rev_org": {
              "docs": undefined,
              "type": "RevOrg",
            },
          },
        },
        "RevOrgsGetResponse": {
          "docs": "The response to getting a Rev organization's information.",
          "properties": {
            "rev_org": {
              "docs": undefined,
              "type": "RevOrg",
            },
          },
        },
        "RevOrgsListResponse": {
          "docs": "The response to getting a list of Rev organizations' information.
",
          "properties": {
            "next_cursor": {
              "docs": "The cursor used to iterate subsequent results in accordance to the
sort order. If not set, then no later elements exist.
",
              "type": "optional<string>",
            },
            "prev_cursor": {
              "docs": "The cursor used to iterate preceding results in accordance to the
sort order. If not set, then no prior elements exist.
",
              "type": "optional<string>",
            },
            "rev_orgs": {
              "docs": "List with all of the Rev organizations' information.",
              "type": "list<RevOrg>",
            },
          },
        },
        "RevOrgsUpdateResponse": {
          "docs": "Response object to updating Rev organization's information.",
          "properties": {
            "rev_org": {
              "docs": undefined,
              "type": "RevOrg",
            },
          },
        },
        "RevUserSummary": {
          "docs": undefined,
          "properties": {
            "external_ref": {
              "docs": "External ref is a mutable unique identifier for a user within the
Rev organization from your primary customer record. If none is
available, a good alternative is the email address/phone number
which could uniquely identify the user. If none is specified, a
system-generated identifier will be assigned to the user.
",
              "type": "optional<string>",
            },
            "rev_org": {
              "docs": undefined,
              "type": "optional<OrgSummary>",
            },
          },
        },
        "SetTagWithValue": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": "The ID of the tag.",
              "type": "string",
            },
            "value": {
              "docs": "The value for the object's association with the tag. If specified,
the value must be one that's specified in the tag's allowed values.
",
              "type": "optional<string>",
            },
          },
        },
        "Stage": {
          "docs": "Describes the current stage of a work item.",
          "properties": {
            "name": {
              "docs": "Current stage name of the work item.",
              "type": "string",
            },
          },
        },
        "StageInit": {
          "docs": "Sets an object's initial stage.",
          "properties": {
            "name": {
              "docs": "The name of the stage.",
              "type": "optional<string>",
            },
          },
        },
        "StageUpdate": {
          "docs": "Updates an object's stage.",
          "properties": {
            "name": {
              "docs": "The updated name of the stage, otherwise unchanged if not set.
",
              "type": "optional<string>",
            },
          },
        },
        "SysUserSummary": {
          "docs": undefined,
          "type": "UserBaseSummary",
        },
        "Tag": {
          "docs": undefined,
          "properties": {
            "allowed_values": {
              "docs": "The allowed values for the tag, where a value is provided when a
tag is associated with an object. If empty, then no value should be
provided when the association is made.
",
              "type": "optional<list<string>>",
            },
            "description": {
              "docs": "An informative description for the tag that should provide context
on the tag's purpose and usage.
",
              "type": "optional<string>",
            },
            "name": {
              "docs": "The name of the tag, which denotes the logical concept by which all
tagged objects will be associated. The name is guaranteed to be
unique.
",
              "type": "string",
            },
          },
        },
        "TagSummary": {
          "docs": undefined,
          "properties": {
            "name": {
              "docs": "The name of the tag, which denotes the logical concept by which all
tagged objects will be associated. The name is guaranteed to be
unique.
",
              "type": "string",
            },
          },
        },
        "TagWithValue": {
          "docs": undefined,
          "properties": {
            "tag": {
              "docs": undefined,
              "type": "TagSummary",
            },
            "value": {
              "docs": "The value for the object's association with the tag.",
              "type": "optional<string>",
            },
          },
        },
        "TagsCreateResponse": {
          "docs": "The response to creating a new tag.",
          "properties": {
            "tag": {
              "docs": undefined,
              "type": "Tag",
            },
          },
        },
        "TagsGetResponse": {
          "docs": "The response to getting a tag's information.",
          "properties": {
            "tag": {
              "docs": undefined,
              "type": "Tag",
            },
          },
        },
        "TagsListResponse": {
          "docs": "The response to listing the tags.",
          "properties": {
            "next_cursor": {
              "docs": "The cursor used to iterate subsequent results in accordance to the
sort order. If not set, then no later elements exist.
",
              "type": "optional<string>",
            },
            "prev_cursor": {
              "docs": "The cursor used to iterate preceding results in accordance to the
sort order. If not set, then no prior elements exist.
",
              "type": "optional<string>",
            },
            "tags": {
              "docs": "The list of tags.",
              "type": "list<Tag>",
            },
          },
        },
        "TagsUpdateAllowedValues": {
          "docs": "Specifies an update to a tag's allowed values.",
          "properties": {
            "set": {
              "docs": "Sets the allowed values for the tag.",
              "type": "optional<list<string>>",
            },
          },
        },
        "TagsUpdateResponse": {
          "docs": "The response for updating a tag.",
          "properties": {
            "tag": {
              "docs": undefined,
              "type": "Tag",
            },
          },
        },
        "Ticket": {
          "docs": undefined,
          "properties": {
            "group": {
              "docs": undefined,
              "type": "optional<GroupSummary>",
            },
            "rev_org": {
              "docs": undefined,
              "type": "optional<OrgSummary>",
            },
            "severity": {
              "docs": undefined,
              "type": "optional<TicketSeverity>",
            },
          },
        },
        "TicketSeverity": {
          "docs": "Severity of the ticket.",
          "enum": [
            {
              "name": "blocker",
              "value": "blocker",
            },
            {
              "name": "high",
              "value": "high",
            },
            {
              "name": "low",
              "value": "low",
            },
            {
              "name": "medium",
              "value": "medium",
            },
          ],
        },
        "TimelineComment": {
          "docs": undefined,
          "properties": {
            "artifacts": {
              "docs": "The artifacts for the comment.",
              "type": "optional<list<ArtifactSummary>>",
            },
            "body": {
              "docs": "The comment's body. If the comment has been deleted, then no body
will appear in the response.
",
              "type": "optional<string>",
            },
            "body_type": {
              "docs": undefined,
              "type": "optional<TimelineCommentBodyType>",
            },
            "snap_kit_body": {
              "docs": "The SnapKit Body of the comment.",
              "type": "optional<map<string, unknown>>",
            },
          },
        },
        "TimelineCommentBodyType": {
          "docs": "The type of the body to use for the comment.",
          "enum": [
            {
              "name": "snap_kit",
              "value": "snap_kit",
            },
            {
              "name": "text",
              "value": "text",
            },
          ],
        },
        "TimelineEntriesCreateRequest": {
          "base-properties": {
            "object": {
              "docs": "The ID of the object to create the timeline entry for.",
              "type": "string",
            },
            "visibility": {
              "docs": undefined,
              "type": "optional<TimelineEntryVisibility>",
            },
          },
          "docs": "The request to create a timeline entry for an object.",
          "union": {
            "timeline_comment": {
              "docs": undefined,
              "type": "TimelineEntriesCreateRequestTimelineComment",
            },
          },
        },
        "TimelineEntriesCreateRequestTimelineComment": {
          "docs": undefined,
          "properties": {
            "artifacts": {
              "docs": "The IDs of the artifacts attached to the comment.",
              "type": "optional<list<string>>",
            },
            "body": {
              "docs": "The comment's body.",
              "type": "optional<string>",
            },
            "body_type": {
              "docs": undefined,
              "type": "optional<TimelineCommentBodyType>",
            },
            "snap_kit_body": {
              "docs": "The SnapKit body of the comment.",
              "type": "optional<map<string, unknown>>",
            },
          },
        },
        "TimelineEntriesCreateRequestType": {
          "docs": undefined,
          "enum": [
            {
              "name": "timeline_comment",
              "value": "timeline_comment",
            },
          ],
        },
        "TimelineEntriesCreateResponse": {
          "docs": "The response to creating a timeline entry for an object.",
          "properties": {
            "timeline_entry": {
              "docs": undefined,
              "type": "TimelineEntry",
            },
          },
        },
        "TimelineEntriesGetResponse": {
          "docs": "The request to getting a timeline entry.",
          "properties": {
            "timeline_entry": {
              "docs": undefined,
              "type": "TimelineEntry",
            },
          },
        },
        "TimelineEntriesListResponse": {
          "docs": "The response to listing timeline entries for an object.",
          "properties": {
            "next_cursor": {
              "docs": "The cursor used to iterate subsequent results in accordance to the
sort order. If not set, then no later elements exist.
",
              "type": "optional<string>",
            },
            "prev_cursor": {
              "docs": "The cursor used to iterate preceding results in accordance to the
sort order. If not set, then no prior elements exist.
",
              "type": "optional<string>",
            },
            "timeline_entries": {
              "docs": "The timeline entries for the object.",
              "type": "list<TimelineEntry>",
            },
          },
        },
        "TimelineEntriesUpdateRequest": {
          "base-properties": {
            "id": {
              "docs": "The ID of the timeline entry to update.",
              "type": "string",
            },
          },
          "docs": "The request to update a timeline entry.",
          "union": {
            "timeline_comment": {
              "docs": undefined,
              "type": "TimelineEntriesUpdateRequestTimelineComment",
            },
          },
        },
        "TimelineEntriesUpdateRequestTimelineComment": {
          "docs": undefined,
          "properties": {
            "artifacts": {
              "docs": undefined,
              "type": "optional<TimelineEntriesUpdateRequestTimelineCommentArtifacts>",
            },
            "body": {
              "docs": "The updated comment's body.",
              "type": "optional<string>",
            },
            "body_type": {
              "docs": undefined,
              "type": "optional<TimelineCommentBodyType>",
            },
            "snap_kit_body": {
              "docs": "The SnapKit body of the comment.",
              "type": "optional<map<string, unknown>>",
            },
          },
        },
        "TimelineEntriesUpdateRequestTimelineCommentArtifacts": {
          "docs": undefined,
          "properties": {
            "add": {
              "docs": "Adds the provided artifacts to the comment. An artifact cannot be
added more than once, i.e. nothing is done if the artifact is
already attached. Mutually exclusive with \`set\`.
",
              "type": "optional<list<string>>",
            },
            "remove": {
              "docs": "Removes the provided artifacts from the comment. If an artifact is
not present, then it's ignored. Mututally exclusive with \`set\`.
",
              "type": "optional<list<string>>",
            },
            "set": {
              "docs": "Sets the field to the provided artifacts.",
              "type": "optional<list<string>>",
            },
          },
        },
        "TimelineEntriesUpdateRequestType": {
          "docs": undefined,
          "enum": [
            {
              "name": "timeline_comment",
              "value": "timeline_comment",
            },
          ],
        },
        "TimelineEntriesUpdateResponse": {
          "docs": "The response to updating a timeline entry.",
          "properties": {
            "timeline_entry": {
              "docs": undefined,
              "type": "TimelineEntry",
            },
          },
        },
        "TimelineEntry": {
          "base-properties": {},
          "docs": undefined,
          "union": {
            "timeline_comment": {
              "docs": undefined,
              "type": "TimelineComment",
            },
          },
        },
        "TimelineEntryBase": {
          "docs": undefined,
          "type": "AtomBase",
        },
        "TimelineEntryType": {
          "docs": undefined,
          "enum": [
            {
              "name": "timeline_comment",
              "value": "timeline_comment",
            },
          ],
        },
        "TimelineEntryVisibility": {
          "docs": "The visibility of the entry. If 'private', then the entry is only
visible to the creator, otherwise if not set, then the entry has
default visibility.
",
          "enum": [
            {
              "name": "private",
              "value": "private",
            },
          ],
        },
        "UserBase": {
          "docs": undefined,
          "properties": {
            "display_name": {
              "docs": "The user's display name. The name is non-unique and mutable.
",
              "type": "optional<string>",
            },
            "display_picture": {
              "docs": undefined,
              "type": "optional<ArtifactSummary>",
            },
            "email": {
              "docs": "Email address of the user.",
              "type": "optional<string>",
            },
            "full_name": {
              "docs": "Full name of the user.",
              "type": "optional<string>",
            },
            "phone_numbers": {
              "docs": "Phone numbers of the user.",
              "type": "optional<list<string>>",
            },
            "state": {
              "docs": undefined,
              "type": "optional<UserState>",
            },
          },
        },
        "UserBaseSummary": {
          "docs": undefined,
          "properties": {
            "display_name": {
              "docs": "The user's display name. The name is non-unique and mutable.
",
              "type": "optional<string>",
            },
            "display_picture": {
              "docs": undefined,
              "type": "optional<ArtifactSummary>",
            },
            "email": {
              "docs": "Email address of the user.",
              "type": "optional<string>",
            },
            "full_name": {
              "docs": "Full name of the user.",
              "type": "optional<string>",
            },
            "state": {
              "docs": undefined,
              "type": "optional<UserState>",
            },
          },
        },
        "UserState": {
          "docs": "State of the user.",
          "enum": [
            {
              "name": "active",
              "value": "active",
            },
            {
              "name": "deactivated",
              "value": "deactivated",
            },
            {
              "name": "locked",
              "value": "locked",
            },
            {
              "name": "shadow",
              "value": "shadow",
            },
            {
              "name": "unassigned",
              "value": "unassigned",
            },
          ],
        },
        "UserSummary": {
          "base-properties": {},
          "docs": undefined,
          "union": {
            "dev_user": {
              "docs": undefined,
              "type": "DevUserSummary",
            },
            "rev_user": {
              "docs": undefined,
              "type": "RevUserSummary",
            },
            "sys_user": {
              "docs": undefined,
              "type": "SysUserSummary",
            },
          },
        },
        "UserType": {
          "docs": undefined,
          "enum": [
            {
              "name": "dev_user",
              "value": "dev_user",
            },
            {
              "name": "rev_user",
              "value": "rev_user",
            },
            {
              "name": "sys_user",
              "value": "sys_user",
            },
          ],
        },
        "Webhook": {
          "docs": undefined,
          "properties": {
            "event_types": {
              "docs": "The event types that the webhook will receive.",
              "type": "optional<list<WebhookEventType>>",
            },
            "secret": {
              "docs": "The secret to use for verifying webhook events.",
              "type": "string",
            },
            "status": {
              "docs": undefined,
              "type": "WebhookStatus",
            },
            "url": {
              "docs": "The URL of the webhook endpoint.",
              "type": "string",
            },
          },
        },
        "WebhookEventRequest": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": "The event's ID.",
              "type": "string",
            },
            "part_created": {
              "docs": undefined,
              "type": "optional<EventPartCreated>",
            },
            "part_deleted": {
              "docs": undefined,
              "type": "optional<EventPartDeleted>",
            },
            "part_updated": {
              "docs": undefined,
              "type": "optional<EventPartUpdated>",
            },
            "rev_org_created": {
              "docs": undefined,
              "type": "optional<EventRevOrgCreated>",
            },
            "rev_org_deleted": {
              "docs": undefined,
              "type": "optional<EventRevOrgDeleted>",
            },
            "rev_org_updated": {
              "docs": undefined,
              "type": "optional<EventRevOrgUpdated>",
            },
            "tag_created": {
              "docs": undefined,
              "type": "optional<EventTagCreated>",
            },
            "tag_deleted": {
              "docs": undefined,
              "type": "optional<EventTagDeleted>",
            },
            "tag_updated": {
              "docs": undefined,
              "type": "optional<EventTagUpdated>",
            },
            "timeline_entry_created": {
              "docs": undefined,
              "type": "optional<EventTimelineEntryCreated>",
            },
            "timeline_entry_deleted": {
              "docs": undefined,
              "type": "optional<EventTimelineEntryDeleted>",
            },
            "timeline_entry_updated": {
              "docs": undefined,
              "type": "optional<EventTimelineEntryUpdated>",
            },
            "timestamp": {
              "docs": "Timestamp of the webhook's invocation for the event. Note this
should be used to protect against replay attacks, where the event
should only be processed if the timestamp isn't stale by several
seconds.
",
              "type": "optional<string>",
            },
            "type": {
              "docs": undefined,
              "type": "optional<WebhookEventType>",
            },
            "verify": {
              "docs": undefined,
              "type": "optional<WebhookEventVerify>",
            },
            "webhook_created": {
              "docs": undefined,
              "type": "optional<EventWebhookCreated>",
            },
            "webhook_deleted": {
              "docs": undefined,
              "type": "optional<EventWebhookDeleted>",
            },
            "webhook_id": {
              "docs": "ID of the webhook for the event.",
              "type": "string",
            },
            "webhook_updated": {
              "docs": undefined,
              "type": "optional<EventWebhookUpdated>",
            },
            "work_created": {
              "docs": undefined,
              "type": "optional<EventWorkCreated>",
            },
            "work_deleted": {
              "docs": undefined,
              "type": "optional<EventWorkDeleted>",
            },
            "work_updated": {
              "docs": undefined,
              "type": "optional<EventWorkUpdated>",
            },
          },
        },
        "WebhookEventResponse": {
          "docs": undefined,
          "properties": {
            "challenge": {
              "docs": "The challenge from the "verify" request, otherwise this should not
be set for other request types.
",
              "type": "optional<string>",
            },
          },
        },
        "WebhookEventType": {
          "docs": "The event types that the webhook will receive.",
          "enum": [
            {
              "name": "part_created",
              "value": "part_created",
            },
            {
              "name": "part_deleted",
              "value": "part_deleted",
            },
            {
              "name": "part_updated",
              "value": "part_updated",
            },
            {
              "name": "rev_org_created",
              "value": "rev_org_created",
            },
            {
              "name": "rev_org_deleted",
              "value": "rev_org_deleted",
            },
            {
              "name": "rev_org_updated",
              "value": "rev_org_updated",
            },
            {
              "name": "tag_created",
              "value": "tag_created",
            },
            {
              "name": "tag_deleted",
              "value": "tag_deleted",
            },
            {
              "name": "tag_updated",
              "value": "tag_updated",
            },
            {
              "name": "timeline_entry_created",
              "value": "timeline_entry_created",
            },
            {
              "name": "timeline_entry_deleted",
              "value": "timeline_entry_deleted",
            },
            {
              "name": "timeline_entry_updated",
              "value": "timeline_entry_updated",
            },
            {
              "name": "verify",
              "value": "verify",
            },
            {
              "name": "webhook_created",
              "value": "webhook_created",
            },
            {
              "name": "webhook_deleted",
              "value": "webhook_deleted",
            },
            {
              "name": "webhook_updated",
              "value": "webhook_updated",
            },
            {
              "name": "work_created",
              "value": "work_created",
            },
            {
              "name": "work_deleted",
              "value": "work_deleted",
            },
            {
              "name": "work_updated",
              "value": "work_updated",
            },
          ],
        },
        "WebhookEventVerify": {
          "docs": undefined,
          "properties": {
            "challenge": {
              "docs": "The challenge that must be echoed in the response.",
              "type": "string",
            },
          },
        },
        "WebhookStatus": {
          "docs": "The status of the webhook.",
          "enum": [
            {
              "name": "active",
              "value": "active",
            },
            {
              "name": "inactive",
              "value": "inactive",
            },
            {
              "name": "unverified",
              "value": "unverified",
            },
          ],
        },
        "WebhooksCreateResponse": {
          "docs": "The response to creating a new webhook.",
          "properties": {
            "webhook": {
              "docs": undefined,
              "type": "Webhook",
            },
          },
        },
        "WebhooksGetResponse": {
          "docs": "The response to getting the information for the webhook.",
          "properties": {
            "webhook": {
              "docs": undefined,
              "type": "Webhook",
            },
          },
        },
        "WebhooksListResponse": {
          "docs": "The response to listing the webhooks.",
          "properties": {
            "webhooks": {
              "docs": "The list of webhooks.",
              "type": "list<Webhook>",
            },
          },
        },
        "WebhooksUpdateAction": {
          "docs": "The action to update the webhook's status.",
          "enum": [
            {
              "name": "activate",
              "value": "activate",
            },
            {
              "name": "deactivate",
              "value": "deactivate",
            },
          ],
        },
        "WebhooksUpdateRequestEventTypes": {
          "docs": undefined,
          "properties": {
            "add": {
              "docs": "The event types to add. If a provided event type is already set for
the webhook, then nothing is done. Note this is mutually exclusive
with 'set'.
",
              "type": "optional<list<WebhookEventType>>",
            },
            "remove": {
              "docs": "The event types to remove. If a provided event type isn't set for
the webhook, then nothing is done. Note this is mutually exclusive
with 'set'.
",
              "type": "optional<list<WebhookEventType>>",
            },
            "set": {
              "docs": "The updated event types, which will replace the webhook's current
event types. Note this is mutually exclusive with 'add' and
'remove'.
",
              "type": "optional<list<WebhookEventType>>",
            },
          },
        },
        "WebhooksUpdateResponse": {
          "docs": "The response to updating the webhook.",
          "properties": {
            "webhook": {
              "docs": undefined,
              "type": "Webhook",
            },
          },
        },
        "Work": {
          "base-properties": {},
          "docs": undefined,
          "union": {
            "issue": {
              "docs": undefined,
              "type": "Issue",
            },
            "ticket": {
              "docs": undefined,
              "type": "Ticket",
            },
          },
        },
        "WorkBase": {
          "docs": undefined,
          "properties": {
            "applies_to_part": {
              "docs": undefined,
              "type": "optional<PartSummary>",
            },
            "artifacts": {
              "docs": "The artifacts attached to the work item.",
              "type": "optional<list<ArtifactSummary>>",
            },
            "body": {
              "docs": "Body of the work object.",
              "type": "optional<string>",
            },
            "owned_by": {
              "docs": "The users that own the work.",
              "type": "list<UserSummary>",
            },
            "reported_by": {
              "docs": "Users that reported the work.",
              "type": "optional<list<UserSummary>>",
            },
            "stage": {
              "docs": undefined,
              "type": "optional<Stage>",
            },
            "tags": {
              "docs": "Tags associated with the object.",
              "type": "optional<list<TagWithValue>>",
            },
            "target_close_date": {
              "docs": "Timestamp when the work is expected to be complete.",
              "type": "optional<string>",
            },
            "title": {
              "docs": "Title of the work object.",
              "type": "string",
            },
          },
        },
        "WorkType": {
          "docs": undefined,
          "enum": [
            {
              "name": "issue",
              "value": "issue",
            },
            {
              "name": "ticket",
              "value": "ticket",
            },
          ],
        },
        "WorksCreateRequest": {
          "base-properties": {
            "applies_to_part": {
              "docs": "The [part](https://devrev.ai/docs/product/parts) that the work
applies to. Specifying a part is required when creating tickets and
issues.
",
              "type": "string",
            },
            "artifacts": {
              "docs": "The IDs of the artifacts to associate with the work item.
",
              "type": "optional<list<string>>",
            },
            "body": {
              "docs": "Body of the work object.",
              "type": "optional<string>",
            },
            "owned_by": {
              "docs": "The users that own the work.",
              "type": "list<string>",
            },
            "reported_by": {
              "docs": "The users that reported the work.",
              "type": "optional<list<string>>",
            },
            "stage": {
              "docs": undefined,
              "type": "optional<StageInit>",
            },
            "tags": {
              "docs": "Tags associated with the work item.",
              "type": "optional<list<SetTagWithValue>>",
            },
            "target_close_date": {
              "docs": "Timestamp for when the work is expected to be complete.",
              "type": "optional<string>",
            },
            "title": {
              "docs": "Title of the work object.",
              "type": "string",
            },
          },
          "docs": undefined,
          "union": {
            "issue": {
              "docs": undefined,
              "type": "WorksCreateRequestIssue",
            },
            "ticket": {
              "docs": undefined,
              "type": "WorksCreateRequestTicket",
            },
          },
        },
        "WorksCreateRequestIssue": {
          "docs": undefined,
          "properties": {
            "priority": {
              "docs": undefined,
              "type": "optional<IssuePriority>",
            },
            "sprint": {
              "docs": "The sprint that the issue belongs to.",
              "type": "optional<string>",
            },
          },
        },
        "WorksCreateRequestTicket": {
          "docs": undefined,
          "properties": {
            "group": {
              "docs": "The group that the ticket is associated with.",
              "type": "optional<string>",
            },
            "rev_org": {
              "docs": "The Rev organization that the ticket is associated with.",
              "type": "optional<string>",
            },
            "severity": {
              "docs": undefined,
              "type": "optional<TicketSeverity>",
            },
          },
        },
        "WorksCreateResponse": {
          "docs": undefined,
          "properties": {
            "work": {
              "docs": undefined,
              "type": "Work",
            },
          },
        },
        "WorksExportResponse": {
          "docs": undefined,
          "properties": {
            "works": {
              "docs": "The resulting collection of work items.",
              "type": "list<Work>",
            },
          },
        },
        "WorksGetResponse": {
          "docs": undefined,
          "properties": {
            "work": {
              "docs": undefined,
              "type": "Work",
            },
          },
        },
        "WorksListResponse": {
          "docs": undefined,
          "properties": {
            "next_cursor": {
              "docs": "The cursor used to iterate subsequent results in accordance to the
sort order. If not set, then no later elements exist.
",
              "type": "optional<string>",
            },
            "prev_cursor": {
              "docs": "The cursor used to iterate preceding results in accordance to the
sort order. If not set, then no prior elements exist.
",
              "type": "optional<string>",
            },
            "works": {
              "docs": "The list of works.",
              "type": "list<Work>",
            },
          },
        },
        "WorksUpdateRequest": {
          "base-properties": {
            "applies_to_part": {
              "docs": "Updates the part that the work applies to.",
              "type": "optional<string>",
            },
            "artifacts": {
              "docs": undefined,
              "type": "optional<WorksUpdateRequestArtifactIds>",
            },
            "body": {
              "docs": "Updated body of the work object, or unchanged if not provided.
",
              "type": "optional<string>",
            },
            "id": {
              "docs": "The work's ID.",
              "type": "string",
            },
            "owned_by": {
              "docs": undefined,
              "type": "optional<WorksUpdateRequestOwnedBy>",
            },
            "reported_by": {
              "docs": undefined,
              "type": "optional<WorksUpdateRequestReportedBy>",
            },
            "stage": {
              "docs": undefined,
              "type": "optional<StageUpdate>",
            },
            "tags": {
              "docs": undefined,
              "type": "optional<WorksUpdateRequestTags>",
            },
            "target_close_date": {
              "docs": "Updates the timestamp for when the work is expected to be complete.
",
              "type": "optional<string>",
            },
            "title": {
              "docs": "Updated title of the work object, or unchanged if not provided.
",
              "type": "optional<string>",
            },
          },
          "docs": undefined,
          "union": {
            "issue": {
              "docs": undefined,
              "type": "WorksUpdateRequestIssue",
            },
            "none": {
              "docs": undefined,
              "type": "empty",
            },
            "ticket": {
              "docs": undefined,
              "type": "WorksUpdateRequestTicket",
            },
          },
        },
        "WorksUpdateRequestArtifactIds": {
          "docs": undefined,
          "properties": {
            "set": {
              "docs": "Sets the IDs to the provided artifact IDs.",
              "type": "optional<list<string>>",
            },
          },
        },
        "WorksUpdateRequestIssue": {
          "docs": undefined,
          "properties": {
            "priority": {
              "docs": undefined,
              "type": "optional<IssuePriority>",
            },
            "sprint": {
              "docs": "Updates the sprint that the issue belongs to.",
              "type": "optional<string>",
            },
          },
        },
        "WorksUpdateRequestOwnedBy": {
          "docs": undefined,
          "properties": {
            "set": {
              "docs": "Sets the owner IDs to the provided user IDs. This must not be
empty.
",
              "type": "optional<list<string>>",
            },
          },
        },
        "WorksUpdateRequestReportedBy": {
          "docs": undefined,
          "properties": {
            "set": {
              "docs": "Sets the users that reported the work to the provided user IDs.
",
              "type": "optional<list<string>>",
            },
          },
        },
        "WorksUpdateRequestTags": {
          "docs": undefined,
          "properties": {
            "set": {
              "docs": "Sets the provided tags on the work item.",
              "type": "optional<list<SetTagWithValue>>",
            },
          },
        },
        "WorksUpdateRequestTicket": {
          "docs": undefined,
          "properties": {
            "group": {
              "docs": "The group that the ticket is associated with.",
              "type": "optional<string>",
            },
            "rev_org": {
              "docs": "Updates the Rev organization that the ticket is associated with.
",
              "type": "optional<string>",
            },
            "severity": {
              "docs": undefined,
              "type": "optional<TicketSeverity>",
            },
          },
        },
        "WorksUpdateResponse": {
          "docs": undefined,
          "properties": {
            "work": {
              "docs": undefined,
              "type": "Work",
            },
          },
        },
        "auth-connection-options-social": {
          "docs": undefined,
          "type": "map<string, unknown>",
        },
        "empty": {
          "docs": undefined,
          "type": "map<string, unknown>",
        },
        "error-bad-request-bad-request": {
          "docs": undefined,
          "type": "map<string, unknown>",
        },
        "error-bad-request-parse-error": {
          "docs": undefined,
          "type": "map<string, unknown>",
        },
        "error-forbidden-forbidden": {
          "docs": undefined,
          "type": "map<string, unknown>",
        },
        "error-internal-server-error-internal-error": {
          "docs": undefined,
          "type": "map<string, unknown>",
        },
        "error-not-found-not-found": {
          "docs": undefined,
          "type": "map<string, unknown>",
        },
        "error-service-unavailable-service-unavailable": {
          "docs": undefined,
          "type": "map<string, unknown>",
        },
        "error-too-many-requests-too-many-requests": {
          "docs": undefined,
          "type": "map<string, unknown>",
        },
        "error-unauthorized-unauthenticated": {
          "docs": undefined,
          "type": "map<string, unknown>",
        },
        "external-identity": {
          "docs": "External identity of a user.",
          "type": "map<string, unknown>",
        },
        "parts-create-request-product": {
          "docs": undefined,
          "type": "map<string, unknown>",
        },
        "parts-delete-response": {
          "docs": undefined,
          "type": "map<string, unknown>",
        },
        "parts-update-request-capability": {
          "docs": undefined,
          "type": "map<string, unknown>",
        },
        "parts-update-request-feature": {
          "docs": undefined,
          "type": "map<string, unknown>",
        },
        "parts-update-request-product": {
          "docs": undefined,
          "type": "map<string, unknown>",
        },
        "rev-orgs-delete-response": {
          "docs": "The response to deleting a Rev organization.",
          "type": "map<string, unknown>",
        },
        "tags-delete-response": {
          "docs": "The response for deleting a tag.",
          "type": "map<string, unknown>",
        },
        "webhooks-delete-response": {
          "docs": "The response to deleting the webhook.",
          "type": "map<string, unknown>",
        },
        "works-delete-response": {
          "docs": undefined,
          "type": "map<string, unknown>",
        },
      },
    },
    "artifacts.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "locate": {
            "auth": true,
            "docs": "Gets the download URL for the artifact.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "GET",
            "path": "/artifacts.locate",
            "request": {
              "name": "ArtifactsLocateRequest",
              "query-parameters": {
                "id": {
                  "allow-multiple": undefined,
                  "docs": "The ID of the artifact to get the URL for.",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.ArtifactsLocateResponse",
            },
          },
          "prepare": {
            "auth": true,
            "docs": "Creates an artifact and generates an upload URL for its data.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "path": "/artifacts.prepare",
            "request": {
              "body": {
                "properties": {
                  "file_name": {
                    "docs": "The name of the file that's being uploaded.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "ArtifactsPrepareRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.ArtifactsPrepareResponse",
            },
          },
        },
      },
    },
    "authConnection.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "dev-org-auth-connections-create": {
            "auth": true,
            "docs": "Creates a new enterprise authentication connection for a Dev
organization. This authentication connection will not be enabled by
default for the organization and the user will need to explicitly
enable this. Keep in mind that at a time, only one authentication
connection can be enabled for a Dev organization. At present, only 5
enterprise connections can be created by an organization.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "path": "/dev-orgs.auth-connections.create",
            "request": {
              "body": {
                "docs": "Request to create a new enterprise authentication connection.
",
                "type": "root.DevOrgAuthConnectionsCreateRequest",
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.DevOrgAuthConnectionsCreateResponse",
            },
          },
          "dev-org-auth-connections-delete": {
            "auth": true,
            "docs": "Deletes an authentication connection. Only enterprise connections which
are explicitly set up for a Dev organization can be deleted. Default
connections can not be deleted using this method.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "path": "/dev-orgs.auth-connections.delete",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "ID of the authentication connection to be deleted.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "DevOrgAuthConnectionsDeleteRequest",
              "query-parameters": undefined,
            },
          },
          "dev-org-auth-connections-get": {
            "auth": true,
            "docs": "Retrieves the details for an authentication connection.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "GET",
            "path": "/dev-orgs.auth-connections.get",
            "request": {
              "name": "DevOrgAuthConnectionsGetRequest",
              "query-parameters": {
                "id": {
                  "allow-multiple": undefined,
                  "docs": "ID of the authentication connection.",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.DevOrgAuthConnectionsGetResponse",
            },
          },
          "dev-org-auth-connections-list": {
            "auth": true,
            "docs": "Lists all the authentication connections available for a Dev
organization. This list will include both social and enterprise
connections which are either available by default or are explicitly
created by the user.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "GET",
            "path": "/dev-orgs.auth-connections.list",
            "response": {
              "docs": "Success.",
              "type": "root.DevOrgAuthConnectionsListResponse",
            },
          },
          "dev-org-auth-connections-toggle": {
            "auth": true,
            "docs": "Enable or disable an authentication connection for a Dev organization.
Currently, only 1 authentication connection can be enabled at a time.
When a new authentication connection is enabled, the connection which
is currently enabled for the Dev organization is automatically
disabled.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "path": "/dev-orgs.auth-connections.toggle",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "ID of the authentication connection to be toggled.",
                    "type": "string",
                  },
                  "toggle": {
                    "docs": undefined,
                    "type": "optional<root.AuthConnectionToggle>",
                  },
                },
              },
              "headers": undefined,
              "name": "DevOrgAuthConnectionsToggleRequest",
              "query-parameters": undefined,
            },
          },
          "dev-org-auth-connections-update": {
            "auth": true,
            "docs": "Updates an authentication connection.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "path": "/dev-orgs.auth-connections.update",
            "request": {
              "body": {
                "docs": "Request to update an enterprise authentication connection for a Dev
organization.
",
                "type": "root.DevOrgAuthConnectionsUpdateRequest",
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.DevOrgAuthConnectionsUpdateResponse",
            },
          },
        },
      },
    },
    "authTokens.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "create": {
            "auth": true,
            "docs": "Creates a JWT corresponding to the requested token type for the
authenticated user.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "path": "/auth-tokens.create",
            "request": {
              "body": {
                "properties": {
                  "aud": {
                    "docs": "The expected audience values with respect to the token.",
                    "type": "optional<list<string>>",
                  },
                  "client_id": {
                    "docs": "An identifier that represents the application which is requesting
the token. If no client_id is present in the request to generate an
application access token (AAT), DevRev will generate a client_id.
This client_id is only associated with an AAT.
",
                    "type": "optional<string>",
                  },
                  "expires_in": {
                    "docs": "The expected validity lifetime of the token in number of days.
",
                    "type": "optional<integer>",
                  },
                  "grant_type": {
                    "docs": undefined,
                    "type": "optional<root.AuthTokenGrantType>",
                  },
                  "requested_token_type": {
                    "docs": undefined,
                    "type": "optional<root.AuthTokenRequestedTokenType>",
                  },
                  "rev_info": {
                    "docs": undefined,
                    "type": "optional<root.AuthTokensRevInfo>",
                  },
                  "scope": {
                    "docs": "The requested set of scopes associated with the issued token. A
space-delimited list of values in which the order of values does
not matter.
",
                    "type": "optional<string>",
                  },
                  "subject_token": {
                    "docs": "Represents the entity that requests the token. Not required when
requesting an application access token (AAT).
",
                    "type": "optional<string>",
                  },
                  "subject_token_type": {
                    "docs": undefined,
                    "type": "optional<root.AuthTokenSubjectTokenType>",
                  },
                  "token_hint": {
                    "docs": "A hint that identifies the token.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "AuthTokensCreateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.AuthTokensCreateResponse",
            },
          },
          "delete": {
            "auth": true,
            "docs": "Revokes the token that matches the given token ID issued under the
given Dev organization.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "path": "/auth-tokens.delete",
            "request": {
              "body": {
                "properties": {
                  "token_id": {
                    "docs": "The unique identifier for the token under a given Dev organization.
If no token ID is provided, then the token ID will be set from the
JTI claim of the token in the authorization header.
",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "AuthTokensDeleteRequest",
              "query-parameters": undefined,
            },
          },
          "get": {
            "auth": true,
            "docs": "Gets the token metadata corresponding to the given token ID under the
given Dev organization.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "GET",
            "path": "/auth-tokens.get",
            "request": {
              "name": "AuthTokensGetRequest",
              "query-parameters": {
                "token_id": {
                  "allow-multiple": undefined,
                  "docs": "The unique identifier of the token under a given Dev organization.
",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.AuthTokensGetResponse",
            },
          },
          "list": {
            "auth": true,
            "docs": "Gets the token metadata for all the tokens corresponding to the given
token type issued for a given subject.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "GET",
            "path": "/auth-tokens.list",
            "request": {
              "name": "AuthTokensListRequest",
              "query-parameters": {
                "client_id": {
                  "allow-multiple": undefined,
                  "docs": "An identifier that represents the application, which requested the
token. Only relevant for application access tokens.
",
                  "type": "optional<string>",
                },
                "requested_token_type": {
                  "allow-multiple": undefined,
                  "docs": "The type of the requested token. If no value is specified, the
response will include tokens of all the types.
",
                  "type": "optional<root.AuthTokenRequestedTokenType>",
                },
                "subject": {
                  "allow-multiple": undefined,
                  "docs": "The subject associated with the token. In the absence of this
parameter, the ID of the authenticated entity is treated as the
subject.
",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.AuthTokensListResponse",
            },
          },
          "selfDelete": {
            "auth": true,
            "docs": "Revokes all the tokens that matches the given token type created by the
authenticated user.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "path": "/auth-tokens.self.delete",
            "request": {
              "body": {
                "properties": {
                  "requested_token_type": {
                    "docs": undefined,
                    "type": "optional<root.AuthTokenRequestedTokenType>",
                  },
                },
              },
              "headers": undefined,
              "name": "AuthTokensSelfDeleteRequest",
              "query-parameters": undefined,
            },
          },
          "update": {
            "auth": true,
            "docs": "Updates token metadata of a token issued under a given Dev
organization.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "path": "/auth-tokens.update",
            "request": {
              "body": {
                "properties": {
                  "token_hint": {
                    "docs": "A hint that identifies the token.",
                    "type": "string",
                  },
                  "token_id": {
                    "docs": "The unique identifier of the token under a given Dev organization.
",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "AuthTokensUpdateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.AuthTokensUpdateResponse",
            },
          },
        },
      },
    },
    "devUsers.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "list": {
            "auth": true,
            "docs": "Lists users within your organization.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "GET",
            "path": "/dev-users.list",
            "request": {
              "name": "DevUsersListRequest",
              "query-parameters": {
                "cursor": {
                  "allow-multiple": undefined,
                  "docs": "The cursor to resume iteration from. If not provided, then iteration
starts from the beginning.
",
                  "type": "optional<string>",
                },
                "email": {
                  "allow-multiple": true,
                  "docs": "Filters Dev users based on email addresses.",
                  "type": "optional<string>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": "The maximum number of Dev users to return. The default is '50'.
",
                  "type": "optional<integer>",
                },
                "mode": {
                  "allow-multiple": undefined,
                  "docs": "The iteration mode to use, otherwise if not set, then "after" is
used.
",
                  "type": "optional<root.ListMode>",
                },
                "sort_by": {
                  "allow-multiple": true,
                  "docs": "Fields to sort the Dev users by and the direction to sort them.
",
                  "type": "optional<string>",
                },
                "state": {
                  "allow-multiple": true,
                  "docs": "Filters Dev users based on state.",
                  "type": "optional<root.UserState>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.DevUsersListResponse",
            },
          },
          "self": {
            "auth": true,
            "docs": "Gets the authenticated user's information.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "GET",
            "path": "/dev-users.self",
            "response": {
              "docs": "Success.",
              "type": "root.DevUsersSelfResponse",
            },
          },
        },
      },
    },
    "parts.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "create": {
            "auth": true,
            "docs": "Creates new [part](https://devrev.ai/docs/product/parts).",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "path": "/parts.create",
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.PartsCreateRequest",
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.PartsCreateResponse",
            },
          },
          "delete": {
            "auth": true,
            "docs": "Deletes a [part](https://devrev.ai/docs/product/parts).",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "path": "/parts.delete",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The ID of the part to delete.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "PartsDeleteRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.parts-delete-response",
            },
          },
          "get": {
            "auth": true,
            "docs": "Gets a [part's](https://devrev.ai/docs/product/parts) information.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "GET",
            "path": "/parts.get",
            "request": {
              "name": "PartsGetRequest",
              "query-parameters": {
                "id": {
                  "allow-multiple": undefined,
                  "docs": "The ID of the part to retrieve.",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.PartsGetResponse",
            },
          },
          "list": {
            "auth": true,
            "docs": "Lists a collection of [parts](https://devrev.ai/docs/product/parts).
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "GET",
            "path": "/parts.list",
            "request": {
              "name": "PartsListRequest",
              "query-parameters": {
                "created_by": {
                  "allow-multiple": true,
                  "docs": "Filters for parts created by any of these users.",
                  "type": "optional<string>",
                },
                "cursor": {
                  "allow-multiple": undefined,
                  "docs": "The cursor to resume iteration from. If not provided, then iteration
starts from the beginning.
",
                  "type": "optional<string>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": "The maximum number of parts to return. The default is '50'.
",
                  "type": "optional<integer>",
                },
                "mode": {
                  "allow-multiple": undefined,
                  "docs": "The iteration mode to use, otherwise if not set, then "after" is
used.
",
                  "type": "optional<root.ListMode>",
                },
                "name": {
                  "allow-multiple": true,
                  "docs": "Filters for parts of the provided name(s).",
                  "type": "optional<string>",
                },
                "owned_by": {
                  "allow-multiple": true,
                  "docs": "Filters for parts owned by any of these users.",
                  "type": "optional<string>",
                },
                "type": {
                  "allow-multiple": true,
                  "docs": "Filters for parts of the provided type(s).",
                  "type": "optional<root.PartType>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.PartsListResponse",
            },
          },
          "update": {
            "auth": true,
            "docs": "Updates a [part's](https://devrev.ai/docs/product/parts) information.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "path": "/parts.update",
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.PartsUpdateRequest",
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.PartsUpdateResponse",
            },
          },
        },
      },
    },
    "revOrgs.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "create": {
            "auth": true,
            "docs": "Creates a Rev organization in the authenticated user's Dev
organization.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "path": "/rev-orgs.create",
            "request": {
              "body": {
                "properties": {
                  "description": {
                    "docs": "Description of the Rev organization.",
                    "type": "optional<string>",
                  },
                  "display_name": {
                    "docs": "Name of the Rev organization.",
                    "type": "string",
                  },
                  "domain": {
                    "docs": "Company's domain name. Example - 'devrev.ai'.",
                    "type": "optional<string>",
                  },
                  "environment": {
                    "docs": undefined,
                    "type": "optional<root.OrgEnvironment>",
                  },
                  "external_ref": {
                    "docs": "External ref is a custom unique identifier which is a reference to
an unique id for this organization's data in some system of
records.
",
                    "type": "optional<string>",
                  },
                  "tier": {
                    "docs": "The tier of the RevOrg.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "RevOrgsCreateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.RevOrgsCreateResponse",
            },
          },
          "delete": {
            "auth": true,
            "docs": "Deletes the Rev organization.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "path": "/rev-orgs.delete",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The ID of Rev organization to delete.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "RevOrgsDeleteRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.rev-orgs-delete-response",
            },
          },
          "get": {
            "auth": true,
            "docs": "Retrieves the Rev organization's information.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "GET",
            "path": "/rev-orgs.get",
            "request": {
              "name": "RevOrgsGetRequest",
              "query-parameters": {
                "id": {
                  "allow-multiple": undefined,
                  "docs": "The ID of the required Rev organization.",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.RevOrgsGetResponse",
            },
          },
          "list": {
            "auth": true,
            "docs": "Gets the list of Rev organizations' information belonging to the
authenticated user's Dev Organization which the user is also authorized
to access.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "GET",
            "path": "/rev-orgs.list",
            "request": {
              "name": "RevOrgsListRequest",
              "query-parameters": {
                "created_by": {
                  "allow-multiple": true,
                  "docs": "Filters by creator.",
                  "type": "optional<string>",
                },
                "created_date.after": {
                  "allow-multiple": undefined,
                  "docs": "Filters for objects created after the provided timestamp (inclusive).
",
                  "type": "optional<string>",
                },
                "created_date.before": {
                  "allow-multiple": undefined,
                  "docs": "Filters for objects created before the provided timestamp
(inclusive).
",
                  "type": "optional<string>",
                },
                "cursor": {
                  "allow-multiple": undefined,
                  "docs": "The cursor to resume iteration from. If not provided, then iteration
starts from the beginning.
",
                  "type": "optional<string>",
                },
                "external_ref": {
                  "allow-multiple": true,
                  "docs": "List of external refs to filter Rev organizations for.",
                  "type": "optional<string>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": "The maximum number of Rev organizations to be retrieved per page.
",
                  "type": "optional<integer>",
                },
                "mode": {
                  "allow-multiple": undefined,
                  "docs": "The iteration mode to use, otherwise if not set, then "after" is
used.
",
                  "type": "optional<root.ListMode>",
                },
                "modified_date.after": {
                  "allow-multiple": undefined,
                  "docs": "Filters for objects created after the provided timestamp (inclusive).
",
                  "type": "optional<string>",
                },
                "modified_date.before": {
                  "allow-multiple": undefined,
                  "docs": "Filters for objects created before the provided timestamp
(inclusive).
",
                  "type": "optional<string>",
                },
                "sort_by": {
                  "allow-multiple": true,
                  "docs": "Fields to sort the Rev organizations by and the direction to sort
them.
",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.RevOrgsListResponse",
            },
          },
          "update": {
            "auth": true,
            "docs": "Updates the Rev organization's information.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "path": "/rev-orgs.update",
            "request": {
              "body": {
                "properties": {
                  "description": {
                    "docs": "Description of the Rev organization.",
                    "type": "optional<string>",
                  },
                  "display_name": {
                    "docs": "Customer chosen name for the Rev organization.",
                    "type": "optional<string>",
                  },
                  "domain": {
                    "docs": "Company's domain name. Example - 'devrev.ai'.",
                    "type": "optional<string>",
                  },
                  "environment": {
                    "docs": undefined,
                    "type": "optional<root.OrgEnvironment>",
                  },
                  "external_ref": {
                    "docs": "External ref is a custom unique identifier which is a reference to
an unique id for this organization's data in some system of
records.
",
                    "type": "optional<string>",
                  },
                  "id": {
                    "docs": "The ID of Rev organization to update.",
                    "type": "string",
                  },
                  "tier": {
                    "docs": "The tier of the RevOrg.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "RevOrgsUpdateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.RevOrgsUpdateResponse",
            },
          },
        },
      },
    },
    "tags.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "create": {
            "auth": true,
            "docs": "Creates a new tag, which is used to create associations between objects
and a logical concept denoted by the tag's name.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "path": "/tags.create",
            "request": {
              "body": {
                "properties": {
                  "allowed_values": {
                    "docs": "The allowed values for the tag, or empty if no values are
permitted.
",
                    "type": "optional<list<string>>",
                  },
                  "description": {
                    "docs": "The description for the tag.",
                    "type": "optional<string>",
                  },
                  "name": {
                    "docs": "The name for the tag, which must be unique across all tags.
",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "TagsCreateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.TagsCreateResponse",
            },
          },
          "delete": {
            "auth": true,
            "docs": "Deletes a tag.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "path": "/tags.delete",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The ID of the tag to delete.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "TagsDeleteRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.tags-delete-response",
            },
          },
          "get": {
            "auth": true,
            "docs": "Gets a tag's information.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "GET",
            "path": "/tags.get",
            "request": {
              "name": "TagsGetRequest",
              "query-parameters": {
                "id": {
                  "allow-multiple": undefined,
                  "docs": "The requested tag's ID.",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.TagsGetResponse",
            },
          },
          "list": {
            "auth": true,
            "docs": "Lists the available tags.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "GET",
            "path": "/tags.list",
            "request": {
              "name": "TagsListRequest",
              "query-parameters": {
                "cursor": {
                  "allow-multiple": undefined,
                  "docs": "The cursor to resume iteration from. If not provided, then iteration
starts from the beginning.
",
                  "type": "optional<string>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": "The maximum number of tags to return. The default is '50'.",
                  "type": "optional<integer>",
                },
                "mode": {
                  "allow-multiple": undefined,
                  "docs": "The iteration mode to use, otherwise if not set, then "after" is
used.
",
                  "type": "optional<root.ListMode>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.TagsListResponse",
            },
          },
          "update": {
            "auth": true,
            "docs": "Updates a tag's information.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "path": "/tags.update",
            "request": {
              "body": {
                "properties": {
                  "allowed_values": {
                    "docs": undefined,
                    "type": "optional<root.TagsUpdateAllowedValues>",
                  },
                  "description": {
                    "docs": "The updated description of the tag.",
                    "type": "optional<string>",
                  },
                  "id": {
                    "docs": "The ID of the tag to update.",
                    "type": "string",
                  },
                  "name": {
                    "docs": "The updated name of the tag. The name must be unique across all
tags.
",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "TagsUpdateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.TagsUpdateResponse",
            },
          },
        },
      },
    },
    "timelineEntries.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "create": {
            "auth": true,
            "docs": "Creates a new entry on an object's timeline.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "path": "/timeline-entries.create",
            "request": {
              "body": {
                "docs": "The request to create a timeline entry for an object.",
                "type": "root.TimelineEntriesCreateRequest",
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.TimelineEntriesCreateResponse",
            },
          },
          "get": {
            "auth": true,
            "docs": "Gets an entry on an object's timeline.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "GET",
            "path": "/timeline-entries.get",
            "request": {
              "name": "TimelineEntriesGetRequest",
              "query-parameters": {
                "id": {
                  "allow-multiple": undefined,
                  "docs": "The ID of the timeline entry to get.",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.TimelineEntriesGetResponse",
            },
          },
          "list": {
            "auth": true,
            "docs": "Lists the timeline entries for an object.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "GET",
            "path": "/timeline-entries.list",
            "request": {
              "name": "TimelineEntriesListRequest",
              "query-parameters": {
                "cursor": {
                  "allow-multiple": undefined,
                  "docs": "The cursor to resume iteration from. If not provided, then iteration
starts from the beginning.
",
                  "type": "optional<string>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": "The maximum number of entries to return. If not set, then this
defaults to \`50\`.
",
                  "type": "optional<integer>",
                },
                "mode": {
                  "allow-multiple": undefined,
                  "docs": "The iteration mode to use, otherwise if not set, then "after" is
used.
",
                  "type": "optional<root.ListMode>",
                },
                "object": {
                  "allow-multiple": undefined,
                  "docs": "The ID of the object to list timeline entries for.",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.TimelineEntriesListResponse",
            },
          },
          "update": {
            "auth": true,
            "docs": "Updates an entry on an object's timeline.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "path": "/timeline-entries.update",
            "request": {
              "body": {
                "docs": "The request to update a timeline entry.",
                "type": "root.TimelineEntriesUpdateRequest",
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.TimelineEntriesUpdateResponse",
            },
          },
        },
      },
    },
    "webhooks.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "create": {
            "auth": true,
            "docs": "Creates a new webhook target.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "path": "/webhooks.create",
            "request": {
              "body": {
                "properties": {
                  "event_types": {
                    "docs": "The event types that the webhook endpoint will receive.",
                    "type": "optional<list<root.WebhookEventType>>",
                  },
                  "secret": {
                    "docs": "The secret to use when verifying webhook events. If provided, the
secret must be between 8 and 32 bytes (inclusive). If not set, a
secret will be automatically generated and provided in the
response.
",
                    "type": "optional<string>",
                  },
                  "url": {
                    "docs": "The URL of the webhook endpoint.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "WebhooksCreateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.WebhooksCreateResponse",
            },
          },
          "delete": {
            "auth": true,
            "docs": "Deletes the requested webhook.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "path": "/webhooks.delete",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "ID for the webhook.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "WebhooksDeleteRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.webhooks-delete-response",
            },
          },
          "get": {
            "auth": true,
            "docs": "Gets the requested webhook's information.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "GET",
            "path": "/webhooks.get",
            "request": {
              "name": "WebhooksGetRequest",
              "query-parameters": {
                "id": {
                  "allow-multiple": undefined,
                  "docs": "ID for the webhook.",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.WebhooksGetResponse",
            },
          },
          "list": {
            "auth": true,
            "docs": "Lists the webhooks.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "GET",
            "path": "/webhooks.list",
            "response": {
              "docs": "Success.",
              "type": "root.WebhooksListResponse",
            },
          },
          "update": {
            "auth": true,
            "docs": "Updates the requested webhook.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "path": "/webhooks.update",
            "request": {
              "body": {
                "properties": {
                  "action": {
                    "docs": undefined,
                    "type": "optional<root.WebhooksUpdateAction>",
                  },
                  "event_types": {
                    "docs": undefined,
                    "type": "optional<root.WebhooksUpdateRequestEventTypes>",
                  },
                  "id": {
                    "docs": "ID for the webhook.",
                    "type": "string",
                  },
                  "secret": {
                    "docs": "If provided, updates the secret that's used when verifying webhook
events, which must be between 8 and 32 bytes (inclusive). Otherwise
if empty, then a new secret is generated. If the webhook is active,
then its status will transition to the 'unverified' state and it
won't receive any object events until successfully verified.
",
                    "type": "optional<string>",
                  },
                  "url": {
                    "docs": "The webhook's updated URL. If the webhook is active, then the
webhook's status will transition to the 'unverified' state and it
won't receive any object events until successfully verified.
",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "WebhooksUpdateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.WebhooksUpdateResponse",
            },
          },
        },
      },
    },
    "works.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "create": {
            "auth": true,
            "docs": "Creates new work ([issue](https://devrev.ai/docs/product/build),
[ticket](https://devrev.ai/docs/product/support)) item.
",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "path": "/works.create",
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.WorksCreateRequest",
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.WorksCreateResponse",
            },
          },
          "delete": {
            "auth": true,
            "docs": "Deletes a work item.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "path": "/works.delete",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The work's ID.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "WorksDeleteRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.works-delete-response",
            },
          },
          "export": {
            "auth": true,
            "docs": "Exports a collection of work items.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "GET",
            "path": "/works.export",
            "request": {
              "name": "WorksExportRequest",
              "query-parameters": {
                "applies_to_part": {
                  "allow-multiple": true,
                  "docs": "Filters for work belonging to any of the provided parts.",
                  "type": "optional<string>",
                },
                "created_by": {
                  "allow-multiple": true,
                  "docs": "Filters for work created by any of these users.",
                  "type": "optional<string>",
                },
                "first": {
                  "allow-multiple": undefined,
                  "docs": "The number of work items to return. The default is '50', the maximum
is '5000'.
",
                  "type": "optional<integer>",
                },
                "issue.priority": {
                  "allow-multiple": true,
                  "docs": "Filters for issues with any of the provided priorities.",
                  "type": "optional<root.IssuePriority>",
                },
                "issue.rev_orgs": {
                  "allow-multiple": true,
                  "docs": "Filters for issues with any of the provided Rev organizations.
",
                  "type": "optional<string>",
                },
                "owned_by": {
                  "allow-multiple": true,
                  "docs": "Filters for work owned by any of these users.",
                  "type": "optional<string>",
                },
                "stage.name": {
                  "allow-multiple": true,
                  "docs": "Filters for records in the provided stage(s).",
                  "type": "optional<string>",
                },
                "ticket.rev_org": {
                  "allow-multiple": true,
                  "docs": "Filters for tickets that are associated with any of the provided Rev
organizations.
",
                  "type": "optional<string>",
                },
                "ticket.severity": {
                  "allow-multiple": true,
                  "docs": "Filters for tickets with any of the provided severities.",
                  "type": "optional<root.TicketSeverity>",
                },
                "type": {
                  "allow-multiple": true,
                  "docs": "Filters for work of the provided types.",
                  "type": "optional<root.WorkType>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.WorksExportResponse",
            },
          },
          "get": {
            "auth": true,
            "docs": "Gets a work item's information.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "GET",
            "path": "/works.get",
            "request": {
              "name": "WorksGetRequest",
              "query-parameters": {
                "id": {
                  "allow-multiple": undefined,
                  "docs": "The work's ID.",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.WorksGetResponse",
            },
          },
          "list": {
            "auth": true,
            "docs": "Lists a collection of work items.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "GET",
            "path": "/works.list",
            "request": {
              "name": "WorksListRequest",
              "query-parameters": {
                "applies_to_part": {
                  "allow-multiple": true,
                  "docs": "Filters for work belonging to any of the provided parts.",
                  "type": "optional<string>",
                },
                "created_by": {
                  "allow-multiple": true,
                  "docs": "Filters for work created by any of these users.",
                  "type": "optional<string>",
                },
                "cursor": {
                  "allow-multiple": undefined,
                  "docs": "The cursor to resume iteration from. If not provided, then iteration
starts from the beginning.
",
                  "type": "optional<string>",
                },
                "issue.priority": {
                  "allow-multiple": true,
                  "docs": "Filters for issues with any of the provided priorities.",
                  "type": "optional<root.IssuePriority>",
                },
                "issue.rev_orgs": {
                  "allow-multiple": true,
                  "docs": "Filters for issues with any of the provided Rev organizations.
",
                  "type": "optional<string>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": "The maximum number of works to return. The default is '50'.
",
                  "type": "optional<integer>",
                },
                "mode": {
                  "allow-multiple": undefined,
                  "docs": "The iteration mode to use, otherwise if not set, then "after" is
used.
",
                  "type": "optional<root.ListMode>",
                },
                "owned_by": {
                  "allow-multiple": true,
                  "docs": "Filters for work owned by any of these users.",
                  "type": "optional<string>",
                },
                "stage.name": {
                  "allow-multiple": true,
                  "docs": "Filters for records in the provided stage(s).",
                  "type": "optional<string>",
                },
                "ticket.rev_org": {
                  "allow-multiple": true,
                  "docs": "Filters for tickets that are associated with any of the provided Rev
organizations.
",
                  "type": "optional<string>",
                },
                "ticket.severity": {
                  "allow-multiple": true,
                  "docs": "Filters for tickets with any of the provided severities.",
                  "type": "optional<root.TicketSeverity>",
                },
                "type": {
                  "allow-multiple": true,
                  "docs": "Filters for work of the provided types.",
                  "type": "optional<root.WorkType>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.WorksListResponse",
            },
          },
          "update": {
            "auth": true,
            "docs": "Updates a work item's information.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
              "root.ServiceUnavailableError",
            ],
            "method": "POST",
            "path": "/works.update",
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.WorksUpdateRequest",
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.WorksUpdateResponse",
            },
          },
        },
      },
    },
  },
  "rootApiFile": {
    "auth": "auth-token",
    "auth-schemes": {
      "auth-token": {
        "header": "Authorization",
        "name": "apiKey",
        "type": "string",
      },
    },
    "default-environment": "default",
    "display-name": "DevRev REST API",
    "environments": {
      "default": "{protocol}://{hostname}",
    },
    "error-discrimination": {
      "strategy": "status-code",
    },
    "name": "api",
  },
}
`;

exports[`open api converter hathora simple 1`] = `
{
  "definitionFiles": {
    "__package__.yml": {
      "errors": {
        "BadRequestError": {
          "status-code": 400,
          "type": "string",
        },
        "InternalServerError": {
          "status-code": 500,
          "type": "string",
        },
        "NotFoundError": {
          "status-code": 404,
          "type": "string",
        },
        "TooManyRequestsError": {
          "status-code": 429,
          "type": "string",
        },
        "UnauthorizedError": {
          "status-code": 401,
          "type": "string",
        },
        "UnprocessableEntityError": {
          "status-code": 422,
          "type": "string",
        },
      },
      "service": undefined,
      "types": {
        "ActiveConnectionInfo": {
          "docs": undefined,
          "properties": {
            "host": {
              "docs": undefined,
              "type": "string",
            },
            "port": {
              "docs": undefined,
              "type": "double",
            },
            "roomId": {
              "docs": undefined,
              "type": "RoomId",
            },
            "status": {
              "docs": undefined,
              "type": "ActiveConnectionInfoStatus",
            },
            "transportType": {
              "docs": undefined,
              "type": "TransportType",
            },
          },
        },
        "ActiveConnectionInfoStatus": {
          "docs": undefined,
          "enum": [
            {
              "name": "active",
              "value": "active",
            },
          ],
        },
        "AppConfig": {
          "docs": undefined,
          "properties": {
            "appName": {
              "docs": undefined,
              "type": "string",
            },
            "authConfiguration": {
              "docs": undefined,
              "type": "AppConfigAuthConfiguration",
            },
          },
        },
        "AppConfigAuthConfiguration": {
          "docs": undefined,
          "properties": {
            "anonymous": {
              "docs": undefined,
              "type": "optional<RecordStringNever>",
            },
            "google": {
              "docs": undefined,
              "type": "optional<AppConfigAuthConfigurationGoogle>",
            },
            "nickname": {
              "docs": undefined,
              "type": "optional<RecordStringNever>",
            },
          },
        },
        "AppConfigAuthConfigurationGoogle": {
          "docs": undefined,
          "properties": {
            "clientId": {
              "docs": undefined,
              "type": "string",
            },
          },
        },
        "AppId": {
          "docs": undefined,
          "type": "string",
        },
        "Application": {
          "docs": undefined,
          "properties": {
            "appId": {
              "docs": undefined,
              "type": "string",
            },
            "appName": {
              "docs": undefined,
              "type": "string",
            },
            "appSecret": {
              "docs": undefined,
              "type": "string",
            },
            "authConfiguration": {
              "docs": undefined,
              "type": "ApplicationAuthConfiguration",
            },
            "createdAt": {
              "docs": undefined,
              "type": "string",
            },
            "createdBy": {
              "docs": undefined,
              "type": "string",
            },
            "deletedAt": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "deletedBy": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "orgId": {
              "docs": undefined,
              "type": "OrgId",
            },
          },
        },
        "ApplicationAuthConfiguration": {
          "docs": undefined,
          "properties": {
            "anonymous": {
              "docs": undefined,
              "type": "optional<RecordStringNever>",
            },
            "google": {
              "docs": undefined,
              "type": "optional<ApplicationAuthConfigurationGoogle>",
            },
            "nickname": {
              "docs": undefined,
              "type": "optional<RecordStringNever>",
            },
          },
        },
        "ApplicationAuthConfigurationGoogle": {
          "docs": undefined,
          "properties": {
            "clientId": {
              "docs": undefined,
              "type": "string",
            },
          },
        },
        "ApplicationWithDeployment": {
          "docs": undefined,
          "properties": {
            "deployment": {
              "docs": undefined,
              "type": "Deployment",
            },
          },
        },
        "Build": {
          "docs": undefined,
          "properties": {
            "appId": {
              "docs": undefined,
              "type": "AppId",
            },
            "buildId": {
              "docs": undefined,
              "type": "BuildId",
            },
            "createdAt": {
              "docs": undefined,
              "type": "string",
            },
            "createdBy": {
              "docs": undefined,
              "type": "string",
            },
            "deletedAt": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "finishedAt": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "imageSize": {
              "docs": undefined,
              "type": "double",
            },
            "regionalContainerTags": {
              "docs": undefined,
              "type": "list<BuildRegionalContainerTagsItem>",
            },
            "startedAt": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "status": {
              "docs": undefined,
              "type": "BuildStatus",
            },
          },
        },
        "BuildId": {
          "docs": undefined,
          "type": "double",
        },
        "BuildRegionalContainerTagsItem": {
          "docs": undefined,
          "properties": {
            "containerTag": {
              "docs": undefined,
              "type": "string",
            },
            "region": {
              "docs": undefined,
              "type": "Region",
            },
          },
        },
        "BuildStatus": {
          "docs": undefined,
          "enum": [
            {
              "name": "created",
              "value": "created",
            },
            {
              "name": "running",
              "value": "running",
            },
            {
              "name": "succeeded",
              "value": "succeeded",
            },
            {
              "name": "failed",
              "value": "failed",
            },
          ],
        },
        "ConnectionInfo": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "StartingConnectionInfo",
            },
            {
              "docs": undefined,
              "type": "ActiveConnectionInfo",
            },
          ],
        },
        "CreateLobbyRequestVisibility": {
          "docs": undefined,
          "enum": [
            {
              "name": "public",
              "value": "public",
            },
            {
              "name": "private",
              "value": "private",
            },
            {
              "name": "local",
              "value": "local",
            },
          ],
        },
        "Deployment": {
          "docs": undefined,
          "properties": {
            "appId": {
              "docs": undefined,
              "type": "AppId",
            },
            "buildId": {
              "docs": undefined,
              "type": "BuildId",
            },
            "createdAt": {
              "docs": undefined,
              "type": "string",
            },
            "createdBy": {
              "docs": undefined,
              "type": "string",
            },
            "deploymentId": {
              "docs": undefined,
              "type": "DeploymentId",
            },
            "requestedCPU": {
              "docs": undefined,
              "type": "double",
            },
            "requestedMemoryMB": {
              "docs": undefined,
              "type": "double",
            },
          },
        },
        "DeploymentConfigEnvItem": {
          "docs": undefined,
          "properties": {
            "name": {
              "docs": undefined,
              "type": "string",
            },
            "value": {
              "docs": undefined,
              "type": "string",
            },
          },
        },
        "DeploymentId": {
          "docs": undefined,
          "type": "double",
        },
        "DiscoveryResponse": {
          "docs": undefined,
          "type": "list<DiscoveryResponseItem>",
        },
        "DiscoveryResponseItem": {
          "docs": undefined,
          "properties": {
            "host": {
              "docs": undefined,
              "type": "string",
            },
            "port": {
              "docs": undefined,
              "type": "double",
            },
            "region": {
              "docs": undefined,
              "type": "Region",
            },
          },
        },
        "Lobby": {
          "docs": undefined,
          "properties": {
            "appId": {
              "docs": undefined,
              "type": "AppId",
            },
            "createdAt": {
              "docs": undefined,
              "type": "string",
            },
            "createdBy": {
              "docs": undefined,
              "type": "string",
            },
            "initialConfig": {
              "docs": undefined,
              "type": "map<string, unknown>",
            },
            "local": {
              "docs": undefined,
              "type": "boolean",
            },
            "region": {
              "docs": undefined,
              "type": "Region",
            },
            "roomId": {
              "docs": undefined,
              "type": "RoomId",
            },
            "state": {
              "docs": undefined,
              "type": "optional<map<string, unknown>>",
            },
            "visibility": {
              "docs": undefined,
              "type": "LobbyVisibility",
            },
          },
        },
        "LobbyVisibility": {
          "docs": undefined,
          "enum": [
            {
              "name": "private",
              "value": "private",
            },
            {
              "name": "public",
              "value": "public",
            },
            {
              "name": "local",
              "value": "local",
            },
          ],
        },
        "LoginAnonymousResponse": {
          "docs": undefined,
          "properties": {
            "token": {
              "docs": undefined,
              "type": "string",
            },
          },
        },
        "LoginGoogleResponse": {
          "docs": undefined,
          "properties": {
            "token": {
              "docs": undefined,
              "type": "string",
            },
          },
        },
        "LoginNicknameResponse": {
          "docs": undefined,
          "properties": {
            "token": {
              "docs": undefined,
              "type": "string",
            },
          },
        },
        "MetricName": {
          "docs": undefined,
          "enum": [
            {
              "name": "cpu",
              "value": "cpu",
            },
            {
              "name": "memory",
              "value": "memory",
            },
            {
              "name": "rate_egress",
              "value": "rate_egress",
            },
            {
              "name": "total_egress",
              "value": "total_egress",
            },
          ],
        },
        "MetricValue": {
          "docs": undefined,
          "properties": {
            "timestamp": {
              "docs": undefined,
              "type": "double",
            },
            "value": {
              "docs": undefined,
              "type": "double",
            },
          },
        },
        "MetricsResponse": {
          "docs": undefined,
          "type": "RecordPartialMetricNameMetricValueArray",
        },
        "OmitRoomAllocations": {
          "docs": undefined,
          "type": "PickRoomExcludeKeyofRoomAllocations",
        },
        "OrgId": {
          "docs": undefined,
          "type": "string",
        },
        "PickRoomExcludeKeyofRoomAllocations": {
          "docs": "From T, pick a set of properties whose keys are in the union K",
          "properties": {
            "appId": {
              "docs": undefined,
              "type": "AppId",
            },
            "currentAllocation": {
              "docs": undefined,
              "type": "optional<RoomAllocation>",
            },
            "roomId": {
              "docs": undefined,
              "type": "RoomId",
            },
            "status": {
              "docs": undefined,
              "type": "RoomStatus",
            },
          },
        },
        "PlanName": {
          "docs": undefined,
          "enum": [
            {
              "name": "tiny",
              "value": "tiny",
            },
            {
              "name": "small",
              "value": "small",
            },
            {
              "name": "medium",
              "value": "medium",
            },
            {
              "name": "large",
              "value": "large",
            },
          ],
        },
        "Process": {
          "docs": undefined,
          "properties": {
            "activeConnections": {
              "docs": undefined,
              "type": "double",
            },
            "appId": {
              "docs": undefined,
              "type": "AppId",
            },
            "deploymentId": {
              "docs": undefined,
              "type": "DeploymentId",
            },
            "draining": {
              "docs": undefined,
              "type": "boolean",
            },
            "egressedBytes": {
              "docs": undefined,
              "type": "double",
            },
            "host": {
              "docs": undefined,
              "type": "string",
            },
            "idleSince": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "port": {
              "docs": undefined,
              "type": "double",
            },
            "processId": {
              "docs": undefined,
              "type": "ProcessId",
            },
            "region": {
              "docs": undefined,
              "type": "Region",
            },
            "roomSlotsAvailable": {
              "docs": undefined,
              "type": "double",
            },
            "roomsPerProcess": {
              "docs": undefined,
              "type": "double",
            },
            "startedAt": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "startingAt": {
              "docs": undefined,
              "type": "string",
            },
            "stoppingAt": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "terminatedAt": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "ProcessId": {
          "docs": undefined,
          "type": "string",
        },
        "ProcessWithRooms": {
          "docs": undefined,
          "properties": {
            "rooms": {
              "docs": undefined,
              "type": "list<RoomWithoutAllocations>",
            },
            "totalRooms": {
              "docs": undefined,
              "type": "double",
            },
          },
        },
        "RecordPartialMetricNameMetricValueArray": {
          "docs": "Construct a type with a set of properties K of type T",
          "properties": {
            "cpu": {
              "docs": undefined,
              "type": "optional<list<MetricValue>>",
            },
            "memory": {
              "docs": undefined,
              "type": "optional<list<MetricValue>>",
            },
            "rate_egress": {
              "docs": undefined,
              "type": "optional<list<MetricValue>>",
            },
            "total_egress": {
              "docs": undefined,
              "type": "optional<list<MetricValue>>",
            },
          },
        },
        "RecordStringNever": {
          "docs": "Construct a type with a set of properties K of type T",
          "properties": {},
        },
        "Region": {
          "docs": undefined,
          "enum": [
            {
              "name": "Seattle",
              "value": "Seattle",
            },
            {
              "name": "Washington_DC",
              "value": "Washington_DC",
            },
            {
              "name": "Chicago",
              "value": "Chicago",
            },
            {
              "name": "London",
              "value": "London",
            },
            {
              "name": "Frankfurt",
              "value": "Frankfurt",
            },
            {
              "name": "Mumbai",
              "value": "Mumbai",
            },
            {
              "name": "Singapore",
              "value": "Singapore",
            },
            {
              "name": "Tokyo",
              "value": "Tokyo",
            },
            {
              "name": "Sydney",
              "value": "Sydney",
            },
            {
              "name": "Sao_Paulo",
              "value": "Sao_Paulo",
            },
          ],
        },
        "Room": {
          "docs": undefined,
          "properties": {
            "allocations": {
              "docs": undefined,
              "type": "list<RoomAllocation>",
            },
            "appId": {
              "docs": undefined,
              "type": "AppId",
            },
            "currentAllocation": {
              "docs": undefined,
              "type": "optional<RoomAllocation>",
            },
            "roomId": {
              "docs": undefined,
              "type": "RoomId",
            },
            "status": {
              "docs": undefined,
              "type": "RoomStatus",
            },
          },
        },
        "RoomAllocation": {
          "docs": undefined,
          "properties": {
            "processId": {
              "docs": undefined,
              "type": "ProcessId",
            },
            "roomAllocationId": {
              "docs": undefined,
              "type": "RoomAllocationId",
            },
            "scheduledAt": {
              "docs": undefined,
              "type": "string",
            },
            "unscheduledAt": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "RoomAllocationId": {
          "docs": undefined,
          "type": "string",
        },
        "RoomId": {
          "docs": undefined,
          "type": "string",
        },
        "RoomStatus": {
          "docs": undefined,
          "enum": [
            {
              "name": "scheduling",
              "value": "scheduling",
            },
            {
              "name": "active",
              "value": "active",
            },
            {
              "name": "suspended",
              "value": "suspended",
            },
            {
              "name": "destroyed",
              "value": "destroyed",
            },
          ],
        },
        "RoomWithoutAllocations": {
          "docs": undefined,
          "type": "OmitRoomAllocations",
        },
        "StartingConnectionInfo": {
          "docs": undefined,
          "properties": {
            "roomId": {
              "docs": undefined,
              "type": "RoomId",
            },
            "status": {
              "docs": undefined,
              "type": "StartingConnectionInfoStatus",
            },
          },
        },
        "StartingConnectionInfoStatus": {
          "docs": undefined,
          "enum": [
            {
              "name": "starting",
              "value": "starting",
            },
          ],
        },
        "TailLines": {
          "docs": undefined,
          "type": "integer",
        },
        "TransportType": {
          "docs": undefined,
          "enum": [
            {
              "name": "tcp",
              "value": "tcp",
            },
            {
              "name": "udp",
              "value": "udp",
            },
            {
              "name": "tls",
              "value": "tls",
            },
          ],
        },
      },
    },
    "appV1.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "CreateApp": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.UnprocessableEntityError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/apps/v1/create",
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.AppConfig",
              },
            },
            "response": {
              "docs": "",
              "type": "root.Application",
            },
          },
          "DeleteApp": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "DELETE",
            "path": "/apps/v1/delete/{appId}",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
            },
          },
          "GetAppInfo": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/apps/v1/info/{appId}",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.Application",
            },
          },
          "GetApps": {
            "auth": true,
            "docs": undefined,
            "errors": [],
            "method": "GET",
            "path": "/apps/v1/list",
            "response": {
              "docs": "Ok",
              "type": "list<root.ApplicationWithDeployment>",
            },
          },
          "UpdateApp": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/apps/v1/update/{appId}",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.AppConfig",
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.Application",
            },
          },
        },
      },
    },
    "authV1.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "LoginAnonymous": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
            ],
            "method": "POST",
            "path": "/auth/v1/{appId}/login/anonymous",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.LoginAnonymousResponse",
            },
          },
          "LoginGoogle": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.UnauthorizedError",
              "root.NotFoundError",
            ],
            "method": "POST",
            "path": "/auth/v1/{appId}/login/google",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "idToken": {
                    "docs": undefined,
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "LoginGoogleRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Ok",
              "type": "root.LoginGoogleResponse",
            },
          },
          "LoginNickname": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
            ],
            "method": "POST",
            "path": "/auth/v1/{appId}/login/nickname",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "nickname": {
                    "docs": undefined,
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "LoginNicknameRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Ok",
              "type": "root.LoginNicknameResponse",
            },
          },
        },
      },
    },
    "buildV1.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "CreateBuild": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.UnprocessableEntityError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/builds/v1/{appId}/create",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
            },
            "response": {
              "docs": "",
              "type": "root.Build",
            },
          },
          "DeleteBuild": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.UnprocessableEntityError",
              "root.InternalServerError",
            ],
            "method": "DELETE",
            "path": "/builds/v1/{appId}/delete/{buildId}",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
              "buildId": {
                "docs": undefined,
                "type": "root.BuildId",
              },
            },
          },
          "GetBuildInfo": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/builds/v1/{appId}/info/{buildId}",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
              "buildId": {
                "docs": undefined,
                "type": "root.BuildId",
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.Build",
            },
          },
          "GetBuilds": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/builds/v1/{appId}/list",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
            },
            "response": {
              "docs": "Ok",
              "type": "list<root.Build>",
            },
          },
          "RunBuild": {
            "auth": true,
            "docs": undefined,
            "errors": [],
            "method": "POST",
            "path": "/builds/v1/{appId}/run/{buildId}",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
              "buildId": {
                "docs": undefined,
                "type": "root.BuildId",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "file": "file",
                },
              },
              "headers": undefined,
              "name": "RunBuildRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Ok",
              "type": "file",
            },
          },
        },
      },
    },
    "deploymentV1.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "CreateDeployment": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/deployments/v1/{appId}/create/{buildId}",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
              "buildId": {
                "docs": undefined,
                "type": "root.BuildId",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "containerPort": {
                    "docs": undefined,
                    "type": "integer",
                  },
                  "env": {
                    "docs": undefined,
                    "type": "list<root.DeploymentConfigEnvItem>",
                  },
                  "planName": {
                    "docs": undefined,
                    "type": "root.PlanName",
                  },
                  "roomsPerProcess": {
                    "docs": undefined,
                    "type": "integer",
                  },
                  "transportType": {
                    "docs": undefined,
                    "type": "root.TransportType",
                  },
                },
              },
              "headers": undefined,
              "name": "DeploymentConfig",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "",
              "type": "root.Deployment",
            },
          },
          "GetDeploymentInfo": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/deployments/v1/{appId}/info/{deploymentId}",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
              "deploymentId": {
                "docs": undefined,
                "type": "root.DeploymentId",
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.Deployment",
            },
          },
          "GetDeployments": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/deployments/v1/{appId}/list",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
            },
            "response": {
              "docs": "Ok",
              "type": "list<root.Deployment>",
            },
          },
        },
      },
    },
    "discoveryV1.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "GetPingServiceEndpoints": {
            "auth": true,
            "docs": undefined,
            "errors": [],
            "method": "GET",
            "path": "/discovery/v1/ping",
            "response": {
              "docs": "Ok",
              "type": "root.DiscoveryResponse",
            },
          },
        },
      },
    },
    "lobbyV1.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "CreatePrivateLobbyDeprecated": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.UnauthorizedError",
              "root.NotFoundError",
              "root.UnprocessableEntityError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/lobby/v1/{appId}/create/private",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
            },
            "request": {
              "headers": {
                "Authorization": {
                  "docs": undefined,
                  "name": "authorization",
                  "type": "string",
                },
              },
              "name": "CreatePrivateLobbyDeprecatedRequest",
              "query-parameters": {
                "local": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<boolean>",
                },
                "region": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.Region>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.RoomId",
            },
          },
          "CreatePublicLobbyDeprecated": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.UnauthorizedError",
              "root.NotFoundError",
              "root.UnprocessableEntityError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/lobby/v1/{appId}/create/public",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
            },
            "request": {
              "headers": {
                "Authorization": {
                  "docs": undefined,
                  "name": "authorization",
                  "type": "string",
                },
              },
              "name": "CreatePublicLobbyDeprecatedRequest",
              "query-parameters": {
                "local": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<boolean>",
                },
                "region": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.Region>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.RoomId",
            },
          },
          "ListActivePublicLobbiesDeprecated": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.UnauthorizedError",
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/lobby/v1/{appId}/list",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
            },
            "request": {
              "headers": {
                "Authorization": {
                  "docs": undefined,
                  "name": "authorization",
                  "type": "string",
                },
              },
              "name": "ListActivePublicLobbiesDeprecatedRequest",
              "query-parameters": {
                "local": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<boolean>",
                },
                "region": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.Region>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "list<root.Lobby>",
            },
          },
        },
      },
    },
    "lobbyV2.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "CreateLobby": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.UnauthorizedError",
              "root.NotFoundError",
              "root.UnprocessableEntityError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/lobby/v2/{appId}/create",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "initialConfig": {
                    "docs": undefined,
                    "type": "map<string, unknown>",
                  },
                  "region": {
                    "docs": undefined,
                    "type": "root.Region",
                  },
                  "visibility": {
                    "docs": undefined,
                    "type": "root.CreateLobbyRequestVisibility",
                  },
                },
              },
              "headers": {
                "Authorization": {
                  "docs": undefined,
                  "name": "authorization",
                  "type": "string",
                },
              },
              "name": "CreateLobbyRequest",
              "query-parameters": {
                "roomId": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.RoomId>",
                },
              },
            },
            "response": {
              "docs": "",
              "type": "root.Lobby",
            },
          },
          "CreateLocalLobby": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.UnauthorizedError",
              "root.NotFoundError",
              "root.UnprocessableEntityError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/lobby/v2/{appId}/create/local",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "initialConfig": {
                    "docs": undefined,
                    "type": "map<string, unknown>",
                  },
                  "region": {
                    "docs": undefined,
                    "type": "root.Region",
                  },
                },
              },
              "headers": {
                "Authorization": {
                  "docs": undefined,
                  "name": "authorization",
                  "type": "string",
                },
              },
              "name": "CreateLocalLobbyRequest",
              "query-parameters": {
                "roomId": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.RoomId>",
                },
              },
            },
            "response": {
              "docs": "",
              "type": "root.Lobby",
            },
          },
          "CreatePrivateLobby": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.UnauthorizedError",
              "root.NotFoundError",
              "root.UnprocessableEntityError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/lobby/v2/{appId}/create/private",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "initialConfig": {
                    "docs": undefined,
                    "type": "map<string, unknown>",
                  },
                  "region": {
                    "docs": undefined,
                    "type": "root.Region",
                  },
                },
              },
              "headers": {
                "Authorization": {
                  "docs": undefined,
                  "name": "authorization",
                  "type": "string",
                },
              },
              "name": "CreatePrivateLobbyRequest",
              "query-parameters": {
                "roomId": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.RoomId>",
                },
              },
            },
            "response": {
              "docs": "",
              "type": "root.Lobby",
            },
          },
          "CreatePublicLobby": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.UnauthorizedError",
              "root.NotFoundError",
              "root.UnprocessableEntityError",
              "root.TooManyRequestsError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/lobby/v2/{appId}/create/public",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "initialConfig": {
                    "docs": undefined,
                    "type": "map<string, unknown>",
                  },
                  "region": {
                    "docs": undefined,
                    "type": "root.Region",
                  },
                },
              },
              "headers": {
                "Authorization": {
                  "docs": undefined,
                  "name": "authorization",
                  "type": "string",
                },
              },
              "name": "CreatePublicLobbyRequest",
              "query-parameters": {
                "roomId": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.RoomId>",
                },
              },
            },
            "response": {
              "docs": "",
              "type": "root.Lobby",
            },
          },
          "GetLobbyInfo": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/lobby/v2/{appId}/info/{roomId}",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
              "roomId": {
                "docs": undefined,
                "type": "root.RoomId",
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.Lobby",
            },
          },
          "ListActivePublicLobbies": {
            "auth": true,
            "docs": undefined,
            "errors": [],
            "method": "GET",
            "path": "/lobby/v2/{appId}/list/public",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
            },
            "request": {
              "name": "ListActivePublicLobbiesRequest",
              "query-parameters": {
                "region": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.Region>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "list<root.Lobby>",
            },
          },
          "SetLobbyState": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.UnprocessableEntityError",
            ],
            "method": "POST",
            "path": "/lobby/v2/{appId}/setState/{roomId}",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
              "roomId": {
                "docs": undefined,
                "type": "root.RoomId",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "state": {
                    "docs": undefined,
                    "type": "map<string, unknown>",
                  },
                },
              },
              "headers": undefined,
              "name": "SetLobbyStateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Ok",
              "type": "root.Lobby",
            },
          },
        },
      },
    },
    "logV1.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "GetLogsForApp": {
            "auth": true,
            "docs": undefined,
            "errors": [],
            "method": "GET",
            "path": "/logs/v1/{appId}/all",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
            },
            "request": {
              "name": "GetLogsForAppRequest",
              "query-parameters": {
                "follow": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<boolean>",
                },
                "region": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.Region>",
                },
                "tailLines": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.TailLines>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "file",
            },
          },
          "GetLogsForDeployment": {
            "auth": true,
            "docs": undefined,
            "errors": [],
            "method": "GET",
            "path": "/logs/v1/{appId}/deployment/{deploymentId}",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
              "deploymentId": {
                "docs": undefined,
                "type": "root.DeploymentId",
              },
            },
            "request": {
              "name": "GetLogsForDeploymentRequest",
              "query-parameters": {
                "follow": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<boolean>",
                },
                "tailLines": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.TailLines>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "file",
            },
          },
          "GetLogsForProcess": {
            "auth": true,
            "docs": undefined,
            "errors": [],
            "method": "GET",
            "path": "/logs/v1/{appId}/process/{processId}",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
              "processId": {
                "docs": undefined,
                "type": "root.ProcessId",
              },
            },
            "request": {
              "name": "GetLogsForProcessRequest",
              "query-parameters": {
                "follow": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<boolean>",
                },
                "tailLines": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.TailLines>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "file",
            },
          },
        },
      },
    },
    "metricsV1.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "GetMetrics": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.UnprocessableEntityError",
            ],
            "method": "GET",
            "path": "/metrics/v1/{appId}/process/{processId}",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
              "processId": {
                "docs": undefined,
                "type": "root.ProcessId",
              },
            },
            "request": {
              "name": "GetMetricsRequest",
              "query-parameters": {
                "end": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "metrics": {
                  "allow-multiple": true,
                  "docs": undefined,
                  "type": "optional<root.MetricName>",
                },
                "start": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "step": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.MetricsResponse",
            },
          },
        },
      },
    },
    "processesV1.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "GetProcessInfo": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/processes/v1/{appId}/info/{processId}",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
              "processId": {
                "docs": undefined,
                "type": "root.ProcessId",
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.Process",
            },
          },
          "GetRunningProcesses": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/processes/v1/{appId}/list/running",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
            },
            "request": {
              "name": "GetRunningProcessesRequest",
              "query-parameters": {
                "region": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.Region>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "list<root.ProcessWithRooms>",
            },
          },
          "GetStoppedProcesses": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/processes/v1/{appId}/list/stopped",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
            },
            "request": {
              "name": "GetStoppedProcessesRequest",
              "query-parameters": {
                "region": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.Region>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "list<root.Process>",
            },
          },
        },
      },
    },
    "roomV1.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "CreateRoom": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/rooms/v1/{appId}/create",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "region": {
                    "docs": undefined,
                    "type": "root.Region",
                  },
                },
              },
              "headers": undefined,
              "name": "CreateRoomRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "",
              "type": "root.RoomId",
            },
          },
          "DestroyRoom": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/rooms/v1/{appId}/destroy/{roomId}",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
              "roomId": {
                "docs": undefined,
                "type": "root.RoomId",
              },
            },
          },
          "GetActiveRoomsForProcess": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/rooms/v1/{appId}/list/{processId}/active",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
              "processId": {
                "docs": undefined,
                "type": "root.ProcessId",
              },
            },
            "response": {
              "docs": "Ok",
              "type": "list<root.RoomWithoutAllocations>",
            },
          },
          "GetConnectionInfo": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/rooms/v1/{appId}/connectioninfo/{roomId}",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
              "roomId": {
                "docs": undefined,
                "type": "root.RoomId",
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.ConnectionInfo",
            },
          },
          "GetInactiveRoomsForProcess": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/rooms/v1/{appId}/list/{processId}/inactive",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
              "processId": {
                "docs": undefined,
                "type": "root.ProcessId",
              },
            },
            "response": {
              "docs": "Ok",
              "type": "list<root.RoomWithoutAllocations>",
            },
          },
          "GetRoomInfo": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
            ],
            "method": "GET",
            "path": "/rooms/v1/{appId}/info/{roomId}",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
              "roomId": {
                "docs": undefined,
                "type": "root.RoomId",
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.Room",
            },
          },
          "SuspendRoom": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/rooms/v1/{appId}/suspend/{roomId}",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
              "roomId": {
                "docs": undefined,
                "type": "root.RoomId",
              },
            },
          },
        },
      },
    },
  },
  "rootApiFile": {
    "auth": "bearer",
    "display-name": "Hathora Cloud API",
    "error-discrimination": {
      "strategy": "status-code",
    },
    "name": "api",
  },
}
`;

exports[`open api converter hume simple 1`] = `
{
  "definitionFiles": {
    "1StartJob.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "startJob": {
            "auth": false,
            "docs": "Start a new batch job.",
            "errors": [],
            "method": "POST",
            "path": "/v0/batch/jobs",
            "request": {
              "body": {
                "properties": {
                  "callback_url": {
                    "docs": "If provided, a \`POST\` request will be made to the URL with the generated predictions on completion or the error message on failure.",
                    "type": "optional<string>",
                  },
                  "models": {
                    "docs": undefined,
                    "type": "optional<root.Models>",
                  },
                  "notify": {
                    "docs": "Whether to send an email notification to the user upon job completion/failure.",
                    "type": "optional<boolean>",
                  },
                  "transcription": {
                    "docs": undefined,
                    "type": "optional<root.Transcription>",
                  },
                  "urls": {
                    "docs": "URLs to the media files to be processed. Each must be a valid public URL to a media file (see recommended input filetypes) or an archive (\`.zip\`, \`.tar.gz\`, \`.tar.bz2\`, \`.tar.xz\`) of media files.

If you wish to supply more than 100 URLs, consider providing them as an archive (\`.zip\`, \`.tar.gz\`, \`.tar.bz2\`, \`.tar.xz\`).",
                    "type": "optional<list<string>>",
                  },
                },
              },
              "headers": undefined,
              "name": "BaseRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "",
              "type": "root.JobId",
            },
          },
        },
      },
    },
    "2GetJobPredictions.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "getJobArtifacts": {
            "auth": false,
            "docs": "Get the artifacts ZIP of a completed job.",
            "errors": [],
            "method": "GET",
            "path": "/v0/batch/jobs/{id}/artifacts",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "",
              "type": "file",
            },
          },
          "getJobDetails": {
            "auth": false,
            "docs": "Get the request details and state of a given job.",
            "errors": [],
            "method": "GET",
            "path": "/v0/batch/jobs/{id}",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "",
              "type": "root.JobRequest",
            },
          },
          "getJobPredictions": {
            "auth": false,
            "docs": "Get the JSON predictions of a completed job.",
            "errors": [],
            "method": "GET",
            "path": "/v0/batch/jobs/{id}/predictions",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "",
              "type": "list<root.SourceResult>",
            },
          },
        },
      },
    },
    "3ListJobs.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "listJobs": {
            "auth": false,
            "docs": "Sort and filter jobs.",
            "errors": [],
            "method": "GET",
            "path": "/v0/batch/jobs",
            "request": {
              "name": "ListJobsRequest",
              "query-parameters": {
                "direction": {
                  "allow-multiple": undefined,
                  "docs": "The sort direction.",
                  "type": "optional<root.Direction>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": "The maximum number of jobs to include in the response.",
                  "type": "optional<integer>",
                },
                "sort_by": {
                  "allow-multiple": undefined,
                  "docs": "The job timestamp to sort by.",
                  "type": "optional<root.SortBy>",
                },
                "status": {
                  "allow-multiple": true,
                  "docs": "Include only jobs with these statuses.",
                  "type": "optional<root.Status>",
                },
                "timestamp_ms": {
                  "allow-multiple": undefined,
                  "docs": "Defaults to the current date and time. See \`when\`.",
                  "type": "optional<integer>",
                },
                "when": {
                  "allow-multiple": undefined,
                  "docs": "Include only jobs that were created before or after \`timestamp_ms\`.",
                  "type": "optional<root.When>",
                },
              },
            },
            "response": {
              "docs": "",
              "type": "list<root.JobRequest>",
            },
          },
        },
      },
    },
    "__package__.yml": {
      "errors": {},
      "service": undefined,
      "types": {
        "Bcp47Tag": {
          "docs": undefined,
          "enum": [
            {
              "name": "zh",
              "value": "zh",
            },
            {
              "name": "da",
              "value": "da",
            },
            {
              "name": "nl",
              "value": "nl",
            },
            {
              "name": "en",
              "value": "en",
            },
            {
              "name": "EnAu",
              "value": "en-AU",
            },
            {
              "name": "EnIn",
              "value": "en-IN",
            },
            {
              "name": "EnNz",
              "value": "en-NZ",
            },
            {
              "name": "EnGb",
              "value": "en-GB",
            },
            {
              "name": "fr",
              "value": "fr",
            },
            {
              "name": "FrCa",
              "value": "fr-CA",
            },
            {
              "name": "de",
              "value": "de",
            },
            {
              "name": "hi",
              "value": "hi",
            },
            {
              "name": "HiLatn",
              "value": "hi-Latn",
            },
            {
              "name": "id",
              "value": "id",
            },
            {
              "name": "it",
              "value": "it",
            },
            {
              "name": "ja",
              "value": "ja",
            },
            {
              "name": "ko",
              "value": "ko",
            },
            {
              "name": "no",
              "value": "no",
            },
            {
              "name": "pl",
              "value": "pl",
            },
            {
              "name": "pt",
              "value": "pt",
            },
            {
              "name": "PtBr",
              "value": "pt-BR",
            },
            {
              "name": "PtPt",
              "value": "pt-PT",
            },
            {
              "name": "ru",
              "value": "ru",
            },
            {
              "name": "es",
              "value": "es",
            },
            {
              "name": "Es419",
              "value": "es-419",
            },
            {
              "name": "sv",
              "value": "sv",
            },
            {
              "name": "ta",
              "value": "ta",
            },
            {
              "name": "tr",
              "value": "tr",
            },
            {
              "name": "uk",
              "value": "uk",
            },
          ],
        },
        "BoundingBox": {
          "docs": "A bounding box around a face.",
          "properties": {
            "h": {
              "docs": "Bounding box height.",
              "type": "double",
            },
            "w": {
              "docs": "Bounding box width.",
              "type": "double",
            },
            "x": {
              "docs": "x-coordinate of bounding box top left corner.",
              "type": "double",
            },
            "y": {
              "docs": "y-coordinate of bounding box top left corner.",
              "type": "double",
            },
          },
        },
        "BurstPrediction": {
          "docs": undefined,
          "properties": {
            "descriptions": {
              "docs": "Modality-specific descriptive features and their scores.",
              "type": "list<DescriptionsScore>",
            },
            "emotions": {
              "docs": "A high-dimensional embedding in emotion space.",
              "type": "list<EmotionScore>",
            },
            "time": {
              "docs": undefined,
              "type": "TimeInterval",
            },
          },
        },
        "Completed": {
          "docs": undefined,
          "properties": {
            "created_timestamp_ms": {
              "docs": "When this job was created (Unix timestamp in milliseconds).",
              "type": "integer",
            },
            "ended_timestamp_ms": {
              "docs": "When this job ended (Unix timestamp in milliseconds).",
              "type": "integer",
            },
            "num_errors": {
              "docs": "The number of errors that occurred while running this job.",
              "type": "integer",
            },
            "num_predictions": {
              "docs": "The number of predictions that were generated by this job.",
              "type": "integer",
            },
            "started_timestamp_ms": {
              "docs": "When this job started (Unix timestamp in milliseconds).",
              "type": "integer",
            },
          },
        },
        "DescriptionsScore": {
          "docs": undefined,
          "properties": {
            "name": {
              "docs": "Name of the descriptive feature being expressed.",
              "type": "string",
            },
            "score": {
              "docs": "Embedding value for the descriptive feature being expressed.",
              "type": "string",
            },
          },
        },
        "Direction": {
          "docs": undefined,
          "enum": [
            {
              "name": "asc",
              "value": "asc",
            },
            {
              "name": "desc",
              "value": "desc",
            },
          ],
        },
        "EmotionScore": {
          "docs": undefined,
          "properties": {
            "name": {
              "docs": "Name of the emotion being expressed.",
              "type": "string",
            },
            "score": {
              "docs": "Embedding value for the emotion being expressed.",
              "type": "string",
            },
          },
        },
        "Empty": {
          "docs": "To include predictions for this model type, set this field to \`{}\`. It is currently not configurable further.",
          "type": "map<string, unknown>",
        },
        "Error": {
          "docs": undefined,
          "properties": {
            "file": {
              "docs": "A file path relative to the top level source URL or file.",
              "type": "string",
            },
            "message": {
              "docs": "An error message.",
              "type": "string",
            },
          },
        },
        "Face": {
          "docs": undefined,
          "properties": {
            "descriptions": {
              "docs": undefined,
              "type": "optional<Empty>",
            },
            "facs": {
              "docs": undefined,
              "type": "optional<Empty>",
            },
            "fps_pred": {
              "docs": "Number of frames per second to process. Other frames will be omitted from the response. Set to \`0\` to process every frame.",
              "type": "optional<double>",
            },
            "identify_faces": {
              "docs": "Whether to return identifiers for faces across frames. If \`true\`, unique identifiers will be assigned to face bounding boxes to differentiate different faces. If \`false\`, all faces will be tagged with an \`unknown\` ID.",
              "type": "optional<boolean>",
            },
            "min_face_size": {
              "docs": "Minimum bounding box side length in pixels to treat as a face. Faces detected with a bounding box side length in pixels less than this threshold will be omitted from the response.",
              "type": "optional<integer>",
            },
            "prob_threshold": {
              "docs": "Face detection probability threshold. Faces detected with a probability less than this threshold will be omitted from the response.",
              "type": "optional<double>",
            },
            "save_faces": {
              "docs": "Whether to extract and save the detected faces in the artifacts zip created by each job.",
              "type": "optional<boolean>",
            },
          },
        },
        "FacePrediction": {
          "docs": undefined,
          "properties": {
            "box": {
              "docs": undefined,
              "type": "BoundingBox",
            },
            "descriptions": {
              "docs": "Modality-specific descriptive features and their scores.",
              "type": "optional<list<DescriptionsScore>>",
            },
            "emotions": {
              "docs": "A high-dimensional embedding in emotion space.",
              "type": "list<EmotionScore>",
            },
            "facs": {
              "docs": "FACS 2.0 features and their scores.",
              "type": "optional<list<FacsScore>>",
            },
            "frame": {
              "docs": "Frame number",
              "type": "integer",
            },
            "prob": {
              "docs": "The predicted probability that a detected face was actually a face.",
              "type": "double",
            },
            "time": {
              "docs": "Time in seconds when face detection occurred.",
              "type": "double",
            },
          },
        },
        "FacemeshPrediction": {
          "docs": undefined,
          "properties": {
            "emotions": {
              "docs": "A high-dimensional embedding in emotion space.",
              "type": "list<EmotionScore>",
            },
          },
        },
        "FacsScore": {
          "docs": undefined,
          "properties": {
            "name": {
              "docs": "Name of the FACS 2.0 feature being expressed.",
              "type": "string",
            },
            "score": {
              "docs": "Embedding value for the FACS 2.0 feature being expressed.",
              "type": "string",
            },
          },
        },
        "Failed": {
          "docs": undefined,
          "properties": {
            "created_timestamp_ms": {
              "docs": "When this job was created (Unix timestamp in milliseconds).",
              "type": "integer",
            },
            "ended_timestamp_ms": {
              "docs": "When this job ended (Unix timestamp in milliseconds).",
              "type": "integer",
            },
            "message": {
              "docs": "An error message.",
              "type": "string",
            },
            "started_timestamp_ms": {
              "docs": "When this job started (Unix timestamp in milliseconds).",
              "type": "integer",
            },
          },
        },
        "File": {
          "docs": undefined,
          "properties": {
            "content_type": {
              "docs": "The content type of the file.",
              "type": "optional<string>",
            },
            "filename": {
              "docs": "The name of the file.",
              "type": "optional<string>",
            },
            "md5sum": {
              "docs": "The MD5 checksum of the file.",
              "type": "string",
            },
          },
        },
        "Granularity": {
          "docs": "The granularity at which to generate predictions. \`utterance\` corresponds to a natural pause or break in conversation, while \`conversational_turn\` corresponds to a change in speaker.",
          "enum": [
            {
              "name": "word",
              "value": "word",
            },
            {
              "name": "sentence",
              "value": "sentence",
            },
            {
              "name": "utterance",
              "value": "utterance",
            },
            {
              "name": "conversational_turn",
              "value": "conversational_turn",
            },
          ],
        },
        "GroupedPredictionsBurstPrediction": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": "An automatically generated label to identify individuals in your media file. Will be \`unknown\` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
              "type": "string",
            },
            "predictions": {
              "docs": undefined,
              "type": "list<BurstPrediction>",
            },
          },
        },
        "GroupedPredictionsFacePrediction": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": "An automatically generated label to identify individuals in your media file. Will be \`unknown\` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
              "type": "string",
            },
            "predictions": {
              "docs": undefined,
              "type": "list<FacePrediction>",
            },
          },
        },
        "GroupedPredictionsFacemeshPrediction": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": "An automatically generated label to identify individuals in your media file. Will be \`unknown\` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
              "type": "string",
            },
            "predictions": {
              "docs": undefined,
              "type": "list<FacemeshPrediction>",
            },
          },
        },
        "GroupedPredictionsLanguagePrediction": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": "An automatically generated label to identify individuals in your media file. Will be \`unknown\` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
              "type": "string",
            },
            "predictions": {
              "docs": undefined,
              "type": "list<LanguagePrediction>",
            },
          },
        },
        "GroupedPredictionsNerPrediction": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": "An automatically generated label to identify individuals in your media file. Will be \`unknown\` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
              "type": "string",
            },
            "predictions": {
              "docs": undefined,
              "type": "list<NerPrediction>",
            },
          },
        },
        "GroupedPredictionsProsodyPrediction": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": "An automatically generated label to identify individuals in your media file. Will be \`unknown\` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
              "type": "string",
            },
            "predictions": {
              "docs": undefined,
              "type": "list<ProsodyPrediction>",
            },
          },
        },
        "InProgress": {
          "docs": undefined,
          "properties": {
            "created_timestamp_ms": {
              "docs": "When this job was created (Unix timestamp in milliseconds).",
              "type": "integer",
            },
            "started_timestamp_ms": {
              "docs": "When this job started (Unix timestamp in milliseconds).",
              "type": "integer",
            },
          },
        },
        "JobId": {
          "docs": undefined,
          "properties": {
            "job_id": {
              "docs": "The ID of the started job.",
              "type": "string",
            },
          },
        },
        "JobRequest": {
          "docs": undefined,
          "properties": {
            "job_id": {
              "docs": undefined,
              "type": "string",
            },
            "request": {
              "docs": undefined,
              "type": "Request",
            },
            "state": {
              "docs": undefined,
              "type": "State",
            },
            "user_id": {
              "docs": undefined,
              "type": "string",
            },
          },
        },
        "Language": {
          "docs": undefined,
          "properties": {
            "granularity": {
              "docs": undefined,
              "type": "optional<Granularity>",
            },
            "identify_speakers": {
              "docs": "Whether to return identifiers for speakers over time. If \`true\`, unique identifiers will be assigned to spoken words to differentiate different speakers. If \`false\`, all speakers will be tagged with an \`unknown\` ID.",
              "type": "optional<boolean>",
            },
            "sentiment": {
              "docs": undefined,
              "type": "optional<Empty>",
            },
            "toxicity": {
              "docs": undefined,
              "type": "optional<Empty>",
            },
          },
        },
        "LanguagePrediction": {
          "docs": undefined,
          "properties": {
            "confidence": {
              "docs": "Value between \`0.0\` and \`1.0\` that indicates our transcription model’s relative confidence in this text.",
              "type": "optional<double>",
            },
            "emotions": {
              "docs": "A high-dimensional embedding in emotion space.",
              "type": "list<EmotionScore>",
            },
            "position": {
              "docs": undefined,
              "type": "PositionInterval",
            },
            "sentiment": {
              "docs": "Sentiment predictions returned as a distribution. This model predicts the probability that a given text could be interpreted as having each sentiment level from \`1\` (negative) to \`9\` (positive).

Compared to returning one estimate of sentiment, this enables a more nuanced analysis of a text's meaning. For example, a text with very neutral sentiment would have an average rating of \`5\`. But also a text that could be interpreted as having very positive sentiment or very negative sentiment would also have an average rating of \`5\`. The average sentiment is less informative than the distribution over sentiment, so this API returns a value for each sentiment level.",
              "type": "optional<list<SentimentScore>>",
            },
            "speaker_confidence": {
              "docs": "Value between \`0.0\` and \`1.0\` that indicates our transcription model’s relative confidence that this text was spoken by this speaker.",
              "type": "optional<double>",
            },
            "text": {
              "docs": "A segment of text (like a word or a sentence).",
              "type": "string",
            },
            "time": {
              "docs": undefined,
              "type": "optional<TimeInterval>",
            },
            "toxicity": {
              "docs": "Toxicity predictions returned as probabilities that the text can be classified into the following categories: \`toxic\`, \`severe_toxic\`, \`obscene\`, \`threat\`, \`insult\`, and \`identity_hate\`.",
              "type": "optional<list<ToxicityScore>>",
            },
          },
        },
        "Models": {
          "docs": undefined,
          "properties": {
            "burst": {
              "docs": undefined,
              "type": "optional<Empty>",
            },
            "face": {
              "docs": undefined,
              "type": "optional<Face>",
            },
            "facemesh": {
              "docs": undefined,
              "type": "optional<Empty>",
            },
            "language": {
              "docs": undefined,
              "type": "optional<Language>",
            },
            "ner": {
              "docs": undefined,
              "type": "optional<Ner>",
            },
            "prosody": {
              "docs": undefined,
              "type": "optional<Prosody>",
            },
          },
        },
        "ModelsPredictions": {
          "docs": undefined,
          "properties": {
            "burst": {
              "docs": undefined,
              "type": "optional<PredictionsOptionalNullBurstPrediction>",
            },
            "face": {
              "docs": undefined,
              "type": "optional<PredictionsOptionalNullFacePrediction>",
            },
            "facemesh": {
              "docs": undefined,
              "type": "optional<PredictionsOptionalNullFacemeshPrediction>",
            },
            "language": {
              "docs": undefined,
              "type": "optional<PredictionsOptionalTranscriptionMetadataLanguagePrediction>",
            },
            "ner": {
              "docs": undefined,
              "type": "optional<PredictionsOptionalTranscriptionMetadataNerPrediction>",
            },
            "prosody": {
              "docs": undefined,
              "type": "optional<PredictionsOptionalTranscriptionMetadataProsodyPrediction>",
            },
          },
        },
        "Ner": {
          "docs": undefined,
          "properties": {
            "identify_speakers": {
              "docs": "Whether to return identifiers for speakers over time. If \`true\`, unique identifiers will be assigned to spoken words to differentiate different speakers. If \`false\`, all speakers will be tagged with an \`unknown\` ID.",
              "type": "optional<boolean>",
            },
          },
        },
        "NerPrediction": {
          "docs": undefined,
          "properties": {
            "confidence": {
              "docs": "Value between \`0.0\` and \`1.0\` that indicates our transcription model’s relative confidence in this text.",
              "type": "optional<double>",
            },
            "emotions": {
              "docs": "A high-dimensional embedding in emotion space.",
              "type": "list<EmotionScore>",
            },
            "entity": {
              "docs": "The recognized topic or entity.",
              "type": "string",
            },
            "entity_confidence": {
              "docs": "Our NER model's relative confidence in the recognized topic or entity.",
              "type": "double",
            },
            "link_word": {
              "docs": "The specific word to which the emotion predictions are linked.",
              "type": "string",
            },
            "position": {
              "docs": undefined,
              "type": "PositionInterval",
            },
            "speaker_confidence": {
              "docs": "Value between \`0.0\` and \`1.0\` that indicates our transcription model’s relative confidence that this text was spoken by this speaker.",
              "type": "optional<double>",
            },
            "support": {
              "docs": "A measure of how often the entity is linked to by other entities.",
              "type": "double",
            },
            "time": {
              "docs": undefined,
              "type": "optional<TimeInterval>",
            },
            "uri": {
              "docs": "A URL which provides more information about the recognized topic or entity.",
              "type": "string",
            },
          },
        },
        "Null": {
          "docs": "No associated metadata for this model. Value will be \`null\`.",
          "type": "map<string, unknown>",
        },
        "PositionInterval": {
          "docs": "Position of a segment of text within a larger document, measured in characters. Uses zero-based indexing. The beginning index is inclusive and the end index is exclusive.",
          "properties": {
            "begin": {
              "docs": "The index of the first character in the text segment, inclusive.",
              "type": "integer",
            },
            "end": {
              "docs": "The index of the last character in the text segment, exclusive.",
              "type": "integer",
            },
          },
        },
        "Prediction": {
          "docs": undefined,
          "properties": {
            "file": {
              "docs": "A file path relative to the top level source URL or file.",
              "type": "string",
            },
            "models": {
              "docs": undefined,
              "type": "ModelsPredictions",
            },
          },
        },
        "PredictionsOptionalNullBurstPrediction": {
          "docs": undefined,
          "properties": {
            "grouped_predictions": {
              "docs": undefined,
              "type": "list<GroupedPredictionsBurstPrediction>",
            },
            "metadata": {
              "docs": undefined,
              "type": "optional<Null>",
            },
          },
        },
        "PredictionsOptionalNullFacePrediction": {
          "docs": undefined,
          "properties": {
            "grouped_predictions": {
              "docs": undefined,
              "type": "list<GroupedPredictionsFacePrediction>",
            },
            "metadata": {
              "docs": undefined,
              "type": "optional<Null>",
            },
          },
        },
        "PredictionsOptionalNullFacemeshPrediction": {
          "docs": undefined,
          "properties": {
            "grouped_predictions": {
              "docs": undefined,
              "type": "list<GroupedPredictionsFacemeshPrediction>",
            },
            "metadata": {
              "docs": undefined,
              "type": "optional<Null>",
            },
          },
        },
        "PredictionsOptionalTranscriptionMetadataLanguagePrediction": {
          "docs": undefined,
          "properties": {
            "grouped_predictions": {
              "docs": undefined,
              "type": "list<GroupedPredictionsLanguagePrediction>",
            },
            "metadata": {
              "docs": undefined,
              "type": "optional<TranscriptionMetadata>",
            },
          },
        },
        "PredictionsOptionalTranscriptionMetadataNerPrediction": {
          "docs": undefined,
          "properties": {
            "grouped_predictions": {
              "docs": undefined,
              "type": "list<GroupedPredictionsNerPrediction>",
            },
            "metadata": {
              "docs": undefined,
              "type": "optional<TranscriptionMetadata>",
            },
          },
        },
        "PredictionsOptionalTranscriptionMetadataProsodyPrediction": {
          "docs": undefined,
          "properties": {
            "grouped_predictions": {
              "docs": undefined,
              "type": "list<GroupedPredictionsProsodyPrediction>",
            },
            "metadata": {
              "docs": undefined,
              "type": "optional<TranscriptionMetadata>",
            },
          },
        },
        "Prosody": {
          "docs": "NOTE: the \`granularity\` field is ignored if transcription is not enabled or if the \`window\` field has been set.",
          "properties": {
            "granularity": {
              "docs": undefined,
              "type": "optional<Granularity>",
            },
            "identify_speakers": {
              "docs": "Whether to return identifiers for speakers over time. If \`true\`, unique identifiers will be assigned to spoken words to differentiate different speakers. If \`false\`, all speakers will be tagged with an \`unknown\` ID.",
              "type": "optional<boolean>",
            },
            "window": {
              "docs": undefined,
              "type": "optional<Window>",
            },
          },
        },
        "ProsodyPrediction": {
          "docs": undefined,
          "properties": {
            "confidence": {
              "docs": "Value between \`0.0\` and \`1.0\` that indicates our transcription model’s relative confidence in this text.",
              "type": "optional<double>",
            },
            "emotions": {
              "docs": "A high-dimensional embedding in emotion space.",
              "type": "list<EmotionScore>",
            },
            "speaker_confidence": {
              "docs": "Value between \`0.0\` and \`1.0\` that indicates our transcription model’s relative confidence that this text was spoken by this speaker.",
              "type": "optional<double>",
            },
            "text": {
              "docs": "A segment of text (like a word or a sentence).",
              "type": "optional<string>",
            },
            "time": {
              "docs": undefined,
              "type": "TimeInterval",
            },
          },
        },
        "Queued": {
          "docs": undefined,
          "properties": {
            "created_timestamp_ms": {
              "docs": "When this job was created (Unix timestamp in milliseconds).",
              "type": "integer",
            },
          },
        },
        "Request": {
          "docs": undefined,
          "properties": {
            "callback_url": {
              "docs": "If provided, a \`POST\` request will be made to the URL with the generated predictions on completion or the error message on failure.",
              "type": "optional<string>",
            },
            "files": {
              "docs": undefined,
              "type": "list<File>",
            },
            "models": {
              "docs": undefined,
              "type": "optional<Models>",
            },
            "notify": {
              "docs": "Whether to send an email notification to the user upon job completion/failure.",
              "type": "optional<boolean>",
            },
            "transcription": {
              "docs": undefined,
              "type": "optional<Transcription>",
            },
            "urls": {
              "docs": "URLs to the media files to be processed. Each must be a valid public URL to a media file (see recommended input filetypes) or an archive (\`.zip\`, \`.tar.gz\`, \`.tar.bz2\`, \`.tar.xz\`) of media files.

If you wish to supply more than 100 URLs, consider providing them as an archive (\`.zip\`, \`.tar.gz\`, \`.tar.bz2\`, \`.tar.xz\`).",
              "type": "optional<list<string>>",
            },
          },
        },
        "Results": {
          "docs": undefined,
          "properties": {
            "errors": {
              "docs": undefined,
              "type": "list<Error>",
            },
            "predictions": {
              "docs": undefined,
              "type": "list<Prediction>",
            },
          },
        },
        "SentimentScore": {
          "docs": undefined,
          "properties": {
            "name": {
              "docs": "Level of sentiment, ranging from \`1\` (negative) to \`9\` (positive)",
              "type": "string",
            },
            "score": {
              "docs": "Prediction for this level of sentiment",
              "type": "string",
            },
          },
        },
        "SortBy": {
          "docs": undefined,
          "enum": [
            {
              "name": "created",
              "value": "created",
            },
            {
              "name": "started",
              "value": "started",
            },
            {
              "name": "ended",
              "value": "ended",
            },
          ],
        },
        "Source": {
          "base-properties": {},
          "docs": undefined,
          "union": {
            "file": {
              "docs": undefined,
              "type": "SourceFile",
            },
            "url": {
              "docs": undefined,
              "type": "SourceUrl",
            },
          },
        },
        "SourceFile": {
          "docs": undefined,
          "type": "File",
        },
        "SourceResult": {
          "docs": undefined,
          "properties": {
            "error": {
              "docs": "An error message.",
              "type": "optional<string>",
            },
            "results": {
              "docs": undefined,
              "type": "optional<Results>",
            },
            "source": {
              "docs": undefined,
              "type": "Source",
            },
          },
        },
        "SourceUrl": {
          "docs": undefined,
          "type": "Url",
        },
        "State": {
          "base-properties": {},
          "docs": undefined,
          "union": {
            "COMPLETED": {
              "docs": undefined,
              "type": "StateCompleted",
            },
            "FAILED": {
              "docs": undefined,
              "type": "StateFailed",
            },
            "IN_PROGRESS": {
              "docs": undefined,
              "type": "StateInProgress",
            },
            "QUEUED": {
              "docs": undefined,
              "type": "StateQueued",
            },
          },
        },
        "StateCompleted": {
          "docs": undefined,
          "properties": {
            "status": {
              "docs": undefined,
              "type": "string",
            },
          },
        },
        "StateFailed": {
          "docs": undefined,
          "properties": {
            "status": {
              "docs": undefined,
              "type": "string",
            },
          },
        },
        "StateInProgress": {
          "docs": undefined,
          "properties": {
            "status": {
              "docs": undefined,
              "type": "string",
            },
          },
        },
        "StateQueued": {
          "docs": undefined,
          "properties": {
            "status": {
              "docs": undefined,
              "type": "string",
            },
          },
        },
        "Status": {
          "docs": undefined,
          "enum": [
            {
              "name": "QUEUED",
              "value": "QUEUED",
            },
            {
              "name": "IN_PROGRESS",
              "value": "IN_PROGRESS",
            },
            {
              "name": "COMPLETED",
              "value": "COMPLETED",
            },
            {
              "name": "FAILED",
              "value": "FAILED",
            },
          ],
        },
        "TimeInterval": {
          "docs": "A time range with a beginning and end, measured in seconds.",
          "properties": {
            "begin": {
              "docs": "Beginning of time range in seconds.",
              "type": "double",
            },
            "end": {
              "docs": "End of time range in seconds.",
              "type": "double",
            },
          },
        },
        "ToxicityScore": {
          "docs": undefined,
          "properties": {
            "name": {
              "docs": "Category of toxicity.",
              "type": "string",
            },
            "score": {
              "docs": "Prediction for this category of toxicity",
              "type": "string",
            },
          },
        },
        "Transcription": {
          "docs": undefined,
          "properties": {
            "language": {
              "docs": undefined,
              "type": "optional<Bcp47Tag>",
            },
          },
        },
        "TranscriptionMetadata": {
          "docs": "Transcription metadata for your media file.",
          "properties": {
            "confidence": {
              "docs": "Value between \`0.0\` and \`1.0\` indicating our transcription model’s relative confidence in the transcription of your media file.",
              "type": "double",
            },
            "detected_language": {
              "docs": undefined,
              "type": "optional<Bcp47Tag>",
            },
          },
        },
        "Url": {
          "docs": undefined,
          "properties": {
            "url": {
              "docs": "The URL of the source media file.",
              "type": "string",
            },
          },
        },
        "When": {
          "docs": undefined,
          "enum": [
            {
              "name": "created_before",
              "value": "created_before",
            },
            {
              "name": "created_after",
              "value": "created_after",
            },
          ],
        },
        "Window": {
          "docs": undefined,
          "properties": {
            "length": {
              "docs": "The length of the sliding window.",
              "type": "optional<double>",
            },
            "step": {
              "docs": "The step size of the sliding window.",
              "type": "optional<double>",
            },
          },
        },
      },
    },
  },
  "rootApiFile": {
    "default-environment": "default",
    "display-name": "Hume AI Batch API",
    "environments": {
      "default": "https://api.hume.ai",
    },
    "error-discrimination": {
      "strategy": "status-code",
    },
    "name": "api",
  },
}
`;

exports[`open api converter squidex simple 1`] = `
{
  "definitionFiles": {
    "__package__.yml": {
      "errors": {
        "BadRequestError": {
          "status-code": 400,
          "type": "ErrorDto",
        },
        "ConflictError": {
          "status-code": 409,
          "type": "ErrorDto",
        },
        "ContentTooLargeError": {
          "status-code": 413,
          "type": "ErrorDto",
        },
        "ForbiddenError": {
          "status-code": 403,
          "type": "ErrorDto",
        },
        "InternalServerError": {
          "status-code": 500,
          "type": "ErrorDto",
        },
        "NotFoundError": {
          "status-code": 404,
          "type": "unknown",
        },
        "NotImplementedError": {
          "status-code": 501,
          "type": "ErrorDto",
        },
      },
      "service": undefined,
      "types": {
        "ActionTypeEnum": {
          "docs": "",
          "enum": [
            {
              "name": "Broadcast",
              "value": "Broadcast",
            },
            {
              "name": "User",
              "value": "User",
            },
            {
              "name": "Group",
              "value": "Group",
            },
          ],
        },
        "AddFieldDto": {
          "docs": undefined,
          "properties": {
            "name": {
              "docs": "The name of the field. Must be unique within the schema.",
              "type": "string",
            },
            "partitioning": {
              "docs": "Determines the optional partitioning of the field.",
              "type": "optional<string>",
            },
            "properties": {
              "docs": undefined,
              "type": "FieldPropertiesDto",
            },
          },
        },
        "AlgoliaRuleActionDto": {
          "docs": undefined,
          "properties": {
            "apiKey": {
              "docs": "The API key to grant access to Squidex.",
              "type": "string",
            },
            "appId": {
              "docs": "The application ID.",
              "type": "string",
            },
            "delete": {
              "docs": "The condition when to delete the entry.",
              "type": "string",
            },
            "document": {
              "docs": "The optional custom document.",
              "type": "string",
            },
            "indexName": {
              "docs": "The name of the index.",
              "type": "string",
            },
          },
        },
        "AllContentsByPostDto": {
          "docs": undefined,
          "properties": {
            "ids": {
              "docs": "The list of ids to query.",
              "type": "optional<list<string>>",
            },
            "oData": {
              "docs": "The optional odata query.",
              "type": "optional<string>",
            },
            "q": "unknown",
            "references": {
              "docs": "The ID of the reference content item.",
              "type": "optional<string>",
            },
            "referencing": {
              "docs": "The ID of the referencing content item.",
              "type": "optional<string>",
            },
            "scheduledFrom": {
              "docs": "The start of the schedule.",
              "type": "optional<string>",
            },
            "scheduledTo": {
              "docs": "The end of the schedule.",
              "type": "optional<string>",
            },
          },
        },
        "AppDto": {
          "docs": undefined,
          "properties": {
            "canAccessApi": {
              "docs": "Indicates if the user can access the api.",
              "type": "boolean",
            },
            "canAccessContent": {
              "docs": "Indicates if the user can access at least one content.",
              "type": "boolean",
            },
            "created": {
              "docs": "The timestamp when the app has been created.",
              "type": "string",
            },
            "description": {
              "docs": "The optional description of the app.",
              "type": "optional<string>",
            },
            "id": {
              "docs": "The ID of the app.",
              "type": "string",
            },
            "label": {
              "docs": "The optional label of the app.",
              "type": "optional<string>",
            },
            "lastModified": {
              "docs": "The timestamp when the app has been modified last.",
              "type": "string",
            },
            "name": {
              "docs": "The name of the app.",
              "type": "string",
            },
            "permissions": {
              "docs": "The permission level of the user.",
              "type": "list<string>",
            },
            "roleName": {
              "docs": "The role name of the user.",
              "type": "optional<string>",
            },
            "roleProperties": {
              "docs": "The properties from the role.",
              "type": "map<string, unknown>",
            },
            "teamId": {
              "docs": "The ID of the team.",
              "type": "optional<string>",
            },
            "version": {
              "docs": "The version of the app.",
              "type": "integer",
            },
          },
        },
        "AppLanguageDto": {
          "docs": undefined,
          "properties": {
            "englishName": {
              "docs": "The english name of the language.",
              "type": "string",
            },
            "fallback": {
              "docs": "The fallback languages.",
              "type": "list<string>",
            },
            "isMaster": {
              "docs": "Indicates if the language is the master language.",
              "type": "boolean",
            },
            "isOptional": {
              "docs": "Indicates if the language is optional.",
              "type": "boolean",
            },
            "iso2Code": {
              "docs": "The iso code of the language.",
              "type": "string",
            },
          },
        },
        "AppLanguagesDto": {
          "docs": undefined,
          "properties": {
            "items": {
              "docs": "The languages.",
              "type": "list<AppLanguageDto>",
            },
          },
        },
        "AppSettingsDto": {
          "docs": undefined,
          "properties": {
            "editors": {
              "docs": "The configured UI editors.",
              "type": "list<EditorDto>",
            },
            "hideDateTimeModeButton": {
              "docs": "Hide the datetime mode button.",
              "type": "boolean",
            },
            "hideScheduler": {
              "docs": "Hide the scheduler for content items.",
              "type": "boolean",
            },
            "patterns": {
              "docs": "The configured app patterns.",
              "type": "list<PatternDto>",
            },
            "version": {
              "docs": "The version of the app.",
              "type": "integer",
            },
          },
        },
        "ArrayFieldPropertiesDto": {
          "docs": undefined,
          "properties": {
            "maxItems": {
              "docs": "The maximum allowed items for the field value.",
              "type": "optional<integer>",
            },
            "minItems": {
              "docs": "The minimum allowed items for the field value.",
              "type": "optional<integer>",
            },
            "uniqueFields": {
              "docs": "The fields that must be unique.",
              "type": "optional<list<string>>",
            },
          },
        },
        "AssetChangedRuleTriggerDto": {
          "docs": undefined,
          "properties": {
            "condition": {
              "docs": "Javascript condition when to trigger.",
              "type": "optional<string>",
            },
          },
        },
        "AssetDto": {
          "docs": undefined,
          "properties": {
            "_meta": {
              "docs": undefined,
              "type": "optional<AssetMeta>",
            },
            "created": {
              "docs": "The date and time when the asset has been created.",
              "type": "string",
            },
            "createdBy": {
              "docs": "The user that has created the schema.",
              "type": "string",
            },
            "editToken": {
              "docs": "The UI token.",
              "type": "optional<string>",
            },
            "fileHash": {
              "docs": "The file hash.",
              "type": "optional<string>",
            },
            "fileName": {
              "docs": "The file name.",
              "type": "string",
            },
            "fileSize": {
              "docs": "The size of the file in bytes.",
              "type": "integer",
            },
            "fileType": {
              "docs": "The file type.",
              "type": "string",
            },
            "fileVersion": {
              "docs": "The version of the file.",
              "type": "integer",
            },
            "id": {
              "docs": "The ID of the asset.",
              "type": "string",
            },
            "isImage": {
              "docs": "Determines of the created file is an image.",
              "type": "boolean",
            },
            "isProtected": {
              "docs": "True, when the asset is not public.",
              "type": "boolean",
            },
            "lastModified": {
              "docs": "The date and time when the asset has been modified last.",
              "type": "string",
            },
            "lastModifiedBy": {
              "docs": "The user that has updated the asset.",
              "type": "string",
            },
            "metadata": {
              "docs": "The asset metadata.",
              "type": "map<string, unknown>",
            },
            "metadataText": {
              "docs": "The formatted text representation of the metadata.",
              "type": "string",
            },
            "mimeType": {
              "docs": "The mime type.",
              "type": "string",
            },
            "parentId": {
              "docs": "The ID of the parent folder. Empty for files without parent.",
              "type": "string",
            },
            "pixelHeight": {
              "docs": "The height of the image in pixels if the asset is an image.",
              "type": "optional<integer>",
            },
            "pixelWidth": {
              "docs": "The width of the image in pixels if the asset is an image.",
              "type": "optional<integer>",
            },
            "slug": {
              "docs": "The slug.",
              "type": "string",
            },
            "tags": {
              "docs": "The asset tags.",
              "type": "optional<list<string>>",
            },
            "type": {
              "docs": undefined,
              "type": "AssetType",
            },
            "version": {
              "docs": "The version of the asset.",
              "type": "integer",
            },
          },
        },
        "AssetFolderDto": {
          "docs": undefined,
          "properties": {
            "folderName": {
              "docs": "The folder name.",
              "type": "string",
            },
            "id": {
              "docs": "The ID of the asset.",
              "type": "string",
            },
            "parentId": {
              "docs": "The ID of the parent folder. Empty for files without parent.",
              "type": "string",
            },
            "version": {
              "docs": "The version of the asset folder.",
              "type": "integer",
            },
          },
        },
        "AssetFolderScope": {
          "docs": "",
          "enum": [
            {
              "name": "PathAndItems",
              "value": "PathAndItems",
            },
            {
              "name": "Path",
              "value": "Path",
            },
            {
              "name": "Items",
              "value": "Items",
            },
          ],
        },
        "AssetFoldersDto": {
          "docs": undefined,
          "properties": {
            "items": {
              "docs": "The assets folders.",
              "type": "list<AssetFolderDto>",
            },
            "path": {
              "docs": "The path to the current folder.",
              "type": "list<AssetFolderDto>",
            },
            "total": {
              "docs": "The total number of assets.",
              "type": "integer",
            },
          },
        },
        "AssetMeta": {
          "docs": undefined,
          "properties": {
            "isDuplicate": {
              "docs": "Indicates whether the asset is a duplicate.",
              "type": "string",
            },
          },
        },
        "AssetPreviewMode": {
          "docs": "",
          "enum": [
            {
              "name": "ImageAndFileName",
              "value": "ImageAndFileName",
            },
            {
              "name": "Image",
              "value": "Image",
            },
            {
              "name": "FileName",
              "value": "FileName",
            },
          ],
        },
        "AssetScriptsDto": {
          "docs": undefined,
          "properties": {
            "annotate": {
              "docs": "The script that is executed when annotating a content.",
              "type": "optional<string>",
            },
            "create": {
              "docs": "The script that is executed when creating an asset.",
              "type": "optional<string>",
            },
            "delete": {
              "docs": "The script that is executed when deleting a content.",
              "type": "optional<string>",
            },
            "move": {
              "docs": "The script that is executed when moving a content.",
              "type": "optional<string>",
            },
            "query": {
              "docs": "The script that is executed for each asset when querying assets.",
              "type": "optional<string>",
            },
            "queryPre": {
              "docs": "The script that is executed for all assets when querying assets.",
              "type": "optional<string>",
            },
            "update": {
              "docs": "The script that is executed when updating a content.",
              "type": "optional<string>",
            },
            "version": {
              "docs": "The version of the app.",
              "type": "integer",
            },
          },
        },
        "AssetType": {
          "docs": "",
          "enum": [
            {
              "name": "Unknown",
              "value": "Unknown",
            },
            {
              "name": "Image",
              "value": "Image",
            },
            {
              "name": "Audio",
              "value": "Audio",
            },
            {
              "name": "Video",
              "value": "Video",
            },
          ],
        },
        "AssetsDto": {
          "docs": undefined,
          "properties": {
            "items": {
              "docs": "The assets.",
              "type": "list<AssetDto>",
            },
            "total": {
              "docs": "The total number of assets.",
              "type": "integer",
            },
          },
        },
        "AssetsFieldPropertiesDto": {
          "docs": undefined,
          "properties": {
            "allowDuplicates": {
              "docs": "True, if duplicate values are allowed.",
              "type": "boolean",
            },
            "allowedExtensions": {
              "docs": "The allowed file extensions.",
              "type": "optional<list<string>>",
            },
            "aspectHeight": {
              "docs": "The image aspect height in pixels.",
              "type": "optional<integer>",
            },
            "aspectWidth": {
              "docs": "The image aspect width in pixels.",
              "type": "optional<integer>",
            },
            "defaultValue": {
              "docs": "The default value as a list of asset ids.",
              "type": "optional<list<string>>",
            },
            "defaultValues": {
              "docs": undefined,
              "type": "optional<LocalizedValueOfReadonlyListOfString>",
            },
            "expectedType": {
              "docs": undefined,
              "type": "optional<AssetType>",
            },
            "folderId": {
              "docs": "The initial id to the folder.",
              "type": "optional<string>",
            },
            "maxHeight": {
              "docs": "The maximum image height in pixels.",
              "type": "optional<integer>",
            },
            "maxItems": {
              "docs": "The maximum allowed items for the field value.",
              "type": "optional<integer>",
            },
            "maxSize": {
              "docs": "The maximum file size in bytes.",
              "type": "optional<integer>",
            },
            "maxWidth": {
              "docs": "The maximum image width in pixels.",
              "type": "optional<integer>",
            },
            "minHeight": {
              "docs": "The minimum image height in pixels.",
              "type": "optional<integer>",
            },
            "minItems": {
              "docs": "The minimum allowed items for the field value.",
              "type": "optional<integer>",
            },
            "minSize": {
              "docs": "The minimum file size in bytes.",
              "type": "optional<integer>",
            },
            "minWidth": {
              "docs": "The minimum image width in pixels.",
              "type": "optional<integer>",
            },
            "mustBeImage": {
              "docs": "True to resolve first image in the content list.",
              "type": "boolean",
            },
            "previewFormat": {
              "docs": "The preview format.",
              "type": "optional<string>",
            },
            "previewMode": {
              "docs": undefined,
              "type": "AssetPreviewMode",
            },
            "resolveFirst": {
              "docs": "True to resolve first asset in the content list.",
              "type": "boolean",
            },
            "resolveImage": {
              "docs": "True to resolve first image in the content list.",
              "type": "boolean",
            },
          },
        },
        "AssignContributorDto": {
          "docs": undefined,
          "properties": {
            "contributorId": {
              "docs": "The id or email of the user to add to the app.",
              "type": "string",
            },
            "invite": {
              "docs": "Set to true to invite the user if he does not exist.",
              "type": "optional<boolean>",
            },
            "role": {
              "docs": "The role of the contributor.",
              "type": "optional<string>",
            },
          },
        },
        "AzureQueueRuleActionDto": {
          "docs": undefined,
          "properties": {
            "connectionString": {
              "docs": "The connection string to the storage account.",
              "type": "string",
            },
            "payload": {
              "docs": "Leave it empty to use the full event as body.",
              "type": "string",
            },
            "queue": {
              "docs": "The name of the queue.",
              "type": "string",
            },
          },
        },
        "BackupJobDto": {
          "docs": undefined,
          "properties": {
            "handledAssets": {
              "docs": "The number of handled assets.",
              "type": "integer",
            },
            "handledEvents": {
              "docs": "The number of handled events.",
              "type": "integer",
            },
            "id": {
              "docs": "The ID of the backup job.",
              "type": "string",
            },
            "started": {
              "docs": "The time when the job has been started.",
              "type": "string",
            },
            "status": {
              "docs": undefined,
              "type": "JobStatus",
            },
            "stopped": {
              "docs": "The time when the job has been stopped.",
              "type": "optional<string>",
            },
          },
        },
        "BackupJobsDto": {
          "docs": undefined,
          "properties": {
            "items": {
              "docs": "The backups.",
              "type": "list<BackupJobDto>",
            },
          },
        },
        "BooleanFieldEditor": {
          "docs": "",
          "enum": [
            {
              "name": "Checkbox",
              "value": "Checkbox",
            },
            {
              "name": "Toggle",
              "value": "Toggle",
            },
          ],
        },
        "BooleanFieldPropertiesDto": {
          "docs": undefined,
          "properties": {
            "defaultValue": {
              "docs": "The default value for the field value.",
              "type": "optional<boolean>",
            },
            "defaultValues": {
              "docs": undefined,
              "type": "optional<LocalizedValueOfNullableBoolean>",
            },
            "editor": {
              "docs": undefined,
              "type": "BooleanFieldEditor",
            },
            "inlineEditable": {
              "docs": "Indicates that the inline editor is enabled for this field.",
              "type": "boolean",
            },
          },
        },
        "BulkResultDto": {
          "docs": undefined,
          "properties": {
            "contentId": {
              "docs": "The ID of the entity that has been handled successfully or not.",
              "type": "optional<string>",
            },
            "error": {
              "docs": undefined,
              "type": "optional<ErrorDto>",
            },
            "id": {
              "docs": "The ID of the entity that has been handled successfully or not.",
              "type": "optional<string>",
            },
            "jobIndex": {
              "docs": "The index of the bulk job where the result belongs to. The order can change.",
              "type": "integer",
            },
          },
        },
        "BulkUpdateAssetType": {
          "docs": "",
          "enum": [
            {
              "name": "Annotate",
              "value": "Annotate",
            },
            {
              "name": "Move",
              "value": "Move",
            },
            {
              "name": "Delete",
              "value": "Delete",
            },
          ],
        },
        "BulkUpdateAssetsJobDto": {
          "docs": undefined,
          "properties": {
            "expectedVersion": {
              "docs": "The expected version.",
              "type": "optional<integer>",
            },
            "fileName": {
              "docs": "The new name of the asset.",
              "type": "optional<string>",
            },
            "id": {
              "docs": "An optional ID of the asset to update.",
              "type": "optional<string>",
            },
            "isProtected": {
              "docs": "True, when the asset is not public.",
              "type": "optional<boolean>",
            },
            "metadata": {
              "docs": "The asset metadata.",
              "type": "optional<map<string, unknown>>",
            },
            "parentId": {
              "docs": "The parent folder id.",
              "type": "optional<string>",
            },
            "permanent": {
              "docs": "True to delete the asset permanently.",
              "type": "optional<boolean>",
            },
            "slug": {
              "docs": "The new slug of the asset.",
              "type": "optional<string>",
            },
            "tags": {
              "docs": "The new asset tags.",
              "type": "optional<list<string>>",
            },
            "type": {
              "docs": undefined,
              "type": "optional<BulkUpdateAssetType>",
            },
          },
        },
        "BulkUpdateContentType": {
          "docs": "",
          "enum": [
            {
              "name": "Upsert",
              "value": "Upsert",
            },
            {
              "name": "ChangeStatus",
              "value": "ChangeStatus",
            },
            {
              "name": "Create",
              "value": "Create",
            },
            {
              "name": "Delete",
              "value": "Delete",
            },
            {
              "name": "Patch",
              "value": "Patch",
            },
            {
              "name": "Update",
              "value": "Update",
            },
            {
              "name": "Validate",
              "value": "Validate",
            },
          ],
        },
        "BulkUpdateContentsJobDto": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "optional<ContentData>",
            },
            "dueTime": {
              "docs": "The due time.",
              "type": "optional<string>",
            },
            "expectedCount": {
              "docs": "The number of expected items. Set it to a higher number to update multiple items when a query is defined.",
              "type": "optional<integer>",
            },
            "expectedVersion": {
              "docs": "The expected version.",
              "type": "optional<integer>",
            },
            "id": {
              "docs": "An optional ID of the content to update.",
              "type": "optional<string>",
            },
            "patch": {
              "docs": "Makes the update as patch.",
              "type": "optional<boolean>",
            },
            "permanent": {
              "docs": "True to delete the content permanently.",
              "type": "optional<boolean>",
            },
            "query": {
              "docs": undefined,
              "type": "optional<QueryJsonDto>",
            },
            "schema": {
              "docs": "The optional schema id or name.",
              "type": "optional<string>",
            },
            "status": {
              "docs": "The new status when the type is set to 'ChangeStatus' or 'Upsert'.",
              "type": "optional<string>",
            },
            "type": {
              "docs": undefined,
              "type": "optional<BulkUpdateContentType>",
            },
          },
        },
        "CallsUsageDtoDto": {
          "docs": undefined,
          "properties": {
            "allowedBytes": {
              "docs": "The included API traffic.",
              "type": "integer",
            },
            "allowedCalls": {
              "docs": "The included API calls.",
              "type": "integer",
            },
            "averageElapsedMs": {
              "docs": "The average duration in milliseconds.",
              "type": "double",
            },
            "blockingApiCalls": {
              "docs": "The amount of calls that will block the app.",
              "type": "integer",
            },
            "details": {
              "docs": "The statistics by date and group.",
              "type": "map<string, list<CallsUsagePerDateDto>>",
            },
            "monthBytes": {
              "docs": "The total number of bytes transferred this month.",
              "type": "integer",
            },
            "monthCalls": {
              "docs": "The total number of API calls this month.",
              "type": "integer",
            },
            "totalBytes": {
              "docs": "The total number of bytes transferred.",
              "type": "integer",
            },
            "totalCalls": {
              "docs": "The total number of API calls.",
              "type": "integer",
            },
          },
        },
        "CallsUsagePerDateDto": {
          "docs": undefined,
          "properties": {
            "averageElapsedMs": {
              "docs": "The average duration in milliseconds.",
              "type": "double",
            },
            "date": {
              "docs": "The date when the usage was tracked.",
              "type": "string",
            },
            "totalBytes": {
              "docs": "The total number of bytes transferred.",
              "type": "integer",
            },
            "totalCalls": {
              "docs": "The total number of API calls.",
              "type": "integer",
            },
          },
        },
        "ChangePlanDto": {
          "docs": undefined,
          "properties": {
            "planId": {
              "docs": "The new plan id.",
              "type": "string",
            },
          },
        },
        "ClientDto": {
          "docs": undefined,
          "properties": {
            "allowAnonymous": {
              "docs": "True to allow anonymous access without an access token for this client.",
              "type": "boolean",
            },
            "apiCallsLimit": {
              "docs": "The number of allowed api calls per month for this client.",
              "type": "integer",
            },
            "apiTrafficLimit": {
              "docs": "The number of allowed api traffic bytes per month for this client.",
              "type": "integer",
            },
            "id": {
              "docs": "The client id.",
              "type": "string",
            },
            "name": {
              "docs": "The client name.",
              "type": "string",
            },
            "role": {
              "docs": "The role of the client.",
              "type": "optional<string>",
            },
            "secret": {
              "docs": "The client secret.",
              "type": "string",
            },
          },
        },
        "ClientsDto": {
          "docs": undefined,
          "properties": {
            "items": {
              "docs": "The clients.",
              "type": "list<ClientDto>",
            },
          },
        },
        "CommentDto": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": "The ID of the comment.",
              "type": "string",
            },
            "text": {
              "docs": "The text of the comment.",
              "type": "string",
            },
            "time": {
              "docs": "The time when the comment was created or updated last.",
              "type": "string",
            },
            "url": {
              "docs": "The url where the comment is created.",
              "type": "optional<string>",
            },
            "user": {
              "docs": "The user who created or updated the comment.",
              "type": "string",
            },
          },
        },
        "CommentRuleActionDto": {
          "docs": undefined,
          "properties": {
            "client": {
              "docs": "An optional client name.",
              "type": "string",
            },
            "text": {
              "docs": "The comment text.",
              "type": "string",
            },
          },
        },
        "CommentRuleTriggerDto": {
          "docs": undefined,
          "properties": {
            "condition": {
              "docs": "Javascript condition when to trigger.",
              "type": "optional<string>",
            },
          },
        },
        "CommentsDto": {
          "docs": undefined,
          "properties": {
            "createdComments": {
              "docs": "The created comments including the updates.",
              "type": "optional<list<CommentDto>>",
            },
            "deletedComments": {
              "docs": "The deleted comments since the last version.",
              "type": "optional<list<string>>",
            },
            "updatedComments": {
              "docs": "The updates comments since the last version.",
              "type": "optional<list<CommentDto>>",
            },
            "version": {
              "docs": "The current version.",
              "type": "integer",
            },
          },
        },
        "ComponentFieldPropertiesDto": {
          "docs": undefined,
          "properties": {
            "schemaIds": {
              "docs": "The ID of the embedded schemas.",
              "type": "optional<list<string>>",
            },
          },
        },
        "ComponentsFieldPropertiesDto": {
          "docs": undefined,
          "properties": {
            "maxItems": {
              "docs": "The maximum allowed items for the field value.",
              "type": "optional<integer>",
            },
            "minItems": {
              "docs": "The minimum allowed items for the field value.",
              "type": "optional<integer>",
            },
            "schemaIds": {
              "docs": "The ID of the embedded schemas.",
              "type": "optional<list<string>>",
            },
            "uniqueFields": {
              "docs": "The fields that must be unique.",
              "type": "optional<list<string>>",
            },
          },
        },
        "ConfigurePreviewUrlsDto": {
          "docs": undefined,
          "type": "map<string, string>",
        },
        "ContentChangedRuleTriggerDto": {
          "docs": undefined,
          "properties": {
            "handleAll": {
              "docs": "Determines whether the trigger should handle all content changes events.",
              "type": "boolean",
            },
            "referencedSchemas": {
              "docs": "The schema references.",
              "type": "optional<list<SchemaCondition>>",
            },
            "schemas": {
              "docs": "The schema settings.",
              "type": "optional<list<SchemaCondition>>",
            },
          },
        },
        "ContentData": {
          "docs": undefined,
          "type": "map<string, ContentFieldData>",
        },
        "ContentDto": {
          "docs": undefined,
          "properties": {
            "created": {
              "docs": "The date and time when the content item has been created.",
              "type": "string",
            },
            "createdBy": {
              "docs": "The user that has created the content item.",
              "type": "string",
            },
            "data": "unknown",
            "editToken": {
              "docs": "The UI token.",
              "type": "optional<string>",
            },
            "id": {
              "docs": "The if of the content item.",
              "type": "string",
            },
            "isDeleted": {
              "docs": "Indicates whether the content is deleted.",
              "type": "boolean",
            },
            "lastModified": {
              "docs": "The date and time when the content item has been modified last.",
              "type": "string",
            },
            "lastModifiedBy": {
              "docs": "The user that has updated the content item.",
              "type": "string",
            },
            "newStatus": {
              "docs": "The new status of the content.",
              "type": "optional<string>",
            },
            "newStatusColor": {
              "docs": "The color of the new status.",
              "type": "optional<string>",
            },
            "referenceData": {
              "docs": undefined,
              "type": "optional<ContentData>",
            },
            "referenceFields": {
              "docs": "The reference fields.",
              "type": "optional<list<FieldDto>>",
            },
            "scheduleJob": {
              "docs": undefined,
              "type": "optional<ScheduleJobDto>",
            },
            "schemaDisplayName": {
              "docs": "The display name of the schema.",
              "type": "optional<string>",
            },
            "schemaId": {
              "docs": "The ID of the schema.",
              "type": "string",
            },
            "schemaName": {
              "docs": "The name of the schema.",
              "type": "optional<string>",
            },
            "status": {
              "docs": "The status of the content.",
              "type": "string",
            },
            "statusColor": {
              "docs": "The color of the status.",
              "type": "string",
            },
            "version": {
              "docs": "The version of the content.",
              "type": "integer",
            },
          },
        },
        "ContentFieldData": {
          "docs": undefined,
          "type": "map<string, unknown>",
        },
        "ContentsDto": {
          "docs": undefined,
          "properties": {
            "items": {
              "docs": "The content items.",
              "type": "list<ContentDto>",
            },
            "statuses": {
              "docs": "The possible statuses.",
              "type": "list<StatusInfoDto>",
            },
            "total": {
              "docs": "The total number of content items.",
              "type": "integer",
            },
          },
        },
        "ContributorDto": {
          "docs": undefined,
          "properties": {
            "contributorEmail": {
              "docs": "The email address.",
              "type": "string",
            },
            "contributorId": {
              "docs": "The ID of the user that contributes to the app.",
              "type": "string",
            },
            "contributorName": {
              "docs": "The display name.",
              "type": "string",
            },
            "role": {
              "docs": "The role of the contributor.",
              "type": "optional<string>",
            },
          },
        },
        "ContributorsDto": {
          "docs": undefined,
          "properties": {
            "_meta": {
              "docs": undefined,
              "type": "optional<ContributorsMetadata>",
            },
            "items": {
              "docs": "The contributors.",
              "type": "list<ContributorDto>",
            },
            "maxContributors": {
              "docs": "The maximum number of allowed contributors.",
              "type": "integer",
            },
          },
        },
        "ContributorsMetadata": {
          "docs": undefined,
          "properties": {
            "isInvited": {
              "docs": "Indicates whether the user has been invited.",
              "type": "string",
            },
          },
        },
        "CreateContentRuleActionDto": {
          "docs": undefined,
          "properties": {
            "client": {
              "docs": "An optional client name.",
              "type": "string",
            },
            "data": {
              "docs": "The content data.",
              "type": "string",
            },
            "publish": {
              "docs": "Publish the content.",
              "type": "boolean",
            },
            "schema": {
              "docs": "The name of the schema.",
              "type": "string",
            },
          },
        },
        "CreateRuleDto": {
          "docs": undefined,
          "properties": {
            "action": {
              "docs": undefined,
              "type": "RuleActionDto",
            },
            "trigger": {
              "docs": undefined,
              "type": "RuleTriggerDto",
            },
          },
        },
        "CurrentStorageDto": {
          "docs": undefined,
          "properties": {
            "maxAllowed": {
              "docs": "The maximum allowed asset size.",
              "type": "integer",
            },
            "size": {
              "docs": "The size in bytes.",
              "type": "integer",
            },
          },
        },
        "DateTimeCalculatedDefaultValue": {
          "docs": "",
          "enum": [
            {
              "name": "Now",
              "value": "Now",
            },
            {
              "name": "Today",
              "value": "Today",
            },
          ],
        },
        "DateTimeFieldEditor": {
          "docs": "",
          "enum": [
            {
              "name": "Date",
              "value": "Date",
            },
            {
              "name": "DateTime",
              "value": "DateTime",
            },
          ],
        },
        "DateTimeFieldPropertiesDto": {
          "docs": undefined,
          "properties": {
            "calculatedDefaultValue": {
              "docs": undefined,
              "type": "optional<DateTimeCalculatedDefaultValue>",
            },
            "defaultValue": {
              "docs": "The default value for the field value.",
              "type": "optional<string>",
            },
            "defaultValues": {
              "docs": undefined,
              "type": "optional<LocalizedValueOfNullableInstant>",
            },
            "editor": {
              "docs": undefined,
              "type": "DateTimeFieldEditor",
            },
            "format": {
              "docs": "The format pattern when displayed in the UI.",
              "type": "optional<string>",
            },
            "maxValue": {
              "docs": "The maximum allowed value for the field value.",
              "type": "optional<string>",
            },
            "minValue": {
              "docs": "The minimum allowed value for the field value.",
              "type": "optional<string>",
            },
          },
        },
        "DiscourseRuleActionDto": {
          "docs": undefined,
          "properties": {
            "apiKey": {
              "docs": "The api key to authenticate to your discourse server.",
              "type": "string",
            },
            "apiUsername": {
              "docs": "The api username to authenticate to your discourse server.",
              "type": "string",
            },
            "category": {
              "docs": "The optional category id.",
              "type": "optional<integer>",
            },
            "text": {
              "docs": "The text as markdown.",
              "type": "string",
            },
            "title": {
              "docs": "The optional title when creating new topics.",
              "type": "string",
            },
            "topic": {
              "docs": "The optional topic id.",
              "type": "optional<integer>",
            },
            "url": {
              "docs": "The url to the discourse server.",
              "type": "string",
            },
          },
        },
        "EditorDto": {
          "docs": undefined,
          "properties": {
            "name": {
              "docs": "The name of the editor.",
              "type": "string",
            },
            "url": {
              "docs": "The url to the editor.",
              "type": "string",
            },
          },
        },
        "ElasticSearchRuleActionDto": {
          "docs": undefined,
          "properties": {
            "delete": {
              "docs": "The condition when to delete the document.",
              "type": "string",
            },
            "document": {
              "docs": "The optional custom document.",
              "type": "string",
            },
            "host": {
              "docs": "The url to the instance or cluster.",
              "type": "string",
            },
            "indexName": {
              "docs": "The name of the index.",
              "type": "string",
            },
            "password": {
              "docs": "The optional password.",
              "type": "string",
            },
            "username": {
              "docs": "The optional username.",
              "type": "string",
            },
          },
        },
        "EmailRuleActionDto": {
          "docs": undefined,
          "properties": {
            "messageBody": {
              "docs": "The message body.",
              "type": "string",
            },
            "messageFrom": {
              "docs": "The email sending address.",
              "type": "string",
            },
            "messageSubject": {
              "docs": "The subject line for this email message.",
              "type": "string",
            },
            "messageTo": {
              "docs": "The email message will be sent to.",
              "type": "string",
            },
            "serverHost": {
              "docs": "The IP address or host to the SMTP server.",
              "type": "string",
            },
            "serverPassword": {
              "docs": "The password for the SMTP server.",
              "type": "string",
            },
            "serverPort": {
              "docs": "The port to the SMTP server.",
              "type": "integer",
            },
            "serverUsername": {
              "docs": "The username for the SMTP server.",
              "type": "string",
            },
          },
        },
        "ErrorDto": {
          "docs": undefined,
          "properties": {
            "details": {
              "docs": "Detailed error messages.",
              "type": "optional<list<string>>",
            },
            "errorCode": {
              "docs": "The error code.",
              "type": "optional<string>",
            },
            "message": {
              "docs": "Error message.",
              "type": "string",
            },
            "statusCode": {
              "docs": "Status code of the http response.",
              "type": "integer",
            },
            "traceId": {
              "docs": "The optional trace id.",
              "type": "optional<string>",
            },
            "type": {
              "docs": "Link to the error details.",
              "type": "optional<string>",
            },
          },
        },
        "EventConsumerDto": {
          "docs": undefined,
          "properties": {
            "count": {
              "docs": "The number of handled events.",
              "type": "integer",
            },
            "error": {
              "docs": "The error details if the event consumer has been stopped after a failure.",
              "type": "optional<string>",
            },
            "isResetting": {
              "docs": "Indicates if the event consumer is resetting at the moment.",
              "type": "boolean",
            },
            "isStopped": {
              "docs": "Indicates if the event consumer has been started.",
              "type": "boolean",
            },
            "name": {
              "docs": "The name of the event consumer.",
              "type": "string",
            },
            "position": {
              "docs": "The position within the vent stream.",
              "type": "optional<string>",
            },
          },
        },
        "EventConsumersDto": {
          "docs": undefined,
          "properties": {
            "items": {
              "docs": "The event consumers.",
              "type": "list<EventConsumerDto>",
            },
          },
        },
        "ExposedValues": {
          "docs": undefined,
          "type": "map<string, string>",
        },
        "FastlyRuleActionDto": {
          "docs": undefined,
          "properties": {
            "apiKey": {
              "docs": "The API key to grant access to Squidex.",
              "type": "string",
            },
            "serviceId": {
              "docs": "The ID of the fastly service.",
              "type": "string",
            },
          },
        },
        "FeatureDto": {
          "docs": undefined,
          "properties": {
            "name": {
              "docs": "The name of the feature.",
              "type": "string",
            },
            "text": {
              "docs": "The description text.",
              "type": "string",
            },
          },
        },
        "FeaturesDto": {
          "docs": undefined,
          "properties": {
            "features": {
              "docs": "The latest features.",
              "type": "list<FeatureDto>",
            },
            "version": {
              "docs": "The recent version.",
              "type": "integer",
            },
          },
        },
        "FieldDto": {
          "docs": undefined,
          "properties": {
            "fieldId": {
              "docs": "The ID of the field.",
              "type": "integer",
            },
            "isDisabled": {
              "docs": "Defines if the field is disabled.",
              "type": "boolean",
            },
            "isHidden": {
              "docs": "Defines if the field is hidden.",
              "type": "boolean",
            },
            "isLocked": {
              "docs": "Defines if the field is locked.",
              "type": "boolean",
            },
            "name": {
              "docs": "The name of the field. Must be unique within the schema.",
              "type": "string",
            },
            "nested": {
              "docs": "The nested fields.",
              "type": "optional<list<NestedFieldDto>>",
            },
            "partitioning": {
              "docs": "Defines the partitioning of the field.",
              "type": "string",
            },
            "properties": {
              "docs": undefined,
              "type": "FieldPropertiesDto",
            },
          },
        },
        "FieldPropertiesDto": {
          "base-properties": {
            "editorUrl": {
              "docs": "Optional url to the editor.",
              "type": "optional<string>",
            },
            "hints": {
              "docs": "Hints to describe the field.",
              "type": "optional<string>",
            },
            "isHalfWidth": {
              "docs": "Indicates if the field should be rendered with half width only.",
              "type": "boolean",
            },
            "isRequired": {
              "docs": "Indicates if the field is required.",
              "type": "boolean",
            },
            "isRequiredOnPublish": {
              "docs": "Indicates if the field is required when publishing.",
              "type": "boolean",
            },
            "label": {
              "docs": "Optional label for the editor.",
              "type": "optional<string>",
            },
            "placeholder": {
              "docs": "Placeholder to show when no value has been entered.",
              "type": "optional<string>",
            },
            "tags": {
              "docs": "Tags for automation processes.",
              "type": "optional<list<string>>",
            },
          },
          "docs": undefined,
          "union": {
            "Array": {
              "docs": undefined,
              "type": "ArrayFieldPropertiesDto",
            },
            "Assets": {
              "docs": undefined,
              "type": "AssetsFieldPropertiesDto",
            },
            "Boolean": {
              "docs": undefined,
              "type": "BooleanFieldPropertiesDto",
            },
            "Component": {
              "docs": undefined,
              "type": "ComponentFieldPropertiesDto",
            },
            "Components": {
              "docs": undefined,
              "type": "ComponentsFieldPropertiesDto",
            },
            "DateTime": {
              "docs": undefined,
              "type": "DateTimeFieldPropertiesDto",
            },
            "Geolocation": {
              "docs": undefined,
              "type": "GeolocationFieldPropertiesDto",
            },
            "Json": {
              "docs": undefined,
              "type": "JsonFieldPropertiesDto",
            },
            "Number": {
              "docs": undefined,
              "type": "NumberFieldPropertiesDto",
            },
            "References": {
              "docs": undefined,
              "type": "ReferencesFieldPropertiesDto",
            },
            "String": {
              "docs": undefined,
              "type": "StringFieldPropertiesDto",
            },
            "Tags": {
              "docs": undefined,
              "type": "TagsFieldPropertiesDto",
            },
            "UI": {
              "docs": undefined,
              "type": "UiFieldPropertiesDto",
            },
          },
        },
        "FieldRuleAction": {
          "docs": "",
          "enum": [
            {
              "name": "Disable",
              "value": "Disable",
            },
            {
              "name": "Hide",
              "value": "Hide",
            },
            {
              "name": "Require",
              "value": "Require",
            },
          ],
        },
        "FieldRuleDto": {
          "docs": undefined,
          "properties": {
            "action": {
              "docs": undefined,
              "type": "FieldRuleAction",
            },
            "condition": {
              "docs": "The condition.",
              "type": "optional<string>",
            },
            "field": {
              "docs": "The field to update.",
              "type": "string",
            },
          },
        },
        "GeolocationFieldEditor": {
          "docs": "",
          "enum": [
            {
              "name": "Map",
              "value": "Map",
            },
          ],
        },
        "GeolocationFieldPropertiesDto": {
          "docs": undefined,
          "properties": {
            "editor": {
              "docs": undefined,
              "type": "GeolocationFieldEditor",
            },
          },
        },
        "HistoryEventDto": {
          "docs": undefined,
          "properties": {
            "actor": {
              "docs": "The user who called the action.",
              "type": "string",
            },
            "created": {
              "docs": "The time when the event happened.",
              "type": "string",
            },
            "eventId": {
              "docs": "Gets a unique id for the event.",
              "type": "string",
            },
            "eventType": {
              "docs": "The type of the original event.",
              "type": "string",
            },
            "message": {
              "docs": "The message for the event.",
              "type": "string",
            },
            "version": {
              "docs": "The version identifier.",
              "type": "integer",
            },
          },
        },
        "ImageFormat": {
          "docs": "",
          "enum": [
            {
              "name": "AVIF",
              "value": "AVIF",
            },
            {
              "name": "BMP",
              "value": "BMP",
            },
            {
              "name": "GIF",
              "value": "GIF",
            },
            {
              "name": "JPEG",
              "value": "JPEG",
            },
            {
              "name": "PNG",
              "value": "PNG",
            },
            {
              "name": "TGA",
              "value": "TGA",
            },
            {
              "name": "TIFF",
              "value": "TIFF",
            },
            {
              "name": "WEBP",
              "value": "WEBP",
            },
          ],
        },
        "JobStatus": {
          "docs": "",
          "enum": [
            {
              "name": "Created",
              "value": "Created",
            },
            {
              "name": "Started",
              "value": "Started",
            },
            {
              "name": "Completed",
              "value": "Completed",
            },
            {
              "name": "Failed",
              "value": "Failed",
            },
          ],
        },
        "JsonFieldPropertiesDto": {
          "docs": undefined,
          "properties": {
            "graphQLSchema": {
              "docs": "The GraphQL schema.",
              "type": "optional<string>",
            },
          },
        },
        "LanguageDto": {
          "docs": undefined,
          "properties": {
            "englishName": {
              "docs": "The english name of the language.",
              "type": "string",
            },
            "iso2Code": {
              "docs": "The iso code of the language.",
              "type": "string",
            },
            "nativeName": {
              "docs": "The native name of the language.",
              "type": "string",
            },
          },
        },
        "LocalizedValueOfNullableBoolean": {
          "docs": undefined,
          "type": "map<string, optional<boolean>>",
        },
        "LocalizedValueOfNullableDouble": {
          "docs": undefined,
          "type": "map<string, optional<double>>",
        },
        "LocalizedValueOfNullableInstant": {
          "docs": undefined,
          "type": "map<string, optional<string>>",
        },
        "LocalizedValueOfReadonlyListOfString": {
          "docs": undefined,
          "type": "map<string, list<string>>",
        },
        "LocalizedValueOfString": {
          "docs": undefined,
          "type": "map<string, string>",
        },
        "LogDownloadDto": {
          "docs": undefined,
          "properties": {
            "downloadUrl": {
              "docs": "The url to download the log.",
              "type": "optional<string>",
            },
          },
        },
        "ManualRuleTriggerDto": {
          "docs": undefined,
          "properties": {},
        },
        "MediumRuleActionDto": {
          "docs": undefined,
          "properties": {
            "accessToken": {
              "docs": "The self issued access token.",
              "type": "string",
            },
            "canonicalUrl": {
              "docs": "The original home of this content, if it was originally published elsewhere.",
              "type": "string",
            },
            "content": {
              "docs": "The content, either html or markdown.",
              "type": "string",
            },
            "isHtml": {
              "docs": "Indicates whether the content is markdown or html.",
              "type": "boolean",
            },
            "publicationId": {
              "docs": "Optional publication id.",
              "type": "string",
            },
            "tags": {
              "docs": "The optional comma separated list of tags.",
              "type": "string",
            },
            "title": {
              "docs": "The title, used for the url.",
              "type": "string",
            },
          },
        },
        "NestedFieldDto": {
          "docs": undefined,
          "properties": {
            "fieldId": {
              "docs": "The ID of the field.",
              "type": "integer",
            },
            "isDisabled": {
              "docs": "Defines if the field is disabled.",
              "type": "boolean",
            },
            "isHidden": {
              "docs": "Defines if the field is hidden.",
              "type": "boolean",
            },
            "isLocked": {
              "docs": "Defines if the field is locked.",
              "type": "boolean",
            },
            "name": {
              "docs": "The name of the field. Must be unique within the schema.",
              "type": "string",
            },
            "properties": {
              "docs": undefined,
              "type": "FieldPropertiesDto",
            },
          },
        },
        "NotificationRuleActionDto": {
          "docs": undefined,
          "properties": {
            "client": {
              "docs": "An optional client name.",
              "type": "string",
            },
            "text": {
              "docs": "The text to send.",
              "type": "string",
            },
            "url": {
              "docs": "The optional url to attach to the notification.",
              "type": "string",
            },
            "user": {
              "docs": "The user id or email.",
              "type": "string",
            },
          },
        },
        "NumberFieldEditor": {
          "docs": "",
          "enum": [
            {
              "name": "Input",
              "value": "Input",
            },
            {
              "name": "Radio",
              "value": "Radio",
            },
            {
              "name": "Dropdown",
              "value": "Dropdown",
            },
            {
              "name": "Stars",
              "value": "Stars",
            },
          ],
        },
        "NumberFieldPropertiesDto": {
          "docs": undefined,
          "properties": {
            "allowedValues": {
              "docs": "The allowed values for the field value.",
              "type": "optional<list<double>>",
            },
            "defaultValue": {
              "docs": "The default value for the field value.",
              "type": "optional<double>",
            },
            "defaultValues": {
              "docs": undefined,
              "type": "optional<LocalizedValueOfNullableDouble>",
            },
            "editor": {
              "docs": undefined,
              "type": "NumberFieldEditor",
            },
            "inlineEditable": {
              "docs": "Indicates that the inline editor is enabled for this field.",
              "type": "boolean",
            },
            "isUnique": {
              "docs": "Indicates if the field value must be unique. Ignored for nested fields and localized fields.",
              "type": "boolean",
            },
            "maxValue": {
              "docs": "The maximum allowed value for the field value.",
              "type": "optional<double>",
            },
            "minValue": {
              "docs": "The minimum allowed value for the field value.",
              "type": "optional<double>",
            },
          },
        },
        "OpenSearchRuleActionDto": {
          "docs": undefined,
          "properties": {
            "delete": {
              "docs": "The condition when to delete the document.",
              "type": "string",
            },
            "document": {
              "docs": "The optional custom document.",
              "type": "string",
            },
            "host": {
              "docs": "The url to the instance or cluster.",
              "type": "string",
            },
            "indexName": {
              "docs": "The name of the index.",
              "type": "string",
            },
            "password": {
              "docs": "The optional password.",
              "type": "string",
            },
            "username": {
              "docs": "The optional username.",
              "type": "string",
            },
          },
        },
        "PatternDto": {
          "docs": undefined,
          "properties": {
            "message": {
              "docs": "The regex message.",
              "type": "optional<string>",
            },
            "name": {
              "docs": "The name of the suggestion.",
              "type": "string",
            },
            "regex": {
              "docs": "The regex pattern.",
              "type": "string",
            },
          },
        },
        "PlanChangedDto": {
          "docs": undefined,
          "properties": {
            "redirectUri": {
              "docs": "Optional redirect uri.",
              "type": "optional<string>",
            },
          },
        },
        "PlanDto": {
          "docs": undefined,
          "properties": {
            "confirmText": {
              "docs": "An optional confirm text for the monthly subscription.",
              "type": "optional<string>",
            },
            "costs": {
              "docs": "The monthly costs of the plan.",
              "type": "string",
            },
            "id": {
              "docs": "The ID of the plan.",
              "type": "string",
            },
            "maxApiBytes": {
              "docs": "The maximum number of API traffic.",
              "type": "integer",
            },
            "maxApiCalls": {
              "docs": "The maximum number of API calls.",
              "type": "integer",
            },
            "maxAssetSize": {
              "docs": "The maximum allowed asset size.",
              "type": "integer",
            },
            "maxContributors": {
              "docs": "The maximum number of contributors.",
              "type": "integer",
            },
            "name": {
              "docs": "The name of the plan.",
              "type": "string",
            },
            "yearlyConfirmText": {
              "docs": "An optional confirm text for the yearly subscription.",
              "type": "optional<string>",
            },
            "yearlyCosts": {
              "docs": "The yearly costs of the plan.",
              "type": "optional<string>",
            },
            "yearlyId": {
              "docs": "The yearly ID of the plan.",
              "type": "optional<string>",
            },
          },
        },
        "PlansDto": {
          "docs": undefined,
          "properties": {
            "currentPlanId": {
              "docs": "The current plan id.",
              "type": "optional<string>",
            },
            "locked": {
              "docs": undefined,
              "type": "PlansLockedReason",
            },
            "planOwner": {
              "docs": "The plan owner.",
              "type": "optional<string>",
            },
            "plans": {
              "docs": "The available plans.",
              "type": "list<PlanDto>",
            },
            "portalLink": {
              "docs": "The link to the management portal.",
              "type": "optional<string>",
            },
            "referral": {
              "docs": undefined,
              "type": "optional<ReferralInfo>",
            },
          },
        },
        "PlansLockedReason": {
          "docs": "",
          "enum": [
            {
              "name": "None",
              "value": "None",
            },
            {
              "name": "NotOwner",
              "value": "NotOwner",
            },
            {
              "name": "NoPermission",
              "value": "NoPermission",
            },
            {
              "name": "ManagedByTeam",
              "value": "ManagedByTeam",
            },
          ],
        },
        "PrerenderRuleActionDto": {
          "docs": undefined,
          "properties": {
            "token": {
              "docs": "The prerender token from your account.",
              "type": "string",
            },
            "url": {
              "docs": "The url to recache.",
              "type": "string",
            },
          },
        },
        "PropertyPath": {
          "docs": undefined,
          "type": "list<string>",
        },
        "QueryDto": {
          "docs": undefined,
          "properties": {
            "ids": {
              "docs": "The optional list of ids to query.",
              "type": "optional<list<string>>",
            },
            "oData": {
              "docs": "The optional odata query.",
              "type": "optional<string>",
            },
            "parentId": {
              "docs": "The parent id (for assets).",
              "type": "optional<string>",
            },
            "q": "unknown",
          },
        },
        "QueryJsonDto": {
          "docs": undefined,
          "properties": {
            "filter": "unknown",
            "fullText": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "random": {
              "docs": undefined,
              "type": "integer",
            },
            "skip": {
              "docs": undefined,
              "type": "integer",
            },
            "sort": {
              "docs": undefined,
              "type": "optional<list<SortNode>>",
            },
            "take": {
              "docs": undefined,
              "type": "integer",
            },
            "top": {
              "docs": undefined,
              "type": "integer",
            },
          },
        },
        "ReferencesFieldEditor": {
          "docs": "",
          "enum": [
            {
              "name": "List",
              "value": "List",
            },
            {
              "name": "Dropdown",
              "value": "Dropdown",
            },
            {
              "name": "Tags",
              "value": "Tags",
            },
            {
              "name": "Checkboxes",
              "value": "Checkboxes",
            },
            {
              "name": "Input",
              "value": "Input",
            },
          ],
        },
        "ReferencesFieldPropertiesDto": {
          "docs": undefined,
          "properties": {
            "allowDuplicates": {
              "docs": "True, if duplicate values are allowed.",
              "type": "boolean",
            },
            "defaultValue": {
              "docs": "The default value as a list of content ids.",
              "type": "optional<list<string>>",
            },
            "defaultValues": {
              "docs": undefined,
              "type": "optional<LocalizedValueOfReadonlyListOfString>",
            },
            "editor": {
              "docs": undefined,
              "type": "ReferencesFieldEditor",
            },
            "maxItems": {
              "docs": "The maximum allowed items for the field value.",
              "type": "optional<integer>",
            },
            "minItems": {
              "docs": "The minimum allowed items for the field value.",
              "type": "optional<integer>",
            },
            "mustBePublished": {
              "docs": "True when all references must be published.",
              "type": "boolean",
            },
            "resolveReference": {
              "docs": "True to resolve references in the content list.",
              "type": "boolean",
            },
            "schemaIds": {
              "docs": "The ID of the referenced schemas.",
              "type": "optional<list<string>>",
            },
          },
        },
        "ReferralInfo": {
          "docs": undefined,
          "properties": {
            "code": {
              "docs": undefined,
              "type": "string",
            },
            "condition": {
              "docs": undefined,
              "type": "string",
            },
            "earned": {
              "docs": undefined,
              "type": "string",
            },
          },
        },
        "ReorderFieldsDto": {
          "docs": undefined,
          "properties": {
            "fieldIds": {
              "docs": "The field ids in the target order.",
              "type": "list<integer>",
            },
          },
        },
        "ResizeMode": {
          "docs": "",
          "enum": [
            {
              "name": "Crop",
              "value": "Crop",
            },
            {
              "name": "CropUpsize",
              "value": "CropUpsize",
            },
            {
              "name": "Pad",
              "value": "Pad",
            },
            {
              "name": "BoxPad",
              "value": "BoxPad",
            },
            {
              "name": "Max",
              "value": "Max",
            },
            {
              "name": "Min",
              "value": "Min",
            },
            {
              "name": "Stretch",
              "value": "Stretch",
            },
          ],
        },
        "Resource": {
          "docs": undefined,
          "properties": {
            "_links": {
              "docs": "The links.",
              "type": "map<string, ResourceLink>",
            },
          },
        },
        "ResourceLink": {
          "docs": undefined,
          "properties": {
            "href": {
              "docs": "The link url.",
              "type": "string",
            },
            "metadata": {
              "docs": "Additional data about the link.",
              "type": "optional<string>",
            },
            "method": {
              "docs": "The link method.",
              "type": "string",
            },
          },
        },
        "ResourcesDto": {
          "docs": undefined,
          "properties": {},
        },
        "RestoreJobDto": {
          "docs": undefined,
          "properties": {
            "log": {
              "docs": "The status log.",
              "type": "list<string>",
            },
            "started": {
              "docs": "The time when the job has been started.",
              "type": "string",
            },
            "status": {
              "docs": undefined,
              "type": "JobStatus",
            },
            "stopped": {
              "docs": "The time when the job has been stopped.",
              "type": "optional<string>",
            },
            "url": {
              "docs": "The uri to load from.",
              "type": "string",
            },
          },
        },
        "RoleDto": {
          "docs": undefined,
          "properties": {
            "isDefaultRole": {
              "docs": "Indicates if the role is an builtin default role.",
              "type": "boolean",
            },
            "name": {
              "docs": "The role name.",
              "type": "string",
            },
            "numClients": {
              "docs": "The number of clients with this role.",
              "type": "integer",
            },
            "numContributors": {
              "docs": "The number of contributors with this role.",
              "type": "integer",
            },
            "permissions": {
              "docs": "Associated list of permissions.",
              "type": "list<string>",
            },
            "properties": {
              "docs": "Associated list of UI properties.",
              "type": "map<string, unknown>",
            },
          },
        },
        "RolesDto": {
          "docs": undefined,
          "properties": {
            "items": {
              "docs": "The roles.",
              "type": "list<RoleDto>",
            },
          },
        },
        "RuleActionDto": {
          "base-properties": {},
          "docs": undefined,
          "union": {
            "Algolia": {
              "docs": undefined,
              "type": "AlgoliaRuleActionDto",
            },
            "AzureQueue": {
              "docs": undefined,
              "type": "AzureQueueRuleActionDto",
            },
            "Comment": {
              "docs": undefined,
              "type": "CommentRuleActionDto",
            },
            "CreateContent": {
              "docs": undefined,
              "type": "CreateContentRuleActionDto",
            },
            "Discourse": {
              "docs": undefined,
              "type": "DiscourseRuleActionDto",
            },
            "ElasticSearch": {
              "docs": undefined,
              "type": "ElasticSearchRuleActionDto",
            },
            "Email": {
              "docs": undefined,
              "type": "EmailRuleActionDto",
            },
            "Fastly": {
              "docs": undefined,
              "type": "FastlyRuleActionDto",
            },
            "Medium": {
              "docs": undefined,
              "type": "MediumRuleActionDto",
            },
            "Notification": {
              "docs": undefined,
              "type": "NotificationRuleActionDto",
            },
            "OpenSearch": {
              "docs": undefined,
              "type": "OpenSearchRuleActionDto",
            },
            "Prerender": {
              "docs": undefined,
              "type": "PrerenderRuleActionDto",
            },
            "Script": {
              "docs": undefined,
              "type": "ScriptRuleActionDto",
            },
            "SignalR": {
              "docs": undefined,
              "type": "SignalRRuleActionDto",
            },
            "Slack": {
              "docs": undefined,
              "type": "SlackRuleActionDto",
            },
            "Tweet": {
              "docs": undefined,
              "type": "TweetRuleActionDto",
            },
            "Typesense": {
              "docs": undefined,
              "type": "TypesenseRuleActionDto",
            },
            "Webhook": {
              "docs": undefined,
              "type": "WebhookRuleActionDto",
            },
          },
        },
        "RuleDto": {
          "docs": undefined,
          "properties": {
            "action": {
              "docs": undefined,
              "type": "RuleActionDto",
            },
            "created": {
              "docs": "The date and time when the rule has been created.",
              "type": "string",
            },
            "createdBy": {
              "docs": "The user that has created the rule.",
              "type": "string",
            },
            "id": {
              "docs": "The ID of the rule.",
              "type": "string",
            },
            "isEnabled": {
              "docs": "Determines if the rule is enabled.",
              "type": "boolean",
            },
            "lastExecuted": {
              "docs": "The date and time when the rule was executed the last time.",
              "type": "optional<string>",
            },
            "lastModified": {
              "docs": "The date and time when the rule has been modified last.",
              "type": "string",
            },
            "lastModifiedBy": {
              "docs": "The user that has updated the rule.",
              "type": "string",
            },
            "name": {
              "docs": "Optional rule name.",
              "type": "optional<string>",
            },
            "numFailed": {
              "docs": "The number of failed executions.",
              "type": "integer",
            },
            "numSucceeded": {
              "docs": "The number of completed executions.",
              "type": "integer",
            },
            "trigger": {
              "docs": undefined,
              "type": "RuleTriggerDto",
            },
            "version": {
              "docs": "The version of the rule.",
              "type": "integer",
            },
          },
        },
        "RuleElementDto": {
          "docs": undefined,
          "properties": {
            "description": {
              "docs": "Describes the action or trigger type.",
              "type": "string",
            },
            "display": {
              "docs": "The label for the action or trigger type.",
              "type": "string",
            },
            "iconColor": {
              "docs": "The color for the icon.",
              "type": "optional<string>",
            },
            "iconImage": {
              "docs": "The image for the icon.",
              "type": "optional<string>",
            },
            "properties": {
              "docs": "The properties.",
              "type": "list<RuleElementPropertyDto>",
            },
            "readMore": {
              "docs": "The optional link to the product that is integrated.",
              "type": "optional<string>",
            },
            "title": {
              "docs": "Optional title.",
              "type": "optional<string>",
            },
          },
        },
        "RuleElementPropertyDto": {
          "docs": undefined,
          "properties": {
            "description": {
              "docs": "The optional description.",
              "type": "optional<string>",
            },
            "display": {
              "docs": "The label to use.",
              "type": "string",
            },
            "editor": {
              "docs": undefined,
              "type": "RuleFieldEditor",
            },
            "isFormattable": {
              "docs": "Indicates if the property is formattable.",
              "type": "boolean",
            },
            "isRequired": {
              "docs": "Indicates if the property is required.",
              "type": "boolean",
            },
            "name": {
              "docs": "The name of the editor.",
              "type": "string",
            },
            "options": {
              "docs": "The options, if the editor is a dropdown.",
              "type": "optional<list<string>>",
            },
          },
        },
        "RuleEventDto": {
          "docs": undefined,
          "properties": {
            "created": {
              "docs": "The time when the event has been created.",
              "type": "string",
            },
            "description": {
              "docs": "The description.",
              "type": "string",
            },
            "eventName": {
              "docs": "The name of the event.",
              "type": "string",
            },
            "id": {
              "docs": "The ID of the event.",
              "type": "string",
            },
            "jobResult": {
              "docs": undefined,
              "type": "RuleJobResult",
            },
            "lastDump": {
              "docs": "The last dump.",
              "type": "optional<string>",
            },
            "nextAttempt": {
              "docs": "The next attempt.",
              "type": "optional<string>",
            },
            "numCalls": {
              "docs": "The number of calls.",
              "type": "integer",
            },
            "result": {
              "docs": undefined,
              "type": "RuleResult",
            },
          },
        },
        "RuleEventsDto": {
          "docs": undefined,
          "properties": {
            "items": {
              "docs": "The rule events.",
              "type": "list<RuleEventDto>",
            },
            "total": {
              "docs": "The total number of rule events.",
              "type": "integer",
            },
          },
        },
        "RuleFieldEditor": {
          "docs": "",
          "enum": [
            {
              "name": "Checkbox",
              "value": "Checkbox",
            },
            {
              "name": "Dropdown",
              "value": "Dropdown",
            },
            {
              "name": "Email",
              "value": "Email",
            },
            {
              "name": "Javascript",
              "value": "Javascript",
            },
            {
              "name": "Number",
              "value": "Number",
            },
            {
              "name": "Password",
              "value": "Password",
            },
            {
              "name": "Text",
              "value": "Text",
            },
            {
              "name": "TextArea",
              "value": "TextArea",
            },
            {
              "name": "Url",
              "value": "Url",
            },
          ],
        },
        "RuleJobResult": {
          "docs": "",
          "enum": [
            {
              "name": "Pending",
              "value": "Pending",
            },
            {
              "name": "Success",
              "value": "Success",
            },
            {
              "name": "Retry",
              "value": "Retry",
            },
            {
              "name": "Failed",
              "value": "Failed",
            },
            {
              "name": "Cancelled",
              "value": "Cancelled",
            },
          ],
        },
        "RuleResult": {
          "docs": "",
          "enum": [
            {
              "name": "Pending",
              "value": "Pending",
            },
            {
              "name": "Success",
              "value": "Success",
            },
            {
              "name": "Failed",
              "value": "Failed",
            },
            {
              "name": "Timeout",
              "value": "Timeout",
            },
          ],
        },
        "RuleTriggerDto": {
          "base-properties": {},
          "docs": undefined,
          "union": {
            "AssetChanged": {
              "docs": undefined,
              "type": "AssetChangedRuleTriggerDto",
            },
            "Comment": {
              "docs": undefined,
              "type": "CommentRuleTriggerDto",
            },
            "ContentChanged": {
              "docs": undefined,
              "type": "ContentChangedRuleTriggerDto",
            },
            "Manual": {
              "docs": undefined,
              "type": "ManualRuleTriggerDto",
            },
            "SchemaChanged": {
              "docs": undefined,
              "type": "SchemaChangedRuleTriggerDto",
            },
            "Usage": {
              "docs": undefined,
              "type": "UsageRuleTriggerDto",
            },
          },
        },
        "RulesDto": {
          "docs": undefined,
          "properties": {
            "items": {
              "docs": "The rules.",
              "type": "list<RuleDto>",
            },
            "runningRuleId": {
              "docs": "The ID of the rule that is currently rerunning.",
              "type": "optional<string>",
            },
          },
        },
        "ScheduleJobDto": {
          "docs": undefined,
          "properties": {
            "color": {
              "docs": "The color of the scheduled status.",
              "type": "string",
            },
            "dueTime": {
              "docs": "The target date and time when the content should be scheduled.",
              "type": "string",
            },
            "id": {
              "docs": "The ID of the schedule job.",
              "type": "string",
            },
            "scheduledBy": {
              "docs": "The user who schedule the content.",
              "type": "string",
            },
            "status": {
              "docs": "The new status.",
              "type": "string",
            },
          },
        },
        "SchemaChangedRuleTriggerDto": {
          "docs": undefined,
          "properties": {
            "condition": {
              "docs": "Javascript condition when to trigger.",
              "type": "optional<string>",
            },
          },
        },
        "SchemaCondition": {
          "docs": undefined,
          "properties": {
            "condition": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "schemaId": {
              "docs": undefined,
              "type": "string",
            },
          },
        },
        "SchemaDto": {
          "docs": undefined,
          "properties": {
            "category": {
              "docs": "The name of the category.",
              "type": "optional<string>",
            },
            "created": {
              "docs": "The date and time when the schema has been created.",
              "type": "string",
            },
            "createdBy": {
              "docs": "The user that has created the schema.",
              "type": "string",
            },
            "fieldRules": {
              "docs": "The field rules.",
              "type": "list<FieldRuleDto>",
            },
            "fields": {
              "docs": "The list of fields.",
              "type": "list<FieldDto>",
            },
            "fieldsInLists": {
              "docs": "The name of fields that are used in content lists.",
              "type": "list<string>",
            },
            "fieldsInReferences": {
              "docs": "The name of fields that are used in content references.",
              "type": "list<string>",
            },
            "id": {
              "docs": "The ID of the schema.",
              "type": "string",
            },
            "isPublished": {
              "docs": "Indicates if the schema is published.",
              "type": "boolean",
            },
            "isSingleton": {
              "docs": "Indicates if the schema is a singleton.",
              "type": "boolean",
            },
            "lastModified": {
              "docs": "The date and time when the schema has been modified last.",
              "type": "string",
            },
            "lastModifiedBy": {
              "docs": "The user that has updated the schema.",
              "type": "string",
            },
            "name": {
              "docs": "The name of the schema. Unique within the app.",
              "type": "string",
            },
            "previewUrls": {
              "docs": "The preview Urls.",
              "type": "map<string, string>",
            },
            "properties": {
              "docs": undefined,
              "type": "SchemaPropertiesDto",
            },
            "scripts": {
              "docs": undefined,
              "type": "SchemaScriptsDto",
            },
            "type": {
              "docs": undefined,
              "type": "SchemaType",
            },
            "version": {
              "docs": "The version of the schema.",
              "type": "integer",
            },
          },
        },
        "SchemaPropertiesDto": {
          "docs": undefined,
          "properties": {
            "contentEditorUrl": {
              "docs": "The url to the editor plugin.",
              "type": "optional<string>",
            },
            "contentSidebarUrl": {
              "docs": "The url to a the sidebar plugin for content items.",
              "type": "optional<string>",
            },
            "contentsSidebarUrl": {
              "docs": "The url to a the sidebar plugin for content lists.",
              "type": "optional<string>",
            },
            "hints": {
              "docs": "Hints to describe the schema.",
              "type": "optional<string>",
            },
            "label": {
              "docs": "Optional label for the editor.",
              "type": "optional<string>",
            },
            "tags": {
              "docs": "Tags for automation processes.",
              "type": "optional<list<string>>",
            },
            "validateOnPublish": {
              "docs": "True to validate the content items on publish.",
              "type": "boolean",
            },
          },
        },
        "SchemaScriptsDto": {
          "docs": undefined,
          "properties": {
            "change": {
              "docs": "The script that is executed when change a content status.",
              "type": "optional<string>",
            },
            "create": {
              "docs": "The script that is executed when creating a content.",
              "type": "optional<string>",
            },
            "delete": {
              "docs": "The script that is executed when deleting a content.",
              "type": "optional<string>",
            },
            "query": {
              "docs": "The script that is executed for each content when querying contents.",
              "type": "optional<string>",
            },
            "queryPre": {
              "docs": "The script that is executed for all contents when querying contents.",
              "type": "optional<string>",
            },
            "update": {
              "docs": "The script that is executed when updating a content.",
              "type": "optional<string>",
            },
          },
        },
        "SchemaType": {
          "docs": "",
          "enum": [
            {
              "name": "Default",
              "value": "Default",
            },
            {
              "name": "Singleton",
              "value": "Singleton",
            },
            {
              "name": "Component",
              "value": "Component",
            },
          ],
        },
        "SchemasDto": {
          "docs": undefined,
          "properties": {
            "items": {
              "docs": "The schemas.",
              "type": "list<SchemaDto>",
            },
          },
        },
        "ScriptRuleActionDto": {
          "docs": undefined,
          "properties": {
            "script": {
              "docs": "The script to render.",
              "type": "string",
            },
          },
        },
        "SearchResultDto": {
          "docs": undefined,
          "properties": {
            "label": {
              "docs": "An optional label.",
              "type": "optional<string>",
            },
            "name": {
              "docs": "The name of the search result.",
              "type": "string",
            },
            "type": {
              "docs": undefined,
              "type": "SearchResultType",
            },
          },
        },
        "SearchResultType": {
          "docs": "",
          "enum": [
            {
              "name": "Asset",
              "value": "Asset",
            },
            {
              "name": "Content",
              "value": "Content",
            },
            {
              "name": "Dashboard",
              "value": "Dashboard",
            },
            {
              "name": "Setting",
              "value": "Setting",
            },
            {
              "name": "Rule",
              "value": "Rule",
            },
            {
              "name": "Schema",
              "value": "Schema",
            },
          ],
        },
        "SignalRRuleActionDto": {
          "docs": undefined,
          "properties": {
            "action": {
              "docs": undefined,
              "type": "ActionTypeEnum",
            },
            "connectionString": {
              "docs": "The connection string to the Azure SignalR.",
              "type": "string",
            },
            "hubName": {
              "docs": "The name of the hub.",
              "type": "string",
            },
            "methodName": {
              "docs": "Set the Name of the hub method received by the customer.",
              "type": "string",
            },
            "payload": {
              "docs": "Leave it empty to use the full event as body.",
              "type": "string",
            },
            "target": {
              "docs": "Define target users or groups by id or name. One item per line. Not needed for Broadcast action.",
              "type": "string",
            },
          },
        },
        "SimulatedRuleEventDto": {
          "docs": undefined,
          "properties": {
            "actionData": {
              "docs": "The name of the action.",
              "type": "optional<string>",
            },
            "actionName": {
              "docs": "The data for the action.",
              "type": "optional<string>",
            },
            "enrichedEvent": "unknown",
            "error": {
              "docs": "The name of the event.",
              "type": "optional<string>",
            },
            "event": "unknown",
            "eventId": {
              "docs": "The unique event id.",
              "type": "string",
            },
            "eventName": {
              "docs": "The name of the event.",
              "type": "string",
            },
            "skipReasons": {
              "docs": "The reason why the event has been skipped.",
              "type": "list<SkipReason>",
            },
            "uniqueId": {
              "docs": "The the unique id of the simulated event.",
              "type": "string",
            },
          },
        },
        "SimulatedRuleEventsDto": {
          "docs": undefined,
          "properties": {
            "items": {
              "docs": "The simulated rule events.",
              "type": "list<SimulatedRuleEventDto>",
            },
            "total": {
              "docs": "The total number of simulated rule events.",
              "type": "integer",
            },
          },
        },
        "SkipReason": {
          "docs": "",
          "enum": [
            {
              "name": "None",
              "value": "None",
            },
            {
              "name": "ConditionDoesNotMatch",
              "value": "ConditionDoesNotMatch",
            },
            {
              "name": "ConditionPrecheckDoesNotMatch",
              "value": "ConditionPrecheckDoesNotMatch",
            },
            {
              "name": "Disabled",
              "value": "Disabled",
            },
            {
              "name": "Failed",
              "value": "Failed",
            },
            {
              "name": "FromRule",
              "value": "FromRule",
            },
            {
              "name": "NoAction",
              "value": "NoAction",
            },
            {
              "name": "NoTrigger",
              "value": "NoTrigger",
            },
            {
              "name": "TooOld",
              "value": "TooOld",
            },
            {
              "name": "WrongEvent",
              "value": "WrongEvent",
            },
            {
              "name": "WrongEventForTrigger",
              "value": "WrongEventForTrigger",
            },
          ],
        },
        "SlackRuleActionDto": {
          "docs": undefined,
          "properties": {
            "text": {
              "docs": "The text that is sent as message to slack.",
              "type": "string",
            },
            "webhookUrl": {
              "docs": "The slack webhook url.",
              "type": "string",
            },
          },
        },
        "SortNode": {
          "docs": undefined,
          "properties": {
            "order": {
              "docs": undefined,
              "type": "SortOrder",
            },
            "path": {
              "docs": undefined,
              "type": "PropertyPath",
            },
          },
        },
        "SortOrder": {
          "docs": "",
          "enum": [
            {
              "name": "Ascending",
              "value": "Ascending",
            },
            {
              "name": "Descending",
              "value": "Descending",
            },
          ],
        },
        "StatusInfoDto": {
          "docs": undefined,
          "properties": {
            "color": {
              "docs": "The color of the status.",
              "type": "string",
            },
            "status": {
              "docs": "The name of the status.",
              "type": "string",
            },
          },
        },
        "StorageUsagePerDateDto": {
          "docs": undefined,
          "properties": {
            "date": {
              "docs": "The date when the usage was tracked.",
              "type": "string",
            },
            "totalCount": {
              "docs": "The number of assets.",
              "type": "integer",
            },
            "totalSize": {
              "docs": "The size in bytes.",
              "type": "integer",
            },
          },
        },
        "StringContentType": {
          "docs": "",
          "enum": [
            {
              "name": "Unspecified",
              "value": "Unspecified",
            },
            {
              "name": "Html",
              "value": "Html",
            },
            {
              "name": "Markdown",
              "value": "Markdown",
            },
          ],
        },
        "StringFieldEditor": {
          "docs": "",
          "enum": [
            {
              "name": "Input",
              "value": "Input",
            },
            {
              "name": "Color",
              "value": "Color",
            },
            {
              "name": "Markdown",
              "value": "Markdown",
            },
            {
              "name": "Dropdown",
              "value": "Dropdown",
            },
            {
              "name": "Html",
              "value": "Html",
            },
            {
              "name": "Radio",
              "value": "Radio",
            },
            {
              "name": "RichText",
              "value": "RichText",
            },
            {
              "name": "Slug",
              "value": "Slug",
            },
            {
              "name": "StockPhoto",
              "value": "StockPhoto",
            },
            {
              "name": "TextArea",
              "value": "TextArea",
            },
          ],
        },
        "StringFieldPropertiesDto": {
          "docs": undefined,
          "properties": {
            "allowedValues": {
              "docs": "The allowed values for the field value.",
              "type": "optional<list<string>>",
            },
            "contentType": {
              "docs": undefined,
              "type": "StringContentType",
            },
            "createEnum": {
              "docs": "Indicates whether GraphQL Enum should be created.",
              "type": "boolean",
            },
            "defaultValue": {
              "docs": "The default value for the field value.",
              "type": "optional<string>",
            },
            "defaultValues": {
              "docs": undefined,
              "type": "optional<LocalizedValueOfString>",
            },
            "editor": {
              "docs": undefined,
              "type": "StringFieldEditor",
            },
            "folderId": {
              "docs": "The initial id to the folder when the control supports file uploads.",
              "type": "optional<string>",
            },
            "inlineEditable": {
              "docs": "Indicates that the inline editor is enabled for this field.",
              "type": "boolean",
            },
            "isEmbeddable": {
              "docs": "Indicates that other content items or references are embedded.",
              "type": "boolean",
            },
            "isUnique": {
              "docs": "Indicates if the field value must be unique. Ignored for nested fields and localized fields.",
              "type": "boolean",
            },
            "maxCharacters": {
              "docs": "The maximum allowed of normal characters for the field value.",
              "type": "optional<integer>",
            },
            "maxLength": {
              "docs": "The maximum allowed length for the field value.",
              "type": "optional<integer>",
            },
            "maxWords": {
              "docs": "The maximum allowed number of words for the field value.",
              "type": "optional<integer>",
            },
            "minCharacters": {
              "docs": "The minimum allowed of normal characters for the field value.",
              "type": "optional<integer>",
            },
            "minLength": {
              "docs": "The minimum allowed length for the field value.",
              "type": "optional<integer>",
            },
            "minWords": {
              "docs": "The minimum allowed number of words for the field value.",
              "type": "optional<integer>",
            },
            "pattern": {
              "docs": "The pattern to enforce a specific format for the field value.",
              "type": "optional<string>",
            },
            "patternMessage": {
              "docs": "The validation message for the pattern.",
              "type": "optional<string>",
            },
            "schemaIds": {
              "docs": "The allowed schema ids that can be embedded.",
              "type": "optional<list<string>>",
            },
          },
        },
        "TagsFieldEditor": {
          "docs": "",
          "enum": [
            {
              "name": "Tags",
              "value": "Tags",
            },
            {
              "name": "Checkboxes",
              "value": "Checkboxes",
            },
            {
              "name": "Dropdown",
              "value": "Dropdown",
            },
          ],
        },
        "TagsFieldPropertiesDto": {
          "docs": undefined,
          "properties": {
            "allowedValues": {
              "docs": "The allowed values for the field value.",
              "type": "optional<list<string>>",
            },
            "createEnum": {
              "docs": "Indicates whether GraphQL Enum should be created.",
              "type": "boolean",
            },
            "defaultValue": {
              "docs": "The default value.",
              "type": "optional<list<string>>",
            },
            "defaultValues": {
              "docs": undefined,
              "type": "optional<LocalizedValueOfReadonlyListOfString>",
            },
            "editor": {
              "docs": undefined,
              "type": "TagsFieldEditor",
            },
            "maxItems": {
              "docs": "The maximum allowed items for the field value.",
              "type": "optional<integer>",
            },
            "minItems": {
              "docs": "The minimum allowed items for the field value.",
              "type": "optional<integer>",
            },
          },
        },
        "TeamDto": {
          "docs": undefined,
          "properties": {
            "created": {
              "docs": "The timestamp when the team has been created.",
              "type": "string",
            },
            "id": {
              "docs": "The ID of the team.",
              "type": "string",
            },
            "lastModified": {
              "docs": "The timestamp when the team has been modified last.",
              "type": "string",
            },
            "name": {
              "docs": "The name of the team.",
              "type": "string",
            },
            "roleName": {
              "docs": "The role name of the user.",
              "type": "optional<string>",
            },
            "version": {
              "docs": "The version of the team.",
              "type": "integer",
            },
          },
        },
        "TemplateDetailsDto": {
          "docs": undefined,
          "properties": {
            "details": {
              "docs": "The details of the template.",
              "type": "string",
            },
          },
        },
        "TemplateDto": {
          "docs": undefined,
          "properties": {
            "description": {
              "docs": "The description of the template.",
              "type": "string",
            },
            "isStarter": {
              "docs": "True, if the template is a starter.",
              "type": "boolean",
            },
            "name": {
              "docs": "The name of the template.",
              "type": "string",
            },
            "title": {
              "docs": "The title of the template.",
              "type": "string",
            },
          },
        },
        "TemplatesDto": {
          "docs": undefined,
          "properties": {
            "items": {
              "docs": "The event consumers.",
              "type": "list<TemplateDto>",
            },
          },
        },
        "TranslationDto": {
          "docs": undefined,
          "properties": {
            "result": {
              "docs": undefined,
              "type": "TranslationResultCode",
            },
            "text": {
              "docs": "The translated text.",
              "type": "optional<string>",
            },
          },
        },
        "TranslationResultCode": {
          "docs": "",
          "enum": [
            {
              "name": "Translated",
              "value": "Translated",
            },
            {
              "name": "LanguageNotSupported",
              "value": "LanguageNotSupported",
            },
            {
              "name": "NotTranslated",
              "value": "NotTranslated",
            },
            {
              "name": "NotConfigured",
              "value": "NotConfigured",
            },
            {
              "name": "Unauthorized",
              "value": "Unauthorized",
            },
            {
              "name": "Failed",
              "value": "Failed",
            },
          ],
        },
        "TweetRuleActionDto": {
          "docs": undefined,
          "properties": {
            "accessSecret": {
              "docs": " The generated access secret.",
              "type": "string",
            },
            "accessToken": {
              "docs": " The generated access token.",
              "type": "string",
            },
            "text": {
              "docs": "The text that is sent as tweet to twitter.",
              "type": "string",
            },
          },
        },
        "TypesenseRuleActionDto": {
          "docs": undefined,
          "properties": {
            "apiKey": {
              "docs": "The api key.",
              "type": "string",
            },
            "delete": {
              "docs": "The condition when to delete the document.",
              "type": "string",
            },
            "document": {
              "docs": "The optional custom document.",
              "type": "string",
            },
            "host": {
              "docs": "The url to the instance or cluster.",
              "type": "string",
            },
            "indexName": {
              "docs": "The name of the index.",
              "type": "string",
            },
          },
        },
        "UiFieldEditor": {
          "docs": "",
          "enum": [
            {
              "name": "Separator",
              "value": "Separator",
            },
          ],
        },
        "UiFieldPropertiesDto": {
          "docs": undefined,
          "properties": {
            "editor": {
              "docs": undefined,
              "type": "UiFieldEditor",
            },
          },
        },
        "UiSettingsDto": {
          "docs": undefined,
          "properties": {
            "canCreateApps": {
              "docs": "True when the user can create apps.",
              "type": "boolean",
            },
            "canCreateTeams": {
              "docs": "True when the user can create teams.",
              "type": "boolean",
            },
          },
        },
        "UpdateFieldDto": {
          "docs": undefined,
          "properties": {
            "properties": {
              "docs": undefined,
              "type": "FieldPropertiesDto",
            },
          },
        },
        "UpdateSettingDto": {
          "docs": undefined,
          "properties": {
            "value": "unknown",
          },
        },
        "UpsertCommentDto": {
          "docs": undefined,
          "properties": {
            "text": {
              "docs": "The comment text.",
              "type": "string",
            },
            "url": {
              "docs": "The url where the comment is created.",
              "type": "optional<string>",
            },
          },
        },
        "UpsertSchemaDto": {
          "docs": undefined,
          "properties": {
            "category": {
              "docs": "The category.",
              "type": "optional<string>",
            },
            "fieldRules": {
              "docs": "The optional field Rules.",
              "type": "optional<list<FieldRuleDto>>",
            },
            "fields": {
              "docs": "Optional fields.",
              "type": "optional<list<UpsertSchemaFieldDto>>",
            },
            "fieldsInLists": {
              "docs": "The names of the fields that should be shown in lists, including meta fields.",
              "type": "optional<list<string>>",
            },
            "fieldsInReferences": {
              "docs": "The names of the fields that should be used in references.",
              "type": "optional<list<string>>",
            },
            "isPublished": {
              "docs": "Set it to true to autopublish the schema.",
              "type": "boolean",
            },
            "previewUrls": {
              "docs": "The optional preview urls.",
              "type": "optional<map<string, optional<string>>>",
            },
            "properties": {
              "docs": undefined,
              "type": "optional<SchemaPropertiesDto>",
            },
            "scripts": {
              "docs": undefined,
              "type": "optional<SchemaScriptsDto>",
            },
          },
        },
        "UpsertSchemaFieldDto": {
          "docs": undefined,
          "properties": {
            "isDisabled": {
              "docs": "Defines if the field is disabled.",
              "type": "boolean",
            },
            "isHidden": {
              "docs": "Defines if the field is hidden.",
              "type": "boolean",
            },
            "isLocked": {
              "docs": "Defines if the field is locked.",
              "type": "boolean",
            },
            "name": {
              "docs": "The name of the field. Must be unique within the schema.",
              "type": "string",
            },
            "nested": {
              "docs": "The nested fields.",
              "type": "optional<list<UpsertSchemaNestedFieldDto>>",
            },
            "partitioning": {
              "docs": "Determines the optional partitioning of the field.",
              "type": "optional<string>",
            },
            "properties": {
              "docs": undefined,
              "type": "FieldPropertiesDto",
            },
          },
        },
        "UpsertSchemaNestedFieldDto": {
          "docs": undefined,
          "properties": {
            "isDisabled": {
              "docs": "Defines if the field is disabled.",
              "type": "boolean",
            },
            "isHidden": {
              "docs": "Defines if the field is hidden.",
              "type": "boolean",
            },
            "isLocked": {
              "docs": "Defines if the field is locked.",
              "type": "boolean",
            },
            "name": {
              "docs": "The name of the field. Must be unique within the schema.",
              "type": "string",
            },
            "properties": {
              "docs": undefined,
              "type": "FieldPropertiesDto",
            },
          },
        },
        "UsageRuleTriggerDto": {
          "docs": undefined,
          "properties": {
            "limit": {
              "docs": "The number of monthly api calls.",
              "type": "integer",
            },
            "numDays": {
              "docs": "The number of days to check or null for the current month.",
              "type": "optional<integer>",
            },
          },
        },
        "UserDto": {
          "docs": undefined,
          "properties": {
            "displayName": {
              "docs": "The display name (usually first name and last name) of the user.",
              "type": "string",
            },
            "email": {
              "docs": "The email of the user. Unique value.",
              "type": "string",
            },
            "id": {
              "docs": "The ID of the user.",
              "type": "string",
            },
            "isLocked": {
              "docs": "Determines if the user is locked.",
              "type": "boolean",
            },
            "permissions": {
              "docs": "Additional permissions for the user.",
              "type": "list<string>",
            },
          },
        },
        "UserProperty": {
          "docs": undefined,
          "properties": {
            "name": {
              "docs": undefined,
              "type": "string",
            },
            "value": {
              "docs": undefined,
              "type": "string",
            },
          },
        },
        "UsersDto": {
          "docs": undefined,
          "properties": {
            "items": {
              "docs": "The users.",
              "type": "list<UserDto>",
            },
            "total": {
              "docs": "The total number of users.",
              "type": "integer",
            },
          },
        },
        "WebhookMethod": {
          "docs": "",
          "enum": [
            {
              "name": "POST",
              "value": "POST",
            },
            {
              "name": "PUT",
              "value": "PUT",
            },
            {
              "name": "GET",
              "value": "GET",
            },
            {
              "name": "DELETE",
              "value": "DELETE",
            },
            {
              "name": "PATCH",
              "value": "PATCH",
            },
          ],
        },
        "WebhookRuleActionDto": {
          "docs": undefined,
          "properties": {
            "headers": {
              "docs": "The message headers in the format '[Key]=[Value]', one entry per line.",
              "type": "string",
            },
            "method": {
              "docs": undefined,
              "type": "WebhookMethod",
            },
            "payload": {
              "docs": "Leave it empty to use the full event as body.",
              "type": "string",
            },
            "payloadType": {
              "docs": "The mime type of the payload.",
              "type": "string",
            },
            "sharedSecret": {
              "docs": "The shared secret that is used to calculate the payload signature.",
              "type": "string",
            },
            "url": {
              "docs": "The url to the webhook.",
              "type": "string",
            },
          },
        },
        "WorkflowDto": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": "The workflow id.",
              "type": "optional<string>",
            },
            "initial": {
              "docs": "The initial step.",
              "type": "optional<string>",
            },
            "name": {
              "docs": "The name of the workflow.",
              "type": "optional<string>",
            },
            "schemaIds": {
              "docs": "The schema ids.",
              "type": "optional<list<string>>",
            },
            "steps": {
              "docs": "The workflow steps.",
              "type": "optional<map<string, optional<WorkflowStepDto>>>",
            },
          },
        },
        "WorkflowStepDto": {
          "docs": undefined,
          "properties": {
            "color": {
              "docs": "The optional color.",
              "type": "optional<string>",
            },
            "noUpdate": {
              "docs": "Indicates if updates should not be allowed.",
              "type": "optional<boolean>",
            },
            "noUpdateExpression": {
              "docs": "Optional expression that must evaluate to true when you want to prevent updates.",
              "type": "optional<string>",
            },
            "noUpdateRoles": {
              "docs": "Optional list of roles to restrict the updates for users with these roles.",
              "type": "optional<list<string>>",
            },
            "transitions": {
              "docs": "The transitions.",
              "type": "optional<map<string, optional<WorkflowTransitionDto>>>",
            },
            "validate": {
              "docs": "True if the content should be validated when moving to this step.",
              "type": "optional<boolean>",
            },
          },
        },
        "WorkflowTransitionDto": {
          "docs": undefined,
          "properties": {
            "expression": {
              "docs": "The optional expression.",
              "type": "optional<string>",
            },
            "roles": {
              "docs": "The optional restricted role.",
              "type": "optional<list<string>>",
            },
          },
        },
        "WorkflowsDto": {
          "docs": undefined,
          "properties": {
            "errors": {
              "docs": "The errros that should be fixed.",
              "type": "list<string>",
            },
            "items": {
              "docs": "The workflow.",
              "type": "list<WorkflowDto>",
            },
          },
        },
      },
    },
    "apps.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "deleteApp": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "DELETE",
            "path": "/api/apps/{app}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app to delete.",
                "variable": "$appName",
              },
            },
          },
          "deleteClient": {
            "auth": true,
            "docs": "The application that uses this client credentials cannot access the API after it has been revoked.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "DELETE",
            "path": "/api/apps/{app}/clients/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the client that must be deleted.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Client deleted.",
              "type": "root.ClientsDto",
            },
          },
          "deleteContributor": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "DELETE",
            "path": "/api/apps/{app}/contributors/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the contributor.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Contributor removed.",
              "type": "root.ContributorsDto",
            },
          },
          "deleteImage": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "DELETE",
            "path": "/api/apps/{app}/image",
            "path-parameters": {
              "app": {
                "docs": "The name of the app to update.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "App image removed.",
              "type": "root.AppDto",
            },
          },
          "deleteLanguage": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "DELETE",
            "path": "/api/apps/{app}/languages/{language}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "language": {
                "docs": "The language to delete from the app.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Language deleted.",
              "type": "root.AppLanguagesDto",
            },
          },
          "deleteMyself": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "DELETE",
            "path": "/api/apps/{app}/contributors/me",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "Contributor removed.",
              "type": "root.ContributorsDto",
            },
          },
          "deleteRole": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "DELETE",
            "path": "/api/apps/{app}/roles/{roleName}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "roleName": {
                "docs": "The name of the role.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Role deleted.",
              "type": "root.RolesDto",
            },
          },
          "deleteWorkflow": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "DELETE",
            "path": "/api/apps/{app}/workflows/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the workflow to update.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Workflow deleted.",
              "type": "root.WorkflowsDto",
            },
          },
          "getApp": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/apps/{app}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "Apps returned.",
              "type": "root.AppDto",
            },
          },
          "getApps": {
            "auth": true,
            "docs": "You can only retrieve the list of apps when you are authenticated as a user (OpenID implicit flow).
You will retrieve all apps, where you are assigned as a contributor.",
            "errors": [
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/apps",
            "response": {
              "docs": "Apps returned.",
              "type": "list<root.AppDto>",
            },
          },
          "getAssetScripts": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/apps/{app}/assets/scripts",
            "path-parameters": {
              "app": {
                "docs": "The name of the app to get the asset scripts for.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "Asset scripts returned.",
              "type": "root.AssetScriptsDto",
            },
          },
          "getClients": {
            "auth": true,
            "docs": "Gets all configured clients for the app with the specified name.",
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/apps/{app}/clients",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "Clients returned.",
              "type": "root.ClientsDto",
            },
          },
          "getContributors": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/apps/{app}/contributors",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "Contributors returned.",
              "type": "root.ContributorsDto",
            },
          },
          "getImage": {
            "auth": true,
            "docs": undefined,
            "errors": [],
            "method": "GET",
            "path": "/api/apps/{app}/image",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "App image found and content or (resized) image returned.",
              "type": "file",
            },
          },
          "getLanguages": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/apps/{app}/languages",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "Languages returned.",
              "type": "root.AppLanguagesDto",
            },
          },
          "getPermissions": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/apps/{app}/roles/permissions",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "App permissions returned.",
              "type": "list<string>",
            },
          },
          "getRoles": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/apps/{app}/roles",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "Roles returned.",
              "type": "root.RolesDto",
            },
          },
          "getSettings": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/apps/{app}/settings",
            "path-parameters": {
              "app": {
                "docs": "The name of the app to get the settings for.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "App settings returned.",
              "type": "root.AppSettingsDto",
            },
          },
          "getTeamApps": {
            "auth": true,
            "docs": "You can only retrieve the list of apps when you are authenticated as a user (OpenID implicit flow).
You will retrieve all apps, where you are assigned as a contributor.",
            "errors": [
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/teams/{team}/apps",
            "path-parameters": {
              "team": {
                "docs": "The ID of the team.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Apps returned.",
              "type": "list<root.AppDto>",
            },
          },
          "getWorkflows": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/apps/{app}/workflows",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "Workflows returned.",
              "type": "root.WorkflowsDto",
            },
          },
          "postApp": {
            "auth": true,
            "docs": "You can only create an app when you are authenticated as a user (OpenID implicit flow).
You will be assigned as owner of the new app automatically.",
            "errors": [
              "root.BadRequestError",
              "root.ConflictError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/api/apps",
            "request": {
              "body": {
                "properties": {
                  "name": {
                    "docs": "The name of the app.",
                    "type": "string",
                  },
                  "template": {
                    "docs": "Initialize the app with the inbuilt template.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "CreateAppDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "App created.",
              "type": "root.AppDto",
            },
          },
          "postClient": {
            "auth": true,
            "docs": "Create a new client for the app with the specified name.
The client secret is auto generated on the server and returned. The client does not expire, the access token is valid for 30 days.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/api/apps/{app}/clients",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The ID of the client.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "CreateClientDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Client created.",
              "type": "root.ClientsDto",
            },
          },
          "postContributor": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/api/apps/{app}/contributors",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.AssignContributorDto",
              },
            },
            "response": {
              "docs": "Contributor assigned to app.",
              "type": "root.ContributorsDto",
            },
          },
          "postLanguage": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/api/apps/{app}/languages",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "language": {
                    "docs": "The language to add.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "AddLanguageDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Language created.",
              "type": "root.AppLanguagesDto",
            },
          },
          "postRole": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/api/apps/{app}/roles",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "name": {
                    "docs": "The role name.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "AddRoleDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Role created.",
              "type": "root.RolesDto",
            },
          },
          "postWorkflow": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/api/apps/{app}/workflows",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "name": {
                    "docs": "The name of the workflow.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "AddWorkflowDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Workflow created.",
              "type": "root.WorkflowsDto",
            },
          },
          "putApp": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/apps/{app}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app to update.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "description": {
                    "docs": "The optional description of your app.",
                    "type": "optional<string>",
                  },
                  "label": {
                    "docs": "The optional label of your app.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateAppDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "App updated.",
              "type": "root.AppDto",
            },
          },
          "putAppTeam": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/apps/{app}/team",
            "path-parameters": {
              "app": {
                "docs": "The name of the app to update.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "teamId": {
                    "docs": "The ID of the team.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "TransferToTeamDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "App transferred.",
              "type": "root.AppDto",
            },
          },
          "putAssetScripts": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/apps/{app}/assets/scripts",
            "path-parameters": {
              "app": {
                "docs": "The name of the app to update.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "annotate": {
                    "docs": "The script that is executed when annotating a content.",
                    "type": "optional<string>",
                  },
                  "create": {
                    "docs": "The script that is executed when creating an asset.",
                    "type": "optional<string>",
                  },
                  "delete": {
                    "docs": "The script that is executed when deleting a content.",
                    "type": "optional<string>",
                  },
                  "move": {
                    "docs": "The script that is executed when moving a content.",
                    "type": "optional<string>",
                  },
                  "query": {
                    "docs": "The script that is executed for each asset when querying assets.",
                    "type": "optional<string>",
                  },
                  "queryPre": {
                    "docs": "The script that is executed for all assets when querying assets.",
                    "type": "optional<string>",
                  },
                  "update": {
                    "docs": "The script that is executed when updating a content.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateAssetScriptsDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Asset scripts updated.",
              "type": "root.AssetScriptsDto",
            },
          },
          "putClient": {
            "auth": true,
            "docs": "Only the display name can be changed, create a new client if necessary.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/apps/{app}/clients/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the client that must be updated.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "allowAnonymous": {
                    "docs": "True to allow anonymous access without an access token for this client.",
                    "type": "optional<boolean>",
                  },
                  "apiCallsLimit": {
                    "docs": "The number of allowed api calls per month for this client.",
                    "type": "optional<integer>",
                  },
                  "apiTrafficLimit": {
                    "docs": "The number of allowed api traffic bytes per month for this client.",
                    "type": "optional<integer>",
                  },
                  "name": {
                    "docs": "The new display name of the client.",
                    "type": "optional<string>",
                  },
                  "role": {
                    "docs": "The role of the client.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateClientDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Client updated.",
              "type": "root.ClientsDto",
            },
          },
          "putLanguage": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/apps/{app}/languages/{language}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "language": {
                "docs": "The language to update.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "fallback": {
                    "docs": "Optional fallback languages.",
                    "type": "optional<list<string>>",
                  },
                  "isMaster": {
                    "docs": "Set the value to true to make the language the master.",
                    "type": "optional<boolean>",
                  },
                  "isOptional": {
                    "docs": "Set the value to true to make the language optional.",
                    "type": "optional<boolean>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateLanguageDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Language updated.",
              "type": "root.AppLanguagesDto",
            },
          },
          "putRole": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/apps/{app}/roles/{roleName}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "roleName": {
                "docs": "The name of the role to be updated.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "permissions": {
                    "docs": "Associated list of permissions.",
                    "type": "list<string>",
                  },
                  "properties": {
                    "docs": "Associated list of UI properties.",
                    "type": "optional<map<string, unknown>>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateRoleDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Role updated.",
              "type": "root.RolesDto",
            },
          },
          "putSettings": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/apps/{app}/settings",
            "path-parameters": {
              "app": {
                "docs": "The name of the app to update.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "editors": {
                    "docs": "The configured UI editors.",
                    "type": "list<root.EditorDto>",
                  },
                  "hideDateTimeModeButton": {
                    "docs": "Hide the datetime mode button.",
                    "type": "optional<boolean>",
                  },
                  "hideScheduler": {
                    "docs": "Hide the scheduler for content items.",
                    "type": "optional<boolean>",
                  },
                  "patterns": {
                    "docs": "The configured app patterns.",
                    "type": "list<root.PatternDto>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateAppSettingsDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "App updated.",
              "type": "root.AppSettingsDto",
            },
          },
          "putWorkflow": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/apps/{app}/workflows/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the workflow to update.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "initial": {
                    "docs": "The initial step.",
                    "type": "string",
                  },
                  "name": {
                    "docs": "The name of the workflow.",
                    "type": "optional<string>",
                  },
                  "schemaIds": {
                    "docs": "The schema ids.",
                    "type": "optional<list<string>>",
                  },
                  "steps": {
                    "docs": "The workflow steps.",
                    "type": "map<string, root.WorkflowStepDto>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateWorkflowDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Workflow updated.",
              "type": "root.WorkflowsDto",
            },
          },
          "uploadImage": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/api/apps/{app}/image",
            "path-parameters": {
              "app": {
                "docs": "The name of the app to update.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "file": "file",
                },
              },
              "headers": undefined,
              "name": "AppsUploadImageRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "App image uploaded.",
              "type": "root.AppDto",
            },
          },
        },
      },
    },
    "assets.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "bulkUpdateAssets": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/api/apps/{app}/assets/bulk",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "checkReferrers": {
                    "docs": "True to check referrers of deleted assets.",
                    "type": "optional<boolean>",
                  },
                  "doNotScript": {
                    "docs": "True to turn off scripting for faster inserts. Default: true.",
                    "type": "optional<boolean>",
                  },
                  "jobs": {
                    "docs": "The contents to update or insert.",
                    "type": "optional<list<root.BulkUpdateAssetsJobDto>>",
                  },
                  "optimizeValidation": {
                    "docs": "True to turn off costly validation: Folder checks. Default: true.",
                    "type": "optional<boolean>",
                  },
                },
              },
              "headers": undefined,
              "name": "BulkUpdateAssetsDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Assets created, update or delete.",
              "type": "list<root.BulkResultDto>",
            },
          },
          "deleteAsset": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "DELETE",
            "path": "/api/apps/{app}/assets/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the asset to delete.",
                "type": "string",
              },
            },
            "request": {
              "name": "AssetsDeleteAssetRequest",
              "query-parameters": {
                "checkReferrers": {
                  "allow-multiple": undefined,
                  "docs": "True to check referrers of this asset.",
                  "type": "optional<boolean>",
                },
                "permanent": {
                  "allow-multiple": undefined,
                  "docs": "True to delete the asset permanently.",
                  "type": "optional<boolean>",
                },
              },
            },
          },
          "deleteAssetFolder": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "DELETE",
            "path": "/api/apps/{app}/assets/folders/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the asset folder to delete.",
                "type": "string",
              },
            },
          },
          "getAsset": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/apps/{app}/assets/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the asset to retrieve.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Asset found.",
              "type": "root.AssetDto",
            },
          },
          "getAssetContent": {
            "auth": true,
            "docs": undefined,
            "errors": [],
            "method": "GET",
            "path": "/api/assets/{id}",
            "path-parameters": {
              "id": {
                "docs": "The ID of the asset.",
                "type": "string",
              },
            },
            "request": {
              "name": "AssetsGetAssetContentRequest",
              "query-parameters": {
                "auto": {
                  "allow-multiple": undefined,
                  "docs": "True to use auto format.",
                  "type": "optional<boolean>",
                },
                "bg": {
                  "allow-multiple": undefined,
                  "docs": "Optional background color.",
                  "type": "optional<string>",
                },
                "cache": {
                  "allow-multiple": undefined,
                  "docs": "The cache duration in seconds.",
                  "type": "optional<integer>",
                },
                "download": {
                  "allow-multiple": undefined,
                  "docs": "Set it to 0 to prevent download.",
                  "type": "optional<integer>",
                },
                "focusX": {
                  "allow-multiple": undefined,
                  "docs": "Override the y focus point.",
                  "type": "optional<double>",
                },
                "focusY": {
                  "allow-multiple": undefined,
                  "docs": "Override the x focus point.",
                  "type": "optional<double>",
                },
                "force": {
                  "allow-multiple": undefined,
                  "docs": "True to force a new resize even if it already stored.",
                  "type": "optional<boolean>",
                },
                "format": {
                  "allow-multiple": undefined,
                  "docs": "True to force a new resize even if it already stored.",
                  "type": "optional<root.ImageFormat>",
                },
                "height": {
                  "allow-multiple": undefined,
                  "docs": "The target height of the asset, if it is an image.",
                  "type": "optional<integer>",
                },
                "mode": {
                  "allow-multiple": undefined,
                  "docs": "The resize mode when the width and height is defined.",
                  "type": "optional<root.ResizeMode>",
                },
                "nofocus": {
                  "allow-multiple": undefined,
                  "docs": "True to ignore the asset focus point if any.",
                  "type": "optional<boolean>",
                },
                "quality": {
                  "allow-multiple": undefined,
                  "docs": "Optional image quality, it is is an jpeg image.",
                  "type": "optional<integer>",
                },
                "version": {
                  "allow-multiple": undefined,
                  "docs": "The optional version of the asset.",
                  "type": "optional<integer>",
                },
                "width": {
                  "allow-multiple": undefined,
                  "docs": "The target width of the asset, if it is an image.",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Asset found and content or (resized) image returned.",
              "type": "file",
            },
          },
          "getAssetContentBySlug": {
            "auth": true,
            "docs": undefined,
            "errors": [],
            "method": "GET",
            "path": "/api/assets/{app}/{idOrSlug}/{more}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "idOrSlug": {
                "docs": "The id or slug of the asset.",
                "type": "string",
              },
              "more": {
                "docs": "Optional suffix that can be used to seo-optimize the link to the image Has not effect.",
                "type": "optional<string>",
              },
            },
            "request": {
              "name": "AssetsGetAssetContentBySlugRequest",
              "query-parameters": {
                "auto": {
                  "allow-multiple": undefined,
                  "docs": "True to use auto format.",
                  "type": "optional<boolean>",
                },
                "bg": {
                  "allow-multiple": undefined,
                  "docs": "Optional background color.",
                  "type": "optional<string>",
                },
                "cache": {
                  "allow-multiple": undefined,
                  "docs": "The cache duration in seconds.",
                  "type": "optional<integer>",
                },
                "download": {
                  "allow-multiple": undefined,
                  "docs": "Set it to 0 to prevent download.",
                  "type": "optional<integer>",
                },
                "focusX": {
                  "allow-multiple": undefined,
                  "docs": "Override the y focus point.",
                  "type": "optional<double>",
                },
                "focusY": {
                  "allow-multiple": undefined,
                  "docs": "Override the x focus point.",
                  "type": "optional<double>",
                },
                "force": {
                  "allow-multiple": undefined,
                  "docs": "True to force a new resize even if it already stored.",
                  "type": "optional<boolean>",
                },
                "format": {
                  "allow-multiple": undefined,
                  "docs": "True to force a new resize even if it already stored.",
                  "type": "optional<root.ImageFormat>",
                },
                "height": {
                  "allow-multiple": undefined,
                  "docs": "The target height of the asset, if it is an image.",
                  "type": "optional<integer>",
                },
                "mode": {
                  "allow-multiple": undefined,
                  "docs": "The resize mode when the width and height is defined.",
                  "type": "optional<root.ResizeMode>",
                },
                "nofocus": {
                  "allow-multiple": undefined,
                  "docs": "True to ignore the asset focus point if any.",
                  "type": "optional<boolean>",
                },
                "quality": {
                  "allow-multiple": undefined,
                  "docs": "Optional image quality, it is is an jpeg image.",
                  "type": "optional<integer>",
                },
                "version": {
                  "allow-multiple": undefined,
                  "docs": "The optional version of the asset.",
                  "type": "optional<integer>",
                },
                "width": {
                  "allow-multiple": undefined,
                  "docs": "The target width of the asset, if it is an image.",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Asset found and content or (resized) image returned.",
              "type": "file",
            },
          },
          "getAssetFolders": {
            "auth": true,
            "docs": "Get all asset folders for the app.",
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/apps/{app}/assets/folders",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "name": "AssetsGetAssetFoldersRequest",
              "query-parameters": {
                "parentId": {
                  "allow-multiple": undefined,
                  "docs": "The optional parent folder id.",
                  "type": "optional<string>",
                },
                "scope": {
                  "allow-multiple": undefined,
                  "docs": "The scope of the query.",
                  "type": "optional<root.AssetFolderScope>",
                },
              },
            },
            "response": {
              "docs": "Asset folders returned.",
              "type": "root.AssetFoldersDto",
            },
          },
          "getAssets": {
            "auth": true,
            "docs": "Get all assets for the app.",
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/apps/{app}/assets",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "name": "AssetsGetAssetsRequest",
              "query-parameters": {
                "$filter": {
                  "allow-multiple": undefined,
                  "docs": "Optional OData filter.",
                  "type": "optional<string>",
                },
                "$orderby": {
                  "allow-multiple": undefined,
                  "docs": "Optional OData order definition.",
                  "type": "optional<string>",
                },
                "$skip": {
                  "allow-multiple": undefined,
                  "docs": "Optional number of items to skip.",
                  "type": "optional<double>",
                },
                "$top": {
                  "allow-multiple": undefined,
                  "docs": "Optional number of items to take.",
                  "type": "optional<double>",
                },
                "ids": {
                  "allow-multiple": undefined,
                  "docs": "The optional asset ids.",
                  "type": "optional<string>",
                },
                "parentId": {
                  "allow-multiple": undefined,
                  "docs": "The optional parent folder id.",
                  "type": "optional<string>",
                },
                "q": {
                  "allow-multiple": undefined,
                  "docs": "The optional json query.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Assets returned.",
              "type": "root.AssetsDto",
            },
          },
          "getAssetsPost": {
            "auth": true,
            "docs": "Get all assets for the app.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/api/apps/{app}/assets/query",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.QueryDto",
              },
            },
            "response": {
              "docs": "Assets returned.",
              "type": "root.AssetsDto",
            },
          },
          "getTags": {
            "auth": true,
            "docs": "Get all tags for assets.",
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/apps/{app}/assets/tags",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "Assets tags returned.",
              "type": "map<string, integer>",
            },
          },
          "postAsset": {
            "auth": true,
            "docs": "You can only upload one file at a time. The mime type of the file is not calculated by Squidex and is required correctly.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.ContentTooLargeError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/api/apps/{app}/assets",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "file": "file",
                },
              },
              "headers": undefined,
              "name": "AssetsPostAssetRequest",
              "query-parameters": {
                "duplicate": {
                  "allow-multiple": undefined,
                  "docs": "True to duplicate the asset, event if the file has been uploaded.",
                  "type": "optional<boolean>",
                },
                "id": {
                  "allow-multiple": undefined,
                  "docs": "The optional custom asset id.",
                  "type": "optional<string>",
                },
                "parentId": {
                  "allow-multiple": undefined,
                  "docs": "The optional parent folder id.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Asset created.",
              "type": "root.AssetDto",
            },
          },
          "postAssetFolder": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/api/apps/{app}/assets/folders",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "folderName": {
                    "docs": "The name of the folder.",
                    "type": "string",
                  },
                  "parentId": {
                    "docs": "The ID of the parent folder.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "CreateAssetFolderDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Asset folder created.",
              "type": "root.AssetFolderDto",
            },
          },
          "postUpsertAsset": {
            "auth": true,
            "docs": "You can only upload one file at a time. The mime type of the file is not calculated by Squidex and is required correctly.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.ContentTooLargeError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/api/apps/{app}/assets/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The optional custom asset id.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "file": "file",
                },
              },
              "headers": undefined,
              "name": "AssetsPostUpsertAssetRequest",
              "query-parameters": {
                "duplicate": {
                  "allow-multiple": undefined,
                  "docs": "True to duplicate the asset, event if the file has been uploaded.",
                  "type": "optional<boolean>",
                },
                "parentId": {
                  "allow-multiple": undefined,
                  "docs": "The optional parent folder id.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Asset created or updated.",
              "type": "root.AssetDto",
            },
          },
          "putAsset": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/apps/{app}/assets/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the asset.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "fileName": {
                    "docs": "The new name of the asset.",
                    "type": "optional<string>",
                  },
                  "isProtected": {
                    "docs": "True, when the asset is not public.",
                    "type": "optional<boolean>",
                  },
                  "metadata": {
                    "docs": "The asset metadata.",
                    "type": "optional<map<string, unknown>>",
                  },
                  "slug": {
                    "docs": "The new slug of the asset.",
                    "type": "optional<string>",
                  },
                  "tags": {
                    "docs": "The new asset tags.",
                    "type": "optional<list<string>>",
                  },
                },
              },
              "headers": undefined,
              "name": "AnnotateAssetDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Asset updated.",
              "type": "root.AssetDto",
            },
          },
          "putAssetContent": {
            "auth": true,
            "docs": "Use multipart request to upload an asset.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.ContentTooLargeError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/apps/{app}/assets/{id}/content",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the asset.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "file": "file",
                },
              },
              "headers": undefined,
              "name": "AssetsPutAssetContentRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Asset updated.",
              "type": "root.AssetDto",
            },
          },
          "putAssetFolder": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/apps/{app}/assets/folders/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the asset folder.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "folderName": {
                    "docs": "The name of the folder.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "RenameAssetFolderDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Asset folder updated.",
              "type": "root.AssetFolderDto",
            },
          },
          "putAssetFolderParent": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/apps/{app}/assets/folders/{id}/parent",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the asset folder.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "parentId": {
                    "docs": "The parent folder id.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "MoveAssetFolderDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Asset folder moved.",
              "type": "root.AssetFolderDto",
            },
          },
          "putAssetParent": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/apps/{app}/assets/{id}/parent",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the asset.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "parentId": {
                    "docs": "The parent folder id.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "MoveAssetDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Asset moved.",
              "type": "root.AssetDto",
            },
          },
          "putTag": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/apps/{app}/assets/tags/{name}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "name": {
                "docs": "The tag to return.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "tagName": {
                    "docs": "The new name for the tag.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "RenameTagDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Asset tag renamed and new tags returned.",
              "type": "map<string, integer>",
            },
          },
        },
      },
    },
    "backups.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "deleteBackup": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "DELETE",
            "path": "/api/apps/{app}/backups/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the backup to delete.",
                "type": "string",
              },
            },
          },
          "getBackupContent": {
            "auth": true,
            "docs": undefined,
            "errors": [],
            "method": "GET",
            "path": "/api/apps/{app}/backups/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the backup.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Backup found and content returned.",
              "type": "file",
            },
          },
          "getBackupContentV2": {
            "auth": true,
            "docs": undefined,
            "errors": [],
            "method": "GET",
            "path": "/api/apps/backups/{id}",
            "path-parameters": {
              "id": {
                "docs": "The ID of the backup.",
                "type": "string",
              },
            },
            "request": {
              "name": "BackupsGetBackupContentV2Request",
              "query-parameters": {
                "app": {
                  "allow-multiple": undefined,
                  "docs": "The name of the app.",
                  "type": "optional<string>",
                },
                "appId": {
                  "allow-multiple": undefined,
                  "docs": "The ID of the app.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Backup found and content returned.",
              "type": "file",
            },
          },
          "getBackups": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/apps/{app}/backups",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "Backups returned.",
              "type": "root.BackupJobsDto",
            },
          },
          "getRestoreJob": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/apps/restore",
            "response": {
              "docs": "Status returned.",
              "type": "root.RestoreJobDto",
            },
          },
          "postBackup": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/api/apps/{app}/backups",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
          },
          "postRestoreJob": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/api/apps/restore",
            "request": {
              "body": {
                "properties": {
                  "name": {
                    "docs": "The name of the app.",
                    "type": "optional<string>",
                  },
                  "url": {
                    "docs": "The url to the restore file.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "RestoreRequestDto",
              "query-parameters": undefined,
            },
          },
        },
      },
    },
    "comments.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "deleteComment": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "DELETE",
            "path": "/api/apps/{app}/comments/{commentsId}/{commentId}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "commentId": {
                "docs": "The ID of the comment.",
                "type": "string",
              },
              "commentsId": {
                "docs": "The ID of the comments.",
                "type": "string",
              },
            },
          },
          "getComments": {
            "auth": true,
            "docs": "When passing in a version you can retrieve all updates since then.",
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/apps/{app}/comments/{commentsId}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "commentsId": {
                "docs": "The ID of the comments.",
                "type": "string",
              },
            },
            "request": {
              "name": "CommentsGetCommentsRequest",
              "query-parameters": {
                "version": {
                  "allow-multiple": undefined,
                  "docs": "The current version.",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Comments returned.",
              "type": "root.CommentsDto",
            },
          },
          "getWatchingUsers": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/apps/{app}/watching/{resource}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "resource": {
                "docs": "The path to the resource.",
                "type": "optional<string>",
              },
            },
            "response": {
              "docs": "Watching users returned.",
              "type": "list<string>",
            },
          },
          "postComment": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/api/apps/{app}/comments/{commentsId}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "commentsId": {
                "docs": "The ID of the comments.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.UpsertCommentDto",
              },
            },
            "response": {
              "docs": "Comment created.",
              "type": "root.CommentDto",
            },
          },
          "putComment": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/apps/{app}/comments/{commentsId}/{commentId}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "commentId": {
                "docs": "The ID of the comment.",
                "type": "string",
              },
              "commentsId": {
                "docs": "The ID of the comments.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.UpsertCommentDto",
              },
            },
          },
        },
      },
    },
    "contents.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "bulkUpdateContents": {
            "auth": true,
            "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/api/content/{app}/{schema}/bulk",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "checkReferrers": {
                    "docs": "True to check referrers of deleted contents.",
                    "type": "optional<boolean>",
                  },
                  "doNotScript": {
                    "docs": "True to turn off scripting for faster inserts. Default: true.",
                    "type": "optional<boolean>",
                  },
                  "doNotValidate": {
                    "docs": "True to turn off validation for faster inserts. Default: false.",
                    "type": "optional<boolean>",
                  },
                  "doNotValidateWorkflow": {
                    "docs": "True to turn off validation of workflow rules. Default: false.",
                    "type": "optional<boolean>",
                  },
                  "jobs": {
                    "docs": "The contents to update or insert.",
                    "type": "list<root.BulkUpdateContentsJobDto>",
                  },
                  "optimizeValidation": {
                    "docs": "True to turn off costly validation: Unique checks, asset checks and reference checks. Default: true.",
                    "type": "optional<boolean>",
                  },
                  "publish": {
                    "docs": "True to automatically publish the content.",
                    "type": "optional<boolean>",
                  },
                },
              },
              "headers": undefined,
              "name": "BulkUpdateContentsDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "",
              "type": "list<root.BulkResultDto>",
            },
          },
          "createDraft": {
            "auth": true,
            "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/api/content/{app}/{schema}/{id}/draft",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the content item to create the draft for.",
                "type": "string",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Content draft created.",
              "type": "root.ContentsDto",
            },
          },
          "deleteContent": {
            "auth": true,
            "docs": "You can create an generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "DELETE",
            "path": "/api/content/{app}/{schema}/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the content item to delete.",
                "type": "string",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "name": "ContentsDeleteContentRequest",
              "query-parameters": {
                "checkReferrers": {
                  "allow-multiple": undefined,
                  "docs": "True to check referrers of this content.",
                  "type": "optional<boolean>",
                },
                "permanent": {
                  "allow-multiple": undefined,
                  "docs": "True to delete the content permanently.",
                  "type": "optional<boolean>",
                },
              },
            },
          },
          "deleteContentStatus": {
            "auth": true,
            "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "DELETE",
            "path": "/api/content/{app}/{schema}/{id}/status",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the content item to cancel.",
                "type": "string",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Content status change cancelled.",
              "type": "root.ContentsDto",
            },
          },
          "deleteVersion": {
            "auth": true,
            "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "DELETE",
            "path": "/api/content/{app}/{schema}/{id}/draft",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the content item to delete the draft from.",
                "type": "string",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Content draft deleted.",
              "type": "root.ContentsDto",
            },
          },
          "getContent": {
            "auth": true,
            "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/content/{app}/{schema}/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the content to fetch.",
                "type": "string",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "name": "ContentsGetContentRequest",
              "query-parameters": {
                "version": {
                  "allow-multiple": undefined,
                  "docs": "The optional version.",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Content returned.",
              "type": "root.ContentDto",
            },
          },
          "getContentValidity": {
            "auth": true,
            "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/content/{app}/{schema}/{id}/validity",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the content to fetch.",
                "type": "string",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
          },
          "getContentVersion": {
            "auth": true,
            "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [],
            "method": "GET",
            "path": "/api/content/{app}/{schema}/{id}/{version}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the content to fetch.",
                "type": "string",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
              "version": {
                "docs": "The version fo the content to fetch.",
                "type": "integer",
              },
            },
            "response": {
              "docs": "Content version returned.",
              "type": "file",
            },
          },
          "getContents": {
            "auth": true,
            "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/content/{app}/{schema}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "name": "ContentsGetContentsRequest",
              "query-parameters": {
                "ids": {
                  "allow-multiple": undefined,
                  "docs": "The optional ids of the content to fetch.",
                  "type": "optional<string>",
                },
                "q": {
                  "allow-multiple": undefined,
                  "docs": "The optional json query.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Contents returned.",
              "type": "root.ContentsDto",
            },
          },
          "getContentsPost": {
            "auth": true,
            "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/api/content/{app}/{schema}/query",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.QueryDto",
              },
            },
            "response": {
              "docs": "Contents returned.",
              "type": "root.ContentsDto",
            },
          },
          "getReferences": {
            "auth": true,
            "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/content/{app}/{schema}/{id}/references",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the content to fetch.",
                "type": "string",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "name": "ContentsGetReferencesRequest",
              "query-parameters": {
                "q": {
                  "allow-multiple": undefined,
                  "docs": "The optional json query.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Contents returned.",
              "type": "root.ContentsDto",
            },
          },
          "getReferencing": {
            "auth": true,
            "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/content/{app}/{schema}/{id}/referencing",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the content to fetch.",
                "type": "string",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "name": "ContentsGetReferencingRequest",
              "query-parameters": {
                "q": {
                  "allow-multiple": undefined,
                  "docs": "The optional json query.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Content returned.",
              "type": "root.ContentsDto",
            },
          },
          "patchContent": {
            "auth": true,
            "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PATCH",
            "path": "/api/content/{app}/{schema}/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the content item to patch.",
                "type": "string",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "map<string, root.ContentFieldData>",
              },
            },
            "response": {
              "docs": "Content patched.",
              "type": "root.ContentsDto",
            },
          },
          "postContent": {
            "auth": true,
            "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/api/content/{app}/{schema}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "map<string, root.ContentFieldData>",
              },
              "name": "ContentsPostContentRequest",
              "query-parameters": {
                "id": {
                  "allow-multiple": undefined,
                  "docs": "The optional custom content id.",
                  "type": "optional<string>",
                },
                "publish": {
                  "allow-multiple": undefined,
                  "docs": "True to automatically publish the content.",
                  "type": "optional<boolean>",
                },
                "status": {
                  "allow-multiple": undefined,
                  "docs": "The initial status.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Content created.",
              "type": "root.ContentsDto",
            },
          },
          "postContents": {
            "auth": true,
            "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/api/content/{app}/{schema}/import",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "datas": {
                    "docs": "The data to import.",
                    "type": "list<root.ContentData>",
                  },
                  "doNotScript": {
                    "docs": "True to turn off scripting for faster inserts. Default: true.",
                    "type": "optional<boolean>",
                  },
                  "optimizeValidation": {
                    "docs": "True to turn off costly validation: Unique checks, asset checks and reference checks. Default: true.",
                    "type": "optional<boolean>",
                  },
                  "publish": {
                    "docs": "True to automatically publish the content.",
                    "type": "optional<boolean>",
                  },
                },
              },
              "headers": undefined,
              "name": "ImportContentsDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Contents created.",
              "type": "list<root.BulkResultDto>",
            },
          },
          "postUpsertContent": {
            "auth": true,
            "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/api/content/{app}/{schema}/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the content item to update.",
                "type": "string",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "map<string, root.ContentFieldData>",
              },
              "name": "ContentsPostUpsertContentRequest",
              "query-parameters": {
                "patch": {
                  "allow-multiple": undefined,
                  "docs": "Makes the update as patch.",
                  "type": "optional<boolean>",
                },
                "publish": {
                  "allow-multiple": undefined,
                  "docs": "True to automatically publish the content.",
                  "type": "optional<boolean>",
                },
                "status": {
                  "allow-multiple": undefined,
                  "docs": "The initial status.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Content created or updated.",
              "type": "root.ContentsDto",
            },
          },
          "putContent": {
            "auth": true,
            "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/content/{app}/{schema}/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the content item to update.",
                "type": "string",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "map<string, root.ContentFieldData>",
              },
            },
            "response": {
              "docs": "Content updated.",
              "type": "root.ContentsDto",
            },
          },
          "putContentStatus": {
            "auth": true,
            "docs": "You can read the generated documentation for your app at /api/content/{appName}/docs.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/content/{app}/{schema}/{id}/status",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the content item to change.",
                "type": "string",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "checkReferrers": {
                    "docs": "True to check referrers of this content.",
                    "type": "optional<boolean>",
                  },
                  "dueTime": {
                    "docs": "The due time.",
                    "type": "optional<string>",
                  },
                  "status": {
                    "docs": "The new status.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "ChangeStatusDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Content status changed.",
              "type": "root.ContentsDto",
            },
          },
        },
      },
    },
    "diagnostics.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "getDump": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.InternalServerError",
              "root.NotImplementedError",
            ],
            "method": "GET",
            "path": "/api/diagnostics/dump",
          },
          "getGCDump": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.InternalServerError",
              "root.NotImplementedError",
            ],
            "method": "GET",
            "path": "/api/diagnostics/gcdump",
          },
        },
      },
    },
    "eventConsumers.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "getEventConsumers": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/event-consumers",
            "response": {
              "docs": "Event consumers returned.",
              "type": "root.EventConsumersDto",
            },
          },
          "resetEventConsumer": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/event-consumers/{consumerName}/reset",
            "path-parameters": {
              "consumerName": {
                "docs": "The name of the event consumer.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Event consumer resetted asynchronously.",
              "type": "root.EventConsumerDto",
            },
          },
          "startEventConsumer": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/event-consumers/{consumerName}/start",
            "path-parameters": {
              "consumerName": {
                "docs": "The name of the event consumer.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Event consumer started asynchronously.",
              "type": "root.EventConsumerDto",
            },
          },
          "stopEventConsumer": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/event-consumers/{consumerName}/stop",
            "path-parameters": {
              "consumerName": {
                "docs": "The name of the event consumer.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Event consumer stopped asynchronously.",
              "type": "root.EventConsumerDto",
            },
          },
        },
      },
    },
    "history.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "getAppHistory": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/apps/{app}/history",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "name": "HistoryGetAppHistoryRequest",
              "query-parameters": {
                "channel": {
                  "allow-multiple": undefined,
                  "docs": "The name of the channel.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Events returned.",
              "type": "list<root.HistoryEventDto>",
            },
          },
          "getTeamHistory": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/teams/{team}/history",
            "path-parameters": {
              "team": {
                "docs": "The ID of the team.",
                "type": "string",
              },
            },
            "request": {
              "name": "HistoryGetTeamHistoryRequest",
              "query-parameters": {
                "channel": {
                  "allow-multiple": undefined,
                  "docs": "The name of the channel.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Events returned.",
              "type": "list<root.HistoryEventDto>",
            },
          },
        },
      },
    },
    "languages.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "getLanguages": {
            "auth": true,
            "docs": "Provide a list of supported language codes, following the ISO2Code standard.",
            "errors": [
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/languages",
            "response": {
              "docs": "Supported language codes returned.",
              "type": "list<root.LanguageDto>",
            },
          },
        },
      },
    },
    "news.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "getNews": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/news/features",
            "request": {
              "name": "NewsGetNewsRequest",
              "query-parameters": {
                "version": {
                  "allow-multiple": undefined,
                  "docs": "The latest received version.",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Latest features returned.",
              "type": "root.FeaturesDto",
            },
          },
        },
      },
    },
    "notifications.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "deleteComment": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "DELETE",
            "path": "/api/users/{userId}/notifications/{commentId}",
            "path-parameters": {
              "commentId": {
                "docs": "The ID of the comment.",
                "type": "string",
              },
              "userId": {
                "docs": "The user id.",
                "type": "string",
              },
            },
          },
          "getNotifications": {
            "auth": true,
            "docs": "When passing in a version you can retrieve all updates since then.",
            "errors": [
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/users/{userId}/notifications",
            "path-parameters": {
              "userId": {
                "docs": "The user id.",
                "type": "string",
              },
            },
            "request": {
              "name": "NotificationsGetNotificationsRequest",
              "query-parameters": {
                "version": {
                  "allow-multiple": undefined,
                  "docs": "The current version.",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "All comments returned.",
              "type": "root.CommentsDto",
            },
          },
        },
      },
    },
    "ping.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "getAppPing": {
            "auth": true,
            "docs": "Can be used to test, if the Squidex API is alive and responding.",
            "errors": [
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/ping/{app}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
          },
          "getInfo": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/info",
            "response": {
              "docs": "Infos returned.",
              "type": "root.ExposedValues",
            },
          },
          "getPing": {
            "auth": true,
            "docs": "Can be used to test, if the Squidex API is alive and responding.",
            "errors": [
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/ping",
          },
        },
      },
    },
    "plans.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "getPlans": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/apps/{app}/plans",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "App plan information returned.",
              "type": "root.PlansDto",
            },
          },
          "getTeamPlans": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/teams/{team}/plans",
            "path-parameters": {
              "team": {
                "docs": "The name of the team.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Team plan information returned.",
              "type": "root.PlansDto",
            },
          },
          "putPlan": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/apps/{app}/plan",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.ChangePlanDto",
              },
            },
            "response": {
              "docs": "Plan changed or redirect url returned.",
              "type": "root.PlanChangedDto",
            },
          },
          "putTeamPlan": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/teams/{team}/plan",
            "path-parameters": {
              "team": {
                "docs": "The name of the team.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.ChangePlanDto",
              },
            },
            "response": {
              "docs": "Plan changed or redirect url returned.",
              "type": "root.PlanChangedDto",
            },
          },
        },
      },
    },
    "rules.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "deleteEvent": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "DELETE",
            "path": "/api/apps/{app}/rules/events/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The event to enqueue.",
                "type": "string",
              },
            },
          },
          "deleteEvents": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.InternalServerError",
            ],
            "method": "DELETE",
            "path": "/api/apps/{app}/rules/events",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
          },
          "deleteRule": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "DELETE",
            "path": "/api/apps/{app}/rules/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the rule to delete.",
                "type": "string",
              },
            },
          },
          "deleteRuleEvents": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.InternalServerError",
            ],
            "method": "DELETE",
            "path": "/api/apps/{app}/rules/{id}/events",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the rule to cancel.",
                "type": "string",
              },
            },
          },
          "deleteRuleRun": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.InternalServerError",
            ],
            "method": "DELETE",
            "path": "/api/apps/{app}/rules/run",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
          },
          "disableRule": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/apps/{app}/rules/{id}/disable",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the rule to disable.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Rule disabled.",
              "type": "root.RuleDto",
            },
          },
          "enableRule": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/apps/{app}/rules/{id}/enable",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the rule to enable.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Rule enabled.",
              "type": "root.RuleDto",
            },
          },
          "getActions": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/rules/actions",
            "response": {
              "docs": "Rule actions returned.",
              "type": "map<string, root.RuleElementDto>",
            },
          },
          "getEventSchema": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/rules/eventtypes/{type}",
            "path-parameters": {
              "type": {
                "docs": "The type name of the event.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Rule event type found.",
              "type": "unknown",
            },
          },
          "getEventTypes": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/rules/eventtypes",
            "response": {
              "docs": "Rule events returned.",
              "type": "list<string>",
            },
          },
          "getEvents": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/apps/{app}/rules/events",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "name": "RulesGetEventsRequest",
              "query-parameters": {
                "ruleId": {
                  "allow-multiple": undefined,
                  "docs": "The optional rule id to filter to events.",
                  "type": "optional<string>",
                },
                "skip": {
                  "allow-multiple": undefined,
                  "docs": "The number of events to skip.",
                  "type": "optional<integer>",
                },
                "take": {
                  "allow-multiple": undefined,
                  "docs": "The number of events to take.",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Rule events returned.",
              "type": "root.RuleEventsDto",
            },
          },
          "getRules": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/apps/{app}/rules",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "Rules returned.",
              "type": "root.RulesDto",
            },
          },
          "postRule": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/api/apps/{app}/rules",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.CreateRuleDto",
              },
            },
            "response": {
              "docs": "Rule created.",
              "type": "root.RuleDto",
            },
          },
          "putEvent": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/apps/{app}/rules/events/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The event to enqueue.",
                "type": "string",
              },
            },
          },
          "putRule": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/apps/{app}/rules/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the rule to update.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "action": {
                    "docs": undefined,
                    "type": "optional<root.RuleActionDto>",
                  },
                  "isEnabled": {
                    "docs": "Enable or disable the rule.",
                    "type": "optional<boolean>",
                  },
                  "name": {
                    "docs": "Optional rule name.",
                    "type": "optional<string>",
                  },
                  "trigger": {
                    "docs": undefined,
                    "type": "optional<root.RuleTriggerDto>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateRuleDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Rule updated.",
              "type": "root.RuleDto",
            },
          },
          "putRuleRun": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/apps/{app}/rules/{id}/run",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the rule to run.",
                "type": "string",
              },
            },
            "request": {
              "name": "RulesPutRuleRunRequest",
              "query-parameters": {
                "fromSnapshots": {
                  "allow-multiple": undefined,
                  "docs": "Runs the rule from snapeshots if possible.",
                  "type": "optional<boolean>",
                },
              },
            },
          },
          "simulateGET": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/apps/{app}/rules/{id}/simulate",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the rule to simulate.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Rule simulated.",
              "type": "root.SimulatedRuleEventsDto",
            },
          },
          "simulatePOST": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/api/apps/{app}/rules/simulate",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.CreateRuleDto",
              },
            },
            "response": {
              "docs": "Rule simulated.",
              "type": "root.SimulatedRuleEventsDto",
            },
          },
          "triggerRule": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/apps/{app}/rules/{id}/trigger",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the rule to disable.",
                "type": "string",
              },
            },
          },
        },
      },
    },
    "schemas.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "deleteField": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "DELETE",
            "path": "/api/apps/{app}/schemas/{schema}/fields/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the field to disable.",
                "type": "integer",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema field deleted.",
              "type": "root.SchemaDto",
            },
          },
          "deleteNestedField": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "DELETE",
            "path": "/api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the field to disable.",
                "type": "integer",
              },
              "parentId": {
                "docs": "The parent field id.",
                "type": "integer",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema field deleted.",
              "type": "root.SchemaDto",
            },
          },
          "deleteSchema": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "DELETE",
            "path": "/api/apps/{app}/schemas/{schema}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema to delete.",
                "type": "string",
              },
            },
          },
          "disableField": {
            "auth": true,
            "docs": "A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/apps/{app}/schemas/{schema}/fields/{id}/disable",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the field to disable.",
                "type": "integer",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema field disabled.",
              "type": "root.SchemaDto",
            },
          },
          "disableNestedField": {
            "auth": true,
            "docs": "A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}/disable",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the field to disable.",
                "type": "integer",
              },
              "parentId": {
                "docs": "The parent field id.",
                "type": "integer",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema field disabled.",
              "type": "root.SchemaDto",
            },
          },
          "enableField": {
            "auth": true,
            "docs": "A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/apps/{app}/schemas/{schema}/fields/{id}/enable",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the field to enable.",
                "type": "integer",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema field enabled.",
              "type": "root.SchemaDto",
            },
          },
          "enableNestedField": {
            "auth": true,
            "docs": "A disabled field cannot not be edited in the squidex portal anymore, but will be part of the API response.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}/enable",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the field to enable.",
                "type": "integer",
              },
              "parentId": {
                "docs": "The parent field id.",
                "type": "integer",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema field enabled.",
              "type": "root.SchemaDto",
            },
          },
          "getSchema": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/apps/{app}/schemas/{schema}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema to retrieve.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema found.",
              "type": "root.SchemaDto",
            },
          },
          "getSchemas": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/apps/{app}/schemas",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "Schemas returned.",
              "type": "root.SchemasDto",
            },
          },
          "hideField": {
            "auth": true,
            "docs": "A hidden field is not part of the API response, but can still be edited in the portal.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/apps/{app}/schemas/{schema}/fields/{id}/hide",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the field to hide.",
                "type": "integer",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema field hidden.",
              "type": "root.SchemaDto",
            },
          },
          "hideNestedField": {
            "auth": true,
            "docs": "A hidden field is not part of the API response, but can still be edited in the portal.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}/hide",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the field to hide.",
                "type": "integer",
              },
              "parentId": {
                "docs": "The parent field id.",
                "type": "integer",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema field hidden.",
              "type": "root.SchemaDto",
            },
          },
          "lockField": {
            "auth": true,
            "docs": "A locked field cannot be updated or deleted.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/apps/{app}/schemas/{schema}/fields/{id}/lock",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the field to lock.",
                "type": "integer",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema field shown.",
              "type": "root.SchemaDto",
            },
          },
          "lockNestedField": {
            "auth": true,
            "docs": "A locked field cannot be edited or deleted.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}/lock",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the field to lock.",
                "type": "integer",
              },
              "parentId": {
                "docs": "The parent field id.",
                "type": "integer",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema field hidden.",
              "type": "root.SchemaDto",
            },
          },
          "postField": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.ConflictError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/api/apps/{app}/schemas/{schema}/fields",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.AddFieldDto",
              },
            },
            "response": {
              "docs": "Schema field created.",
              "type": "root.SchemaDto",
            },
          },
          "postNestedField": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.ConflictError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/api/apps/{app}/schemas/{schema}/fields/{parentId}/nested",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "parentId": {
                "docs": "The parent field id.",
                "type": "integer",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.AddFieldDto",
              },
            },
            "response": {
              "docs": "Schema field created.",
              "type": "root.SchemaDto",
            },
          },
          "postSchema": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ConflictError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/api/apps/{app}/schemas",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "isSingleton": {
                    "docs": "Set to true to allow a single content item only.",
                    "type": "boolean",
                  },
                  "name": {
                    "docs": "The name of the schema.",
                    "type": "string",
                  },
                  "type": {
                    "docs": undefined,
                    "type": "root.SchemaType",
                  },
                },
              },
              "headers": undefined,
              "name": "CreateSchemaDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Schema created.",
              "type": "root.SchemaDto",
            },
          },
          "publishSchema": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/apps/{app}/schemas/{schema}/publish",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema to publish.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema published.",
              "type": "root.SchemaDto",
            },
          },
          "putCategory": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/apps/{app}/schemas/{schema}/category",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "name": {
                    "docs": "The name of the category.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "ChangeCategoryDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Schema updated.",
              "type": "root.SchemaDto",
            },
          },
          "putField": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/apps/{app}/schemas/{schema}/fields/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the field to update.",
                "type": "integer",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.UpdateFieldDto",
              },
            },
            "response": {
              "docs": "Schema field updated.",
              "type": "root.SchemaDto",
            },
          },
          "putNestedField": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the field to update.",
                "type": "integer",
              },
              "parentId": {
                "docs": "The parent field id.",
                "type": "integer",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.UpdateFieldDto",
              },
            },
            "response": {
              "docs": "Schema field updated.",
              "type": "root.SchemaDto",
            },
          },
          "putNestedFieldOrdering": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/ordering",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "parentId": {
                "docs": "The parent field id.",
                "type": "integer",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.ReorderFieldsDto",
              },
            },
            "response": {
              "docs": "Schema fields reordered.",
              "type": "root.SchemaDto",
            },
          },
          "putPreviewUrls": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/apps/{app}/schemas/{schema}/preview-urls",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "map<string, string>",
              },
            },
            "response": {
              "docs": "Schema updated.",
              "type": "root.SchemaDto",
            },
          },
          "putRules": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/apps/{app}/schemas/{schema}/rules",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "fieldRules": {
                    "docs": "The field rules to configure.",
                    "type": "optional<list<root.FieldRuleDto>>",
                  },
                },
              },
              "headers": undefined,
              "name": "ConfigureFieldRulesDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Schema updated.",
              "type": "root.SchemaDto",
            },
          },
          "putSchema": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/apps/{app}/schemas/{schema}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "contentEditorUrl": {
                    "docs": "The url to the editor plugin.",
                    "type": "optional<string>",
                  },
                  "contentSidebarUrl": {
                    "docs": "The url to a the sidebar plugin for content items.",
                    "type": "optional<string>",
                  },
                  "contentsSidebarUrl": {
                    "docs": "The url to a the sidebar plugin for content lists.",
                    "type": "optional<string>",
                  },
                  "hints": {
                    "docs": "Hints to describe the schema.",
                    "type": "optional<string>",
                  },
                  "label": {
                    "docs": "Optional label for the editor.",
                    "type": "optional<string>",
                  },
                  "tags": {
                    "docs": "Tags for automation processes.",
                    "type": "optional<list<string>>",
                  },
                  "validateOnPublish": {
                    "docs": "True to validate the content items on publish.",
                    "type": "boolean",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateSchemaDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Schema updated.",
              "type": "root.SchemaDto",
            },
          },
          "putSchemaFieldOrdering": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/apps/{app}/schemas/{schema}/fields/ordering",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.ReorderFieldsDto",
              },
            },
            "response": {
              "docs": "Schema fields reordered.",
              "type": "root.SchemaDto",
            },
          },
          "putSchemaSync": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/apps/{app}/schemas/{schema}/sync",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "noFieldDeletion": {
                    "docs": "True, when fields should not be deleted.",
                    "type": "boolean",
                  },
                  "noFieldRecreation": {
                    "docs": "True, when fields with different types should not be recreated.",
                    "type": "boolean",
                  },
                },
              },
              "headers": undefined,
              "name": "SynchronizeSchemaDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Schema updated.",
              "type": "root.SchemaDto",
            },
          },
          "putSchemaUIFields": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/apps/{app}/schemas/{schema}/fields/ui",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "fieldsInLists": {
                    "docs": "The name of fields that are used in content lists.",
                    "type": "optional<list<string>>",
                  },
                  "fieldsInReferences": {
                    "docs": "The name of fields that are used in content references.",
                    "type": "optional<list<string>>",
                  },
                },
              },
              "headers": undefined,
              "name": "ConfigureUiFieldsDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Schema UI fields defined.",
              "type": "root.SchemaDto",
            },
          },
          "putScripts": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/apps/{app}/schemas/{schema}/scripts",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.SchemaScriptsDto",
              },
            },
            "response": {
              "docs": "Schema updated.",
              "type": "root.SchemaDto",
            },
          },
          "showField": {
            "auth": true,
            "docs": "A hidden field is not part of the API response, but can still be edited in the portal.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/apps/{app}/schemas/{schema}/fields/{id}/show",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the field to show.",
                "type": "integer",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema field shown.",
              "type": "root.SchemaDto",
            },
          },
          "showNestedField": {
            "auth": true,
            "docs": "A hidden field is not part of the API response, but can still be edited in the portal.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}/show",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "id": {
                "docs": "The ID of the field to show.",
                "type": "integer",
              },
              "parentId": {
                "docs": "The parent field id.",
                "type": "integer",
              },
              "schema": {
                "docs": "The name of the schema.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema field shown.",
              "type": "root.SchemaDto",
            },
          },
          "unpublishSchema": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/apps/{app}/schemas/{schema}/unpublish",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "schema": {
                "docs": "The name of the schema to unpublish.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema unpublished.",
              "type": "root.SchemaDto",
            },
          },
        },
      },
    },
    "search.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "getSearchResults": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/apps/{app}/search",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "name": "SearchGetSearchResultsRequest",
              "query-parameters": {
                "query": {
                  "allow-multiple": undefined,
                  "docs": "The search query.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Search results returned.",
              "type": "list<root.SearchResultDto>",
            },
          },
        },
      },
    },
    "statistics.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "getCurrentStorageSize": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/apps/{app}/usages/storage/today",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "Storage usage returned.",
              "type": "root.CurrentStorageDto",
            },
          },
          "getLog": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/apps/{app}/usages/log",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "response": {
              "docs": "Usage tracking results returned.",
              "type": "root.LogDownloadDto",
            },
          },
          "getStorageSizes": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/apps/{app}/usages/storage/{fromDate}/{toDate}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "fromDate": {
                "docs": "The from date.",
                "type": "string",
              },
              "toDate": {
                "docs": "The to date.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Storage usage returned.",
              "type": "list<root.StorageUsagePerDateDto>",
            },
          },
          "getStorageSizesForTeam": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/teams/{team}/usages/storage/{fromDate}/{toDate}",
            "path-parameters": {
              "fromDate": {
                "docs": "The from date.",
                "type": "string",
              },
              "team": {
                "docs": "The ID of the team.",
                "type": "string",
              },
              "toDate": {
                "docs": "The to date.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Storage usage returned.",
              "type": "list<root.StorageUsagePerDateDto>",
            },
          },
          "getTeamCurrentStorageSizeForTeam": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/teams/{team}/usages/storage/today",
            "path-parameters": {
              "team": {
                "docs": "The ID of the team.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Storage usage returned.",
              "type": "root.CurrentStorageDto",
            },
          },
          "getUsages": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/apps/{app}/usages/calls/{fromDate}/{toDate}",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
              "fromDate": {
                "docs": "The from date.",
                "type": "string",
              },
              "toDate": {
                "docs": "The to date.",
                "type": "string",
              },
            },
            "response": {
              "docs": "API call returned.",
              "type": "root.CallsUsageDtoDto",
            },
          },
          "getUsagesForTeam": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/teams/{team}/usages/calls/{fromDate}/{toDate}",
            "path-parameters": {
              "fromDate": {
                "docs": "The from date.",
                "type": "string",
              },
              "team": {
                "docs": "The name of the team.",
                "type": "string",
              },
              "toDate": {
                "docs": "The to date.",
                "type": "string",
              },
            },
            "response": {
              "docs": "API call returned.",
              "type": "root.CallsUsageDtoDto",
            },
          },
        },
      },
    },
    "teams.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "deleteContributor": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "DELETE",
            "path": "/api/teams/{team}/contributors/{id}",
            "path-parameters": {
              "id": {
                "docs": "The ID of the contributor.",
                "type": "string",
              },
              "team": {
                "docs": "The ID of the team.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Contributor removed.",
              "type": "root.ContributorsDto",
            },
          },
          "deleteMyself": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "DELETE",
            "path": "/api/teams/{team}/contributors/me",
            "path-parameters": {
              "team": {
                "docs": "The ID of the team.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Contributor removed.",
              "type": "root.ContributorsDto",
            },
          },
          "getContributors": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/teams/{team}/contributors",
            "path-parameters": {
              "team": {
                "docs": "The ID of the team.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Contributors returned.",
              "type": "root.ContributorsDto",
            },
          },
          "getTeam": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/teams/{team}",
            "path-parameters": {
              "team": {
                "docs": "The name of the team.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Teams returned.",
              "type": "root.TeamDto",
            },
          },
          "getTeams": {
            "auth": true,
            "docs": "You can only retrieve the list of teams when you are authenticated as a user (OpenID implicit flow).
You will retrieve all teams, where you are assigned as a contributor.",
            "errors": [
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/teams",
            "response": {
              "docs": "Teams returned.",
              "type": "list<root.TeamDto>",
            },
          },
          "postContributor": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/api/teams/{team}/contributors",
            "path-parameters": {
              "team": {
                "docs": "The ID of the team.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.AssignContributorDto",
              },
            },
            "response": {
              "docs": "Contributor assigned to team.",
              "type": "root.ContributorsDto",
            },
          },
          "postTeam": {
            "auth": true,
            "docs": "You can only create an team when you are authenticated as a user (OpenID implicit flow).
You will be assigned as owner of the new team automatically.",
            "errors": [
              "root.BadRequestError",
              "root.ConflictError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/api/teams",
            "request": {
              "body": {
                "properties": {
                  "name": {
                    "docs": "The name of the team.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "CreateTeamDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Team created.",
              "type": "root.TeamDto",
            },
          },
          "putTeam": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/teams/{team}",
            "path-parameters": {
              "team": {
                "docs": "The name of the team to update.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "name": {
                    "docs": "The name of the team.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateTeamDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Team updated.",
              "type": "root.TeamDto",
            },
          },
        },
      },
    },
    "templates.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "getTemplate": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/templates/{name}",
            "path-parameters": {
              "name": {
                "docs": "The name of the template.",
                "type": "string",
              },
            },
            "response": {
              "docs": "Template returned.",
              "type": "root.TemplateDetailsDto",
            },
          },
          "getTemplates": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/templates",
            "response": {
              "docs": "Templates returned.",
              "type": "root.TemplatesDto",
            },
          },
        },
      },
    },
    "translations.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "postTranslation": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/api/apps/{app}/translations",
            "path-parameters": {
              "app": {
                "docs": "The name of the app.",
                "variable": "$appName",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "sourceLanguage": {
                    "docs": "The optional source language.",
                    "type": "optional<string>",
                  },
                  "targetLanguage": {
                    "docs": "The target language.",
                    "type": "string",
                  },
                  "text": {
                    "docs": "The text to translate.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "TranslateDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Text translated.",
              "type": "root.TranslationDto",
            },
          },
        },
      },
    },
    "userManagement.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "deleteUser": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "DELETE",
            "path": "/api/user-management/{id}",
            "path-parameters": {
              "id": {
                "docs": "The ID of the user to delete.",
                "type": "string",
              },
            },
          },
          "getUser": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/user-management/{id}",
            "path-parameters": {
              "id": {
                "docs": "The ID of the user.",
                "type": "string",
              },
            },
            "response": {
              "docs": "User returned.",
              "type": "root.UserDto",
            },
          },
          "getUsers": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/user-management",
            "request": {
              "name": "UserManagementGetUsersRequest",
              "query-parameters": {
                "query": {
                  "allow-multiple": undefined,
                  "docs": "Optional query to search by email address or username.",
                  "type": "optional<string>",
                },
                "skip": {
                  "allow-multiple": undefined,
                  "docs": "The number of users to skip.",
                  "type": "optional<integer>",
                },
                "take": {
                  "allow-multiple": undefined,
                  "docs": "The number of users to return.",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Users returned.",
              "type": "root.UsersDto",
            },
          },
          "lockUser": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/user-management/{id}/lock",
            "path-parameters": {
              "id": {
                "docs": "The ID of the user to lock.",
                "type": "string",
              },
            },
            "response": {
              "docs": "User locked.",
              "type": "root.UserDto",
            },
          },
          "postUser": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/api/user-management",
            "request": {
              "body": {
                "properties": {
                  "displayName": {
                    "docs": "The display name (usually first name and last name) of the user.",
                    "type": "string",
                  },
                  "email": {
                    "docs": "The email of the user. Unique value.",
                    "type": "string",
                  },
                  "password": {
                    "docs": "The password of the user.",
                    "type": "string",
                  },
                  "permissions": {
                    "docs": "Additional permissions for the user.",
                    "type": "list<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "CreateUserDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "User created.",
              "type": "root.UserDto",
            },
          },
          "putUser": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/user-management/{id}",
            "path-parameters": {
              "id": {
                "docs": "The ID of the user.",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "displayName": {
                    "docs": "The display name (usually first name and last name) of the user.",
                    "type": "string",
                  },
                  "email": {
                    "docs": "The email of the user. Unique value.",
                    "type": "string",
                  },
                  "password": {
                    "docs": "The password of the user.",
                    "type": "optional<string>",
                  },
                  "permissions": {
                    "docs": "Additional permissions for the user.",
                    "type": "list<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateUserDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "User created.",
              "type": "root.UserDto",
            },
          },
          "unlockUser": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.BadRequestError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "PUT",
            "path": "/api/user-management/{id}/unlock",
            "path-parameters": {
              "id": {
                "docs": "The ID of the user to unlock.",
                "type": "string",
              },
            },
            "response": {
              "docs": "User unlocked.",
              "type": "root.UserDto",
            },
          },
        },
      },
    },
    "users.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "getUser": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/users/{id}",
            "path-parameters": {
              "id": {
                "docs": "The ID of the user (GUID).",
                "type": "string",
              },
            },
            "response": {
              "docs": "User found.",
              "type": "root.UserDto",
            },
          },
          "getUserPicture": {
            "auth": true,
            "docs": undefined,
            "errors": [],
            "method": "GET",
            "path": "/api/users/{id}/picture",
            "path-parameters": {
              "id": {
                "docs": "The ID of the user (GUID).",
                "type": "string",
              },
            },
            "response": {
              "docs": "User found and image or fallback returned.",
              "type": "file",
            },
          },
          "getUserResources": {
            "auth": true,
            "docs": undefined,
            "errors": [
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api",
            "response": {
              "docs": "User resources returned.",
              "type": "root.ResourcesDto",
            },
          },
          "getUsers": {
            "auth": true,
            "docs": "Search the user by query that contains the email address or the part of the email address.",
            "errors": [
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/api/users",
            "request": {
              "name": "UsersGetUsersRequest",
              "query-parameters": {
                "query": {
                  "allow-multiple": undefined,
                  "docs": "The query to search the user by email address. Case invariant.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Users returned.",
              "type": "list<root.UserDto>",
            },
          },
        },
      },
    },
  },
  "rootApiFile": {
    "auth": "bearer",
    "default-environment": "default",
    "display-name": "Squidex API",
    "environments": {
      "default": "https://localhost:5001",
    },
    "error-discrimination": {
      "strategy": "status-code",
    },
    "name": "api",
    "variables": {
      "appName": {
        "docs": undefined,
        "type": "string",
      },
    },
  },
}
`;

exports[`open api converter suger simple 1`] = `
{
  "definitionFiles": {
    "__package__.yml": {
      "errors": {
        "BadRequestError": {
          "status-code": 400,
          "type": "unknown",
        },
        "ConflictError": {
          "status-code": 409,
          "type": "string",
        },
        "InternalServerError": {
          "status-code": 500,
          "type": "unknown",
        },
        "NotFoundError": {
          "status-code": 404,
          "type": "string",
        },
      },
      "service": undefined,
      "types": {
        "AzureAudience": {
          "docs": undefined,
          "properties": {
            "description": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "AzureGovernmentCertification": {
          "docs": undefined,
          "properties": {
            "title": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "uri": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "validationResults": {
              "docs": undefined,
              "type": "optional<list<AzureValidationResult>>",
            },
          },
        },
        "AzureIncludedBaseQuantity": {
          "docs": undefined,
          "properties": {
            "isInfinite": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "quantity": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "recurringUnit": {
              "docs": undefined,
              "type": "optional<AzureIncludedBaseQuantityRecurringUnit>",
            },
          },
        },
        "AzureIncludedBaseQuantityRecurringUnit": {
          "docs": undefined,
          "enum": [
            {
              "name": "Monthly",
              "value": "Monthly",
            },
            {
              "name": "Annual",
              "value": "Annual",
            },
          ],
        },
        "AzureListingContact": {
          "docs": undefined,
          "properties": {
            "email": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "phone": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "type": {
              "docs": undefined,
              "type": "optional<AzureListingContactType>",
            },
            "uri": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "AzureListingContactType": {
          "docs": undefined,
          "enum": [
            {
              "name": "CustomerSupport",
              "value": "CustomerSupport",
            },
            {
              "name": "Engineering",
              "value": "Engineering",
            },
            {
              "name": "ChannelManager",
              "value": "ChannelManager",
            },
          ],
        },
        "AzureListingUri": {
          "docs": undefined,
          "properties": {
            "displayText": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "subtype": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "type": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "uri": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "AzureLocalizedDateTime": {
          "docs": undefined,
          "properties": {
            "dateTimeInUtc": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "localizePerMarket": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
          },
        },
        "AzureLocalizedTimeRange": {
          "docs": undefined,
          "properties": {
            "endAt": {
              "docs": undefined,
              "type": "optional<AzureLocalizedDateTime>",
            },
            "startAt": {
              "docs": undefined,
              "type": "optional<AzureLocalizedDateTime>",
            },
          },
        },
        "AzureMarket": {
          "docs": undefined,
          "properties": {
            "friendlyName": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "marketCode": {
              "docs": "ISO Country Code",
              "type": "optional<string>",
            },
          },
        },
        "AzureMarketState": {
          "docs": undefined,
          "properties": {
            "marketCode": {
              "docs": "ISO Country Code",
              "type": "optional<string>",
            },
            "state": {
              "docs": undefined,
              "type": "optional<AzureMarketStateState>",
            },
          },
        },
        "AzureMarketStateState": {
          "docs": undefined,
          "enum": [
            {
              "name": "Disabled",
              "value": "Disabled",
            },
            {
              "name": "Enabled",
              "value": "Enabled",
            },
            {
              "name": "StopSelling",
              "value": "StopSelling",
            },
            {
              "name": "Terminated",
              "value": "Terminated",
            },
          ],
        },
        "AzureMarketplacePrice": {
          "docs": undefined,
          "properties": {
            "currency": {
              "docs": "ISO 4217 currency code",
              "type": "optional<string>",
            },
            "markets": {
              "docs": undefined,
              "type": "optional<list<string>>",
            },
            "price": {
              "docs": "default 0",
              "type": "optional<double>",
            },
            "prices": "unknown",
          },
        },
        "AzureMarketplacePrivateOffer": {
          "docs": undefined,
          "properties": {
            "$schema": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "acceptBy": {
              "docs": "in format YYYY-MM-DD",
              "type": "optional<string>",
            },
            "acceptanceLinks": {
              "docs": undefined,
              "type": "optional<list<AzureMarketplacePrivateOfferAcceptanceLink>>",
            },
            "beneficiaries": {
              "docs": "array of email addresses.",
              "type": "optional<list<AzureMarketplacePrivateOfferBeneficiary>>",
            },
            "eTag": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "end": {
              "docs": "in format YYYY-MM-DD",
              "type": "optional<string>",
            },
            "id": {
              "docs": "in format of "private-offer/private-offer-durable-id"",
              "type": "optional<string>",
            },
            "lastModified": {
              "docs": "in format YYYY-MM-DD",
              "type": "optional<string>",
            },
            "name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "notificationContacts": {
              "docs": "array of email addresses of the users to be notified of any changes in the private offer status.",
              "type": "optional<list<string>>",
            },
            "preparedBy": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "pricing": {
              "docs": "Up to 10 pricing entries are allowed.",
              "type": "optional<list<AzureMarketplacePrivateOfferPricing>>",
            },
            "privateOfferType": {
              "docs": undefined,
              "type": "optional<AzureMarketplacePrivateOfferPrivateOfferType>",
            },
            "resourceName": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "start": {
              "docs": "in format YYYY-MM-DD, if VariableStartDate = true, this field should be empty.",
              "type": "optional<string>",
            },
            "state": {
              "docs": undefined,
              "type": "optional<AzureMarketplacePrivateOfferState>",
            },
            "subState": {
              "docs": undefined,
              "type": "optional<AzureMarketplacePrivateOfferSubState>",
            },
            "termsAndConditionsDocSasUrl": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "upgradedFrom": {
              "docs": undefined,
              "type": "optional<AzureMarketplacePrivateOfferPromotionReference>",
            },
            "validations": {
              "docs": undefined,
              "type": "optional<list<AzureMarketplaceValidation>>",
            },
            "variableStartDate": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
          },
        },
        "AzureMarketplacePrivateOfferAcceptanceLink": {
          "docs": undefined,
          "properties": {
            "beneficiaryId": {
              "docs": "The Customer Billing Account ID.",
              "type": "optional<string>",
            },
            "link": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "AzureMarketplacePrivateOfferBeneficiary": {
          "docs": undefined,
          "properties": {
            "beneficiaryRecipients": {
              "docs": undefined,
              "type": "optional<list<AzureMarketplacePrivateOfferBeneficiaryRecipient>>",
            },
            "description": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": "the customer billing account id.",
              "type": "optional<string>",
            },
          },
        },
        "AzureMarketplacePrivateOfferBeneficiaryRecipient": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "recipientType": {
              "docs": undefined,
              "type": "optional<AzureMarketplacePrivateOfferBeneficiaryRecipientRecipientType>",
            },
          },
        },
        "AzureMarketplacePrivateOfferBeneficiaryRecipientRecipientType": {
          "docs": undefined,
          "enum": [
            {
              "name": "cspCustomer",
              "value": "cspCustomer",
            },
            {
              "name": "billingGroup",
              "value": "billingGroup",
            },
          ],
        },
        "AzureMarketplacePrivateOfferPricing": {
          "docs": undefined,
          "properties": {
            "discountPercentage": {
              "docs": "between 0 and 100",
              "type": "optional<double>",
            },
            "discountType": {
              "docs": undefined,
              "type": "optional<AzureMarketplacePrivateOfferPricingDiscountType>",
            },
            "originalPlan": {
              "docs": "the pricing plan of the original plan.",
              "type": "optional<AzurePriceAndAvailabilityPrivateOfferPlan>",
            },
            "plan": {
              "docs": "in format of "plan/product-durable-id/plan-durable-id"",
              "type": "optional<string>",
            },
            "planName": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "planType": {
              "docs": "The type of the plan, FLAT_RATE or PER_USER.",
              "type": "optional<AzureMarketplacePrivateOfferPricingPlanType>",
            },
            "priceDetails": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "privateOfferPlan": {
              "docs": "the pricing plan of the private offer",
              "type": "optional<AzurePriceAndAvailabilityPrivateOfferPlan>",
            },
            "product": {
              "docs": "in format of "product/product-durable-id"",
              "type": "optional<string>",
            },
            "sugerOfferId": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "AzureMarketplacePrivateOfferPricingDiscountType": {
          "docs": undefined,
          "enum": [
            {
              "name": "percentage",
              "value": "percentage",
            },
            {
              "name": "absolute",
              "value": "absolute",
            },
          ],
        },
        "AzureMarketplacePrivateOfferPricingPlanType": {
          "docs": undefined,
          "enum": [
            {
              "name": "FLAT_RATE",
              "value": "FLAT_RATE",
            },
            {
              "name": "PER_USER",
              "value": "PER_USER",
            },
          ],
        },
        "AzureMarketplacePrivateOfferPrivateOfferType": {
          "docs": undefined,
          "enum": [
            {
              "name": "customerPromotion",
              "value": "customerPromotion",
            },
            {
              "name": "cspPromotion",
              "value": "cspPromotion",
            },
          ],
        },
        "AzureMarketplacePrivateOfferPromotionReference": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "name": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "AzureMarketplacePrivateOfferState": {
          "docs": undefined,
          "enum": [
            {
              "name": "draft",
              "value": "draft",
            },
            {
              "name": "live",
              "value": "live",
            },
            {
              "name": "withdrawn",
              "value": "withdrawn",
            },
            {
              "name": "deleted",
              "value": "deleted",
            },
          ],
        },
        "AzureMarketplacePrivateOfferSubState": {
          "docs": undefined,
          "enum": [
            {
              "name": "pendingAcceptance",
              "value": "pendingAcceptance",
            },
            {
              "name": "accepted",
              "value": "accepted",
            },
          ],
        },
        "AzureMarketplaceTerm": {
          "docs": undefined,
          "properties": {
            "type": {
              "docs": undefined,
              "type": "optional<AzureMarketplaceTermType>",
            },
            "value": {
              "docs": "default 0",
              "type": "optional<double>",
            },
          },
        },
        "AzureMarketplaceTermType": {
          "docs": undefined,
          "enum": [
            {
              "name": "day",
              "value": "day",
            },
            {
              "name": "week",
              "value": "week",
            },
            {
              "name": "month",
              "value": "month",
            },
            {
              "name": "year",
              "value": "year",
            },
          ],
        },
        "AzureMarketplaceValidation": {
          "docs": undefined,
          "properties": {
            "$schema": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "code": {
              "docs": undefined,
              "type": "optional<AzureMarketplaceValidationCode>",
            },
            "level": {
              "docs": undefined,
              "type": "optional<AzureMarketplaceValidationLevel>",
            },
            "message": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "resourceId": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "AzureMarketplaceValidationCode": {
          "docs": undefined,
          "enum": [
            {
              "name": "businessValidationError",
              "value": "businessValidationError",
            },
            {
              "name": "collectionLimitExceeded",
              "value": "collectionLimitExceeded",
            },
            {
              "name": "invalidId",
              "value": "invalidId",
            },
            {
              "name": "invalidEntityStatus",
              "value": "invalidEntityStatus",
            },
            {
              "name": "invalidRequest",
              "value": "invalidRequest",
            },
            {
              "name": "invalidResource",
              "value": "invalidResource",
            },
            {
              "name": "invalidState",
              "value": "invalidState",
            },
            {
              "name": "notDeployed",
              "value": "notDeployed",
            },
            {
              "name": "notSupported",
              "value": "notSupported",
            },
            {
              "name": "operationCanceled",
              "value": "operationCanceled",
            },
            {
              "name": "productLocked",
              "value": "productLocked",
            },
            {
              "name": "resourceNotFound",
              "value": "resourceNotFound",
            },
            {
              "name": "schemaValidationError",
              "value": "schemaValidationError",
            },
          ],
        },
        "AzureMarketplaceValidationLevel": {
          "docs": undefined,
          "enum": [
            {
              "name": "informational",
              "value": "informational",
            },
            {
              "name": "warning",
              "value": "warning",
            },
          ],
        },
        "AzurePendingUpdateInfo": {
          "docs": undefined,
          "properties": {
            "status": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "updateType": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "AzurePrice": {
          "docs": undefined,
          "properties": {
            "currencyCode": {
              "docs": "ISO currency code, Three characters",
              "type": "optional<string>",
            },
            "openPrice": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "priceTierID": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "AzurePriceAndAvailabilityPrivateOfferCustomMeters": {
          "docs": undefined,
          "properties": {
            "meters": "unknown",
            "priceInputOption": {
              "docs": "default "usd"",
              "type": "optional<AzurePriceAndAvailabilityPrivateOfferCustomMetersPriceInputOption>",
            },
          },
        },
        "AzurePriceAndAvailabilityPrivateOfferCustomMetersPriceInputOption": {
          "docs": undefined,
          "enum": [
            {
              "name": "perMarket",
              "value": "perMarket",
            },
            {
              "name": "usd",
              "value": "usd",
            },
          ],
        },
        "AzurePriceAndAvailabilityPrivateOfferPlan": {
          "docs": undefined,
          "properties": {
            "$schema": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "plan": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "pricing": {
              "docs": undefined,
              "type": "optional<AzurePriceAndAvailabilityPrivateOfferPrice>",
            },
            "product": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "resourceName": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "validations": {
              "docs": undefined,
              "type": "optional<list<AzureMarketplaceValidation>>",
            },
          },
        },
        "AzurePriceAndAvailabilityPrivateOfferPrice": {
          "docs": undefined,
          "properties": {
            "customMeters": {
              "docs": undefined,
              "type": "optional<AzurePriceAndAvailabilityPrivateOfferCustomMeters>",
            },
            "recurrentPrice": {
              "docs": undefined,
              "type": "optional<AzurePriceAndAvailabilityRecurrentPrice>",
            },
          },
        },
        "AzurePriceAndAvailabilityRecurrentPrice": {
          "docs": undefined,
          "properties": {
            "priceInputOption": {
              "docs": "default "usd"",
              "type": "optional<AzurePriceAndAvailabilityRecurrentPricePriceInputOption>",
            },
            "prices": {
              "docs": undefined,
              "type": "optional<list<AzurePriceAndAvailabilityRecurrentPriceItem>>",
            },
          },
        },
        "AzurePriceAndAvailabilityRecurrentPriceItem": {
          "docs": undefined,
          "properties": {
            "billingTerm": {
              "docs": undefined,
              "type": "optional<AzureMarketplaceTerm>",
            },
            "paymentOption": {
              "docs": undefined,
              "type": "optional<AzureMarketplaceTerm>",
            },
            "pricePerPaymentInUsd": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "prices": {
              "docs": undefined,
              "type": "optional<list<AzureMarketplacePrice>>",
            },
          },
        },
        "AzurePriceAndAvailabilityRecurrentPricePriceInputOption": {
          "docs": undefined,
          "enum": [
            {
              "name": "perMarket",
              "value": "perMarket",
            },
            {
              "name": "usd",
              "value": "usd",
            },
          ],
        },
        "AzurePriceCadence": {
          "docs": undefined,
          "properties": {
            "type": {
              "docs": undefined,
              "type": "optional<AzurePriceCadenceType>",
            },
            "value": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "AzurePriceCadenceType": {
          "docs": undefined,
          "enum": [
            {
              "name": "Month",
              "value": "Month",
            },
            {
              "name": "Year",
              "value": "Year",
            },
          ],
        },
        "AzurePriceSchedule": {
          "docs": undefined,
          "properties": {
            "priceCadence": {
              "docs": undefined,
              "type": "optional<AzurePriceCadence>",
            },
            "pricingModel": {
              "docs": undefined,
              "type": "optional<AzurePriceSchedulePricingModel>",
            },
            "pricingUnits": {
              "docs": undefined,
              "type": "optional<list<AzurePricingUnit>>",
            },
            "retailPrice": {
              "docs": undefined,
              "type": "optional<AzurePrice>",
            },
          },
        },
        "AzurePriceSchedulePricingModel": {
          "docs": undefined,
          "enum": [
            {
              "name": "Flat",
              "value": "Flat",
            },
            {
              "name": "Recurring",
              "value": "Recurring",
            },
            {
              "name": "Usage",
              "value": "Usage",
            },
          ],
        },
        "AzurePricingUnit": {
          "docs": undefined,
          "properties": {
            "isUnlimitedUnit": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "lowerUnit": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "name": {
              "docs": undefined,
              "type": "optional<AzurePricingUnitName>",
            },
            "unitType": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "upperUnit": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "AzurePricingUnitName": {
          "docs": undefined,
          "enum": [
            {
              "name": "sharedcore",
              "value": "sharedcore",
            },
            {
              "name": "transactions",
              "value": "transactions",
            },
          ],
        },
        "AzureProduct": {
          "docs": undefined,
          "properties": {
            "availabilities": {
              "docs": undefined,
              "type": "optional<list<AzureProductAvailability>>",
            },
            "branches": {
              "docs": undefined,
              "type": "optional<list<AzureProductBranch>>",
            },
            "externalIDs": {
              "docs": undefined,
              "type": "optional<list<AzureTypeValue>>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "isModularPublishing": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "listings": {
              "docs": undefined,
              "type": "optional<list<AzureProductListing>>",
            },
            "name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "packageConfigurations": {
              "docs": undefined,
              "type": "optional<list<AzureProductPackageConfiguration>>",
            },
            "properties": {
              "docs": undefined,
              "type": "optional<list<AzureProductProperty>>",
            },
            "resourceType": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "setup": {
              "docs": "Not original fields. They are populated by other API calls",
              "type": "optional<AzureProductSetup>",
            },
            "submissions": {
              "docs": undefined,
              "type": "optional<list<AzureProductSubmission>>",
            },
            "variants": {
              "docs": undefined,
              "type": "optional<list<AzureProductVariant>>",
            },
          },
        },
        "AzureProductAvailability": {
          "docs": undefined,
          "properties": {
            "emailAudiences": {
              "docs": undefined,
              "type": "optional<list<AzureAudience>>",
            },
            "enterpriseLicensing": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "resourceType": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "subscriptionAudiences": {
              "docs": undefined,
              "type": "optional<list<AzureAudience>>",
            },
            "visibility": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "AzureProductBranch": {
          "docs": undefined,
          "properties": {
            "currentDraftInstanceID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "friendlyName": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "module": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "resourceType": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "type": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "variantID": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "AzureProductFeatureAvailability": {
          "docs": undefined,
          "properties": {
            "customMeters": {
              "docs": undefined,
              "type": "optional<list<AzureProductVariantCustomMeter>>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "isHidden": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "marketStates": {
              "docs": undefined,
              "type": "optional<list<AzureMarketState>>",
            },
            "markets": {
              "docs": undefined,
              "type": "optional<list<AzureMarket>>",
            },
            "priceSchedules": {
              "docs": undefined,
              "type": "optional<list<AzureProductVariantPriceSchedule>>",
            },
            "properties": {
              "docs": undefined,
              "type": "optional<list<AzureTypeValue>>",
            },
            "resourceType": {
              "docs": "ResourceType = FeatureAvailability",
              "type": "optional<string>",
            },
            "subscriptionAudiences": {
              "docs": undefined,
              "type": "optional<list<AzureAudience>>",
            },
            "tenantAudiences": {
              "docs": undefined,
              "type": "optional<list<AzureAudience>>",
            },
            "trial": {
              "docs": undefined,
              "type": "optional<AzureProductVariantTrial>",
            },
            "visibility": {
              "docs": undefined,
              "type": "optional<AzureProductFeatureAvailabilityVisibility>",
            },
          },
        },
        "AzureProductFeatureAvailabilityVisibility": {
          "docs": undefined,
          "enum": [
            {
              "name": "Public",
              "value": "Public",
            },
            {
              "name": "Private",
              "value": "Private",
            },
          ],
        },
        "AzureProductListing": {
          "docs": undefined,
          "properties": {
            "accessInformation": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "assets": {
              "docs": "Not original fields. They are populated by other API calls",
              "type": "optional<list<AzureProductListingAsset>>",
            },
            "compatibleProducts": {
              "docs": undefined,
              "type": "optional<list<string>>",
            },
            "description": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "gettingStartedInstructions": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "keywords": {
              "docs": undefined,
              "type": "optional<list<string>>",
            },
            "languageCode": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "listingContacts": {
              "docs": undefined,
              "type": "optional<list<AzureListingContact>>",
            },
            "listingUris": {
              "docs": undefined,
              "type": "optional<list<AzureListingUri>>",
            },
            "productDisplayName": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "publisherName": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "resourceType": {
              "docs": undefined,
              "type": "optional<AzureProductListingResourceType>",
            },
            "shortDescription": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "summary": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "title": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "AzureProductListingAsset": {
          "docs": undefined,
          "properties": {
            "description": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "fileName": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "fileSasUri": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "friendlyName": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "order": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "publisherDefinedSasUri": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "resourceType": {
              "docs": undefined,
              "type": "optional<AzureProductListingAssetResourceType>",
            },
            "state": {
              "docs": undefined,
              "type": "optional<AzureProductListingAssetState>",
            },
            "type": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "AzureProductListingAssetResourceType": {
          "docs": undefined,
          "enum": [
            {
              "name": "ListingAsset",
              "value": "ListingAsset",
            },
            {
              "name": "ListingImage",
              "value": "ListingImage",
            },
            {
              "name": "ListingVideo",
              "value": "ListingVideo",
            },
          ],
        },
        "AzureProductListingAssetState": {
          "docs": undefined,
          "enum": [
            {
              "name": "PendingUpload",
              "value": "PendingUpload",
            },
            {
              "name": "Uploaded",
              "value": "Uploaded",
            },
            {
              "name": "InProcessing",
              "value": "InProcessing",
            },
            {
              "name": "Processed",
              "value": "Processed",
            },
            {
              "name": "ProcessFailed",
              "value": "ProcessFailed",
            },
          ],
        },
        "AzureProductListingResourceType": {
          "docs": undefined,
          "enum": [
            {
              "name": "AzureListing",
              "value": "AzureListing",
            },
          ],
        },
        "AzureProductPackageConfiguration": {
          "docs": undefined,
          "properties": {
            "azureActiveDirectoryApplicationID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "azureActiveDirectoryTenantID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "connectionWebhook": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "landingPageUri": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "resourceType": {
              "docs": undefined,
              "type": "optional<AzureProductPackageConfigurationResourceType>",
            },
          },
        },
        "AzureProductPackageConfigurationResourceType": {
          "docs": undefined,
          "enum": [
            {
              "name": "AzureSoftwareAsAServicePackageConfiguration",
              "value": "AzureSoftwareAsAServicePackageConfiguration",
            },
          ],
        },
        "AzureProductProperty": {
          "docs": undefined,
          "properties": {
            "additionalCategories": {
              "docs": undefined,
              "type": "optional<list<string>>",
            },
            "appVersion": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "applicableProducts": {
              "docs": undefined,
              "type": "optional<list<string>>",
            },
            "categories": {
              "docs": undefined,
              "type": "optional<list<string>>",
            },
            "customAmendments": {
              "docs": undefined,
              "type": "optional<list<string>>",
            },
            "extendedProperties": {
              "docs": undefined,
              "type": "optional<list<string>>",
            },
            "globalAmendmentTerms": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "hideKeys": {
              "docs": undefined,
              "type": "optional<list<string>>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "industries": {
              "docs": undefined,
              "type": "optional<list<string>>",
            },
            "leveledCategories": {
              "docs": undefined,
              "type": "optional<map<string, unknown>>",
            },
            "leveledIndustries": {
              "docs": undefined,
              "type": "optional<map<string, unknown>>",
            },
            "marketingOnlyChange": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "productTags": {
              "docs": undefined,
              "type": "optional<list<string>>",
            },
            "resourceType": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "submissionVersion": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "termsOfUse": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "useEnterpriseContract": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
          },
        },
        "AzureProductSetup": {
          "docs": undefined,
          "properties": {
            "callToAction": {
              "docs": undefined,
              "type": "optional<AzureProductSetupCallToAction>",
            },
            "channelStates": {
              "docs": undefined,
              "type": "optional<list<AzureTypeValue>>",
            },
            "enableTestDrive": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "resourceType": {
              "docs": undefined,
              "type": "optional<AzureProductSetupResourceType>",
            },
            "sellingOption": {
              "docs": undefined,
              "type": "optional<AzureProductSetupSellingOption>",
            },
            "testDriveType": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "trialUri": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "AzureProductSetupCallToAction": {
          "docs": undefined,
          "enum": [
            {
              "name": "free",
              "value": "free",
            },
            {
              "name": "FreeTrial",
              "value": "free-trial",
            },
            {
              "name": "ContactMe",
              "value": "contact-me",
            },
          ],
        },
        "AzureProductSetupResourceType": {
          "docs": undefined,
          "enum": [
            {
              "name": "AzureProductSetup",
              "value": "AzureProductSetup",
            },
          ],
        },
        "AzureProductSetupSellingOption": {
          "docs": undefined,
          "enum": [
            {
              "name": "ListingOnly",
              "value": "ListingOnly",
            },
            {
              "name": "ListAndSell",
              "value": "ListAndSell",
            },
          ],
        },
        "AzureProductSubmission": {
          "docs": undefined,
          "properties": {
            "areResourcesReady": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "friendlyName": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "pendingUpdateInfo": {
              "docs": undefined,
              "type": "optional<AzurePendingUpdateInfo>",
            },
            "publishedTimeInUtc": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "releaseNumber": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "resourceType": {
              "docs": undefined,
              "type": "optional<AzureProductSubmissionResourceType>",
            },
            "resources": {
              "docs": undefined,
              "type": "optional<list<AzureTypeValue>>",
            },
            "state": {
              "docs": undefined,
              "type": "optional<AzureProductSubmissionState>",
            },
            "subState": {
              "docs": undefined,
              "type": "optional<AzureProductSubmissionSubState>",
            },
            "targets": {
              "docs": undefined,
              "type": "optional<list<AzureTypeValue>>",
            },
            "variantResources": {
              "docs": undefined,
              "type": "optional<list<AzureVariantResource>>",
            },
          },
        },
        "AzureProductSubmissionResourceType": {
          "docs": undefined,
          "enum": [
            {
              "name": "Submission",
              "value": "Submission",
            },
          ],
        },
        "AzureProductSubmissionState": {
          "docs": undefined,
          "enum": [
            {
              "name": "Inprogress",
              "value": "Inprogress",
            },
            {
              "name": "Published",
              "value": "Published",
            },
          ],
        },
        "AzureProductSubmissionSubState": {
          "docs": undefined,
          "enum": [
            {
              "name": "InDraft",
              "value": "InDraft",
            },
            {
              "name": "Submitted",
              "value": "Submitted",
            },
            {
              "name": "Failed",
              "value": "Failed",
            },
            {
              "name": "FailedInCertification",
              "value": "FailedInCertification",
            },
            {
              "name": "ReadyToPublish",
              "value": "ReadyToPublish",
            },
            {
              "name": "Publishing",
              "value": "Publishing",
            },
            {
              "name": "Published",
              "value": "Published",
            },
            {
              "name": "InStore",
              "value": "InStore",
            },
          ],
        },
        "AzureProductVariant": {
          "docs": undefined,
          "properties": {
            "azureGovernmentCertifications": {
              "docs": undefined,
              "type": "optional<list<AzureGovernmentCertification>>",
            },
            "cloudAvailabilities": {
              "docs": undefined,
              "type": "optional<list<string>>",
            },
            "conversionPaths": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "extendedProperties": {
              "docs": undefined,
              "type": "optional<list<AzureTypeValue>>",
            },
            "externalID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "featureAvailabilities": {
              "docs": "Not original fields. They are populated by other API calls",
              "type": "optional<list<AzureProductFeatureAvailability>>",
            },
            "friendlyName": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "leadGenID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "referenceVariantID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "resourceType": {
              "docs": undefined,
              "type": "optional<AzureProductVariantResourceType>",
            },
            "state": {
              "docs": undefined,
              "type": "optional<AzureProductVariantState>",
            },
          },
        },
        "AzureProductVariantCustomMeter": {
          "docs": undefined,
          "properties": {
            "displayName": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "includedBaseQuantities": {
              "docs": undefined,
              "type": "optional<list<AzureIncludedBaseQuantity>>",
            },
            "isEnabled": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "priceInUsd": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "uniqueID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "unitOfMeasure": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "AzureProductVariantPriceSchedule": {
          "docs": undefined,
          "properties": {
            "dateTimeRange": {
              "docs": undefined,
              "type": "optional<AzureLocalizedTimeRange>",
            },
            "friendlyName": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "isBaseSchedule": {
              "docs": "There is only one base schedule.",
              "type": "optional<boolean>",
            },
            "marketCodes": {
              "docs": "ISO country code",
              "type": "optional<list<string>>",
            },
            "schedules": {
              "docs": undefined,
              "type": "optional<list<AzurePriceSchedule>>",
            },
          },
        },
        "AzureProductVariantResourceType": {
          "docs": undefined,
          "enum": [
            {
              "name": "AzureSkuVariant",
              "value": "AzureSkuVariant",
            },
            {
              "name": "AzureTestDriveVariant",
              "value": "AzureTestDriveVariant",
            },
          ],
        },
        "AzureProductVariantState": {
          "docs": undefined,
          "enum": [
            {
              "name": "InActive",
              "value": "InActive",
            },
            {
              "name": "Active",
              "value": "Active",
            },
          ],
        },
        "AzureProductVariantTrial": {
          "docs": undefined,
          "properties": {
            "dateTimeRange": {
              "docs": undefined,
              "type": "optional<AzureLocalizedTimeRange>",
            },
            "duration": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "durationType": {
              "docs": undefined,
              "type": "optional<AzureProductVariantTrialDurationType>",
            },
            "type": {
              "docs": undefined,
              "type": "optional<AzureProductVariantTrialType>",
            },
          },
        },
        "AzureProductVariantTrialDurationType": {
          "docs": undefined,
          "enum": [
            {
              "name": "Minute",
              "value": "Minute",
            },
            {
              "name": "Days",
              "value": "Days",
            },
            {
              "name": "Months",
              "value": "Months",
            },
          ],
        },
        "AzureProductVariantTrialType": {
          "docs": undefined,
          "enum": [
            {
              "name": "NoTrial",
              "value": "NoTrial",
            },
            {
              "name": "TimedAccess",
              "value": "TimedAccess",
            },
            {
              "name": "TimedUsage",
              "value": "TimedUsage",
            },
            {
              "name": "Unlimited",
              "value": "Unlimited",
            },
          ],
        },
        "AzureTypeValue": {
          "docs": undefined,
          "properties": {
            "type": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "value": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "AzureValidationResult": {
          "docs": undefined,
          "properties": {
            "errorMessage": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "memberNames": {
              "docs": undefined,
              "type": "optional<list<string>>",
            },
          },
        },
        "AzureVariantResource": {
          "docs": undefined,
          "properties": {
            "resources": {
              "docs": undefined,
              "type": "optional<list<AzureTypeValue>>",
            },
            "variantID": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "DeleteIntegrationRequestPartner": {
          "docs": undefined,
          "enum": [
            {
              "name": "AWS",
              "value": "AWS",
            },
            {
              "name": "AZURE",
              "value": "AZURE",
            },
            {
              "name": "GCP",
              "value": "GCP",
            },
          ],
        },
        "DeleteIntegrationRequestService": {
          "docs": undefined,
          "enum": [
            {
              "name": "MARKETPLACE",
              "value": "MARKETPLACE",
            },
            {
              "name": "CRM",
              "value": "CRM",
            },
          ],
        },
        "GetIntegrationRequestPartner": {
          "docs": undefined,
          "enum": [
            {
              "name": "AWS",
              "value": "AWS",
            },
            {
              "name": "AZURE",
              "value": "AZURE",
            },
            {
              "name": "GCP",
              "value": "GCP",
            },
          ],
        },
        "GetIntegrationRequestService": {
          "docs": undefined,
          "enum": [
            {
              "name": "MARKETPLACE",
              "value": "MARKETPLACE",
            },
            {
              "name": "CRM",
              "value": "CRM",
            },
          ],
        },
        "GithubComAwsAwsSdkGoV2ServiceMarketplacemeteringTypesTag": {
          "docs": undefined,
          "properties": {
            "key": {
              "docs": "One part of a key-value pair that makes up a tag. A key is a label that acts
like a category for the specific tag values.

This member is required.",
              "type": "optional<string>",
            },
            "value": {
              "docs": "One part of a key-value pair that makes up a tag. A value acts as a descriptor
within a tag category (key). The value can be empty or null.

This member is required.",
              "type": "optional<string>",
            },
          },
        },
        "GithubComSugerioMarketplaceServiceAzureSdkMarketplacemeteringv1BatchUsageEventOkResponse": {
          "docs": undefined,
          "properties": {
            "count": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "result": {
              "docs": undefined,
              "type": "optional<list<GithubComSugerioMarketplaceServiceAzureSdkMarketplacemeteringv1UsageBatchEventOkMessage>>",
            },
          },
        },
        "GithubComSugerioMarketplaceServiceAzureSdkMarketplacemeteringv1UsageBatchEventOkMessage": {
          "docs": undefined,
          "properties": {
            "dimension": {
              "docs": "Dimension identifier",
              "type": "optional<string>",
            },
            "effectiveStartTime": {
              "docs": "Time in UTC when the usage event occurred",
              "type": "optional<string>",
            },
            "error": {
              "docs": undefined,
              "type": "optional<GithubComSugerioMarketplaceServiceAzureSdkMarketplacemeteringv1UsageEventConflictResponse>",
            },
            "messageTime": {
              "docs": "Time this message was created in UTC",
              "type": "optional<string>",
            },
            "planId": {
              "docs": "Plan associated with the purchased offer",
              "type": "optional<string>",
            },
            "quantity": {
              "docs": "Number of units consumed",
              "type": "optional<double>",
            },
            "resourceId": {
              "docs": "Identifier of the resource against which usage is emitted",
              "type": "optional<string>",
            },
            "resourceUri": {
              "docs": "Identifier of the managed app resource against which usage is emitted",
              "type": "optional<string>",
            },
            "status": {
              "docs": "Status of the operation.",
              "type": "optional<GithubComSugerioMarketplaceServiceAzureSdkMarketplacemeteringv1UsageEventStatusEnum>",
            },
            "usageEventId": {
              "docs": "Unique identifier associated with the usage event",
              "type": "optional<string>",
            },
          },
        },
        "GithubComSugerioMarketplaceServiceAzureSdkMarketplacemeteringv1UsageEventConflictResponse": {
          "docs": undefined,
          "properties": {
            "additionalInfo": {
              "docs": undefined,
              "type": "optional<GithubComSugerioMarketplaceServiceAzureSdkMarketplacemeteringv1UsageEventConflictResponseAdditionalInfo>",
            },
            "code": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "message": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "GithubComSugerioMarketplaceServiceAzureSdkMarketplacemeteringv1UsageEventConflictResponseAdditionalInfo": {
          "docs": undefined,
          "properties": {
            "acceptedMessage": {
              "docs": undefined,
              "type": "optional<GithubComSugerioMarketplaceServiceAzureSdkMarketplacemeteringv1UsageEventOkResponse>",
            },
          },
        },
        "GithubComSugerioMarketplaceServiceAzureSdkMarketplacemeteringv1UsageEventOkResponse": {
          "docs": undefined,
          "properties": {
            "dimension": {
              "docs": "Dimension identifier",
              "type": "optional<string>",
            },
            "effectiveStartTime": {
              "docs": "Time in UTC when the usage event occurred",
              "type": "optional<string>",
            },
            "messageTime": {
              "docs": "Time this message was created in UTC",
              "type": "optional<string>",
            },
            "planId": {
              "docs": "Plan associated with the purchased offer",
              "type": "optional<string>",
            },
            "quantity": {
              "docs": "Number of units consumed",
              "type": "optional<double>",
            },
            "resourceId": {
              "docs": "Identifier of the resource against which usage is emitted",
              "type": "optional<string>",
            },
            "resourceUri": {
              "docs": "Identifier of the managed app resource against which usage is emitted",
              "type": "optional<string>",
            },
            "status": {
              "docs": "Status of the operation.",
              "type": "optional<GithubComSugerioMarketplaceServiceAzureSdkMarketplacemeteringv1UsageEventStatusEnum>",
            },
            "usageEventId": {
              "docs": "Unique identifier associated with the usage event",
              "type": "optional<string>",
            },
          },
        },
        "GithubComSugerioMarketplaceServiceAzureSdkMarketplacemeteringv1UsageEventStatusEnum": {
          "docs": undefined,
          "enum": [
            {
              "name": "Accepted",
              "value": "Accepted",
            },
            {
              "name": "Expired",
              "value": "Expired",
            },
            {
              "name": "Duplicate",
              "value": "Duplicate",
            },
            {
              "name": "Error",
              "value": "Error",
            },
            {
              "name": "ResourceNotFound",
              "value": "ResourceNotFound",
            },
            {
              "name": "ResourceNotAuthorized",
              "value": "ResourceNotAuthorized",
            },
            {
              "name": "InvalidDimension",
              "value": "InvalidDimension",
            },
            {
              "name": "InvalidQuantity",
              "value": "InvalidQuantity",
            },
            {
              "name": "BadArgument",
              "value": "BadArgument",
            },
          ],
        },
        "GithubComSugerioMarketplaceServiceRdsDbLibBillingAwsBillingEvent": {
          "docs": undefined,
          "properties": {
            "action": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "agreementID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "amount": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "balanceImpacting": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "bankTraceID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "billingAddressID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "brokerID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "buyerID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "currency": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "dataFeedProductID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "disbursementBillingEventID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "endUserAccountID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "entitlementID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "fromAccountID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "insertDate": {
              "docs": undefined,
              "type": "optional<SqlNullTime>",
            },
            "invoiceDate": {
              "docs": undefined,
              "type": "optional<SqlNullTime>",
            },
            "invoiceID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "offerID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "organizationID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "parentBillingEventID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "paymentDueDate": {
              "docs": undefined,
              "type": "optional<SqlNullTime>",
            },
            "productID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "toAccountID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "transactionReferenceID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "transactionType": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "usagePeriodEndDate": {
              "docs": undefined,
              "type": "optional<SqlNullTime>",
            },
            "usagePeriodStartDate": {
              "docs": undefined,
              "type": "optional<SqlNullTime>",
            },
          },
        },
        "GithubComSugerioMarketplaceServiceRdsDbLibBillingAzureCmaRevenue": {
          "docs": undefined,
          "properties": {
            "azureAssetID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "azureBillingAccountID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "azureCustomerID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "azureOfferID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "azurePlanID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "billingModel": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "buyerID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "earningUsd": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "entitlementID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "offerID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "organizationID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "payoutStatus": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "productID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "purchaseRecordID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "revenueUsd": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "termEndDate": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "termStartDate": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "GithubComSugerioMarketplaceServiceRdsDbLibBillingGcpChargeUsage": {
          "docs": undefined,
          "properties": {
            "abandoned": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "accountID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "buyerID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "charges": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "currency": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "dueVendor": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "entitlementID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "googleEntity": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "insightAccountID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "offerID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "organizationID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "paymentSchedule": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "paymentType": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "prepayCredits": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "productID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "refundBalanceDeductedThisMonth": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "refundBalanceOutstanding": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "refundReason": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "released": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "reportDate": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "resource": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "sku": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "trialUse": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "unit": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "usage": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "usedBy": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "withheld": {
              "docs": undefined,
              "type": "optional<double>",
            },
          },
        },
        "ListEntitlementsByPartnerRequestPartner": {
          "docs": undefined,
          "enum": [
            {
              "name": "AWS",
              "value": "AWS",
            },
            {
              "name": "AZURE",
              "value": "AZURE",
            },
            {
              "name": "GCP",
              "value": "GCP",
            },
          ],
        },
        "ListOffersByPartnerRequestPartner": {
          "docs": undefined,
          "enum": [
            {
              "name": "AWS",
              "value": "AWS",
            },
            {
              "name": "AZURE",
              "value": "AZURE",
            },
            {
              "name": "GCP",
              "value": "GCP",
            },
          ],
        },
        "ListProductsByPartnerRequestPartner": {
          "docs": undefined,
          "enum": [
            {
              "name": "AWS",
              "value": "AWS",
            },
            {
              "name": "AZURE",
              "value": "AZURE",
            },
            {
              "name": "GCP",
              "value": "GCP",
            },
          ],
        },
        "ListRevenueRecordDetailsRequestPartner": {
          "docs": undefined,
          "enum": [
            {
              "name": "AWS",
              "value": "AWS",
            },
            {
              "name": "AZURE",
              "value": "AZURE",
            },
            {
              "name": "GCP",
              "value": "GCP",
            },
          ],
        },
        "ListRevenueRecordsRequestPartner": {
          "docs": undefined,
          "enum": [
            {
              "name": "AWS",
              "value": "AWS",
            },
            {
              "name": "AZURE",
              "value": "AZURE",
            },
            {
              "name": "GCP",
              "value": "GCP",
            },
          ],
        },
        "MarketplacemeteringBatchMeterUsageOutput": {
          "docs": undefined,
          "properties": {
            "resultMetadata": {
              "docs": "Metadata pertaining to the operation's result.",
              "type": "optional<middleware.Metadata>",
            },
            "results": {
              "docs": "Contains all UsageRecords processed by BatchMeterUsage. These records were
either honored by AWS Marketplace Metering Service or were invalid. Invalid
records should be fixed before being resubmitted.",
              "type": "optional<list<TypesUsageRecordResult>>",
            },
            "unprocessedRecords": {
              "docs": "Contains all UsageRecords that were not processed by BatchMeterUsage. This is a
list of UsageRecords. You can retry the failed request by making another
BatchMeterUsage call with this list as input in the BatchMeterUsageRequest.",
              "type": "optional<list<TypesUsageRecord>>",
            },
          },
        },
        "ServicecontrolReportError": {
          "docs": undefined,
          "properties": {
            "operationId": {
              "docs": "OperationId: The Operation.operation_id value from the request.",
              "type": "optional<string>",
            },
            "status": {
              "docs": "Status: Details of the error when processing the Operation.",
              "type": "optional<ServicecontrolStatus>",
            },
          },
        },
        "ServicecontrolReportResponse": {
          "docs": undefined,
          "properties": {
            "reportErrors": {
              "docs": "ReportErrors: Partial failures, one for each \`Operation\` in the
request that failed processing. There are three possible combinations
of the RPC status: 1. The combination of a successful RPC status and
an empty \`report_errors\` list indicates a complete success where all
\`Operations\` in the request are processed successfully. 2. The
combination of a successful RPC status and a non-empty
\`report_errors\` list indicates a partial success where some
\`Operations\` in the request succeeded. Each \`Operation\` that failed
processing has a corresponding item in this list. 3. A failed RPC
status indicates a general non-deterministic failure. When this
happens, it's impossible to know which of the 'Operations' in the
request succeeded or failed.",
              "type": "optional<list<ServicecontrolReportError>>",
            },
            "serviceConfigId": {
              "docs": "ServiceConfigId: The actual config id used to process the request.",
              "type": "optional<string>",
            },
            "serviceRolloutId": {
              "docs": "ServiceRolloutId: The current service rollout id used to process the
request.",
              "type": "optional<string>",
            },
          },
        },
        "ServicecontrolStatus": {
          "docs": undefined,
          "properties": {
            "code": {
              "docs": "Code: The status code, which should be an enum value of
google.rpc.Code.",
              "type": "optional<integer>",
            },
            "details": {
              "docs": "Details: A list of messages that carry the error details. There is a
common set of message types for APIs to use.",
              "type": "optional<list<list<integer>>>",
            },
            "message": {
              "docs": "Message: A developer-facing error message, which should be in
English. Any user-facing error message should be localized and sent
in the google.rpc.Status.details field, or localized by the client.",
              "type": "optional<string>",
            },
          },
        },
        "SharedAddEntitlementCreditResponse": {
          "docs": undefined,
          "properties": {
            "creditAmountIncrement": {
              "docs": "The amount to be added to the credit amount.",
              "type": "optional<double>",
            },
            "entitlementID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "entitlementTermID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "newCreditAmount": {
              "docs": "The new credit amount after the increment.",
              "type": "optional<double>",
            },
            "organizationID": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedApiClientAccessToken": {
          "docs": undefined,
          "properties": {
            "access_token": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "expires_in": {
              "docs": "The token expires in 1 hour",
              "type": "optional<integer>",
            },
            "token_type": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedAwsAccountIdentifier": {
          "docs": undefined,
          "properties": {
            "awsAccountID": {
              "docs": "The AWS Account ID of the buyer in AWS Marketplace",
              "type": "optional<string>",
            },
            "awsCustomerID": {
              "docs": "The AWS Customer ID of the buyer in AWS Marketplace",
              "type": "optional<string>",
            },
            "companyInfo": {
              "docs": undefined,
              "type": "optional<SharedCompanyInfo>",
            },
            "dataFeedAccountID": {
              "docs": "The Account ID in AWS Marketplace Data Feed service",
              "type": "optional<string>",
            },
          },
        },
        "SharedAwsAceIntegration": {
          "docs": undefined,
          "properties": {
            "credential": {
              "docs": undefined,
              "type": "optional<SharedAwsIntegrationCredential>",
            },
            "partnerId": {
              "docs": "The partner ID of the ISV/Seller in AWS Partner Network.",
              "type": "optional<string>",
            },
            "s3BucketName": {
              "docs": "The Name of the S3 bucket for AWS APN Customer Engagement Program (ACE) to sync the leads & opportunities.",
              "type": "optional<string>",
            },
            "s3BucketRegion": {
              "docs": "The region of the S3 bucket for AWS APN Customer Engagement Program (ACE) to sync the leads & opportunities.",
              "type": "optional<string>",
            },
            "secretKey": {
              "docs": "The secret key used to store the AzureIntegrationCredential in AWS Secret manager. for internal usage only.",
              "type": "optional<string>",
            },
          },
        },
        "SharedAwsIntegrationCredential": {
          "docs": undefined,
          "properties": {
            "accessKeyId": {
              "docs": "The access key ID of the IAM user for Suger service to access the client's AWS services.",
              "type": "optional<string>",
            },
            "iamUserArn": {
              "docs": "The ARN of the IAM user for Suger service to access the client's AWS services.",
              "type": "optional<string>",
            },
            "secretAccessKey": {
              "docs": "The secret access key of the IAM user for Suger service to access the client's AWS services.",
              "type": "optional<string>",
            },
          },
        },
        "SharedAwsMarketplaceIntegration": {
          "docs": "The data struct to store integration info for Suger service to access the client's AWS services.",
          "properties": {
            "externalID": {
              "docs": "The external ID for assuming IAM role. If empty, means no external ID set or needed. Otherwise, it should be auth_id in table identity.organization.",
              "type": "optional<string>",
            },
            "iamRoleArn": {
              "docs": "The AWS IAM role for Suger service to assume to access the client's AWS services.",
              "type": "optional<string>",
            },
            "marketplaceStartDate": {
              "docs": "AWS Marketplace start date which comes from MDFS Full-Sync.",
              "type": "optional<string>",
            },
            "mcasFullSyncDone": {
              "docs": "Is AWS Marketplace Commerce Analytics Service (MCAS) full-sync done.",
              "type": "optional<boolean>",
            },
            "mcasIamRoleArn": {
              "docs": "IAM role ARN to allow AWS Marketplace to write to the S3 bucket and publish notifications to the SNS topic.",
              "type": "optional<string>",
            },
            "mcasS3Bucket": {
              "docs": "S3 bucket for AWS Marketplace Commerce Analytics Service (MCAS)",
              "type": "optional<string>",
            },
            "mcasSnsTopic": {
              "docs": "SNS topic ARN for AWS Marketplace Commerce Analytics Service (MCAS)",
              "type": "optional<string>",
            },
            "mdfsFullSyncDone": {
              "docs": "Is AWS Marketplace Data Feeds Service (MDFS) full-sync done.",
              "type": "optional<boolean>",
            },
            "mdfsKmsKeyArn": {
              "docs": "KMS Key ARN for the S3 bucket of AWS Marketplace Data Feeds Service (MDFS)",
              "type": "optional<string>",
            },
            "mdfsS3BucketArn": {
              "docs": "S3 bucket ARN for AWS Marketplace Data Feeds Service (MDFS)",
              "type": "optional<string>",
            },
            "policyArns": {
              "docs": "The policy ARNs in the IAM role.",
              "type": "optional<list<string>>",
            },
            "revenueRecordFullSyncDone": {
              "docs": "Is AWS Marketplace Revenue Record full-sync done.",
              "type": "optional<boolean>",
            },
          },
        },
        "SharedAwsSaasProduct": {
          "docs": undefined,
          "properties": {
            "Description": {
              "docs": undefined,
              "type": "optional<SharedAwsSaasProductDescription>",
            },
            "Dimensions": {
              "docs": undefined,
              "type": "optional<list<SharedAwsSaasProductDimension>>",
            },
            "PromotionalResources": {
              "docs": undefined,
              "type": "optional<SharedAwsSaasProductPromotionalResources>",
            },
            "SupportInformation": {
              "docs": undefined,
              "type": "optional<SharedAwsSaasProductSupportInformation>",
            },
            "Versions": {
              "docs": undefined,
              "type": "optional<list<SharedAwsSaasProductVersion>>",
            },
            "dataFeedProductId": {
              "docs": "The product Id in AWS Marketplace Data Feed Service.",
              "type": "optional<string>",
            },
            "productId": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedAwsSaasProductAdditionalResource": {
          "docs": undefined,
          "properties": {
            "Text": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "Type": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "Url": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedAwsSaasProductDeliveryOption": {
          "docs": undefined,
          "properties": {
            "FulfillmentUrl": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "Id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "Type": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedAwsSaasProductDescription": {
          "docs": undefined,
          "properties": {
            "AssociatedProducts": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "Categories": {
              "docs": undefined,
              "type": "optional<list<string>>",
            },
            "EuW8Submitted": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "Highlights": {
              "docs": undefined,
              "type": "optional<list<string>>",
            },
            "LongDescription": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "Manufacturer": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "ProductCode": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "ProductTitle": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "Registered": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "SearchKeywords": {
              "docs": undefined,
              "type": "optional<list<string>>",
            },
            "ShortDescription": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "Sku": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "UsW9Submitted": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "Visibility": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedAwsSaasProductDimension": {
          "docs": undefined,
          "properties": {
            "Description": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "Key": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "Name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "Types": {
              "docs": undefined,
              "type": "optional<list<string>>",
            },
            "Unit": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedAwsSaasProductPromotionalResources": {
          "docs": undefined,
          "properties": {
            "AdditionalResources": {
              "docs": undefined,
              "type": "optional<list<SharedAwsSaasProductAdditionalResource>>",
            },
            "LogoUrl": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedAwsSaasProductSupportInformation": {
          "docs": undefined,
          "properties": {
            "Description": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedAwsSaasProductVersion": {
          "docs": undefined,
          "properties": {
            "DeliveryOptions": {
              "docs": undefined,
              "type": "optional<list<SharedAwsSaasProductDeliveryOption>>",
            },
            "Id": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedAwsSnsSubscription": {
          "docs": undefined,
          "properties": {
            "Endpoint": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "Protocol": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "Status": {
              "docs": undefined,
              "type": "optional<SharedAwsSnsSubscriptionStatus>",
            },
            "SubscriptionArn": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "TopicArn": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedAwsSnsSubscriptionStatus": {
          "docs": undefined,
          "enum": [
            {
              "name": "UNKNOWN",
              "value": "UNKNOWN",
            },
            {
              "name": "CONFIRMED",
              "value": "CONFIRMED",
            },
            {
              "name": "PENDING_CONFIRMATION",
              "value": "PENDING_CONFIRMATION",
            },
          ],
        },
        "SharedAzureAdIdentifier": {
          "docs": undefined,
          "properties": {
            "buyerInfo": {
              "docs": undefined,
              "type": "optional<SharedAzureBuyerInfo>",
            },
            "companyInfo": {
              "docs": undefined,
              "type": "optional<SharedCompanyInfo>",
            },
            "emailId": {
              "docs": "Email address",
              "type": "optional<string>",
            },
            "objectId": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "puid": {
              "docs": "ID of the user, used as External ID of suger IdentityBuyer.",
              "type": "optional<string>",
            },
            "tenantId": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedAzureBuyerInfo": {
          "docs": undefined,
          "properties": {
            "billingAccountId": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "customerId": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "firstName": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "lastName": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedAzureIntegration": {
          "docs": undefined,
          "properties": {
            "cmaFullSyncDone": {
              "docs": "Is Azure Commercial Marketplace Analytics (CMA) full-sync done.",
              "type": "optional<boolean>",
            },
            "credential": {
              "docs": undefined,
              "type": "optional<SharedAzureIntegrationCredential>",
            },
            "secretKey": {
              "docs": "The secret key used to store the AzureIntegrationCredential in AWS Secret manager. for internal usage only.",
              "type": "optional<string>",
            },
          },
        },
        "SharedAzureIntegrationCredential": {
          "docs": undefined,
          "properties": {
            "accessToken": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "clientID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "clientSecret": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "expiresOn": {
              "docs": "The time when the access token expires.",
              "type": "optional<string>",
            },
            "refreshToken": {
              "docs": "The refresh token used to refresh the access token.",
              "type": "optional<string>",
            },
            "tenantID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "tokenScope": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "tokenType": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedAzureMarketplaceSubscription": {
          "docs": undefined,
          "properties": {
            "allowedCustomerOperations": {
              "docs": undefined,
              "type": "optional<list<SharedAzureMarketplaceSubscriptionAllowedCustomerOperationsItem>>",
            },
            "autoRenew": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "beneficiary": {
              "docs": undefined,
              "type": "optional<SharedAzureAdIdentifier>",
            },
            "created": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "fulfillmentId": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "isFreeTrial": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "isTest": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "lastModified": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "offerId": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "planId": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "publisherId": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "purchaser": {
              "docs": undefined,
              "type": "optional<SharedAzureAdIdentifier>",
            },
            "quantity": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "saasSubscriptionStatus": {
              "docs": undefined,
              "type": "optional<SharedAzureMarketplaceSubscriptionStatus>",
            },
            "sandboxType": {
              "docs": undefined,
              "type": "optional<SharedAzureMarketplaceSubscriptionSandboxType>",
            },
            "sessionId": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "sessionMode": {
              "docs": undefined,
              "type": "optional<SharedAzureMarketplaceSubscriptionSessionMode>",
            },
            "storeFront": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "term": {
              "docs": undefined,
              "type": "optional<SharedAzureTerm>",
            },
          },
        },
        "SharedAzureMarketplaceSubscriptionAllowedCustomerOperationsItem": {
          "docs": undefined,
          "enum": [
            {
              "name": "Read",
              "value": "Read",
            },
            {
              "name": "Update",
              "value": "Update",
            },
            {
              "name": "Delete",
              "value": "Delete",
            },
          ],
        },
        "SharedAzureMarketplaceSubscriptionSandboxType": {
          "docs": undefined,
          "enum": [
            {
              "name": "None",
              "value": "None",
            },
            {
              "name": "Csp",
              "value": "Csp",
            },
          ],
        },
        "SharedAzureMarketplaceSubscriptionSessionMode": {
          "docs": undefined,
          "enum": [
            {
              "name": "None",
              "value": "None",
            },
            {
              "name": "DryRun",
              "value": "DryRun",
            },
          ],
        },
        "SharedAzureMarketplaceSubscriptionStatus": {
          "docs": undefined,
          "enum": [
            {
              "name": "NotStarted",
              "value": "NotStarted",
            },
            {
              "name": "PendingFulfillmentStart",
              "value": "PendingFulfillmentStart",
            },
            {
              "name": "Subscribed",
              "value": "Subscribed",
            },
            {
              "name": "Suspended",
              "value": "Suspended",
            },
            {
              "name": "Unsubscribed",
              "value": "Unsubscribed",
            },
          ],
        },
        "SharedAzureTerm": {
          "docs": undefined,
          "properties": {
            "chargeDuration": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "endDate": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "startDate": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "termUnit": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedBuyerInfo": {
          "docs": undefined,
          "properties": {
            "awsBuyer": {
              "docs": "Buyer from AWS Marketplace",
              "type": "optional<SharedAwsAccountIdentifier>",
            },
            "azureBuyer": {
              "docs": "Buyer from Azure Marketplace",
              "type": "optional<SharedAzureAdIdentifier>",
            },
            "collectableAmount": {
              "docs": "The amount that the seller can collect. It excludes the marketplace commision fee.",
              "type": "optional<double>",
            },
            "disbursedAmount": {
              "docs": "The amount that has been disbursed to the seller account.",
              "type": "optional<double>",
            },
            "gcpBuyer": {
              "docs": "Buyer from GCP Marketplace",
              "type": "optional<SharedGcpMarketplaceUserAccount>",
            },
            "invoicedAmount": {
              "docs": "The amount that the buyer has got invoiced.",
              "type": "optional<double>",
            },
          },
        },
        "SharedCommitDimension": {
          "docs": "The commit dimension. There may be one or more commit dimensions defined in single product, offer or entitlement.",
          "properties": {
            "category": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "description": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "isUserCreated": {
              "docs": "Whether this commit dimension is newly created by user when creating AWS Marketplace Contract private offer.",
              "type": "optional<boolean>",
            },
            "key": {
              "docs": "API name of the dimension",
              "type": "optional<string>",
            },
            "length": {
              "docs": "The term length for the commit amount, such as 6 months, or 1 year. length is used together with timeUnit",
              "type": "optional<integer>",
            },
            "maximumUsers": {
              "docs": "The maximum number of users for PER_USER commit",
              "type": "optional<integer>",
            },
            "minimumUsers": {
              "docs": "The minimum number of users for PER_USER commit",
              "type": "optional<integer>",
            },
            "name": {
              "docs": "Display name of the dimension",
              "type": "optional<string>",
            },
            "quantity": {
              "docs": "The quantity of this commit.",
              "type": "optional<integer>",
            },
            "rate": {
              "docs": "The commit amount.",
              "type": "optional<double>",
            },
            "timeUnit": {
              "docs": "The term unit for the commit amount.",
              "type": "optional<SharedCommitDimensionTimeUnit>",
            },
            "type": {
              "docs": undefined,
              "type": "optional<SharedCommitDimensionType>",
            },
            "types": {
              "docs": undefined,
              "type": "optional<list<string>>",
            },
          },
        },
        "SharedCommitDimensionTimeUnit": {
          "docs": undefined,
          "enum": [
            {
              "name": "DAY",
              "value": "DAY",
            },
            {
              "name": "MONTH",
              "value": "MONTH",
            },
            {
              "name": "YEAR",
              "value": "YEAR",
            },
          ],
        },
        "SharedCommitDimensionType": {
          "docs": undefined,
          "enum": [
            {
              "name": "FLAT_RATE",
              "value": "FLAT_RATE",
            },
            {
              "name": "PER_USER",
              "value": "PER_USER",
            },
          ],
        },
        "SharedCompanyInfo": {
          "docs": undefined,
          "properties": {
            "addressLine1": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "addressLine2": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "city": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "country": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "emailDomain": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "postalCode": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "state": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedContact": {
          "docs": undefined,
          "properties": {
            "company": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "email": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "name": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedCreateIntegrationParamsPartner": {
          "docs": undefined,
          "enum": [
            {
              "name": "AWS",
              "value": "AWS",
            },
            {
              "name": "AZURE",
              "value": "AZURE",
            },
            {
              "name": "GCP",
              "value": "GCP",
            },
          ],
        },
        "SharedCreateIntegrationParamsService": {
          "docs": undefined,
          "enum": [
            {
              "name": "MARKETPLACE",
              "value": "MARKETPLACE",
            },
          ],
        },
        "SharedEntitlementInfo": {
          "docs": undefined,
          "properties": {
            "autoRenew": {
              "docs": "Is this Entitlement Auto Renew enabled.",
              "type": "optional<boolean>",
            },
            "awsEntitlements": {
              "docs": "Nullable. AWS Entitlements from AWS Marketplace.",
              "type": "optional<list<TypesEntitlement>>",
            },
            "azureSubscriptions": {
              "docs": "Nullable. Azure Subscriptions from Azure Marketplace.",
              "type": "optional<list<SharedAzureMarketplaceSubscription>>",
            },
            "collectableAmount": {
              "docs": "The amount that the seller can collect. It excludes the marketplace commision fee.",
              "type": "optional<double>",
            },
            "commitAmount": {
              "docs": "The amount that the buyer has committed to pay. It can be the sum of payment installments if applicable.",
              "type": "optional<double>",
            },
            "commits": {
              "docs": "The dimensions for commit.",
              "type": "optional<list<SharedCommitDimension>>",
            },
            "currency": {
              "docs": "The default Currency is USD.",
              "type": "optional<string>",
            },
            "dimensions": {
              "docs": "The dimensions for usage-based metering.",
              "type": "optional<list<SharedMeteringDimension>>",
            },
            "disbursedAmount": {
              "docs": "The amount that has been disbursed to the seller account.",
              "type": "optional<double>",
            },
            "discount": {
              "docs": "The rate of discount (0 ~ 1.0), such as 0.1 which is 10% off. 0 which is no discount.",
              "type": "optional<double>",
            },
            "eulaType": {
              "docs": undefined,
              "type": "optional<SharedEulaType>",
            },
            "eulaUrl": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "gcpEntitlements": {
              "docs": "Nullable. GCP Entitlements from GCP Marketplace.",
              "type": "optional<list<SharedGcpMarketplaceEntitlement>>",
            },
            "gcpPlans": {
              "docs": "Only applicable for GCP Marketplace Entitlements.",
              "type": "optional<list<SharedGcpPurchasePlan>>",
            },
            "invoicedAmount": {
              "docs": "The amount that the buyer has got invoiced.",
              "type": "optional<double>",
            },
            "paymentInstallments": {
              "docs": "For flexible payment schedules",
              "type": "optional<list<SharedPaymentInstallment>>",
            },
            "refundCancelationPolicy": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "sellerNotes": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedEntitlementTermInfo": {
          "docs": undefined,
          "properties": {
            "type": {
              "docs": undefined,
              "type": "optional<SharedEntitlementTermType>",
            },
          },
        },
        "SharedEntitlementTermType": {
          "docs": undefined,
          "enum": [
            {
              "name": "Unknown",
              "value": "",
            },
            {
              "name": "AutoRenew",
              "value": "AutoRenew",
            },
            {
              "name": "ManualRenew",
              "value": "ManualRenew",
            },
            {
              "name": "PlanChange",
              "value": "PlanChange",
            },
            {
              "name": "QuantityChange",
              "value": "QuantityChange",
            },
            {
              "name": "Signup",
              "value": "Signup",
            },
          ],
        },
        "SharedEntitlementUsageRecord": {
          "docs": undefined,
          "properties": {
            "amounts": {
              "docs": undefined,
              "type": "optional<list<double>>",
            },
            "date": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "keys": {
              "docs": undefined,
              "type": "optional<list<string>>",
            },
            "quantities": {
              "docs": undefined,
              "type": "optional<list<double>>",
            },
          },
        },
        "SharedEntityType": {
          "docs": undefined,
          "enum": [
            {
              "name": "ORGANIZATION",
              "value": "ORGANIZATION",
            },
            {
              "name": "PRODUCT",
              "value": "PRODUCT",
            },
            {
              "name": "OFFER",
              "value": "OFFER",
            },
            {
              "name": "ENTITLEMENT",
              "value": "ENTITLEMENT",
            },
            {
              "name": "ENTITLEMENT_TERM",
              "value": "ENTITLEMENT_TERM",
            },
            {
              "name": "INTEGRATION",
              "value": "INTEGRATION",
            },
          ],
        },
        "SharedEulaType": {
          "docs": undefined,
          "enum": [
            {
              "name": "UNKNOWN",
              "value": "",
            },
            {
              "name": "SCMP",
              "value": "SCMP",
            },
            {
              "name": "ECMP",
              "value": "ECMP",
            },
            {
              "name": "CUSTOM",
              "value": "CUSTOM",
            },
            {
              "name": "ISV",
              "value": "ISV",
            },
            {
              "name": "CURRENT",
              "value": "CURRENT",
            },
          ],
        },
        "SharedGcpCommerceProducerExternalAccountSpec": {
          "docs": undefined,
          "properties": {
            "loginUri": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "signupUri": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "singleSignOnUri": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedGcpCommerceProducerListingSpec": {
          "docs": undefined,
          "properties": {
            "externalAccountSpec": {
              "docs": undefined,
              "type": "optional<SharedGcpCommerceProducerExternalAccountSpec>",
            },
            "listingType": {
              "docs": undefined,
              "type": "optional<SharedGcpCommerceProducerListingSpecListingType>",
            },
            "marketingSpec": {
              "docs": undefined,
              "type": "optional<SharedGcpCommerceProducerMarketingSpec>",
            },
            "purchaseSpec": {
              "docs": undefined,
              "type": "optional<SharedGcpCommerceProducerPurchaseSpec>",
            },
          },
        },
        "SharedGcpCommerceProducerListingSpecListingType": {
          "docs": undefined,
          "enum": [
            {
              "name": "BillingIntegratedManagedService",
              "value": "BillingIntegratedManagedService",
            },
          ],
        },
        "SharedGcpCommerceProducerMarketingSpec": {
          "docs": undefined,
          "properties": {
            "description": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "displayNames": {
              "docs": "In format of "{provider-id}/{product-name}"",
              "type": "optional<list<string>>",
            },
            "eulaUrl": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "externalMarketingUrl": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "icon": {
              "docs": "In format of "base64://..."",
              "type": "optional<string>",
            },
            "searchCategories": {
              "docs": undefined,
              "type": "optional<list<string>>",
            },
            "searchDescription": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "searchKeywords": {
              "docs": undefined,
              "type": "optional<list<string>>",
            },
            "shortTitle": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "supportSpec": {
              "docs": undefined,
              "type": "optional<SharedGcpCommerceProducerSupportSpec>",
            },
            "title": {
              "docs": "The product title.",
              "type": "optional<string>",
            },
          },
        },
        "SharedGcpCommerceProducerPrice": {
          "docs": undefined,
          "properties": {
            "currencyCode": {
              "docs": "ISO currency code, Three UPPER_CASE characters",
              "type": "optional<string>",
            },
            "nanos": {
              "docs": "Decimal part of the price. For example, 2000000 = 0.002, 200000000 = 0.2",
              "type": "optional<integer>",
            },
            "units": {
              "docs": "Integer part of the price.",
              "type": "optional<integer>",
            },
          },
        },
        "SharedGcpCommerceProducerPriceInfo": {
          "docs": undefined,
          "properties": {
            "description": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "priceModel": {
              "docs": undefined,
              "type": "optional<SharedGcpCommerceProducerPriceModel>",
            },
            "subscriptionPlans": {
              "docs": "Commit price plan, when priceModel = SUBSCRIPTION or SUBSCRIPTION_PLUS_USAGE.",
              "type": "optional<list<SharedGcpCommerceProducerPriceSubscription>>",
            },
            "usageFees": {
              "docs": "Usage based metering plan, when priceModel =  USAGE or SUBSCRIPTION_PLUS_USAGE",
              "type": "optional<list<SharedGcpCommerceProducerPriceUsage>>",
            },
          },
        },
        "SharedGcpCommerceProducerPriceModel": {
          "docs": undefined,
          "enum": [
            {
              "name": "FREE",
              "value": "FREE",
            },
            {
              "name": "SUBSCRIPTION",
              "value": "SUBSCRIPTION",
            },
            {
              "name": "USAGE",
              "value": "USAGE",
            },
            {
              "name": "SUBSCRIPTION_PLUS_USAGE",
              "value": "SUBSCRIPTION_PLUS_USAGE",
            },
          ],
        },
        "SharedGcpCommerceProducerPriceSubscription": {
          "docs": undefined,
          "properties": {
            "period": {
              "docs": undefined,
              "type": "optional<SharedGcpCommerceProducerPriceSubscriptionPeriod>",
            },
            "price": {
              "docs": "the Monthly subscription fee as commit.",
              "type": "optional<SharedGcpCommerceProducerPrice>",
            },
            "taxCategoryOverride": {
              "docs": undefined,
              "type": "optional<SharedGcpCommerceProducerPriceSubscriptionTaxCategoryOverride>",
            },
          },
        },
        "SharedGcpCommerceProducerPriceSubscriptionPeriod": {
          "docs": undefined,
          "enum": [
            {
              "name": "ONE_YEAR",
              "value": "ONE_YEAR",
            },
          ],
        },
        "SharedGcpCommerceProducerPriceSubscriptionTaxCategoryOverride": {
          "docs": undefined,
          "enum": [
            {
              "name": "TAX_CATEGORY_UNSPECIFIED",
              "value": "TAX_CATEGORY_UNSPECIFIED",
            },
          ],
        },
        "SharedGcpCommerceProducerPriceTier": {
          "docs": undefined,
          "properties": {
            "endUsageAmount": {
              "docs": "The usage amount below which this tier is effective.",
              "type": "optional<double>",
            },
            "price": {
              "docs": "The price of this tier",
              "type": "optional<SharedGcpCommerceProducerPrice>",
            },
            "startUsageAmount": {
              "docs": "The usage amount beyond which this tier is effective.",
              "type": "optional<double>",
            },
          },
        },
        "SharedGcpCommerceProducerPriceUsage": {
          "docs": undefined,
          "properties": {
            "displayQuantity": {
              "docs": "Default value is 1.",
              "type": "optional<integer>",
            },
            "metricId": {
              "docs": "the usage metering dimension key",
              "type": "optional<string>",
            },
            "priceTiers": {
              "docs": undefined,
              "type": "optional<list<SharedGcpCommerceProducerPriceTier>>",
            },
            "taxCategoryOverride": {
              "docs": undefined,
              "type": "optional<SharedGcpCommerceProducerPriceUsageTaxCategoryOverride>",
            },
          },
        },
        "SharedGcpCommerceProducerPriceUsageTaxCategoryOverride": {
          "docs": undefined,
          "enum": [
            {
              "name": "TAX_CATEGORY_UNSPECIFIED",
              "value": "TAX_CATEGORY_UNSPECIFIED",
            },
          ],
        },
        "SharedGcpCommerceProducerPurchaseMetric": {
          "docs": undefined,
          "properties": {
            "description": {
              "docs": "Description: A detailed description of the metric, which can be used in documentation.",
              "type": "optional<string>",
            },
            "displayName": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "displayUnit": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "displayUnitDescription": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": "The usage metering dimension key, in format of "{plan_key}_{usage_dimension_key}"",
              "type": "optional<string>",
            },
            "metricKind": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "name": {
              "docs": "Name: The resource name of the metric descriptor, in format of "{service_name}/{plan_key}_{usage_dimension_key}"",
              "type": "optional<string>",
            },
            "reportingUnit": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "unit": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "valueType": {
              "docs": undefined,
              "type": "optional<SharedValueType>",
            },
          },
        },
        "SharedGcpCommerceProducerPurchaseSpec": {
          "docs": undefined,
          "properties": {
            "metrics": {
              "docs": undefined,
              "type": "optional<list<SharedGcpCommerceProducerPurchaseMetric>>",
            },
            "purchaseOptionSpecs": {
              "docs": undefined,
              "type": "optional<list<SharedGcpPurchasePlan>>",
            },
          },
        },
        "SharedGcpCommerceProducerServiceBilling": {
          "docs": undefined,
          "properties": {
            "metrics": {
              "docs": "in format of ["{product-name}.endpoints.{provider-id}.cloud.goog/{plan_key}_{usage_dimension_key}"]",
              "type": "optional<list<string>>",
            },
          },
        },
        "SharedGcpCommerceProducerServiceConfig": {
          "docs": undefined,
          "properties": {
            "billing": {
              "docs": undefined,
              "type": "optional<SharedGcpCommerceProducerServiceBilling>",
            },
            "metrics": {
              "docs": "Metrics: Defines the metrics used by this service.",
              "type": "optional<list<SharedGcpCommerceProducerPurchaseMetric>>",
            },
            "name": {
              "docs": "In format of "{product-name}.endpoints.{provider-id}.cloud.goog"",
              "type": "optional<string>",
            },
            "producerProjectId": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "title": {
              "docs": "The Product title",
              "type": "optional<string>",
            },
          },
        },
        "SharedGcpCommerceProducerSupportSpec": {
          "docs": undefined,
          "properties": {
            "description": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "email": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "uri": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedGcpIntegration": {
          "docs": undefined,
          "properties": {
            "gcpProjectId": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "gcpProjectNumber": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "identityProviderId": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "partnerId": {
              "docs": "The GCP Marketplace Partner ID, it is also called as Provider ID somewhere.",
              "type": "optional<string>",
            },
            "pubsubTopic": {
              "docs": "The resource name of the Pub/Sub topic to receive notifications from Google when a user signs up for your service, purchases a plan, or changes an existing plan.",
              "type": "optional<string>",
            },
            "reportBucket": {
              "docs": "The GCP storage bucket name to store the GCP Marketplace reports.",
              "type": "optional<string>",
            },
            "reportFullSyncDone": {
              "docs": "Is GCP Marketplace Report full-sync done.",
              "type": "optional<boolean>",
            },
            "reportStartDate": {
              "docs": "The UTC date when GCP Marketplace reprots start to generate.",
              "type": "optional<string>",
            },
            "serviceAccountEmail": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "serviceNames": {
              "docs": "The array of service resource names of the listings in GCP Marketplace.",
              "type": "optional<list<string>>",
            },
            "workloadIdentityPoolId": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedGcpMarketplaceConsumer": {
          "docs": undefined,
          "properties": {
            "project": {
              "docs": "The project name with format \`projects/\`.",
              "type": "optional<string>",
            },
          },
        },
        "SharedGcpMarketplaceEntitlement": {
          "docs": undefined,
          "properties": {
            "account": {
              "docs": "The resource name of the account that this entitlement is based on, if any, in format ""providers/{provider_id}/accounts/{account_id}"",
              "type": "optional<string>",
            },
            "consumers": {
              "docs": "The resources using this entitlement, if applicable.",
              "type": "optional<list<SharedGcpMarketplaceConsumer>>",
            },
            "createTime": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": "Entitlement Id generated by GCP Marketplace. For Marketplace pub/sub event.",
              "type": "optional<string>",
            },
            "inputProperties": {
              "docs": "The custom properties that were collected from the user to create this entitlement.",
              "type": "optional<list<integer>>",
            },
            "messageToUser": {
              "docs": "Provider-supplied message that is displayed to the end user. Currently this is used to communicate progress and ETA for
provisioning. This field can be updated only when a user is waiting for an action from the provider, i.e. entitlement state is
EntitlementState.ENTITLEMENT_ACTIVATION_REQUESTED or EntitlementState.ENTITLEMENT_PENDING_PLAN_CHANGE_APPROVAL. This field is cleared automatically when the entitlement state changes.",
              "type": "optional<string>",
            },
            "name": {
              "docs": "The resource name of the entitlement. Entitlement names have the form \`providers/{provider_id}/entitlements/{entitlement_id}\`.",
              "type": "optional<string>",
            },
            "newOfferDuration": {
              "docs": "in ISO 8601 duration format, such as "P2Y3M". For Marketplace pub/sub event.",
              "type": "optional<string>",
            },
            "newOfferEndTime": {
              "docs": "Output only. The end time of the new offer. Field is empty if the pending plan change is not moving to an offer.
If the offer was created with a term instead of a specified end date, this field is empty.",
              "type": "optional<string>",
            },
            "newOfferStartTime": {
              "docs": "Output only. The start time of the new offer. Field is empty if the pending plan change is not moving to an offer.",
              "type": "optional<string>",
            },
            "newPendingOffer": {
              "docs": "The name of the offer the entitlement is switching to upon a pending plan change. Only exists if the
pending plan change is moving to an offer. Format:
'projects/{project}/services/{service}/privateOffers/{offer-id}' OR
'projects/{project}/services/{service}/standardOffers/{offer-id}',
depending on whether the offer is private or public.",
              "type": "optional<string>",
            },
            "newPendingOfferDuration": {
              "docs": "The offer duration of the new offer in ISO 8601 duration format. Field is empty if the pending plan
change is not moving to an offer since the entitlement is not pending, only the plan change is pending.",
              "type": "optional<string>",
            },
            "newPendingPlan": {
              "docs": "The identifier of the pending new plan. Required if the product has plans and the entitlement has a pending plan change.",
              "type": "optional<string>",
            },
            "newPlan": {
              "docs": "When the buyer changes plan, For Marketplace pub/sub event.",
              "type": "optional<string>",
            },
            "offer": {
              "docs": "The name of the offer that was procured. Field is empty if order was not made using an offer. Format:
'projects/{project}/services/{service}/privateOffers/{offer-id}' OR 'projects/{project}/services/{service}/standardOffers/{offer-id}',
depending on whether the offer is private or public.",
              "type": "optional<string>",
            },
            "offerDuration": {
              "docs": "The offer duration of the current offer in ISO 8601 duration format. Field is empty if entitlement was not made using an offer, such as "P1Y", "P2M"",
              "type": "optional<string>",
            },
            "offerEndTime": {
              "docs": "Output only. End time for the Offer association corresponding to this entitlement. The field is only populated if the entitlement is currently associated with an Offer.",
              "type": "optional<string>",
            },
            "plan": {
              "docs": "The identifier of the plan that was procured. Required if the product has plans.",
              "type": "optional<string>",
            },
            "product": {
              "docs": "The identifier of the entity that was purchased. This may actually represent a product, quote, or offer.
For Private offer, "projects/project-id/services/product-id.endpoints.partner-id.cloud.goog/privateOffers/private-offer-id"",
              "type": "optional<string>",
            },
            "productExternalName": {
              "docs": "The identifier of the product that was procured.",
              "type": "optional<string>",
            },
            "provider": {
              "docs": "The ID of the service provider under Cloud Commerce platform that this entitlement was created against.",
              "type": "optional<string>",
            },
            "quoteExternalName": {
              "docs": "The identifier of the quote that was used to procure, such as the private offer Id. Empty if the order is not purchased using a quote.",
              "type": "optional<string>",
            },
            "state": {
              "docs": "Enums of the Entitlement State. https://cloud.google.com/marketplace/docs/partners/commerce-procurement-api/reference/rest/v1/providers.entitlements#EntitlementState",
              "type": "optional<SharedGcpMarketplaceEntitlementState>",
            },
            "subscriptionEndTime": {
              "docs": "The End time for the subscription corresponding to this entitlement.",
              "type": "optional<string>",
            },
            "updateTime": {
              "docs": "The last update timestamp. It is the endTime for the cancelled entitlement.",
              "type": "optional<string>",
            },
            "usageReportingId": {
              "docs": "The consumerId to use when reporting usage through the Service Control API. See the consumerId field at
Reporting Metrics (https://cloud.google.com/service-control/reporting-metrics) for more details.
This field is present only if the product has usage-based billing configured.",
              "type": "optional<string>",
            },
          },
        },
        "SharedGcpMarketplaceEntitlementState": {
          "docs": undefined,
          "enum": [
            {
              "name": "STATE_UNSPECIFIED",
              "value": "ENTITLEMENT_STATE_UNSPECIFIED",
            },
            {
              "name": "ACTIVATION_REQUESTED",
              "value": "ENTITLEMENT_ACTIVATION_REQUESTED",
            },
            {
              "name": "ACTIVE",
              "value": "ENTITLEMENT_ACTIVE",
            },
            {
              "name": "PENDING_CANCELLATION",
              "value": "ENTITLEMENT_PENDING_CANCELLATION",
            },
            {
              "name": "CANCELLED",
              "value": "ENTITLEMENT_CANCELLED",
            },
            {
              "name": "PENDING_PLAN_CHANGE",
              "value": "ENTITLEMENT_PENDING_PLAN_CHANGE",
            },
            {
              "name": "PENDING_PLAN_CHANGE_APPROVAL",
              "value": "ENTITLEMENT_PENDING_PLAN_CHANGE_APPROVAL",
            },
            {
              "name": "SUSPENDED",
              "value": "ENTITLEMENT_SUSPENDED",
            },
          ],
        },
        "SharedGcpMarketplaceUserAccount": {
          "docs": undefined,
          "properties": {
            "approvals": {
              "docs": "The approvals for this account, that are permitted or have been completed.",
              "type": "optional<list<SharedGcpMarketplaceUserAccountApproval>>",
            },
            "createTime": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": "GCP Marketplace User Account ID.",
              "type": "optional<string>",
            },
            "inputProperties": {
              "docs": "RFC3339 UTC timestamp",
              "type": "optional<list<integer>>",
            },
            "name": {
              "docs": "The resource name of the account. Account names have the form providers/{provider_id}/accounts/{account_id}.",
              "type": "optional<string>",
            },
            "provider": {
              "docs": "The identifier of the service provider (SaaS Seller) that this account was created against.",
              "type": "optional<string>",
            },
            "state": {
              "docs": "The state of the account. An account might not be able to make a purchase if the billing account is suspended, for example.",
              "type": "optional<SharedGcpMarketplaceUserAccountState>",
            },
            "updateTime": {
              "docs": "RFC3339 UTC timestamp",
              "type": "optional<string>",
            },
            "userInfo": {
              "docs": undefined,
              "type": "optional<SharedGcpUserInfo>",
            },
          },
        },
        "SharedGcpMarketplaceUserAccountApproval": {
          "docs": undefined,
          "properties": {
            "name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "reason": {
              "docs": "An explanation for the state of the approval.",
              "type": "optional<string>",
            },
            "state": {
              "docs": undefined,
              "type": "optional<SharedGcpMarketplaceUserAccountApprovalState>",
            },
            "updateTime": {
              "docs": "RFC3339 UTC timestamp",
              "type": "optional<string>",
            },
          },
        },
        "SharedGcpMarketplaceUserAccountApprovalState": {
          "docs": undefined,
          "enum": [
            {
              "name": "STATE_UNSPECIFIED",
              "value": "STATE_UNSPECIFIED",
            },
            {
              "name": "PENDING",
              "value": "PENDING",
            },
            {
              "name": "APPROVED",
              "value": "APPROVED",
            },
            {
              "name": "REJECTED",
              "value": "REJECTED",
            },
          ],
        },
        "SharedGcpMarketplaceUserAccountState": {
          "docs": undefined,
          "enum": [
            {
              "name": "UNSPECIFIED",
              "value": "ACCOUNT_STATE_UNSPECIFIED",
            },
            {
              "name": "ACTIVE",
              "value": "ACCOUNT_ACTIVE",
            },
          ],
        },
        "SharedGcpProduct": {
          "docs": undefined,
          "properties": {
            "createTime": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": "Nullable, GCP Marketplace Product UUID",
              "type": "optional<string>",
            },
            "listingSpec": {
              "docs": undefined,
              "type": "optional<SharedGcpCommerceProducerListingSpec>",
            },
            "marketplace": {
              "docs": undefined,
              "type": "optional<SharedGcpProductMarketplace>",
            },
            "name": {
              "docs": "In format of "projects/{project-number}/listings/{product-name}.endpoints.{provider-id}.cloud.goog"",
              "type": "optional<string>",
            },
            "service": {
              "docs": "In format of "services/{product-name}.endpoints.{provider-id}.cloud.goog"",
              "type": "optional<string>",
            },
            "serviceConfig": {
              "docs": undefined,
              "type": "optional<SharedGcpCommerceProducerServiceConfig>",
            },
          },
        },
        "SharedGcpProductMarketplace": {
          "docs": undefined,
          "enum": [
            {
              "name": "MarketplacesGoogleCloud",
              "value": "marketplaces/google-cloud",
            },
          ],
        },
        "SharedGcpPurchasePlan": {
          "docs": undefined,
          "properties": {
            "name": {
              "docs": "The Plan key.",
              "type": "optional<string>",
            },
            "priceInfo": {
              "docs": undefined,
              "type": "optional<SharedGcpCommerceProducerPriceInfo>",
            },
            "purchaseMode": {
              "docs": undefined,
              "type": "optional<SharedGcpPurchasePlanPurchaseMode>",
            },
            "title": {
              "docs": "The Plan title",
              "type": "optional<string>",
            },
          },
        },
        "SharedGcpPurchasePlanPurchaseMode": {
          "docs": undefined,
          "enum": [
            {
              "name": "PURCHASE_MODE_PUBLIC",
              "value": "PURCHASE_MODE_PUBLIC",
            },
          ],
        },
        "SharedGcpUserInfo": {
          "docs": undefined,
          "properties": {
            "roles": {
              "docs": "An array of strings representing the user's roles. Right now, it can be either: ** account_admin, which indicates that the user is a Billing Account Administrator of the billing account that purchased the product, or ** project_editor, which indicates that the user is a Project Editor, but not a Billing Administrator, of the project under that billing account.",
              "type": "optional<list<string>>",
            },
            "user_identity": {
              "docs": "The user's obfuscated GAIA ID, which can be used to initiate Open ID Connect.",
              "type": "optional<string>",
            },
          },
        },
        "SharedGetRevenueReportParamsPartner": {
          "docs": "Required.",
          "enum": [
            {
              "name": "AWS",
              "value": "AWS",
            },
            {
              "name": "AZURE",
              "value": "AZURE",
            },
            {
              "name": "GCP",
              "value": "GCP",
            },
          ],
        },
        "SharedGetRevenueReportParamsService": {
          "docs": "Required.",
          "enum": [
            {
              "name": "MARKETPLACE",
              "value": "MARKETPLACE",
            },
          ],
        },
        "SharedHubspotCrmCredential": {
          "docs": undefined,
          "properties": {
            "accessToken": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "acquiredOn": {
              "docs": "UTC timestamp on receiving the auth response",
              "type": "optional<integer>",
            },
            "expiresIn": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "refreshToken": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedHubspotCrmIntegration": {
          "docs": undefined,
          "properties": {
            "credential": {
              "docs": undefined,
              "type": "optional<SharedHubspotCrmCredential>",
            },
            "portalId": {
              "docs": "Hubspot Account Id",
              "type": "optional<integer>",
            },
            "secretKey": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedIdentityBuyer": {
          "docs": undefined,
          "properties": {
            "creationTime": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "description": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "externalID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "info": {
              "docs": undefined,
              "type": "optional<SharedBuyerInfo>",
            },
            "lastUpdateTime": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "organizationID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "partner": {
              "docs": undefined,
              "type": "optional<SharedIdentityBuyerPartner>",
            },
          },
        },
        "SharedIdentityBuyerPartner": {
          "docs": undefined,
          "enum": [
            {
              "name": "AWS",
              "value": "AWS",
            },
            {
              "name": "AZURE",
              "value": "AZURE",
            },
            {
              "name": "GCP",
              "value": "GCP",
            },
          ],
        },
        "SharedIdentityIntegration": {
          "docs": undefined,
          "properties": {
            "createdBy": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "creationTime": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "info": {
              "docs": undefined,
              "type": "optional<SharedIntegrationInfo>",
            },
            "lastUpdateTime": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "lastUpdatedBy": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "organizationID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "partner": {
              "docs": undefined,
              "type": "optional<SharedIdentityIntegrationPartner>",
            },
            "service": {
              "docs": undefined,
              "type": "optional<SharedIdentityIntegrationService>",
            },
            "status": {
              "docs": undefined,
              "type": "optional<SharedIdentityIntegrationStatus>",
            },
          },
        },
        "SharedIdentityIntegrationPartner": {
          "docs": undefined,
          "enum": [
            {
              "name": "AWS",
              "value": "AWS",
            },
            {
              "name": "AZURE",
              "value": "AZURE",
            },
            {
              "name": "GCP",
              "value": "GCP",
            },
          ],
        },
        "SharedIdentityIntegrationService": {
          "docs": undefined,
          "enum": [
            {
              "name": "MARKETPLACE",
              "value": "MARKETPLACE",
            },
          ],
        },
        "SharedIdentityIntegrationStatus": {
          "docs": undefined,
          "enum": [
            {
              "name": "CREATED",
              "value": "CREATED",
            },
            {
              "name": "VERIFIED",
              "value": "VERIFIED",
            },
            {
              "name": "NOT_VERIFIED",
              "value": "NOT_VERIFIED",
            },
          ],
        },
        "SharedIntegrationInfo": {
          "docs": undefined,
          "properties": {
            "awsAceIntegration": {
              "docs": "AWS ACE Integration",
              "type": "optional<SharedAwsAceIntegration>",
            },
            "awsIntegration": {
              "docs": "AWS Marketplace Integration",
              "type": "optional<SharedAwsMarketplaceIntegration>",
            },
            "azureIntegration": {
              "docs": "Azure Marketplace Integration",
              "type": "optional<SharedAzureIntegration>",
            },
            "gcpIntegration": {
              "docs": "GCP Marketplace Integration",
              "type": "optional<SharedGcpIntegration>",
            },
            "hubspotCrmIntegration": {
              "docs": "Integration for HubSpot CRM",
              "type": "optional<SharedHubspotCrmIntegration>",
            },
            "salesforceCrmIntegration": {
              "docs": "Integration for Salesforce CRM",
              "type": "optional<SharedSalesforceCrmIntegration>",
            },
            "slackIntegration": {
              "docs": undefined,
              "type": "optional<SharedSlackIntegration>",
            },
          },
        },
        "SharedListRevenueRecordDetailsResponse": {
          "docs": undefined,
          "properties": {
            "nextOffset": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "revenueRecordDetails": {
              "docs": undefined,
              "type": "optional<list<SharedRevenueRecordDetail>>",
            },
          },
        },
        "SharedListRevenueRecordsResponse": {
          "docs": undefined,
          "properties": {
            "nextOffset": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "revenueRecords": {
              "docs": undefined,
              "type": "optional<list<SharedRevenueRecord>>",
            },
          },
        },
        "SharedListUsageRecordGroupsResponse": {
          "docs": undefined,
          "properties": {
            "nextOffset": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "usageRecordGroups": {
              "docs": undefined,
              "type": "optional<list<SharedMeteringUsageRecordGroup>>",
            },
          },
        },
        "SharedListUsageRecordReportsResponse": {
          "docs": undefined,
          "properties": {
            "nextOffset": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "usageRecordReports": {
              "docs": undefined,
              "type": "optional<list<SharedMeteringUsageRecordReport>>",
            },
          },
        },
        "SharedMeteringDimension": {
          "docs": "The dimension to meter usage in entitlement.",
          "properties": {
            "category": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "description": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "includedBaseQuantities": {
              "docs": "how many quantities of this dimension are included in the commit.",
              "type": "optional<list<AzureIncludedBaseQuantity>>",
            },
            "key": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "name": {
              "docs": "Display name of the dimension",
              "type": "optional<string>",
            },
            "rate": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "types": {
              "docs": undefined,
              "type": "optional<list<string>>",
            },
            "usageCount": {
              "docs": "The current Dimension Usage Count. Available when call GetEntitlement API.",
              "type": "optional<SharedUsageCount>",
            },
            "valueType": {
              "docs": undefined,
              "type": "optional<SharedValueType>",
            },
          },
        },
        "SharedMeteringUsageRecordGroup": {
          "docs": undefined,
          "properties": {
            "creationTime": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "entitlementID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "lastUpdateTime": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "metaInfo": {
              "docs": undefined,
              "type": "optional<SharedMeteringUsageRecordGroupMetaInfo>",
            },
            "organizationID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "records": {
              "docs": undefined,
              "type": "optional<map<string, optional<double>>>",
            },
            "serialID": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "status": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "usageRecordReportID": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedMeteringUsageRecordGroupMetaInfo": {
          "docs": undefined,
          "properties": {
            "originRecords": {
              "docs": "The original records reported by the customer before convertion. If no dimension mapping is applied, this field is the same as the records field.",
              "type": "optional<map<string, optional<double>>>",
            },
          },
        },
        "SharedMeteringUsageRecordReport": {
          "docs": undefined,
          "properties": {
            "creationTime": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "entitlementID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "entitlementTermID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "info": {
              "docs": undefined,
              "type": "optional<SharedMeteringUsageRecordReportInfo>",
            },
            "organizationID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "productID": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedMeteringUsageRecordReportInfo": {
          "docs": undefined,
          "properties": {
            "awsMeteringResponse": {
              "docs": "The raw response from AWS metering service.",
              "type": "optional<MarketplacemeteringBatchMeterUsageOutput>",
            },
            "azureMeteringResponse": {
              "docs": "The raw response from Azure metering service.",
              "type": "optional<GithubComSugerioMarketplaceServiceAzureSdkMarketplacemeteringv1BatchUsageEventOkResponse>",
            },
            "commitAmount": {
              "docs": "The amount of the commit if applicable.",
              "type": "optional<double>",
            },
            "creditAmount": {
              "docs": "The amount of the credit if applicable.",
              "type": "optional<double>",
            },
            "creditRecords": {
              "docs": "The credit usage records in the map of <DimensionKey, Count>",
              "type": "optional<map<string, optional<double>>>",
            },
            "dimensionUnitPrice": {
              "docs": "The unit price of each dimension in the map of <DimensionKey, UnitPrice>",
              "type": "optional<map<string, optional<double>>>",
            },
            "endTime": {
              "docs": "time in UTC when the UsageRecordReport ends",
              "type": "optional<string>",
            },
            "gcpMeteringResponse": {
              "docs": "The raw response from GCP metering service.",
              "type": "optional<ServicecontrolReportResponse>",
            },
            "includedRecords": {
              "docs": "The included usage records in the map of <DimensionKey, Count>",
              "type": "optional<map<string, optional<double>>>",
            },
            "reportedRecords": {
              "docs": "The reported usage records in the map of <DimensionKey, Count>",
              "type": "optional<map<string, optional<double>>>",
            },
            "startTime": {
              "docs": "time in UTC when the UsageRecordReport starts",
              "type": "optional<string>",
            },
            "usageRecordGroupIds": {
              "docs": "The IDs of UsageRecordGroups aggregated in this UsageRecordReport.",
              "type": "optional<list<string>>",
            },
            "usedCommitAmount": {
              "docs": "The amount of the used commit before the this usage record report if applicable.",
              "type": "optional<double>",
            },
            "usedCommitAmountIncrement": {
              "docs": "The amount of the used commit increment in this usage record report if applicable.",
              "type": "optional<double>",
            },
            "usedCreditAmount": {
              "docs": "The amount of the used credit before the this usage record report if applicable.",
              "type": "optional<double>",
            },
            "usedCreditAmountIncrement": {
              "docs": "The amount of the used credit increment in this usage record report if applicable.",
              "type": "optional<double>",
            },
          },
        },
        "SharedNotificationEvent": {
          "docs": undefined,
          "properties": {
            "action": {
              "docs": undefined,
              "type": "optional<SharedNotificationEventAction>",
            },
            "entityID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "entityStatus": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "entityType": {
              "docs": undefined,
              "type": "optional<SharedEntityType>",
            },
            "eventID": {
              "docs": "notification event id.",
              "type": "optional<string>",
            },
            "eventStatus": {
              "docs": "notification event status.",
              "type": "optional<SharedNotificationEventStatus>",
            },
            "lastUpdateTime": {
              "docs": "timestamp of the event when it is updated.",
              "type": "optional<string>",
            },
            "message": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "organizationID": {
              "docs": "suger organization id.",
              "type": "optional<string>",
            },
            "timestamp": {
              "docs": "timestamp of the event when it is scheduled or created.",
              "type": "optional<string>",
            },
          },
        },
        "SharedNotificationEventAction": {
          "docs": undefined,
          "enum": [
            {
              "name": "ACCEPT",
              "value": "ACCEPT",
            },
            {
              "name": "CREATE",
              "value": "CREATE",
            },
            {
              "name": "DELETE",
              "value": "DELETE",
            },
            {
              "name": "CANCEL",
              "value": "CANCEL",
            },
            {
              "name": "PENDING_CANCEL",
              "value": "PENDING_CANCEL",
            },
            {
              "name": "EXPIRE",
              "value": "EXPIRE",
            },
            {
              "name": "REINSTATE",
              "value": "REINSTATE",
            },
            {
              "name": "SUSPEND",
              "value": "SUSPEND",
            },
            {
              "name": "UPDATE",
              "value": "UPDATE",
            },
            {
              "name": "NOTIFY_CONTACTS",
              "value": "NOTIFY_CONTACTS",
            },
            {
              "name": "TEST",
              "value": "TEST",
            },
          ],
        },
        "SharedNotificationEventStatus": {
          "docs": undefined,
          "enum": [
            {
              "name": "UNKNOWN",
              "value": "",
            },
            {
              "name": "SCHEDULED",
              "value": "SCHEDULED",
            },
            {
              "name": "PENDING",
              "value": "PENDING",
            },
            {
              "name": "DONE",
              "value": "DONE",
            },
            {
              "name": "FAILED",
              "value": "FAILED",
            },
          ],
        },
        "SharedOfferInfo": {
          "docs": undefined,
          "properties": {
            "azureOriginalPlan": {
              "docs": "The origin pricing of Azure plan. Only applicable for Azure Marketplace plans.",
              "type": "optional<AzurePriceAndAvailabilityPrivateOfferPlan>",
            },
            "azurePrivateOffer": {
              "docs": "The private offer for Azure Marketplace. Only applicable for Azure Marketplace private offers.",
              "type": "optional<AzureMarketplacePrivateOffer>",
            },
            "azureProductVariant": {
              "docs": undefined,
              "type": "optional<AzureProductVariant>",
            },
            "buyerAwsAccountIds": {
              "docs": "The buyers' AWS Account IDs of this offer.",
              "type": "optional<list<string>>",
            },
            "buyerAzureTenants": {
              "docs": "The buyers' Azure tenants of this offer.",
              "type": "optional<list<AzureAudience>>",
            },
            "commits": {
              "docs": undefined,
              "type": "optional<list<SharedCommitDimension>>",
            },
            "currency": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "dimensions": {
              "docs": undefined,
              "type": "optional<list<SharedMeteringDimension>>",
            },
            "discount": {
              "docs": "The rate of discount (0 ~ 1.0), such as 0.1 which is 10% off. 0 which is no discount.",
              "type": "optional<double>",
            },
            "eulaType": {
              "docs": undefined,
              "type": "optional<SharedEulaType>",
            },
            "eulaUrl": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "gcpMetrics": {
              "docs": "Only applicable for GCP Marketplace Offers (the default or private offer)",
              "type": "optional<list<SharedGcpCommerceProducerPurchaseMetric>>",
            },
            "gcpPlans": {
              "docs": "Only applicable for GCP Marketplace Offers (the default or private offer).",
              "type": "optional<list<SharedGcpPurchasePlan>>",
            },
            "paymentInstallments": {
              "docs": "For flexible payment schedule. Not empty if it is enabled.",
              "type": "optional<list<SharedPaymentInstallment>>",
            },
            "privateOfferUrl": {
              "docs": "The URL of the private offer sent to buyers to accept. Only applicable for private offer.",
              "type": "optional<string>",
            },
            "refundCancelationPolicy": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "sellerNotes": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "visibility": {
              "docs": "The default visibility of offer is PRIVATE.",
              "type": "optional<SharedOfferInfoVisibility>",
            },
          },
        },
        "SharedOfferInfoVisibility": {
          "docs": undefined,
          "enum": [
            {
              "name": "PRIVATE",
              "value": "PRIVATE",
            },
            {
              "name": "PUBLIC",
              "value": "PUBLIC",
            },
          ],
        },
        "SharedOfferMetaInfo": {
          "docs": undefined,
          "properties": {
            "baseAgreementId": {
              "docs": "Applicable for AWS Marketplace only, when the IsAgreementBasedOffer is true.",
              "type": "optional<string>",
            },
            "contacts": {
              "docs": "The contacts of the offer to notify if any updates.",
              "type": "optional<list<SharedContact>>",
            },
            "isAgreementBasedOffer": {
              "docs": "Applicable for AWS Marketplace only, If this offer is agreement based offer.",
              "type": "optional<boolean>",
            },
            "isRenewalOffer": {
              "docs": "Applicable for AWS Marketplace only, If this offer is renewal offer.",
              "type": "optional<boolean>",
            },
            "notifications": {
              "docs": "The notifications of the offer if any updates. In most cases, it is to notify contacts/buyers when the offer is pending acceptance.",
              "type": "optional<list<SharedNotificationEvent>>",
            },
          },
        },
        "SharedOperation": {
          "docs": undefined,
          "properties": {
            "endTime": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": "Operation ID.",
              "type": "optional<string>",
            },
            "message": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "startTime": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "status": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "type": {
              "docs": undefined,
              "type": "optional<SharedOperationType>",
            },
          },
        },
        "SharedOperationType": {
          "docs": undefined,
          "enum": [
            {
              "name": "OperationType_TemporalWorkflow",
              "value": "TemporalWorkflow",
            },
          ],
        },
        "SharedPaymentInstallment": {
          "docs": undefined,
          "properties": {
            "amount": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "chargeOn": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedProductInfo": {
          "docs": undefined,
          "properties": {
            "attributes": {
              "docs": undefined,
              "type": "optional<map<string, optional<string>>>",
            },
            "awsSaasProduct": {
              "docs": undefined,
              "type": "optional<SharedAwsSaasProduct>",
            },
            "awsSnsSubscriptions": {
              "docs": undefined,
              "type": "optional<list<SharedAwsSnsSubscription>>",
            },
            "azureProduct": {
              "docs": undefined,
              "type": "optional<AzureProduct>",
            },
            "commits": {
              "docs": undefined,
              "type": "optional<list<SharedCommitDimension>>",
            },
            "currency": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "dimensions": {
              "docs": undefined,
              "type": "optional<list<SharedMeteringDimension>>",
            },
            "eulaUrl": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "gcpProduct": {
              "docs": undefined,
              "type": "optional<SharedGcpProduct>",
            },
            "refundCancelationPolicy": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "sellerNotes": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedRevenueRecord": {
          "docs": undefined,
          "properties": {
            "amount": {
              "docs": "The revenue amount for the revenue report",
              "type": "optional<double>",
            },
            "buyerID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "collectableAmount": {
              "docs": "The revenue amount that the seller/ISV can collect.",
              "type": "optional<double>",
            },
            "currency": {
              "docs": "The currency of the revenue in ISO 4217 format, such as "USD".",
              "type": "optional<string>",
            },
            "date": {
              "docs": "The date for the revenue report",
              "type": "optional<string>",
            },
            "disburseAmount": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "disburseDate": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "entitlementID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "info": {
              "docs": undefined,
              "type": "optional<SharedRevenueRecordInfo>",
            },
            "invoiceAmount": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "invoiceDate": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "organizationID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "partner": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "paymentDueDate": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "productID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "refundDisburseAmount": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "refundDisburseDate": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "refundInvoiceAmount": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "refundInvoiceDate": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "taxAmount": {
              "docs": undefined,
              "type": "optional<double>",
            },
          },
        },
        "SharedRevenueRecordDetail": {
          "docs": undefined,
          "properties": {
            "awsRevenueRecordDetail": {
              "docs": "For AWS Marketplace",
              "type": "optional<GithubComSugerioMarketplaceServiceRdsDbLibBillingAwsBillingEvent>",
            },
            "azureRevenueRecordDetail": {
              "docs": "For Azure Marketplace",
              "type": "optional<GithubComSugerioMarketplaceServiceRdsDbLibBillingAzureCmaRevenue>",
            },
            "gcpRevenueRecordDetail": {
              "docs": "For GCP Marketplace",
              "type": "optional<GithubComSugerioMarketplaceServiceRdsDbLibBillingGcpChargeUsage>",
            },
          },
        },
        "SharedRevenueRecordInfo": {
          "docs": undefined,
          "properties": {
            "awsRevenueRecords": {
              "docs": "For raw revenue records in AWS Marketplace",
              "type": "optional<list<GithubComSugerioMarketplaceServiceRdsDbLibBillingAwsBillingEvent>>",
            },
            "azureRevenueRecords": {
              "docs": "For raw revenue records in Azure Marketplace",
              "type": "optional<list<GithubComSugerioMarketplaceServiceRdsDbLibBillingAzureCmaRevenue>>",
            },
            "gcpRevenueRecords": {
              "docs": "For raw revenue records in GCP Marketplace",
              "type": "optional<list<GithubComSugerioMarketplaceServiceRdsDbLibBillingGcpChargeUsage>>",
            },
          },
        },
        "SharedRevenueReport": {
          "docs": undefined,
          "properties": {
            "buyerID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "entitlementID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "organizationID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "partner": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "productID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "reportDate": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "reportType": {
              "docs": undefined,
              "type": "optional<SharedRevenueReportType>",
            },
            "revenueRecords": {
              "docs": undefined,
              "type": "optional<list<SharedRevenueRecord>>",
            },
            "service": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedRevenueReportType": {
          "docs": undefined,
          "enum": [
            {
              "name": "InvoicedAmount",
              "value": "InvoicedAmount",
            },
            {
              "name": "CollectableAmount",
              "value": "CollectableAmount",
            },
            {
              "name": "DisbursedAmount",
              "value": "DisbursedAmount",
            },
          ],
        },
        "SharedSalesforceCrmCredential": {
          "docs": undefined,
          "properties": {
            "access_token": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "exp": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "instance_url": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "refresh_token": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedSalesforceCrmIntegration": {
          "docs": undefined,
          "properties": {
            "credential": {
              "docs": "System created",
              "type": "optional<SharedSalesforceCrmCredential>",
            },
            "filters": {
              "docs": undefined,
              "type": "optional<list<SharedSalesforceSyncFilter>>",
            },
            "instanceUrl": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "isSandbox": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "secretKey": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "subdomain": {
              "docs": "User defined when setting up the integration",
              "type": "optional<string>",
            },
          },
        },
        "SharedSalesforceSyncFilter": {
          "docs": undefined,
          "properties": {
            "fieldName": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "operator": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "value": "unknown",
          },
        },
        "SharedSlackIntegration": {
          "docs": undefined,
          "properties": {
            "accessToken": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "appId": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "authedUser": {
              "docs": undefined,
              "type": "optional<SlackOAuthV2ResponseAuthedUser>",
            },
            "botUserId": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "enterprise": {
              "docs": undefined,
              "type": "optional<SlackOAuthV2ResponseEnterprise>",
            },
            "expiresIn": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "incomingWebhook": {
              "docs": undefined,
              "type": "optional<SlackOAuthResponseIncomingWebhook>",
            },
            "redirectUrl": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "refreshToken": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "scope": {
              "docs": "The scope of the access token. multiple scopes are separated by comma.",
              "type": "optional<string>",
            },
            "team": {
              "docs": undefined,
              "type": "optional<SlackOAuthV2ResponseTeam>",
            },
            "tokenType": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedUpdateIntegrationParamsPartner": {
          "docs": undefined,
          "enum": [
            {
              "name": "AWS",
              "value": "AWS",
            },
            {
              "name": "AZURE",
              "value": "AZURE",
            },
            {
              "name": "GCP",
              "value": "GCP",
            },
          ],
        },
        "SharedUpdateIntegrationParamsService": {
          "docs": undefined,
          "enum": [
            {
              "name": "MARKETPLACE",
              "value": "MARKETPLACE",
            },
          ],
        },
        "SharedUsageCount": {
          "docs": undefined,
          "properties": {
            "creditCount": {
              "docs": "The count of this dimension usage records that are handled as credit.",
              "type": "optional<double>",
            },
            "includedCount": {
              "docs": "The count of this dimension usage records that are handled as included in IncludedBaseQuantity",
              "type": "optional<double>",
            },
            "reportedCount": {
              "docs": "The count of this dimension usage records that are reported to cloud vendors.",
              "type": "optional<double>",
            },
          },
        },
        "SharedUsageReport": {
          "docs": undefined,
          "properties": {
            "entitlementID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "organizationID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "reportDate": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "usageRecords": {
              "docs": undefined,
              "type": "optional<list<SharedEntitlementUsageRecord>>",
            },
          },
        },
        "SharedValueType": {
          "docs": undefined,
          "enum": [
            {
              "name": "UNSPECIFIED",
              "value": "VALUE_TYPE_UNSPECIFIED",
            },
            {
              "name": "BOOL",
              "value": "BOOL",
            },
            {
              "name": "INT64",
              "value": "INT64",
            },
            {
              "name": "DOUBLE",
              "value": "DOUBLE",
            },
            {
              "name": "STRING",
              "value": "STRING",
            },
            {
              "name": "DISTRIBUTION",
              "value": "DISTRIBUTION",
            },
            {
              "name": "MONEY",
              "value": "MONEY",
            },
          ],
        },
        "SharedWorkloadEntitlement": {
          "docs": undefined,
          "properties": {
            "buyerID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "creationTime": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "endTime": {
              "docs": "nullable",
              "type": "optional<string>",
            },
            "entitlementTermID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "externalBuyerID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "externalID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "externalProductID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "info": {
              "docs": undefined,
              "type": "optional<SharedEntitlementInfo>",
            },
            "lastUpdateTime": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "offerID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "organizationID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "partner": {
              "docs": undefined,
              "type": "optional<SharedWorkloadEntitlementPartner>",
            },
            "productID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "service": {
              "docs": undefined,
              "type": "optional<SharedWorkloadEntitlementService>",
            },
            "startTime": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "status": {
              "docs": undefined,
              "type": "optional<SharedWorkloadEntitlementStatus>",
            },
            "type": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedWorkloadEntitlementPartner": {
          "docs": undefined,
          "enum": [
            {
              "name": "AWS",
              "value": "AWS",
            },
            {
              "name": "AZURE",
              "value": "AZURE",
            },
            {
              "name": "GCP",
              "value": "GCP",
            },
          ],
        },
        "SharedWorkloadEntitlementService": {
          "docs": undefined,
          "enum": [
            {
              "name": "MARKETPLACE",
              "value": "MARKETPLACE",
            },
          ],
        },
        "SharedWorkloadEntitlementStatus": {
          "docs": undefined,
          "enum": [
            {
              "name": "ACTIVE",
              "value": "ACTIVE",
            },
            {
              "name": "CANCELLED",
              "value": "CANCELLED",
            },
            {
              "name": "SUSPENDED",
              "value": "SUSPENDED",
            },
            {
              "name": "PENDING_START",
              "value": "PENDING_START",
            },
            {
              "name": "UNKNOWN",
              "value": "UNKNOWN",
            },
          ],
        },
        "SharedWorkloadEntitlementTerm": {
          "docs": undefined,
          "properties": {
            "buyerID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "commitAmount": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "creditAmount": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "endTime": {
              "docs": "nullable",
              "type": "optional<string>",
            },
            "entitlementID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "entitlementInfo": {
              "docs": undefined,
              "type": "optional<SharedEntitlementInfo>",
            },
            "externalEntitlementID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "info": {
              "docs": undefined,
              "type": "optional<SharedEntitlementTermInfo>",
            },
            "offerID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "organizationID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "partner": {
              "docs": undefined,
              "type": "optional<SharedWorkloadEntitlementTermPartner>",
            },
            "productID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "service": {
              "docs": undefined,
              "type": "optional<SharedWorkloadEntitlementTermService>",
            },
            "startTime": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "usedCommitAmount": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "usedCreditAmount": {
              "docs": undefined,
              "type": "optional<double>",
            },
          },
        },
        "SharedWorkloadEntitlementTermPartner": {
          "docs": undefined,
          "enum": [
            {
              "name": "AWS",
              "value": "AWS",
            },
            {
              "name": "AZURE",
              "value": "AZURE",
            },
            {
              "name": "GCP",
              "value": "GCP",
            },
          ],
        },
        "SharedWorkloadEntitlementTermService": {
          "docs": undefined,
          "enum": [
            {
              "name": "MARKETPLACE",
              "value": "MARKETPLACE",
            },
          ],
        },
        "SharedWorkloadOffer": {
          "docs": undefined,
          "properties": {
            "createdBy": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "creationTime": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "endTime": {
              "docs": "nullable",
              "type": "optional<string>",
            },
            "expireTime": {
              "docs": "nullable",
              "type": "optional<string>",
            },
            "externalID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "info": {
              "docs": undefined,
              "type": "optional<SharedOfferInfo>",
            },
            "lastUpdateTime": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "lastUpdatedBy": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "metaInfo": {
              "docs": undefined,
              "type": "optional<SharedOfferMetaInfo>",
            },
            "name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "offerType": {
              "docs": undefined,
              "type": "optional<SharedWorkloadOfferOfferType>",
            },
            "organizationID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "partner": {
              "docs": undefined,
              "type": "optional<SharedWorkloadOfferPartner>",
            },
            "productID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "service": {
              "docs": undefined,
              "type": "optional<SharedWorkloadOfferService>",
            },
            "status": {
              "docs": undefined,
              "type": "optional<SharedWorkloadOfferStatus>",
            },
          },
        },
        "SharedWorkloadOfferOfferType": {
          "docs": undefined,
          "enum": [
            {
              "name": "DEFAULT",
              "value": "DEFAULT",
            },
            {
              "name": "CONTRACT",
              "value": "CONTRACT",
            },
            {
              "name": "SUBSCRIPTION",
              "value": "SUBSCRIPTION",
            },
            {
              "name": "FREE_TRIAL",
              "value": "FREE_TRIAL",
            },
            {
              "name": "FLAT_RATE",
              "value": "FLAT_RATE",
            },
            {
              "name": "PER_USER",
              "value": "PER_USER",
            },
            {
              "name": "PRIVATE",
              "value": "PRIVATE",
            },
            {
              "name": "UNKNOWN",
              "value": "UNKNOWN",
            },
          ],
        },
        "SharedWorkloadOfferPartner": {
          "docs": undefined,
          "enum": [
            {
              "name": "AWS",
              "value": "AWS",
            },
            {
              "name": "AZURE",
              "value": "AZURE",
            },
            {
              "name": "GCP",
              "value": "GCP",
            },
          ],
        },
        "SharedWorkloadOfferService": {
          "docs": undefined,
          "enum": [
            {
              "name": "MARKETPLACE",
              "value": "MARKETPLACE",
            },
          ],
        },
        "SharedWorkloadOfferStatus": {
          "docs": undefined,
          "enum": [
            {
              "name": "ACCEPTED",
              "value": "ACCEPTED",
            },
            {
              "name": "PENDING_CREATE",
              "value": "PENDING_CREATE",
            },
            {
              "name": "CREATE_FAILED",
              "value": "CREATE_FAILED",
            },
            {
              "name": "CREATE_SUCCESS",
              "value": "CREATE_SUCCESS",
            },
            {
              "name": "DRAFT",
              "value": "DRAFT",
            },
            {
              "name": "EXPIRED",
              "value": "EXPIRED",
            },
            {
              "name": "PENDING_ACCEPTANCE",
              "value": "PENDING_ACCEPTANCE",
            },
            {
              "name": "PENDING_CANCEL",
              "value": "PENDING_CANCEL",
            },
            {
              "name": "CANCEL_FAILED",
              "value": "CANCEL_FAILED",
            },
            {
              "name": "CANCEL_SUCCESS",
              "value": "CANCEL_SUCCESS",
            },
          ],
        },
        "SharedWorkloadProduct": {
          "docs": undefined,
          "properties": {
            "createdBy": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "creationTime": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "externalID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "fulfillmentUrl": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "info": {
              "docs": undefined,
              "type": "optional<SharedProductInfo>",
            },
            "lastUpdateTime": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "lastUpdatedBy": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "organizationID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "partner": {
              "docs": undefined,
              "type": "optional<SharedWorkloadProductPartner>",
            },
            "productType": {
              "docs": undefined,
              "type": "optional<SharedWorkloadProductProductType>",
            },
            "service": {
              "docs": undefined,
              "type": "optional<SharedWorkloadProductService>",
            },
            "status": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedWorkloadProductPartner": {
          "docs": undefined,
          "enum": [
            {
              "name": "AWS",
              "value": "AWS",
            },
            {
              "name": "AZURE",
              "value": "AZURE",
            },
            {
              "name": "GCP",
              "value": "GCP",
            },
          ],
        },
        "SharedWorkloadProductProductType": {
          "docs": undefined,
          "enum": [
            {
              "name": "UNKNOWN",
              "value": "UNKNOWN",
            },
            {
              "name": "SUBSCRIPTION",
              "value": "SUBSCRIPTION",
            },
            {
              "name": "CONTRACT",
              "value": "CONTRACT",
            },
            {
              "name": "FLAT_RATE",
              "value": "FLAT_RATE",
            },
            {
              "name": "PER_USER",
              "value": "PER_USER",
            },
            {
              "name": "USAGE_BASED",
              "value": "USAGE_BASED",
            },
          ],
        },
        "SharedWorkloadProductService": {
          "docs": undefined,
          "enum": [
            {
              "name": "MARKETPLACE",
              "value": "MARKETPLACE",
            },
          ],
        },
        "SlackOAuthResponseIncomingWebhook": {
          "docs": undefined,
          "properties": {
            "channel": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "channel_id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "configuration_url": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "url": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SlackOAuthV2ResponseAuthedUser": {
          "docs": undefined,
          "properties": {
            "access_token": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "expires_in": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "refresh_token": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "scope": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "token_type": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SlackOAuthV2ResponseEnterprise": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "name": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SlackOAuthV2ResponseTeam": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "name": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SqlNullTime": {
          "docs": undefined,
          "properties": {
            "time": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "valid": {
              "docs": "Valid is true if Time is not NULL",
              "type": "optional<boolean>",
            },
          },
        },
        "TypesEntitlement": {
          "docs": undefined,
          "properties": {
            "customerIdentifier": {
              "docs": "The customer identifier is a handle to each unique customer in an application.
Customer identifiers are obtained through the ResolveCustomer operation in AWS
Marketplace Metering Service.",
              "type": "optional<string>",
            },
            "dimension": {
              "docs": "The dimension for which the given entitlement applies. Dimensions represent
categories of capacity in a product and are specified when the product is listed
in AWS Marketplace.",
              "type": "optional<string>",
            },
            "expirationDate": {
              "docs": "The expiration date represents the minimum date through which this entitlement
is expected to remain valid. For contractual products listed on AWS Marketplace,
the expiration date is the date at which the customer will renew or cancel their
contract. Customers who are opting to renew their contract will still have
entitlements with an expiration date.",
              "type": "optional<string>",
            },
            "productCode": {
              "docs": "The product code for which the given entitlement applies. Product codes are
provided by AWS Marketplace when the product listing is created.",
              "type": "optional<string>",
            },
            "value": "unknown",
          },
        },
        "TypesUsageAllocation": {
          "docs": undefined,
          "properties": {
            "allocatedUsageQuantity": {
              "docs": "The total quantity allocated to this bucket of usage.

This member is required.",
              "type": "optional<integer>",
            },
            "tags": {
              "docs": "The set of tags that define the bucket of usage. For the bucket of items with no
tags, this parameter can be left out.",
              "type": "optional<list<GithubComAwsAwsSdkGoV2ServiceMarketplacemeteringTypesTag>>",
            },
          },
        },
        "TypesUsageRecord": {
          "docs": undefined,
          "properties": {
            "customerIdentifier": {
              "docs": "The CustomerIdentifier is obtained through the ResolveCustomer operation and
represents an individual buyer in your application.

This member is required.",
              "type": "optional<string>",
            },
            "dimension": {
              "docs": "During the process of registering a product on AWS Marketplace, dimensions are
specified. These represent different units of value in your application.

This member is required.",
              "type": "optional<string>",
            },
            "quantity": {
              "docs": "The quantity of usage consumed by the customer for the given dimension and time.
Defaults to 0 if not specified.",
              "type": "optional<integer>",
            },
            "timestamp": {
              "docs": "Timestamp, in UTC, for which the usage is being reported. Your application can
meter usage for up to one hour in the past. Make sure the timestamp value is not
before the start of the software usage.

This member is required.",
              "type": "optional<string>",
            },
            "usageAllocations": {
              "docs": "The set of UsageAllocations to submit. The sum of all UsageAllocation quantities
must equal the Quantity of the UsageRecord.",
              "type": "optional<list<TypesUsageAllocation>>",
            },
          },
        },
        "TypesUsageRecordResult": {
          "docs": undefined,
          "properties": {
            "meteringRecordId": {
              "docs": "The MeteringRecordId is a unique identifier for this metering event.",
              "type": "optional<string>",
            },
            "status": {
              "docs": "The UsageRecordResultStatus indicates the status of an individual UsageRecord
processed by BatchMeterUsage.

* Success- The UsageRecord was accepted and
honored by BatchMeterUsage.

* CustomerNotSubscribed- The CustomerIdentifier
specified is not able to use your product. The UsageRecord was not honored.
There are three causes for this result:

* The customer identifier is
invalid.

* The customer identifier provided in the metering record does not
have an active agreement or subscription with this product. Future UsageRecords
for this customer will fail until the customer subscribes to your product.

*
The customer's AWS account was suspended.

* DuplicateRecord- Indicates that the
UsageRecord was invalid and not honored. A previously metered UsageRecord had
the same customer, dimension, and time, but a different quantity.",
              "type": "optional<TypesUsageRecordResultStatus>",
            },
            "usageRecord": {
              "docs": "The UsageRecord that was part of the BatchMeterUsage request.",
              "type": "optional<TypesUsageRecord>",
            },
          },
        },
        "TypesUsageRecordResultStatus": {
          "docs": undefined,
          "enum": [
            {
              "name": "Success",
              "value": "Success",
            },
            {
              "name": "CustomerNotSubscribed",
              "value": "CustomerNotSubscribed",
            },
            {
              "name": "DuplicateRecord",
              "value": "DuplicateRecord",
            },
          ],
        },
        "UpdateIntegrationRequestPartner": {
          "docs": undefined,
          "enum": [
            {
              "name": "AWS",
              "value": "AWS",
            },
            {
              "name": "AZURE",
              "value": "AZURE",
            },
            {
              "name": "GCP",
              "value": "GCP",
            },
          ],
        },
        "UpdateIntegrationRequestService": {
          "docs": undefined,
          "enum": [
            {
              "name": "MARKETPLACE",
              "value": "MARKETPLACE",
            },
            {
              "name": "CRM",
              "value": "CRM",
            },
          ],
        },
        "VerifyIntegrationRequestPartner": {
          "docs": undefined,
          "enum": [
            {
              "name": "AWS",
              "value": "AWS",
            },
            {
              "name": "AZURE",
              "value": "AZURE",
            },
            {
              "name": "GCP",
              "value": "GCP",
            },
          ],
        },
        "VerifyIntegrationRequestService": {
          "docs": undefined,
          "enum": [
            {
              "name": "MARKETPLACE",
              "value": "MARKETPLACE",
            },
            {
              "name": "CRM",
              "value": "CRM",
            },
          ],
        },
        "middleware.Metadata": {
          "docs": undefined,
          "type": "map<string, unknown>",
        },
      },
    },
    "api.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "GetApiClientAccessToken": {
            "auth": false,
            "docs": "Get the Bearer Access Token by giving the Suger API Client ID & Client Secret.",
            "errors": [
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/public/apiClient/accessToken",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The ID of the API Client.",
                    "type": "string",
                  },
                  "organizationID": {
                    "docs": undefined,
                    "type": "string",
                  },
                  "secret": {
                    "docs": "The secret of the API Client.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "SharedGetApiClientAccessTokenParams",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedApiClientAccessToken",
            },
          },
        },
      },
    },
    "buyer.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "GetBuyer": {
            "auth": true,
            "docs": "get buyer by the given organization and buyer id",
            "errors": [
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/org/{orgId}/buyer/{buyerId}",
            "path-parameters": {
              "buyerId": {
                "docs": "Buyer ID",
                "type": "string",
              },
              "orgId": {
                "docs": "Organization ID",
                "type": "string",
              },
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedIdentityBuyer",
            },
          },
          "ListBuyersByOrganization": {
            "auth": true,
            "docs": "list all buyers by the given organization",
            "errors": [
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/org/{orgId}/buyer",
            "path-parameters": {
              "orgId": {
                "docs": "Organization ID",
                "type": "string",
              },
            },
            "response": {
              "docs": "OK",
              "type": "list<root.SharedIdentityBuyer>",
            },
          },
          "UpdateBuyerNameDescription": {
            "auth": true,
            "docs": "update buyer name and description by the given organization and buyer id",
            "errors": [
              "root.InternalServerError",
            ],
            "method": "PATCH",
            "path": "/org/{orgId}/buyer/{buyerId}",
            "path-parameters": {
              "buyerId": {
                "docs": "Buyer ID",
                "type": "string",
              },
              "orgId": {
                "docs": "Organization ID",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "description": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                  "id": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                  "name": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                  "organizationID": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "GithubComSugerioMarketplaceServiceRdsDbLibUpdateBuyerNameDescriptionParams",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedIdentityBuyer",
            },
          },
        },
      },
    },
    "entitlement.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "AddEntitlementCredit": {
            "auth": true,
            "docs": "Add the credit amount to the given Entitlement. The credit amount is accumulated & saved in the current Entitlement Term of the gvien Entitlement.",
            "errors": [
              "root.BadRequestError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/org/{orgId}/entitlement/{entitlementId}/addCredit",
            "path-parameters": {
              "entitlementId": {
                "docs": "Entitlement ID",
                "type": "string",
              },
              "orgId": {
                "docs": "Organization ID",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "creditAmountIncrement": {
                    "docs": "The amount to be added to the credit amount.",
                    "type": "double",
                  },
                  "entitlementID": {
                    "docs": undefined,
                    "type": "string",
                  },
                  "organizationID": {
                    "docs": undefined,
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "SharedAddEntitlementCreditParams",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedAddEntitlementCreditResponse",
            },
          },
          "GetEntitlement": {
            "auth": true,
            "docs": "Get the entitlement by ID",
            "errors": [
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/org/{orgId}/entitlement/{entitlementId}",
            "path-parameters": {
              "entitlementId": {
                "docs": "Entitlement ID",
                "type": "string",
              },
              "orgId": {
                "docs": "Organization ID",
                "type": "string",
              },
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedWorkloadEntitlement",
            },
          },
          "ListEntitlements": {
            "auth": true,
            "docs": "List all entitlements under the organization",
            "errors": [
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/org/{orgId}/entitlement",
            "path-parameters": {
              "orgId": {
                "docs": "Organization ID",
                "type": "string",
              },
            },
            "response": {
              "docs": "OK",
              "type": "list<root.SharedWorkloadEntitlement>",
            },
          },
          "ListEntitlementsByBuyer": {
            "auth": true,
            "docs": "List all entitlements of the given buyer",
            "errors": [
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/org/{orgId}/buyer/{buyerId}/entitlement",
            "path-parameters": {
              "buyerId": {
                "docs": "Buyer ID",
                "type": "string",
              },
              "orgId": {
                "docs": "Organization ID",
                "type": "string",
              },
            },
            "response": {
              "docs": "OK",
              "type": "list<root.SharedWorkloadEntitlement>",
            },
          },
          "ListEntitlementsByOffer": {
            "auth": true,
            "docs": "List all entitlements under the given offer",
            "errors": [
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/org/{orgId}/offer/{offerId}/entitlement",
            "path-parameters": {
              "offerId": {
                "docs": "Offer ID",
                "type": "string",
              },
              "orgId": {
                "docs": "Organization ID",
                "type": "string",
              },
            },
            "response": {
              "docs": "OK",
              "type": "list<root.SharedWorkloadEntitlement>",
            },
          },
          "ListEntitlementsByPartner": {
            "auth": true,
            "docs": "List all entitlements under the given partner",
            "errors": [
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/org/{orgId}/partner/{partner}/entitlement",
            "path-parameters": {
              "orgId": {
                "docs": "Organization ID",
                "type": "string",
              },
              "partner": {
                "docs": "Cloud Partner",
                "type": "root.ListEntitlementsByPartnerRequestPartner",
              },
            },
            "response": {
              "docs": "OK",
              "type": "list<root.SharedWorkloadEntitlement>",
            },
          },
          "ListEntitlementsByProduct": {
            "auth": true,
            "docs": "List all entitlements under the given product",
            "errors": [
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/org/{orgId}/product/{productId}/entitlement",
            "path-parameters": {
              "orgId": {
                "docs": "Organization ID",
                "type": "string",
              },
              "productId": {
                "docs": "Product ID",
                "type": "string",
              },
            },
            "response": {
              "docs": "OK",
              "type": "list<root.SharedWorkloadEntitlement>",
            },
          },
          "UpdateEntitlementName": {
            "auth": true,
            "docs": "Update the name of the given Entitlement",
            "errors": [
              "root.InternalServerError",
            ],
            "method": "PATCH",
            "path": "/org/{orgId}/entitlement/{entitlementId}/entitlementName",
            "path-parameters": {
              "entitlementId": {
                "docs": "Entitlement ID",
                "type": "string",
              },
              "orgId": {
                "docs": "Organization ID",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                  "name": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                  "organizationID": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "GithubComSugerioMarketplaceServiceRdsDbLibUpdateEntitlementNameParams",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedWorkloadEntitlement",
            },
          },
        },
      },
    },
    "entitlementTerm.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "GetEntitlementTerm": {
            "auth": true,
            "docs": "Get the entitlement term by ID",
            "errors": [
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/org/{orgId}/entitlement/{entitlementId}/entitlementTerm/{entitlementTermId}",
            "path-parameters": {
              "entitlementId": {
                "docs": "Entitlement ID",
                "type": "string",
              },
              "entitlementTermId": {
                "docs": "Entitlement Term ID",
                "type": "string",
              },
              "orgId": {
                "docs": "Organization ID",
                "type": "string",
              },
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedWorkloadEntitlementTerm",
            },
          },
          "ListEntitlementTerms": {
            "auth": true,
            "docs": "List all Entitlement Terms of the given Entitlement",
            "errors": [
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/org/{orgId}/entitlement/{entitlementId}/entitlementTerm",
            "path-parameters": {
              "entitlementId": {
                "docs": "Entitlement ID",
                "type": "string",
              },
              "orgId": {
                "docs": "Organization ID",
                "type": "string",
              },
            },
            "response": {
              "docs": "OK",
              "type": "list<root.SharedWorkloadEntitlementTerm>",
            },
          },
        },
      },
    },
    "integration.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "CreateIntegration": {
            "auth": true,
            "docs": "For each organization, partner & service, there should be at most one integration.",
            "errors": [
              "root.BadRequestError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/org/{orgId}/integration",
            "path-parameters": {
              "orgId": {
                "docs": "Organization ID",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "createdBy": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                  "info": {
                    "docs": undefined,
                    "type": "root.SharedIntegrationInfo",
                  },
                  "organizationID": {
                    "docs": undefined,
                    "type": "string",
                  },
                  "partner": {
                    "docs": undefined,
                    "type": "root.SharedCreateIntegrationParamsPartner",
                  },
                  "service": {
                    "docs": undefined,
                    "type": "root.SharedCreateIntegrationParamsService",
                  },
                },
              },
              "headers": undefined,
              "name": "SharedCreateIntegrationParams",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedIdentityIntegration",
            },
          },
          "DeleteIntegration": {
            "auth": true,
            "docs": "delete the integration for the given orgId, partner and service.",
            "errors": [
              "root.InternalServerError",
            ],
            "method": "DELETE",
            "path": "/org/{orgId}/integration/{partner}/{service}",
            "path-parameters": {
              "orgId": {
                "docs": "Organization ID",
                "type": "string",
              },
              "partner": {
                "docs": "Cloud Partner",
                "type": "root.DeleteIntegrationRequestPartner",
              },
              "service": {
                "docs": "Partner Service",
                "type": "root.DeleteIntegrationRequestService",
              },
            },
            "response": {
              "docs": "Empty string if deletion is successful",
              "type": "string",
            },
          },
          "GetIntegration": {
            "auth": true,
            "docs": "Get the integration for the given organization, partner & service.",
            "errors": [
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/org/{orgId}/integration/{partner}/{service}",
            "path-parameters": {
              "orgId": {
                "docs": "Organization ID",
                "type": "string",
              },
              "partner": {
                "docs": "Cloud Partner",
                "type": "root.GetIntegrationRequestPartner",
              },
              "service": {
                "docs": "Partner Service",
                "type": "root.GetIntegrationRequestService",
              },
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedIdentityIntegration",
            },
          },
          "ListIntegrationsByOrganization": {
            "auth": true,
            "docs": "List all integrations for the given organization.",
            "errors": [
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/org/{orgId}/integration",
            "path-parameters": {
              "orgId": {
                "docs": "Organization ID",
                "type": "string",
              },
            },
            "response": {
              "docs": "OK",
              "type": "list<root.SharedIdentityIntegration>",
            },
          },
          "UpdateIntegration": {
            "auth": true,
            "docs": "Update the given integration.",
            "errors": [
              "root.BadRequestError",
              "root.InternalServerError",
            ],
            "method": "PATCH",
            "path": "/org/{orgId}/integration/{partner}/{service}",
            "path-parameters": {
              "orgId": {
                "docs": "Organization ID",
                "type": "string",
              },
              "partner": {
                "docs": "Cloud Partner",
                "type": "root.UpdateIntegrationRequestPartner",
              },
              "service": {
                "docs": "Partner Service",
                "type": "root.UpdateIntegrationRequestService",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "info": {
                    "docs": undefined,
                    "type": "root.SharedIntegrationInfo",
                  },
                  "organizationID": {
                    "docs": undefined,
                    "type": "string",
                  },
                  "partner": {
                    "docs": undefined,
                    "type": "root.SharedUpdateIntegrationParamsPartner",
                  },
                  "service": {
                    "docs": undefined,
                    "type": "root.SharedUpdateIntegrationParamsService",
                  },
                },
              },
              "headers": undefined,
              "name": "SharedUpdateIntegrationParams",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedIdentityIntegration",
            },
          },
          "VerifyIntegration": {
            "auth": true,
            "docs": "Verify the given integration, check whether it works correctly.",
            "errors": [
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/org/{orgId}/integration/{partner}/{service}/verify",
            "path-parameters": {
              "orgId": {
                "docs": "Organization ID",
                "type": "string",
              },
              "partner": {
                "docs": "Cloud Partner",
                "type": "root.VerifyIntegrationRequestPartner",
              },
              "service": {
                "docs": "Partner Service",
                "type": "root.VerifyIntegrationRequestService",
              },
            },
            "response": {
              "docs": "whether it is verified or not",
              "type": "boolean",
            },
          },
        },
      },
    },
    "metering.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "GetUsageRecordGroup": {
            "auth": true,
            "docs": "get UsageRecordGroup for the given organization and usageRecordGroup ID",
            "errors": [
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/org/{orgId}/usageRecordGroup/{usageRecordGroupId}",
            "path-parameters": {
              "orgId": {
                "docs": "Organization ID",
                "type": "string",
              },
              "usageRecordGroupId": {
                "docs": "UsageRecordGroup ID",
                "type": "string",
              },
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedMeteringUsageRecordGroup",
            },
          },
          "GetUsageRecordReport": {
            "auth": true,
            "docs": "get the usageRecordReport for a given organization and usageRecordReport ID.",
            "errors": [
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/org/{orgId}/usageRecordReport/{usageRecordReportId}",
            "path-parameters": {
              "orgId": {
                "docs": "Organization ID",
                "type": "string",
              },
              "usageRecordReportId": {
                "docs": "UsageRecordReport ID",
                "type": "string",
              },
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedMeteringUsageRecordReport",
            },
          },
          "ListUsageRecordGroupsByEntitlement": {
            "auth": true,
            "docs": "list UsageRecordGroups for the given organization and entitlement",
            "errors": [
              "root.BadRequestError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/org/{orgId}/entitlement/{entitlementId}/usageRecordGroup",
            "path-parameters": {
              "entitlementId": {
                "docs": "Entitlement ID",
                "type": "string",
              },
              "orgId": {
                "docs": "Organization ID",
                "type": "string",
              },
            },
            "request": {
              "name": "ListUsageRecordGroupsByEntitlementRequest",
              "query-parameters": {
                "endDate": {
                  "allow-multiple": undefined,
                  "docs": "end date (UTC) in YYYY-MM-DD format, default is today",
                  "type": "optional<string>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": "List pagination size, default 20, max value is 1000",
                  "type": "optional<integer>",
                },
                "offset": {
                  "allow-multiple": undefined,
                  "docs": "List pagination offset, default 0",
                  "type": "optional<integer>",
                },
                "startDate": {
                  "allow-multiple": undefined,
                  "docs": "start date (UTC) in YYYY-MM-DD format, default is 30 days before the endDate",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedListUsageRecordGroupsResponse",
            },
          },
          "ListUsageRecordGroupsByOrganization": {
            "auth": true,
            "docs": "list UsageRecordGroups under the given organization.",
            "errors": [
              "root.BadRequestError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/org/{orgId}/usageRecordGroup",
            "path-parameters": {
              "orgId": {
                "docs": "Organization ID",
                "type": "string",
              },
            },
            "request": {
              "name": "ListUsageRecordGroupsByOrganizationRequest",
              "query-parameters": {
                "endDate": {
                  "allow-multiple": undefined,
                  "docs": "end date (UTC) in YYYY-MM-DD format, default is today",
                  "type": "optional<string>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": "List pagination size, default 20, max value is 1000",
                  "type": "optional<integer>",
                },
                "offset": {
                  "allow-multiple": undefined,
                  "docs": "List pagination offset, default 0",
                  "type": "optional<integer>",
                },
                "startDate": {
                  "allow-multiple": undefined,
                  "docs": "start date (UTC) in YYYY-MM-DD format, default is 30 days before the endDate",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedListUsageRecordGroupsResponse",
            },
          },
          "ListUsageRecordGroupsByProduct": {
            "auth": true,
            "docs": "list UsageRecordGroups for the given organization and product",
            "errors": [
              "root.BadRequestError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/org/{orgId}/product/{productId}/usageRecordGroup",
            "path-parameters": {
              "orgId": {
                "docs": "Organization ID",
                "type": "string",
              },
              "productId": {
                "docs": "Product ID",
                "type": "string",
              },
            },
            "request": {
              "name": "ListUsageRecordGroupsByProductRequest",
              "query-parameters": {
                "endDate": {
                  "allow-multiple": undefined,
                  "docs": "end date (UTC) in YYYY-MM-DD format, default is today",
                  "type": "optional<string>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": "List pagination size, default 20, max value is 1000",
                  "type": "optional<integer>",
                },
                "offset": {
                  "allow-multiple": undefined,
                  "docs": "List pagination offset, default 0",
                  "type": "optional<integer>",
                },
                "startDate": {
                  "allow-multiple": undefined,
                  "docs": "start date (UTC) in YYYY-MM-DD format, default is 30 days before the endDate",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedListUsageRecordGroupsResponse",
            },
          },
          "ListUsageRecordReportsByEntitlement": {
            "auth": true,
            "docs": "List usageRecordReports for the given organization and entitlement. Filter by entitlementTermId if it is given.",
            "errors": [
              "root.BadRequestError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/org/{orgId}/entitlement/{entitlementId}/usageRecordReport",
            "path-parameters": {
              "entitlementId": {
                "docs": "Entitlement ID",
                "type": "string",
              },
              "orgId": {
                "docs": "Organization ID",
                "type": "string",
              },
            },
            "request": {
              "name": "ListUsageRecordReportsByEntitlementRequest",
              "query-parameters": {
                "endDate": {
                  "allow-multiple": undefined,
                  "docs": "end date (UTC) in YYYY-MM-DD format, default is today",
                  "type": "optional<string>",
                },
                "entitlementTermId": {
                  "allow-multiple": undefined,
                  "docs": "The Entitlement Term ID, if not given, return the UsageRecordReports under the Entitlement",
                  "type": "optional<string>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": "List pagination size, default 20, max value is 1000",
                  "type": "optional<integer>",
                },
                "offset": {
                  "allow-multiple": undefined,
                  "docs": "List pagination offset, default 0",
                  "type": "optional<integer>",
                },
                "startDate": {
                  "allow-multiple": undefined,
                  "docs": "start date (UTC) in YYYY-MM-DD format, default is 30 days before the endDate",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedListUsageRecordReportsResponse",
            },
          },
          "ListUsageRecordReportsByOrganization": {
            "auth": true,
            "docs": "List usageRecordReports under the given organization",
            "errors": [
              "root.BadRequestError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/org/{orgId}/usageRecordReport",
            "path-parameters": {
              "orgId": {
                "docs": "Organization ID",
                "type": "string",
              },
            },
            "request": {
              "name": "ListUsageRecordReportsByOrganizationRequest",
              "query-parameters": {
                "endDate": {
                  "allow-multiple": undefined,
                  "docs": "end date (UTC) in YYYY-MM-DD format, default is today",
                  "type": "optional<string>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": "List pagination size, default 20, max value is 1000",
                  "type": "optional<integer>",
                },
                "offset": {
                  "allow-multiple": undefined,
                  "docs": "List pagination offset, default 0",
                  "type": "optional<integer>",
                },
                "startDate": {
                  "allow-multiple": undefined,
                  "docs": "start date (UTC) in YYYY-MM-DD format, default is 30 days before the endDate",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedListUsageRecordReportsResponse",
            },
          },
          "ListUsageRecordReportsByProduct": {
            "auth": true,
            "docs": "List usageRecordReports for the given organization and product",
            "errors": [
              "root.BadRequestError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/org/{orgId}/product/{productId}/usageRecordReport",
            "path-parameters": {
              "orgId": {
                "docs": "Organization ID",
                "type": "string",
              },
              "productId": {
                "docs": "Product ID",
                "type": "string",
              },
            },
            "request": {
              "name": "ListUsageRecordReportsByProductRequest",
              "query-parameters": {
                "endDate": {
                  "allow-multiple": undefined,
                  "docs": "end date (UTC) in YYYY-MM-DD format, default is today",
                  "type": "optional<string>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": "List pagination size, default 20, max value is 1000",
                  "type": "optional<integer>",
                },
                "offset": {
                  "allow-multiple": undefined,
                  "docs": "List pagination offset, default 0",
                  "type": "optional<integer>",
                },
                "startDate": {
                  "allow-multiple": undefined,
                  "docs": "start date (UTC) in YYYY-MM-DD format, default is 30 days before the endDate",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedListUsageRecordReportsResponse",
            },
          },
          "ReportUsageRecordGroup": {
            "auth": true,
            "docs": "It is recommended to provide the ID in the request body CreateUsageRecordGroupParams, so the report can be deduplicated. All duplicate report will return error code 409.",
            "errors": [
              "root.BadRequestError",
              "root.ConflictError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/org/{orgId}/entitlement/{entitlementId}/usageRecordGroup",
            "path-parameters": {
              "entitlementId": {
                "docs": "Entitlement ID",
                "type": "string",
              },
              "orgId": {
                "docs": "Organization ID",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "entitlementID": {
                    "docs": undefined,
                    "type": "string",
                  },
                  "id": {
                    "docs": "uuid of the UsageRecordGroup (the size is up to 36 characters), if not provided, suger will generate one.",
                    "type": "optional<string>",
                  },
                  "metaInfo": {
                    "docs": "read-only, don't set it when reporting the usage record group.",
                    "type": "optional<root.SharedMeteringUsageRecordGroupMetaInfo>",
                  },
                  "organizationID": {
                    "docs": undefined,
                    "type": "string",
                  },
                  "records": {
                    "docs": undefined,
                    "type": "map<string, double>",
                  },
                },
              },
              "headers": undefined,
              "name": "SharedCreateUsageRecordGroupParams",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedMeteringUsageRecordGroup",
            },
          },
        },
      },
    },
    "offer.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "CancelOffer": {
            "auth": true,
            "docs": "Only the offer with status = "PENDING_ACCEPTANCE" or "PENDING_CANCEL" is allowed to cancel.",
            "errors": [
              "root.BadRequestError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/org/{orgId}/offer/{offerId}/cancel",
            "path-parameters": {
              "offerId": {
                "docs": "Offer ID",
                "type": "string",
              },
              "orgId": {
                "docs": "Organization ID",
                "type": "string",
              },
            },
            "response": {
              "docs": "Empty string if cancellation is successful",
              "type": "string",
            },
          },
          "CreateOffer": {
            "auth": true,
            "docs": "Create a private offer under the given organization.",
            "errors": [
              "root.BadRequestError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/org/{orgId}/offer",
            "path-parameters": {
              "orgId": {
                "docs": "Organization ID",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.SharedWorkloadOffer",
              },
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedWorkloadOffer",
            },
          },
          "CreateOrUpdateDraftOffer": {
            "auth": true,
            "docs": "Create a new draft offer or update the existing draft offer. When updating draft offer, the offer.ID is required.",
            "errors": [
              "root.BadRequestError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/org/{orgId}/draftOffer",
            "path-parameters": {
              "orgId": {
                "docs": "Organization ID",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.SharedWorkloadOffer",
              },
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedWorkloadOffer",
            },
          },
          "DeleteOffer": {
            "auth": true,
            "docs": "Only the offer with status = "DRAFT" or "CREATE_FAILED" is allowed to be deleted.",
            "errors": [
              "root.InternalServerError",
            ],
            "method": "DELETE",
            "path": "/org/{orgId}/offer/{offerId}",
            "path-parameters": {
              "offerId": {
                "docs": "Offer ID",
                "type": "string",
              },
              "orgId": {
                "docs": "Organization ID",
                "type": "string",
              },
            },
            "response": {
              "docs": "Empty string if deletion is successful",
              "type": "string",
            },
          },
          "GetOffer": {
            "auth": true,
            "docs": "Get the offer by the given offer ID.",
            "errors": [
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/org/{orgId}/offer/{offerId}",
            "path-parameters": {
              "offerId": {
                "docs": "Offer ID",
                "type": "string",
              },
              "orgId": {
                "docs": "Organization ID",
                "type": "string",
              },
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedWorkloadOffer",
            },
          },
          "ListOffersByOrganization": {
            "auth": true,
            "docs": "List all offers under the given organization.",
            "errors": [
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/org/{orgId}/offer",
            "path-parameters": {
              "orgId": {
                "docs": "Organization ID",
                "type": "string",
              },
            },
            "response": {
              "docs": "OK",
              "type": "list<root.SharedWorkloadOffer>",
            },
          },
          "ListOffersByPartner": {
            "auth": false,
            "docs": "List all offers under the given organization & cloud partner.",
            "errors": [
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/org/{orgId}/partner/{partner}/offer",
            "path-parameters": {
              "orgId": {
                "docs": "Organization ID",
                "type": "string",
              },
              "partner": {
                "docs": "Cloud Partner",
                "type": "root.ListOffersByPartnerRequestPartner",
              },
            },
            "request": {
              "headers": {
                "Authorization": {
                  "docs": "Bearer Access Token",
                  "name": "authorization",
                  "type": "string",
                },
              },
              "name": "ListOffersByPartnerRequest",
            },
            "response": {
              "docs": "OK",
              "type": "list<root.SharedWorkloadOffer>",
            },
          },
          "ListOffersByProduct": {
            "auth": true,
            "docs": "List all offers under the given organization & product.",
            "errors": [
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/org/{orgId}/product/{productId}/offer",
            "path-parameters": {
              "orgId": {
                "docs": "Organization ID",
                "type": "string",
              },
              "productId": {
                "docs": "Product ID",
                "type": "string",
              },
            },
            "response": {
              "docs": "OK",
              "type": "list<root.SharedWorkloadOffer>",
            },
          },
        },
      },
    },
    "operation.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "ListOperations": {
            "auth": true,
            "docs": "List all long running operations under the given organization, offer, entitlement, crmOpportunity or partnerOpportunity. Only provide one filter on a request.",
            "errors": [
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/org/{orgId}/operation",
            "path-parameters": {
              "orgId": {
                "docs": "Organization ID",
                "type": "string",
              },
            },
            "request": {
              "name": "ListOperationsRequest",
              "query-parameters": {
                "crmOpportunityId": {
                  "allow-multiple": undefined,
                  "docs": "filter by crmOpportunityId",
                  "type": "optional<string>",
                },
                "entitlementId": {
                  "allow-multiple": undefined,
                  "docs": "filter by entitlementId",
                  "type": "optional<string>",
                },
                "offerId": {
                  "allow-multiple": undefined,
                  "docs": "filter by offerId",
                  "type": "optional<string>",
                },
                "partnerOpportunityId": {
                  "allow-multiple": undefined,
                  "docs": "filter by partnerOpportunityId",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "OK",
              "type": "list<root.SharedOperation>",
            },
          },
        },
      },
    },
    "product.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "DeleteProduct": {
            "auth": true,
            "docs": "only the product with status = "CREATE_FAILED" is allowed to be deleted.",
            "errors": [
              "root.InternalServerError",
            ],
            "method": "DELETE",
            "path": "/org/{orgId}/product/{productId}",
            "path-parameters": {
              "orgId": {
                "docs": "Organization ID",
                "type": "string",
              },
              "productId": {
                "docs": "Product ID",
                "type": "string",
              },
            },
            "response": {
              "docs": "Empty string if deletion is successful",
              "type": "string",
            },
          },
          "GetProduct": {
            "auth": true,
            "docs": "get product by product id",
            "errors": [
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/org/{orgId}/product/{productId}",
            "path-parameters": {
              "orgId": {
                "docs": "Organization ID",
                "type": "string",
              },
              "productId": {
                "docs": "Product ID",
                "type": "string",
              },
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedWorkloadProduct",
            },
          },
          "ListProductMeteringDimensions": {
            "auth": true,
            "docs": "list all metering dimensions of the given product",
            "errors": [
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/org/{orgId}/product/{productId}/dimension",
            "path-parameters": {
              "orgId": {
                "docs": "Organization ID",
                "type": "string",
              },
              "productId": {
                "docs": "Product ID",
                "type": "string",
              },
            },
            "response": {
              "docs": "OK",
              "type": "list<root.SharedAwsSaasProductDimension>",
            },
          },
          "ListProductsByOrganization": {
            "auth": true,
            "docs": "list all products under the given organization",
            "errors": [
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/org/{orgId}/product",
            "path-parameters": {
              "orgId": {
                "docs": "Organization ID",
                "type": "string",
              },
            },
            "response": {
              "docs": "OK",
              "type": "list<root.SharedWorkloadProduct>",
            },
          },
          "ListProductsByPartner": {
            "auth": true,
            "docs": "list all products under the given organization and cloud partner",
            "errors": [
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/org/{orgId}/partner/{partner}/product",
            "path-parameters": {
              "orgId": {
                "docs": "Organization ID",
                "type": "string",
              },
              "partner": {
                "docs": "Cloud Partner",
                "type": "root.ListProductsByPartnerRequestPartner",
              },
            },
            "response": {
              "docs": "OK",
              "type": "list<root.SharedWorkloadProduct>",
            },
          },
          "UpdateProduct": {
            "auth": true,
            "docs": "currently only the Fulfillment URL is allowed to update via this API.",
            "errors": [
              "root.InternalServerError",
            ],
            "method": "PATCH",
            "path": "/org/{orgId}/product/{productId}",
            "path-parameters": {
              "orgId": {
                "docs": "Organization ID",
                "type": "string",
              },
              "productId": {
                "docs": "Product ID",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "fulfillmentUrl": {
                    "docs": undefined,
                    "type": "string",
                  },
                  "id": {
                    "docs": undefined,
                    "type": "string",
                  },
                  "organizationID": {
                    "docs": undefined,
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "SharedUpdateProductParams",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedWorkloadProduct",
            },
          },
        },
      },
    },
    "report.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "GetRevenueReport": {
            "auth": true,
            "docs": "Get the revenue report of the given organization, product, entitlement, or buyer.",
            "errors": [
              "root.BadRequestError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/org/{orgId}/revenueReport",
            "path-parameters": {
              "orgId": {
                "docs": "Organization ID",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "buyerID": {
                    "docs": "Optional, if available, return the report for the Buyer.",
                    "type": "optional<string>",
                  },
                  "entitlementID": {
                    "docs": "Optional, if available, return the report for the Entitlement.",
                    "type": "optional<string>",
                  },
                  "organizationID": {
                    "docs": "Required. If the productID & entitlementID are emtpy, return the report for the entire Organization.",
                    "type": "string",
                  },
                  "partner": {
                    "docs": "Required.",
                    "type": "root.SharedGetRevenueReportParamsPartner",
                  },
                  "productID": {
                    "docs": "Optional, if available, return the report for the Product.",
                    "type": "optional<string>",
                  },
                  "reportType": {
                    "docs": undefined,
                    "type": "root.SharedRevenueReportType",
                  },
                  "service": {
                    "docs": "Required.",
                    "type": "root.SharedGetRevenueReportParamsService",
                  },
                },
              },
              "headers": undefined,
              "name": "SharedGetRevenueReportParams",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedRevenueReport",
            },
          },
          "GetUsageReport": {
            "auth": true,
            "docs": "get the daily usage report of the given entitlement, the default timespan is lifetime.",
            "errors": [
              "root.BadRequestError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/org/{orgId}/usageReport",
            "path-parameters": {
              "orgId": {
                "docs": "Organization ID",
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "entitlementID": {
                    "docs": undefined,
                    "type": "string",
                  },
                  "organizationID": {
                    "docs": undefined,
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "SharedGetUsageReportParams",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedUsageReport",
            },
          },
          "ListRevenueRecordDetails": {
            "auth": true,
            "docs": "list the raw revenue record details for the given organization, product, entitlement, or buyer.",
            "errors": [
              "root.BadRequestError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/org/{orgId}/partner/{partner}/revenueRecordDetail",
            "path-parameters": {
              "orgId": {
                "docs": "Organization ID",
                "type": "string",
              },
              "partner": {
                "docs": "Cloud Partner",
                "type": "root.ListRevenueRecordDetailsRequestPartner",
              },
            },
            "request": {
              "name": "ListRevenueRecordDetailsRequest",
              "query-parameters": {
                "buyerId": {
                  "allow-multiple": undefined,
                  "docs": "Filter revenue record details by the given buyer ID",
                  "type": "optional<string>",
                },
                "endDate": {
                  "allow-multiple": undefined,
                  "docs": "end date (UTC) in YYYY-MM-DD format, default is today",
                  "type": "optional<string>",
                },
                "entitlementId": {
                  "allow-multiple": undefined,
                  "docs": "Filter revenue record details by the given entitlement ID",
                  "type": "optional<string>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": "List pagination size, default 20, max value is 1000",
                  "type": "optional<integer>",
                },
                "offset": {
                  "allow-multiple": undefined,
                  "docs": "List pagination offset, default 0",
                  "type": "optional<integer>",
                },
                "productId": {
                  "allow-multiple": undefined,
                  "docs": "Filter revenue record details by the given product ID",
                  "type": "optional<string>",
                },
                "startDate": {
                  "allow-multiple": undefined,
                  "docs": "start date (UTC) in YYYY-MM-DD format, default is 30 days before the endDate",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedListRevenueRecordDetailsResponse",
            },
          },
          "ListRevenueRecords": {
            "auth": true,
            "docs": "list the revenue records for the given organization, product, entitlement, or buyer.",
            "errors": [
              "root.BadRequestError",
              "root.InternalServerError",
            ],
            "method": "GET",
            "path": "/org/{orgId}/partner/{partner}/revenueRecord",
            "path-parameters": {
              "orgId": {
                "docs": "Organization ID",
                "type": "string",
              },
              "partner": {
                "docs": "Cloud Partner",
                "type": "root.ListRevenueRecordsRequestPartner",
              },
            },
            "request": {
              "name": "ListRevenueRecordsRequest",
              "query-parameters": {
                "buyerId": {
                  "allow-multiple": undefined,
                  "docs": "Filter revenue record details by the given buyer ID",
                  "type": "optional<string>",
                },
                "endDate": {
                  "allow-multiple": undefined,
                  "docs": "end date (UTC) in YYYY-MM-DD format, default is today",
                  "type": "optional<string>",
                },
                "entitlementId": {
                  "allow-multiple": undefined,
                  "docs": "Filter revenue record details by the given entitlement ID",
                  "type": "optional<string>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": "List pagination size, default 20, max value is 1000",
                  "type": "optional<integer>",
                },
                "offset": {
                  "allow-multiple": undefined,
                  "docs": "List pagination offset, default 0",
                  "type": "optional<integer>",
                },
                "productId": {
                  "allow-multiple": undefined,
                  "docs": "Filter revenue record details by the given product ID",
                  "type": "optional<string>",
                },
                "startDate": {
                  "allow-multiple": undefined,
                  "docs": "start date (UTC) in YYYY-MM-DD format, default is 30 days before the endDate",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedListRevenueRecordsResponse",
            },
          },
        },
      },
    },
  },
  "rootApiFile": {
    "auth": "BearerTokenAuth",
    "auth-schemes": {
      "BearerTokenAuth": {
        "header": "Authorization",
        "name": "apiKey",
        "type": "string",
      },
    },
    "default-environment": "default",
    "display-name": "Suger API",
    "environments": {
      "default": "https://api.suger.cloud",
    },
    "error-discrimination": {
      "strategy": "status-code",
    },
    "name": "api",
  },
}
`;

exports[`open api converter vellum simple 1`] = `
{
  "definitionFiles": {
    "__package__.yml": {
      "errors": {
        "BadRequestError": {
          "status-code": 400,
          "type": "unknown",
        },
        "InternalServerError": {
          "status-code": 500,
          "type": "unknown",
        },
        "NotFoundError": {
          "status-code": 404,
          "type": "unknown",
        },
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "generate": {
            "auth": true,
            "docs": "<strong style="background-color:#4caf50; color:white; padding:4px; border-radius:4px">Stable</strong>

Generate a completion using a previously defined deployment.

**Note:** Uses a base url of \`https://predict.vellum.ai\`.",
            "errors": [
              "BadRequestError",
              "NotFoundError",
              "InternalServerError",
            ],
            "method": "POST",
            "path": "/v1/generate",
            "request": {
              "body": {
                "properties": {
                  "deployment_id": {
                    "docs": "The ID of the deployment. Must provide either this or deployment_name.",
                    "type": "optional<string>",
                  },
                  "deployment_name": {
                    "docs": "The name of the deployment. Must provide either this or deployment_id.",
                    "type": "optional<string>",
                  },
                  "options": {
                    "docs": "Additional configuration that can be used to control what's included in the response.",
                    "type": "optional<GenerateOptionsRequest>",
                  },
                  "requests": {
                    "docs": "The generation requests to make. Supplying multiple will perform a bulk request to the LLM provided when possible.",
                    "type": "list<GenerateRequestRequest>",
                  },
                },
              },
              "headers": undefined,
              "name": "GenerateRequestBodyRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "",
              "type": "GenerateResponse",
            },
            "url": "Default",
          },
          "search": {
            "auth": true,
            "docs": "<strong style="background-color:#4caf50; color:white; padding:4px; border-radius:4px">Stable</strong>

Perform a search against a document index.

**Note:** Uses a base url of \`https://predict.vellum.ai\`.",
            "errors": [
              "BadRequestError",
              "NotFoundError",
              "InternalServerError",
            ],
            "method": "POST",
            "path": "/v1/search",
            "request": {
              "body": {
                "properties": {
                  "index_id": {
                    "docs": "The ID of the index to search against. Must provide either this or index_name.",
                    "type": "optional<string>",
                  },
                  "index_name": {
                    "docs": "The name of the index to search against. Must provide either this or index_id.",
                    "type": "optional<string>",
                  },
                  "options": {
                    "docs": "Configuration options for the search.",
                    "type": "optional<SearchRequestOptionsRequest>",
                  },
                  "query": {
                    "docs": "The query to search for.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "SearchRequestBodyRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "",
              "type": "SearchResponse",
            },
            "url": "Predict",
          },
          "submit-completion-actuals": {
            "auth": true,
            "docs": "<strong style="background-color:#4caf50; color:white; padding:4px; border-radius:4px">Stable</strong>

Used to submit feedback regarding the quality of previously generated completions.

**Note:** Uses a base url of \`https://predict.vellum.ai\`.",
            "errors": [
              "BadRequestError",
              "NotFoundError",
              "InternalServerError",
            ],
            "method": "POST",
            "path": "/v1/submit-completion-actuals",
            "request": {
              "body": {
                "properties": {
                  "actuals": {
                    "docs": "Feedback regarding the quality of previously generated completions",
                    "type": "list<SubmitCompletionActualRequest>",
                  },
                  "deployment_id": {
                    "docs": "The ID of the deployment. Must provide either this or deployment_name.",
                    "type": "optional<string>",
                  },
                  "deployment_name": {
                    "docs": "The name of the deployment. Must provide either this or deployment_id.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "SubmitCompletionActualsRequestRequest",
              "query-parameters": undefined,
            },
            "url": "Predict",
          },
        },
      },
      "types": {
        "Document": {
          "docs": undefined,
          "properties": {
            "external_id": {
              "docs": "The unique ID of the document as represented in an external system and specified when it was originally uploaded.",
              "type": "optional<string>",
            },
            "id": {
              "docs": "The ID of the document.",
              "type": "string",
            },
            "label": {
              "docs": "The human-readable name for the document.",
              "type": "string",
            },
          },
        },
        "DocumentDocumentToDocumentIndex": {
          "docs": undefined,
          "properties": {
            "document_index_id": {
              "docs": "Vellum-generated ID that uniquely identifies the index this document is included in.",
              "type": "string",
            },
            "id": {
              "docs": "Vellum-generated ID that uniquely identifies this link.",
              "type": "string",
            },
            "indexing_state": {
              "docs": "An enum value representing where this document is along its indexing lifecycle for this index.",
              "type": "optional<IndexingStateEnum>",
            },
          },
        },
        "EnrichedNormalizedCompletion": {
          "docs": undefined,
          "properties": {
            "external_id": {
              "docs": "The external ID that was originally provided along with the generation request, which uniquely identifies this generation in an external system.",
              "type": "optional<string>",
            },
            "finish_reason": {
              "docs": "The reason the generation finished.",
              "type": "FinishReasonEnum",
            },
            "id": {
              "docs": "The Vellum-generated ID of the completion.",
              "type": "string",
            },
            "logprobs": {
              "docs": "The logprobs of the completion. Only present if specified in the original request options.",
              "type": "optional<NormalizedLogProbs>",
            },
            "model_version_id": {
              "docs": "The ID of the model version used to generate this completion.",
              "type": "string",
            },
            "text": {
              "docs": "The text generated by the LLM.",
              "type": "string",
            },
          },
        },
        "FinishReasonEnum": {
          "docs": undefined,
          "enum": [
            {
              "name": "LENGTH",
              "value": "LENGTH",
            },
            {
              "name": "STOP",
              "value": "STOP",
            },
            {
              "name": "UNKNOWN",
              "value": "UNKNOWN",
            },
          ],
        },
        "GenerateErrorResponse": {
          "docs": undefined,
          "properties": {
            "detail": {
              "docs": "Details about why the request failed.",
              "type": "string",
            },
          },
        },
        "GenerateOptionsRequest": {
          "docs": undefined,
          "properties": {
            "logprobs": {
              "docs": "Which logprobs to include, if any. Defaults to NONE.",
              "type": "optional<LogprobsEnum>",
            },
          },
        },
        "GenerateRequestRequest": {
          "docs": undefined,
          "properties": {
            "external_ids": {
              "docs": "Optionally include a unique identifier for each generation, as represented outside of Vellum. Note that this should generally be a list of length one.",
              "type": "optional<list<string>>",
            },
            "input_values": {
              "docs": "Key/value pairs for each template variable defined in the deployment's prompt.",
              "type": "map<string, unknown>",
            },
          },
        },
        "GenerateResponse": {
          "docs": undefined,
          "properties": {
            "results": {
              "docs": "The results of each generation request.",
              "type": "list<GenerateResult>",
            },
          },
        },
        "GenerateResult": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": "An object containing the resulting generation. This key will be absent if the LLM provider experienced an error.",
              "type": "optional<GenerateResultData>",
            },
            "error": {
              "docs": "An object containing details about the error that occurred. This key will be absent if the LLM provider did not experience an error.",
              "type": "optional<GenerateResultError>",
            },
          },
        },
        "GenerateResultData": {
          "docs": undefined,
          "properties": {
            "completions": {
              "docs": "The generated completions. This will generally be a list of length one.",
              "type": "list<EnrichedNormalizedCompletion>",
            },
          },
        },
        "GenerateResultError": {
          "docs": undefined,
          "properties": {
            "message": {
              "docs": "The error message returned by the LLM provider.",
              "type": "string",
            },
          },
        },
        "IndexingStateEnum": {
          "docs": undefined,
          "enum": [
            {
              "name": "AWAITING_PROCESSING",
              "value": "AWAITING_PROCESSING",
            },
            {
              "name": "QUEUED",
              "value": "QUEUED",
            },
            {
              "name": "INDEXING",
              "value": "INDEXING",
            },
            {
              "name": "INDEXED",
              "value": "INDEXED",
            },
            {
              "name": "FAILED",
              "value": "FAILED",
            },
          ],
        },
        "LogprobsEnum": {
          "docs": undefined,
          "enum": [
            {
              "name": "ALL",
              "value": "ALL",
            },
            {
              "name": "NONE",
              "value": "NONE",
            },
          ],
        },
        "ModelTypeEnum": {
          "docs": undefined,
          "enum": [
            {
              "name": "GENERATE",
              "value": "GENERATE",
            },
            {
              "name": "CLASSIFY",
              "value": "CLASSIFY",
            },
          ],
        },
        "ModelVersionBuildConfig": {
          "docs": undefined,
          "properties": {
            "base_model": {
              "docs": "The name of the base model used to create this model version, as identified by the LLM provider.",
              "type": "string",
            },
            "sandbox_snapshot": {
              "docs": "Information about the sandbox snapshot that was used to create this model version, if applicable.",
              "type": "optional<ModelVersionSandboxSnapshot>",
            },
          },
        },
        "ModelVersionExecConfigParameters": {
          "docs": undefined,
          "properties": {
            "frequency_penalty": {
              "docs": undefined,
              "type": "double",
            },
            "logit_bias": {
              "docs": undefined,
              "type": "optional<map<string, optional<double>>>",
            },
            "max_tokens": {
              "docs": undefined,
              "type": "integer",
            },
            "presence_penalty": {
              "docs": undefined,
              "type": "double",
            },
            "stop": {
              "docs": undefined,
              "type": "optional<list<string>>",
            },
            "temperature": {
              "docs": undefined,
              "type": "double",
            },
            "top_k": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "top_p": {
              "docs": undefined,
              "type": "double",
            },
          },
        },
        "ModelVersionExecConfigRead": {
          "docs": undefined,
          "properties": {
            "input_variables": {
              "docs": "Names of the template variables specified in the prompt template.",
              "type": "list<string>",
            },
            "parameters": {
              "docs": "The generation parameters that are passed to the LLM provider at runtime.",
              "type": "ModelVersionExecConfigParameters",
            },
            "prompt_template": {
              "docs": "The template used to generate prompts for this model version.",
              "type": "string",
            },
          },
        },
        "ModelVersionRead": {
          "docs": undefined,
          "properties": {
            "build_config": {
              "docs": "Configuration used to build this model version.",
              "type": "ModelVersionBuildConfig",
            },
            "created": {
              "docs": "Timestamp of when this model version was created.",
              "type": "string",
            },
            "exec_config": {
              "docs": "Configuration used to execute this model version.",
              "type": "ModelVersionExecConfigRead",
            },
            "external_id": {
              "docs": "The unique id of this model version as it exists in the above provider's system.",
              "type": "string",
            },
            "id": {
              "docs": "Vellum-generated ID that uniquely identifies this model version.",
              "type": "string",
            },
            "label": {
              "docs": "Human-friendly name for this model version.",
              "type": "string",
            },
            "model_type": {
              "docs": "The type of task this model is used for.",
              "type": "ModelTypeEnum",
            },
            "provider": {
              "docs": "Which LLM provider this model version is associated with.",
              "type": "ProviderEnum",
            },
          },
        },
        "ModelVersionSandboxSnapshot": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": "The ID of the sandbox snapshot.",
              "type": "string",
            },
            "prompt_index": {
              "docs": "The index of the prompt in the sandbox snapshot.",
              "type": "integer",
            },
          },
        },
        "NormalizedLogProbs": {
          "docs": undefined,
          "properties": {
            "likelihood": {
              "docs": undefined,
              "type": "double",
            },
            "tokens": {
              "docs": undefined,
              "type": "list<NormalizedTokenLogProbs>",
            },
          },
        },
        "NormalizedTokenLogProbs": {
          "docs": undefined,
          "properties": {
            "logprob": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "text_offset": {
              "docs": undefined,
              "type": "integer",
            },
            "token": {
              "docs": undefined,
              "type": "string",
            },
            "top_logprobs": {
              "docs": undefined,
              "type": "optional<map<string, optional<double>>>",
            },
          },
        },
        "PaginatedSlimDocumentList": {
          "docs": undefined,
          "properties": {
            "count": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "next": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "previous": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "results": {
              "docs": undefined,
              "type": "optional<list<SlimDocument>>",
            },
          },
        },
        "ProcessingStateEnum": {
          "docs": undefined,
          "enum": [
            {
              "name": "QUEUED",
              "value": "QUEUED",
            },
            {
              "name": "PROCESSING",
              "value": "PROCESSING",
            },
            {
              "name": "PROCESSED",
              "value": "PROCESSED",
            },
            {
              "name": "FAILED",
              "value": "FAILED",
            },
          ],
        },
        "ProviderEnum": {
          "docs": undefined,
          "enum": [
            {
              "name": "OPENAI",
              "value": "OPENAI",
            },
            {
              "name": "COHERE",
              "value": "COHERE",
            },
            {
              "name": "ANTHROPIC",
              "value": "ANTHROPIC",
            },
          ],
        },
        "SearchErrorResponse": {
          "docs": undefined,
          "properties": {
            "detail": {
              "docs": "Details about why the request failed.",
              "type": "string",
            },
          },
        },
        "SearchFiltersRequest": {
          "docs": undefined,
          "properties": {
            "external_ids": {
              "docs": "The document external IDs to filter by",
              "type": "optional<list<string>>",
            },
          },
        },
        "SearchRequestOptionsRequest": {
          "docs": undefined,
          "properties": {
            "filters": {
              "docs": "The filters to apply to the search.",
              "type": "optional<SearchFiltersRequest>",
            },
            "limit": {
              "docs": "The maximum number of results to return.",
              "type": "optional<integer>",
            },
            "result_merging": {
              "docs": "The configuration for merging results.",
              "type": "optional<SearchResultMergingRequest>",
            },
            "weights": {
              "docs": "The weights to use for the search. Must add up to 1.0.",
              "type": "optional<SearchWeightsRequest>",
            },
          },
        },
        "SearchResponse": {
          "docs": undefined,
          "properties": {
            "results": {
              "docs": "The results of the search. Each result represents a chunk that matches the search query.",
              "type": "list<SearchResult>",
            },
          },
        },
        "SearchResult": {
          "docs": undefined,
          "properties": {
            "document": {
              "docs": "The document that contains the chunk that matched the search query.",
              "type": "Document",
            },
            "keywords": {
              "docs": undefined,
              "type": "list<string>",
            },
            "score": {
              "docs": "A score representing how well the chunk matches the search query.",
              "type": "double",
            },
            "text": {
              "docs": "The text of the chunk that matched the search query.",
              "type": "string",
            },
          },
        },
        "SearchResultMergingRequest": {
          "docs": undefined,
          "properties": {
            "enabled": {
              "docs": "Whether to enable merging results",
              "type": "boolean",
            },
          },
        },
        "SearchWeightsRequest": {
          "docs": undefined,
          "properties": {
            "keywords": {
              "docs": "The relative weight to give to keyword matches",
              "type": "double",
            },
            "semantic_similarity": {
              "docs": "The relative weight to give to semantic similarity",
              "type": "double",
            },
          },
        },
        "SlimDocument": {
          "docs": undefined,
          "properties": {
            "document_to_document_indexes": {
              "docs": undefined,
              "type": "list<DocumentDocumentToDocumentIndex>",
            },
            "external_id": {
              "docs": "The external ID that was originally provided when uploading the document.",
              "type": "optional<string>",
            },
            "id": {
              "docs": "Vellum-generated ID that uniquely identifies this document.",
              "type": "string",
            },
            "keywords": {
              "docs": "A list of keywords associated with this document. Originally provided when uploading the document.",
              "type": "optional<list<string>>",
            },
            "label": {
              "docs": "Human-friendly name for this document.",
              "type": "string",
            },
            "last_uploaded_at": {
              "docs": "A timestamp representing when this document was most recently uploaded.",
              "type": "string",
            },
            "processing_state": {
              "docs": "The current processing state of the document",
              "type": "optional<ProcessingStateEnum>",
            },
            "status": {
              "docs": "The document's current status.",
              "type": "optional<StatusEnum>",
            },
          },
        },
        "StatusEnum": {
          "docs": undefined,
          "enum": [
            {
              "name": "ACTIVE",
              "value": "ACTIVE",
            },
          ],
        },
        "SubmitCompletionActualRequest": {
          "docs": undefined,
          "properties": {
            "external_id": {
              "docs": "The external ID that was originally provided when generating the completion that you'd now like to submit actuals for. Must provide either this or id.",
              "type": "optional<string>",
            },
            "id": {
              "docs": "The Vellum-generated ID of a previously generated completion. Must provide either this or external_id.",
              "type": "optional<string>",
            },
            "quality": {
              "docs": "A number between 0 and 1 representing the quality of the completion. 0 is the worst, 1 is the best.",
              "type": "optional<double>",
            },
            "text": {
              "docs": "Text representing what the completion _should_ have been.",
              "type": "optional<string>",
            },
            "timestamp": {
              "docs": "Optionally provide the timestamp representing when this feedback was collected. Used for reporting purposes.",
              "type": "optional<string>",
            },
          },
        },
        "SubmitCompletionActualsErrorResponse": {
          "docs": undefined,
          "properties": {
            "detail": {
              "docs": undefined,
              "type": "string",
            },
          },
        },
        "UploadDocumentErrorResponse": {
          "docs": undefined,
          "properties": {
            "detail": {
              "docs": undefined,
              "type": "string",
            },
          },
        },
        "UploadDocumentResponse": {
          "docs": undefined,
          "properties": {
            "document_id": {
              "docs": "The ID of the newly created document.",
              "type": "string",
            },
          },
        },
      },
    },
    "documents.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "list": {
            "auth": true,
            "docs": "
<strong style="background-color:#4caf50; color:white; padding:4px; border-radius:4px">Stable</strong>

Used to list documents. Optionally filter on supported fields.
",
            "errors": [],
            "method": "GET",
            "path": "/v1/documents",
            "request": {
              "name": "ListDocumentsRequest",
              "query-parameters": {
                "document_index_id": {
                  "allow-multiple": undefined,
                  "docs": "Filter down to only those documents that are included in the specified index. You may provide either the Vellum-generated ID or the unique name of the index specified upon initial creation.",
                  "type": "optional<string>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": "Number of results to return per page.",
                  "type": "optional<integer>",
                },
                "offset": {
                  "allow-multiple": undefined,
                  "docs": "The initial index from which to return the results.",
                  "type": "optional<integer>",
                },
                "ordering": {
                  "allow-multiple": undefined,
                  "docs": "Which field to use when ordering the results.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "",
              "type": "root.PaginatedSlimDocumentList",
            },
            "url": "Default",
          },
          "upload": {
            "auth": true,
            "docs": "<strong style="background-color:#4caf50; color:white; padding:4px; border-radius:4px">Stable</strong>

Upload a document to be indexed and used for search.

**Note:** Uses a base url of \`https://documents.vellum.ai\`.",
            "errors": [
              "root.BadRequestError",
              "root.NotFoundError",
              "root.InternalServerError",
            ],
            "method": "POST",
            "path": "/v1/upload-document",
            "request": {
              "body": {
                "properties": {
                  "add_to_index_names": {
                    "docs": "Optionally include the names of all indexes that you'd like this document to be included in",
                    "type": "optional<list<string>>",
                  },
                  "contents": "file",
                  "external_id": {
                    "docs": "Optionally include an external ID for this document. This is useful if you want to re-upload the same document later when its contents change and would like it to be re-indexed.",
                    "type": "optional<string>",
                  },
                  "keywords": {
                    "docs": "Optionally include a list of keywords that'll be associated with this document. Used when performing keyword searches.",
                    "type": "optional<list<string>>",
                  },
                  "label": {
                    "docs": "A human-friendly name for this document. Typically the filename.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "UploadDocumentRequestBodyRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "",
              "type": "root.UploadDocumentResponse",
            },
            "url": "Documents",
          },
        },
      },
    },
    "modelVersions.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "retrieve": {
            "auth": true,
            "docs": "
<strong style="background-color:#ffc107; color:white; padding:4px; border-radius:4px">Unstable</strong>

Used to retrieve a model version given its ID.
",
            "errors": [],
            "method": "GET",
            "path": "/v1/model-versions/{id}",
            "path-parameters": {
              "id": {
                "docs": "A UUID string identifying this model version.",
                "type": "string",
              },
            },
            "response": {
              "docs": "",
              "type": "root.ModelVersionRead",
            },
            "url": "Default",
          },
        },
      },
    },
  },
  "rootApiFile": {
    "auth": "apiKeyAuth",
    "auth-schemes": {
      "apiKeyAuth": {
        "header": "X_API_KEY",
        "name": "apiKey",
        "type": "string",
      },
    },
    "default-environment": "Production",
    "display-name": "Vellum Client API",
    "environments": {
      "Production": {
        "urls": {
          "Default": "https://api.vellum.ai",
          "Documents": "https://documents.vellum.ai",
          "Predict": "https://predict.vellum.ai",
        },
      },
    },
    "error-discrimination": {
      "strategy": "status-code",
    },
    "name": "api",
  },
}
`;
