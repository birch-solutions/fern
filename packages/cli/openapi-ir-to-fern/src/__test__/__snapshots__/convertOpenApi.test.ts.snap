// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`open api converter buzzshot simple 1`] = `
{
  "definitionFiles": {
    "__package__.yml": {
      "service": undefined,
      "types": {
        "Game": {
          "docs": undefined,
          "properties": {
            "added_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "complete": {
              "docs": undefined,
              "type": "GameComplete",
            },
            "date": {
              "docs": undefined,
              "type": "string",
            },
            "extra_fields": {
              "docs": undefined,
              "type": "list<GameExtraFieldsItem>",
            },
            "group": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "photos": {
              "docs": undefined,
              "type": "optional<list<GamePhotosItem>>",
            },
            "room": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "start_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "time": {
              "docs": undefined,
              "type": "string",
            },
            "updated_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "GameComplete": {
          "docs": undefined,
          "properties": {
            "completed_at": {
              "docs": undefined,
              "type": "string",
            },
            "completion_time": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "did_win": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "hints": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "score": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "GameExtraFieldsItem": {
          "docs": undefined,
          "properties": {
            "key": {
              "docs": undefined,
              "type": "string",
            },
            "label": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "present": {
              "docs": undefined,
              "type": "boolean",
            },
            "value": {
              "docs": undefined,
              "type": "optional<map<string, unknown>>",
            },
          },
        },
        "GamePhotosItem": {
          "docs": undefined,
          "properties": {
            "added_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "photo": {
              "docs": undefined,
              "type": "string",
            },
            "processed_image": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "ready": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "Group": {
          "docs": undefined,
          "properties": {
            "added_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "date": {
              "docs": undefined,
              "type": "string",
            },
            "games": {
              "docs": undefined,
              "type": "optional<list<GroupGamesItem>>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "is_event": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "photos": {
              "docs": undefined,
              "type": "optional<list<GroupPhotosItem>>",
            },
            "players": {
              "docs": undefined,
              "type": "list<GroupPlayersItem>",
            },
            "start_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "time": {
              "docs": undefined,
              "type": "string",
            },
            "updated_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "GroupGamesItem": {
          "docs": undefined,
          "properties": {
            "added_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "complete": {
              "docs": undefined,
              "type": "GroupGamesItemComplete",
            },
            "date": {
              "docs": undefined,
              "type": "string",
            },
            "extra_fields": {
              "docs": undefined,
              "type": "list<GroupGamesItemExtraFieldsItem>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "room": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "start_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "time": {
              "docs": undefined,
              "type": "string",
            },
            "updated_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "GroupGamesItemComplete": {
          "docs": undefined,
          "properties": {
            "completed_at": {
              "docs": undefined,
              "type": "string",
            },
            "completion_time": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "did_win": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "hints": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "score": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "GroupGamesItemExtraFieldsItem": {
          "docs": undefined,
          "properties": {
            "key": {
              "docs": undefined,
              "type": "string",
            },
            "label": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "present": {
              "docs": undefined,
              "type": "boolean",
            },
            "value": {
              "docs": undefined,
              "type": "optional<map<string, unknown>>",
            },
          },
        },
        "GroupPhotosItem": {
          "docs": undefined,
          "properties": {
            "added_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "game": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "photo": {
              "docs": undefined,
              "type": "string",
            },
            "processed_image": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "ready": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "GroupPlayersItem": {
          "docs": undefined,
          "properties": {
            "added_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "email": {
              "docs": undefined,
              "type": "string",
            },
            "extra_fields": {
              "docs": undefined,
              "type": "list<GroupPlayersItemExtraFieldsItem>",
            },
            "first_name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "last_name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "phone": {
              "docs": undefined,
              "type": "string",
            },
            "player": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "signature": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "updated_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "GroupPlayersItemExtraFieldsItem": {
          "docs": undefined,
          "properties": {
            "key": {
              "docs": undefined,
              "type": "string",
            },
            "label": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "present": {
              "docs": undefined,
              "type": "boolean",
            },
            "value": {
              "docs": undefined,
              "type": "optional<map<string, unknown>>",
            },
          },
        },
        "ListAccountsResponse": {
          "docs": undefined,
          "properties": {
            "count": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "next": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "previous": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "results": {
              "docs": undefined,
              "type": "optional<list<Room>>",
            },
          },
        },
        "ListGamesResponse": {
          "docs": undefined,
          "properties": {
            "count": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "next": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "previous": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "results": {
              "docs": undefined,
              "type": "optional<list<Game>>",
            },
          },
        },
        "ListGroupsResponse": {
          "docs": undefined,
          "properties": {
            "count": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "next": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "previous": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "results": {
              "docs": undefined,
              "type": "optional<list<Group>>",
            },
          },
        },
        "ListLocationsResponse": {
          "docs": undefined,
          "properties": {
            "count": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "next": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "previous": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "results": {
              "docs": undefined,
              "type": "optional<list<Room>>",
            },
          },
        },
        "ListPhotosResponse": {
          "docs": undefined,
          "properties": {
            "count": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "next": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "previous": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "results": {
              "docs": undefined,
              "type": "optional<list<Photo>>",
            },
          },
        },
        "ListPlayersResponse": {
          "docs": undefined,
          "properties": {
            "count": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "next": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "previous": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "results": {
              "docs": undefined,
              "type": "optional<list<Player>>",
            },
          },
        },
        "Photo": {
          "docs": undefined,
          "properties": {
            "added_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "original_image": {
              "docs": undefined,
              "type": "string",
            },
            "processed": {
              "docs": undefined,
              "type": "list<PhotoProcessedItem>",
            },
          },
        },
        "PhotoProcessedItem": {
          "docs": undefined,
          "properties": {
            "added_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "game": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "group": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "photo": {
              "docs": undefined,
              "type": "string",
            },
            "processed_image": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "ready": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "Player": {
          "docs": undefined,
          "properties": {
            "added_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "email": {
              "docs": undefined,
              "type": "string",
            },
            "extra_fields": {
              "docs": undefined,
              "type": "list<PlayerExtraFieldsItem>",
            },
            "first_name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "last_name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "marketing_email_allowed": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "phone": {
              "docs": undefined,
              "type": "string",
            },
            "updated_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "PlayerExtraFieldsItem": {
          "docs": undefined,
          "properties": {
            "key": {
              "docs": undefined,
              "type": "string",
            },
            "label": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "present": {
              "docs": undefined,
              "type": "boolean",
            },
            "value": {
              "docs": undefined,
              "type": "optional<map<string, unknown>>",
            },
          },
        },
        "Room": {
          "docs": undefined,
          "properties": {
            "hidden": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "name": {
              "docs": undefined,
              "type": "string",
            },
          },
        },
      },
    },
    "api.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "listAccounts": {
            "auth": false,
            "method": "GET",
            "path": "/api/v2/accounts",
            "request": {
              "name": "listAccountsRequest",
              "query-parameters": {
                "page": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "",
              "type": "root.ListAccountsResponse",
            },
          },
          "listGames": {
            "auth": false,
            "method": "GET",
            "path": "/api/v2/games",
            "request": {
              "name": "listGamesRequest",
              "query-parameters": {
                "after": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "before": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "complete": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "date": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "page": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "",
              "type": "root.ListGamesResponse",
            },
          },
          "listGroups": {
            "auth": false,
            "method": "GET",
            "path": "/api/v2/groups",
            "request": {
              "name": "listGroupsRequest",
              "query-parameters": {
                "complete": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "is_event": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "page": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "",
              "type": "root.ListGroupsResponse",
            },
          },
          "listLocations": {
            "auth": false,
            "method": "GET",
            "path": "/api/v2/rooms",
            "request": {
              "name": "listLocationsRequest",
              "query-parameters": {
                "page": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "",
              "type": "root.ListLocationsResponse",
            },
          },
          "listPhotos": {
            "auth": false,
            "method": "GET",
            "path": "/api/v2/photos",
            "request": {
              "name": "listPhotosRequest",
              "query-parameters": {
                "page": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "",
              "type": "root.ListPhotosResponse",
            },
          },
          "listPlayers": {
            "auth": false,
            "method": "GET",
            "path": "/api/v2/players",
            "request": {
              "name": "listPlayersRequest",
              "query-parameters": {
                "page": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "",
              "type": "root.ListPlayersResponse",
            },
          },
          "retrieveAccount": {
            "auth": false,
            "method": "GET",
            "path": "/api/v2/accounts/{id}",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "",
              "type": "root.Room",
            },
          },
          "retrieveGame": {
            "auth": false,
            "method": "GET",
            "path": "/api/v2/games/{id}",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "name": "retrieveGameRequest",
              "query-parameters": {
                "after": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "before": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "complete": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "date": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "",
              "type": "root.Game",
            },
          },
          "retrieveGroup": {
            "auth": false,
            "method": "GET",
            "path": "/api/v2/groups/{id}",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "name": "retrieveGroupRequest",
              "query-parameters": {
                "complete": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "is_event": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "",
              "type": "root.Group",
            },
          },
          "retrieveLocation": {
            "auth": false,
            "method": "GET",
            "path": "/api/v2/rooms/{id}",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "",
              "type": "root.Room",
            },
          },
          "retrievePhoto": {
            "auth": false,
            "method": "GET",
            "path": "/api/v2/photos/{photo_id}",
            "path-parameters": {
              "photo_id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "",
              "type": "root.Photo",
            },
          },
          "retrievePlayer": {
            "auth": false,
            "method": "GET",
            "path": "/api/v2/players/{id}",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "",
              "type": "root.Player",
            },
          },
        },
      },
    },
  },
  "rootApiFile": {
    "auth": "bearer",
    "display-name": "",
    "error-discrimination": {
      "strategy": "status-code",
    },
    "headers": {},
    "name": "api",
  },
}
`;

exports[`open api converter devrev simple 1`] = `
{
  "definitionFiles": {
    "__package__.yml": {
      "service": undefined,
      "types": {
        "ArtifactSummary": {
          "docs": undefined,
          "type": "AtomBaseSummary",
        },
        "ArtifactsLocateResponse": {
          "docs": "The response to getting an artifact's download URL.",
          "properties": {
            "expires_at": {
              "docs": "The expiration timestamp of the URL.",
              "type": "optional<string>",
            },
            "url": {
              "docs": "The artifact's download URL.",
              "type": "string",
            },
          },
        },
        "ArtifactsPrepareResponse": {
          "docs": "The response to preparing a URL to upload a file.",
          "properties": {
            "form_data": {
              "docs": "The POST policy form data.",
              "type": "list<ArtifactsPrepareResponseFormData>",
            },
            "id": {
              "docs": "The generated artifact's ID.",
              "type": "string",
            },
            "url": {
              "docs": "The URL that the file's data should be uploaded to.",
              "type": "string",
            },
          },
        },
        "ArtifactsPrepareResponseFormData": {
          "docs": undefined,
          "properties": {
            "key": {
              "docs": "Key of the form field.",
              "type": "string",
            },
            "value": {
              "docs": "Value corresponding to the key.",
              "type": "string",
            },
          },
        },
        "AtomBase": {
          "docs": undefined,
          "properties": {
            "created_by": {
              "docs": undefined,
              "type": "optional<UserSummary>",
            },
            "created_date": {
              "docs": "Timestamp when the object was created.",
              "type": "optional<string>",
            },
            "display_id": {
              "docs": "Human-readable object ID unique to the Dev organization.",
              "type": "optional<string>",
            },
            "id": {
              "docs": "Globally unique object ID.",
              "type": "string",
            },
            "modified_by": {
              "docs": undefined,
              "type": "optional<UserSummary>",
            },
            "modified_date": {
              "docs": "Timestamp when the object was last modified.",
              "type": "optional<string>",
            },
          },
        },
        "AtomBaseSummary": {
          "docs": undefined,
          "properties": {
            "display_id": {
              "docs": "Human-readable object ID unique to the Dev organization.",
              "type": "optional<string>",
            },
            "id": {
              "docs": "Globally unique object ID.",
              "type": "string",
            },
          },
        },
        "AuthConnection": {
          "base-properties": {
            "display_name": {
              "docs": "Display name of the authentication connection. This name will be
visible to all the users when they sign in to this Dev
organization. For example, if the display_name is 'abclogin', then
it would appear on the login button as 'Log in to abclogin'.
",
              "type": "optional<string>",
            },
            "enabled": {
              "docs": "Whether the authentication connection is enabled or disabled. If
set to false, the authentication connection will not show up on the
login screen as a login option.
",
              "type": "optional<boolean>",
            },
            "id": {
              "docs": "ID of the authentication connection.",
              "type": "string",
            },
            "type": {
              "docs": undefined,
              "type": "AuthConnectionType",
            },
          },
          "docs": "Connection object that specifies the configuration for an
authentication connection that is set up for a Dev organization.
",
          "union": {
            "google_apps": {
              "docs": undefined,
              "type": "AuthConnectionOptionsGoogleApps",
            },
            "oidc": {
              "docs": undefined,
              "type": "AuthConnectionOptionsOidc",
            },
            "samlp": {
              "docs": undefined,
              "type": "AuthConnectionOptionsSaml",
            },
            "social": {
              "docs": undefined,
              "type": "auth-connection-options-social",
            },
            "waad": {
              "docs": undefined,
              "type": "AuthConnectionOptionsAzureAd",
            },
          },
        },
        "AuthConnectionOptionsAzureAd": {
          "docs": "Object encapsulating the configuration parameters for an Azure AD
authentication connection.
",
          "properties": {
            "client_id": {
              "docs": "Client ID for the Azure authentication connection.",
              "type": "optional<string>",
            },
            "client_secret": {
              "docs": "Client secret for the Azure authentication connection.",
              "type": "optional<string>",
            },
            "domain": {
              "docs": "Domain URL of the Azure authentication connection.",
              "type": "optional<string>",
            },
          },
        },
        "AuthConnectionOptionsGoogleApps": {
          "docs": "Object encapsulating the configuration parameters for a Google Apps
authentication connection.
",
          "properties": {
            "client_id": {
              "docs": "Client ID for the Google Apps authentication connection.",
              "type": "optional<string>",
            },
            "client_secret": {
              "docs": "Client secret for the Google Apps authentication connection.
",
              "type": "optional<string>",
            },
            "tenant_domain": {
              "docs": "Tenant domain URL of the Google Apps authentication connection.
",
              "type": "optional<string>",
            },
          },
        },
        "AuthConnectionOptionsOidc": {
          "docs": "Object encapsulating the configuration parameters for an OIDC
authentication connection.
",
          "properties": {
            "client_id": {
              "docs": "Client ID for the OIDC authentication connection.",
              "type": "optional<string>",
            },
            "client_secret": {
              "docs": "Client secret for the OIDC authentication connection.",
              "type": "optional<string>",
            },
            "issuer": {
              "docs": "Issuer URL of the OIDC authentication connection.",
              "type": "optional<string>",
            },
          },
        },
        "AuthConnectionOptionsSaml": {
          "docs": "Object encapsulating the configuration parameters for a SAML
authentication connection.
",
          "properties": {
            "sign_in_endpoint": {
              "docs": "Sign In endpoint for the SAML authentication connection.",
              "type": "optional<string>",
            },
            "signing_cert": {
              "docs": "Signing certificate for the SAML authentication connection.
",
              "type": "optional<string>",
            },
          },
        },
        "AuthConnectionToggle": {
          "docs": undefined,
          "enum": [
            {
              "name": "disable",
              "value": "disable",
            },
            {
              "name": "enable",
              "value": "enable",
            },
          ],
        },
        "AuthConnectionType": {
          "docs": "Defines the type for the authentication connection. The configuration
for each authentication connection will depend on the type value.
",
          "enum": [
            {
              "name": "google_apps",
              "value": "google_apps",
            },
            {
              "name": "oidc",
              "value": "oidc",
            },
            {
              "name": "samlp",
              "value": "samlp",
            },
            {
              "name": "social",
              "value": "social",
            },
            {
              "name": "waad",
              "value": "waad",
            },
          ],
        },
        "AuthToken": {
          "docs": undefined,
          "properties": {
            "client_id": {
              "docs": "An identifier that represents the application that requested the
token. Only applicable for application access tokens.
",
              "type": "optional<string>",
            },
            "expires_at": {
              "docs": "The time at which the token expires.",
              "type": "optional<string>",
            },
            "issued_at": {
              "docs": "The time at which the token was issued.",
              "type": "optional<string>",
            },
            "requested_token_type": {
              "docs": undefined,
              "type": "optional<AuthTokenRequestedTokenType>",
            },
            "scopes": {
              "docs": "The scopes associated with the issued token.",
              "type": "optional<list<string>>",
            },
            "status": {
              "docs": undefined,
              "type": "optional<AuthTokenStatus>",
            },
            "subject": {
              "docs": "The subject of the token.",
              "type": "optional<string>",
            },
            "token_hint": {
              "docs": "A hint that identifies the token.",
              "type": "optional<string>",
            },
          },
        },
        "AuthTokenGrantType": {
          "docs": "Specifies the process of obtaining a token.",
          "enum": [
            {
              "name": "UrnDevrevParamsOauthGrantTypeTokenIssue",
              "value": "urn:devrev:params:oauth:grant-type:token-issue",
            },
            {
              "name": "UrnIetfParamsOauthGrantTypeTokenExchange",
              "value": "urn:ietf:params:oauth:grant-type:token-exchange",
            },
          ],
        },
        "AuthTokenRequestedTokenType": {
          "docs": "The type of the requested token.",
          "enum": [
            {
              "name": "UrnDevrevParamsOauthTokenTypeAat",
              "value": "urn:devrev:params:oauth:token-type:aat",
            },
            {
              "name": "UrnDevrevParamsOauthTokenTypeAatPublic",
              "value": "urn:devrev:params:oauth:token-type:aat:public",
            },
            {
              "name": "UrnDevrevParamsOauthTokenTypeDev",
              "value": "urn:devrev:params:oauth:token-type:dev",
            },
            {
              "name": "UrnDevrevParamsOauthTokenTypePat",
              "value": "urn:devrev:params:oauth:token-type:pat",
            },
            {
              "name": "UrnDevrevParamsOauthTokenTypeRev",
              "value": "urn:devrev:params:oauth:token-type:rev",
            },
            {
              "name": "UrnDevrevParamsOauthTokenTypeSession",
              "value": "urn:devrev:params:oauth:token-type:session",
            },
            {
              "name": "UrnDevrevParamsOauthTokenTypeSessionDev0",
              "value": "urn:devrev:params:oauth:token-type:session:dev0",
            },
            {
              "name": "UrnDevrevParamsOauthTokenTypeSys",
              "value": "urn:devrev:params:oauth:token-type:sys",
            },
            {
              "name": "UrnIetfParamsOauthTokenTypeJwt",
              "value": "urn:ietf:params:oauth:token-type:jwt",
            },
          ],
        },
        "AuthTokenStatus": {
          "docs": "The status of the token.",
          "enum": [
            {
              "name": "active",
              "value": "active",
            },
            {
              "name": "expired",
              "value": "expired",
            },
            {
              "name": "revoked",
              "value": "revoked",
            },
          ],
        },
        "AuthTokenSubjectTokenType": {
          "docs": "The type of the subject token.",
          "enum": [
            {
              "name": "UrnDevrevParamsOauthTokenTypeJwtAuth0",
              "value": "urn:devrev:params:oauth:token-type:jwt:auth0",
            },
            {
              "name": "UrnDevrevParamsOauthTokenTypeJwtDev",
              "value": "urn:devrev:params:oauth:token-type:jwt:dev",
            },
            {
              "name": "UrnDevrevParamsOauthTokenTypeRevinfo",
              "value": "urn:devrev:params:oauth:token-type:revinfo",
            },
            {
              "name": "UrnDevrevParamsOauthTokenTypeSysu",
              "value": "urn:devrev:params:oauth:token-type:sysu",
            },
            {
              "name": "UrnDevrevParamsOauthTokenTypeUserinfo",
              "value": "urn:devrev:params:oauth:token-type:userinfo",
            },
            {
              "name": "UrnDevrevParamsOauthTokenTypeUserinfoProfile",
              "value": "urn:devrev:params:oauth:token-type:userinfo:profile",
            },
            {
              "name": "UrnIetfParamsOauthTokenTypeJwt",
              "value": "urn:ietf:params:oauth:token-type:jwt",
            },
          ],
        },
        "AuthTokenTokenType": {
          "docs": "The type of the issued token. Bearer is the only supported token type.
",
          "enum": [
            {
              "name": "bearer",
              "value": "bearer",
            },
          ],
        },
        "AuthTokensCreateResponse": {
          "docs": "Response for the request to create a new token corresponding to the
requested token type.
",
          "properties": {
            "access_token": {
              "docs": "The issued JSON Web Token (JWT) corresponding to the requested
token type.
",
              "type": "string",
            },
            "client_id": {
              "docs": "An identifier that represents the application which is requesting
the token. Only present in a response corresponding to an
application access token (AAT).
",
              "type": "optional<string>",
            },
            "expires_in": {
              "docs": "The validity lifetime of the token specified in seconds since Unix
epoch.
",
              "type": "integer",
            },
            "refresh_token": {
              "docs": "A token to refresh the issued token.",
              "type": "optional<string>",
            },
            "scope": {
              "docs": "The scopes associated with the issued token. A space-delimited list
of values in which the order of values does not matter.
",
              "type": "optional<string>",
            },
            "token_type": {
              "docs": undefined,
              "type": "AuthTokenTokenType",
            },
          },
        },
        "AuthTokensGetResponse": {
          "docs": "The response to get the token metadata.",
          "properties": {
            "token": {
              "docs": undefined,
              "type": "AuthToken",
            },
          },
        },
        "AuthTokensListResponse": {
          "docs": "The response to list the token metadata.",
          "properties": {
            "tokens": {
              "docs": "The list of token metadata.",
              "type": "list<AuthToken>",
            },
          },
        },
        "AuthTokensOrgTraits": {
          "docs": "Carries Rev org info.",
          "properties": {
            "display_name": {
              "docs": "The display name of the Rev org.",
              "type": "optional<string>",
            },
            "domain": {
              "docs": "The domain of the Rev org.",
              "type": "optional<string>",
            },
          },
        },
        "AuthTokensRevInfo": {
          "docs": "Carries info corresponding to the Rev user to be provisioned and/or
issue a Rev session token.
",
          "properties": {
            "org_ref": {
              "docs": "An identifier which uniquely identifies a Rev org.",
              "type": "optional<string>",
            },
            "org_traits": {
              "docs": undefined,
              "type": "optional<AuthTokensOrgTraits>",
            },
            "rev_user_id": {
              "docs": "The unique ID of the Rev user.",
              "type": "optional<string>",
            },
            "user_ref": {
              "docs": "An identifier which uniquely identifies a Rev user.",
              "type": "string",
            },
            "user_traits": {
              "docs": undefined,
              "type": "optional<AuthTokensUserTraits>",
            },
          },
        },
        "AuthTokensUpdateResponse": {
          "docs": "Response for the request to update the token metadata.",
          "properties": {
            "token": {
              "docs": undefined,
              "type": "AuthToken",
            },
          },
        },
        "AuthTokensUserTraits": {
          "docs": "Carries Rev user info.",
          "properties": {
            "display_name": {
              "docs": "The display name of the Rev user.",
              "type": "optional<string>",
            },
            "email": {
              "docs": "The email address of the Rev user.",
              "type": "optional<string>",
            },
            "full_name": {
              "docs": "The full name of the Rev user.",
              "type": "optional<string>",
            },
          },
        },
        "Capability": {
          "docs": undefined,
          "type": "PartBase",
        },
        "CapabilitySummary": {
          "docs": undefined,
          "type": "PartBaseSummary",
        },
        "DevOrgAuthConnectionsCreateRequest": {
          "base-properties": {
            "display_name": {
              "docs": "Display name of the authentication connection. This name will be
visible to all the users when they sign in to this Dev
organization. For example, if the display_name is 'abclogin', then
it would appear on the login button as 'Log in to abclogin'.
",
              "type": "optional<string>",
            },
            "type": {
              "docs": undefined,
              "type": "DevOrgAuthConnectionsCreateRequestType",
            },
          },
          "docs": "Request to create a new enterprise authentication connection.
",
          "union": {
            "google_apps": {
              "docs": undefined,
              "type": "AuthConnectionOptionsGoogleApps",
            },
            "oidc": {
              "docs": undefined,
              "type": "AuthConnectionOptionsOidc",
            },
            "samlp": {
              "docs": undefined,
              "type": "AuthConnectionOptionsSaml",
            },
            "waad": {
              "docs": undefined,
              "type": "AuthConnectionOptionsAzureAd",
            },
          },
        },
        "DevOrgAuthConnectionsCreateRequestType": {
          "docs": "Defines the type for the authentication connection. Different types of
authentication connections have different configuration parameters.
",
          "enum": [
            {
              "name": "google_apps",
              "value": "google_apps",
            },
            {
              "name": "oidc",
              "value": "oidc",
            },
            {
              "name": "samlp",
              "value": "samlp",
            },
            {
              "name": "waad",
              "value": "waad",
            },
          ],
        },
        "DevOrgAuthConnectionsCreateResponse": {
          "docs": "Response for the request to create a new enterprise authentication
connection.
",
          "properties": {
            "auth_connection": {
              "docs": undefined,
              "type": "AuthConnection",
            },
          },
        },
        "DevOrgAuthConnectionsGetResponse": {
          "docs": "Response object encapsulating the configuration details of an
authentication connection.
",
          "properties": {
            "auth_connection": {
              "docs": undefined,
              "type": "AuthConnection",
            },
          },
        },
        "DevOrgAuthConnectionsListResponse": {
          "docs": "Response object for the request to list all the social and enterprise
authentication connections configured for a Dev organization.
",
          "properties": {
            "auth_connections": {
              "docs": "List of all the authentication connections currently configured for
a Dev organization.
",
              "type": "list<AuthConnection>",
            },
          },
        },
        "DevOrgAuthConnectionsUpdateRequest": {
          "base-properties": {
            "display_name": {
              "docs": "New display name of the authentication connection. This name will
be visible to all the users when they sign in to this Dev
organization. For example, if the display_name is 'abclogin', then
it would appear on the login button as 'Log in to abclogin'.
",
              "type": "optional<string>",
            },
            "id": {
              "docs": "ID of the authentication connection which is to be updated.
",
              "type": "string",
            },
            "type": {
              "docs": undefined,
              "type": "DevOrgAuthConnectionsUpdateRequestType",
            },
          },
          "docs": "Request to update an enterprise authentication connection for a Dev
organization.
",
          "union": {
            "google_apps": {
              "docs": undefined,
              "type": "AuthConnectionOptionsGoogleApps",
            },
            "none": {
              "docs": undefined,
              "type": "empty",
            },
            "oidc": {
              "docs": undefined,
              "type": "AuthConnectionOptionsOidc",
            },
            "samlp": {
              "docs": undefined,
              "type": "AuthConnectionOptionsSaml",
            },
            "waad": {
              "docs": undefined,
              "type": "AuthConnectionOptionsAzureAd",
            },
          },
        },
        "DevOrgAuthConnectionsUpdateRequestType": {
          "docs": "Specifies the type for the authentication connection. Different types
of authentication connections have different configuration parameters
that can be updated.
",
          "enum": [
            {
              "name": "google_apps",
              "value": "google_apps",
            },
            {
              "name": "none",
              "value": "none",
            },
            {
              "name": "oidc",
              "value": "oidc",
            },
            {
              "name": "samlp",
              "value": "samlp",
            },
            {
              "name": "waad",
              "value": "waad",
            },
          ],
        },
        "DevOrgAuthConnectionsUpdateResponse": {
          "docs": "Response for the request to update an enterprise authentication
connection.
",
          "properties": {
            "auth_connection": {
              "docs": undefined,
              "type": "AuthConnection",
            },
          },
        },
        "DevUser": {
          "docs": undefined,
          "properties": {
            "external_identities": {
              "docs": "IDs of the Dev User outside the DevRev SOR.",
              "type": "optional<list<external-identity>>",
            },
          },
        },
        "DevUserSummary": {
          "docs": undefined,
          "type": "UserBaseSummary",
        },
        "DevUsersListResponse": {
          "docs": "The response to listing the Dev users.",
          "properties": {
            "dev_users": {
              "docs": "The list of Dev users.",
              "type": "list<DevUser>",
            },
            "next_cursor": {
              "docs": "The cursor used to iterate subsequent results in accordance to the
sort order. If not set, then no later elements exist.
",
              "type": "optional<string>",
            },
            "prev_cursor": {
              "docs": "The cursor used to iterate preceding results in accordance to the
sort order. If not set, then no prior elements exist.
",
              "type": "optional<string>",
            },
          },
        },
        "DevUsersSelfResponse": {
          "docs": "The response to getting the information for the authenticated user.
",
          "properties": {
            "dev_user": {
              "docs": undefined,
              "type": "DevUser",
            },
          },
        },
        "Enhancement": {
          "docs": undefined,
          "properties": {
            "target_close_date": {
              "docs": "Timestamp when the enhancement is expected to be closed.",
              "type": "optional<string>",
            },
          },
        },
        "EnhancementSummary": {
          "docs": undefined,
          "type": "PartBaseSummary",
        },
        "ErrorBadRequest": {
          "docs": undefined,
          "properties": {
            "type": {
              "docs": undefined,
              "type": "optional<ErrorBadRequestType>",
            },
          },
        },
        "ErrorBadRequestInvalidEnumValue": {
          "docs": undefined,
          "properties": {
            "allowed_values": {
              "docs": "The allowed values for the field.",
              "type": "list<string>",
            },
            "field_name": {
              "docs": "The field whose enum value is invalid.",
              "type": "string",
            },
            "value": {
              "docs": "The value that was received.",
              "type": "string",
            },
          },
        },
        "ErrorBadRequestMissingRequiredField": {
          "docs": undefined,
          "properties": {
            "field_name": {
              "docs": "The missing field's name.",
              "type": "string",
            },
          },
        },
        "ErrorBadRequestType": {
          "docs": undefined,
          "enum": [
            {
              "name": "bad_request",
              "value": "bad_request",
            },
            {
              "name": "invalid_enum_value",
              "value": "invalid_enum_value",
            },
            {
              "name": "missing_required_field",
              "value": "missing_required_field",
            },
            {
              "name": "parse_error",
              "value": "parse_error",
            },
            {
              "name": "value_not_permitted",
              "value": "value_not_permitted",
            },
          ],
        },
        "ErrorBadRequestValueNotPermitted": {
          "docs": undefined,
          "properties": {
            "field_name": {
              "docs": "The field whose value is not permitted.",
              "type": "string",
            },
            "reason": {
              "docs": "The reason the value isn't permitted.",
              "type": "optional<string>",
            },
          },
        },
        "ErrorBase": {
          "docs": undefined,
          "properties": {
            "message": {
              "docs": "The message associated with the error.",
              "type": "optional<string>",
            },
          },
        },
        "ErrorForbidden": {
          "docs": undefined,
          "properties": {
            "type": {
              "docs": undefined,
              "type": "optional<ErrorForbiddenType>",
            },
          },
        },
        "ErrorForbiddenType": {
          "docs": undefined,
          "enum": [
            {
              "name": "forbidden",
              "value": "forbidden",
            },
          ],
        },
        "ErrorInternalServerError": {
          "docs": undefined,
          "properties": {
            "reference_id": {
              "docs": "A unique ID that's generated for the error that can be used for
inquiry.
",
              "type": "optional<string>",
            },
            "type": {
              "docs": undefined,
              "type": "optional<ErrorInternalServerErrorType>",
            },
          },
        },
        "ErrorInternalServerErrorType": {
          "docs": undefined,
          "enum": [
            {
              "name": "internal_error",
              "value": "internal_error",
            },
          ],
        },
        "ErrorNotFound": {
          "docs": undefined,
          "properties": {
            "type": {
              "docs": undefined,
              "type": "optional<ErrorNotFoundType>",
            },
          },
        },
        "ErrorNotFoundType": {
          "docs": undefined,
          "enum": [
            {
              "name": "not_found",
              "value": "not_found",
            },
          ],
        },
        "ErrorServiceUnavailable": {
          "docs": undefined,
          "properties": {
            "type": {
              "docs": undefined,
              "type": "optional<ErrorServiceUnavailableType>",
            },
          },
        },
        "ErrorServiceUnavailableType": {
          "docs": undefined,
          "enum": [
            {
              "name": "service_unavailable",
              "value": "service_unavailable",
            },
          ],
        },
        "ErrorTooManyRequests": {
          "docs": undefined,
          "properties": {
            "retry_after": {
              "docs": "The number of seconds after which the client should retry.
",
              "type": "optional<integer>",
            },
            "type": {
              "docs": undefined,
              "type": "optional<ErrorTooManyRequestsType>",
            },
          },
        },
        "ErrorTooManyRequestsType": {
          "docs": undefined,
          "enum": [
            {
              "name": "too_many_requests",
              "value": "too_many_requests",
            },
          ],
        },
        "ErrorUnauthorized": {
          "docs": undefined,
          "properties": {
            "type": {
              "docs": undefined,
              "type": "optional<ErrorUnauthorizedType>",
            },
          },
        },
        "ErrorUnauthorizedType": {
          "docs": undefined,
          "enum": [
            {
              "name": "unauthenticated",
              "value": "unauthenticated",
            },
          ],
        },
        "EventPartCreated": {
          "docs": undefined,
          "properties": {
            "part": {
              "docs": undefined,
              "type": "Part",
            },
          },
        },
        "EventPartDeleted": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": "The ID of the part that was deleted.",
              "type": "string",
            },
          },
        },
        "EventPartUpdated": {
          "docs": undefined,
          "properties": {
            "part": {
              "docs": undefined,
              "type": "Part",
            },
          },
        },
        "EventRevOrgCreated": {
          "docs": undefined,
          "properties": {
            "rev_org": {
              "docs": undefined,
              "type": "RevOrg",
            },
          },
        },
        "EventRevOrgDeleted": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": "The ID of the Rev organization that was deleted.",
              "type": "string",
            },
          },
        },
        "EventRevOrgUpdated": {
          "docs": undefined,
          "properties": {
            "rev_org": {
              "docs": undefined,
              "type": "RevOrg",
            },
          },
        },
        "EventTagCreated": {
          "docs": undefined,
          "properties": {
            "tag": {
              "docs": undefined,
              "type": "Tag",
            },
          },
        },
        "EventTagDeleted": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": "The ID of the tag that was deleted.",
              "type": "string",
            },
          },
        },
        "EventTagUpdated": {
          "docs": undefined,
          "properties": {
            "tag": {
              "docs": undefined,
              "type": "Tag",
            },
          },
        },
        "EventTimelineEntryCreated": {
          "docs": undefined,
          "properties": {
            "entry": {
              "docs": undefined,
              "type": "TimelineEntry",
            },
          },
        },
        "EventTimelineEntryDeleted": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": "The ID of the timeline entry that was deleted.",
              "type": "string",
            },
          },
        },
        "EventTimelineEntryUpdated": {
          "docs": undefined,
          "properties": {
            "entry": {
              "docs": undefined,
              "type": "TimelineEntry",
            },
          },
        },
        "EventWebhookCreated": {
          "docs": undefined,
          "properties": {
            "webhook": {
              "docs": undefined,
              "type": "Webhook",
            },
          },
        },
        "EventWebhookDeleted": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": "The ID of the webhook that was deleted.",
              "type": "string",
            },
          },
        },
        "EventWebhookUpdated": {
          "docs": undefined,
          "properties": {
            "webhook": {
              "docs": undefined,
              "type": "Webhook",
            },
          },
        },
        "EventWorkCreated": {
          "docs": undefined,
          "properties": {
            "work": {
              "docs": undefined,
              "type": "Work",
            },
          },
        },
        "EventWorkDeleted": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": "The ID of the work that was deleted.",
              "type": "string",
            },
          },
        },
        "EventWorkUpdated": {
          "docs": undefined,
          "properties": {
            "work": {
              "docs": undefined,
              "type": "Work",
            },
          },
        },
        "Feature": {
          "docs": undefined,
          "type": "PartBase",
        },
        "FeatureSummary": {
          "docs": undefined,
          "type": "PartBaseSummary",
        },
        "GroupSummary": {
          "docs": undefined,
          "type": "AtomBaseSummary",
        },
        "Issue": {
          "docs": undefined,
          "properties": {
            "priority": {
              "docs": undefined,
              "type": "optional<IssuePriority>",
            },
          },
        },
        "IssuePriority": {
          "docs": "Priority of the work based upon impact and criticality.",
          "enum": [
            {
              "name": "p0",
              "value": "p0",
            },
            {
              "name": "p1",
              "value": "p1",
            },
            {
              "name": "p2",
              "value": "p2",
            },
            {
              "name": "p3",
              "value": "p3",
            },
          ],
        },
        "ListMode": {
          "docs": "The iteration mode to use. If "after", then entries after the provided
cursor will be returned, or if no cursor is provided, then from the
beginning. If "before", then entries before the provided cursor will be
returned, or if no cursor is provided, then from the end. Entries will
always be returned in the specified sort-by order.
",
          "enum": [
            {
              "name": "after",
              "value": "after",
            },
            {
              "name": "before",
              "value": "before",
            },
          ],
        },
        "OrgBase": {
          "docs": undefined,
          "properties": {
            "display_name": {
              "docs": "Name of the Organization.",
              "type": "optional<string>",
            },
          },
        },
        "OrgBaseSummary": {
          "docs": undefined,
          "properties": {
            "display_name": {
              "docs": "Name of the Organization.",
              "type": "optional<string>",
            },
          },
        },
        "OrgEnvironment": {
          "docs": "The environment of the Org. Defaults to 'production' if not specified.
",
          "enum": [
            {
              "name": "production",
              "value": "production",
            },
            {
              "name": "staging",
              "value": "staging",
            },
            {
              "name": "test",
              "value": "test",
            },
          ],
        },
        "OrgSummary": {
          "base-properties": {
            "type": {
              "docs": undefined,
              "type": "OrgType",
            },
          },
          "docs": undefined,
          "union": {
            "rev_org": {
              "docs": undefined,
              "type": "RevOrgSummary",
            },
          },
        },
        "OrgType": {
          "docs": undefined,
          "enum": [
            {
              "name": "rev_org",
              "value": "rev_org",
            },
          ],
        },
        "Part": {
          "base-properties": {
            "type": {
              "docs": undefined,
              "type": "PartType",
            },
          },
          "docs": undefined,
          "union": {
            "capability": {
              "docs": undefined,
              "type": "Capability",
            },
            "enhancement": {
              "docs": undefined,
              "type": "Enhancement",
            },
            "feature": {
              "docs": undefined,
              "type": "Feature",
            },
            "product": {
              "docs": undefined,
              "type": "Product",
            },
          },
        },
        "PartBase": {
          "docs": undefined,
          "properties": {
            "artifacts": {
              "docs": "The attached artifacts.",
              "type": "optional<list<ArtifactSummary>>",
            },
            "description": {
              "docs": "Description of the part.",
              "type": "optional<string>",
            },
            "name": {
              "docs": "Name of the part.",
              "type": "optional<string>",
            },
            "owned_by": {
              "docs": "The users that own the part.",
              "type": "optional<list<UserSummary>>",
            },
            "tags": {
              "docs": "Tags associated with the object.",
              "type": "optional<list<TagWithValue>>",
            },
          },
        },
        "PartBaseSummary": {
          "docs": undefined,
          "properties": {
            "name": {
              "docs": "Name of the part.",
              "type": "optional<string>",
            },
          },
        },
        "PartSummary": {
          "base-properties": {
            "type": {
              "docs": undefined,
              "type": "PartType",
            },
          },
          "docs": undefined,
          "union": {
            "capability": {
              "docs": undefined,
              "type": "CapabilitySummary",
            },
            "enhancement": {
              "docs": undefined,
              "type": "EnhancementSummary",
            },
            "feature": {
              "docs": undefined,
              "type": "FeatureSummary",
            },
            "product": {
              "docs": undefined,
              "type": "ProductSummary",
            },
          },
        },
        "PartType": {
          "docs": undefined,
          "enum": [
            {
              "name": "capability",
              "value": "capability",
            },
            {
              "name": "enhancement",
              "value": "enhancement",
            },
            {
              "name": "feature",
              "value": "feature",
            },
            {
              "name": "product",
              "value": "product",
            },
          ],
        },
        "PartsCreateRequest": {
          "base-properties": {
            "description": {
              "docs": "Description of the part.",
              "type": "optional<string>",
            },
            "name": {
              "docs": "Name of the part.",
              "type": "string",
            },
            "owned_by": {
              "docs": "The users that own the part.",
              "type": "list<string>",
            },
            "type": {
              "docs": undefined,
              "type": "PartType",
            },
          },
          "docs": undefined,
          "union": {
            "capability": {
              "docs": undefined,
              "type": "PartsCreateRequestCapability",
            },
            "enhancement": {
              "docs": undefined,
              "type": "PartsCreateRequestEnhancement",
            },
            "feature": {
              "docs": undefined,
              "type": "PartsCreateRequestFeature",
            },
            "product": {
              "docs": undefined,
              "type": "parts-create-request-product",
            },
          },
        },
        "PartsCreateRequestCapability": {
          "docs": undefined,
          "properties": {
            "parent_part": {
              "docs": "ID of the parent product for the capability.",
              "type": "list<string>",
            },
          },
        },
        "PartsCreateRequestEnhancement": {
          "docs": undefined,
          "properties": {
            "parent_part": {
              "docs": "ID of the parent part on which the enhancement is to be created.
",
              "type": "list<string>",
            },
            "target_close_date": {
              "docs": "Target close date by which enhancement is expected to be closed.
",
              "type": "optional<string>",
            },
          },
        },
        "PartsCreateRequestFeature": {
          "docs": undefined,
          "properties": {
            "parent_part": {
              "docs": "ID of the parent capability/feature for the feature.",
              "type": "list<string>",
            },
          },
        },
        "PartsCreateResponse": {
          "docs": undefined,
          "properties": {
            "part": {
              "docs": undefined,
              "type": "Part",
            },
          },
        },
        "PartsGetResponse": {
          "docs": undefined,
          "properties": {
            "part": {
              "docs": undefined,
              "type": "Part",
            },
          },
        },
        "PartsListResponse": {
          "docs": undefined,
          "properties": {
            "next_cursor": {
              "docs": "The cursor used to iterate subsequent results in accordance to the
sort order. If not set, then no later elements exist.
",
              "type": "optional<string>",
            },
            "parts": {
              "docs": "The list of parts.",
              "type": "list<Part>",
            },
            "prev_cursor": {
              "docs": "The cursor used to iterate preceding results in accordance to the
sort order. If not set, then no prior elements exist.
",
              "type": "optional<string>",
            },
          },
        },
        "PartsUpdateRequest": {
          "base-properties": {
            "description": {
              "docs": "The updated description of the part.",
              "type": "optional<string>",
            },
            "id": {
              "docs": "The ID of the part to update.",
              "type": "string",
            },
            "name": {
              "docs": "The updated name of the part.",
              "type": "optional<string>",
            },
            "owned_by": {
              "docs": undefined,
              "type": "optional<PartsUpdateRequestOwnedBy>",
            },
            "type": {
              "docs": undefined,
              "type": "PartType",
            },
          },
          "docs": undefined,
          "union": {
            "capability": {
              "docs": undefined,
              "type": "parts-update-request-capability",
            },
            "enhancement": {
              "docs": undefined,
              "type": "PartsUpdateRequestEnhancement",
            },
            "feature": {
              "docs": undefined,
              "type": "parts-update-request-feature",
            },
            "none": {
              "docs": undefined,
              "type": "empty",
            },
            "product": {
              "docs": undefined,
              "type": "parts-update-request-product",
            },
          },
        },
        "PartsUpdateRequestEnhancement": {
          "docs": undefined,
          "properties": {
            "target_close_date": {
              "docs": "Updates the target close date of the enhancement.",
              "type": "optional<string>",
            },
          },
        },
        "PartsUpdateRequestOwnedBy": {
          "docs": undefined,
          "properties": {
            "set": {
              "docs": "Sets the owner IDs to the provided user IDs. This must not be
empty.
",
              "type": "optional<list<string>>",
            },
          },
        },
        "PartsUpdateResponse": {
          "docs": undefined,
          "properties": {
            "part": {
              "docs": undefined,
              "type": "Part",
            },
          },
        },
        "Product": {
          "docs": undefined,
          "type": "PartBase",
        },
        "ProductSummary": {
          "docs": undefined,
          "type": "PartBaseSummary",
        },
        "RevOrg": {
          "docs": undefined,
          "properties": {
            "description": {
              "docs": "Description of the Rev organization.",
              "type": "optional<string>",
            },
            "domain": {
              "docs": "Company's domain name. Example - 'devrev.ai'.",
              "type": "optional<string>",
            },
            "external_ref": {
              "docs": "External ref is a unique identifier for the Rev (customer)
organization from your primary customer system of records. If none
is specified, a system-generated identifier will be assigned to the
organization.
",
              "type": "optional<string>",
            },
          },
        },
        "RevOrgSummary": {
          "docs": undefined,
          "type": "OrgBaseSummary",
        },
        "RevOrgsCreateResponse": {
          "docs": "Response object for request to create a new Rev organization.
",
          "properties": {
            "rev_org": {
              "docs": undefined,
              "type": "RevOrg",
            },
          },
        },
        "RevOrgsGetResponse": {
          "docs": "The response to getting a Rev organization's information.",
          "properties": {
            "rev_org": {
              "docs": undefined,
              "type": "RevOrg",
            },
          },
        },
        "RevOrgsListResponse": {
          "docs": "The response to getting a list of Rev organizations' information.
",
          "properties": {
            "next_cursor": {
              "docs": "The cursor used to iterate subsequent results in accordance to the
sort order. If not set, then no later elements exist.
",
              "type": "optional<string>",
            },
            "prev_cursor": {
              "docs": "The cursor used to iterate preceding results in accordance to the
sort order. If not set, then no prior elements exist.
",
              "type": "optional<string>",
            },
            "rev_orgs": {
              "docs": "List with all of the Rev organizations' information.",
              "type": "list<RevOrg>",
            },
          },
        },
        "RevOrgsUpdateResponse": {
          "docs": "Response object to updating Rev organization's information.",
          "properties": {
            "rev_org": {
              "docs": undefined,
              "type": "RevOrg",
            },
          },
        },
        "RevUserSummary": {
          "docs": undefined,
          "properties": {
            "external_ref": {
              "docs": "External ref is a mutable unique identifier for a user within the
Rev organization from your primary customer record. If none is
available, a good alternative is the email address/phone number
which could uniquely identify the user. If none is specified, a
system-generated identifier will be assigned to the user.
",
              "type": "optional<string>",
            },
            "rev_org": {
              "docs": undefined,
              "type": "optional<OrgSummary>",
            },
          },
        },
        "SetTagWithValue": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": "The ID of the tag.",
              "type": "string",
            },
            "value": {
              "docs": "The value for the object's association with the tag. If specified,
the value must be one that's specified in the tag's allowed values.
",
              "type": "optional<string>",
            },
          },
        },
        "Stage": {
          "docs": "Describes the current stage of a work item.",
          "properties": {
            "name": {
              "docs": "Current stage name of the work item.",
              "type": "string",
            },
          },
        },
        "StageInit": {
          "docs": "Sets an object's initial stage.",
          "properties": {
            "name": {
              "docs": "The name of the stage.",
              "type": "optional<string>",
            },
          },
        },
        "StageUpdate": {
          "docs": "Updates an object's stage.",
          "properties": {
            "name": {
              "docs": "The updated name of the stage, otherwise unchanged if not set.
",
              "type": "optional<string>",
            },
          },
        },
        "SysUserSummary": {
          "docs": undefined,
          "type": "UserBaseSummary",
        },
        "Tag": {
          "docs": undefined,
          "properties": {
            "allowed_values": {
              "docs": "The allowed values for the tag, where a value is provided when a
tag is associated with an object. If empty, then no value should be
provided when the association is made.
",
              "type": "optional<list<string>>",
            },
            "description": {
              "docs": "An informative description for the tag that should provide context
on the tag's purpose and usage.
",
              "type": "optional<string>",
            },
            "name": {
              "docs": "The name of the tag, which denotes the logical concept by which all
tagged objects will be associated. The name is guaranteed to be
unique.
",
              "type": "optional<string>",
            },
          },
        },
        "TagSummary": {
          "docs": undefined,
          "properties": {
            "name": {
              "docs": "The name of the tag, which denotes the logical concept by which all
tagged objects will be associated. The name is guaranteed to be
unique.
",
              "type": "optional<string>",
            },
          },
        },
        "TagWithValue": {
          "docs": undefined,
          "properties": {
            "tag": {
              "docs": undefined,
              "type": "TagSummary",
            },
            "value": {
              "docs": "The value for the object's association with the tag.",
              "type": "optional<string>",
            },
          },
        },
        "TagsCreateResponse": {
          "docs": "The response to creating a new tag.",
          "properties": {
            "tag": {
              "docs": undefined,
              "type": "Tag",
            },
          },
        },
        "TagsGetResponse": {
          "docs": "The response to getting a tag's information.",
          "properties": {
            "tag": {
              "docs": undefined,
              "type": "Tag",
            },
          },
        },
        "TagsListResponse": {
          "docs": "The response to listing the tags.",
          "properties": {
            "next_cursor": {
              "docs": "The cursor used to iterate subsequent results in accordance to the
sort order. If not set, then no later elements exist.
",
              "type": "optional<string>",
            },
            "prev_cursor": {
              "docs": "The cursor used to iterate preceding results in accordance to the
sort order. If not set, then no prior elements exist.
",
              "type": "optional<string>",
            },
            "tags": {
              "docs": "The list of tags.",
              "type": "list<Tag>",
            },
          },
        },
        "TagsUpdateAllowedValues": {
          "docs": "Specifies an update to a tag's allowed values.",
          "properties": {
            "set": {
              "docs": "Sets the allowed values for the tag.",
              "type": "optional<list<string>>",
            },
          },
        },
        "TagsUpdateResponse": {
          "docs": "The response for updating a tag.",
          "properties": {
            "tag": {
              "docs": undefined,
              "type": "Tag",
            },
          },
        },
        "Ticket": {
          "docs": undefined,
          "properties": {
            "group": {
              "docs": undefined,
              "type": "optional<GroupSummary>",
            },
            "rev_org": {
              "docs": undefined,
              "type": "optional<OrgSummary>",
            },
            "severity": {
              "docs": undefined,
              "type": "optional<TicketSeverity>",
            },
          },
        },
        "TicketSeverity": {
          "docs": "Severity of the ticket.",
          "enum": [
            {
              "name": "blocker",
              "value": "blocker",
            },
            {
              "name": "high",
              "value": "high",
            },
            {
              "name": "low",
              "value": "low",
            },
            {
              "name": "medium",
              "value": "medium",
            },
          ],
        },
        "TimelineComment": {
          "docs": undefined,
          "properties": {
            "artifacts": {
              "docs": "The artifacts for the comment.",
              "type": "optional<list<ArtifactSummary>>",
            },
            "body": {
              "docs": "The comment's body. If the comment has been deleted, then no body
will appear in the response.
",
              "type": "optional<string>",
            },
            "body_type": {
              "docs": undefined,
              "type": "optional<TimelineCommentBodyType>",
            },
            "snap_kit_body": {
              "docs": "The SnapKit Body of the comment.",
              "type": "optional<map<string, unknown>>",
            },
          },
        },
        "TimelineCommentBodyType": {
          "docs": "The type of the body to use for the comment.",
          "enum": [
            {
              "name": "snap_kit",
              "value": "snap_kit",
            },
            {
              "name": "text",
              "value": "text",
            },
          ],
        },
        "TimelineEntriesCreateRequest": {
          "base-properties": {
            "object": {
              "docs": "The ID of the object to create the timeline entry for.",
              "type": "string",
            },
            "type": {
              "docs": undefined,
              "type": "TimelineEntriesCreateRequestType",
            },
            "visibility": {
              "docs": undefined,
              "type": "optional<TimelineEntryVisibility>",
            },
          },
          "docs": "The request to create a timeline entry for an object.",
          "union": {
            "timeline_comment": {
              "docs": undefined,
              "type": "TimelineEntriesCreateRequestTimelineComment",
            },
          },
        },
        "TimelineEntriesCreateRequestTimelineComment": {
          "docs": undefined,
          "properties": {
            "artifacts": {
              "docs": "The IDs of the artifacts attached to the comment.",
              "type": "optional<list<string>>",
            },
            "body": {
              "docs": "The comment's body.",
              "type": "optional<string>",
            },
            "body_type": {
              "docs": undefined,
              "type": "optional<TimelineCommentBodyType>",
            },
            "snap_kit_body": {
              "docs": "The SnapKit body of the comment.",
              "type": "optional<map<string, unknown>>",
            },
          },
        },
        "TimelineEntriesCreateRequestType": {
          "docs": undefined,
          "enum": [
            {
              "name": "timeline_comment",
              "value": "timeline_comment",
            },
          ],
        },
        "TimelineEntriesCreateResponse": {
          "docs": "The response to creating a timeline entry for an object.",
          "properties": {
            "timeline_entry": {
              "docs": undefined,
              "type": "TimelineEntry",
            },
          },
        },
        "TimelineEntriesGetResponse": {
          "docs": "The request to getting a timeline entry.",
          "properties": {
            "timeline_entry": {
              "docs": undefined,
              "type": "TimelineEntry",
            },
          },
        },
        "TimelineEntriesListResponse": {
          "docs": "The response to listing timeline entries for an object.",
          "properties": {
            "next_cursor": {
              "docs": "The cursor used to iterate subsequent results in accordance to the
sort order. If not set, then no later elements exist.
",
              "type": "optional<string>",
            },
            "prev_cursor": {
              "docs": "The cursor used to iterate preceding results in accordance to the
sort order. If not set, then no prior elements exist.
",
              "type": "optional<string>",
            },
            "timeline_entries": {
              "docs": "The timeline entries for the object.",
              "type": "list<TimelineEntry>",
            },
          },
        },
        "TimelineEntriesUpdateRequest": {
          "base-properties": {
            "id": {
              "docs": "The ID of the timeline entry to update.",
              "type": "string",
            },
            "type": {
              "docs": undefined,
              "type": "TimelineEntriesUpdateRequestType",
            },
          },
          "docs": "The request to update a timeline entry.",
          "union": {
            "timeline_comment": {
              "docs": undefined,
              "type": "TimelineEntriesUpdateRequestTimelineComment",
            },
          },
        },
        "TimelineEntriesUpdateRequestTimelineComment": {
          "docs": undefined,
          "properties": {
            "artifacts": {
              "docs": undefined,
              "type": "optional<TimelineEntriesUpdateRequestTimelineCommentArtifacts>",
            },
            "body": {
              "docs": "The updated comment's body.",
              "type": "optional<string>",
            },
            "body_type": {
              "docs": undefined,
              "type": "optional<TimelineCommentBodyType>",
            },
            "snap_kit_body": {
              "docs": "The SnapKit body of the comment.",
              "type": "optional<map<string, unknown>>",
            },
          },
        },
        "TimelineEntriesUpdateRequestTimelineCommentArtifacts": {
          "docs": undefined,
          "properties": {
            "add": {
              "docs": "Adds the provided artifacts to the comment. An artifact cannot be
added more than once, i.e. nothing is done if the artifact is
already attached. Mutually exclusive with \`set\`.
",
              "type": "optional<list<string>>",
            },
            "remove": {
              "docs": "Removes the provided artifacts from the comment. If an artifact is
not present, then it's ignored. Mututally exclusive with \`set\`.
",
              "type": "optional<list<string>>",
            },
            "set": {
              "docs": "Sets the field to the provided artifacts.",
              "type": "optional<list<string>>",
            },
          },
        },
        "TimelineEntriesUpdateRequestType": {
          "docs": undefined,
          "enum": [
            {
              "name": "timeline_comment",
              "value": "timeline_comment",
            },
          ],
        },
        "TimelineEntriesUpdateResponse": {
          "docs": "The response to updating a timeline entry.",
          "properties": {
            "timeline_entry": {
              "docs": undefined,
              "type": "TimelineEntry",
            },
          },
        },
        "TimelineEntry": {
          "base-properties": {
            "type": {
              "docs": undefined,
              "type": "TimelineEntryType",
            },
          },
          "docs": undefined,
          "union": {
            "timeline_comment": {
              "docs": undefined,
              "type": "TimelineComment",
            },
          },
        },
        "TimelineEntryBase": {
          "docs": undefined,
          "type": "AtomBase",
        },
        "TimelineEntryType": {
          "docs": undefined,
          "enum": [
            {
              "name": "timeline_comment",
              "value": "timeline_comment",
            },
          ],
        },
        "TimelineEntryVisibility": {
          "docs": "The visibility of the entry. If 'private', then the entry is only
visible to the creator, otherwise if not set, then the entry has
default visibility.
",
          "enum": [
            {
              "name": "private",
              "value": "private",
            },
          ],
        },
        "UserBase": {
          "docs": undefined,
          "properties": {
            "display_name": {
              "docs": "The user's display name. The name is non-unique and mutable.
",
              "type": "optional<string>",
            },
            "display_picture": {
              "docs": undefined,
              "type": "optional<ArtifactSummary>",
            },
            "email": {
              "docs": "Email address of the user.",
              "type": "optional<string>",
            },
            "full_name": {
              "docs": "Full name of the user.",
              "type": "optional<string>",
            },
            "phone_numbers": {
              "docs": "Phone numbers of the user.",
              "type": "optional<list<string>>",
            },
            "state": {
              "docs": undefined,
              "type": "optional<UserState>",
            },
          },
        },
        "UserBaseSummary": {
          "docs": undefined,
          "properties": {
            "display_name": {
              "docs": "The user's display name. The name is non-unique and mutable.
",
              "type": "optional<string>",
            },
            "display_picture": {
              "docs": undefined,
              "type": "optional<ArtifactSummary>",
            },
            "email": {
              "docs": "Email address of the user.",
              "type": "optional<string>",
            },
            "full_name": {
              "docs": "Full name of the user.",
              "type": "optional<string>",
            },
            "state": {
              "docs": undefined,
              "type": "optional<UserState>",
            },
          },
        },
        "UserState": {
          "docs": "State of the user.",
          "enum": [
            {
              "name": "active",
              "value": "active",
            },
            {
              "name": "deactivated",
              "value": "deactivated",
            },
            {
              "name": "locked",
              "value": "locked",
            },
            {
              "name": "shadow",
              "value": "shadow",
            },
            {
              "name": "unassigned",
              "value": "unassigned",
            },
          ],
        },
        "UserSummary": {
          "base-properties": {
            "type": {
              "docs": undefined,
              "type": "UserType",
            },
          },
          "docs": undefined,
          "union": {
            "dev_user": {
              "docs": undefined,
              "type": "DevUserSummary",
            },
            "rev_user": {
              "docs": undefined,
              "type": "RevUserSummary",
            },
            "sys_user": {
              "docs": undefined,
              "type": "SysUserSummary",
            },
          },
        },
        "UserType": {
          "docs": undefined,
          "enum": [
            {
              "name": "dev_user",
              "value": "dev_user",
            },
            {
              "name": "rev_user",
              "value": "rev_user",
            },
            {
              "name": "sys_user",
              "value": "sys_user",
            },
          ],
        },
        "Webhook": {
          "docs": undefined,
          "properties": {
            "event_types": {
              "docs": "The event types that the webhook will receive.",
              "type": "optional<list<WebhookEventType>>",
            },
            "secret": {
              "docs": "The secret to use for verifying webhook events.",
              "type": "optional<string>",
            },
            "status": {
              "docs": undefined,
              "type": "optional<WebhookStatus>",
            },
            "url": {
              "docs": "The URL of the webhook endpoint.",
              "type": "optional<string>",
            },
          },
        },
        "WebhookEventRequest": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": "The event's ID.",
              "type": "string",
            },
            "part_created": {
              "docs": undefined,
              "type": "optional<EventPartCreated>",
            },
            "part_deleted": {
              "docs": undefined,
              "type": "optional<EventPartDeleted>",
            },
            "part_updated": {
              "docs": undefined,
              "type": "optional<EventPartUpdated>",
            },
            "rev_org_created": {
              "docs": undefined,
              "type": "optional<EventRevOrgCreated>",
            },
            "rev_org_deleted": {
              "docs": undefined,
              "type": "optional<EventRevOrgDeleted>",
            },
            "rev_org_updated": {
              "docs": undefined,
              "type": "optional<EventRevOrgUpdated>",
            },
            "tag_created": {
              "docs": undefined,
              "type": "optional<EventTagCreated>",
            },
            "tag_deleted": {
              "docs": undefined,
              "type": "optional<EventTagDeleted>",
            },
            "tag_updated": {
              "docs": undefined,
              "type": "optional<EventTagUpdated>",
            },
            "timeline_entry_created": {
              "docs": undefined,
              "type": "optional<EventTimelineEntryCreated>",
            },
            "timeline_entry_deleted": {
              "docs": undefined,
              "type": "optional<EventTimelineEntryDeleted>",
            },
            "timeline_entry_updated": {
              "docs": undefined,
              "type": "optional<EventTimelineEntryUpdated>",
            },
            "timestamp": {
              "docs": "Timestamp of the webhook's invocation for the event. Note this
should be used to protect against replay attacks, where the event
should only be processed if the timestamp isn't stale by several
seconds.
",
              "type": "optional<string>",
            },
            "type": {
              "docs": undefined,
              "type": "optional<WebhookEventType>",
            },
            "verify": {
              "docs": undefined,
              "type": "optional<WebhookEventVerify>",
            },
            "webhook_created": {
              "docs": undefined,
              "type": "optional<EventWebhookCreated>",
            },
            "webhook_deleted": {
              "docs": undefined,
              "type": "optional<EventWebhookDeleted>",
            },
            "webhook_id": {
              "docs": "ID of the webhook for the event.",
              "type": "string",
            },
            "webhook_updated": {
              "docs": undefined,
              "type": "optional<EventWebhookUpdated>",
            },
            "work_created": {
              "docs": undefined,
              "type": "optional<EventWorkCreated>",
            },
            "work_deleted": {
              "docs": undefined,
              "type": "optional<EventWorkDeleted>",
            },
            "work_updated": {
              "docs": undefined,
              "type": "optional<EventWorkUpdated>",
            },
          },
        },
        "WebhookEventResponse": {
          "docs": undefined,
          "properties": {
            "challenge": {
              "docs": "The challenge from the "verify" request, otherwise this should not
be set for other request types.
",
              "type": "optional<string>",
            },
          },
        },
        "WebhookEventType": {
          "docs": "The event types that the webhook will receive.",
          "enum": [
            {
              "name": "part_created",
              "value": "part_created",
            },
            {
              "name": "part_deleted",
              "value": "part_deleted",
            },
            {
              "name": "part_updated",
              "value": "part_updated",
            },
            {
              "name": "rev_org_created",
              "value": "rev_org_created",
            },
            {
              "name": "rev_org_deleted",
              "value": "rev_org_deleted",
            },
            {
              "name": "rev_org_updated",
              "value": "rev_org_updated",
            },
            {
              "name": "tag_created",
              "value": "tag_created",
            },
            {
              "name": "tag_deleted",
              "value": "tag_deleted",
            },
            {
              "name": "tag_updated",
              "value": "tag_updated",
            },
            {
              "name": "timeline_entry_created",
              "value": "timeline_entry_created",
            },
            {
              "name": "timeline_entry_deleted",
              "value": "timeline_entry_deleted",
            },
            {
              "name": "timeline_entry_updated",
              "value": "timeline_entry_updated",
            },
            {
              "name": "verify",
              "value": "verify",
            },
            {
              "name": "webhook_created",
              "value": "webhook_created",
            },
            {
              "name": "webhook_deleted",
              "value": "webhook_deleted",
            },
            {
              "name": "webhook_updated",
              "value": "webhook_updated",
            },
            {
              "name": "work_created",
              "value": "work_created",
            },
            {
              "name": "work_deleted",
              "value": "work_deleted",
            },
            {
              "name": "work_updated",
              "value": "work_updated",
            },
          ],
        },
        "WebhookEventVerify": {
          "docs": undefined,
          "properties": {
            "challenge": {
              "docs": "The challenge that must be echoed in the response.",
              "type": "string",
            },
          },
        },
        "WebhookStatus": {
          "docs": "The status of the webhook.",
          "enum": [
            {
              "name": "active",
              "value": "active",
            },
            {
              "name": "inactive",
              "value": "inactive",
            },
            {
              "name": "unverified",
              "value": "unverified",
            },
          ],
        },
        "WebhooksCreateResponse": {
          "docs": "The response to creating a new webhook.",
          "properties": {
            "webhook": {
              "docs": undefined,
              "type": "Webhook",
            },
          },
        },
        "WebhooksGetResponse": {
          "docs": "The response to getting the information for the webhook.",
          "properties": {
            "webhook": {
              "docs": undefined,
              "type": "Webhook",
            },
          },
        },
        "WebhooksListResponse": {
          "docs": "The response to listing the webhooks.",
          "properties": {
            "webhooks": {
              "docs": "The list of webhooks.",
              "type": "list<Webhook>",
            },
          },
        },
        "WebhooksUpdateAction": {
          "docs": "The action to update the webhook's status.",
          "enum": [
            {
              "name": "activate",
              "value": "activate",
            },
            {
              "name": "deactivate",
              "value": "deactivate",
            },
          ],
        },
        "WebhooksUpdateRequestEventTypes": {
          "docs": undefined,
          "properties": {
            "add": {
              "docs": "The event types to add. If a provided event type is already set for
the webhook, then nothing is done. Note this is mutually exclusive
with 'set'.
",
              "type": "optional<list<WebhookEventType>>",
            },
            "remove": {
              "docs": "The event types to remove. If a provided event type isn't set for
the webhook, then nothing is done. Note this is mutually exclusive
with 'set'.
",
              "type": "optional<list<WebhookEventType>>",
            },
            "set": {
              "docs": "The updated event types, which will replace the webhook's current
event types. Note this is mutually exclusive with 'add' and
'remove'.
",
              "type": "optional<list<WebhookEventType>>",
            },
          },
        },
        "WebhooksUpdateResponse": {
          "docs": "The response to updating the webhook.",
          "properties": {
            "webhook": {
              "docs": undefined,
              "type": "Webhook",
            },
          },
        },
        "Work": {
          "base-properties": {
            "type": {
              "docs": undefined,
              "type": "WorkType",
            },
          },
          "docs": undefined,
          "union": {
            "issue": {
              "docs": undefined,
              "type": "Issue",
            },
            "ticket": {
              "docs": undefined,
              "type": "Ticket",
            },
          },
        },
        "WorkBase": {
          "docs": undefined,
          "properties": {
            "applies_to_part": {
              "docs": undefined,
              "type": "optional<PartSummary>",
            },
            "artifacts": {
              "docs": "The artifacts attached to the work item.",
              "type": "optional<list<ArtifactSummary>>",
            },
            "body": {
              "docs": "Body of the work object.",
              "type": "optional<string>",
            },
            "owned_by": {
              "docs": "The users that own the work.",
              "type": "optional<list<UserSummary>>",
            },
            "reported_by": {
              "docs": "Users that reported the work.",
              "type": "optional<list<UserSummary>>",
            },
            "stage": {
              "docs": undefined,
              "type": "optional<Stage>",
            },
            "tags": {
              "docs": "Tags associated with the object.",
              "type": "optional<list<TagWithValue>>",
            },
            "target_close_date": {
              "docs": "Timestamp when the work is expected to be complete.",
              "type": "optional<string>",
            },
            "title": {
              "docs": "Title of the work object.",
              "type": "optional<string>",
            },
          },
        },
        "WorkType": {
          "docs": undefined,
          "enum": [
            {
              "name": "issue",
              "value": "issue",
            },
            {
              "name": "ticket",
              "value": "ticket",
            },
          ],
        },
        "WorksCreateRequest": {
          "base-properties": {
            "applies_to_part": {
              "docs": "The [part](https://devrev.ai/docs/product/parts) that the work
applies to. Specifying a part is required when creating tickets and
issues.
",
              "type": "string",
            },
            "artifacts": {
              "docs": "The IDs of the artifacts to associate with the work item.
",
              "type": "optional<list<string>>",
            },
            "body": {
              "docs": "Body of the work object.",
              "type": "optional<string>",
            },
            "owned_by": {
              "docs": "The users that own the work.",
              "type": "list<string>",
            },
            "reported_by": {
              "docs": "The users that reported the work.",
              "type": "optional<list<string>>",
            },
            "stage": {
              "docs": undefined,
              "type": "optional<StageInit>",
            },
            "tags": {
              "docs": "Tags associated with the work item.",
              "type": "optional<list<SetTagWithValue>>",
            },
            "target_close_date": {
              "docs": "Timestamp for when the work is expected to be complete.",
              "type": "optional<string>",
            },
            "title": {
              "docs": "Title of the work object.",
              "type": "string",
            },
            "type": {
              "docs": undefined,
              "type": "WorkType",
            },
          },
          "docs": undefined,
          "union": {
            "issue": {
              "docs": undefined,
              "type": "WorksCreateRequestIssue",
            },
            "ticket": {
              "docs": undefined,
              "type": "WorksCreateRequestTicket",
            },
          },
        },
        "WorksCreateRequestIssue": {
          "docs": undefined,
          "properties": {
            "priority": {
              "docs": undefined,
              "type": "optional<IssuePriority>",
            },
            "sprint": {
              "docs": "The sprint that the issue belongs to.",
              "type": "optional<string>",
            },
          },
        },
        "WorksCreateRequestTicket": {
          "docs": undefined,
          "properties": {
            "group": {
              "docs": "The group that the ticket is associated with.",
              "type": "optional<string>",
            },
            "rev_org": {
              "docs": "The Rev organization that the ticket is associated with.",
              "type": "optional<string>",
            },
            "severity": {
              "docs": undefined,
              "type": "optional<TicketSeverity>",
            },
          },
        },
        "WorksCreateResponse": {
          "docs": undefined,
          "properties": {
            "work": {
              "docs": undefined,
              "type": "Work",
            },
          },
        },
        "WorksExportResponse": {
          "docs": undefined,
          "properties": {
            "works": {
              "docs": "The resulting collection of work items.",
              "type": "list<Work>",
            },
          },
        },
        "WorksGetResponse": {
          "docs": undefined,
          "properties": {
            "work": {
              "docs": undefined,
              "type": "Work",
            },
          },
        },
        "WorksListResponse": {
          "docs": undefined,
          "properties": {
            "next_cursor": {
              "docs": "The cursor used to iterate subsequent results in accordance to the
sort order. If not set, then no later elements exist.
",
              "type": "optional<string>",
            },
            "prev_cursor": {
              "docs": "The cursor used to iterate preceding results in accordance to the
sort order. If not set, then no prior elements exist.
",
              "type": "optional<string>",
            },
            "works": {
              "docs": "The list of works.",
              "type": "list<Work>",
            },
          },
        },
        "WorksUpdateRequest": {
          "base-properties": {
            "applies_to_part": {
              "docs": "Updates the part that the work applies to.",
              "type": "optional<string>",
            },
            "artifacts": {
              "docs": undefined,
              "type": "optional<WorksUpdateRequestArtifactIds>",
            },
            "body": {
              "docs": "Updated body of the work object, or unchanged if not provided.
",
              "type": "optional<string>",
            },
            "id": {
              "docs": "The work's ID.",
              "type": "string",
            },
            "owned_by": {
              "docs": undefined,
              "type": "optional<WorksUpdateRequestOwnedBy>",
            },
            "reported_by": {
              "docs": undefined,
              "type": "optional<WorksUpdateRequestReportedBy>",
            },
            "stage": {
              "docs": undefined,
              "type": "optional<StageUpdate>",
            },
            "tags": {
              "docs": undefined,
              "type": "optional<WorksUpdateRequestTags>",
            },
            "target_close_date": {
              "docs": "Updates the timestamp for when the work is expected to be complete.
",
              "type": "optional<string>",
            },
            "title": {
              "docs": "Updated title of the work object, or unchanged if not provided.
",
              "type": "optional<string>",
            },
            "type": {
              "docs": undefined,
              "type": "WorkType",
            },
          },
          "docs": undefined,
          "union": {
            "issue": {
              "docs": undefined,
              "type": "WorksUpdateRequestIssue",
            },
            "none": {
              "docs": undefined,
              "type": "empty",
            },
            "ticket": {
              "docs": undefined,
              "type": "WorksUpdateRequestTicket",
            },
          },
        },
        "WorksUpdateRequestArtifactIds": {
          "docs": undefined,
          "properties": {
            "set": {
              "docs": "Sets the IDs to the provided artifact IDs.",
              "type": "optional<list<string>>",
            },
          },
        },
        "WorksUpdateRequestIssue": {
          "docs": undefined,
          "properties": {
            "priority": {
              "docs": undefined,
              "type": "optional<IssuePriority>",
            },
            "sprint": {
              "docs": "Updates the sprint that the issue belongs to.",
              "type": "optional<string>",
            },
          },
        },
        "WorksUpdateRequestOwnedBy": {
          "docs": undefined,
          "properties": {
            "set": {
              "docs": "Sets the owner IDs to the provided user IDs. This must not be
empty.
",
              "type": "optional<list<string>>",
            },
          },
        },
        "WorksUpdateRequestReportedBy": {
          "docs": undefined,
          "properties": {
            "set": {
              "docs": "Sets the users that reported the work to the provided user IDs.
",
              "type": "optional<list<string>>",
            },
          },
        },
        "WorksUpdateRequestTags": {
          "docs": undefined,
          "properties": {
            "set": {
              "docs": "Sets the provided tags on the work item.",
              "type": "optional<list<SetTagWithValue>>",
            },
          },
        },
        "WorksUpdateRequestTicket": {
          "docs": undefined,
          "properties": {
            "group": {
              "docs": "The group that the ticket is associated with.",
              "type": "optional<string>",
            },
            "rev_org": {
              "docs": "Updates the Rev organization that the ticket is associated with.
",
              "type": "optional<string>",
            },
            "severity": {
              "docs": undefined,
              "type": "optional<TicketSeverity>",
            },
          },
        },
        "WorksUpdateResponse": {
          "docs": undefined,
          "properties": {
            "work": {
              "docs": undefined,
              "type": "Work",
            },
          },
        },
        "auth-connection-options-social": {
          "docs": undefined,
          "type": "map<string, unknown>",
        },
        "empty": {
          "docs": undefined,
          "type": "map<string, unknown>",
        },
        "error-bad-request-bad-request": {
          "docs": undefined,
          "type": "map<string, unknown>",
        },
        "error-bad-request-parse-error": {
          "docs": undefined,
          "type": "map<string, unknown>",
        },
        "error-forbidden-forbidden": {
          "docs": undefined,
          "type": "map<string, unknown>",
        },
        "error-internal-server-error-internal-error": {
          "docs": undefined,
          "type": "map<string, unknown>",
        },
        "error-not-found-not-found": {
          "docs": undefined,
          "type": "map<string, unknown>",
        },
        "error-service-unavailable-service-unavailable": {
          "docs": undefined,
          "type": "map<string, unknown>",
        },
        "error-too-many-requests-too-many-requests": {
          "docs": undefined,
          "type": "map<string, unknown>",
        },
        "error-unauthorized-unauthenticated": {
          "docs": undefined,
          "type": "map<string, unknown>",
        },
        "external-identity": {
          "docs": "External identity of a user.",
          "type": "map<string, unknown>",
        },
        "parts-create-request-product": {
          "docs": undefined,
          "type": "map<string, unknown>",
        },
        "parts-delete-response": {
          "docs": undefined,
          "type": "map<string, unknown>",
        },
        "parts-update-request-capability": {
          "docs": undefined,
          "type": "map<string, unknown>",
        },
        "parts-update-request-feature": {
          "docs": undefined,
          "type": "map<string, unknown>",
        },
        "parts-update-request-product": {
          "docs": undefined,
          "type": "map<string, unknown>",
        },
        "rev-orgs-delete-response": {
          "docs": "The response to deleting a Rev organization.",
          "type": "map<string, unknown>",
        },
        "tags-delete-response": {
          "docs": "The response for deleting a tag.",
          "type": "map<string, unknown>",
        },
        "webhooks-delete-response": {
          "docs": "The response to deleting the webhook.",
          "type": "map<string, unknown>",
        },
        "works-delete-response": {
          "docs": undefined,
          "type": "map<string, unknown>",
        },
      },
    },
    "artifacts.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "locate": {
            "auth": true,
            "method": "GET",
            "path": "/artifacts.locate",
            "request": {
              "name": "ArtifactsLocateRequest",
              "query-parameters": {
                "id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.ArtifactsLocateResponse",
            },
          },
          "prepare": {
            "auth": true,
            "method": "POST",
            "path": "/artifacts.prepare",
            "request": {
              "body": {
                "properties": {
                  "file_name": {
                    "docs": "The name of the file that's being uploaded.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "ArtifactsPrepareRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.ArtifactsPrepareResponse",
            },
          },
        },
      },
    },
    "authConnection.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "dev-org-auth-connections-create": {
            "auth": true,
            "method": "POST",
            "path": "/dev-orgs.auth-connections.create",
            "request": {
              "body": {
                "docs": "Request to create a new enterprise authentication connection.
",
                "type": "root.DevOrgAuthConnectionsCreateRequest",
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.DevOrgAuthConnectionsCreateResponse",
            },
          },
          "dev-org-auth-connections-delete": {
            "auth": true,
            "method": "POST",
            "path": "/dev-orgs.auth-connections.delete",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "ID of the authentication connection to be deleted.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "DevOrgAuthConnectionsDeleteRequest",
              "query-parameters": undefined,
            },
          },
          "dev-org-auth-connections-get": {
            "auth": true,
            "method": "GET",
            "path": "/dev-orgs.auth-connections.get",
            "request": {
              "name": "DevOrgAuthConnectionsGetRequest",
              "query-parameters": {
                "id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.DevOrgAuthConnectionsGetResponse",
            },
          },
          "dev-org-auth-connections-list": {
            "auth": true,
            "method": "GET",
            "path": "/dev-orgs.auth-connections.list",
            "response": {
              "docs": "Success.",
              "type": "root.DevOrgAuthConnectionsListResponse",
            },
          },
          "dev-org-auth-connections-toggle": {
            "auth": true,
            "method": "POST",
            "path": "/dev-orgs.auth-connections.toggle",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "ID of the authentication connection to be toggled.",
                    "type": "string",
                  },
                  "toggle": {
                    "docs": undefined,
                    "type": "optional<root.AuthConnectionToggle>",
                  },
                },
              },
              "headers": undefined,
              "name": "DevOrgAuthConnectionsToggleRequest",
              "query-parameters": undefined,
            },
          },
          "dev-org-auth-connections-update": {
            "auth": true,
            "method": "POST",
            "path": "/dev-orgs.auth-connections.update",
            "request": {
              "body": {
                "docs": "Request to update an enterprise authentication connection for a Dev
organization.
",
                "type": "root.DevOrgAuthConnectionsUpdateRequest",
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.DevOrgAuthConnectionsUpdateResponse",
            },
          },
        },
      },
    },
    "authTokens.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "create": {
            "auth": true,
            "method": "POST",
            "path": "/auth-tokens.create",
            "request": {
              "body": {
                "properties": {
                  "aud": {
                    "docs": "The expected audience values with respect to the token.",
                    "type": "optional<list<string>>",
                  },
                  "client_id": {
                    "docs": "An identifier that represents the application which is requesting
the token. If no client_id is present in the request to generate an
application access token (AAT), DevRev will generate a client_id.
This client_id is only associated with an AAT.
",
                    "type": "optional<string>",
                  },
                  "expires_in": {
                    "docs": "The expected validity lifetime of the token in number of days.
",
                    "type": "optional<integer>",
                  },
                  "grant_type": {
                    "docs": undefined,
                    "type": "optional<root.AuthTokenGrantType>",
                  },
                  "requested_token_type": {
                    "docs": undefined,
                    "type": "optional<root.AuthTokenRequestedTokenType>",
                  },
                  "rev_info": {
                    "docs": undefined,
                    "type": "optional<root.AuthTokensRevInfo>",
                  },
                  "scope": {
                    "docs": "The requested set of scopes associated with the issued token. A
space-delimited list of values in which the order of values does
not matter.
",
                    "type": "optional<string>",
                  },
                  "subject_token": {
                    "docs": "Represents the entity that requests the token. Not required when
requesting an application access token (AAT).
",
                    "type": "optional<string>",
                  },
                  "subject_token_type": {
                    "docs": undefined,
                    "type": "optional<root.AuthTokenSubjectTokenType>",
                  },
                  "token_hint": {
                    "docs": "A hint that identifies the token.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "AuthTokensCreateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.AuthTokensCreateResponse",
            },
          },
          "delete": {
            "auth": true,
            "method": "POST",
            "path": "/auth-tokens.delete",
            "request": {
              "body": {
                "properties": {
                  "token_id": {
                    "docs": "The unique identifier for the token under a given Dev organization.
If no token ID is provided, then the token ID will be set from the
JTI claim of the token in the authorization header.
",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "AuthTokensDeleteRequest",
              "query-parameters": undefined,
            },
          },
          "get": {
            "auth": true,
            "method": "GET",
            "path": "/auth-tokens.get",
            "request": {
              "name": "AuthTokensGetRequest",
              "query-parameters": {
                "token_id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.AuthTokensGetResponse",
            },
          },
          "list": {
            "auth": true,
            "method": "GET",
            "path": "/auth-tokens.list",
            "request": {
              "name": "AuthTokensListRequest",
              "query-parameters": {
                "client_id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "requested_token_type": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.AuthTokenRequestedTokenType>",
                },
                "subject": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.AuthTokensListResponse",
            },
          },
          "selfDelete": {
            "auth": true,
            "method": "POST",
            "path": "/auth-tokens.self.delete",
            "request": {
              "body": {
                "properties": {
                  "requested_token_type": {
                    "docs": undefined,
                    "type": "optional<root.AuthTokenRequestedTokenType>",
                  },
                },
              },
              "headers": undefined,
              "name": "AuthTokensSelfDeleteRequest",
              "query-parameters": undefined,
            },
          },
          "update": {
            "auth": true,
            "method": "POST",
            "path": "/auth-tokens.update",
            "request": {
              "body": {
                "properties": {
                  "token_hint": {
                    "docs": "A hint that identifies the token.",
                    "type": "string",
                  },
                  "token_id": {
                    "docs": "The unique identifier of the token under a given Dev organization.
",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "AuthTokensUpdateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.AuthTokensUpdateResponse",
            },
          },
        },
      },
    },
    "devUsers.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "list": {
            "auth": true,
            "method": "GET",
            "path": "/dev-users.list",
            "request": {
              "name": "DevUsersListRequest",
              "query-parameters": {
                "cursor": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "email": {
                  "allow-multiple": true,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "mode": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.ListMode>",
                },
                "sort_by": {
                  "allow-multiple": true,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "state": {
                  "allow-multiple": true,
                  "docs": undefined,
                  "type": "optional<root.UserState>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.DevUsersListResponse",
            },
          },
          "self": {
            "auth": true,
            "method": "GET",
            "path": "/dev-users.self",
            "response": {
              "docs": "Success.",
              "type": "root.DevUsersSelfResponse",
            },
          },
        },
      },
    },
    "parts.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "create": {
            "auth": true,
            "method": "POST",
            "path": "/parts.create",
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.PartsCreateRequest",
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.PartsCreateResponse",
            },
          },
          "delete": {
            "auth": true,
            "method": "POST",
            "path": "/parts.delete",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The ID of the part to delete.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "PartsDeleteRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.parts-delete-response",
            },
          },
          "get": {
            "auth": true,
            "method": "GET",
            "path": "/parts.get",
            "request": {
              "name": "PartsGetRequest",
              "query-parameters": {
                "id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.PartsGetResponse",
            },
          },
          "list": {
            "auth": true,
            "method": "GET",
            "path": "/parts.list",
            "request": {
              "name": "PartsListRequest",
              "query-parameters": {
                "created_by": {
                  "allow-multiple": true,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "cursor": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "mode": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.ListMode>",
                },
                "name": {
                  "allow-multiple": true,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "owned_by": {
                  "allow-multiple": true,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "type": {
                  "allow-multiple": true,
                  "docs": undefined,
                  "type": "optional<root.PartType>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.PartsListResponse",
            },
          },
          "update": {
            "auth": true,
            "method": "POST",
            "path": "/parts.update",
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.PartsUpdateRequest",
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.PartsUpdateResponse",
            },
          },
        },
      },
    },
    "revOrgs.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "create": {
            "auth": true,
            "method": "POST",
            "path": "/rev-orgs.create",
            "request": {
              "body": {
                "properties": {
                  "description": {
                    "docs": "Description of the Rev organization.",
                    "type": "optional<string>",
                  },
                  "display_name": {
                    "docs": "Name of the Rev organization.",
                    "type": "string",
                  },
                  "domain": {
                    "docs": "Company's domain name. Example - 'devrev.ai'.",
                    "type": "optional<string>",
                  },
                  "environment": {
                    "docs": undefined,
                    "type": "optional<root.OrgEnvironment>",
                  },
                  "external_ref": {
                    "docs": "External ref is a custom unique identifier which is a reference to
an unique id for this organization's data in some system of
records.
",
                    "type": "optional<string>",
                  },
                  "tier": {
                    "docs": "The tier of the RevOrg.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "RevOrgsCreateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.RevOrgsCreateResponse",
            },
          },
          "delete": {
            "auth": true,
            "method": "POST",
            "path": "/rev-orgs.delete",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The ID of Rev organization to delete.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "RevOrgsDeleteRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.rev-orgs-delete-response",
            },
          },
          "get": {
            "auth": true,
            "method": "GET",
            "path": "/rev-orgs.get",
            "request": {
              "name": "RevOrgsGetRequest",
              "query-parameters": {
                "id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.RevOrgsGetResponse",
            },
          },
          "list": {
            "auth": true,
            "method": "GET",
            "path": "/rev-orgs.list",
            "request": {
              "name": "RevOrgsListRequest",
              "query-parameters": {
                "created_by": {
                  "allow-multiple": true,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "created_date.after": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "created_date.before": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "cursor": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "external_ref": {
                  "allow-multiple": true,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "mode": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.ListMode>",
                },
                "modified_date.after": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "modified_date.before": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "sort_by": {
                  "allow-multiple": true,
                  "docs": undefined,
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.RevOrgsListResponse",
            },
          },
          "update": {
            "auth": true,
            "method": "POST",
            "path": "/rev-orgs.update",
            "request": {
              "body": {
                "properties": {
                  "description": {
                    "docs": "Description of the Rev organization.",
                    "type": "optional<string>",
                  },
                  "display_name": {
                    "docs": "Customer chosen name for the Rev organization.",
                    "type": "optional<string>",
                  },
                  "domain": {
                    "docs": "Company's domain name. Example - 'devrev.ai'.",
                    "type": "optional<string>",
                  },
                  "environment": {
                    "docs": undefined,
                    "type": "optional<root.OrgEnvironment>",
                  },
                  "external_ref": {
                    "docs": "External ref is a custom unique identifier which is a reference to
an unique id for this organization's data in some system of
records.
",
                    "type": "optional<string>",
                  },
                  "id": {
                    "docs": "The ID of Rev organization to update.",
                    "type": "string",
                  },
                  "tier": {
                    "docs": "The tier of the RevOrg.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "RevOrgsUpdateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.RevOrgsUpdateResponse",
            },
          },
        },
      },
    },
    "tags.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "create": {
            "auth": true,
            "method": "POST",
            "path": "/tags.create",
            "request": {
              "body": {
                "properties": {
                  "allowed_values": {
                    "docs": "The allowed values for the tag, or empty if no values are
permitted.
",
                    "type": "optional<list<string>>",
                  },
                  "description": {
                    "docs": "The description for the tag.",
                    "type": "optional<string>",
                  },
                  "name": {
                    "docs": "The name for the tag, which must be unique across all tags.
",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "TagsCreateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.TagsCreateResponse",
            },
          },
          "delete": {
            "auth": true,
            "method": "POST",
            "path": "/tags.delete",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The ID of the tag to delete.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "TagsDeleteRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.tags-delete-response",
            },
          },
          "get": {
            "auth": true,
            "method": "GET",
            "path": "/tags.get",
            "request": {
              "name": "TagsGetRequest",
              "query-parameters": {
                "id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.TagsGetResponse",
            },
          },
          "list": {
            "auth": true,
            "method": "GET",
            "path": "/tags.list",
            "request": {
              "name": "TagsListRequest",
              "query-parameters": {
                "cursor": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "mode": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.ListMode>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.TagsListResponse",
            },
          },
          "update": {
            "auth": true,
            "method": "POST",
            "path": "/tags.update",
            "request": {
              "body": {
                "properties": {
                  "allowed_values": {
                    "docs": undefined,
                    "type": "optional<root.TagsUpdateAllowedValues>",
                  },
                  "description": {
                    "docs": "The updated description of the tag.",
                    "type": "optional<string>",
                  },
                  "id": {
                    "docs": "The ID of the tag to update.",
                    "type": "string",
                  },
                  "name": {
                    "docs": "The updated name of the tag. The name must be unique across all
tags.
",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "TagsUpdateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.TagsUpdateResponse",
            },
          },
        },
      },
    },
    "timelineEntries.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "create": {
            "auth": true,
            "method": "POST",
            "path": "/timeline-entries.create",
            "request": {
              "body": {
                "docs": "The request to create a timeline entry for an object.",
                "type": "root.TimelineEntriesCreateRequest",
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.TimelineEntriesCreateResponse",
            },
          },
          "get": {
            "auth": true,
            "method": "GET",
            "path": "/timeline-entries.get",
            "request": {
              "name": "TimelineEntriesGetRequest",
              "query-parameters": {
                "id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.TimelineEntriesGetResponse",
            },
          },
          "list": {
            "auth": true,
            "method": "GET",
            "path": "/timeline-entries.list",
            "request": {
              "name": "TimelineEntriesListRequest",
              "query-parameters": {
                "cursor": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "mode": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.ListMode>",
                },
                "object": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.TimelineEntriesListResponse",
            },
          },
          "update": {
            "auth": true,
            "method": "POST",
            "path": "/timeline-entries.update",
            "request": {
              "body": {
                "docs": "The request to update a timeline entry.",
                "type": "root.TimelineEntriesUpdateRequest",
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.TimelineEntriesUpdateResponse",
            },
          },
        },
      },
    },
    "webhooks.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "create": {
            "auth": true,
            "method": "POST",
            "path": "/webhooks.create",
            "request": {
              "body": {
                "properties": {
                  "event_types": {
                    "docs": "The event types that the webhook endpoint will receive.",
                    "type": "optional<list<root.WebhookEventType>>",
                  },
                  "secret": {
                    "docs": "The secret to use when verifying webhook events. If provided, the
secret must be between 8 and 32 bytes (inclusive). If not set, a
secret will be automatically generated and provided in the
response.
",
                    "type": "optional<string>",
                  },
                  "url": {
                    "docs": "The URL of the webhook endpoint.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "WebhooksCreateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.WebhooksCreateResponse",
            },
          },
          "delete": {
            "auth": true,
            "method": "POST",
            "path": "/webhooks.delete",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "ID for the webhook.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "WebhooksDeleteRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.webhooks-delete-response",
            },
          },
          "get": {
            "auth": true,
            "method": "GET",
            "path": "/webhooks.get",
            "request": {
              "name": "WebhooksGetRequest",
              "query-parameters": {
                "id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.WebhooksGetResponse",
            },
          },
          "list": {
            "auth": true,
            "method": "GET",
            "path": "/webhooks.list",
            "response": {
              "docs": "Success.",
              "type": "root.WebhooksListResponse",
            },
          },
          "update": {
            "auth": true,
            "method": "POST",
            "path": "/webhooks.update",
            "request": {
              "body": {
                "properties": {
                  "action": {
                    "docs": undefined,
                    "type": "optional<root.WebhooksUpdateAction>",
                  },
                  "event_types": {
                    "docs": undefined,
                    "type": "optional<root.WebhooksUpdateRequestEventTypes>",
                  },
                  "id": {
                    "docs": "ID for the webhook.",
                    "type": "string",
                  },
                  "secret": {
                    "docs": "If provided, updates the secret that's used when verifying webhook
events, which must be between 8 and 32 bytes (inclusive). Otherwise
if empty, then a new secret is generated. If the webhook is active,
then its status will transition to the 'unverified' state and it
won't receive any object events until successfully verified.
",
                    "type": "optional<string>",
                  },
                  "url": {
                    "docs": "The webhook's updated URL. If the webhook is active, then the
webhook's status will transition to the 'unverified' state and it
won't receive any object events until successfully verified.
",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "WebhooksUpdateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.WebhooksUpdateResponse",
            },
          },
        },
      },
    },
    "works.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "create": {
            "auth": true,
            "method": "POST",
            "path": "/works.create",
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.WorksCreateRequest",
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.WorksCreateResponse",
            },
          },
          "delete": {
            "auth": true,
            "method": "POST",
            "path": "/works.delete",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The work's ID.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "WorksDeleteRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Success.",
              "type": "root.works-delete-response",
            },
          },
          "export": {
            "auth": true,
            "method": "GET",
            "path": "/works.export",
            "request": {
              "name": "WorksExportRequest",
              "query-parameters": {
                "applies_to_part": {
                  "allow-multiple": true,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "created_by": {
                  "allow-multiple": true,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "first": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "issue.priority": {
                  "allow-multiple": true,
                  "docs": undefined,
                  "type": "optional<root.IssuePriority>",
                },
                "issue.rev_orgs": {
                  "allow-multiple": true,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "owned_by": {
                  "allow-multiple": true,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "stage.name": {
                  "allow-multiple": true,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "ticket.rev_org": {
                  "allow-multiple": true,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "ticket.severity": {
                  "allow-multiple": true,
                  "docs": undefined,
                  "type": "optional<root.TicketSeverity>",
                },
                "type": {
                  "allow-multiple": true,
                  "docs": undefined,
                  "type": "optional<root.WorkType>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.WorksExportResponse",
            },
          },
          "get": {
            "auth": true,
            "method": "GET",
            "path": "/works.get",
            "request": {
              "name": "WorksGetRequest",
              "query-parameters": {
                "id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.WorksGetResponse",
            },
          },
          "list": {
            "auth": true,
            "method": "GET",
            "path": "/works.list",
            "request": {
              "name": "WorksListRequest",
              "query-parameters": {
                "applies_to_part": {
                  "allow-multiple": true,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "created_by": {
                  "allow-multiple": true,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "cursor": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "issue.priority": {
                  "allow-multiple": true,
                  "docs": undefined,
                  "type": "optional<root.IssuePriority>",
                },
                "issue.rev_orgs": {
                  "allow-multiple": true,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "mode": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.ListMode>",
                },
                "owned_by": {
                  "allow-multiple": true,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "stage.name": {
                  "allow-multiple": true,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "ticket.rev_org": {
                  "allow-multiple": true,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "ticket.severity": {
                  "allow-multiple": true,
                  "docs": undefined,
                  "type": "optional<root.TicketSeverity>",
                },
                "type": {
                  "allow-multiple": true,
                  "docs": undefined,
                  "type": "optional<root.WorkType>",
                },
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.WorksListResponse",
            },
          },
          "update": {
            "auth": true,
            "method": "POST",
            "path": "/works.update",
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.WorksUpdateRequest",
              },
            },
            "response": {
              "docs": "Success.",
              "type": "root.WorksUpdateResponse",
            },
          },
        },
      },
    },
  },
  "rootApiFile": {
    "auth": "auth-token",
    "auth-schemes": {
      "auth-token": {
        "header": "Authorization",
        "name": "apiKey",
        "type": "string",
      },
    },
    "default-environment": "default",
    "display-name": "DevRev REST API",
    "environments": {
      "default": "{protocol}://{hostname}",
    },
    "error-discrimination": {
      "strategy": "status-code",
    },
    "headers": {},
    "name": "api",
  },
}
`;

exports[`open api converter hathora simple 1`] = `
{
  "definitionFiles": {
    "__package__.yml": {
      "service": undefined,
      "types": {
        "ActiveConnectionInfo": {
          "docs": undefined,
          "properties": {
            "host": {
              "docs": undefined,
              "type": "string",
            },
            "port": {
              "docs": undefined,
              "type": "double",
            },
            "roomId": {
              "docs": undefined,
              "type": "RoomId",
            },
            "status": {
              "docs": undefined,
              "type": "ActiveConnectionInfoStatus",
            },
            "transportType": {
              "docs": undefined,
              "type": "TransportType",
            },
          },
        },
        "ActiveConnectionInfoStatus": {
          "docs": undefined,
          "enum": [
            {
              "name": "active",
              "value": "active",
            },
          ],
        },
        "AppConfig": {
          "docs": undefined,
          "properties": {
            "appName": {
              "docs": undefined,
              "type": "string",
            },
            "authConfiguration": {
              "docs": undefined,
              "type": "AppConfigAuthConfiguration",
            },
          },
        },
        "AppConfigAuthConfiguration": {
          "docs": undefined,
          "properties": {
            "anonymous": {
              "docs": undefined,
              "type": "optional<RecordStringNever>",
            },
            "google": {
              "docs": undefined,
              "type": "optional<AppConfigAuthConfigurationGoogle>",
            },
            "nickname": {
              "docs": undefined,
              "type": "optional<RecordStringNever>",
            },
          },
        },
        "AppConfigAuthConfigurationGoogle": {
          "docs": undefined,
          "properties": {
            "clientId": {
              "docs": undefined,
              "type": "string",
            },
          },
        },
        "AppId": {
          "docs": undefined,
          "type": "string",
        },
        "Application": {
          "docs": undefined,
          "properties": {
            "appId": {
              "docs": undefined,
              "type": "string",
            },
            "appName": {
              "docs": undefined,
              "type": "string",
            },
            "appSecret": {
              "docs": undefined,
              "type": "string",
            },
            "authConfiguration": {
              "docs": undefined,
              "type": "ApplicationAuthConfiguration",
            },
            "createdAt": {
              "docs": undefined,
              "type": "string",
            },
            "createdBy": {
              "docs": undefined,
              "type": "string",
            },
            "deletedAt": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "deletedBy": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "orgId": {
              "docs": undefined,
              "type": "OrgId",
            },
          },
        },
        "ApplicationAuthConfiguration": {
          "docs": undefined,
          "properties": {
            "anonymous": {
              "docs": undefined,
              "type": "optional<RecordStringNever>",
            },
            "google": {
              "docs": undefined,
              "type": "optional<ApplicationAuthConfigurationGoogle>",
            },
            "nickname": {
              "docs": undefined,
              "type": "optional<RecordStringNever>",
            },
          },
        },
        "ApplicationAuthConfigurationGoogle": {
          "docs": undefined,
          "properties": {
            "clientId": {
              "docs": undefined,
              "type": "string",
            },
          },
        },
        "ApplicationWithDeployment": {
          "docs": undefined,
          "properties": {
            "deployment": {
              "docs": undefined,
              "type": "optional<Deployment>",
            },
          },
        },
        "Build": {
          "docs": undefined,
          "properties": {
            "appId": {
              "docs": undefined,
              "type": "AppId",
            },
            "buildId": {
              "docs": undefined,
              "type": "BuildId",
            },
            "createdAt": {
              "docs": undefined,
              "type": "string",
            },
            "createdBy": {
              "docs": undefined,
              "type": "string",
            },
            "deletedAt": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "finishedAt": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "imageSize": {
              "docs": undefined,
              "type": "double",
            },
            "regionalContainerTags": {
              "docs": undefined,
              "type": "list<BuildRegionalContainerTagsItem>",
            },
            "startedAt": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "status": {
              "docs": undefined,
              "type": "BuildStatus",
            },
          },
        },
        "BuildId": {
          "docs": undefined,
          "type": "double",
        },
        "BuildRegionalContainerTagsItem": {
          "docs": undefined,
          "properties": {
            "containerTag": {
              "docs": undefined,
              "type": "string",
            },
            "region": {
              "docs": undefined,
              "type": "Region",
            },
          },
        },
        "BuildStatus": {
          "docs": undefined,
          "enum": [
            {
              "name": "created",
              "value": "created",
            },
            {
              "name": "running",
              "value": "running",
            },
            {
              "name": "succeeded",
              "value": "succeeded",
            },
            {
              "name": "failed",
              "value": "failed",
            },
          ],
        },
        "ConnectionInfo": {
          "discriminated": false,
          "docs": undefined,
          "union": [
            {
              "docs": undefined,
              "type": "StartingConnectionInfo",
            },
            {
              "docs": undefined,
              "type": "ActiveConnectionInfo",
            },
          ],
        },
        "CreateLobbyRequestVisibility": {
          "docs": undefined,
          "enum": [
            {
              "name": "public",
              "value": "public",
            },
            {
              "name": "private",
              "value": "private",
            },
            {
              "name": "local",
              "value": "local",
            },
          ],
        },
        "Deployment": {
          "docs": undefined,
          "properties": {
            "appId": {
              "docs": undefined,
              "type": "optional<AppId>",
            },
            "buildId": {
              "docs": undefined,
              "type": "optional<BuildId>",
            },
            "createdAt": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "createdBy": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "deploymentId": {
              "docs": undefined,
              "type": "optional<DeploymentId>",
            },
            "requestedCPU": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "requestedMemoryMB": {
              "docs": undefined,
              "type": "optional<double>",
            },
          },
        },
        "DeploymentConfigEnvItem": {
          "docs": undefined,
          "properties": {
            "name": {
              "docs": undefined,
              "type": "string",
            },
            "value": {
              "docs": undefined,
              "type": "string",
            },
          },
        },
        "DeploymentId": {
          "docs": undefined,
          "type": "double",
        },
        "DiscoveryResponse": {
          "docs": undefined,
          "type": "list<DiscoveryResponseItem>",
        },
        "DiscoveryResponseItem": {
          "docs": undefined,
          "properties": {
            "host": {
              "docs": undefined,
              "type": "string",
            },
            "port": {
              "docs": undefined,
              "type": "double",
            },
            "region": {
              "docs": undefined,
              "type": "Region",
            },
          },
        },
        "Lobby": {
          "docs": undefined,
          "properties": {
            "appId": {
              "docs": undefined,
              "type": "AppId",
            },
            "createdAt": {
              "docs": undefined,
              "type": "string",
            },
            "createdBy": {
              "docs": undefined,
              "type": "string",
            },
            "initialConfig": {
              "docs": undefined,
              "type": "map<string, unknown>",
            },
            "local": {
              "docs": undefined,
              "type": "boolean",
            },
            "region": {
              "docs": undefined,
              "type": "Region",
            },
            "roomId": {
              "docs": undefined,
              "type": "RoomId",
            },
            "state": {
              "docs": undefined,
              "type": "optional<map<string, unknown>>",
            },
            "visibility": {
              "docs": undefined,
              "type": "LobbyVisibility",
            },
          },
        },
        "LobbyVisibility": {
          "docs": undefined,
          "enum": [
            {
              "name": "private",
              "value": "private",
            },
            {
              "name": "public",
              "value": "public",
            },
            {
              "name": "local",
              "value": "local",
            },
          ],
        },
        "LoginAnonymousResponse": {
          "docs": undefined,
          "properties": {
            "token": {
              "docs": undefined,
              "type": "string",
            },
          },
        },
        "LoginGoogleResponse": {
          "docs": undefined,
          "properties": {
            "token": {
              "docs": undefined,
              "type": "string",
            },
          },
        },
        "LoginNicknameResponse": {
          "docs": undefined,
          "properties": {
            "token": {
              "docs": undefined,
              "type": "string",
            },
          },
        },
        "MetricName": {
          "docs": undefined,
          "enum": [
            {
              "name": "cpu",
              "value": "cpu",
            },
            {
              "name": "memory",
              "value": "memory",
            },
            {
              "name": "rate_egress",
              "value": "rate_egress",
            },
            {
              "name": "total_egress",
              "value": "total_egress",
            },
          ],
        },
        "MetricValue": {
          "docs": undefined,
          "properties": {
            "timestamp": {
              "docs": undefined,
              "type": "double",
            },
            "value": {
              "docs": undefined,
              "type": "double",
            },
          },
        },
        "MetricsResponse": {
          "docs": undefined,
          "type": "RecordPartialMetricNameMetricValueArray",
        },
        "OmitRoomAllocations": {
          "docs": undefined,
          "type": "PickRoomExcludeKeyofRoomAllocations",
        },
        "OrgId": {
          "docs": undefined,
          "type": "string",
        },
        "PickRoomExcludeKeyofRoomAllocations": {
          "docs": "From T, pick a set of properties whose keys are in the union K",
          "properties": {
            "appId": {
              "docs": undefined,
              "type": "AppId",
            },
            "currentAllocation": {
              "docs": undefined,
              "type": "optional<RoomAllocation>",
            },
            "roomId": {
              "docs": undefined,
              "type": "RoomId",
            },
            "status": {
              "docs": undefined,
              "type": "RoomStatus",
            },
          },
        },
        "PlanName": {
          "docs": undefined,
          "enum": [
            {
              "name": "tiny",
              "value": "tiny",
            },
            {
              "name": "small",
              "value": "small",
            },
            {
              "name": "medium",
              "value": "medium",
            },
            {
              "name": "large",
              "value": "large",
            },
          ],
        },
        "Process": {
          "docs": undefined,
          "properties": {
            "activeConnections": {
              "docs": undefined,
              "type": "double",
            },
            "appId": {
              "docs": undefined,
              "type": "AppId",
            },
            "deploymentId": {
              "docs": undefined,
              "type": "DeploymentId",
            },
            "draining": {
              "docs": undefined,
              "type": "boolean",
            },
            "egressedBytes": {
              "docs": undefined,
              "type": "double",
            },
            "host": {
              "docs": undefined,
              "type": "string",
            },
            "idleSince": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "port": {
              "docs": undefined,
              "type": "double",
            },
            "processId": {
              "docs": undefined,
              "type": "ProcessId",
            },
            "region": {
              "docs": undefined,
              "type": "Region",
            },
            "roomSlotsAvailable": {
              "docs": undefined,
              "type": "double",
            },
            "roomsPerProcess": {
              "docs": undefined,
              "type": "double",
            },
            "startedAt": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "startingAt": {
              "docs": undefined,
              "type": "string",
            },
            "stoppingAt": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "terminatedAt": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "ProcessId": {
          "docs": undefined,
          "type": "string",
        },
        "ProcessWithRooms": {
          "docs": undefined,
          "properties": {
            "rooms": {
              "docs": undefined,
              "type": "optional<list<RoomWithoutAllocations>>",
            },
            "totalRooms": {
              "docs": undefined,
              "type": "optional<double>",
            },
          },
        },
        "RecordPartialMetricNameMetricValueArray": {
          "docs": "Construct a type with a set of properties K of type T",
          "properties": {
            "cpu": {
              "docs": undefined,
              "type": "optional<list<MetricValue>>",
            },
            "memory": {
              "docs": undefined,
              "type": "optional<list<MetricValue>>",
            },
            "rate_egress": {
              "docs": undefined,
              "type": "optional<list<MetricValue>>",
            },
            "total_egress": {
              "docs": undefined,
              "type": "optional<list<MetricValue>>",
            },
          },
        },
        "RecordStringNever": {
          "docs": "Construct a type with a set of properties K of type T",
          "properties": {},
        },
        "Region": {
          "docs": undefined,
          "enum": [
            {
              "name": "Seattle",
              "value": "Seattle",
            },
            {
              "name": "Washington_DC",
              "value": "Washington_DC",
            },
            {
              "name": "Chicago",
              "value": "Chicago",
            },
            {
              "name": "London",
              "value": "London",
            },
            {
              "name": "Frankfurt",
              "value": "Frankfurt",
            },
            {
              "name": "Mumbai",
              "value": "Mumbai",
            },
            {
              "name": "Singapore",
              "value": "Singapore",
            },
            {
              "name": "Tokyo",
              "value": "Tokyo",
            },
            {
              "name": "Sydney",
              "value": "Sydney",
            },
            {
              "name": "Sao_Paulo",
              "value": "Sao_Paulo",
            },
          ],
        },
        "Room": {
          "docs": undefined,
          "properties": {
            "allocations": {
              "docs": undefined,
              "type": "list<RoomAllocation>",
            },
            "appId": {
              "docs": undefined,
              "type": "AppId",
            },
            "currentAllocation": {
              "docs": undefined,
              "type": "optional<RoomAllocation>",
            },
            "roomId": {
              "docs": undefined,
              "type": "RoomId",
            },
            "status": {
              "docs": undefined,
              "type": "RoomStatus",
            },
          },
        },
        "RoomAllocation": {
          "docs": undefined,
          "properties": {
            "processId": {
              "docs": undefined,
              "type": "ProcessId",
            },
            "roomAllocationId": {
              "docs": undefined,
              "type": "RoomAllocationId",
            },
            "scheduledAt": {
              "docs": undefined,
              "type": "string",
            },
            "unscheduledAt": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "RoomAllocationId": {
          "docs": undefined,
          "type": "string",
        },
        "RoomId": {
          "docs": undefined,
          "type": "string",
        },
        "RoomStatus": {
          "docs": undefined,
          "enum": [
            {
              "name": "scheduling",
              "value": "scheduling",
            },
            {
              "name": "active",
              "value": "active",
            },
            {
              "name": "suspended",
              "value": "suspended",
            },
            {
              "name": "destroyed",
              "value": "destroyed",
            },
          ],
        },
        "RoomWithoutAllocations": {
          "docs": undefined,
          "type": "OmitRoomAllocations",
        },
        "StartingConnectionInfo": {
          "docs": undefined,
          "properties": {
            "roomId": {
              "docs": undefined,
              "type": "RoomId",
            },
            "status": {
              "docs": undefined,
              "type": "StartingConnectionInfoStatus",
            },
          },
        },
        "StartingConnectionInfoStatus": {
          "docs": undefined,
          "enum": [
            {
              "name": "starting",
              "value": "starting",
            },
          ],
        },
        "TailLines": {
          "docs": undefined,
          "type": "integer",
        },
        "TransportType": {
          "docs": undefined,
          "enum": [
            {
              "name": "tcp",
              "value": "tcp",
            },
            {
              "name": "udp",
              "value": "udp",
            },
            {
              "name": "tls",
              "value": "tls",
            },
          ],
        },
      },
    },
    "appV1.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "CreateApp": {
            "auth": true,
            "method": "POST",
            "path": "/apps/v1/create",
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.AppConfig",
              },
            },
            "response": {
              "docs": "",
              "type": "root.Application",
            },
          },
          "DeleteApp": {
            "auth": true,
            "method": "DELETE",
            "path": "/apps/v1/delete/{appId}",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
            },
          },
          "GetAppInfo": {
            "auth": true,
            "method": "GET",
            "path": "/apps/v1/info/{appId}",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.Application",
            },
          },
          "GetApps": {
            "auth": true,
            "method": "GET",
            "path": "/apps/v1/list",
            "response": {
              "docs": "Ok",
              "type": "list<root.ApplicationWithDeployment>",
            },
          },
          "UpdateApp": {
            "auth": true,
            "method": "POST",
            "path": "/apps/v1/update/{appId}",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.AppConfig",
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.Application",
            },
          },
        },
      },
    },
    "authV1.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "LoginAnonymous": {
            "auth": true,
            "method": "POST",
            "path": "/auth/v1/{appId}/login/anonymous",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.LoginAnonymousResponse",
            },
          },
          "LoginGoogle": {
            "auth": true,
            "method": "POST",
            "path": "/auth/v1/{appId}/login/google",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "idToken": {
                    "docs": undefined,
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "LoginGoogleRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Ok",
              "type": "root.LoginGoogleResponse",
            },
          },
          "LoginNickname": {
            "auth": true,
            "method": "POST",
            "path": "/auth/v1/{appId}/login/nickname",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "nickname": {
                    "docs": undefined,
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "LoginNicknameRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Ok",
              "type": "root.LoginNicknameResponse",
            },
          },
        },
      },
    },
    "buildV1.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "CreateBuild": {
            "auth": true,
            "method": "POST",
            "path": "/builds/v1/{appId}/create",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
            },
            "response": {
              "docs": "",
              "type": "root.Build",
            },
          },
          "DeleteBuild": {
            "auth": true,
            "method": "DELETE",
            "path": "/builds/v1/{appId}/delete/{buildId}",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
              "buildId": {
                "docs": undefined,
                "type": "root.BuildId",
              },
            },
          },
          "GetBuildInfo": {
            "auth": true,
            "method": "GET",
            "path": "/builds/v1/{appId}/info/{buildId}",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
              "buildId": {
                "docs": undefined,
                "type": "root.BuildId",
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.Build",
            },
          },
          "GetBuilds": {
            "auth": true,
            "method": "GET",
            "path": "/builds/v1/{appId}/list",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
            },
            "response": {
              "docs": "Ok",
              "type": "list<root.Build>",
            },
          },
          "RunBuild": {
            "auth": true,
            "method": "POST",
            "path": "/builds/v1/{appId}/run/{buildId}",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
              "buildId": {
                "docs": undefined,
                "type": "root.BuildId",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "file": "file",
                },
              },
              "headers": undefined,
              "name": "RunBuildRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Ok",
              "type": "string",
            },
          },
        },
      },
    },
    "deploymentV1.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "CreateDeployment": {
            "auth": true,
            "method": "POST",
            "path": "/deployments/v1/{appId}/create/{buildId}",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
              "buildId": {
                "docs": undefined,
                "type": "root.BuildId",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "containerPort": {
                    "docs": undefined,
                    "type": "integer",
                  },
                  "env": {
                    "docs": undefined,
                    "type": "list<root.DeploymentConfigEnvItem>",
                  },
                  "planName": {
                    "docs": undefined,
                    "type": "root.PlanName",
                  },
                  "roomsPerProcess": {
                    "docs": undefined,
                    "type": "integer",
                  },
                  "transportType": {
                    "docs": undefined,
                    "type": "root.TransportType",
                  },
                },
              },
              "headers": undefined,
              "name": "DeploymentConfig",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "",
              "type": "root.Deployment",
            },
          },
          "GetDeploymentInfo": {
            "auth": true,
            "method": "GET",
            "path": "/deployments/v1/{appId}/info/{deploymentId}",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
              "deploymentId": {
                "docs": undefined,
                "type": "root.DeploymentId",
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.Deployment",
            },
          },
          "GetDeployments": {
            "auth": true,
            "method": "GET",
            "path": "/deployments/v1/{appId}/list",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
            },
            "response": {
              "docs": "Ok",
              "type": "list<root.Deployment>",
            },
          },
        },
      },
    },
    "discoveryV1.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "GetPingServiceEndpoints": {
            "auth": true,
            "method": "GET",
            "path": "/discovery/v1/ping",
            "response": {
              "docs": "Ok",
              "type": "root.DiscoveryResponse",
            },
          },
        },
      },
    },
    "lobbyV1.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "CreatePrivateLobbyDeprecated": {
            "auth": true,
            "method": "POST",
            "path": "/lobby/v1/{appId}/create/private",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
            },
            "request": {
              "name": "CreatePrivateLobbyDeprecatedRequest",
              "query-parameters": {
                "Authorization": {
                  "docs": undefined,
                  "type": "string",
                },
                "local": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<boolean>",
                },
                "region": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.Region>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.RoomId",
            },
          },
          "CreatePublicLobbyDeprecated": {
            "auth": true,
            "method": "POST",
            "path": "/lobby/v1/{appId}/create/public",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
            },
            "request": {
              "name": "CreatePublicLobbyDeprecatedRequest",
              "query-parameters": {
                "Authorization": {
                  "docs": undefined,
                  "type": "string",
                },
                "local": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<boolean>",
                },
                "region": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.Region>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.RoomId",
            },
          },
          "ListActivePublicLobbiesDeprecated": {
            "auth": true,
            "method": "GET",
            "path": "/lobby/v1/{appId}/list",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
            },
            "request": {
              "name": "ListActivePublicLobbiesDeprecatedRequest",
              "query-parameters": {
                "Authorization": {
                  "docs": undefined,
                  "type": "string",
                },
                "local": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<boolean>",
                },
                "region": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.Region>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "list<root.Lobby>",
            },
          },
        },
      },
    },
    "lobbyV2.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "CreateLobby": {
            "auth": true,
            "method": "POST",
            "path": "/lobby/v2/{appId}/create",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "initialConfig": {
                    "docs": undefined,
                    "type": "map<string, unknown>",
                  },
                  "region": {
                    "docs": undefined,
                    "type": "root.Region",
                  },
                  "visibility": {
                    "docs": undefined,
                    "type": "root.CreateLobbyRequestVisibility",
                  },
                },
              },
              "headers": undefined,
              "name": "CreateLobbyRequest",
              "query-parameters": {
                "Authorization": {
                  "docs": undefined,
                  "type": "string",
                },
                "roomId": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.RoomId>",
                },
              },
            },
            "response": {
              "docs": "",
              "type": "root.Lobby",
            },
          },
          "CreateLocalLobby": {
            "auth": true,
            "method": "POST",
            "path": "/lobby/v2/{appId}/create/local",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "initialConfig": {
                    "docs": undefined,
                    "type": "map<string, unknown>",
                  },
                  "region": {
                    "docs": undefined,
                    "type": "root.Region",
                  },
                },
              },
              "headers": undefined,
              "name": "CreateLocalLobbyRequest",
              "query-parameters": {
                "Authorization": {
                  "docs": undefined,
                  "type": "string",
                },
                "roomId": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.RoomId>",
                },
              },
            },
            "response": {
              "docs": "",
              "type": "root.Lobby",
            },
          },
          "CreatePrivateLobby": {
            "auth": true,
            "method": "POST",
            "path": "/lobby/v2/{appId}/create/private",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "initialConfig": {
                    "docs": undefined,
                    "type": "map<string, unknown>",
                  },
                  "region": {
                    "docs": undefined,
                    "type": "root.Region",
                  },
                },
              },
              "headers": undefined,
              "name": "CreatePrivateLobbyRequest",
              "query-parameters": {
                "Authorization": {
                  "docs": undefined,
                  "type": "string",
                },
                "roomId": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.RoomId>",
                },
              },
            },
            "response": {
              "docs": "",
              "type": "root.Lobby",
            },
          },
          "CreatePublicLobby": {
            "auth": true,
            "method": "POST",
            "path": "/lobby/v2/{appId}/create/public",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "initialConfig": {
                    "docs": undefined,
                    "type": "map<string, unknown>",
                  },
                  "region": {
                    "docs": undefined,
                    "type": "root.Region",
                  },
                },
              },
              "headers": undefined,
              "name": "CreatePublicLobbyRequest",
              "query-parameters": {
                "Authorization": {
                  "docs": undefined,
                  "type": "string",
                },
                "roomId": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.RoomId>",
                },
              },
            },
            "response": {
              "docs": "",
              "type": "root.Lobby",
            },
          },
          "GetLobbyInfo": {
            "auth": true,
            "method": "GET",
            "path": "/lobby/v2/{appId}/info/{roomId}",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
              "roomId": {
                "docs": undefined,
                "type": "root.RoomId",
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.Lobby",
            },
          },
          "ListActivePublicLobbies": {
            "auth": true,
            "method": "GET",
            "path": "/lobby/v2/{appId}/list/public",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
            },
            "request": {
              "name": "ListActivePublicLobbiesRequest",
              "query-parameters": {
                "region": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.Region>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "list<root.Lobby>",
            },
          },
          "SetLobbyState": {
            "auth": true,
            "method": "POST",
            "path": "/lobby/v2/{appId}/setState/{roomId}",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
              "roomId": {
                "docs": undefined,
                "type": "root.RoomId",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "state": {
                    "docs": undefined,
                    "type": "map<string, unknown>",
                  },
                },
              },
              "headers": undefined,
              "name": "SetLobbyStateRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Ok",
              "type": "root.Lobby",
            },
          },
        },
      },
    },
    "logV1.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "GetLogsForApp": {
            "auth": true,
            "method": "GET",
            "path": "/logs/v1/{appId}/all",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
            },
            "request": {
              "name": "GetLogsForAppRequest",
              "query-parameters": {
                "follow": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<boolean>",
                },
                "region": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.Region>",
                },
                "tailLines": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.TailLines>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "string",
            },
          },
          "GetLogsForDeployment": {
            "auth": true,
            "method": "GET",
            "path": "/logs/v1/{appId}/deployment/{deploymentId}",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
              "deploymentId": {
                "docs": undefined,
                "type": "root.DeploymentId",
              },
            },
            "request": {
              "name": "GetLogsForDeploymentRequest",
              "query-parameters": {
                "follow": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<boolean>",
                },
                "tailLines": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.TailLines>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "unknown",
            },
          },
          "GetLogsForProcess": {
            "auth": true,
            "method": "GET",
            "path": "/logs/v1/{appId}/process/{processId}",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
              "processId": {
                "docs": undefined,
                "type": "root.ProcessId",
              },
            },
            "request": {
              "name": "GetLogsForProcessRequest",
              "query-parameters": {
                "follow": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<boolean>",
                },
                "tailLines": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.TailLines>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "string",
            },
          },
        },
      },
    },
    "metricsV1.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "GetMetrics": {
            "auth": true,
            "method": "GET",
            "path": "/metrics/v1/{appId}/process/{processId}",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
              "processId": {
                "docs": undefined,
                "type": "root.ProcessId",
              },
            },
            "request": {
              "name": "GetMetricsRequest",
              "query-parameters": {
                "end": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "metrics": {
                  "allow-multiple": true,
                  "docs": undefined,
                  "type": "optional<root.MetricName>",
                },
                "start": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "step": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.MetricsResponse",
            },
          },
        },
      },
    },
    "processesV1.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "GetProcessInfo": {
            "auth": true,
            "method": "GET",
            "path": "/processes/v1/{appId}/info/{processId}",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
              "processId": {
                "docs": undefined,
                "type": "root.ProcessId",
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.Process",
            },
          },
          "GetRunningProcesses": {
            "auth": true,
            "method": "GET",
            "path": "/processes/v1/{appId}/list/running",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
            },
            "request": {
              "name": "GetRunningProcessesRequest",
              "query-parameters": {
                "region": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.Region>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "list<root.ProcessWithRooms>",
            },
          },
          "GetStoppedProcesses": {
            "auth": true,
            "method": "GET",
            "path": "/processes/v1/{appId}/list/stopped",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
            },
            "request": {
              "name": "GetStoppedProcessesRequest",
              "query-parameters": {
                "region": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.Region>",
                },
              },
            },
            "response": {
              "docs": "Ok",
              "type": "list<root.Process>",
            },
          },
        },
      },
    },
    "roomV1.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "CreateRoom": {
            "auth": true,
            "method": "POST",
            "path": "/rooms/v1/{appId}/create",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "region": {
                    "docs": undefined,
                    "type": "root.Region",
                  },
                },
              },
              "headers": undefined,
              "name": "CreateRoomRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "",
              "type": "root.RoomId",
            },
          },
          "DestroyRoom": {
            "auth": true,
            "method": "POST",
            "path": "/rooms/v1/{appId}/destroy/{roomId}",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
              "roomId": {
                "docs": undefined,
                "type": "root.RoomId",
              },
            },
          },
          "GetActiveRoomsForProcess": {
            "auth": true,
            "method": "GET",
            "path": "/rooms/v1/{appId}/list/{processId}/active",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
              "processId": {
                "docs": undefined,
                "type": "root.ProcessId",
              },
            },
            "response": {
              "docs": "Ok",
              "type": "list<root.RoomWithoutAllocations>",
            },
          },
          "GetConnectionInfo": {
            "auth": true,
            "method": "GET",
            "path": "/rooms/v1/{appId}/connectioninfo/{roomId}",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
              "roomId": {
                "docs": undefined,
                "type": "root.RoomId",
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.ConnectionInfo",
            },
          },
          "GetInactiveRoomsForProcess": {
            "auth": true,
            "method": "GET",
            "path": "/rooms/v1/{appId}/list/{processId}/inactive",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
              "processId": {
                "docs": undefined,
                "type": "root.ProcessId",
              },
            },
            "response": {
              "docs": "Ok",
              "type": "list<root.RoomWithoutAllocations>",
            },
          },
          "GetRoomInfo": {
            "auth": true,
            "method": "GET",
            "path": "/rooms/v1/{appId}/info/{roomId}",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
              "roomId": {
                "docs": undefined,
                "type": "root.RoomId",
              },
            },
            "response": {
              "docs": "Ok",
              "type": "root.Room",
            },
          },
          "SuspendRoom": {
            "auth": true,
            "method": "POST",
            "path": "/rooms/v1/{appId}/suspend/{roomId}",
            "path-parameters": {
              "appId": {
                "docs": undefined,
                "type": "root.AppId",
              },
              "roomId": {
                "docs": undefined,
                "type": "root.RoomId",
              },
            },
          },
        },
      },
    },
  },
  "rootApiFile": {
    "auth": "bearer",
    "display-name": "Hathora Cloud API",
    "error-discrimination": {
      "strategy": "status-code",
    },
    "headers": {},
    "name": "api",
  },
}
`;

exports[`open api converter hume simple 1`] = `
{
  "definitionFiles": {
    "1StartJob.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "startJob": {
            "auth": false,
            "method": "POST",
            "path": "/v0/batch/jobs",
            "request": {
              "body": {
                "properties": {
                  "callback_url": {
                    "docs": "If provided, a \`POST\` request will be made to the URL with the generated predictions on completion or the error message on failure.",
                    "type": "optional<string>",
                  },
                  "models": {
                    "docs": undefined,
                    "type": "optional<root.Models>",
                  },
                  "notify": {
                    "docs": "Whether to send an email notification to the user upon job completion/failure.",
                    "type": "optional<boolean>",
                  },
                  "transcription": {
                    "docs": undefined,
                    "type": "optional<root.Transcription>",
                  },
                  "urls": {
                    "docs": "URLs to the media files to be processed. Each must be a valid public URL to a media file (see recommended input filetypes) or an archive (\`.zip\`, \`.tar.gz\`, \`.tar.bz2\`, \`.tar.xz\`) of media files.

If you wish to supply more than 100 URLs, consider providing them as an archive (\`.zip\`, \`.tar.gz\`, \`.tar.bz2\`, \`.tar.xz\`).",
                    "type": "optional<list<string>>",
                  },
                },
              },
              "headers": undefined,
              "name": "BaseRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "",
              "type": "root.JobId",
            },
          },
        },
      },
    },
    "2GetJobPredictions.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "getJobArtifacts": {
            "auth": false,
            "method": "GET",
            "path": "/v0/batch/jobs/{id}/artifacts",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "",
              "type": "file",
            },
          },
          "getJobDetails": {
            "auth": false,
            "method": "GET",
            "path": "/v0/batch/jobs/{id}",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "",
              "type": "root.JobRequest",
            },
          },
          "getJobPredictions": {
            "auth": false,
            "method": "GET",
            "path": "/v0/batch/jobs/{id}/predictions",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "",
              "type": "list<root.SourceResult>",
            },
          },
        },
      },
    },
    "3ListJobs.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "listJobs": {
            "auth": false,
            "method": "GET",
            "path": "/v0/batch/jobs",
            "request": {
              "name": "ListJobsRequest",
              "query-parameters": {
                "direction": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.Direction>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "sort_by": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.SortBy>",
                },
                "status": {
                  "allow-multiple": true,
                  "docs": undefined,
                  "type": "optional<root.Status>",
                },
                "timestamp_ms": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "when": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.When>",
                },
              },
            },
            "response": {
              "docs": "",
              "type": "list<root.JobRequest>",
            },
          },
        },
      },
    },
    "__package__.yml": {
      "service": undefined,
      "types": {
        "Bcp47Tag": {
          "docs": undefined,
          "enum": [
            {
              "name": "zh",
              "value": "zh",
            },
            {
              "name": "da",
              "value": "da",
            },
            {
              "name": "nl",
              "value": "nl",
            },
            {
              "name": "en",
              "value": "en",
            },
            {
              "name": "EnAu",
              "value": "en-AU",
            },
            {
              "name": "EnIn",
              "value": "en-IN",
            },
            {
              "name": "EnNz",
              "value": "en-NZ",
            },
            {
              "name": "EnGb",
              "value": "en-GB",
            },
            {
              "name": "fr",
              "value": "fr",
            },
            {
              "name": "FrCa",
              "value": "fr-CA",
            },
            {
              "name": "de",
              "value": "de",
            },
            {
              "name": "hi",
              "value": "hi",
            },
            {
              "name": "HiLatn",
              "value": "hi-Latn",
            },
            {
              "name": "id",
              "value": "id",
            },
            {
              "name": "it",
              "value": "it",
            },
            {
              "name": "ja",
              "value": "ja",
            },
            {
              "name": "ko",
              "value": "ko",
            },
            {
              "name": "no",
              "value": "no",
            },
            {
              "name": "pl",
              "value": "pl",
            },
            {
              "name": "pt",
              "value": "pt",
            },
            {
              "name": "PtBr",
              "value": "pt-BR",
            },
            {
              "name": "PtPt",
              "value": "pt-PT",
            },
            {
              "name": "ru",
              "value": "ru",
            },
            {
              "name": "es",
              "value": "es",
            },
            {
              "name": "Es419",
              "value": "es-419",
            },
            {
              "name": "sv",
              "value": "sv",
            },
            {
              "name": "ta",
              "value": "ta",
            },
            {
              "name": "tr",
              "value": "tr",
            },
            {
              "name": "uk",
              "value": "uk",
            },
          ],
        },
        "BoundingBox": {
          "docs": "A bounding box around a face.",
          "properties": {
            "h": {
              "docs": "Bounding box height.",
              "type": "double",
            },
            "w": {
              "docs": "Bounding box width.",
              "type": "double",
            },
            "x": {
              "docs": "x-coordinate of bounding box top left corner.",
              "type": "double",
            },
            "y": {
              "docs": "y-coordinate of bounding box top left corner.",
              "type": "double",
            },
          },
        },
        "BurstPrediction": {
          "docs": undefined,
          "properties": {
            "descriptions": {
              "docs": "Modality-specific descriptive features and their scores.",
              "type": "list<DescriptionsScore>",
            },
            "emotions": {
              "docs": "A high-dimensional embedding in emotion space.",
              "type": "list<EmotionScore>",
            },
            "time": {
              "docs": undefined,
              "type": "TimeInterval",
            },
          },
        },
        "Completed": {
          "docs": undefined,
          "properties": {
            "created_timestamp_ms": {
              "docs": "When this job was created (Unix timestamp in milliseconds).",
              "type": "integer",
            },
            "ended_timestamp_ms": {
              "docs": "When this job ended (Unix timestamp in milliseconds).",
              "type": "integer",
            },
            "num_errors": {
              "docs": "The number of errors that occurred while running this job.",
              "type": "integer",
            },
            "num_predictions": {
              "docs": "The number of predictions that were generated by this job.",
              "type": "integer",
            },
            "started_timestamp_ms": {
              "docs": "When this job started (Unix timestamp in milliseconds).",
              "type": "integer",
            },
          },
        },
        "DescriptionsScore": {
          "docs": undefined,
          "properties": {
            "name": {
              "docs": "Name of the descriptive feature being expressed.",
              "type": "string",
            },
            "score": {
              "docs": "Embedding value for the descriptive feature being expressed.",
              "type": "string",
            },
          },
        },
        "Direction": {
          "docs": undefined,
          "enum": [
            {
              "name": "asc",
              "value": "asc",
            },
            {
              "name": "desc",
              "value": "desc",
            },
          ],
        },
        "EmotionScore": {
          "docs": undefined,
          "properties": {
            "name": {
              "docs": "Name of the emotion being expressed.",
              "type": "string",
            },
            "score": {
              "docs": "Embedding value for the emotion being expressed.",
              "type": "string",
            },
          },
        },
        "Empty": {
          "docs": "To include predictions for this model type, set this field to \`{}\`. It is currently not configurable further.",
          "type": "map<string, unknown>",
        },
        "Error": {
          "docs": undefined,
          "properties": {
            "file": {
              "docs": "A file path relative to the top level source URL or file.",
              "type": "string",
            },
            "message": {
              "docs": "An error message.",
              "type": "string",
            },
          },
        },
        "Face": {
          "docs": undefined,
          "properties": {
            "descriptions": {
              "docs": undefined,
              "type": "optional<Empty>",
            },
            "facs": {
              "docs": undefined,
              "type": "optional<Empty>",
            },
            "fps_pred": {
              "docs": "Number of frames per second to process. Other frames will be omitted from the response. Set to \`0\` to process every frame.",
              "type": "optional<double>",
            },
            "identify_faces": {
              "docs": "Whether to return identifiers for faces across frames. If \`true\`, unique identifiers will be assigned to face bounding boxes to differentiate different faces. If \`false\`, all faces will be tagged with an \`unknown\` ID.",
              "type": "optional<boolean>",
            },
            "min_face_size": {
              "docs": "Minimum bounding box side length in pixels to treat as a face. Faces detected with a bounding box side length in pixels less than this threshold will be omitted from the response.",
              "type": "optional<integer>",
            },
            "prob_threshold": {
              "docs": "Face detection probability threshold. Faces detected with a probability less than this threshold will be omitted from the response.",
              "type": "optional<double>",
            },
            "save_faces": {
              "docs": "Whether to extract and save the detected faces in the artifacts zip created by each job.",
              "type": "optional<boolean>",
            },
          },
        },
        "FacePrediction": {
          "docs": undefined,
          "properties": {
            "box": {
              "docs": undefined,
              "type": "BoundingBox",
            },
            "descriptions": {
              "docs": "Modality-specific descriptive features and their scores.",
              "type": "optional<list<DescriptionsScore>>",
            },
            "emotions": {
              "docs": "A high-dimensional embedding in emotion space.",
              "type": "list<EmotionScore>",
            },
            "facs": {
              "docs": "FACS 2.0 features and their scores.",
              "type": "optional<list<FacsScore>>",
            },
            "frame": {
              "docs": "Frame number",
              "type": "integer",
            },
            "prob": {
              "docs": "The predicted probability that a detected face was actually a face.",
              "type": "double",
            },
            "time": {
              "docs": "Time in seconds when face detection occurred.",
              "type": "double",
            },
          },
        },
        "FacemeshPrediction": {
          "docs": undefined,
          "properties": {
            "emotions": {
              "docs": "A high-dimensional embedding in emotion space.",
              "type": "list<EmotionScore>",
            },
          },
        },
        "FacsScore": {
          "docs": undefined,
          "properties": {
            "name": {
              "docs": "Name of the FACS 2.0 feature being expressed.",
              "type": "string",
            },
            "score": {
              "docs": "Embedding value for the FACS 2.0 feature being expressed.",
              "type": "string",
            },
          },
        },
        "Failed": {
          "docs": undefined,
          "properties": {
            "created_timestamp_ms": {
              "docs": "When this job was created (Unix timestamp in milliseconds).",
              "type": "integer",
            },
            "ended_timestamp_ms": {
              "docs": "When this job ended (Unix timestamp in milliseconds).",
              "type": "integer",
            },
            "message": {
              "docs": "An error message.",
              "type": "string",
            },
            "started_timestamp_ms": {
              "docs": "When this job started (Unix timestamp in milliseconds).",
              "type": "integer",
            },
          },
        },
        "File": {
          "docs": undefined,
          "properties": {
            "content_type": {
              "docs": "The content type of the file.",
              "type": "optional<string>",
            },
            "filename": {
              "docs": "The name of the file.",
              "type": "optional<string>",
            },
            "md5sum": {
              "docs": "The MD5 checksum of the file.",
              "type": "string",
            },
          },
        },
        "Granularity": {
          "docs": "The granularity at which to generate predictions. \`utterance\` corresponds to a natural pause or break in conversation, while \`conversational_turn\` corresponds to a change in speaker.",
          "enum": [
            {
              "name": "word",
              "value": "word",
            },
            {
              "name": "sentence",
              "value": "sentence",
            },
            {
              "name": "utterance",
              "value": "utterance",
            },
            {
              "name": "conversational_turn",
              "value": "conversational_turn",
            },
          ],
        },
        "GroupedPredictionsBurstPrediction": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": "An automatically generated label to identify individuals in your media file. Will be \`unknown\` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
              "type": "string",
            },
            "predictions": {
              "docs": undefined,
              "type": "list<BurstPrediction>",
            },
          },
        },
        "GroupedPredictionsFacePrediction": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": "An automatically generated label to identify individuals in your media file. Will be \`unknown\` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
              "type": "string",
            },
            "predictions": {
              "docs": undefined,
              "type": "list<FacePrediction>",
            },
          },
        },
        "GroupedPredictionsFacemeshPrediction": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": "An automatically generated label to identify individuals in your media file. Will be \`unknown\` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
              "type": "string",
            },
            "predictions": {
              "docs": undefined,
              "type": "list<FacemeshPrediction>",
            },
          },
        },
        "GroupedPredictionsLanguagePrediction": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": "An automatically generated label to identify individuals in your media file. Will be \`unknown\` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
              "type": "string",
            },
            "predictions": {
              "docs": undefined,
              "type": "list<LanguagePrediction>",
            },
          },
        },
        "GroupedPredictionsNerPrediction": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": "An automatically generated label to identify individuals in your media file. Will be \`unknown\` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
              "type": "string",
            },
            "predictions": {
              "docs": undefined,
              "type": "list<NerPrediction>",
            },
          },
        },
        "GroupedPredictionsProsodyPrediction": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": "An automatically generated label to identify individuals in your media file. Will be \`unknown\` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
              "type": "string",
            },
            "predictions": {
              "docs": undefined,
              "type": "list<ProsodyPrediction>",
            },
          },
        },
        "InProgress": {
          "docs": undefined,
          "properties": {
            "created_timestamp_ms": {
              "docs": "When this job was created (Unix timestamp in milliseconds).",
              "type": "integer",
            },
            "started_timestamp_ms": {
              "docs": "When this job started (Unix timestamp in milliseconds).",
              "type": "integer",
            },
          },
        },
        "JobId": {
          "docs": undefined,
          "properties": {
            "job_id": {
              "docs": "The ID of the started job.",
              "type": "string",
            },
          },
        },
        "JobRequest": {
          "docs": undefined,
          "properties": {
            "job_id": {
              "docs": undefined,
              "type": "string",
            },
            "request": {
              "docs": undefined,
              "type": "Request",
            },
            "state": {
              "docs": undefined,
              "type": "State",
            },
            "user_id": {
              "docs": undefined,
              "type": "string",
            },
          },
        },
        "Language": {
          "docs": undefined,
          "properties": {
            "granularity": {
              "docs": undefined,
              "type": "optional<Granularity>",
            },
            "identify_speakers": {
              "docs": "Whether to return identifiers for speakers over time. If \`true\`, unique identifiers will be assigned to spoken words to differentiate different speakers. If \`false\`, all speakers will be tagged with an \`unknown\` ID.",
              "type": "optional<boolean>",
            },
            "sentiment": {
              "docs": undefined,
              "type": "optional<Empty>",
            },
            "toxicity": {
              "docs": undefined,
              "type": "optional<Empty>",
            },
          },
        },
        "LanguagePrediction": {
          "docs": undefined,
          "properties": {
            "confidence": {
              "docs": "Value between \`0.0\` and \`1.0\` that indicates our transcription model’s relative confidence in this text.",
              "type": "optional<double>",
            },
            "emotions": {
              "docs": "A high-dimensional embedding in emotion space.",
              "type": "list<EmotionScore>",
            },
            "position": {
              "docs": undefined,
              "type": "PositionInterval",
            },
            "sentiment": {
              "docs": "Sentiment predictions returned as a distribution. This model predicts the probability that a given text could be interpreted as having each sentiment level from \`1\` (negative) to \`9\` (positive).

Compared to returning one estimate of sentiment, this enables a more nuanced analysis of a text's meaning. For example, a text with very neutral sentiment would have an average rating of \`5\`. But also a text that could be interpreted as having very positive sentiment or very negative sentiment would also have an average rating of \`5\`. The average sentiment is less informative than the distribution over sentiment, so this API returns a value for each sentiment level.",
              "type": "optional<list<SentimentScore>>",
            },
            "speaker_confidence": {
              "docs": "Value between \`0.0\` and \`1.0\` that indicates our transcription model’s relative confidence that this text was spoken by this speaker.",
              "type": "optional<double>",
            },
            "text": {
              "docs": "A segment of text (like a word or a sentence).",
              "type": "string",
            },
            "time": {
              "docs": undefined,
              "type": "optional<TimeInterval>",
            },
            "toxicity": {
              "docs": "Toxicity predictions returned as probabilities that the text can be classified into the following categories: \`toxic\`, \`severe_toxic\`, \`obscene\`, \`threat\`, \`insult\`, and \`identity_hate\`.",
              "type": "optional<list<ToxicityScore>>",
            },
          },
        },
        "Models": {
          "docs": undefined,
          "properties": {
            "burst": {
              "docs": undefined,
              "type": "optional<Empty>",
            },
            "face": {
              "docs": undefined,
              "type": "optional<Face>",
            },
            "facemesh": {
              "docs": undefined,
              "type": "optional<Empty>",
            },
            "language": {
              "docs": undefined,
              "type": "optional<Language>",
            },
            "ner": {
              "docs": undefined,
              "type": "optional<Ner>",
            },
            "prosody": {
              "docs": undefined,
              "type": "optional<Prosody>",
            },
          },
        },
        "ModelsPredictions": {
          "docs": undefined,
          "properties": {
            "burst": {
              "docs": undefined,
              "type": "optional<PredictionsOptionalNullBurstPrediction>",
            },
            "face": {
              "docs": undefined,
              "type": "optional<PredictionsOptionalNullFacePrediction>",
            },
            "facemesh": {
              "docs": undefined,
              "type": "optional<PredictionsOptionalNullFacemeshPrediction>",
            },
            "language": {
              "docs": undefined,
              "type": "optional<PredictionsOptionalTranscriptionMetadataLanguagePrediction>",
            },
            "ner": {
              "docs": undefined,
              "type": "optional<PredictionsOptionalTranscriptionMetadataNerPrediction>",
            },
            "prosody": {
              "docs": undefined,
              "type": "optional<PredictionsOptionalTranscriptionMetadataProsodyPrediction>",
            },
          },
        },
        "Ner": {
          "docs": undefined,
          "properties": {
            "identify_speakers": {
              "docs": "Whether to return identifiers for speakers over time. If \`true\`, unique identifiers will be assigned to spoken words to differentiate different speakers. If \`false\`, all speakers will be tagged with an \`unknown\` ID.",
              "type": "optional<boolean>",
            },
          },
        },
        "NerPrediction": {
          "docs": undefined,
          "properties": {
            "confidence": {
              "docs": "Value between \`0.0\` and \`1.0\` that indicates our transcription model’s relative confidence in this text.",
              "type": "optional<double>",
            },
            "emotions": {
              "docs": "A high-dimensional embedding in emotion space.",
              "type": "list<EmotionScore>",
            },
            "entity": {
              "docs": "The recognized topic or entity.",
              "type": "string",
            },
            "entity_confidence": {
              "docs": "Our NER model's relative confidence in the recognized topic or entity.",
              "type": "double",
            },
            "link_word": {
              "docs": "The specific word to which the emotion predictions are linked.",
              "type": "string",
            },
            "position": {
              "docs": undefined,
              "type": "PositionInterval",
            },
            "speaker_confidence": {
              "docs": "Value between \`0.0\` and \`1.0\` that indicates our transcription model’s relative confidence that this text was spoken by this speaker.",
              "type": "optional<double>",
            },
            "support": {
              "docs": "A measure of how often the entity is linked to by other entities.",
              "type": "double",
            },
            "time": {
              "docs": undefined,
              "type": "optional<TimeInterval>",
            },
            "uri": {
              "docs": "A URL which provides more information about the recognized topic or entity.",
              "type": "string",
            },
          },
        },
        "Null": {
          "docs": "No associated metadata for this model. Value will be \`null\`.",
          "type": "map<string, unknown>",
        },
        "PositionInterval": {
          "docs": "Position of a segment of text within a larger document, measured in characters. Uses zero-based indexing. The beginning index is inclusive and the end index is exclusive.",
          "properties": {
            "begin": {
              "docs": "The index of the first character in the text segment, inclusive.",
              "type": "integer",
            },
            "end": {
              "docs": "The index of the last character in the text segment, exclusive.",
              "type": "integer",
            },
          },
        },
        "Prediction": {
          "docs": undefined,
          "properties": {
            "file": {
              "docs": "A file path relative to the top level source URL or file.",
              "type": "string",
            },
            "models": {
              "docs": undefined,
              "type": "ModelsPredictions",
            },
          },
        },
        "PredictionsOptionalNullBurstPrediction": {
          "docs": undefined,
          "properties": {
            "grouped_predictions": {
              "docs": undefined,
              "type": "list<GroupedPredictionsBurstPrediction>",
            },
            "metadata": {
              "docs": undefined,
              "type": "optional<Null>",
            },
          },
        },
        "PredictionsOptionalNullFacePrediction": {
          "docs": undefined,
          "properties": {
            "grouped_predictions": {
              "docs": undefined,
              "type": "list<GroupedPredictionsFacePrediction>",
            },
            "metadata": {
              "docs": undefined,
              "type": "optional<Null>",
            },
          },
        },
        "PredictionsOptionalNullFacemeshPrediction": {
          "docs": undefined,
          "properties": {
            "grouped_predictions": {
              "docs": undefined,
              "type": "list<GroupedPredictionsFacemeshPrediction>",
            },
            "metadata": {
              "docs": undefined,
              "type": "optional<Null>",
            },
          },
        },
        "PredictionsOptionalTranscriptionMetadataLanguagePrediction": {
          "docs": undefined,
          "properties": {
            "grouped_predictions": {
              "docs": undefined,
              "type": "list<GroupedPredictionsLanguagePrediction>",
            },
            "metadata": {
              "docs": undefined,
              "type": "optional<TranscriptionMetadata>",
            },
          },
        },
        "PredictionsOptionalTranscriptionMetadataNerPrediction": {
          "docs": undefined,
          "properties": {
            "grouped_predictions": {
              "docs": undefined,
              "type": "list<GroupedPredictionsNerPrediction>",
            },
            "metadata": {
              "docs": undefined,
              "type": "optional<TranscriptionMetadata>",
            },
          },
        },
        "PredictionsOptionalTranscriptionMetadataProsodyPrediction": {
          "docs": undefined,
          "properties": {
            "grouped_predictions": {
              "docs": undefined,
              "type": "list<GroupedPredictionsProsodyPrediction>",
            },
            "metadata": {
              "docs": undefined,
              "type": "optional<TranscriptionMetadata>",
            },
          },
        },
        "Prosody": {
          "docs": "NOTE: the \`granularity\` field is ignored if transcription is not enabled or if the \`window\` field has been set.",
          "properties": {
            "granularity": {
              "docs": undefined,
              "type": "optional<Granularity>",
            },
            "identify_speakers": {
              "docs": "Whether to return identifiers for speakers over time. If \`true\`, unique identifiers will be assigned to spoken words to differentiate different speakers. If \`false\`, all speakers will be tagged with an \`unknown\` ID.",
              "type": "optional<boolean>",
            },
            "window": {
              "docs": undefined,
              "type": "optional<Window>",
            },
          },
        },
        "ProsodyPrediction": {
          "docs": undefined,
          "properties": {
            "confidence": {
              "docs": "Value between \`0.0\` and \`1.0\` that indicates our transcription model’s relative confidence in this text.",
              "type": "optional<double>",
            },
            "emotions": {
              "docs": "A high-dimensional embedding in emotion space.",
              "type": "list<EmotionScore>",
            },
            "speaker_confidence": {
              "docs": "Value between \`0.0\` and \`1.0\` that indicates our transcription model’s relative confidence that this text was spoken by this speaker.",
              "type": "optional<double>",
            },
            "text": {
              "docs": "A segment of text (like a word or a sentence).",
              "type": "optional<string>",
            },
            "time": {
              "docs": undefined,
              "type": "TimeInterval",
            },
          },
        },
        "Queued": {
          "docs": undefined,
          "properties": {
            "created_timestamp_ms": {
              "docs": "When this job was created (Unix timestamp in milliseconds).",
              "type": "integer",
            },
          },
        },
        "Request": {
          "docs": undefined,
          "properties": {
            "callback_url": {
              "docs": "If provided, a \`POST\` request will be made to the URL with the generated predictions on completion or the error message on failure.",
              "type": "optional<string>",
            },
            "files": {
              "docs": undefined,
              "type": "list<File>",
            },
            "models": {
              "docs": undefined,
              "type": "optional<Models>",
            },
            "notify": {
              "docs": "Whether to send an email notification to the user upon job completion/failure.",
              "type": "optional<boolean>",
            },
            "transcription": {
              "docs": undefined,
              "type": "optional<Transcription>",
            },
            "urls": {
              "docs": "URLs to the media files to be processed. Each must be a valid public URL to a media file (see recommended input filetypes) or an archive (\`.zip\`, \`.tar.gz\`, \`.tar.bz2\`, \`.tar.xz\`) of media files.

If you wish to supply more than 100 URLs, consider providing them as an archive (\`.zip\`, \`.tar.gz\`, \`.tar.bz2\`, \`.tar.xz\`).",
              "type": "optional<list<string>>",
            },
          },
        },
        "Results": {
          "docs": undefined,
          "properties": {
            "errors": {
              "docs": undefined,
              "type": "list<Error>",
            },
            "predictions": {
              "docs": undefined,
              "type": "list<Prediction>",
            },
          },
        },
        "SentimentScore": {
          "docs": undefined,
          "properties": {
            "name": {
              "docs": "Level of sentiment, ranging from \`1\` (negative) to \`9\` (positive)",
              "type": "string",
            },
            "score": {
              "docs": "Prediction for this level of sentiment",
              "type": "string",
            },
          },
        },
        "SortBy": {
          "docs": undefined,
          "enum": [
            {
              "name": "created",
              "value": "created",
            },
            {
              "name": "started",
              "value": "started",
            },
            {
              "name": "ended",
              "value": "ended",
            },
          ],
        },
        "Source": {
          "base-properties": {},
          "docs": undefined,
          "union": {
            "file": {
              "docs": undefined,
              "type": "SourceFile",
            },
            "url": {
              "docs": undefined,
              "type": "SourceUrl",
            },
          },
        },
        "SourceFile": {
          "docs": undefined,
          "type": "File",
        },
        "SourceResult": {
          "docs": undefined,
          "properties": {
            "error": {
              "docs": "An error message.",
              "type": "optional<string>",
            },
            "results": {
              "docs": undefined,
              "type": "optional<Results>",
            },
            "source": {
              "docs": undefined,
              "type": "Source",
            },
          },
        },
        "SourceUrl": {
          "docs": undefined,
          "type": "Url",
        },
        "State": {
          "base-properties": {},
          "docs": undefined,
          "union": {
            "COMPLETED": {
              "docs": undefined,
              "type": "StateCompleted",
            },
            "FAILED": {
              "docs": undefined,
              "type": "StateFailed",
            },
            "IN_PROGRESS": {
              "docs": undefined,
              "type": "StateInProgress",
            },
            "QUEUED": {
              "docs": undefined,
              "type": "StateQueued",
            },
          },
        },
        "StateCompleted": {
          "docs": undefined,
          "properties": {
            "status": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "StateFailed": {
          "docs": undefined,
          "properties": {
            "status": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "StateInProgress": {
          "docs": undefined,
          "properties": {
            "status": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "StateQueued": {
          "docs": undefined,
          "properties": {
            "status": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "Status": {
          "docs": undefined,
          "enum": [
            {
              "name": "QUEUED",
              "value": "QUEUED",
            },
            {
              "name": "IN_PROGRESS",
              "value": "IN_PROGRESS",
            },
            {
              "name": "COMPLETED",
              "value": "COMPLETED",
            },
            {
              "name": "FAILED",
              "value": "FAILED",
            },
          ],
        },
        "TimeInterval": {
          "docs": "A time range with a beginning and end, measured in seconds.",
          "properties": {
            "begin": {
              "docs": "Beginning of time range in seconds.",
              "type": "double",
            },
            "end": {
              "docs": "End of time range in seconds.",
              "type": "double",
            },
          },
        },
        "ToxicityScore": {
          "docs": undefined,
          "properties": {
            "name": {
              "docs": "Category of toxicity.",
              "type": "string",
            },
            "score": {
              "docs": "Prediction for this category of toxicity",
              "type": "string",
            },
          },
        },
        "Transcription": {
          "docs": undefined,
          "properties": {
            "language": {
              "docs": undefined,
              "type": "optional<Bcp47Tag>",
            },
          },
        },
        "TranscriptionMetadata": {
          "docs": "Transcription metadata for your media file.",
          "properties": {
            "confidence": {
              "docs": "Value between \`0.0\` and \`1.0\` indicating our transcription model’s relative confidence in the transcription of your media file.",
              "type": "double",
            },
            "detected_language": {
              "docs": undefined,
              "type": "optional<Bcp47Tag>",
            },
          },
        },
        "Url": {
          "docs": undefined,
          "properties": {
            "url": {
              "docs": "The URL of the source media file.",
              "type": "string",
            },
          },
        },
        "When": {
          "docs": undefined,
          "enum": [
            {
              "name": "created_before",
              "value": "created_before",
            },
            {
              "name": "created_after",
              "value": "created_after",
            },
          ],
        },
        "Window": {
          "docs": undefined,
          "properties": {
            "length": {
              "docs": "The length of the sliding window.",
              "type": "optional<double>",
            },
            "step": {
              "docs": "The step size of the sliding window.",
              "type": "optional<double>",
            },
          },
        },
      },
    },
  },
  "rootApiFile": {
    "default-environment": "default",
    "display-name": "Hume AI Batch API",
    "environments": {
      "default": "https://api.hume.ai",
    },
    "error-discrimination": {
      "strategy": "status-code",
    },
    "headers": {},
    "name": "api",
  },
}
`;

exports[`open api converter squidex simple 1`] = `
{
  "definitionFiles": {
    "__package__.yml": {
      "service": undefined,
      "types": {
        "ActionTypeEnum": {
          "docs": "",
          "enum": [
            {
              "name": "Broadcast",
              "value": "Broadcast",
            },
            {
              "name": "User",
              "value": "User",
            },
            {
              "name": "Group",
              "value": "Group",
            },
          ],
        },
        "AddFieldDto": {
          "docs": undefined,
          "properties": {
            "name": {
              "docs": "The name of the field. Must be unique within the schema.",
              "type": "string",
            },
            "partitioning": {
              "docs": "Determines the optional partitioning of the field.",
              "type": "optional<string>",
            },
            "properties": {
              "docs": undefined,
              "type": "FieldPropertiesDto",
            },
          },
        },
        "AlgoliaRuleActionDto": {
          "docs": undefined,
          "properties": {
            "apiKey": {
              "docs": "The API key to grant access to Squidex.",
              "type": "optional<string>",
            },
            "appId": {
              "docs": "The application ID.",
              "type": "optional<string>",
            },
            "delete": {
              "docs": "The condition when to delete the entry.",
              "type": "optional<string>",
            },
            "document": {
              "docs": "The optional custom document.",
              "type": "optional<string>",
            },
            "indexName": {
              "docs": "The name of the index.",
              "type": "optional<string>",
            },
          },
        },
        "AllContentsByPostDto": {
          "docs": undefined,
          "properties": {
            "ids": {
              "docs": "The list of ids to query.",
              "type": "optional<list<string>>",
            },
            "oData": {
              "docs": "The optional odata query.",
              "type": "optional<string>",
            },
            "q": "unknown",
            "references": {
              "docs": "The ID of the reference content item.",
              "type": "optional<string>",
            },
            "referencing": {
              "docs": "The ID of the referencing content item.",
              "type": "optional<string>",
            },
            "scheduledFrom": {
              "docs": "The start of the schedule.",
              "type": "optional<string>",
            },
            "scheduledTo": {
              "docs": "The end of the schedule.",
              "type": "optional<string>",
            },
          },
        },
        "AppDto": {
          "docs": undefined,
          "properties": {
            "canAccessApi": {
              "docs": "Indicates if the user can access the api.",
              "type": "optional<boolean>",
            },
            "canAccessContent": {
              "docs": "Indicates if the user can access at least one content.",
              "type": "optional<boolean>",
            },
            "created": {
              "docs": "The timestamp when the app has been created.",
              "type": "optional<string>",
            },
            "description": {
              "docs": "The optional description of the app.",
              "type": "optional<string>",
            },
            "id": {
              "docs": "The ID of the app.",
              "type": "optional<string>",
            },
            "label": {
              "docs": "The optional label of the app.",
              "type": "optional<string>",
            },
            "lastModified": {
              "docs": "The timestamp when the app has been modified last.",
              "type": "optional<string>",
            },
            "name": {
              "docs": "The name of the app.",
              "type": "optional<string>",
            },
            "permissions": {
              "docs": "The permission level of the user.",
              "type": "optional<list<string>>",
            },
            "roleName": {
              "docs": "The role name of the user.",
              "type": "optional<string>",
            },
            "roleProperties": {
              "docs": "The properties from the role.",
              "type": "optional<map<string, unknown>>",
            },
            "teamId": {
              "docs": "The ID of the team.",
              "type": "optional<string>",
            },
            "version": {
              "docs": "The version of the app.",
              "type": "optional<integer>",
            },
          },
        },
        "AppLanguageDto": {
          "docs": undefined,
          "properties": {
            "englishName": {
              "docs": "The english name of the language.",
              "type": "optional<string>",
            },
            "fallback": {
              "docs": "The fallback languages.",
              "type": "optional<list<string>>",
            },
            "isMaster": {
              "docs": "Indicates if the language is the master language.",
              "type": "optional<boolean>",
            },
            "isOptional": {
              "docs": "Indicates if the language is optional.",
              "type": "optional<boolean>",
            },
            "iso2Code": {
              "docs": "The iso code of the language.",
              "type": "optional<string>",
            },
          },
        },
        "AppLanguagesDto": {
          "docs": undefined,
          "properties": {
            "items": {
              "docs": "The languages.",
              "type": "optional<list<AppLanguageDto>>",
            },
          },
        },
        "AppSettingsDto": {
          "docs": undefined,
          "properties": {
            "editors": {
              "docs": "The configured UI editors.",
              "type": "optional<list<EditorDto>>",
            },
            "hideDateTimeModeButton": {
              "docs": "Hide the datetime mode button.",
              "type": "optional<boolean>",
            },
            "hideScheduler": {
              "docs": "Hide the scheduler for content items.",
              "type": "optional<boolean>",
            },
            "patterns": {
              "docs": "The configured app patterns.",
              "type": "optional<list<PatternDto>>",
            },
            "version": {
              "docs": "The version of the app.",
              "type": "optional<integer>",
            },
          },
        },
        "ArrayFieldPropertiesDto": {
          "docs": undefined,
          "properties": {
            "maxItems": {
              "docs": "The maximum allowed items for the field value.",
              "type": "optional<integer>",
            },
            "minItems": {
              "docs": "The minimum allowed items for the field value.",
              "type": "optional<integer>",
            },
            "uniqueFields": {
              "docs": "The fields that must be unique.",
              "type": "optional<list<string>>",
            },
          },
        },
        "AssetChangedRuleTriggerDto": {
          "docs": undefined,
          "properties": {
            "condition": {
              "docs": "Javascript condition when to trigger.",
              "type": "optional<string>",
            },
          },
        },
        "AssetDto": {
          "docs": undefined,
          "properties": {
            "_meta": {
              "docs": undefined,
              "type": "optional<AssetMeta>",
            },
            "created": {
              "docs": "The date and time when the asset has been created.",
              "type": "optional<string>",
            },
            "createdBy": {
              "docs": "The user that has created the schema.",
              "type": "optional<string>",
            },
            "editToken": {
              "docs": "The UI token.",
              "type": "optional<string>",
            },
            "fileHash": {
              "docs": "The file hash.",
              "type": "optional<string>",
            },
            "fileName": {
              "docs": "The file name.",
              "type": "optional<string>",
            },
            "fileSize": {
              "docs": "The size of the file in bytes.",
              "type": "optional<integer>",
            },
            "fileType": {
              "docs": "The file type.",
              "type": "optional<string>",
            },
            "fileVersion": {
              "docs": "The version of the file.",
              "type": "optional<integer>",
            },
            "id": {
              "docs": "The ID of the asset.",
              "type": "optional<string>",
            },
            "isImage": {
              "docs": "Determines of the created file is an image.",
              "type": "optional<boolean>",
            },
            "isProtected": {
              "docs": "True, when the asset is not public.",
              "type": "optional<boolean>",
            },
            "lastModified": {
              "docs": "The date and time when the asset has been modified last.",
              "type": "optional<string>",
            },
            "lastModifiedBy": {
              "docs": "The user that has updated the asset.",
              "type": "optional<string>",
            },
            "metadata": {
              "docs": "The asset metadata.",
              "type": "optional<map<string, unknown>>",
            },
            "metadataText": {
              "docs": "The formatted text representation of the metadata.",
              "type": "optional<string>",
            },
            "mimeType": {
              "docs": "The mime type.",
              "type": "optional<string>",
            },
            "parentId": {
              "docs": "The ID of the parent folder. Empty for files without parent.",
              "type": "optional<string>",
            },
            "pixelHeight": {
              "docs": "The height of the image in pixels if the asset is an image.",
              "type": "optional<integer>",
            },
            "pixelWidth": {
              "docs": "The width of the image in pixels if the asset is an image.",
              "type": "optional<integer>",
            },
            "slug": {
              "docs": "The slug.",
              "type": "optional<string>",
            },
            "tags": {
              "docs": "The asset tags.",
              "type": "optional<list<string>>",
            },
            "type": {
              "docs": undefined,
              "type": "optional<AssetType>",
            },
            "version": {
              "docs": "The version of the asset.",
              "type": "optional<integer>",
            },
          },
        },
        "AssetFolderDto": {
          "docs": undefined,
          "properties": {
            "folderName": {
              "docs": "The folder name.",
              "type": "optional<string>",
            },
            "id": {
              "docs": "The ID of the asset.",
              "type": "optional<string>",
            },
            "parentId": {
              "docs": "The ID of the parent folder. Empty for files without parent.",
              "type": "optional<string>",
            },
            "version": {
              "docs": "The version of the asset folder.",
              "type": "optional<integer>",
            },
          },
        },
        "AssetFolderScope": {
          "docs": "",
          "enum": [
            {
              "name": "PathAndItems",
              "value": "PathAndItems",
            },
            {
              "name": "Path",
              "value": "Path",
            },
            {
              "name": "Items",
              "value": "Items",
            },
          ],
        },
        "AssetFoldersDto": {
          "docs": undefined,
          "properties": {
            "items": {
              "docs": "The assets folders.",
              "type": "optional<list<AssetFolderDto>>",
            },
            "path": {
              "docs": "The path to the current folder.",
              "type": "optional<list<AssetFolderDto>>",
            },
            "total": {
              "docs": "The total number of assets.",
              "type": "optional<integer>",
            },
          },
        },
        "AssetMeta": {
          "docs": undefined,
          "properties": {
            "isDuplicate": {
              "docs": "Indicates whether the asset is a duplicate.",
              "type": "string",
            },
          },
        },
        "AssetPreviewMode": {
          "docs": "",
          "enum": [
            {
              "name": "ImageAndFileName",
              "value": "ImageAndFileName",
            },
            {
              "name": "Image",
              "value": "Image",
            },
            {
              "name": "FileName",
              "value": "FileName",
            },
          ],
        },
        "AssetScriptsDto": {
          "docs": undefined,
          "properties": {
            "annotate": {
              "docs": "The script that is executed when annotating a content.",
              "type": "optional<string>",
            },
            "create": {
              "docs": "The script that is executed when creating an asset.",
              "type": "optional<string>",
            },
            "delete": {
              "docs": "The script that is executed when deleting a content.",
              "type": "optional<string>",
            },
            "move": {
              "docs": "The script that is executed when moving a content.",
              "type": "optional<string>",
            },
            "query": {
              "docs": "The script that is executed for each asset when querying assets.",
              "type": "optional<string>",
            },
            "queryPre": {
              "docs": "The script that is executed for all assets when querying assets.",
              "type": "optional<string>",
            },
            "update": {
              "docs": "The script that is executed when updating a content.",
              "type": "optional<string>",
            },
            "version": {
              "docs": "The version of the app.",
              "type": "optional<integer>",
            },
          },
        },
        "AssetType": {
          "docs": "",
          "enum": [
            {
              "name": "Unknown",
              "value": "Unknown",
            },
            {
              "name": "Image",
              "value": "Image",
            },
            {
              "name": "Audio",
              "value": "Audio",
            },
            {
              "name": "Video",
              "value": "Video",
            },
          ],
        },
        "AssetsDto": {
          "docs": undefined,
          "properties": {
            "items": {
              "docs": "The assets.",
              "type": "optional<list<AssetDto>>",
            },
            "total": {
              "docs": "The total number of assets.",
              "type": "optional<integer>",
            },
          },
        },
        "AssetsFieldPropertiesDto": {
          "docs": undefined,
          "properties": {
            "allowDuplicates": {
              "docs": "True, if duplicate values are allowed.",
              "type": "optional<boolean>",
            },
            "allowedExtensions": {
              "docs": "The allowed file extensions.",
              "type": "optional<list<string>>",
            },
            "aspectHeight": {
              "docs": "The image aspect height in pixels.",
              "type": "optional<integer>",
            },
            "aspectWidth": {
              "docs": "The image aspect width in pixels.",
              "type": "optional<integer>",
            },
            "defaultValue": {
              "docs": "The default value as a list of asset ids.",
              "type": "optional<list<string>>",
            },
            "defaultValues": {
              "docs": undefined,
              "type": "optional<LocalizedValueOfReadonlyListOfString>",
            },
            "expectedType": {
              "docs": undefined,
              "type": "optional<AssetType>",
            },
            "folderId": {
              "docs": "The initial id to the folder.",
              "type": "optional<string>",
            },
            "maxHeight": {
              "docs": "The maximum image height in pixels.",
              "type": "optional<integer>",
            },
            "maxItems": {
              "docs": "The maximum allowed items for the field value.",
              "type": "optional<integer>",
            },
            "maxSize": {
              "docs": "The maximum file size in bytes.",
              "type": "optional<integer>",
            },
            "maxWidth": {
              "docs": "The maximum image width in pixels.",
              "type": "optional<integer>",
            },
            "minHeight": {
              "docs": "The minimum image height in pixels.",
              "type": "optional<integer>",
            },
            "minItems": {
              "docs": "The minimum allowed items for the field value.",
              "type": "optional<integer>",
            },
            "minSize": {
              "docs": "The minimum file size in bytes.",
              "type": "optional<integer>",
            },
            "minWidth": {
              "docs": "The minimum image width in pixels.",
              "type": "optional<integer>",
            },
            "mustBeImage": {
              "docs": "True to resolve first image in the content list.",
              "type": "optional<boolean>",
            },
            "previewMode": {
              "docs": undefined,
              "type": "optional<AssetPreviewMode>",
            },
            "resolveFirst": {
              "docs": "True to resolve first asset in the content list.",
              "type": "optional<boolean>",
            },
            "resolveImage": {
              "docs": "True to resolve first image in the content list.",
              "type": "optional<boolean>",
            },
          },
        },
        "AssignContributorDto": {
          "docs": undefined,
          "properties": {
            "contributorId": {
              "docs": "The id or email of the user to add to the app.",
              "type": "string",
            },
            "invite": {
              "docs": "Set to true to invite the user if he does not exist.",
              "type": "optional<boolean>",
            },
            "role": {
              "docs": "The role of the contributor.",
              "type": "optional<string>",
            },
          },
        },
        "AzureQueueRuleActionDto": {
          "docs": undefined,
          "properties": {
            "connectionString": {
              "docs": "The connection string to the storage account.",
              "type": "optional<string>",
            },
            "payload": {
              "docs": "Leave it empty to use the full event as body.",
              "type": "optional<string>",
            },
            "queue": {
              "docs": "The name of the queue.",
              "type": "optional<string>",
            },
          },
        },
        "BackupJobDto": {
          "docs": undefined,
          "properties": {
            "handledAssets": {
              "docs": "The number of handled assets.",
              "type": "optional<integer>",
            },
            "handledEvents": {
              "docs": "The number of handled events.",
              "type": "optional<integer>",
            },
            "id": {
              "docs": "The ID of the backup job.",
              "type": "optional<string>",
            },
            "started": {
              "docs": "The time when the job has been started.",
              "type": "optional<string>",
            },
            "status": {
              "docs": undefined,
              "type": "optional<JobStatus>",
            },
            "stopped": {
              "docs": "The time when the job has been stopped.",
              "type": "optional<string>",
            },
          },
        },
        "BackupJobsDto": {
          "docs": undefined,
          "properties": {
            "items": {
              "docs": "The backups.",
              "type": "optional<list<BackupJobDto>>",
            },
          },
        },
        "BooleanFieldEditor": {
          "docs": "",
          "enum": [
            {
              "name": "Checkbox",
              "value": "Checkbox",
            },
            {
              "name": "Toggle",
              "value": "Toggle",
            },
          ],
        },
        "BooleanFieldPropertiesDto": {
          "docs": undefined,
          "properties": {
            "defaultValue": {
              "docs": "The default value for the field value.",
              "type": "optional<boolean>",
            },
            "defaultValues": {
              "docs": undefined,
              "type": "optional<LocalizedValueOfNullableBoolean>",
            },
            "editor": {
              "docs": undefined,
              "type": "optional<BooleanFieldEditor>",
            },
            "inlineEditable": {
              "docs": "Indicates that the inline editor is enabled for this field.",
              "type": "optional<boolean>",
            },
          },
        },
        "BulkResultDto": {
          "docs": undefined,
          "properties": {
            "contentId": {
              "docs": "The ID of the entity that has been handled successfully or not.",
              "type": "optional<string>",
            },
            "error": {
              "docs": undefined,
              "type": "optional<ErrorDto>",
            },
            "id": {
              "docs": "The ID of the entity that has been handled successfully or not.",
              "type": "optional<string>",
            },
            "jobIndex": {
              "docs": "The index of the bulk job where the result belongs to. The order can change.",
              "type": "integer",
            },
          },
        },
        "BulkUpdateAssetType": {
          "docs": "",
          "enum": [
            {
              "name": "Annotate",
              "value": "Annotate",
            },
            {
              "name": "Move",
              "value": "Move",
            },
            {
              "name": "Delete",
              "value": "Delete",
            },
          ],
        },
        "BulkUpdateAssetsJobDto": {
          "docs": undefined,
          "properties": {
            "expectedVersion": {
              "docs": "The expected version.",
              "type": "optional<integer>",
            },
            "fileName": {
              "docs": "The new name of the asset.",
              "type": "optional<string>",
            },
            "id": {
              "docs": "An optional ID of the asset to update.",
              "type": "optional<string>",
            },
            "isProtected": {
              "docs": "True, when the asset is not public.",
              "type": "optional<boolean>",
            },
            "metadata": {
              "docs": "The asset metadata.",
              "type": "optional<map<string, unknown>>",
            },
            "parentId": {
              "docs": "The parent folder id.",
              "type": "optional<string>",
            },
            "permanent": {
              "docs": "True to delete the asset permanently.",
              "type": "optional<boolean>",
            },
            "slug": {
              "docs": "The new slug of the asset.",
              "type": "optional<string>",
            },
            "tags": {
              "docs": "The new asset tags.",
              "type": "optional<list<string>>",
            },
            "type": {
              "docs": undefined,
              "type": "optional<BulkUpdateAssetType>",
            },
          },
        },
        "BulkUpdateContentType": {
          "docs": "",
          "enum": [
            {
              "name": "Upsert",
              "value": "Upsert",
            },
            {
              "name": "ChangeStatus",
              "value": "ChangeStatus",
            },
            {
              "name": "Create",
              "value": "Create",
            },
            {
              "name": "Delete",
              "value": "Delete",
            },
            {
              "name": "Patch",
              "value": "Patch",
            },
            {
              "name": "Update",
              "value": "Update",
            },
            {
              "name": "Validate",
              "value": "Validate",
            },
          ],
        },
        "BulkUpdateContentsJobDto": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": undefined,
              "type": "optional<ContentData>",
            },
            "dueTime": {
              "docs": "The due time.",
              "type": "optional<string>",
            },
            "expectedCount": {
              "docs": "The number of expected items. Set it to a higher number to update multiple items when a query is defined.",
              "type": "optional<integer>",
            },
            "expectedVersion": {
              "docs": "The expected version.",
              "type": "optional<integer>",
            },
            "id": {
              "docs": "An optional ID of the content to update.",
              "type": "optional<string>",
            },
            "patch": {
              "docs": "Makes the update as patch.",
              "type": "optional<boolean>",
            },
            "permanent": {
              "docs": "True to delete the content permanently.",
              "type": "optional<boolean>",
            },
            "query": {
              "docs": undefined,
              "type": "optional<QueryJsonDto>",
            },
            "schema": {
              "docs": "The optional schema id or name.",
              "type": "optional<string>",
            },
            "status": {
              "docs": "The new status when the type is set to 'ChangeStatus' or 'Upsert'.",
              "type": "optional<string>",
            },
            "type": {
              "docs": undefined,
              "type": "optional<BulkUpdateContentType>",
            },
          },
        },
        "CallsUsageDtoDto": {
          "docs": undefined,
          "properties": {
            "allowedBytes": {
              "docs": "The included API traffic.",
              "type": "integer",
            },
            "allowedCalls": {
              "docs": "The included API calls.",
              "type": "integer",
            },
            "averageElapsedMs": {
              "docs": "The average duration in milliseconds.",
              "type": "double",
            },
            "blockingApiCalls": {
              "docs": "The amount of calls that will block the app.",
              "type": "integer",
            },
            "details": {
              "docs": "The statistics by date and group.",
              "type": "map<string, list<CallsUsagePerDateDto>>",
            },
            "monthBytes": {
              "docs": "The total number of bytes transferred this month.",
              "type": "integer",
            },
            "monthCalls": {
              "docs": "The total number of API calls this month.",
              "type": "integer",
            },
            "totalBytes": {
              "docs": "The total number of bytes transferred.",
              "type": "integer",
            },
            "totalCalls": {
              "docs": "The total number of API calls.",
              "type": "integer",
            },
          },
        },
        "CallsUsagePerDateDto": {
          "docs": undefined,
          "properties": {
            "averageElapsedMs": {
              "docs": "The average duration in milliseconds.",
              "type": "double",
            },
            "date": {
              "docs": "The date when the usage was tracked.",
              "type": "string",
            },
            "totalBytes": {
              "docs": "The total number of bytes transferred.",
              "type": "integer",
            },
            "totalCalls": {
              "docs": "The total number of API calls.",
              "type": "integer",
            },
          },
        },
        "ChangePlanDto": {
          "docs": undefined,
          "properties": {
            "planId": {
              "docs": "The new plan id.",
              "type": "string",
            },
          },
        },
        "ClientDto": {
          "docs": undefined,
          "properties": {
            "allowAnonymous": {
              "docs": "True to allow anonymous access without an access token for this client.",
              "type": "optional<boolean>",
            },
            "apiCallsLimit": {
              "docs": "The number of allowed api calls per month for this client.",
              "type": "optional<integer>",
            },
            "apiTrafficLimit": {
              "docs": "The number of allowed api traffic bytes per month for this client.",
              "type": "optional<integer>",
            },
            "id": {
              "docs": "The client id.",
              "type": "optional<string>",
            },
            "name": {
              "docs": "The client name.",
              "type": "optional<string>",
            },
            "role": {
              "docs": "The role of the client.",
              "type": "optional<string>",
            },
            "secret": {
              "docs": "The client secret.",
              "type": "optional<string>",
            },
          },
        },
        "ClientsDto": {
          "docs": undefined,
          "properties": {
            "items": {
              "docs": "The clients.",
              "type": "optional<list<ClientDto>>",
            },
          },
        },
        "CommentDto": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": "The ID of the comment.",
              "type": "string",
            },
            "text": {
              "docs": "The text of the comment.",
              "type": "string",
            },
            "time": {
              "docs": "The time when the comment was created or updated last.",
              "type": "string",
            },
            "url": {
              "docs": "The url where the comment is created.",
              "type": "optional<string>",
            },
            "user": {
              "docs": "The user who created or updated the comment.",
              "type": "string",
            },
          },
        },
        "CommentRuleActionDto": {
          "docs": undefined,
          "properties": {
            "client": {
              "docs": "An optional client name.",
              "type": "optional<string>",
            },
            "text": {
              "docs": "The comment text.",
              "type": "optional<string>",
            },
          },
        },
        "CommentRuleTriggerDto": {
          "docs": undefined,
          "properties": {
            "condition": {
              "docs": "Javascript condition when to trigger.",
              "type": "optional<string>",
            },
          },
        },
        "CommentsDto": {
          "docs": undefined,
          "properties": {
            "createdComments": {
              "docs": "The created comments including the updates.",
              "type": "optional<list<CommentDto>>",
            },
            "deletedComments": {
              "docs": "The deleted comments since the last version.",
              "type": "optional<list<string>>",
            },
            "updatedComments": {
              "docs": "The updates comments since the last version.",
              "type": "optional<list<CommentDto>>",
            },
            "version": {
              "docs": "The current version.",
              "type": "integer",
            },
          },
        },
        "ComponentFieldPropertiesDto": {
          "docs": undefined,
          "properties": {
            "schemaIds": {
              "docs": "The ID of the embedded schemas.",
              "type": "optional<list<string>>",
            },
          },
        },
        "ComponentsFieldPropertiesDto": {
          "docs": undefined,
          "properties": {
            "maxItems": {
              "docs": "The maximum allowed items for the field value.",
              "type": "optional<integer>",
            },
            "minItems": {
              "docs": "The minimum allowed items for the field value.",
              "type": "optional<integer>",
            },
            "schemaIds": {
              "docs": "The ID of the embedded schemas.",
              "type": "optional<list<string>>",
            },
            "uniqueFields": {
              "docs": "The fields that must be unique.",
              "type": "optional<list<string>>",
            },
          },
        },
        "ConfigurePreviewUrlsDto": {
          "docs": undefined,
          "type": "map<string, string>",
        },
        "ContentChangedRuleTriggerDto": {
          "docs": undefined,
          "properties": {
            "handleAll": {
              "docs": "Determines whether the trigger should handle all content changes events.",
              "type": "optional<boolean>",
            },
            "referencedSchemas": {
              "docs": "The schema references.",
              "type": "optional<list<SchemaCondition>>",
            },
            "schemas": {
              "docs": "The schema settings.",
              "type": "optional<list<SchemaCondition>>",
            },
          },
        },
        "ContentData": {
          "docs": undefined,
          "type": "map<string, ContentFieldData>",
        },
        "ContentDto": {
          "docs": undefined,
          "properties": {
            "created": {
              "docs": "The date and time when the content item has been created.",
              "type": "optional<string>",
            },
            "createdBy": {
              "docs": "The user that has created the content item.",
              "type": "optional<string>",
            },
            "data": "unknown",
            "editToken": {
              "docs": "The UI token.",
              "type": "optional<string>",
            },
            "id": {
              "docs": "The if of the content item.",
              "type": "optional<string>",
            },
            "isDeleted": {
              "docs": "Indicates whether the content is deleted.",
              "type": "optional<boolean>",
            },
            "lastModified": {
              "docs": "The date and time when the content item has been modified last.",
              "type": "optional<string>",
            },
            "lastModifiedBy": {
              "docs": "The user that has updated the content item.",
              "type": "optional<string>",
            },
            "newStatus": {
              "docs": "The new status of the content.",
              "type": "optional<string>",
            },
            "newStatusColor": {
              "docs": "The color of the new status.",
              "type": "optional<string>",
            },
            "referenceData": {
              "docs": undefined,
              "type": "optional<ContentData>",
            },
            "referenceFields": {
              "docs": "The reference fields.",
              "type": "optional<list<FieldDto>>",
            },
            "scheduleJob": {
              "docs": undefined,
              "type": "optional<ScheduleJobDto>",
            },
            "schemaDisplayName": {
              "docs": "The display name of the schema.",
              "type": "optional<string>",
            },
            "schemaId": {
              "docs": "The ID of the schema.",
              "type": "optional<string>",
            },
            "schemaName": {
              "docs": "The name of the schema.",
              "type": "optional<string>",
            },
            "status": {
              "docs": "The status of the content.",
              "type": "optional<string>",
            },
            "statusColor": {
              "docs": "The color of the status.",
              "type": "optional<string>",
            },
            "version": {
              "docs": "The version of the content.",
              "type": "optional<integer>",
            },
          },
        },
        "ContentFieldData": {
          "docs": undefined,
          "type": "map<string, unknown>",
        },
        "ContentsDto": {
          "docs": undefined,
          "properties": {
            "items": {
              "docs": "The content items.",
              "type": "optional<list<ContentDto>>",
            },
            "statuses": {
              "docs": "The possible statuses.",
              "type": "optional<list<StatusInfoDto>>",
            },
            "total": {
              "docs": "The total number of content items.",
              "type": "optional<integer>",
            },
          },
        },
        "ContributorDto": {
          "docs": undefined,
          "properties": {
            "contributorEmail": {
              "docs": "The email address.",
              "type": "optional<string>",
            },
            "contributorId": {
              "docs": "The ID of the user that contributes to the app.",
              "type": "optional<string>",
            },
            "contributorName": {
              "docs": "The display name.",
              "type": "optional<string>",
            },
            "role": {
              "docs": "The role of the contributor.",
              "type": "optional<string>",
            },
          },
        },
        "ContributorsDto": {
          "docs": undefined,
          "properties": {
            "_meta": {
              "docs": undefined,
              "type": "optional<ContributorsMetadata>",
            },
            "items": {
              "docs": "The contributors.",
              "type": "optional<list<ContributorDto>>",
            },
            "maxContributors": {
              "docs": "The maximum number of allowed contributors.",
              "type": "optional<integer>",
            },
          },
        },
        "ContributorsMetadata": {
          "docs": undefined,
          "properties": {
            "isInvited": {
              "docs": "Indicates whether the user has been invited.",
              "type": "string",
            },
          },
        },
        "CreateContentRuleActionDto": {
          "docs": undefined,
          "properties": {
            "client": {
              "docs": "An optional client name.",
              "type": "optional<string>",
            },
            "data": {
              "docs": "The content data.",
              "type": "optional<string>",
            },
            "publish": {
              "docs": "Publish the content.",
              "type": "optional<boolean>",
            },
            "schema": {
              "docs": "The name of the schema.",
              "type": "optional<string>",
            },
          },
        },
        "CreateRuleDto": {
          "docs": undefined,
          "properties": {
            "action": {
              "docs": undefined,
              "type": "RuleActionDto",
            },
            "trigger": {
              "docs": undefined,
              "type": "RuleTriggerDto",
            },
          },
        },
        "CurrentStorageDto": {
          "docs": undefined,
          "properties": {
            "maxAllowed": {
              "docs": "The maximum allowed asset size.",
              "type": "integer",
            },
            "size": {
              "docs": "The size in bytes.",
              "type": "integer",
            },
          },
        },
        "DateTimeCalculatedDefaultValue": {
          "docs": "",
          "enum": [
            {
              "name": "Now",
              "value": "Now",
            },
            {
              "name": "Today",
              "value": "Today",
            },
          ],
        },
        "DateTimeFieldEditor": {
          "docs": "",
          "enum": [
            {
              "name": "Date",
              "value": "Date",
            },
            {
              "name": "DateTime",
              "value": "DateTime",
            },
          ],
        },
        "DateTimeFieldPropertiesDto": {
          "docs": undefined,
          "properties": {
            "calculatedDefaultValue": {
              "docs": undefined,
              "type": "optional<DateTimeCalculatedDefaultValue>",
            },
            "defaultValue": {
              "docs": "The default value for the field value.",
              "type": "optional<string>",
            },
            "defaultValues": {
              "docs": undefined,
              "type": "optional<LocalizedValueOfNullableInstant>",
            },
            "editor": {
              "docs": undefined,
              "type": "optional<DateTimeFieldEditor>",
            },
            "format": {
              "docs": "The format pattern when displayed in the UI.",
              "type": "optional<string>",
            },
            "maxValue": {
              "docs": "The maximum allowed value for the field value.",
              "type": "optional<string>",
            },
            "minValue": {
              "docs": "The minimum allowed value for the field value.",
              "type": "optional<string>",
            },
          },
        },
        "DiscourseRuleActionDto": {
          "docs": undefined,
          "properties": {
            "apiKey": {
              "docs": "The api key to authenticate to your discourse server.",
              "type": "optional<string>",
            },
            "apiUsername": {
              "docs": "The api username to authenticate to your discourse server.",
              "type": "optional<string>",
            },
            "category": {
              "docs": "The optional category id.",
              "type": "optional<integer>",
            },
            "text": {
              "docs": "The text as markdown.",
              "type": "optional<string>",
            },
            "title": {
              "docs": "The optional title when creating new topics.",
              "type": "optional<string>",
            },
            "topic": {
              "docs": "The optional topic id.",
              "type": "optional<integer>",
            },
            "url": {
              "docs": "The url to the discourse server.",
              "type": "optional<string>",
            },
          },
        },
        "EditorDto": {
          "docs": undefined,
          "properties": {
            "name": {
              "docs": "The name of the editor.",
              "type": "string",
            },
            "url": {
              "docs": "The url to the editor.",
              "type": "string",
            },
          },
        },
        "ElasticSearchRuleActionDto": {
          "docs": undefined,
          "properties": {
            "delete": {
              "docs": "The condition when to delete the document.",
              "type": "optional<string>",
            },
            "document": {
              "docs": "The optional custom document.",
              "type": "optional<string>",
            },
            "host": {
              "docs": "The url to the instance or cluster.",
              "type": "optional<string>",
            },
            "indexName": {
              "docs": "The name of the index.",
              "type": "optional<string>",
            },
            "password": {
              "docs": "The optional password.",
              "type": "optional<string>",
            },
            "username": {
              "docs": "The optional username.",
              "type": "optional<string>",
            },
          },
        },
        "EmailRuleActionDto": {
          "docs": undefined,
          "properties": {
            "messageBody": {
              "docs": "The message body.",
              "type": "optional<string>",
            },
            "messageFrom": {
              "docs": "The email sending address.",
              "type": "optional<string>",
            },
            "messageSubject": {
              "docs": "The subject line for this email message.",
              "type": "optional<string>",
            },
            "messageTo": {
              "docs": "The email message will be sent to.",
              "type": "optional<string>",
            },
            "serverHost": {
              "docs": "The IP address or host to the SMTP server.",
              "type": "optional<string>",
            },
            "serverPassword": {
              "docs": "The password for the SMTP server.",
              "type": "optional<string>",
            },
            "serverPort": {
              "docs": "The port to the SMTP server.",
              "type": "optional<integer>",
            },
            "serverUsername": {
              "docs": "The username for the SMTP server.",
              "type": "optional<string>",
            },
          },
        },
        "ErrorDto": {
          "docs": undefined,
          "properties": {
            "details": {
              "docs": "Detailed error messages.",
              "type": "optional<list<string>>",
            },
            "errorCode": {
              "docs": "The error code.",
              "type": "optional<string>",
            },
            "message": {
              "docs": "Error message.",
              "type": "string",
            },
            "statusCode": {
              "docs": "Status code of the http response.",
              "type": "integer",
            },
            "traceId": {
              "docs": "The optional trace id.",
              "type": "optional<string>",
            },
            "type": {
              "docs": "Link to the error details.",
              "type": "optional<string>",
            },
          },
        },
        "EventConsumerDto": {
          "docs": undefined,
          "properties": {
            "count": {
              "docs": "The number of handled events.",
              "type": "optional<integer>",
            },
            "error": {
              "docs": "The error details if the event consumer has been stopped after a failure.",
              "type": "optional<string>",
            },
            "isResetting": {
              "docs": "Indicates if the event consumer is resetting at the moment.",
              "type": "optional<boolean>",
            },
            "isStopped": {
              "docs": "Indicates if the event consumer has been started.",
              "type": "optional<boolean>",
            },
            "name": {
              "docs": "The name of the event consumer.",
              "type": "optional<string>",
            },
            "position": {
              "docs": "The position within the vent stream.",
              "type": "optional<string>",
            },
          },
        },
        "EventConsumersDto": {
          "docs": undefined,
          "properties": {
            "items": {
              "docs": "The event consumers.",
              "type": "optional<list<EventConsumerDto>>",
            },
          },
        },
        "ExposedValues": {
          "docs": undefined,
          "type": "map<string, string>",
        },
        "FastlyRuleActionDto": {
          "docs": undefined,
          "properties": {
            "apiKey": {
              "docs": "The API key to grant access to Squidex.",
              "type": "optional<string>",
            },
            "serviceId": {
              "docs": "The ID of the fastly service.",
              "type": "optional<string>",
            },
          },
        },
        "FeatureDto": {
          "docs": undefined,
          "properties": {
            "name": {
              "docs": "The name of the feature.",
              "type": "string",
            },
            "text": {
              "docs": "The description text.",
              "type": "string",
            },
          },
        },
        "FeaturesDto": {
          "docs": undefined,
          "properties": {
            "features": {
              "docs": "The latest features.",
              "type": "list<FeatureDto>",
            },
            "version": {
              "docs": "The recent version.",
              "type": "integer",
            },
          },
        },
        "FieldDto": {
          "docs": undefined,
          "properties": {
            "fieldId": {
              "docs": "The ID of the field.",
              "type": "optional<integer>",
            },
            "isDisabled": {
              "docs": "Defines if the field is disabled.",
              "type": "optional<boolean>",
            },
            "isHidden": {
              "docs": "Defines if the field is hidden.",
              "type": "optional<boolean>",
            },
            "isLocked": {
              "docs": "Defines if the field is locked.",
              "type": "optional<boolean>",
            },
            "name": {
              "docs": "The name of the field. Must be unique within the schema.",
              "type": "optional<string>",
            },
            "nested": {
              "docs": "The nested fields.",
              "type": "optional<list<NestedFieldDto>>",
            },
            "partitioning": {
              "docs": "Defines the partitioning of the field.",
              "type": "optional<string>",
            },
            "properties": {
              "docs": undefined,
              "type": "optional<FieldPropertiesDto>",
            },
          },
        },
        "FieldPropertiesDto": {
          "base-properties": {
            "editorUrl": {
              "docs": "Optional url to the editor.",
              "type": "optional<string>",
            },
            "fieldType": {
              "docs": undefined,
              "type": "string",
            },
            "hints": {
              "docs": "Hints to describe the field.",
              "type": "optional<string>",
            },
            "isHalfWidth": {
              "docs": "Indicates if the field should be rendered with half width only.",
              "type": "boolean",
            },
            "isRequired": {
              "docs": "Indicates if the field is required.",
              "type": "boolean",
            },
            "isRequiredOnPublish": {
              "docs": "Indicates if the field is required when publishing.",
              "type": "boolean",
            },
            "label": {
              "docs": "Optional label for the editor.",
              "type": "optional<string>",
            },
            "placeholder": {
              "docs": "Placeholder to show when no value has been entered.",
              "type": "optional<string>",
            },
            "tags": {
              "docs": "Tags for automation processes.",
              "type": "optional<list<string>>",
            },
          },
          "docs": undefined,
          "union": {
            "Array": {
              "docs": undefined,
              "type": "ArrayFieldPropertiesDto",
            },
            "Assets": {
              "docs": undefined,
              "type": "AssetsFieldPropertiesDto",
            },
            "Boolean": {
              "docs": undefined,
              "type": "BooleanFieldPropertiesDto",
            },
            "Component": {
              "docs": undefined,
              "type": "ComponentFieldPropertiesDto",
            },
            "Components": {
              "docs": undefined,
              "type": "ComponentsFieldPropertiesDto",
            },
            "DateTime": {
              "docs": undefined,
              "type": "DateTimeFieldPropertiesDto",
            },
            "Geolocation": {
              "docs": undefined,
              "type": "GeolocationFieldPropertiesDto",
            },
            "Json": {
              "docs": undefined,
              "type": "JsonFieldPropertiesDto",
            },
            "Number": {
              "docs": undefined,
              "type": "NumberFieldPropertiesDto",
            },
            "References": {
              "docs": undefined,
              "type": "ReferencesFieldPropertiesDto",
            },
            "String": {
              "docs": undefined,
              "type": "StringFieldPropertiesDto",
            },
            "Tags": {
              "docs": undefined,
              "type": "TagsFieldPropertiesDto",
            },
            "UI": {
              "docs": undefined,
              "type": "UiFieldPropertiesDto",
            },
          },
        },
        "FieldRuleAction": {
          "docs": "",
          "enum": [
            {
              "name": "Disable",
              "value": "Disable",
            },
            {
              "name": "Hide",
              "value": "Hide",
            },
            {
              "name": "Require",
              "value": "Require",
            },
          ],
        },
        "FieldRuleDto": {
          "docs": undefined,
          "properties": {
            "action": {
              "docs": undefined,
              "type": "FieldRuleAction",
            },
            "condition": {
              "docs": "The condition.",
              "type": "optional<string>",
            },
            "field": {
              "docs": "The field to update.",
              "type": "string",
            },
          },
        },
        "GeolocationFieldEditor": {
          "docs": "",
          "enum": [
            {
              "name": "Map",
              "value": "Map",
            },
          ],
        },
        "GeolocationFieldPropertiesDto": {
          "docs": undefined,
          "properties": {
            "editor": {
              "docs": undefined,
              "type": "optional<GeolocationFieldEditor>",
            },
          },
        },
        "HistoryEventDto": {
          "docs": undefined,
          "properties": {
            "actor": {
              "docs": "The user who called the action.",
              "type": "string",
            },
            "created": {
              "docs": "The time when the event happened.",
              "type": "string",
            },
            "eventId": {
              "docs": "Gets a unique id for the event.",
              "type": "string",
            },
            "eventType": {
              "docs": "The type of the original event.",
              "type": "string",
            },
            "message": {
              "docs": "The message for the event.",
              "type": "string",
            },
            "version": {
              "docs": "The version identifier.",
              "type": "integer",
            },
          },
        },
        "ImageFormat": {
          "docs": "",
          "enum": [
            {
              "name": "AVIF",
              "value": "AVIF",
            },
            {
              "name": "BMP",
              "value": "BMP",
            },
            {
              "name": "GIF",
              "value": "GIF",
            },
            {
              "name": "JPEG",
              "value": "JPEG",
            },
            {
              "name": "PNG",
              "value": "PNG",
            },
            {
              "name": "TGA",
              "value": "TGA",
            },
            {
              "name": "TIFF",
              "value": "TIFF",
            },
            {
              "name": "WEBP",
              "value": "WEBP",
            },
          ],
        },
        "JobStatus": {
          "docs": "",
          "enum": [
            {
              "name": "Created",
              "value": "Created",
            },
            {
              "name": "Started",
              "value": "Started",
            },
            {
              "name": "Completed",
              "value": "Completed",
            },
            {
              "name": "Failed",
              "value": "Failed",
            },
          ],
        },
        "JsonFieldPropertiesDto": {
          "docs": undefined,
          "properties": {
            "graphQLSchema": {
              "docs": "The GraphQL schema.",
              "type": "optional<string>",
            },
          },
        },
        "LanguageDto": {
          "docs": undefined,
          "properties": {
            "englishName": {
              "docs": "The english name of the language.",
              "type": "string",
            },
            "iso2Code": {
              "docs": "The iso code of the language.",
              "type": "string",
            },
            "nativeName": {
              "docs": "The native name of the language.",
              "type": "string",
            },
          },
        },
        "LocalizedValueOfNullableBoolean": {
          "docs": undefined,
          "type": "map<string, optional<boolean>>",
        },
        "LocalizedValueOfNullableDouble": {
          "docs": undefined,
          "type": "map<string, optional<double>>",
        },
        "LocalizedValueOfNullableInstant": {
          "docs": undefined,
          "type": "map<string, optional<string>>",
        },
        "LocalizedValueOfReadonlyListOfString": {
          "docs": undefined,
          "type": "map<string, list<string>>",
        },
        "LocalizedValueOfString": {
          "docs": undefined,
          "type": "map<string, string>",
        },
        "LogDownloadDto": {
          "docs": undefined,
          "properties": {
            "downloadUrl": {
              "docs": "The url to download the log.",
              "type": "optional<string>",
            },
          },
        },
        "ManualRuleTriggerDto": {
          "docs": undefined,
          "properties": {},
        },
        "MediumRuleActionDto": {
          "docs": undefined,
          "properties": {
            "accessToken": {
              "docs": "The self issued access token.",
              "type": "optional<string>",
            },
            "canonicalUrl": {
              "docs": "The original home of this content, if it was originally published elsewhere.",
              "type": "optional<string>",
            },
            "content": {
              "docs": "The content, either html or markdown.",
              "type": "optional<string>",
            },
            "isHtml": {
              "docs": "Indicates whether the content is markdown or html.",
              "type": "optional<boolean>",
            },
            "publicationId": {
              "docs": "Optional publication id.",
              "type": "optional<string>",
            },
            "tags": {
              "docs": "The optional comma separated list of tags.",
              "type": "optional<string>",
            },
            "title": {
              "docs": "The title, used for the url.",
              "type": "optional<string>",
            },
          },
        },
        "NestedFieldDto": {
          "docs": undefined,
          "properties": {
            "fieldId": {
              "docs": "The ID of the field.",
              "type": "optional<integer>",
            },
            "isDisabled": {
              "docs": "Defines if the field is disabled.",
              "type": "optional<boolean>",
            },
            "isHidden": {
              "docs": "Defines if the field is hidden.",
              "type": "optional<boolean>",
            },
            "isLocked": {
              "docs": "Defines if the field is locked.",
              "type": "optional<boolean>",
            },
            "name": {
              "docs": "The name of the field. Must be unique within the schema.",
              "type": "optional<string>",
            },
            "properties": {
              "docs": undefined,
              "type": "optional<FieldPropertiesDto>",
            },
          },
        },
        "NotificationRuleActionDto": {
          "docs": undefined,
          "properties": {
            "client": {
              "docs": "An optional client name.",
              "type": "optional<string>",
            },
            "text": {
              "docs": "The text to send.",
              "type": "optional<string>",
            },
            "url": {
              "docs": "The optional url to attach to the notification.",
              "type": "optional<string>",
            },
            "user": {
              "docs": "The user id or email.",
              "type": "optional<string>",
            },
          },
        },
        "NumberFieldEditor": {
          "docs": "",
          "enum": [
            {
              "name": "Input",
              "value": "Input",
            },
            {
              "name": "Radio",
              "value": "Radio",
            },
            {
              "name": "Dropdown",
              "value": "Dropdown",
            },
            {
              "name": "Stars",
              "value": "Stars",
            },
          ],
        },
        "NumberFieldPropertiesDto": {
          "docs": undefined,
          "properties": {
            "allowedValues": {
              "docs": "The allowed values for the field value.",
              "type": "optional<list<double>>",
            },
            "defaultValue": {
              "docs": "The default value for the field value.",
              "type": "optional<double>",
            },
            "defaultValues": {
              "docs": undefined,
              "type": "optional<LocalizedValueOfNullableDouble>",
            },
            "editor": {
              "docs": undefined,
              "type": "optional<NumberFieldEditor>",
            },
            "inlineEditable": {
              "docs": "Indicates that the inline editor is enabled for this field.",
              "type": "optional<boolean>",
            },
            "isUnique": {
              "docs": "Indicates if the field value must be unique. Ignored for nested fields and localized fields.",
              "type": "optional<boolean>",
            },
            "maxValue": {
              "docs": "The maximum allowed value for the field value.",
              "type": "optional<double>",
            },
            "minValue": {
              "docs": "The minimum allowed value for the field value.",
              "type": "optional<double>",
            },
          },
        },
        "OpenSearchRuleActionDto": {
          "docs": undefined,
          "properties": {
            "delete": {
              "docs": "The condition when to delete the document.",
              "type": "optional<string>",
            },
            "document": {
              "docs": "The optional custom document.",
              "type": "optional<string>",
            },
            "host": {
              "docs": "The url to the instance or cluster.",
              "type": "optional<string>",
            },
            "indexName": {
              "docs": "The name of the index.",
              "type": "optional<string>",
            },
            "password": {
              "docs": "The optional password.",
              "type": "optional<string>",
            },
            "username": {
              "docs": "The optional username.",
              "type": "optional<string>",
            },
          },
        },
        "PatternDto": {
          "docs": undefined,
          "properties": {
            "message": {
              "docs": "The regex message.",
              "type": "optional<string>",
            },
            "name": {
              "docs": "The name of the suggestion.",
              "type": "string",
            },
            "regex": {
              "docs": "The regex pattern.",
              "type": "string",
            },
          },
        },
        "PlanChangedDto": {
          "docs": undefined,
          "properties": {
            "redirectUri": {
              "docs": "Optional redirect uri.",
              "type": "optional<string>",
            },
          },
        },
        "PlanDto": {
          "docs": undefined,
          "properties": {
            "confirmText": {
              "docs": "An optional confirm text for the monthly subscription.",
              "type": "optional<string>",
            },
            "costs": {
              "docs": "The monthly costs of the plan.",
              "type": "string",
            },
            "id": {
              "docs": "The ID of the plan.",
              "type": "string",
            },
            "maxApiBytes": {
              "docs": "The maximum number of API traffic.",
              "type": "integer",
            },
            "maxApiCalls": {
              "docs": "The maximum number of API calls.",
              "type": "integer",
            },
            "maxAssetSize": {
              "docs": "The maximum allowed asset size.",
              "type": "integer",
            },
            "maxContributors": {
              "docs": "The maximum number of contributors.",
              "type": "integer",
            },
            "name": {
              "docs": "The name of the plan.",
              "type": "string",
            },
            "yearlyConfirmText": {
              "docs": "An optional confirm text for the yearly subscription.",
              "type": "optional<string>",
            },
            "yearlyCosts": {
              "docs": "The yearly costs of the plan.",
              "type": "optional<string>",
            },
            "yearlyId": {
              "docs": "The yearly ID of the plan.",
              "type": "optional<string>",
            },
          },
        },
        "PlansDto": {
          "docs": undefined,
          "properties": {
            "currentPlanId": {
              "docs": "The current plan id.",
              "type": "optional<string>",
            },
            "locked": {
              "docs": undefined,
              "type": "PlansLockedReason",
            },
            "planOwner": {
              "docs": "The plan owner.",
              "type": "optional<string>",
            },
            "plans": {
              "docs": "The available plans.",
              "type": "list<PlanDto>",
            },
            "portalLink": {
              "docs": "The link to the management portal.",
              "type": "optional<string>",
            },
            "referral": {
              "docs": undefined,
              "type": "optional<ReferralInfo>",
            },
          },
        },
        "PlansLockedReason": {
          "docs": "",
          "enum": [
            {
              "name": "None",
              "value": "None",
            },
            {
              "name": "NotOwner",
              "value": "NotOwner",
            },
            {
              "name": "NoPermission",
              "value": "NoPermission",
            },
            {
              "name": "ManagedByTeam",
              "value": "ManagedByTeam",
            },
          ],
        },
        "PrerenderRuleActionDto": {
          "docs": undefined,
          "properties": {
            "token": {
              "docs": "The prerender token from your account.",
              "type": "optional<string>",
            },
            "url": {
              "docs": "The url to recache.",
              "type": "optional<string>",
            },
          },
        },
        "PropertyPath": {
          "docs": undefined,
          "type": "list<string>",
        },
        "QueryDto": {
          "docs": undefined,
          "properties": {
            "ids": {
              "docs": "The optional list of ids to query.",
              "type": "optional<list<string>>",
            },
            "oData": {
              "docs": "The optional odata query.",
              "type": "optional<string>",
            },
            "parentId": {
              "docs": "The parent id (for assets).",
              "type": "optional<string>",
            },
            "q": "unknown",
          },
        },
        "QueryJsonDto": {
          "docs": undefined,
          "properties": {
            "filter": "unknown",
            "fullText": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "random": {
              "docs": undefined,
              "type": "integer",
            },
            "skip": {
              "docs": undefined,
              "type": "integer",
            },
            "sort": {
              "docs": undefined,
              "type": "optional<list<SortNode>>",
            },
            "take": {
              "docs": undefined,
              "type": "integer",
            },
            "top": {
              "docs": undefined,
              "type": "integer",
            },
          },
        },
        "ReferencesFieldEditor": {
          "docs": "",
          "enum": [
            {
              "name": "List",
              "value": "List",
            },
            {
              "name": "Dropdown",
              "value": "Dropdown",
            },
            {
              "name": "Tags",
              "value": "Tags",
            },
            {
              "name": "Checkboxes",
              "value": "Checkboxes",
            },
            {
              "name": "Input",
              "value": "Input",
            },
          ],
        },
        "ReferencesFieldPropertiesDto": {
          "docs": undefined,
          "properties": {
            "allowDuplicates": {
              "docs": "True, if duplicate values are allowed.",
              "type": "optional<boolean>",
            },
            "defaultValue": {
              "docs": "The default value as a list of content ids.",
              "type": "optional<list<string>>",
            },
            "defaultValues": {
              "docs": undefined,
              "type": "optional<LocalizedValueOfReadonlyListOfString>",
            },
            "editor": {
              "docs": undefined,
              "type": "optional<ReferencesFieldEditor>",
            },
            "maxItems": {
              "docs": "The maximum allowed items for the field value.",
              "type": "optional<integer>",
            },
            "minItems": {
              "docs": "The minimum allowed items for the field value.",
              "type": "optional<integer>",
            },
            "mustBePublished": {
              "docs": "True when all references must be published.",
              "type": "optional<boolean>",
            },
            "resolveReference": {
              "docs": "True to resolve references in the content list.",
              "type": "optional<boolean>",
            },
            "schemaIds": {
              "docs": "The ID of the referenced schemas.",
              "type": "optional<list<string>>",
            },
          },
        },
        "ReferralInfo": {
          "docs": undefined,
          "properties": {
            "code": {
              "docs": undefined,
              "type": "string",
            },
            "condition": {
              "docs": undefined,
              "type": "string",
            },
            "earned": {
              "docs": undefined,
              "type": "string",
            },
          },
        },
        "ReorderFieldsDto": {
          "docs": undefined,
          "properties": {
            "fieldIds": {
              "docs": "The field ids in the target order.",
              "type": "list<integer>",
            },
          },
        },
        "ResizeMode": {
          "docs": "",
          "enum": [
            {
              "name": "Crop",
              "value": "Crop",
            },
            {
              "name": "CropUpsize",
              "value": "CropUpsize",
            },
            {
              "name": "Pad",
              "value": "Pad",
            },
            {
              "name": "BoxPad",
              "value": "BoxPad",
            },
            {
              "name": "Max",
              "value": "Max",
            },
            {
              "name": "Min",
              "value": "Min",
            },
            {
              "name": "Stretch",
              "value": "Stretch",
            },
          ],
        },
        "Resource": {
          "docs": undefined,
          "properties": {
            "_links": {
              "docs": "The links.",
              "type": "map<string, ResourceLink>",
            },
          },
        },
        "ResourceLink": {
          "docs": undefined,
          "properties": {
            "href": {
              "docs": "The link url.",
              "type": "string",
            },
            "metadata": {
              "docs": "Additional data about the link.",
              "type": "optional<string>",
            },
            "method": {
              "docs": "The link method.",
              "type": "string",
            },
          },
        },
        "ResourcesDto": {
          "docs": undefined,
          "properties": {},
        },
        "RestoreJobDto": {
          "docs": undefined,
          "properties": {
            "log": {
              "docs": "The status log.",
              "type": "list<string>",
            },
            "started": {
              "docs": "The time when the job has been started.",
              "type": "string",
            },
            "status": {
              "docs": undefined,
              "type": "JobStatus",
            },
            "stopped": {
              "docs": "The time when the job has been stopped.",
              "type": "optional<string>",
            },
            "url": {
              "docs": "The uri to load from.",
              "type": "string",
            },
          },
        },
        "RoleDto": {
          "docs": undefined,
          "properties": {
            "isDefaultRole": {
              "docs": "Indicates if the role is an builtin default role.",
              "type": "optional<boolean>",
            },
            "name": {
              "docs": "The role name.",
              "type": "optional<string>",
            },
            "numClients": {
              "docs": "The number of clients with this role.",
              "type": "optional<integer>",
            },
            "numContributors": {
              "docs": "The number of contributors with this role.",
              "type": "optional<integer>",
            },
            "permissions": {
              "docs": "Associated list of permissions.",
              "type": "optional<list<string>>",
            },
            "properties": {
              "docs": "Associated list of UI properties.",
              "type": "optional<map<string, unknown>>",
            },
          },
        },
        "RolesDto": {
          "docs": undefined,
          "properties": {
            "items": {
              "docs": "The roles.",
              "type": "optional<list<RoleDto>>",
            },
          },
        },
        "RuleActionDto": {
          "base-properties": {
            "actionType": {
              "docs": undefined,
              "type": "string",
            },
          },
          "docs": undefined,
          "union": {
            "Algolia": {
              "docs": undefined,
              "type": "AlgoliaRuleActionDto",
            },
            "AzureQueue": {
              "docs": undefined,
              "type": "AzureQueueRuleActionDto",
            },
            "Comment": {
              "docs": undefined,
              "type": "CommentRuleActionDto",
            },
            "CreateContent": {
              "docs": undefined,
              "type": "CreateContentRuleActionDto",
            },
            "Discourse": {
              "docs": undefined,
              "type": "DiscourseRuleActionDto",
            },
            "ElasticSearch": {
              "docs": undefined,
              "type": "ElasticSearchRuleActionDto",
            },
            "Email": {
              "docs": undefined,
              "type": "EmailRuleActionDto",
            },
            "Fastly": {
              "docs": undefined,
              "type": "FastlyRuleActionDto",
            },
            "Medium": {
              "docs": undefined,
              "type": "MediumRuleActionDto",
            },
            "Notification": {
              "docs": undefined,
              "type": "NotificationRuleActionDto",
            },
            "OpenSearch": {
              "docs": undefined,
              "type": "OpenSearchRuleActionDto",
            },
            "Prerender": {
              "docs": undefined,
              "type": "PrerenderRuleActionDto",
            },
            "Script": {
              "docs": undefined,
              "type": "ScriptRuleActionDto",
            },
            "SignalR": {
              "docs": undefined,
              "type": "SignalRRuleActionDto",
            },
            "Slack": {
              "docs": undefined,
              "type": "SlackRuleActionDto",
            },
            "Tweet": {
              "docs": undefined,
              "type": "TweetRuleActionDto",
            },
            "Typesense": {
              "docs": undefined,
              "type": "TypesenseRuleActionDto",
            },
            "Webhook": {
              "docs": undefined,
              "type": "WebhookRuleActionDto",
            },
          },
        },
        "RuleDto": {
          "docs": undefined,
          "properties": {
            "action": {
              "docs": undefined,
              "type": "optional<RuleActionDto>",
            },
            "created": {
              "docs": "The date and time when the rule has been created.",
              "type": "optional<string>",
            },
            "createdBy": {
              "docs": "The user that has created the rule.",
              "type": "optional<string>",
            },
            "id": {
              "docs": "The ID of the rule.",
              "type": "optional<string>",
            },
            "isEnabled": {
              "docs": "Determines if the rule is enabled.",
              "type": "optional<boolean>",
            },
            "lastExecuted": {
              "docs": "The date and time when the rule was executed the last time.",
              "type": "optional<string>",
            },
            "lastModified": {
              "docs": "The date and time when the rule has been modified last.",
              "type": "optional<string>",
            },
            "lastModifiedBy": {
              "docs": "The user that has updated the rule.",
              "type": "optional<string>",
            },
            "name": {
              "docs": "Optional rule name.",
              "type": "optional<string>",
            },
            "numFailed": {
              "docs": "The number of failed executions.",
              "type": "optional<integer>",
            },
            "numSucceeded": {
              "docs": "The number of completed executions.",
              "type": "optional<integer>",
            },
            "trigger": {
              "docs": undefined,
              "type": "optional<RuleTriggerDto>",
            },
            "version": {
              "docs": "The version of the rule.",
              "type": "optional<integer>",
            },
          },
        },
        "RuleElementDto": {
          "docs": undefined,
          "properties": {
            "description": {
              "docs": "Describes the action or trigger type.",
              "type": "string",
            },
            "display": {
              "docs": "The label for the action or trigger type.",
              "type": "string",
            },
            "iconColor": {
              "docs": "The color for the icon.",
              "type": "optional<string>",
            },
            "iconImage": {
              "docs": "The image for the icon.",
              "type": "optional<string>",
            },
            "properties": {
              "docs": "The properties.",
              "type": "list<RuleElementPropertyDto>",
            },
            "readMore": {
              "docs": "The optional link to the product that is integrated.",
              "type": "optional<string>",
            },
            "title": {
              "docs": "Optional title.",
              "type": "optional<string>",
            },
          },
        },
        "RuleElementPropertyDto": {
          "docs": undefined,
          "properties": {
            "description": {
              "docs": "The optional description.",
              "type": "optional<string>",
            },
            "display": {
              "docs": "The label to use.",
              "type": "string",
            },
            "editor": {
              "docs": undefined,
              "type": "RuleFieldEditor",
            },
            "isFormattable": {
              "docs": "Indicates if the property is formattable.",
              "type": "boolean",
            },
            "isRequired": {
              "docs": "Indicates if the property is required.",
              "type": "boolean",
            },
            "name": {
              "docs": "The name of the editor.",
              "type": "string",
            },
            "options": {
              "docs": "The options, if the editor is a dropdown.",
              "type": "optional<list<string>>",
            },
          },
        },
        "RuleEventDto": {
          "docs": undefined,
          "properties": {
            "created": {
              "docs": "The time when the event has been created.",
              "type": "optional<string>",
            },
            "description": {
              "docs": "The description.",
              "type": "optional<string>",
            },
            "eventName": {
              "docs": "The name of the event.",
              "type": "optional<string>",
            },
            "id": {
              "docs": "The ID of the event.",
              "type": "optional<string>",
            },
            "jobResult": {
              "docs": undefined,
              "type": "optional<RuleJobResult>",
            },
            "lastDump": {
              "docs": "The last dump.",
              "type": "optional<string>",
            },
            "nextAttempt": {
              "docs": "The next attempt.",
              "type": "optional<string>",
            },
            "numCalls": {
              "docs": "The number of calls.",
              "type": "optional<integer>",
            },
            "result": {
              "docs": undefined,
              "type": "optional<RuleResult>",
            },
          },
        },
        "RuleEventsDto": {
          "docs": undefined,
          "properties": {
            "items": {
              "docs": "The rule events.",
              "type": "optional<list<RuleEventDto>>",
            },
            "total": {
              "docs": "The total number of rule events.",
              "type": "optional<integer>",
            },
          },
        },
        "RuleFieldEditor": {
          "docs": "",
          "enum": [
            {
              "name": "Checkbox",
              "value": "Checkbox",
            },
            {
              "name": "Dropdown",
              "value": "Dropdown",
            },
            {
              "name": "Email",
              "value": "Email",
            },
            {
              "name": "Javascript",
              "value": "Javascript",
            },
            {
              "name": "Number",
              "value": "Number",
            },
            {
              "name": "Password",
              "value": "Password",
            },
            {
              "name": "Text",
              "value": "Text",
            },
            {
              "name": "TextArea",
              "value": "TextArea",
            },
            {
              "name": "Url",
              "value": "Url",
            },
          ],
        },
        "RuleJobResult": {
          "docs": "",
          "enum": [
            {
              "name": "Pending",
              "value": "Pending",
            },
            {
              "name": "Success",
              "value": "Success",
            },
            {
              "name": "Retry",
              "value": "Retry",
            },
            {
              "name": "Failed",
              "value": "Failed",
            },
            {
              "name": "Cancelled",
              "value": "Cancelled",
            },
          ],
        },
        "RuleResult": {
          "docs": "",
          "enum": [
            {
              "name": "Pending",
              "value": "Pending",
            },
            {
              "name": "Success",
              "value": "Success",
            },
            {
              "name": "Failed",
              "value": "Failed",
            },
            {
              "name": "Timeout",
              "value": "Timeout",
            },
          ],
        },
        "RuleTriggerDto": {
          "base-properties": {
            "triggerType": {
              "docs": undefined,
              "type": "string",
            },
          },
          "docs": undefined,
          "union": {
            "AssetChanged": {
              "docs": undefined,
              "type": "AssetChangedRuleTriggerDto",
            },
            "Comment": {
              "docs": undefined,
              "type": "CommentRuleTriggerDto",
            },
            "ContentChanged": {
              "docs": undefined,
              "type": "ContentChangedRuleTriggerDto",
            },
            "Manual": {
              "docs": undefined,
              "type": "ManualRuleTriggerDto",
            },
            "SchemaChanged": {
              "docs": undefined,
              "type": "SchemaChangedRuleTriggerDto",
            },
            "Usage": {
              "docs": undefined,
              "type": "UsageRuleTriggerDto",
            },
          },
        },
        "RulesDto": {
          "docs": undefined,
          "properties": {
            "items": {
              "docs": "The rules.",
              "type": "optional<list<RuleDto>>",
            },
            "runningRuleId": {
              "docs": "The ID of the rule that is currently rerunning.",
              "type": "optional<string>",
            },
          },
        },
        "ScheduleJobDto": {
          "docs": undefined,
          "properties": {
            "color": {
              "docs": "The color of the scheduled status.",
              "type": "string",
            },
            "dueTime": {
              "docs": "The target date and time when the content should be scheduled.",
              "type": "string",
            },
            "id": {
              "docs": "The ID of the schedule job.",
              "type": "string",
            },
            "scheduledBy": {
              "docs": "The user who schedule the content.",
              "type": "string",
            },
            "status": {
              "docs": "The new status.",
              "type": "string",
            },
          },
        },
        "SchemaChangedRuleTriggerDto": {
          "docs": undefined,
          "properties": {
            "condition": {
              "docs": "Javascript condition when to trigger.",
              "type": "optional<string>",
            },
          },
        },
        "SchemaCondition": {
          "docs": undefined,
          "properties": {
            "condition": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "schemaId": {
              "docs": undefined,
              "type": "string",
            },
          },
        },
        "SchemaDto": {
          "docs": undefined,
          "properties": {
            "category": {
              "docs": "The name of the category.",
              "type": "optional<string>",
            },
            "created": {
              "docs": "The date and time when the schema has been created.",
              "type": "optional<string>",
            },
            "createdBy": {
              "docs": "The user that has created the schema.",
              "type": "optional<string>",
            },
            "fieldRules": {
              "docs": "The field rules.",
              "type": "optional<list<FieldRuleDto>>",
            },
            "fields": {
              "docs": "The list of fields.",
              "type": "optional<list<FieldDto>>",
            },
            "fieldsInLists": {
              "docs": "The name of fields that are used in content lists.",
              "type": "optional<list<string>>",
            },
            "fieldsInReferences": {
              "docs": "The name of fields that are used in content references.",
              "type": "optional<list<string>>",
            },
            "id": {
              "docs": "The ID of the schema.",
              "type": "optional<string>",
            },
            "isPublished": {
              "docs": "Indicates if the schema is published.",
              "type": "optional<boolean>",
            },
            "isSingleton": {
              "docs": "Indicates if the schema is a singleton.",
              "type": "optional<boolean>",
            },
            "lastModified": {
              "docs": "The date and time when the schema has been modified last.",
              "type": "optional<string>",
            },
            "lastModifiedBy": {
              "docs": "The user that has updated the schema.",
              "type": "optional<string>",
            },
            "name": {
              "docs": "The name of the schema. Unique within the app.",
              "type": "optional<string>",
            },
            "previewUrls": {
              "docs": "The preview Urls.",
              "type": "optional<map<string, optional<string>>>",
            },
            "properties": {
              "docs": undefined,
              "type": "optional<SchemaPropertiesDto>",
            },
            "scripts": {
              "docs": undefined,
              "type": "optional<SchemaScriptsDto>",
            },
            "type": {
              "docs": undefined,
              "type": "optional<SchemaType>",
            },
            "version": {
              "docs": "The version of the schema.",
              "type": "optional<integer>",
            },
          },
        },
        "SchemaPropertiesDto": {
          "docs": undefined,
          "properties": {
            "contentEditorUrl": {
              "docs": "The url to the editor plugin.",
              "type": "optional<string>",
            },
            "contentSidebarUrl": {
              "docs": "The url to a the sidebar plugin for content items.",
              "type": "optional<string>",
            },
            "contentsSidebarUrl": {
              "docs": "The url to a the sidebar plugin for content lists.",
              "type": "optional<string>",
            },
            "hints": {
              "docs": "Hints to describe the schema.",
              "type": "optional<string>",
            },
            "label": {
              "docs": "Optional label for the editor.",
              "type": "optional<string>",
            },
            "tags": {
              "docs": "Tags for automation processes.",
              "type": "optional<list<string>>",
            },
            "validateOnPublish": {
              "docs": "True to validate the content items on publish.",
              "type": "boolean",
            },
          },
        },
        "SchemaScriptsDto": {
          "docs": undefined,
          "properties": {
            "change": {
              "docs": "The script that is executed when change a content status.",
              "type": "optional<string>",
            },
            "create": {
              "docs": "The script that is executed when creating a content.",
              "type": "optional<string>",
            },
            "delete": {
              "docs": "The script that is executed when deleting a content.",
              "type": "optional<string>",
            },
            "query": {
              "docs": "The script that is executed for each content when querying contents.",
              "type": "optional<string>",
            },
            "queryPre": {
              "docs": "The script that is executed for all contents when querying contents.",
              "type": "optional<string>",
            },
            "update": {
              "docs": "The script that is executed when updating a content.",
              "type": "optional<string>",
            },
          },
        },
        "SchemaType": {
          "docs": "",
          "enum": [
            {
              "name": "Default",
              "value": "Default",
            },
            {
              "name": "Singleton",
              "value": "Singleton",
            },
            {
              "name": "Component",
              "value": "Component",
            },
          ],
        },
        "SchemasDto": {
          "docs": undefined,
          "properties": {
            "items": {
              "docs": "The schemas.",
              "type": "optional<list<SchemaDto>>",
            },
          },
        },
        "ScriptRuleActionDto": {
          "docs": undefined,
          "properties": {
            "script": {
              "docs": "The script to render.",
              "type": "optional<string>",
            },
          },
        },
        "SearchResultDto": {
          "docs": undefined,
          "properties": {
            "label": {
              "docs": "An optional label.",
              "type": "optional<string>",
            },
            "name": {
              "docs": "The name of the search result.",
              "type": "optional<string>",
            },
            "type": {
              "docs": undefined,
              "type": "optional<SearchResultType>",
            },
          },
        },
        "SearchResultType": {
          "docs": "",
          "enum": [
            {
              "name": "Asset",
              "value": "Asset",
            },
            {
              "name": "Content",
              "value": "Content",
            },
            {
              "name": "Dashboard",
              "value": "Dashboard",
            },
            {
              "name": "Setting",
              "value": "Setting",
            },
            {
              "name": "Rule",
              "value": "Rule",
            },
            {
              "name": "Schema",
              "value": "Schema",
            },
          ],
        },
        "SignalRRuleActionDto": {
          "docs": undefined,
          "properties": {
            "action": {
              "docs": undefined,
              "type": "optional<ActionTypeEnum>",
            },
            "connectionString": {
              "docs": "The connection string to the Azure SignalR.",
              "type": "optional<string>",
            },
            "hubName": {
              "docs": "The name of the hub.",
              "type": "optional<string>",
            },
            "methodName": {
              "docs": "Set the Name of the hub method received by the customer.",
              "type": "optional<string>",
            },
            "payload": {
              "docs": "Leave it empty to use the full event as body.",
              "type": "optional<string>",
            },
            "target": {
              "docs": "Define target users or groups by id or name. One item per line. Not needed for Broadcast action.",
              "type": "optional<string>",
            },
          },
        },
        "SimulatedRuleEventDto": {
          "docs": undefined,
          "properties": {
            "actionData": {
              "docs": "The name of the action.",
              "type": "optional<string>",
            },
            "actionName": {
              "docs": "The data for the action.",
              "type": "optional<string>",
            },
            "enrichedEvent": "unknown",
            "error": {
              "docs": "The name of the event.",
              "type": "optional<string>",
            },
            "event": "unknown",
            "eventId": {
              "docs": "The unique event id.",
              "type": "string",
            },
            "eventName": {
              "docs": "The name of the event.",
              "type": "string",
            },
            "skipReasons": {
              "docs": "The reason why the event has been skipped.",
              "type": "list<SkipReason>",
            },
            "uniqueId": {
              "docs": "The the unique id of the simulated event.",
              "type": "string",
            },
          },
        },
        "SimulatedRuleEventsDto": {
          "docs": undefined,
          "properties": {
            "items": {
              "docs": "The simulated rule events.",
              "type": "optional<list<SimulatedRuleEventDto>>",
            },
            "total": {
              "docs": "The total number of simulated rule events.",
              "type": "optional<integer>",
            },
          },
        },
        "SkipReason": {
          "docs": "",
          "enum": [
            {
              "name": "None",
              "value": "None",
            },
            {
              "name": "ConditionDoesNotMatch",
              "value": "ConditionDoesNotMatch",
            },
            {
              "name": "ConditionPrecheckDoesNotMatch",
              "value": "ConditionPrecheckDoesNotMatch",
            },
            {
              "name": "Disabled",
              "value": "Disabled",
            },
            {
              "name": "Failed",
              "value": "Failed",
            },
            {
              "name": "FromRule",
              "value": "FromRule",
            },
            {
              "name": "NoAction",
              "value": "NoAction",
            },
            {
              "name": "NoTrigger",
              "value": "NoTrigger",
            },
            {
              "name": "TooOld",
              "value": "TooOld",
            },
            {
              "name": "WrongEvent",
              "value": "WrongEvent",
            },
            {
              "name": "WrongEventForTrigger",
              "value": "WrongEventForTrigger",
            },
          ],
        },
        "SlackRuleActionDto": {
          "docs": undefined,
          "properties": {
            "text": {
              "docs": "The text that is sent as message to slack.",
              "type": "optional<string>",
            },
            "webhookUrl": {
              "docs": "The slack webhook url.",
              "type": "optional<string>",
            },
          },
        },
        "SortNode": {
          "docs": undefined,
          "properties": {
            "order": {
              "docs": undefined,
              "type": "SortOrder",
            },
            "path": {
              "docs": undefined,
              "type": "PropertyPath",
            },
          },
        },
        "SortOrder": {
          "docs": "",
          "enum": [
            {
              "name": "Ascending",
              "value": "Ascending",
            },
            {
              "name": "Descending",
              "value": "Descending",
            },
          ],
        },
        "StatusInfoDto": {
          "docs": undefined,
          "properties": {
            "color": {
              "docs": "The color of the status.",
              "type": "string",
            },
            "status": {
              "docs": "The name of the status.",
              "type": "string",
            },
          },
        },
        "StorageUsagePerDateDto": {
          "docs": undefined,
          "properties": {
            "date": {
              "docs": "The date when the usage was tracked.",
              "type": "string",
            },
            "totalCount": {
              "docs": "The number of assets.",
              "type": "integer",
            },
            "totalSize": {
              "docs": "The size in bytes.",
              "type": "integer",
            },
          },
        },
        "StringContentType": {
          "docs": "",
          "enum": [
            {
              "name": "Unspecified",
              "value": "Unspecified",
            },
            {
              "name": "Html",
              "value": "Html",
            },
            {
              "name": "Markdown",
              "value": "Markdown",
            },
          ],
        },
        "StringFieldEditor": {
          "docs": "",
          "enum": [
            {
              "name": "Input",
              "value": "Input",
            },
            {
              "name": "Color",
              "value": "Color",
            },
            {
              "name": "Markdown",
              "value": "Markdown",
            },
            {
              "name": "Dropdown",
              "value": "Dropdown",
            },
            {
              "name": "Html",
              "value": "Html",
            },
            {
              "name": "Radio",
              "value": "Radio",
            },
            {
              "name": "RichText",
              "value": "RichText",
            },
            {
              "name": "Slug",
              "value": "Slug",
            },
            {
              "name": "StockPhoto",
              "value": "StockPhoto",
            },
            {
              "name": "TextArea",
              "value": "TextArea",
            },
          ],
        },
        "StringFieldPropertiesDto": {
          "docs": undefined,
          "properties": {
            "allowedValues": {
              "docs": "The allowed values for the field value.",
              "type": "optional<list<string>>",
            },
            "contentType": {
              "docs": undefined,
              "type": "optional<StringContentType>",
            },
            "createEnum": {
              "docs": "Indicates whether GraphQL Enum should be created.",
              "type": "optional<boolean>",
            },
            "defaultValue": {
              "docs": "The default value for the field value.",
              "type": "optional<string>",
            },
            "defaultValues": {
              "docs": undefined,
              "type": "optional<LocalizedValueOfString>",
            },
            "editor": {
              "docs": undefined,
              "type": "optional<StringFieldEditor>",
            },
            "folderId": {
              "docs": "The initial id to the folder when the control supports file uploads.",
              "type": "optional<string>",
            },
            "inlineEditable": {
              "docs": "Indicates that the inline editor is enabled for this field.",
              "type": "optional<boolean>",
            },
            "isEmbeddable": {
              "docs": "Indicates that other content items or references are embedded.",
              "type": "optional<boolean>",
            },
            "isUnique": {
              "docs": "Indicates if the field value must be unique. Ignored for nested fields and localized fields.",
              "type": "optional<boolean>",
            },
            "maxCharacters": {
              "docs": "The maximum allowed of normal characters for the field value.",
              "type": "optional<integer>",
            },
            "maxLength": {
              "docs": "The maximum allowed length for the field value.",
              "type": "optional<integer>",
            },
            "maxWords": {
              "docs": "The maximum allowed number of words for the field value.",
              "type": "optional<integer>",
            },
            "minCharacters": {
              "docs": "The minimum allowed of normal characters for the field value.",
              "type": "optional<integer>",
            },
            "minLength": {
              "docs": "The minimum allowed length for the field value.",
              "type": "optional<integer>",
            },
            "minWords": {
              "docs": "The minimum allowed number of words for the field value.",
              "type": "optional<integer>",
            },
            "pattern": {
              "docs": "The pattern to enforce a specific format for the field value.",
              "type": "optional<string>",
            },
            "patternMessage": {
              "docs": "The validation message for the pattern.",
              "type": "optional<string>",
            },
            "schemaIds": {
              "docs": "The allowed schema ids that can be embedded.",
              "type": "optional<list<string>>",
            },
          },
        },
        "TagsFieldEditor": {
          "docs": "",
          "enum": [
            {
              "name": "Tags",
              "value": "Tags",
            },
            {
              "name": "Checkboxes",
              "value": "Checkboxes",
            },
            {
              "name": "Dropdown",
              "value": "Dropdown",
            },
          ],
        },
        "TagsFieldPropertiesDto": {
          "docs": undefined,
          "properties": {
            "allowedValues": {
              "docs": "The allowed values for the field value.",
              "type": "optional<list<string>>",
            },
            "createEnum": {
              "docs": "Indicates whether GraphQL Enum should be created.",
              "type": "optional<boolean>",
            },
            "defaultValue": {
              "docs": "The default value.",
              "type": "optional<list<string>>",
            },
            "defaultValues": {
              "docs": undefined,
              "type": "optional<LocalizedValueOfReadonlyListOfString>",
            },
            "editor": {
              "docs": undefined,
              "type": "optional<TagsFieldEditor>",
            },
            "maxItems": {
              "docs": "The maximum allowed items for the field value.",
              "type": "optional<integer>",
            },
            "minItems": {
              "docs": "The minimum allowed items for the field value.",
              "type": "optional<integer>",
            },
          },
        },
        "TeamDto": {
          "docs": undefined,
          "properties": {
            "created": {
              "docs": "The timestamp when the team has been created.",
              "type": "optional<string>",
            },
            "id": {
              "docs": "The ID of the team.",
              "type": "optional<string>",
            },
            "lastModified": {
              "docs": "The timestamp when the team has been modified last.",
              "type": "optional<string>",
            },
            "name": {
              "docs": "The name of the team.",
              "type": "optional<string>",
            },
            "roleName": {
              "docs": "The role name of the user.",
              "type": "optional<string>",
            },
            "version": {
              "docs": "The version of the team.",
              "type": "optional<integer>",
            },
          },
        },
        "TemplateDetailsDto": {
          "docs": undefined,
          "properties": {
            "details": {
              "docs": "The details of the template.",
              "type": "optional<string>",
            },
          },
        },
        "TemplateDto": {
          "docs": undefined,
          "properties": {
            "description": {
              "docs": "The description of the template.",
              "type": "optional<string>",
            },
            "isStarter": {
              "docs": "True, if the template is a starter.",
              "type": "optional<boolean>",
            },
            "name": {
              "docs": "The name of the template.",
              "type": "optional<string>",
            },
            "title": {
              "docs": "The title of the template.",
              "type": "optional<string>",
            },
          },
        },
        "TemplatesDto": {
          "docs": undefined,
          "properties": {
            "items": {
              "docs": "The event consumers.",
              "type": "optional<list<TemplateDto>>",
            },
          },
        },
        "TranslationDto": {
          "docs": undefined,
          "properties": {
            "result": {
              "docs": undefined,
              "type": "TranslationResultCode",
            },
            "text": {
              "docs": "The translated text.",
              "type": "optional<string>",
            },
          },
        },
        "TranslationResultCode": {
          "docs": "",
          "enum": [
            {
              "name": "Translated",
              "value": "Translated",
            },
            {
              "name": "LanguageNotSupported",
              "value": "LanguageNotSupported",
            },
            {
              "name": "NotTranslated",
              "value": "NotTranslated",
            },
            {
              "name": "NotConfigured",
              "value": "NotConfigured",
            },
            {
              "name": "Unauthorized",
              "value": "Unauthorized",
            },
            {
              "name": "Failed",
              "value": "Failed",
            },
          ],
        },
        "TweetRuleActionDto": {
          "docs": undefined,
          "properties": {
            "accessSecret": {
              "docs": " The generated access secret.",
              "type": "optional<string>",
            },
            "accessToken": {
              "docs": " The generated access token.",
              "type": "optional<string>",
            },
            "text": {
              "docs": "The text that is sent as tweet to twitter.",
              "type": "optional<string>",
            },
          },
        },
        "TypesenseRuleActionDto": {
          "docs": undefined,
          "properties": {
            "apiKey": {
              "docs": "The api key.",
              "type": "optional<string>",
            },
            "delete": {
              "docs": "The condition when to delete the document.",
              "type": "optional<string>",
            },
            "document": {
              "docs": "The optional custom document.",
              "type": "optional<string>",
            },
            "host": {
              "docs": "The url to the instance or cluster.",
              "type": "optional<string>",
            },
            "indexName": {
              "docs": "The name of the index.",
              "type": "optional<string>",
            },
          },
        },
        "UiFieldEditor": {
          "docs": "",
          "enum": [
            {
              "name": "Separator",
              "value": "Separator",
            },
          ],
        },
        "UiFieldPropertiesDto": {
          "docs": undefined,
          "properties": {
            "editor": {
              "docs": undefined,
              "type": "optional<UiFieldEditor>",
            },
          },
        },
        "UiSettingsDto": {
          "docs": undefined,
          "properties": {
            "canCreateApps": {
              "docs": "True when the user can create apps.",
              "type": "boolean",
            },
            "canCreateTeams": {
              "docs": "True when the user can create teams.",
              "type": "boolean",
            },
          },
        },
        "UpdateFieldDto": {
          "docs": undefined,
          "properties": {
            "properties": {
              "docs": undefined,
              "type": "FieldPropertiesDto",
            },
          },
        },
        "UpdateSettingDto": {
          "docs": undefined,
          "properties": {
            "value": "unknown",
          },
        },
        "UpsertCommentDto": {
          "docs": undefined,
          "properties": {
            "text": {
              "docs": "The comment text.",
              "type": "string",
            },
            "url": {
              "docs": "The url where the comment is created.",
              "type": "optional<string>",
            },
          },
        },
        "UpsertSchemaDto": {
          "docs": undefined,
          "properties": {
            "category": {
              "docs": "The category.",
              "type": "optional<string>",
            },
            "fieldRules": {
              "docs": "The optional field Rules.",
              "type": "optional<list<FieldRuleDto>>",
            },
            "fields": {
              "docs": "Optional fields.",
              "type": "optional<list<UpsertSchemaFieldDto>>",
            },
            "fieldsInLists": {
              "docs": "The names of the fields that should be shown in lists, including meta fields.",
              "type": "optional<list<string>>",
            },
            "fieldsInReferences": {
              "docs": "The names of the fields that should be used in references.",
              "type": "optional<list<string>>",
            },
            "isPublished": {
              "docs": "Set it to true to autopublish the schema.",
              "type": "boolean",
            },
            "previewUrls": {
              "docs": "The optional preview urls.",
              "type": "optional<map<string, optional<string>>>",
            },
            "properties": {
              "docs": undefined,
              "type": "optional<SchemaPropertiesDto>",
            },
            "scripts": {
              "docs": undefined,
              "type": "optional<SchemaScriptsDto>",
            },
          },
        },
        "UpsertSchemaFieldDto": {
          "docs": undefined,
          "properties": {
            "isDisabled": {
              "docs": "Defines if the field is disabled.",
              "type": "boolean",
            },
            "isHidden": {
              "docs": "Defines if the field is hidden.",
              "type": "boolean",
            },
            "isLocked": {
              "docs": "Defines if the field is locked.",
              "type": "boolean",
            },
            "name": {
              "docs": "The name of the field. Must be unique within the schema.",
              "type": "string",
            },
            "nested": {
              "docs": "The nested fields.",
              "type": "optional<list<UpsertSchemaNestedFieldDto>>",
            },
            "partitioning": {
              "docs": "Determines the optional partitioning of the field.",
              "type": "optional<string>",
            },
            "properties": {
              "docs": undefined,
              "type": "FieldPropertiesDto",
            },
          },
        },
        "UpsertSchemaNestedFieldDto": {
          "docs": undefined,
          "properties": {
            "isDisabled": {
              "docs": "Defines if the field is disabled.",
              "type": "boolean",
            },
            "isHidden": {
              "docs": "Defines if the field is hidden.",
              "type": "boolean",
            },
            "isLocked": {
              "docs": "Defines if the field is locked.",
              "type": "boolean",
            },
            "name": {
              "docs": "The name of the field. Must be unique within the schema.",
              "type": "string",
            },
            "properties": {
              "docs": undefined,
              "type": "FieldPropertiesDto",
            },
          },
        },
        "UsageRuleTriggerDto": {
          "docs": undefined,
          "properties": {
            "limit": {
              "docs": "The number of monthly api calls.",
              "type": "optional<integer>",
            },
            "numDays": {
              "docs": "The number of days to check or null for the current month.",
              "type": "optional<integer>",
            },
          },
        },
        "UserDto": {
          "docs": undefined,
          "properties": {
            "displayName": {
              "docs": "The display name (usually first name and last name) of the user.",
              "type": "optional<string>",
            },
            "email": {
              "docs": "The email of the user. Unique value.",
              "type": "optional<string>",
            },
            "id": {
              "docs": "The ID of the user.",
              "type": "optional<string>",
            },
            "isLocked": {
              "docs": "Determines if the user is locked.",
              "type": "optional<boolean>",
            },
            "permissions": {
              "docs": "Additional permissions for the user.",
              "type": "optional<list<string>>",
            },
          },
        },
        "UserProperty": {
          "docs": undefined,
          "properties": {
            "name": {
              "docs": undefined,
              "type": "string",
            },
            "value": {
              "docs": undefined,
              "type": "string",
            },
          },
        },
        "UsersDto": {
          "docs": undefined,
          "properties": {
            "items": {
              "docs": "The users.",
              "type": "optional<list<UserDto>>",
            },
            "total": {
              "docs": "The total number of users.",
              "type": "optional<integer>",
            },
          },
        },
        "WebhookMethod": {
          "docs": "",
          "enum": [
            {
              "name": "POST",
              "value": "POST",
            },
            {
              "name": "PUT",
              "value": "PUT",
            },
            {
              "name": "GET",
              "value": "GET",
            },
            {
              "name": "DELETE",
              "value": "DELETE",
            },
            {
              "name": "PATCH",
              "value": "PATCH",
            },
          ],
        },
        "WebhookRuleActionDto": {
          "docs": undefined,
          "properties": {
            "headers": {
              "docs": "The message headers in the format '[Key]=[Value]', one entry per line.",
              "type": "optional<string>",
            },
            "method": {
              "docs": undefined,
              "type": "optional<WebhookMethod>",
            },
            "payload": {
              "docs": "Leave it empty to use the full event as body.",
              "type": "optional<string>",
            },
            "payloadType": {
              "docs": "The mime type of the payload.",
              "type": "optional<string>",
            },
            "sharedSecret": {
              "docs": "The shared secret that is used to calculate the payload signature.",
              "type": "optional<string>",
            },
            "url": {
              "docs": "The url to the webhook.",
              "type": "optional<string>",
            },
          },
        },
        "WorkflowDto": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": "The workflow id.",
              "type": "optional<string>",
            },
            "initial": {
              "docs": "The initial step.",
              "type": "optional<string>",
            },
            "name": {
              "docs": "The name of the workflow.",
              "type": "optional<string>",
            },
            "schemaIds": {
              "docs": "The schema ids.",
              "type": "optional<list<string>>",
            },
            "steps": {
              "docs": "The workflow steps.",
              "type": "optional<map<string, optional<WorkflowStepDto>>>",
            },
          },
        },
        "WorkflowStepDto": {
          "docs": undefined,
          "properties": {
            "color": {
              "docs": "The optional color.",
              "type": "optional<string>",
            },
            "noUpdate": {
              "docs": "Indicates if updates should not be allowed.",
              "type": "optional<boolean>",
            },
            "noUpdateExpression": {
              "docs": "Optional expression that must evaluate to true when you want to prevent updates.",
              "type": "optional<string>",
            },
            "noUpdateRoles": {
              "docs": "Optional list of roles to restrict the updates for users with these roles.",
              "type": "optional<list<string>>",
            },
            "transitions": {
              "docs": "The transitions.",
              "type": "optional<map<string, optional<WorkflowTransitionDto>>>",
            },
            "validate": {
              "docs": "True if the content should be validated when moving to this step.",
              "type": "optional<boolean>",
            },
          },
        },
        "WorkflowTransitionDto": {
          "docs": undefined,
          "properties": {
            "expression": {
              "docs": "The optional expression.",
              "type": "optional<string>",
            },
            "roles": {
              "docs": "The optional restricted role.",
              "type": "optional<list<string>>",
            },
          },
        },
        "WorkflowsDto": {
          "docs": undefined,
          "properties": {
            "errors": {
              "docs": "The errros that should be fixed.",
              "type": "optional<list<string>>",
            },
            "items": {
              "docs": "The workflow.",
              "type": "optional<list<WorkflowDto>>",
            },
          },
        },
      },
    },
    "apps.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "deleteApp": {
            "auth": true,
            "method": "DELETE",
            "path": "/api/apps/{app}",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
            },
          },
          "deleteClient": {
            "auth": true,
            "method": "DELETE",
            "path": "/api/apps/{app}/clients/{id}",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Client deleted.",
              "type": "root.ClientsDto",
            },
          },
          "deleteContributor": {
            "auth": true,
            "method": "DELETE",
            "path": "/api/apps/{app}/contributors/{id}",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Contributor removed.",
              "type": "root.ContributorsDto",
            },
          },
          "deleteImage": {
            "auth": true,
            "method": "DELETE",
            "path": "/api/apps/{app}/image",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "App image removed.",
              "type": "root.AppDto",
            },
          },
          "deleteLanguage": {
            "auth": true,
            "method": "DELETE",
            "path": "/api/apps/{app}/languages/{language}",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "language": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Language deleted.",
              "type": "root.AppLanguagesDto",
            },
          },
          "deleteMyself": {
            "auth": true,
            "method": "DELETE",
            "path": "/api/apps/{app}/contributors/me",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Contributor removed.",
              "type": "root.ContributorsDto",
            },
          },
          "deleteRole": {
            "auth": true,
            "method": "DELETE",
            "path": "/api/apps/{app}/roles/{roleName}",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "roleName": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Role deleted.",
              "type": "root.RolesDto",
            },
          },
          "deleteWorkflow": {
            "auth": true,
            "method": "DELETE",
            "path": "/api/apps/{app}/workflows/{id}",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Workflow deleted.",
              "type": "root.WorkflowsDto",
            },
          },
          "getApp": {
            "auth": true,
            "method": "GET",
            "path": "/api/apps/{app}",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Apps returned.",
              "type": "root.AppDto",
            },
          },
          "getApps": {
            "auth": true,
            "method": "GET",
            "path": "/api/apps",
            "response": {
              "docs": "Apps returned.",
              "type": "list<root.AppDto>",
            },
          },
          "getAssetScripts": {
            "auth": true,
            "method": "GET",
            "path": "/api/apps/{app}/assets/scripts",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Asset scripts returned.",
              "type": "root.AssetScriptsDto",
            },
          },
          "getClients": {
            "auth": true,
            "method": "GET",
            "path": "/api/apps/{app}/clients",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Clients returned.",
              "type": "root.ClientsDto",
            },
          },
          "getContributors": {
            "auth": true,
            "method": "GET",
            "path": "/api/apps/{app}/contributors",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Contributors returned.",
              "type": "root.ContributorsDto",
            },
          },
          "getImage": {
            "auth": true,
            "method": "GET",
            "path": "/api/apps/{app}/image",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "App image found and content or (resized) image returned.",
              "type": "file",
            },
          },
          "getLanguages": {
            "auth": true,
            "method": "GET",
            "path": "/api/apps/{app}/languages",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Languages returned.",
              "type": "root.AppLanguagesDto",
            },
          },
          "getPermissions": {
            "auth": true,
            "method": "GET",
            "path": "/api/apps/{app}/roles/permissions",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "App permissions returned.",
              "type": "list<string>",
            },
          },
          "getRoles": {
            "auth": true,
            "method": "GET",
            "path": "/api/apps/{app}/roles",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Roles returned.",
              "type": "root.RolesDto",
            },
          },
          "getSettings": {
            "auth": true,
            "method": "GET",
            "path": "/api/apps/{app}/settings",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "App settings returned.",
              "type": "root.AppSettingsDto",
            },
          },
          "getTeamApps": {
            "auth": true,
            "method": "GET",
            "path": "/api/teams/{team}/apps",
            "path-parameters": {
              "team": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Apps returned.",
              "type": "list<root.AppDto>",
            },
          },
          "getWorkflows": {
            "auth": true,
            "method": "GET",
            "path": "/api/apps/{app}/workflows",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Workflows returned.",
              "type": "root.WorkflowsDto",
            },
          },
          "postApp": {
            "auth": true,
            "method": "POST",
            "path": "/api/apps",
            "request": {
              "body": {
                "properties": {
                  "name": {
                    "docs": "The name of the app.",
                    "type": "string",
                  },
                  "template": {
                    "docs": "Initialize the app with the inbuilt template.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "CreateAppDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "App created.",
              "type": "root.AppDto",
            },
          },
          "postClient": {
            "auth": true,
            "method": "POST",
            "path": "/api/apps/{app}/clients",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The ID of the client.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "CreateClientDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Client created.",
              "type": "root.ClientsDto",
            },
          },
          "postContributor": {
            "auth": true,
            "method": "POST",
            "path": "/api/apps/{app}/contributors",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.AssignContributorDto",
              },
            },
            "response": {
              "docs": "Contributor assigned to app.",
              "type": "root.ContributorsDto",
            },
          },
          "postLanguage": {
            "auth": true,
            "method": "POST",
            "path": "/api/apps/{app}/languages",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "language": {
                    "docs": "The language to add.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "AddLanguageDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Language created.",
              "type": "root.AppLanguagesDto",
            },
          },
          "postRole": {
            "auth": true,
            "method": "POST",
            "path": "/api/apps/{app}/roles",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "name": {
                    "docs": "The role name.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "AddRoleDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Role created.",
              "type": "root.RolesDto",
            },
          },
          "postWorkflow": {
            "auth": true,
            "method": "POST",
            "path": "/api/apps/{app}/workflows",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "name": {
                    "docs": "The name of the workflow.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "AddWorkflowDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Workflow created.",
              "type": "root.WorkflowsDto",
            },
          },
          "putApp": {
            "auth": true,
            "method": "PUT",
            "path": "/api/apps/{app}",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "description": {
                    "docs": "The optional description of your app.",
                    "type": "optional<string>",
                  },
                  "label": {
                    "docs": "The optional label of your app.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateAppDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "App updated.",
              "type": "root.AppDto",
            },
          },
          "putAppTeam": {
            "auth": true,
            "method": "PUT",
            "path": "/api/apps/{app}/team",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "teamId": {
                    "docs": "The ID of the team.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "TransferToTeamDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "App transferred.",
              "type": "root.AppDto",
            },
          },
          "putAssetScripts": {
            "auth": true,
            "method": "PUT",
            "path": "/api/apps/{app}/assets/scripts",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "annotate": {
                    "docs": "The script that is executed when annotating a content.",
                    "type": "optional<string>",
                  },
                  "create": {
                    "docs": "The script that is executed when creating an asset.",
                    "type": "optional<string>",
                  },
                  "delete": {
                    "docs": "The script that is executed when deleting a content.",
                    "type": "optional<string>",
                  },
                  "move": {
                    "docs": "The script that is executed when moving a content.",
                    "type": "optional<string>",
                  },
                  "query": {
                    "docs": "The script that is executed for each asset when querying assets.",
                    "type": "optional<string>",
                  },
                  "queryPre": {
                    "docs": "The script that is executed for all assets when querying assets.",
                    "type": "optional<string>",
                  },
                  "update": {
                    "docs": "The script that is executed when updating a content.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateAssetScriptsDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Asset scripts updated.",
              "type": "root.AssetScriptsDto",
            },
          },
          "putClient": {
            "auth": true,
            "method": "PUT",
            "path": "/api/apps/{app}/clients/{id}",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "allowAnonymous": {
                    "docs": "True to allow anonymous access without an access token for this client.",
                    "type": "optional<boolean>",
                  },
                  "apiCallsLimit": {
                    "docs": "The number of allowed api calls per month for this client.",
                    "type": "optional<integer>",
                  },
                  "apiTrafficLimit": {
                    "docs": "The number of allowed api traffic bytes per month for this client.",
                    "type": "optional<integer>",
                  },
                  "name": {
                    "docs": "The new display name of the client.",
                    "type": "optional<string>",
                  },
                  "role": {
                    "docs": "The role of the client.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateClientDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Client updated.",
              "type": "root.ClientsDto",
            },
          },
          "putLanguage": {
            "auth": true,
            "method": "PUT",
            "path": "/api/apps/{app}/languages/{language}",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "language": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "fallback": {
                    "docs": "Optional fallback languages.",
                    "type": "optional<list<string>>",
                  },
                  "isMaster": {
                    "docs": "Set the value to true to make the language the master.",
                    "type": "optional<boolean>",
                  },
                  "isOptional": {
                    "docs": "Set the value to true to make the language optional.",
                    "type": "optional<boolean>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateLanguageDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Language updated.",
              "type": "root.AppLanguagesDto",
            },
          },
          "putRole": {
            "auth": true,
            "method": "PUT",
            "path": "/api/apps/{app}/roles/{roleName}",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "roleName": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "permissions": {
                    "docs": "Associated list of permissions.",
                    "type": "list<string>",
                  },
                  "properties": {
                    "docs": "Associated list of UI properties.",
                    "type": "optional<map<string, unknown>>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateRoleDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Role updated.",
              "type": "root.RolesDto",
            },
          },
          "putSettings": {
            "auth": true,
            "method": "PUT",
            "path": "/api/apps/{app}/settings",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "editors": {
                    "docs": "The configured UI editors.",
                    "type": "list<root.EditorDto>",
                  },
                  "hideDateTimeModeButton": {
                    "docs": "Hide the datetime mode button.",
                    "type": "optional<boolean>",
                  },
                  "hideScheduler": {
                    "docs": "Hide the scheduler for content items.",
                    "type": "optional<boolean>",
                  },
                  "patterns": {
                    "docs": "The configured app patterns.",
                    "type": "list<root.PatternDto>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateAppSettingsDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "App updated.",
              "type": "root.AppSettingsDto",
            },
          },
          "putWorkflow": {
            "auth": true,
            "method": "PUT",
            "path": "/api/apps/{app}/workflows/{id}",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "initial": {
                    "docs": "The initial step.",
                    "type": "string",
                  },
                  "name": {
                    "docs": "The name of the workflow.",
                    "type": "optional<string>",
                  },
                  "schemaIds": {
                    "docs": "The schema ids.",
                    "type": "optional<list<string>>",
                  },
                  "steps": {
                    "docs": "The workflow steps.",
                    "type": "map<string, root.WorkflowStepDto>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateWorkflowDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Workflow updated.",
              "type": "root.WorkflowsDto",
            },
          },
          "uploadImage": {
            "auth": true,
            "method": "POST",
            "path": "/api/apps/{app}/image",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "file": "file",
                },
              },
              "headers": undefined,
              "name": "AppsUploadImageRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "App image uploaded.",
              "type": "root.AppDto",
            },
          },
        },
      },
    },
    "assets.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "bulkUpdateAssets": {
            "auth": true,
            "method": "POST",
            "path": "/api/apps/{app}/assets/bulk",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "checkReferrers": {
                    "docs": "True to check referrers of deleted assets.",
                    "type": "optional<boolean>",
                  },
                  "doNotScript": {
                    "docs": "True to turn off scripting for faster inserts. Default: true.",
                    "type": "optional<boolean>",
                  },
                  "jobs": {
                    "docs": "The contents to update or insert.",
                    "type": "optional<list<root.BulkUpdateAssetsJobDto>>",
                  },
                  "optimizeValidation": {
                    "docs": "True to turn off costly validation: Folder checks. Default: true.",
                    "type": "optional<boolean>",
                  },
                },
              },
              "headers": undefined,
              "name": "BulkUpdateAssetsDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Assets created, update or delete.",
              "type": "list<root.BulkResultDto>",
            },
          },
          "deleteAsset": {
            "auth": true,
            "method": "DELETE",
            "path": "/api/apps/{app}/assets/{id}",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "name": "AssetsDeleteAssetRequest",
              "query-parameters": {
                "CheckReferrers": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<boolean>",
                },
                "Permanent": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<boolean>",
                },
              },
            },
          },
          "deleteAssetFolder": {
            "auth": true,
            "method": "DELETE",
            "path": "/api/apps/{app}/assets/folders/{id}",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
          },
          "getAsset": {
            "auth": true,
            "method": "GET",
            "path": "/api/apps/{app}/assets/{id}",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Asset found.",
              "type": "root.AssetDto",
            },
          },
          "getAssetContent": {
            "auth": true,
            "method": "GET",
            "path": "/api/assets/{id}",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "name": "AssetsGetAssetContentRequest",
              "query-parameters": {
                "auto": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<boolean>",
                },
                "bg": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "cache": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "download": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "focusX": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<double>",
                },
                "focusY": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<double>",
                },
                "force": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<boolean>",
                },
                "format": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.ImageFormat>",
                },
                "height": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "mode": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.ResizeMode>",
                },
                "nofocus": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<boolean>",
                },
                "quality": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "version": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "width": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Asset found and content or (resized) image returned.",
              "type": "file",
            },
          },
          "getAssetContentBySlug": {
            "auth": true,
            "method": "GET",
            "path": "/api/assets/{app}/{idOrSlug}/{more}",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "idOrSlug": {
                "docs": undefined,
                "type": "string",
              },
              "more": {
                "docs": undefined,
                "type": "optional<string>",
              },
            },
            "request": {
              "name": "AssetsGetAssetContentBySlugRequest",
              "query-parameters": {
                "auto": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<boolean>",
                },
                "bg": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "cache": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "download": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "focusX": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<double>",
                },
                "focusY": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<double>",
                },
                "force": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<boolean>",
                },
                "format": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.ImageFormat>",
                },
                "height": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "mode": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.ResizeMode>",
                },
                "nofocus": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<boolean>",
                },
                "quality": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "version": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "width": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Asset found and content or (resized) image returned.",
              "type": "file",
            },
          },
          "getAssetFolders": {
            "auth": true,
            "method": "GET",
            "path": "/api/apps/{app}/assets/folders",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "name": "AssetsGetAssetFoldersRequest",
              "query-parameters": {
                "parentId": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "scope": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<root.AssetFolderScope>",
                },
              },
            },
            "response": {
              "docs": "Asset folders returned.",
              "type": "root.AssetFoldersDto",
            },
          },
          "getAssets": {
            "auth": true,
            "method": "GET",
            "path": "/api/apps/{app}/assets",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "name": "AssetsGetAssetsRequest",
              "query-parameters": {
                "$filter": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "$orderby": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "$skip": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<double>",
                },
                "$top": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<double>",
                },
                "ids": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "parentId": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "q": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Assets returned.",
              "type": "root.AssetsDto",
            },
          },
          "getAssetsPost": {
            "auth": true,
            "method": "POST",
            "path": "/api/apps/{app}/assets/query",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.QueryDto",
              },
            },
            "response": {
              "docs": "Assets returned.",
              "type": "root.AssetsDto",
            },
          },
          "getTags": {
            "auth": true,
            "method": "GET",
            "path": "/api/apps/{app}/assets/tags",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Assets tags returned.",
              "type": "map<string, integer>",
            },
          },
          "postAsset": {
            "auth": true,
            "method": "POST",
            "path": "/api/apps/{app}/assets",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "File": "file",
                },
              },
              "headers": undefined,
              "name": "AssetsPostAssetRequest",
              "query-parameters": {
                "Duplicate": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<boolean>",
                },
                "Id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "ParentId": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Asset created.",
              "type": "root.AssetDto",
            },
          },
          "postAssetFolder": {
            "auth": true,
            "method": "POST",
            "path": "/api/apps/{app}/assets/folders",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "folderName": {
                    "docs": "The name of the folder.",
                    "type": "string",
                  },
                  "parentId": {
                    "docs": "The ID of the parent folder.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "CreateAssetFolderDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Asset folder created.",
              "type": "root.AssetFolderDto",
            },
          },
          "postUpsertAsset": {
            "auth": true,
            "method": "POST",
            "path": "/api/apps/{app}/assets/{id}",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "File": "file",
                },
              },
              "headers": undefined,
              "name": "AssetsPostUpsertAssetRequest",
              "query-parameters": {
                "Duplicate": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<boolean>",
                },
                "ParentId": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Asset created or updated.",
              "type": "root.AssetDto",
            },
          },
          "putAsset": {
            "auth": true,
            "method": "PUT",
            "path": "/api/apps/{app}/assets/{id}",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "fileName": {
                    "docs": "The new name of the asset.",
                    "type": "optional<string>",
                  },
                  "isProtected": {
                    "docs": "True, when the asset is not public.",
                    "type": "optional<boolean>",
                  },
                  "metadata": {
                    "docs": "The asset metadata.",
                    "type": "optional<map<string, unknown>>",
                  },
                  "slug": {
                    "docs": "The new slug of the asset.",
                    "type": "optional<string>",
                  },
                  "tags": {
                    "docs": "The new asset tags.",
                    "type": "optional<list<string>>",
                  },
                },
              },
              "headers": undefined,
              "name": "AnnotateAssetDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Asset updated.",
              "type": "root.AssetDto",
            },
          },
          "putAssetContent": {
            "auth": true,
            "method": "PUT",
            "path": "/api/apps/{app}/assets/{id}/content",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "file": "file",
                },
              },
              "headers": undefined,
              "name": "AssetsPutAssetContentRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Asset updated.",
              "type": "root.AssetDto",
            },
          },
          "putAssetFolder": {
            "auth": true,
            "method": "PUT",
            "path": "/api/apps/{app}/assets/folders/{id}",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "folderName": {
                    "docs": "The name of the folder.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "RenameAssetFolderDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Asset folder updated.",
              "type": "root.AssetFolderDto",
            },
          },
          "putAssetFolderParent": {
            "auth": true,
            "method": "PUT",
            "path": "/api/apps/{app}/assets/folders/{id}/parent",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "parentId": {
                    "docs": "The parent folder id.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "MoveAssetFolderDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Asset folder moved.",
              "type": "root.AssetFolderDto",
            },
          },
          "putAssetParent": {
            "auth": true,
            "method": "PUT",
            "path": "/api/apps/{app}/assets/{id}/parent",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "parentId": {
                    "docs": "The parent folder id.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "MoveAssetDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Asset moved.",
              "type": "root.AssetDto",
            },
          },
          "putTag": {
            "auth": true,
            "method": "PUT",
            "path": "/api/apps/{app}/assets/tags/{name}",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "name": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "tagName": {
                    "docs": "The new name for the tag.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "RenameTagDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Asset tag renamed and new tags returned.",
              "type": "map<string, integer>",
            },
          },
        },
      },
    },
    "backups.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "deleteBackup": {
            "auth": true,
            "method": "DELETE",
            "path": "/api/apps/{app}/backups/{id}",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
          },
          "getBackupContent": {
            "auth": true,
            "method": "GET",
            "path": "/api/apps/{app}/backups/{id}",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Backup found and content returned.",
              "type": "file",
            },
          },
          "getBackupContentV2": {
            "auth": true,
            "method": "GET",
            "path": "/api/apps/backups/{id}",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "name": "BackupsGetBackupContentV2Request",
              "query-parameters": {
                "app": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "appId": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Backup found and content returned.",
              "type": "file",
            },
          },
          "getBackups": {
            "auth": true,
            "method": "GET",
            "path": "/api/apps/{app}/backups",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Backups returned.",
              "type": "root.BackupJobsDto",
            },
          },
          "getRestoreJob": {
            "auth": true,
            "method": "GET",
            "path": "/api/apps/restore",
            "response": {
              "docs": "Status returned.",
              "type": "root.RestoreJobDto",
            },
          },
          "postBackup": {
            "auth": true,
            "method": "POST",
            "path": "/api/apps/{app}/backups",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
            },
          },
          "postRestoreJob": {
            "auth": true,
            "method": "POST",
            "path": "/api/apps/restore",
            "request": {
              "body": {
                "properties": {
                  "name": {
                    "docs": "The name of the app.",
                    "type": "optional<string>",
                  },
                  "url": {
                    "docs": "The url to the restore file.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "RestoreRequestDto",
              "query-parameters": undefined,
            },
          },
        },
      },
    },
    "comments.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "deleteComment": {
            "auth": true,
            "method": "DELETE",
            "path": "/api/apps/{app}/comments/{commentsId}/{commentId}",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "commentId": {
                "docs": undefined,
                "type": "string",
              },
              "commentsId": {
                "docs": undefined,
                "type": "string",
              },
            },
          },
          "getComments": {
            "auth": true,
            "method": "GET",
            "path": "/api/apps/{app}/comments/{commentsId}",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "commentsId": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "name": "CommentsGetCommentsRequest",
              "query-parameters": {
                "version": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Comments returned.",
              "type": "root.CommentsDto",
            },
          },
          "getWatchingUsers": {
            "auth": true,
            "method": "GET",
            "path": "/api/apps/{app}/watching/{resource}",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "resource": {
                "docs": undefined,
                "type": "optional<string>",
              },
            },
            "response": {
              "docs": "Watching users returned.",
              "type": "list<string>",
            },
          },
          "postComment": {
            "auth": true,
            "method": "POST",
            "path": "/api/apps/{app}/comments/{commentsId}",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "commentsId": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.UpsertCommentDto",
              },
            },
            "response": {
              "docs": "Comment created.",
              "type": "root.CommentDto",
            },
          },
          "putComment": {
            "auth": true,
            "method": "PUT",
            "path": "/api/apps/{app}/comments/{commentsId}/{commentId}",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "commentId": {
                "docs": undefined,
                "type": "string",
              },
              "commentsId": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.UpsertCommentDto",
              },
            },
          },
        },
      },
    },
    "contents.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "bulkUpdateContents": {
            "auth": true,
            "method": "POST",
            "path": "/api/content/{app}/{schema}/bulk",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "schema": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "checkReferrers": {
                    "docs": "True to check referrers of deleted contents.",
                    "type": "optional<boolean>",
                  },
                  "doNotScript": {
                    "docs": "True to turn off scripting for faster inserts. Default: true.",
                    "type": "optional<boolean>",
                  },
                  "doNotValidate": {
                    "docs": "True to turn off validation for faster inserts. Default: false.",
                    "type": "optional<boolean>",
                  },
                  "doNotValidateWorkflow": {
                    "docs": "True to turn off validation of workflow rules. Default: false.",
                    "type": "optional<boolean>",
                  },
                  "jobs": {
                    "docs": "The contents to update or insert.",
                    "type": "list<root.BulkUpdateContentsJobDto>",
                  },
                  "optimizeValidation": {
                    "docs": "True to turn off costly validation: Unique checks, asset checks and reference checks. Default: true.",
                    "type": "optional<boolean>",
                  },
                  "publish": {
                    "docs": "True to automatically publish the content.",
                    "type": "optional<boolean>",
                  },
                },
              },
              "headers": undefined,
              "name": "BulkUpdateContentsDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "",
              "type": "list<root.BulkResultDto>",
            },
          },
          "createDraft": {
            "auth": true,
            "method": "POST",
            "path": "/api/content/{app}/{schema}/{id}/draft",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "string",
              },
              "schema": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Content draft created.",
              "type": "root.ContentsDto",
            },
          },
          "deleteContent": {
            "auth": true,
            "method": "DELETE",
            "path": "/api/content/{app}/{schema}/{id}",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "string",
              },
              "schema": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "name": "ContentsDeleteContentRequest",
              "query-parameters": {
                "CheckReferrers": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<boolean>",
                },
                "Permanent": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<boolean>",
                },
              },
            },
          },
          "deleteContentStatus": {
            "auth": true,
            "method": "DELETE",
            "path": "/api/content/{app}/{schema}/{id}/status",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "string",
              },
              "schema": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Content status change cancelled.",
              "type": "root.ContentsDto",
            },
          },
          "deleteVersion": {
            "auth": true,
            "method": "DELETE",
            "path": "/api/content/{app}/{schema}/{id}/draft",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "string",
              },
              "schema": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Content draft deleted.",
              "type": "root.ContentsDto",
            },
          },
          "getContent": {
            "auth": true,
            "method": "GET",
            "path": "/api/content/{app}/{schema}/{id}",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "string",
              },
              "schema": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "name": "ContentsGetContentRequest",
              "query-parameters": {
                "version": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Content returned.",
              "type": "root.ContentDto",
            },
          },
          "getContentValidity": {
            "auth": true,
            "method": "GET",
            "path": "/api/content/{app}/{schema}/{id}/validity",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "string",
              },
              "schema": {
                "docs": undefined,
                "type": "string",
              },
            },
          },
          "getContentVersion": {
            "auth": true,
            "method": "GET",
            "path": "/api/content/{app}/{schema}/{id}/{version}",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "string",
              },
              "schema": {
                "docs": undefined,
                "type": "string",
              },
              "version": {
                "docs": undefined,
                "type": "integer",
              },
            },
            "response": {
              "docs": "Content version returned.",
              "type": "file",
            },
          },
          "getContents": {
            "auth": true,
            "method": "GET",
            "path": "/api/content/{app}/{schema}",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "schema": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "name": "ContentsGetContentsRequest",
              "query-parameters": {
                "ids": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "q": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Contents returned.",
              "type": "root.ContentsDto",
            },
          },
          "getContentsPost": {
            "auth": true,
            "method": "POST",
            "path": "/api/content/{app}/{schema}/query",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "schema": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.QueryDto",
              },
            },
            "response": {
              "docs": "Contents returned.",
              "type": "root.ContentsDto",
            },
          },
          "getReferences": {
            "auth": true,
            "method": "GET",
            "path": "/api/content/{app}/{schema}/{id}/references",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "string",
              },
              "schema": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "name": "ContentsGetReferencesRequest",
              "query-parameters": {
                "q": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Contents returned.",
              "type": "root.ContentsDto",
            },
          },
          "getReferencing": {
            "auth": true,
            "method": "GET",
            "path": "/api/content/{app}/{schema}/{id}/referencing",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "string",
              },
              "schema": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "name": "ContentsGetReferencingRequest",
              "query-parameters": {
                "q": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Content returned.",
              "type": "root.ContentsDto",
            },
          },
          "patchContent": {
            "auth": true,
            "method": "PATCH",
            "path": "/api/content/{app}/{schema}/{id}",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "string",
              },
              "schema": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "map<string, root.ContentFieldData>",
              },
            },
            "response": {
              "docs": "Content patched.",
              "type": "root.ContentsDto",
            },
          },
          "postContent": {
            "auth": true,
            "method": "POST",
            "path": "/api/content/{app}/{schema}",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "schema": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "map<string, root.ContentFieldData>",
              },
              "name": "ContentsPostContentRequest",
              "query-parameters": {
                "Id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "Publish": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<boolean>",
                },
                "Status": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Content created.",
              "type": "root.ContentsDto",
            },
          },
          "postContents": {
            "auth": true,
            "method": "POST",
            "path": "/api/content/{app}/{schema}/import",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "schema": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "datas": {
                    "docs": "The data to import.",
                    "type": "list<root.ContentData>",
                  },
                  "doNotScript": {
                    "docs": "True to turn off scripting for faster inserts. Default: true.",
                    "type": "optional<boolean>",
                  },
                  "optimizeValidation": {
                    "docs": "True to turn off costly validation: Unique checks, asset checks and reference checks. Default: true.",
                    "type": "optional<boolean>",
                  },
                  "publish": {
                    "docs": "True to automatically publish the content.",
                    "type": "optional<boolean>",
                  },
                },
              },
              "headers": undefined,
              "name": "ImportContentsDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Contents created.",
              "type": "list<root.BulkResultDto>",
            },
          },
          "postUpsertContent": {
            "auth": true,
            "method": "POST",
            "path": "/api/content/{app}/{schema}/{id}",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "string",
              },
              "schema": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "map<string, root.ContentFieldData>",
              },
              "name": "ContentsPostUpsertContentRequest",
              "query-parameters": {
                "Patch": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<boolean>",
                },
                "Publish": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<boolean>",
                },
                "Status": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Content created or updated.",
              "type": "root.ContentsDto",
            },
          },
          "putContent": {
            "auth": true,
            "method": "PUT",
            "path": "/api/content/{app}/{schema}/{id}",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "string",
              },
              "schema": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "map<string, root.ContentFieldData>",
              },
            },
            "response": {
              "docs": "Content updated.",
              "type": "root.ContentsDto",
            },
          },
          "putContentStatus": {
            "auth": true,
            "method": "PUT",
            "path": "/api/content/{app}/{schema}/{id}/status",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "string",
              },
              "schema": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "checkReferrers": {
                    "docs": "True to check referrers of this content.",
                    "type": "optional<boolean>",
                  },
                  "dueTime": {
                    "docs": "The due time.",
                    "type": "optional<string>",
                  },
                  "status": {
                    "docs": "The new status.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "ChangeStatusDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Content status changed.",
              "type": "root.ContentsDto",
            },
          },
        },
      },
    },
    "diagnostics.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "getDump": {
            "auth": true,
            "method": "GET",
            "path": "/api/diagnostics/dump",
          },
          "getGCDump": {
            "auth": true,
            "method": "GET",
            "path": "/api/diagnostics/gcdump",
          },
        },
      },
    },
    "eventConsumers.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "getEventConsumers": {
            "auth": true,
            "method": "GET",
            "path": "/api/event-consumers",
            "response": {
              "docs": "Event consumers returned.",
              "type": "root.EventConsumersDto",
            },
          },
          "resetEventConsumer": {
            "auth": true,
            "method": "PUT",
            "path": "/api/event-consumers/{consumerName}/reset",
            "path-parameters": {
              "consumerName": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Event consumer resetted asynchronously.",
              "type": "root.EventConsumerDto",
            },
          },
          "startEventConsumer": {
            "auth": true,
            "method": "PUT",
            "path": "/api/event-consumers/{consumerName}/start",
            "path-parameters": {
              "consumerName": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Event consumer started asynchronously.",
              "type": "root.EventConsumerDto",
            },
          },
          "stopEventConsumer": {
            "auth": true,
            "method": "PUT",
            "path": "/api/event-consumers/{consumerName}/stop",
            "path-parameters": {
              "consumerName": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Event consumer stopped asynchronously.",
              "type": "root.EventConsumerDto",
            },
          },
        },
      },
    },
    "history.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "getAppHistory": {
            "auth": true,
            "method": "GET",
            "path": "/api/apps/{app}/history",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "name": "HistoryGetAppHistoryRequest",
              "query-parameters": {
                "channel": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Events returned.",
              "type": "list<root.HistoryEventDto>",
            },
          },
          "getTeamHistory": {
            "auth": true,
            "method": "GET",
            "path": "/api/teams/{team}/history",
            "path-parameters": {
              "team": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "name": "HistoryGetTeamHistoryRequest",
              "query-parameters": {
                "channel": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Events returned.",
              "type": "list<root.HistoryEventDto>",
            },
          },
        },
      },
    },
    "languages.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "getLanguages": {
            "auth": true,
            "method": "GET",
            "path": "/api/languages",
            "response": {
              "docs": "Supported language codes returned.",
              "type": "list<root.LanguageDto>",
            },
          },
        },
      },
    },
    "news.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "getNews": {
            "auth": true,
            "method": "GET",
            "path": "/api/news/features",
            "request": {
              "name": "NewsGetNewsRequest",
              "query-parameters": {
                "version": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Latest features returned.",
              "type": "root.FeaturesDto",
            },
          },
        },
      },
    },
    "notifications.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "deleteComment": {
            "auth": true,
            "method": "DELETE",
            "path": "/api/users/{userId}/notifications/{commentId}",
            "path-parameters": {
              "commentId": {
                "docs": undefined,
                "type": "string",
              },
              "userId": {
                "docs": undefined,
                "type": "string",
              },
            },
          },
          "getNotifications": {
            "auth": true,
            "method": "GET",
            "path": "/api/users/{userId}/notifications",
            "path-parameters": {
              "userId": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "name": "NotificationsGetNotificationsRequest",
              "query-parameters": {
                "version": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "All comments returned.",
              "type": "root.CommentsDto",
            },
          },
        },
      },
    },
    "ping.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "getAppPing": {
            "auth": true,
            "method": "GET",
            "path": "/api/ping/{app}",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
            },
          },
          "getInfo": {
            "auth": true,
            "method": "GET",
            "path": "/api/info",
            "response": {
              "docs": "Infos returned.",
              "type": "root.ExposedValues",
            },
          },
          "getPing": {
            "auth": true,
            "method": "GET",
            "path": "/api/ping",
          },
        },
      },
    },
    "plans.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "getPlans": {
            "auth": true,
            "method": "GET",
            "path": "/api/apps/{app}/plans",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "App plan information returned.",
              "type": "root.PlansDto",
            },
          },
          "getTeamPlans": {
            "auth": true,
            "method": "GET",
            "path": "/api/teams/{team}/plans",
            "path-parameters": {
              "team": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Team plan information returned.",
              "type": "root.PlansDto",
            },
          },
          "putPlan": {
            "auth": true,
            "method": "PUT",
            "path": "/api/apps/{app}/plan",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.ChangePlanDto",
              },
            },
            "response": {
              "docs": "Plan changed or redirect url returned.",
              "type": "root.PlanChangedDto",
            },
          },
          "putTeamPlan": {
            "auth": true,
            "method": "PUT",
            "path": "/api/teams/{team}/plan",
            "path-parameters": {
              "team": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.ChangePlanDto",
              },
            },
            "response": {
              "docs": "Plan changed or redirect url returned.",
              "type": "root.PlanChangedDto",
            },
          },
        },
      },
    },
    "rules.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "deleteEvent": {
            "auth": true,
            "method": "DELETE",
            "path": "/api/apps/{app}/rules/events/{id}",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
          },
          "deleteEvents": {
            "auth": true,
            "method": "DELETE",
            "path": "/api/apps/{app}/rules/events",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
            },
          },
          "deleteRule": {
            "auth": true,
            "method": "DELETE",
            "path": "/api/apps/{app}/rules/{id}",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
          },
          "deleteRuleEvents": {
            "auth": true,
            "method": "DELETE",
            "path": "/api/apps/{app}/rules/{id}/events",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
          },
          "deleteRuleRun": {
            "auth": true,
            "method": "DELETE",
            "path": "/api/apps/{app}/rules/run",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
            },
          },
          "disableRule": {
            "auth": true,
            "method": "PUT",
            "path": "/api/apps/{app}/rules/{id}/disable",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Rule disabled.",
              "type": "root.RuleDto",
            },
          },
          "enableRule": {
            "auth": true,
            "method": "PUT",
            "path": "/api/apps/{app}/rules/{id}/enable",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Rule enabled.",
              "type": "root.RuleDto",
            },
          },
          "getActions": {
            "auth": true,
            "method": "GET",
            "path": "/api/rules/actions",
            "response": {
              "docs": "Rule actions returned.",
              "type": "map<string, root.RuleElementDto>",
            },
          },
          "getEventSchema": {
            "auth": true,
            "method": "GET",
            "path": "/api/rules/eventtypes/{type}",
            "path-parameters": {
              "type": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Rule event type found.",
              "type": "unknown",
            },
          },
          "getEventTypes": {
            "auth": true,
            "method": "GET",
            "path": "/api/rules/eventtypes",
            "response": {
              "docs": "Rule events returned.",
              "type": "list<string>",
            },
          },
          "getEvents": {
            "auth": true,
            "method": "GET",
            "path": "/api/apps/{app}/rules/events",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "name": "RulesGetEventsRequest",
              "query-parameters": {
                "ruleId": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "skip": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "take": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Rule events returned.",
              "type": "root.RuleEventsDto",
            },
          },
          "getRules": {
            "auth": true,
            "method": "GET",
            "path": "/api/apps/{app}/rules",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Rules returned.",
              "type": "root.RulesDto",
            },
          },
          "postRule": {
            "auth": true,
            "method": "POST",
            "path": "/api/apps/{app}/rules",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.CreateRuleDto",
              },
            },
            "response": {
              "docs": "Rule created.",
              "type": "root.RuleDto",
            },
          },
          "putEvent": {
            "auth": true,
            "method": "PUT",
            "path": "/api/apps/{app}/rules/events/{id}",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
          },
          "putRule": {
            "auth": true,
            "method": "PUT",
            "path": "/api/apps/{app}/rules/{id}",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "action": {
                    "docs": undefined,
                    "type": "optional<root.RuleActionDto>",
                  },
                  "isEnabled": {
                    "docs": "Enable or disable the rule.",
                    "type": "optional<boolean>",
                  },
                  "name": {
                    "docs": "Optional rule name.",
                    "type": "optional<string>",
                  },
                  "trigger": {
                    "docs": undefined,
                    "type": "optional<root.RuleTriggerDto>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateRuleDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Rule updated.",
              "type": "root.RuleDto",
            },
          },
          "putRuleRun": {
            "auth": true,
            "method": "PUT",
            "path": "/api/apps/{app}/rules/{id}/run",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "name": "RulesPutRuleRunRequest",
              "query-parameters": {
                "fromSnapshots": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<boolean>",
                },
              },
            },
          },
          "simulateGET": {
            "auth": true,
            "method": "GET",
            "path": "/api/apps/{app}/rules/{id}/simulate",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Rule simulated.",
              "type": "root.SimulatedRuleEventsDto",
            },
          },
          "simulatePOST": {
            "auth": true,
            "method": "POST",
            "path": "/api/apps/{app}/rules/simulate",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.CreateRuleDto",
              },
            },
            "response": {
              "docs": "Rule simulated.",
              "type": "root.SimulatedRuleEventsDto",
            },
          },
          "triggerRule": {
            "auth": true,
            "method": "PUT",
            "path": "/api/apps/{app}/rules/{id}/trigger",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
          },
        },
      },
    },
    "schemas.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "deleteField": {
            "auth": true,
            "method": "DELETE",
            "path": "/api/apps/{app}/schemas/{schema}/fields/{id}",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "integer",
              },
              "schema": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema field deleted.",
              "type": "root.SchemaDto",
            },
          },
          "deleteNestedField": {
            "auth": true,
            "method": "DELETE",
            "path": "/api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "integer",
              },
              "parentId": {
                "docs": undefined,
                "type": "integer",
              },
              "schema": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema field deleted.",
              "type": "root.SchemaDto",
            },
          },
          "deleteSchema": {
            "auth": true,
            "method": "DELETE",
            "path": "/api/apps/{app}/schemas/{schema}",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "schema": {
                "docs": undefined,
                "type": "string",
              },
            },
          },
          "disableField": {
            "auth": true,
            "method": "PUT",
            "path": "/api/apps/{app}/schemas/{schema}/fields/{id}/disable",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "integer",
              },
              "schema": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema field disabled.",
              "type": "root.SchemaDto",
            },
          },
          "disableNestedField": {
            "auth": true,
            "method": "PUT",
            "path": "/api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}/disable",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "integer",
              },
              "parentId": {
                "docs": undefined,
                "type": "integer",
              },
              "schema": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema field disabled.",
              "type": "root.SchemaDto",
            },
          },
          "enableField": {
            "auth": true,
            "method": "PUT",
            "path": "/api/apps/{app}/schemas/{schema}/fields/{id}/enable",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "integer",
              },
              "schema": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema field enabled.",
              "type": "root.SchemaDto",
            },
          },
          "enableNestedField": {
            "auth": true,
            "method": "PUT",
            "path": "/api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}/enable",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "integer",
              },
              "parentId": {
                "docs": undefined,
                "type": "integer",
              },
              "schema": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema field enabled.",
              "type": "root.SchemaDto",
            },
          },
          "getSchema": {
            "auth": true,
            "method": "GET",
            "path": "/api/apps/{app}/schemas/{schema}",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "schema": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema found.",
              "type": "root.SchemaDto",
            },
          },
          "getSchemas": {
            "auth": true,
            "method": "GET",
            "path": "/api/apps/{app}/schemas",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Schemas returned.",
              "type": "root.SchemasDto",
            },
          },
          "hideField": {
            "auth": true,
            "method": "PUT",
            "path": "/api/apps/{app}/schemas/{schema}/fields/{id}/hide",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "integer",
              },
              "schema": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema field hidden.",
              "type": "root.SchemaDto",
            },
          },
          "hideNestedField": {
            "auth": true,
            "method": "PUT",
            "path": "/api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}/hide",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "integer",
              },
              "parentId": {
                "docs": undefined,
                "type": "integer",
              },
              "schema": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema field hidden.",
              "type": "root.SchemaDto",
            },
          },
          "lockField": {
            "auth": true,
            "method": "PUT",
            "path": "/api/apps/{app}/schemas/{schema}/fields/{id}/lock",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "integer",
              },
              "schema": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema field shown.",
              "type": "root.SchemaDto",
            },
          },
          "lockNestedField": {
            "auth": true,
            "method": "PUT",
            "path": "/api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}/lock",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "integer",
              },
              "parentId": {
                "docs": undefined,
                "type": "integer",
              },
              "schema": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema field hidden.",
              "type": "root.SchemaDto",
            },
          },
          "postField": {
            "auth": true,
            "method": "POST",
            "path": "/api/apps/{app}/schemas/{schema}/fields",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "schema": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.AddFieldDto",
              },
            },
            "response": {
              "docs": "Schema field created.",
              "type": "root.SchemaDto",
            },
          },
          "postNestedField": {
            "auth": true,
            "method": "POST",
            "path": "/api/apps/{app}/schemas/{schema}/fields/{parentId}/nested",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "parentId": {
                "docs": undefined,
                "type": "integer",
              },
              "schema": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.AddFieldDto",
              },
            },
            "response": {
              "docs": "Schema field created.",
              "type": "root.SchemaDto",
            },
          },
          "postSchema": {
            "auth": true,
            "method": "POST",
            "path": "/api/apps/{app}/schemas",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "isSingleton": {
                    "docs": "Set to true to allow a single content item only.",
                    "type": "optional<boolean>",
                  },
                  "name": {
                    "docs": "The name of the schema.",
                    "type": "optional<string>",
                  },
                  "type": {
                    "docs": undefined,
                    "type": "optional<root.SchemaType>",
                  },
                },
              },
              "headers": undefined,
              "name": "CreateSchemaDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Schema created.",
              "type": "root.SchemaDto",
            },
          },
          "publishSchema": {
            "auth": true,
            "method": "PUT",
            "path": "/api/apps/{app}/schemas/{schema}/publish",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "schema": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema published.",
              "type": "root.SchemaDto",
            },
          },
          "putCategory": {
            "auth": true,
            "method": "PUT",
            "path": "/api/apps/{app}/schemas/{schema}/category",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "schema": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "name": {
                    "docs": "The name of the category.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "ChangeCategoryDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Schema updated.",
              "type": "root.SchemaDto",
            },
          },
          "putField": {
            "auth": true,
            "method": "PUT",
            "path": "/api/apps/{app}/schemas/{schema}/fields/{id}",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "integer",
              },
              "schema": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.UpdateFieldDto",
              },
            },
            "response": {
              "docs": "Schema field updated.",
              "type": "root.SchemaDto",
            },
          },
          "putNestedField": {
            "auth": true,
            "method": "PUT",
            "path": "/api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "integer",
              },
              "parentId": {
                "docs": undefined,
                "type": "integer",
              },
              "schema": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.UpdateFieldDto",
              },
            },
            "response": {
              "docs": "Schema field updated.",
              "type": "root.SchemaDto",
            },
          },
          "putNestedFieldOrdering": {
            "auth": true,
            "method": "PUT",
            "path": "/api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/ordering",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "parentId": {
                "docs": undefined,
                "type": "integer",
              },
              "schema": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.ReorderFieldsDto",
              },
            },
            "response": {
              "docs": "Schema fields reordered.",
              "type": "root.SchemaDto",
            },
          },
          "putPreviewUrls": {
            "auth": true,
            "method": "PUT",
            "path": "/api/apps/{app}/schemas/{schema}/preview-urls",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "schema": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "map<string, string>",
              },
            },
            "response": {
              "docs": "Schema updated.",
              "type": "root.SchemaDto",
            },
          },
          "putRules": {
            "auth": true,
            "method": "PUT",
            "path": "/api/apps/{app}/schemas/{schema}/rules",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "schema": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "fieldRules": {
                    "docs": "The field rules to configure.",
                    "type": "optional<list<root.FieldRuleDto>>",
                  },
                },
              },
              "headers": undefined,
              "name": "ConfigureFieldRulesDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Schema updated.",
              "type": "root.SchemaDto",
            },
          },
          "putSchema": {
            "auth": true,
            "method": "PUT",
            "path": "/api/apps/{app}/schemas/{schema}",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "schema": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "contentEditorUrl": {
                    "docs": "The url to the editor plugin.",
                    "type": "optional<string>",
                  },
                  "contentSidebarUrl": {
                    "docs": "The url to a the sidebar plugin for content items.",
                    "type": "optional<string>",
                  },
                  "contentsSidebarUrl": {
                    "docs": "The url to a the sidebar plugin for content lists.",
                    "type": "optional<string>",
                  },
                  "hints": {
                    "docs": "Hints to describe the schema.",
                    "type": "optional<string>",
                  },
                  "label": {
                    "docs": "Optional label for the editor.",
                    "type": "optional<string>",
                  },
                  "tags": {
                    "docs": "Tags for automation processes.",
                    "type": "optional<list<string>>",
                  },
                  "validateOnPublish": {
                    "docs": "True to validate the content items on publish.",
                    "type": "boolean",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateSchemaDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Schema updated.",
              "type": "root.SchemaDto",
            },
          },
          "putSchemaFieldOrdering": {
            "auth": true,
            "method": "PUT",
            "path": "/api/apps/{app}/schemas/{schema}/fields/ordering",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "schema": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.ReorderFieldsDto",
              },
            },
            "response": {
              "docs": "Schema fields reordered.",
              "type": "root.SchemaDto",
            },
          },
          "putSchemaSync": {
            "auth": true,
            "method": "PUT",
            "path": "/api/apps/{app}/schemas/{schema}/sync",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "schema": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "noFieldDeletion": {
                    "docs": "True, when fields should not be deleted.",
                    "type": "optional<boolean>",
                  },
                  "noFieldRecreation": {
                    "docs": "True, when fields with different types should not be recreated.",
                    "type": "optional<boolean>",
                  },
                },
              },
              "headers": undefined,
              "name": "SynchronizeSchemaDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Schema updated.",
              "type": "root.SchemaDto",
            },
          },
          "putSchemaUIFields": {
            "auth": true,
            "method": "PUT",
            "path": "/api/apps/{app}/schemas/{schema}/fields/ui",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "schema": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "fieldsInLists": {
                    "docs": "The name of fields that are used in content lists.",
                    "type": "optional<list<string>>",
                  },
                  "fieldsInReferences": {
                    "docs": "The name of fields that are used in content references.",
                    "type": "optional<list<string>>",
                  },
                },
              },
              "headers": undefined,
              "name": "ConfigureUiFieldsDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Schema UI fields defined.",
              "type": "root.SchemaDto",
            },
          },
          "putScripts": {
            "auth": true,
            "method": "PUT",
            "path": "/api/apps/{app}/schemas/{schema}/scripts",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "schema": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.SchemaScriptsDto",
              },
            },
            "response": {
              "docs": "Schema updated.",
              "type": "root.SchemaDto",
            },
          },
          "showField": {
            "auth": true,
            "method": "PUT",
            "path": "/api/apps/{app}/schemas/{schema}/fields/{id}/show",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "integer",
              },
              "schema": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema field shown.",
              "type": "root.SchemaDto",
            },
          },
          "showNestedField": {
            "auth": true,
            "method": "PUT",
            "path": "/api/apps/{app}/schemas/{schema}/fields/{parentId}/nested/{id}/show",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "id": {
                "docs": undefined,
                "type": "integer",
              },
              "parentId": {
                "docs": undefined,
                "type": "integer",
              },
              "schema": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema field shown.",
              "type": "root.SchemaDto",
            },
          },
          "unpublishSchema": {
            "auth": true,
            "method": "PUT",
            "path": "/api/apps/{app}/schemas/{schema}/unpublish",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "schema": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Schema unpublished.",
              "type": "root.SchemaDto",
            },
          },
        },
      },
    },
    "search.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "getSearchResults": {
            "auth": true,
            "method": "GET",
            "path": "/api/apps/{app}/search",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "name": "SearchGetSearchResultsRequest",
              "query-parameters": {
                "query": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Search results returned.",
              "type": "list<root.SearchResultDto>",
            },
          },
        },
      },
    },
    "statistics.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "getCurrentStorageSize": {
            "auth": true,
            "method": "GET",
            "path": "/api/apps/{app}/usages/storage/today",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Storage usage returned.",
              "type": "root.CurrentStorageDto",
            },
          },
          "getLog": {
            "auth": true,
            "method": "GET",
            "path": "/api/apps/{app}/usages/log",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Usage tracking results returned.",
              "type": "root.LogDownloadDto",
            },
          },
          "getStorageSizes": {
            "auth": true,
            "method": "GET",
            "path": "/api/apps/{app}/usages/storage/{fromDate}/{toDate}",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "fromDate": {
                "docs": undefined,
                "type": "string",
              },
              "toDate": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Storage usage returned.",
              "type": "list<root.StorageUsagePerDateDto>",
            },
          },
          "getStorageSizesForTeam": {
            "auth": true,
            "method": "GET",
            "path": "/api/teams/{team}/usages/storage/{fromDate}/{toDate}",
            "path-parameters": {
              "fromDate": {
                "docs": undefined,
                "type": "string",
              },
              "team": {
                "docs": undefined,
                "type": "string",
              },
              "toDate": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Storage usage returned.",
              "type": "list<root.StorageUsagePerDateDto>",
            },
          },
          "getTeamCurrentStorageSizeForTeam": {
            "auth": true,
            "method": "GET",
            "path": "/api/teams/{team}/usages/storage/today",
            "path-parameters": {
              "team": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Storage usage returned.",
              "type": "root.CurrentStorageDto",
            },
          },
          "getUsages": {
            "auth": true,
            "method": "GET",
            "path": "/api/apps/{app}/usages/calls/{fromDate}/{toDate}",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
              "fromDate": {
                "docs": undefined,
                "type": "string",
              },
              "toDate": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "API call returned.",
              "type": "root.CallsUsageDtoDto",
            },
          },
          "getUsagesForTeam": {
            "auth": true,
            "method": "GET",
            "path": "/api/teams/{team}/usages/calls/{fromDate}/{toDate}",
            "path-parameters": {
              "fromDate": {
                "docs": undefined,
                "type": "string",
              },
              "team": {
                "docs": undefined,
                "type": "string",
              },
              "toDate": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "API call returned.",
              "type": "root.CallsUsageDtoDto",
            },
          },
        },
      },
    },
    "teams.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "deleteContributor": {
            "auth": true,
            "method": "DELETE",
            "path": "/api/teams/{team}/contributors/{id}",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
              "team": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Contributor removed.",
              "type": "root.ContributorsDto",
            },
          },
          "deleteMyself": {
            "auth": true,
            "method": "DELETE",
            "path": "/api/teams/{team}/contributors/me",
            "path-parameters": {
              "team": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Contributor removed.",
              "type": "root.ContributorsDto",
            },
          },
          "getContributors": {
            "auth": true,
            "method": "GET",
            "path": "/api/teams/{team}/contributors",
            "path-parameters": {
              "team": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Contributors returned.",
              "type": "root.ContributorsDto",
            },
          },
          "getTeam": {
            "auth": true,
            "method": "GET",
            "path": "/api/teams/{team}",
            "path-parameters": {
              "team": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Teams returned.",
              "type": "root.TeamDto",
            },
          },
          "getTeams": {
            "auth": true,
            "method": "GET",
            "path": "/api/teams",
            "response": {
              "docs": "Teams returned.",
              "type": "list<root.TeamDto>",
            },
          },
          "postContributor": {
            "auth": true,
            "method": "POST",
            "path": "/api/teams/{team}/contributors",
            "path-parameters": {
              "team": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.AssignContributorDto",
              },
            },
            "response": {
              "docs": "Contributor assigned to team.",
              "type": "root.ContributorsDto",
            },
          },
          "postTeam": {
            "auth": true,
            "method": "POST",
            "path": "/api/teams",
            "request": {
              "body": {
                "properties": {
                  "name": {
                    "docs": "The name of the team.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "CreateTeamDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Team created.",
              "type": "root.TeamDto",
            },
          },
          "putTeam": {
            "auth": true,
            "method": "PUT",
            "path": "/api/teams/{team}",
            "path-parameters": {
              "team": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "name": {
                    "docs": "The name of the team.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateTeamDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Team updated.",
              "type": "root.TeamDto",
            },
          },
        },
      },
    },
    "templates.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "getTemplate": {
            "auth": true,
            "method": "GET",
            "path": "/api/templates/{name}",
            "path-parameters": {
              "name": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Template returned.",
              "type": "root.TemplateDetailsDto",
            },
          },
          "getTemplates": {
            "auth": true,
            "method": "GET",
            "path": "/api/templates",
            "response": {
              "docs": "Templates returned.",
              "type": "root.TemplatesDto",
            },
          },
        },
      },
    },
    "translations.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "postTranslation": {
            "auth": true,
            "method": "POST",
            "path": "/api/apps/{app}/translations",
            "path-parameters": {
              "app": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "sourceLanguage": {
                    "docs": "The optional source language.",
                    "type": "optional<string>",
                  },
                  "targetLanguage": {
                    "docs": "The target language.",
                    "type": "string",
                  },
                  "text": {
                    "docs": "The text to translate.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "TranslateDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Text translated.",
              "type": "root.TranslationDto",
            },
          },
        },
      },
    },
    "userManagement.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "deleteUser": {
            "auth": true,
            "method": "DELETE",
            "path": "/api/user-management/{id}",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
          },
          "getUser": {
            "auth": true,
            "method": "GET",
            "path": "/api/user-management/{id}",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "User returned.",
              "type": "root.UserDto",
            },
          },
          "getUsers": {
            "auth": true,
            "method": "GET",
            "path": "/api/user-management",
            "request": {
              "name": "UserManagementGetUsersRequest",
              "query-parameters": {
                "query": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "skip": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "take": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "Users returned.",
              "type": "root.UsersDto",
            },
          },
          "lockUser": {
            "auth": true,
            "method": "PUT",
            "path": "/api/user-management/{id}/lock",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "User locked.",
              "type": "root.UserDto",
            },
          },
          "postUser": {
            "auth": true,
            "method": "POST",
            "path": "/api/user-management",
            "request": {
              "body": {
                "properties": {
                  "displayName": {
                    "docs": "The display name (usually first name and last name) of the user.",
                    "type": "string",
                  },
                  "email": {
                    "docs": "The email of the user. Unique value.",
                    "type": "string",
                  },
                  "password": {
                    "docs": "The password of the user.",
                    "type": "string",
                  },
                  "permissions": {
                    "docs": "Additional permissions for the user.",
                    "type": "list<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "CreateUserDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "User created.",
              "type": "root.UserDto",
            },
          },
          "putUser": {
            "auth": true,
            "method": "PUT",
            "path": "/api/user-management/{id}",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "displayName": {
                    "docs": "The display name (usually first name and last name) of the user.",
                    "type": "string",
                  },
                  "email": {
                    "docs": "The email of the user. Unique value.",
                    "type": "string",
                  },
                  "password": {
                    "docs": "The password of the user.",
                    "type": "optional<string>",
                  },
                  "permissions": {
                    "docs": "Additional permissions for the user.",
                    "type": "list<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "UpdateUserDto",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "User created.",
              "type": "root.UserDto",
            },
          },
          "unlockUser": {
            "auth": true,
            "method": "PUT",
            "path": "/api/user-management/{id}/unlock",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "User unlocked.",
              "type": "root.UserDto",
            },
          },
        },
      },
    },
    "users.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "getUser": {
            "auth": true,
            "method": "GET",
            "path": "/api/users/{id}",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "User found.",
              "type": "root.UserDto",
            },
          },
          "getUserPicture": {
            "auth": true,
            "method": "GET",
            "path": "/api/users/{id}/picture",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "User found and image or fallback returned.",
              "type": "file",
            },
          },
          "getUserResources": {
            "auth": true,
            "method": "GET",
            "path": "/api",
            "response": {
              "docs": "User resources returned.",
              "type": "root.ResourcesDto",
            },
          },
          "getUsers": {
            "auth": true,
            "method": "GET",
            "path": "/api/users",
            "request": {
              "name": "UsersGetUsersRequest",
              "query-parameters": {
                "query": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "Users returned.",
              "type": "list<root.UserDto>",
            },
          },
        },
      },
    },
  },
  "rootApiFile": {
    "auth": "bearer",
    "default-environment": "default",
    "display-name": "Squidex API",
    "environments": {
      "default": "https://localhost:5001",
    },
    "error-discrimination": {
      "strategy": "status-code",
    },
    "headers": {},
    "name": "api",
  },
}
`;

exports[`open api converter suger simple 1`] = `
{
  "definitionFiles": {
    "__package__.yml": {
      "service": undefined,
      "types": {
        "AzureAudience": {
          "docs": undefined,
          "properties": {
            "description": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "AzureGovernmentCertification": {
          "docs": undefined,
          "properties": {
            "title": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "uri": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "validationResults": {
              "docs": undefined,
              "type": "optional<list<AzureValidationResult>>",
            },
          },
        },
        "AzureIncludedBaseQuantity": {
          "docs": undefined,
          "properties": {
            "isInfinite": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "quantity": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "recurringUnit": {
              "docs": undefined,
              "type": "optional<AzureIncludedBaseQuantityRecurringUnit>",
            },
          },
        },
        "AzureIncludedBaseQuantityRecurringUnit": {
          "docs": undefined,
          "enum": [
            {
              "name": "Monthly",
              "value": "Monthly",
            },
            {
              "name": "Annual",
              "value": "Annual",
            },
          ],
        },
        "AzureListingContact": {
          "docs": undefined,
          "properties": {
            "email": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "phone": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "type": {
              "docs": undefined,
              "type": "optional<AzureListingContactType>",
            },
            "uri": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "AzureListingContactType": {
          "docs": undefined,
          "enum": [
            {
              "name": "CustomerSupport",
              "value": "CustomerSupport",
            },
            {
              "name": "Engineering",
              "value": "Engineering",
            },
            {
              "name": "ChannelManager",
              "value": "ChannelManager",
            },
          ],
        },
        "AzureListingUri": {
          "docs": undefined,
          "properties": {
            "displayText": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "subtype": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "type": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "uri": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "AzureLocalizedDateTime": {
          "docs": undefined,
          "properties": {
            "dateTimeInUtc": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "localizePerMarket": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
          },
        },
        "AzureLocalizedTimeRange": {
          "docs": undefined,
          "properties": {
            "endAt": {
              "docs": undefined,
              "type": "optional<AzureLocalizedDateTime>",
            },
            "startAt": {
              "docs": undefined,
              "type": "optional<AzureLocalizedDateTime>",
            },
          },
        },
        "AzureMarket": {
          "docs": undefined,
          "properties": {
            "friendlyName": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "marketCode": {
              "docs": "ISO Country Code",
              "type": "optional<string>",
            },
          },
        },
        "AzureMarketState": {
          "docs": undefined,
          "properties": {
            "marketCode": {
              "docs": "ISO Country Code",
              "type": "optional<string>",
            },
            "state": {
              "docs": undefined,
              "type": "optional<AzureMarketStateState>",
            },
          },
        },
        "AzureMarketStateState": {
          "docs": undefined,
          "enum": [
            {
              "name": "Disabled",
              "value": "Disabled",
            },
            {
              "name": "Enabled",
              "value": "Enabled",
            },
            {
              "name": "StopSelling",
              "value": "StopSelling",
            },
            {
              "name": "Terminated",
              "value": "Terminated",
            },
          ],
        },
        "AzureMarketplacePrice": {
          "docs": undefined,
          "properties": {
            "currency": {
              "docs": "ISO 4217 currency code",
              "type": "optional<string>",
            },
            "markets": {
              "docs": undefined,
              "type": "optional<list<string>>",
            },
            "price": {
              "docs": "default 0",
              "type": "optional<double>",
            },
            "prices": "unknown",
          },
        },
        "AzureMarketplacePrivateOffer": {
          "docs": undefined,
          "properties": {
            "$schema": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "acceptBy": {
              "docs": "in format YYYY-MM-DD",
              "type": "optional<string>",
            },
            "acceptanceLinks": {
              "docs": undefined,
              "type": "optional<list<AzureMarketplacePrivateOfferAcceptanceLink>>",
            },
            "beneficiaries": {
              "docs": "array of email addresses.",
              "type": "optional<list<AzureMarketplacePrivateOfferBeneficiary>>",
            },
            "eTag": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "end": {
              "docs": "in format YYYY-MM-DD",
              "type": "optional<string>",
            },
            "id": {
              "docs": "in format of "private-offer/private-offer-durable-id"",
              "type": "optional<string>",
            },
            "lastModified": {
              "docs": "in format YYYY-MM-DD",
              "type": "optional<string>",
            },
            "name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "notificationContacts": {
              "docs": "array of email addresses of the users to be notified of any changes in the private offer status.",
              "type": "optional<list<string>>",
            },
            "preparedBy": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "pricing": {
              "docs": "Up to 10 pricing entries are allowed.",
              "type": "optional<list<AzureMarketplacePrivateOfferPricing>>",
            },
            "privateOfferType": {
              "docs": undefined,
              "type": "optional<AzureMarketplacePrivateOfferPrivateOfferType>",
            },
            "resourceName": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "start": {
              "docs": "in format YYYY-MM-DD, if VariableStartDate = true, this field should be empty.",
              "type": "optional<string>",
            },
            "state": {
              "docs": undefined,
              "type": "optional<AzureMarketplacePrivateOfferState>",
            },
            "subState": {
              "docs": undefined,
              "type": "optional<AzureMarketplacePrivateOfferSubState>",
            },
            "termsAndConditionsDocSasUrl": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "upgradedFrom": {
              "docs": undefined,
              "type": "optional<AzureMarketplacePrivateOfferPromotionReference>",
            },
            "validations": {
              "docs": undefined,
              "type": "optional<list<AzureMarketplaceValidation>>",
            },
            "variableStartDate": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
          },
        },
        "AzureMarketplacePrivateOfferAcceptanceLink": {
          "docs": undefined,
          "properties": {
            "beneficiaryId": {
              "docs": "The Customer Billing Account ID.",
              "type": "optional<string>",
            },
            "link": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "AzureMarketplacePrivateOfferBeneficiary": {
          "docs": undefined,
          "properties": {
            "beneficiaryRecipients": {
              "docs": undefined,
              "type": "optional<list<AzureMarketplacePrivateOfferBeneficiaryRecipient>>",
            },
            "description": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": "the customer billing account id.",
              "type": "optional<string>",
            },
          },
        },
        "AzureMarketplacePrivateOfferBeneficiaryRecipient": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "recipientType": {
              "docs": undefined,
              "type": "optional<AzureMarketplacePrivateOfferBeneficiaryRecipientRecipientType>",
            },
          },
        },
        "AzureMarketplacePrivateOfferBeneficiaryRecipientRecipientType": {
          "docs": undefined,
          "enum": [
            {
              "name": "cspCustomer",
              "value": "cspCustomer",
            },
            {
              "name": "billingGroup",
              "value": "billingGroup",
            },
          ],
        },
        "AzureMarketplacePrivateOfferPricing": {
          "docs": undefined,
          "properties": {
            "discountPercentage": {
              "docs": "between 0 and 100",
              "type": "optional<double>",
            },
            "discountType": {
              "docs": undefined,
              "type": "optional<AzureMarketplacePrivateOfferPricingDiscountType>",
            },
            "originalPlan": {
              "docs": "the pricing plan of the original plan.",
              "type": "optional<AzurePriceAndAvailabilityPrivateOfferPlan>",
            },
            "plan": {
              "docs": "in format of "plan/product-durable-id/plan-durable-id"",
              "type": "optional<string>",
            },
            "planName": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "planType": {
              "docs": "The type of the plan, FLAT_RATE or PER_USER.",
              "type": "optional<AzureMarketplacePrivateOfferPricingPlanType>",
            },
            "priceDetails": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "privateOfferPlan": {
              "docs": "the pricing plan of the private offer",
              "type": "optional<AzurePriceAndAvailabilityPrivateOfferPlan>",
            },
            "product": {
              "docs": "in format of "product/product-durable-id"",
              "type": "optional<string>",
            },
            "sugerOfferId": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "AzureMarketplacePrivateOfferPricingDiscountType": {
          "docs": undefined,
          "enum": [
            {
              "name": "percentage",
              "value": "percentage",
            },
            {
              "name": "absolute",
              "value": "absolute",
            },
          ],
        },
        "AzureMarketplacePrivateOfferPricingPlanType": {
          "docs": undefined,
          "enum": [
            {
              "name": "FLAT_RATE",
              "value": "FLAT_RATE",
            },
            {
              "name": "PER_USER",
              "value": "PER_USER",
            },
          ],
        },
        "AzureMarketplacePrivateOfferPrivateOfferType": {
          "docs": undefined,
          "enum": [
            {
              "name": "customerPromotion",
              "value": "customerPromotion",
            },
            {
              "name": "cspPromotion",
              "value": "cspPromotion",
            },
          ],
        },
        "AzureMarketplacePrivateOfferPromotionReference": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "name": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "AzureMarketplacePrivateOfferState": {
          "docs": undefined,
          "enum": [
            {
              "name": "draft",
              "value": "draft",
            },
            {
              "name": "live",
              "value": "live",
            },
            {
              "name": "withdrawn",
              "value": "withdrawn",
            },
            {
              "name": "deleted",
              "value": "deleted",
            },
          ],
        },
        "AzureMarketplacePrivateOfferSubState": {
          "docs": undefined,
          "enum": [
            {
              "name": "pendingAcceptance",
              "value": "pendingAcceptance",
            },
            {
              "name": "accepted",
              "value": "accepted",
            },
          ],
        },
        "AzureMarketplaceTerm": {
          "docs": undefined,
          "properties": {
            "type": {
              "docs": undefined,
              "type": "optional<AzureMarketplaceTermType>",
            },
            "value": {
              "docs": "default 0",
              "type": "optional<double>",
            },
          },
        },
        "AzureMarketplaceTermType": {
          "docs": undefined,
          "enum": [
            {
              "name": "day",
              "value": "day",
            },
            {
              "name": "week",
              "value": "week",
            },
            {
              "name": "month",
              "value": "month",
            },
            {
              "name": "year",
              "value": "year",
            },
          ],
        },
        "AzureMarketplaceValidation": {
          "docs": undefined,
          "properties": {
            "$schema": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "code": {
              "docs": undefined,
              "type": "optional<AzureMarketplaceValidationCode>",
            },
            "level": {
              "docs": undefined,
              "type": "optional<AzureMarketplaceValidationLevel>",
            },
            "message": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "resourceId": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "AzureMarketplaceValidationCode": {
          "docs": undefined,
          "enum": [
            {
              "name": "businessValidationError",
              "value": "businessValidationError",
            },
            {
              "name": "collectionLimitExceeded",
              "value": "collectionLimitExceeded",
            },
            {
              "name": "invalidId",
              "value": "invalidId",
            },
            {
              "name": "invalidEntityStatus",
              "value": "invalidEntityStatus",
            },
            {
              "name": "invalidRequest",
              "value": "invalidRequest",
            },
            {
              "name": "invalidResource",
              "value": "invalidResource",
            },
            {
              "name": "invalidState",
              "value": "invalidState",
            },
            {
              "name": "notDeployed",
              "value": "notDeployed",
            },
            {
              "name": "notSupported",
              "value": "notSupported",
            },
            {
              "name": "operationCanceled",
              "value": "operationCanceled",
            },
            {
              "name": "productLocked",
              "value": "productLocked",
            },
            {
              "name": "resourceNotFound",
              "value": "resourceNotFound",
            },
            {
              "name": "schemaValidationError",
              "value": "schemaValidationError",
            },
          ],
        },
        "AzureMarketplaceValidationLevel": {
          "docs": undefined,
          "enum": [
            {
              "name": "informational",
              "value": "informational",
            },
            {
              "name": "warning",
              "value": "warning",
            },
          ],
        },
        "AzurePendingUpdateInfo": {
          "docs": undefined,
          "properties": {
            "status": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "updateType": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "AzurePrice": {
          "docs": undefined,
          "properties": {
            "currencyCode": {
              "docs": "ISO currency code, Three characters",
              "type": "optional<string>",
            },
            "openPrice": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "priceTierID": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "AzurePriceAndAvailabilityPrivateOfferCustomMeters": {
          "docs": undefined,
          "properties": {
            "meters": "unknown",
            "priceInputOption": {
              "docs": "default "usd"",
              "type": "optional<AzurePriceAndAvailabilityPrivateOfferCustomMetersPriceInputOption>",
            },
          },
        },
        "AzurePriceAndAvailabilityPrivateOfferCustomMetersPriceInputOption": {
          "docs": undefined,
          "enum": [
            {
              "name": "perMarket",
              "value": "perMarket",
            },
            {
              "name": "usd",
              "value": "usd",
            },
          ],
        },
        "AzurePriceAndAvailabilityPrivateOfferPlan": {
          "docs": undefined,
          "properties": {
            "$schema": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "plan": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "pricing": {
              "docs": undefined,
              "type": "optional<AzurePriceAndAvailabilityPrivateOfferPrice>",
            },
            "product": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "resourceName": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "validations": {
              "docs": undefined,
              "type": "optional<list<AzureMarketplaceValidation>>",
            },
          },
        },
        "AzurePriceAndAvailabilityPrivateOfferPrice": {
          "docs": undefined,
          "properties": {
            "customMeters": {
              "docs": undefined,
              "type": "optional<AzurePriceAndAvailabilityPrivateOfferCustomMeters>",
            },
            "recurrentPrice": {
              "docs": undefined,
              "type": "optional<AzurePriceAndAvailabilityRecurrentPrice>",
            },
          },
        },
        "AzurePriceAndAvailabilityRecurrentPrice": {
          "docs": undefined,
          "properties": {
            "priceInputOption": {
              "docs": "default "usd"",
              "type": "optional<AzurePriceAndAvailabilityRecurrentPricePriceInputOption>",
            },
            "prices": {
              "docs": undefined,
              "type": "optional<list<AzurePriceAndAvailabilityRecurrentPriceItem>>",
            },
          },
        },
        "AzurePriceAndAvailabilityRecurrentPriceItem": {
          "docs": undefined,
          "properties": {
            "billingTerm": {
              "docs": undefined,
              "type": "optional<AzureMarketplaceTerm>",
            },
            "paymentOption": {
              "docs": undefined,
              "type": "optional<AzureMarketplaceTerm>",
            },
            "pricePerPaymentInUsd": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "prices": {
              "docs": undefined,
              "type": "optional<list<AzureMarketplacePrice>>",
            },
          },
        },
        "AzurePriceAndAvailabilityRecurrentPricePriceInputOption": {
          "docs": undefined,
          "enum": [
            {
              "name": "perMarket",
              "value": "perMarket",
            },
            {
              "name": "usd",
              "value": "usd",
            },
          ],
        },
        "AzurePriceCadence": {
          "docs": undefined,
          "properties": {
            "type": {
              "docs": undefined,
              "type": "optional<AzurePriceCadenceType>",
            },
            "value": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "AzurePriceCadenceType": {
          "docs": undefined,
          "enum": [
            {
              "name": "Month",
              "value": "Month",
            },
            {
              "name": "Year",
              "value": "Year",
            },
          ],
        },
        "AzurePriceSchedule": {
          "docs": undefined,
          "properties": {
            "priceCadence": {
              "docs": undefined,
              "type": "optional<AzurePriceCadence>",
            },
            "pricingModel": {
              "docs": undefined,
              "type": "optional<AzurePriceSchedulePricingModel>",
            },
            "pricingUnits": {
              "docs": undefined,
              "type": "optional<list<AzurePricingUnit>>",
            },
            "retailPrice": {
              "docs": undefined,
              "type": "optional<AzurePrice>",
            },
          },
        },
        "AzurePriceSchedulePricingModel": {
          "docs": undefined,
          "enum": [
            {
              "name": "Flat",
              "value": "Flat",
            },
            {
              "name": "Recurring",
              "value": "Recurring",
            },
            {
              "name": "Usage",
              "value": "Usage",
            },
          ],
        },
        "AzurePricingUnit": {
          "docs": undefined,
          "properties": {
            "isUnlimitedUnit": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "lowerUnit": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "name": {
              "docs": undefined,
              "type": "optional<AzurePricingUnitName>",
            },
            "unitType": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "upperUnit": {
              "docs": undefined,
              "type": "optional<integer>",
            },
          },
        },
        "AzurePricingUnitName": {
          "docs": undefined,
          "enum": [
            {
              "name": "sharedcore",
              "value": "sharedcore",
            },
            {
              "name": "transactions",
              "value": "transactions",
            },
          ],
        },
        "AzureProduct": {
          "docs": undefined,
          "properties": {
            "availabilities": {
              "docs": undefined,
              "type": "optional<list<AzureProductAvailability>>",
            },
            "branches": {
              "docs": undefined,
              "type": "optional<list<AzureProductBranch>>",
            },
            "externalIDs": {
              "docs": undefined,
              "type": "optional<list<AzureTypeValue>>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "isModularPublishing": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "listings": {
              "docs": undefined,
              "type": "optional<list<AzureProductListing>>",
            },
            "name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "packageConfigurations": {
              "docs": undefined,
              "type": "optional<list<AzureProductPackageConfiguration>>",
            },
            "properties": {
              "docs": undefined,
              "type": "optional<list<AzureProductProperty>>",
            },
            "resourceType": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "setup": {
              "docs": "Not original fields. They are populated by other API calls",
              "type": "optional<AzureProductSetup>",
            },
            "submissions": {
              "docs": undefined,
              "type": "optional<list<AzureProductSubmission>>",
            },
            "variants": {
              "docs": undefined,
              "type": "optional<list<AzureProductVariant>>",
            },
          },
        },
        "AzureProductAvailability": {
          "docs": undefined,
          "properties": {
            "emailAudiences": {
              "docs": undefined,
              "type": "optional<list<AzureAudience>>",
            },
            "enterpriseLicensing": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "resourceType": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "subscriptionAudiences": {
              "docs": undefined,
              "type": "optional<list<AzureAudience>>",
            },
            "visibility": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "AzureProductBranch": {
          "docs": undefined,
          "properties": {
            "currentDraftInstanceID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "friendlyName": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "module": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "resourceType": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "type": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "variantID": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "AzureProductFeatureAvailability": {
          "docs": undefined,
          "properties": {
            "customMeters": {
              "docs": undefined,
              "type": "optional<list<AzureProductVariantCustomMeter>>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "isHidden": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "marketStates": {
              "docs": undefined,
              "type": "optional<list<AzureMarketState>>",
            },
            "markets": {
              "docs": undefined,
              "type": "optional<list<AzureMarket>>",
            },
            "priceSchedules": {
              "docs": undefined,
              "type": "optional<list<AzureProductVariantPriceSchedule>>",
            },
            "properties": {
              "docs": undefined,
              "type": "optional<list<AzureTypeValue>>",
            },
            "resourceType": {
              "docs": "ResourceType = FeatureAvailability",
              "type": "optional<string>",
            },
            "subscriptionAudiences": {
              "docs": undefined,
              "type": "optional<list<AzureAudience>>",
            },
            "tenantAudiences": {
              "docs": undefined,
              "type": "optional<list<AzureAudience>>",
            },
            "trial": {
              "docs": undefined,
              "type": "optional<AzureProductVariantTrial>",
            },
            "visibility": {
              "docs": undefined,
              "type": "optional<AzureProductFeatureAvailabilityVisibility>",
            },
          },
        },
        "AzureProductFeatureAvailabilityVisibility": {
          "docs": undefined,
          "enum": [
            {
              "name": "Public",
              "value": "Public",
            },
            {
              "name": "Private",
              "value": "Private",
            },
          ],
        },
        "AzureProductListing": {
          "docs": undefined,
          "properties": {
            "accessInformation": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "assets": {
              "docs": "Not original fields. They are populated by other API calls",
              "type": "optional<list<AzureProductListingAsset>>",
            },
            "compatibleProducts": {
              "docs": undefined,
              "type": "optional<list<string>>",
            },
            "description": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "gettingStartedInstructions": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "keywords": {
              "docs": undefined,
              "type": "optional<list<string>>",
            },
            "languageCode": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "listingContacts": {
              "docs": undefined,
              "type": "optional<list<AzureListingContact>>",
            },
            "listingUris": {
              "docs": undefined,
              "type": "optional<list<AzureListingUri>>",
            },
            "productDisplayName": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "publisherName": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "resourceType": {
              "docs": undefined,
              "type": "optional<AzureProductListingResourceType>",
            },
            "shortDescription": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "summary": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "title": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "AzureProductListingAsset": {
          "docs": undefined,
          "properties": {
            "description": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "fileName": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "fileSasUri": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "friendlyName": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "order": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "publisherDefinedSasUri": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "resourceType": {
              "docs": undefined,
              "type": "optional<AzureProductListingAssetResourceType>",
            },
            "state": {
              "docs": undefined,
              "type": "optional<AzureProductListingAssetState>",
            },
            "type": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "AzureProductListingAssetResourceType": {
          "docs": undefined,
          "enum": [
            {
              "name": "ListingAsset",
              "value": "ListingAsset",
            },
            {
              "name": "ListingImage",
              "value": "ListingImage",
            },
            {
              "name": "ListingVideo",
              "value": "ListingVideo",
            },
          ],
        },
        "AzureProductListingAssetState": {
          "docs": undefined,
          "enum": [
            {
              "name": "PendingUpload",
              "value": "PendingUpload",
            },
            {
              "name": "Uploaded",
              "value": "Uploaded",
            },
            {
              "name": "InProcessing",
              "value": "InProcessing",
            },
            {
              "name": "Processed",
              "value": "Processed",
            },
            {
              "name": "ProcessFailed",
              "value": "ProcessFailed",
            },
          ],
        },
        "AzureProductListingResourceType": {
          "docs": undefined,
          "enum": [
            {
              "name": "AzureListing",
              "value": "AzureListing",
            },
          ],
        },
        "AzureProductPackageConfiguration": {
          "docs": undefined,
          "properties": {
            "azureActiveDirectoryApplicationID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "azureActiveDirectoryTenantID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "connectionWebhook": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "landingPageUri": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "resourceType": {
              "docs": undefined,
              "type": "optional<AzureProductPackageConfigurationResourceType>",
            },
          },
        },
        "AzureProductPackageConfigurationResourceType": {
          "docs": undefined,
          "enum": [
            {
              "name": "AzureSoftwareAsAServicePackageConfiguration",
              "value": "AzureSoftwareAsAServicePackageConfiguration",
            },
          ],
        },
        "AzureProductProperty": {
          "docs": undefined,
          "properties": {
            "additionalCategories": {
              "docs": undefined,
              "type": "optional<list<string>>",
            },
            "appVersion": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "applicableProducts": {
              "docs": undefined,
              "type": "optional<list<string>>",
            },
            "categories": {
              "docs": undefined,
              "type": "optional<list<string>>",
            },
            "customAmendments": {
              "docs": undefined,
              "type": "optional<list<string>>",
            },
            "extendedProperties": {
              "docs": undefined,
              "type": "optional<list<string>>",
            },
            "globalAmendmentTerms": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "hideKeys": {
              "docs": undefined,
              "type": "optional<list<string>>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "industries": {
              "docs": undefined,
              "type": "optional<list<string>>",
            },
            "leveledCategories": {
              "docs": undefined,
              "type": "optional<map<string, unknown>>",
            },
            "leveledIndustries": {
              "docs": undefined,
              "type": "optional<map<string, unknown>>",
            },
            "marketingOnlyChange": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "productTags": {
              "docs": undefined,
              "type": "optional<list<string>>",
            },
            "resourceType": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "submissionVersion": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "termsOfUse": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "useEnterpriseContract": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
          },
        },
        "AzureProductSetup": {
          "docs": undefined,
          "properties": {
            "callToAction": {
              "docs": undefined,
              "type": "optional<AzureProductSetupCallToAction>",
            },
            "channelStates": {
              "docs": undefined,
              "type": "optional<list<AzureTypeValue>>",
            },
            "enableTestDrive": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "resourceType": {
              "docs": undefined,
              "type": "optional<AzureProductSetupResourceType>",
            },
            "sellingOption": {
              "docs": undefined,
              "type": "optional<AzureProductSetupSellingOption>",
            },
            "testDriveType": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "trialUri": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "AzureProductSetupCallToAction": {
          "docs": undefined,
          "enum": [
            {
              "name": "free",
              "value": "free",
            },
            {
              "name": "FreeTrial",
              "value": "free-trial",
            },
            {
              "name": "ContactMe",
              "value": "contact-me",
            },
          ],
        },
        "AzureProductSetupResourceType": {
          "docs": undefined,
          "enum": [
            {
              "name": "AzureProductSetup",
              "value": "AzureProductSetup",
            },
          ],
        },
        "AzureProductSetupSellingOption": {
          "docs": undefined,
          "enum": [
            {
              "name": "ListingOnly",
              "value": "ListingOnly",
            },
            {
              "name": "ListAndSell",
              "value": "ListAndSell",
            },
          ],
        },
        "AzureProductSubmission": {
          "docs": undefined,
          "properties": {
            "areResourcesReady": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "friendlyName": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "pendingUpdateInfo": {
              "docs": undefined,
              "type": "optional<AzurePendingUpdateInfo>",
            },
            "publishedTimeInUtc": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "releaseNumber": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "resourceType": {
              "docs": undefined,
              "type": "optional<AzureProductSubmissionResourceType>",
            },
            "resources": {
              "docs": undefined,
              "type": "optional<list<AzureTypeValue>>",
            },
            "state": {
              "docs": undefined,
              "type": "optional<AzureProductSubmissionState>",
            },
            "subState": {
              "docs": undefined,
              "type": "optional<AzureProductSubmissionSubState>",
            },
            "targets": {
              "docs": undefined,
              "type": "optional<list<AzureTypeValue>>",
            },
            "variantResources": {
              "docs": undefined,
              "type": "optional<list<AzureVariantResource>>",
            },
          },
        },
        "AzureProductSubmissionResourceType": {
          "docs": undefined,
          "enum": [
            {
              "name": "Submission",
              "value": "Submission",
            },
          ],
        },
        "AzureProductSubmissionState": {
          "docs": undefined,
          "enum": [
            {
              "name": "Inprogress",
              "value": "Inprogress",
            },
            {
              "name": "Published",
              "value": "Published",
            },
          ],
        },
        "AzureProductSubmissionSubState": {
          "docs": undefined,
          "enum": [
            {
              "name": "InDraft",
              "value": "InDraft",
            },
            {
              "name": "Submitted",
              "value": "Submitted",
            },
            {
              "name": "Failed",
              "value": "Failed",
            },
            {
              "name": "FailedInCertification",
              "value": "FailedInCertification",
            },
            {
              "name": "ReadyToPublish",
              "value": "ReadyToPublish",
            },
            {
              "name": "Publishing",
              "value": "Publishing",
            },
            {
              "name": "Published",
              "value": "Published",
            },
            {
              "name": "InStore",
              "value": "InStore",
            },
          ],
        },
        "AzureProductVariant": {
          "docs": undefined,
          "properties": {
            "azureGovernmentCertifications": {
              "docs": undefined,
              "type": "optional<list<AzureGovernmentCertification>>",
            },
            "cloudAvailabilities": {
              "docs": undefined,
              "type": "optional<list<string>>",
            },
            "conversionPaths": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "extendedProperties": {
              "docs": undefined,
              "type": "optional<list<AzureTypeValue>>",
            },
            "externalID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "featureAvailabilities": {
              "docs": "Not original fields. They are populated by other API calls",
              "type": "optional<list<AzureProductFeatureAvailability>>",
            },
            "friendlyName": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "leadGenID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "referenceVariantID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "resourceType": {
              "docs": undefined,
              "type": "optional<AzureProductVariantResourceType>",
            },
            "state": {
              "docs": undefined,
              "type": "optional<AzureProductVariantState>",
            },
          },
        },
        "AzureProductVariantCustomMeter": {
          "docs": undefined,
          "properties": {
            "displayName": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "includedBaseQuantities": {
              "docs": undefined,
              "type": "optional<list<AzureIncludedBaseQuantity>>",
            },
            "isEnabled": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "priceInUsd": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "uniqueID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "unitOfMeasure": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "AzureProductVariantPriceSchedule": {
          "docs": undefined,
          "properties": {
            "dateTimeRange": {
              "docs": undefined,
              "type": "optional<AzureLocalizedTimeRange>",
            },
            "friendlyName": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "isBaseSchedule": {
              "docs": "There is only one base schedule.",
              "type": "optional<boolean>",
            },
            "marketCodes": {
              "docs": "ISO country code",
              "type": "optional<list<string>>",
            },
            "schedules": {
              "docs": undefined,
              "type": "optional<list<AzurePriceSchedule>>",
            },
          },
        },
        "AzureProductVariantResourceType": {
          "docs": undefined,
          "enum": [
            {
              "name": "AzureSkuVariant",
              "value": "AzureSkuVariant",
            },
            {
              "name": "AzureTestDriveVariant",
              "value": "AzureTestDriveVariant",
            },
          ],
        },
        "AzureProductVariantState": {
          "docs": undefined,
          "enum": [
            {
              "name": "InActive",
              "value": "InActive",
            },
            {
              "name": "Active",
              "value": "Active",
            },
          ],
        },
        "AzureProductVariantTrial": {
          "docs": undefined,
          "properties": {
            "dateTimeRange": {
              "docs": undefined,
              "type": "optional<AzureLocalizedTimeRange>",
            },
            "duration": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "durationType": {
              "docs": undefined,
              "type": "optional<AzureProductVariantTrialDurationType>",
            },
            "type": {
              "docs": undefined,
              "type": "optional<AzureProductVariantTrialType>",
            },
          },
        },
        "AzureProductVariantTrialDurationType": {
          "docs": undefined,
          "enum": [
            {
              "name": "Minute",
              "value": "Minute",
            },
            {
              "name": "Days",
              "value": "Days",
            },
            {
              "name": "Months",
              "value": "Months",
            },
          ],
        },
        "AzureProductVariantTrialType": {
          "docs": undefined,
          "enum": [
            {
              "name": "NoTrial",
              "value": "NoTrial",
            },
            {
              "name": "TimedAccess",
              "value": "TimedAccess",
            },
            {
              "name": "TimedUsage",
              "value": "TimedUsage",
            },
            {
              "name": "Unlimited",
              "value": "Unlimited",
            },
          ],
        },
        "AzureTypeValue": {
          "docs": undefined,
          "properties": {
            "type": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "value": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "AzureValidationResult": {
          "docs": undefined,
          "properties": {
            "errorMessage": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "memberNames": {
              "docs": undefined,
              "type": "optional<list<string>>",
            },
          },
        },
        "AzureVariantResource": {
          "docs": undefined,
          "properties": {
            "resources": {
              "docs": undefined,
              "type": "optional<list<AzureTypeValue>>",
            },
            "variantID": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "DeleteIntegrationRequestPartner": {
          "docs": undefined,
          "enum": [
            {
              "name": "AWS",
              "value": "AWS",
            },
            {
              "name": "AZURE",
              "value": "AZURE",
            },
            {
              "name": "GCP",
              "value": "GCP",
            },
          ],
        },
        "DeleteIntegrationRequestService": {
          "docs": undefined,
          "enum": [
            {
              "name": "MARKETPLACE",
              "value": "MARKETPLACE",
            },
            {
              "name": "CRM",
              "value": "CRM",
            },
          ],
        },
        "GetIntegrationRequestPartner": {
          "docs": undefined,
          "enum": [
            {
              "name": "AWS",
              "value": "AWS",
            },
            {
              "name": "AZURE",
              "value": "AZURE",
            },
            {
              "name": "GCP",
              "value": "GCP",
            },
          ],
        },
        "GetIntegrationRequestService": {
          "docs": undefined,
          "enum": [
            {
              "name": "MARKETPLACE",
              "value": "MARKETPLACE",
            },
            {
              "name": "CRM",
              "value": "CRM",
            },
          ],
        },
        "GithubComAwsAwsSdkGoV2ServiceMarketplacemeteringTypesTag": {
          "docs": undefined,
          "properties": {
            "key": {
              "docs": "One part of a key-value pair that makes up a tag. A key is a label that acts
like a category for the specific tag values.

This member is required.",
              "type": "optional<string>",
            },
            "value": {
              "docs": "One part of a key-value pair that makes up a tag. A value acts as a descriptor
within a tag category (key). The value can be empty or null.

This member is required.",
              "type": "optional<string>",
            },
          },
        },
        "GithubComSugerioMarketplaceServiceAzureSdkMarketplacemeteringv1BatchUsageEventOkResponse": {
          "docs": undefined,
          "properties": {
            "count": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "result": {
              "docs": undefined,
              "type": "optional<list<GithubComSugerioMarketplaceServiceAzureSdkMarketplacemeteringv1UsageBatchEventOkMessage>>",
            },
          },
        },
        "GithubComSugerioMarketplaceServiceAzureSdkMarketplacemeteringv1UsageBatchEventOkMessage": {
          "docs": undefined,
          "properties": {
            "dimension": {
              "docs": "Dimension identifier",
              "type": "optional<string>",
            },
            "effectiveStartTime": {
              "docs": "Time in UTC when the usage event occurred",
              "type": "optional<string>",
            },
            "error": {
              "docs": undefined,
              "type": "optional<GithubComSugerioMarketplaceServiceAzureSdkMarketplacemeteringv1UsageEventConflictResponse>",
            },
            "messageTime": {
              "docs": "Time this message was created in UTC",
              "type": "optional<string>",
            },
            "planId": {
              "docs": "Plan associated with the purchased offer",
              "type": "optional<string>",
            },
            "quantity": {
              "docs": "Number of units consumed",
              "type": "optional<double>",
            },
            "resourceId": {
              "docs": "Identifier of the resource against which usage is emitted",
              "type": "optional<string>",
            },
            "resourceUri": {
              "docs": "Identifier of the managed app resource against which usage is emitted",
              "type": "optional<string>",
            },
            "status": {
              "docs": "Status of the operation.",
              "type": "optional<GithubComSugerioMarketplaceServiceAzureSdkMarketplacemeteringv1UsageEventStatusEnum>",
            },
            "usageEventId": {
              "docs": "Unique identifier associated with the usage event",
              "type": "optional<string>",
            },
          },
        },
        "GithubComSugerioMarketplaceServiceAzureSdkMarketplacemeteringv1UsageEventConflictResponse": {
          "docs": undefined,
          "properties": {
            "additionalInfo": {
              "docs": undefined,
              "type": "optional<GithubComSugerioMarketplaceServiceAzureSdkMarketplacemeteringv1UsageEventConflictResponseAdditionalInfo>",
            },
            "code": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "message": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "GithubComSugerioMarketplaceServiceAzureSdkMarketplacemeteringv1UsageEventConflictResponseAdditionalInfo": {
          "docs": undefined,
          "properties": {
            "acceptedMessage": {
              "docs": undefined,
              "type": "optional<GithubComSugerioMarketplaceServiceAzureSdkMarketplacemeteringv1UsageEventOkResponse>",
            },
          },
        },
        "GithubComSugerioMarketplaceServiceAzureSdkMarketplacemeteringv1UsageEventOkResponse": {
          "docs": undefined,
          "properties": {
            "dimension": {
              "docs": "Dimension identifier",
              "type": "optional<string>",
            },
            "effectiveStartTime": {
              "docs": "Time in UTC when the usage event occurred",
              "type": "optional<string>",
            },
            "messageTime": {
              "docs": "Time this message was created in UTC",
              "type": "optional<string>",
            },
            "planId": {
              "docs": "Plan associated with the purchased offer",
              "type": "optional<string>",
            },
            "quantity": {
              "docs": "Number of units consumed",
              "type": "optional<double>",
            },
            "resourceId": {
              "docs": "Identifier of the resource against which usage is emitted",
              "type": "optional<string>",
            },
            "resourceUri": {
              "docs": "Identifier of the managed app resource against which usage is emitted",
              "type": "optional<string>",
            },
            "status": {
              "docs": "Status of the operation.",
              "type": "optional<GithubComSugerioMarketplaceServiceAzureSdkMarketplacemeteringv1UsageEventStatusEnum>",
            },
            "usageEventId": {
              "docs": "Unique identifier associated with the usage event",
              "type": "optional<string>",
            },
          },
        },
        "GithubComSugerioMarketplaceServiceAzureSdkMarketplacemeteringv1UsageEventStatusEnum": {
          "docs": undefined,
          "enum": [
            {
              "name": "Accepted",
              "value": "Accepted",
            },
            {
              "name": "Expired",
              "value": "Expired",
            },
            {
              "name": "Duplicate",
              "value": "Duplicate",
            },
            {
              "name": "Error",
              "value": "Error",
            },
            {
              "name": "ResourceNotFound",
              "value": "ResourceNotFound",
            },
            {
              "name": "ResourceNotAuthorized",
              "value": "ResourceNotAuthorized",
            },
            {
              "name": "InvalidDimension",
              "value": "InvalidDimension",
            },
            {
              "name": "InvalidQuantity",
              "value": "InvalidQuantity",
            },
            {
              "name": "BadArgument",
              "value": "BadArgument",
            },
          ],
        },
        "GithubComSugerioMarketplaceServiceRdsDbLibBillingAwsBillingEvent": {
          "docs": undefined,
          "properties": {
            "action": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "agreementID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "amount": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "balanceImpacting": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "bankTraceID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "billingAddressID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "brokerID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "buyerID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "currency": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "dataFeedProductID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "disbursementBillingEventID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "endUserAccountID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "entitlementID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "fromAccountID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "insertDate": {
              "docs": undefined,
              "type": "optional<SqlNullTime>",
            },
            "invoiceDate": {
              "docs": undefined,
              "type": "optional<SqlNullTime>",
            },
            "invoiceID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "offerID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "organizationID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "parentBillingEventID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "paymentDueDate": {
              "docs": undefined,
              "type": "optional<SqlNullTime>",
            },
            "productID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "toAccountID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "transactionReferenceID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "transactionType": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "usagePeriodEndDate": {
              "docs": undefined,
              "type": "optional<SqlNullTime>",
            },
            "usagePeriodStartDate": {
              "docs": undefined,
              "type": "optional<SqlNullTime>",
            },
          },
        },
        "GithubComSugerioMarketplaceServiceRdsDbLibBillingAzureCmaRevenue": {
          "docs": undefined,
          "properties": {
            "azureAssetID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "azureBillingAccountID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "azureCustomerID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "azureOfferID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "azurePlanID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "billingModel": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "buyerID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "earningUsd": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "entitlementID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "offerID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "organizationID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "payoutStatus": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "productID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "purchaseRecordID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "revenueUsd": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "termEndDate": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "termStartDate": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "GithubComSugerioMarketplaceServiceRdsDbLibBillingGcpChargeUsage": {
          "docs": undefined,
          "properties": {
            "abandoned": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "accountID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "buyerID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "charges": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "currency": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "dueVendor": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "entitlementID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "googleEntity": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "insightAccountID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "offerID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "organizationID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "paymentSchedule": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "paymentType": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "prepayCredits": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "productID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "refundBalanceDeductedThisMonth": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "refundBalanceOutstanding": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "refundReason": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "released": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "reportDate": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "resource": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "sku": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "trialUse": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "unit": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "usage": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "usedBy": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "withheld": {
              "docs": undefined,
              "type": "optional<double>",
            },
          },
        },
        "ListEntitlementsByPartnerRequestPartner": {
          "docs": undefined,
          "enum": [
            {
              "name": "AWS",
              "value": "AWS",
            },
            {
              "name": "AZURE",
              "value": "AZURE",
            },
            {
              "name": "GCP",
              "value": "GCP",
            },
          ],
        },
        "ListOffersByPartnerRequestPartner": {
          "docs": undefined,
          "enum": [
            {
              "name": "AWS",
              "value": "AWS",
            },
            {
              "name": "AZURE",
              "value": "AZURE",
            },
            {
              "name": "GCP",
              "value": "GCP",
            },
          ],
        },
        "ListProductsByPartnerRequestPartner": {
          "docs": undefined,
          "enum": [
            {
              "name": "AWS",
              "value": "AWS",
            },
            {
              "name": "AZURE",
              "value": "AZURE",
            },
            {
              "name": "GCP",
              "value": "GCP",
            },
          ],
        },
        "ListRevenueRecordDetailsRequestPartner": {
          "docs": undefined,
          "enum": [
            {
              "name": "AWS",
              "value": "AWS",
            },
            {
              "name": "AZURE",
              "value": "AZURE",
            },
            {
              "name": "GCP",
              "value": "GCP",
            },
          ],
        },
        "ListRevenueRecordsRequestPartner": {
          "docs": undefined,
          "enum": [
            {
              "name": "AWS",
              "value": "AWS",
            },
            {
              "name": "AZURE",
              "value": "AZURE",
            },
            {
              "name": "GCP",
              "value": "GCP",
            },
          ],
        },
        "MarketplacemeteringBatchMeterUsageOutput": {
          "docs": undefined,
          "properties": {
            "resultMetadata": {
              "docs": "Metadata pertaining to the operation's result.",
              "type": "optional<middleware.Metadata>",
            },
            "results": {
              "docs": "Contains all UsageRecords processed by BatchMeterUsage. These records were
either honored by AWS Marketplace Metering Service or were invalid. Invalid
records should be fixed before being resubmitted.",
              "type": "optional<list<TypesUsageRecordResult>>",
            },
            "unprocessedRecords": {
              "docs": "Contains all UsageRecords that were not processed by BatchMeterUsage. This is a
list of UsageRecords. You can retry the failed request by making another
BatchMeterUsage call with this list as input in the BatchMeterUsageRequest.",
              "type": "optional<list<TypesUsageRecord>>",
            },
          },
        },
        "ServicecontrolReportError": {
          "docs": undefined,
          "properties": {
            "operationId": {
              "docs": "OperationId: The Operation.operation_id value from the request.",
              "type": "optional<string>",
            },
            "status": {
              "docs": "Status: Details of the error when processing the Operation.",
              "type": "optional<ServicecontrolStatus>",
            },
          },
        },
        "ServicecontrolReportResponse": {
          "docs": undefined,
          "properties": {
            "reportErrors": {
              "docs": "ReportErrors: Partial failures, one for each \`Operation\` in the
request that failed processing. There are three possible combinations
of the RPC status: 1. The combination of a successful RPC status and
an empty \`report_errors\` list indicates a complete success where all
\`Operations\` in the request are processed successfully. 2. The
combination of a successful RPC status and a non-empty
\`report_errors\` list indicates a partial success where some
\`Operations\` in the request succeeded. Each \`Operation\` that failed
processing has a corresponding item in this list. 3. A failed RPC
status indicates a general non-deterministic failure. When this
happens, it's impossible to know which of the 'Operations' in the
request succeeded or failed.",
              "type": "optional<list<ServicecontrolReportError>>",
            },
            "serviceConfigId": {
              "docs": "ServiceConfigId: The actual config id used to process the request.",
              "type": "optional<string>",
            },
            "serviceRolloutId": {
              "docs": "ServiceRolloutId: The current service rollout id used to process the
request.",
              "type": "optional<string>",
            },
          },
        },
        "ServicecontrolStatus": {
          "docs": undefined,
          "properties": {
            "code": {
              "docs": "Code: The status code, which should be an enum value of
google.rpc.Code.",
              "type": "optional<integer>",
            },
            "details": {
              "docs": "Details: A list of messages that carry the error details. There is a
common set of message types for APIs to use.",
              "type": "optional<list<list<integer>>>",
            },
            "message": {
              "docs": "Message: A developer-facing error message, which should be in
English. Any user-facing error message should be localized and sent
in the google.rpc.Status.details field, or localized by the client.",
              "type": "optional<string>",
            },
          },
        },
        "SharedAddEntitlementCreditResponse": {
          "docs": undefined,
          "properties": {
            "creditAmountIncrement": {
              "docs": "The amount to be added to the credit amount.",
              "type": "optional<double>",
            },
            "entitlementID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "entitlementTermID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "newCreditAmount": {
              "docs": "The new credit amount after the increment.",
              "type": "optional<double>",
            },
            "organizationID": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedApiClientAccessToken": {
          "docs": undefined,
          "properties": {
            "access_token": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "expires_in": {
              "docs": "The token expires in 1 hour",
              "type": "optional<integer>",
            },
            "token_type": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedAwsAccountIdentifier": {
          "docs": undefined,
          "properties": {
            "awsAccountID": {
              "docs": "The AWS Account ID of the buyer in AWS Marketplace",
              "type": "optional<string>",
            },
            "awsCustomerID": {
              "docs": "The AWS Customer ID of the buyer in AWS Marketplace",
              "type": "optional<string>",
            },
            "companyInfo": {
              "docs": undefined,
              "type": "optional<SharedCompanyInfo>",
            },
            "dataFeedAccountID": {
              "docs": "The Account ID in AWS Marketplace Data Feed service",
              "type": "optional<string>",
            },
          },
        },
        "SharedAwsAceIntegration": {
          "docs": undefined,
          "properties": {
            "credential": {
              "docs": undefined,
              "type": "optional<SharedAwsIntegrationCredential>",
            },
            "partnerId": {
              "docs": "The partner ID of the ISV/Seller in AWS Partner Network.",
              "type": "optional<string>",
            },
            "s3BucketName": {
              "docs": "The Name of the S3 bucket for AWS APN Customer Engagement Program (ACE) to sync the leads & opportunities.",
              "type": "optional<string>",
            },
            "s3BucketRegion": {
              "docs": "The region of the S3 bucket for AWS APN Customer Engagement Program (ACE) to sync the leads & opportunities.",
              "type": "optional<string>",
            },
            "secretKey": {
              "docs": "The secret key used to store the AzureIntegrationCredential in AWS Secret manager. for internal usage only.",
              "type": "optional<string>",
            },
          },
        },
        "SharedAwsIntegrationCredential": {
          "docs": undefined,
          "properties": {
            "accessKeyId": {
              "docs": "The access key ID of the IAM user for Suger service to access the client's AWS services.",
              "type": "optional<string>",
            },
            "iamUserArn": {
              "docs": "The ARN of the IAM user for Suger service to access the client's AWS services.",
              "type": "optional<string>",
            },
            "secretAccessKey": {
              "docs": "The secret access key of the IAM user for Suger service to access the client's AWS services.",
              "type": "optional<string>",
            },
          },
        },
        "SharedAwsMarketplaceIntegration": {
          "docs": "The data struct to store integration info for Suger service to access the client's AWS services.",
          "properties": {
            "externalID": {
              "docs": "The external ID for assuming IAM role. If empty, means no external ID set or needed. Otherwise, it should be auth_id in table identity.organization.",
              "type": "optional<string>",
            },
            "iamRoleArn": {
              "docs": "The AWS IAM role for Suger service to assume to access the client's AWS services.",
              "type": "optional<string>",
            },
            "marketplaceStartDate": {
              "docs": "AWS Marketplace start date which comes from MDFS Full-Sync.",
              "type": "optional<string>",
            },
            "mcasFullSyncDone": {
              "docs": "Is AWS Marketplace Commerce Analytics Service (MCAS) full-sync done.",
              "type": "optional<boolean>",
            },
            "mcasIamRoleArn": {
              "docs": "IAM role ARN to allow AWS Marketplace to write to the S3 bucket and publish notifications to the SNS topic.",
              "type": "optional<string>",
            },
            "mcasS3Bucket": {
              "docs": "S3 bucket for AWS Marketplace Commerce Analytics Service (MCAS)",
              "type": "optional<string>",
            },
            "mcasSnsTopic": {
              "docs": "SNS topic ARN for AWS Marketplace Commerce Analytics Service (MCAS)",
              "type": "optional<string>",
            },
            "mdfsFullSyncDone": {
              "docs": "Is AWS Marketplace Data Feeds Service (MDFS) full-sync done.",
              "type": "optional<boolean>",
            },
            "mdfsKmsKeyArn": {
              "docs": "KMS Key ARN for the S3 bucket of AWS Marketplace Data Feeds Service (MDFS)",
              "type": "optional<string>",
            },
            "mdfsS3BucketArn": {
              "docs": "S3 bucket ARN for AWS Marketplace Data Feeds Service (MDFS)",
              "type": "optional<string>",
            },
            "policyArns": {
              "docs": "The policy ARNs in the IAM role.",
              "type": "optional<list<string>>",
            },
            "revenueRecordFullSyncDone": {
              "docs": "Is AWS Marketplace Revenue Record full-sync done.",
              "type": "optional<boolean>",
            },
          },
        },
        "SharedAwsSaasProduct": {
          "docs": undefined,
          "properties": {
            "Description": {
              "docs": undefined,
              "type": "optional<SharedAwsSaasProductDescription>",
            },
            "Dimensions": {
              "docs": undefined,
              "type": "optional<list<SharedAwsSaasProductDimension>>",
            },
            "PromotionalResources": {
              "docs": undefined,
              "type": "optional<SharedAwsSaasProductPromotionalResources>",
            },
            "SupportInformation": {
              "docs": undefined,
              "type": "optional<SharedAwsSaasProductSupportInformation>",
            },
            "Versions": {
              "docs": undefined,
              "type": "optional<list<SharedAwsSaasProductVersion>>",
            },
            "dataFeedProductId": {
              "docs": "The product Id in AWS Marketplace Data Feed Service.",
              "type": "optional<string>",
            },
            "productId": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedAwsSaasProductAdditionalResource": {
          "docs": undefined,
          "properties": {
            "Text": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "Type": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "Url": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedAwsSaasProductDeliveryOption": {
          "docs": undefined,
          "properties": {
            "FulfillmentUrl": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "Id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "Type": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedAwsSaasProductDescription": {
          "docs": undefined,
          "properties": {
            "AssociatedProducts": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "Categories": {
              "docs": undefined,
              "type": "optional<list<string>>",
            },
            "EuW8Submitted": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "Highlights": {
              "docs": undefined,
              "type": "optional<list<string>>",
            },
            "LongDescription": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "Manufacturer": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "ProductCode": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "ProductTitle": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "Registered": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "SearchKeywords": {
              "docs": undefined,
              "type": "optional<list<string>>",
            },
            "ShortDescription": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "Sku": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "UsW9Submitted": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "Visibility": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedAwsSaasProductDimension": {
          "docs": undefined,
          "properties": {
            "Description": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "Key": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "Name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "Types": {
              "docs": undefined,
              "type": "optional<list<string>>",
            },
            "Unit": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedAwsSaasProductPromotionalResources": {
          "docs": undefined,
          "properties": {
            "AdditionalResources": {
              "docs": undefined,
              "type": "optional<list<SharedAwsSaasProductAdditionalResource>>",
            },
            "LogoUrl": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedAwsSaasProductSupportInformation": {
          "docs": undefined,
          "properties": {
            "Description": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedAwsSaasProductVersion": {
          "docs": undefined,
          "properties": {
            "DeliveryOptions": {
              "docs": undefined,
              "type": "optional<list<SharedAwsSaasProductDeliveryOption>>",
            },
            "Id": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedAwsSnsSubscription": {
          "docs": undefined,
          "properties": {
            "Endpoint": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "Protocol": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "Status": {
              "docs": undefined,
              "type": "optional<SharedAwsSnsSubscriptionStatus>",
            },
            "SubscriptionArn": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "TopicArn": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedAwsSnsSubscriptionStatus": {
          "docs": undefined,
          "enum": [
            {
              "name": "UNKNOWN",
              "value": "UNKNOWN",
            },
            {
              "name": "CONFIRMED",
              "value": "CONFIRMED",
            },
            {
              "name": "PENDING_CONFIRMATION",
              "value": "PENDING_CONFIRMATION",
            },
          ],
        },
        "SharedAzureAdIdentifier": {
          "docs": undefined,
          "properties": {
            "buyerInfo": {
              "docs": undefined,
              "type": "optional<SharedAzureBuyerInfo>",
            },
            "companyInfo": {
              "docs": undefined,
              "type": "optional<SharedCompanyInfo>",
            },
            "emailId": {
              "docs": "Email address",
              "type": "optional<string>",
            },
            "objectId": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "puid": {
              "docs": "ID of the user, used as External ID of suger IdentityBuyer.",
              "type": "optional<string>",
            },
            "tenantId": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedAzureBuyerInfo": {
          "docs": undefined,
          "properties": {
            "billingAccountId": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "customerId": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "firstName": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "lastName": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedAzureIntegration": {
          "docs": undefined,
          "properties": {
            "cmaFullSyncDone": {
              "docs": "Is Azure Commercial Marketplace Analytics (CMA) full-sync done.",
              "type": "optional<boolean>",
            },
            "credential": {
              "docs": undefined,
              "type": "optional<SharedAzureIntegrationCredential>",
            },
            "secretKey": {
              "docs": "The secret key used to store the AzureIntegrationCredential in AWS Secret manager. for internal usage only.",
              "type": "optional<string>",
            },
          },
        },
        "SharedAzureIntegrationCredential": {
          "docs": undefined,
          "properties": {
            "accessToken": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "clientID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "clientSecret": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "expiresOn": {
              "docs": "The time when the access token expires.",
              "type": "optional<string>",
            },
            "refreshToken": {
              "docs": "The refresh token used to refresh the access token.",
              "type": "optional<string>",
            },
            "tenantID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "tokenScope": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "tokenType": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedAzureMarketplaceSubscription": {
          "docs": undefined,
          "properties": {
            "allowedCustomerOperations": {
              "docs": undefined,
              "type": "optional<list<SharedAzureMarketplaceSubscriptionAllowedCustomerOperationsItem>>",
            },
            "autoRenew": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "beneficiary": {
              "docs": undefined,
              "type": "optional<SharedAzureAdIdentifier>",
            },
            "created": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "fulfillmentId": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "isFreeTrial": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "isTest": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "lastModified": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "offerId": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "planId": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "publisherId": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "purchaser": {
              "docs": undefined,
              "type": "optional<SharedAzureAdIdentifier>",
            },
            "quantity": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "saasSubscriptionStatus": {
              "docs": undefined,
              "type": "optional<SharedAzureMarketplaceSubscriptionStatus>",
            },
            "sandboxType": {
              "docs": undefined,
              "type": "optional<SharedAzureMarketplaceSubscriptionSandboxType>",
            },
            "sessionId": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "sessionMode": {
              "docs": undefined,
              "type": "optional<SharedAzureMarketplaceSubscriptionSessionMode>",
            },
            "storeFront": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "term": {
              "docs": undefined,
              "type": "optional<SharedAzureTerm>",
            },
          },
        },
        "SharedAzureMarketplaceSubscriptionAllowedCustomerOperationsItem": {
          "docs": undefined,
          "enum": [
            {
              "name": "Read",
              "value": "Read",
            },
            {
              "name": "Update",
              "value": "Update",
            },
            {
              "name": "Delete",
              "value": "Delete",
            },
          ],
        },
        "SharedAzureMarketplaceSubscriptionSandboxType": {
          "docs": undefined,
          "enum": [
            {
              "name": "None",
              "value": "None",
            },
            {
              "name": "Csp",
              "value": "Csp",
            },
          ],
        },
        "SharedAzureMarketplaceSubscriptionSessionMode": {
          "docs": undefined,
          "enum": [
            {
              "name": "None",
              "value": "None",
            },
            {
              "name": "DryRun",
              "value": "DryRun",
            },
          ],
        },
        "SharedAzureMarketplaceSubscriptionStatus": {
          "docs": undefined,
          "enum": [
            {
              "name": "NotStarted",
              "value": "NotStarted",
            },
            {
              "name": "PendingFulfillmentStart",
              "value": "PendingFulfillmentStart",
            },
            {
              "name": "Subscribed",
              "value": "Subscribed",
            },
            {
              "name": "Suspended",
              "value": "Suspended",
            },
            {
              "name": "Unsubscribed",
              "value": "Unsubscribed",
            },
          ],
        },
        "SharedAzureTerm": {
          "docs": undefined,
          "properties": {
            "chargeDuration": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "endDate": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "startDate": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "termUnit": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedBuyerInfo": {
          "docs": undefined,
          "properties": {
            "awsBuyer": {
              "docs": "Buyer from AWS Marketplace",
              "type": "optional<SharedAwsAccountIdentifier>",
            },
            "azureBuyer": {
              "docs": "Buyer from Azure Marketplace",
              "type": "optional<SharedAzureAdIdentifier>",
            },
            "collectableAmount": {
              "docs": "The amount that the seller can collect. It excludes the marketplace commision fee.",
              "type": "optional<double>",
            },
            "disbursedAmount": {
              "docs": "The amount that has been disbursed to the seller account.",
              "type": "optional<double>",
            },
            "gcpBuyer": {
              "docs": "Buyer from GCP Marketplace",
              "type": "optional<SharedGcpMarketplaceUserAccount>",
            },
            "invoicedAmount": {
              "docs": "The amount that the buyer has got invoiced.",
              "type": "optional<double>",
            },
          },
        },
        "SharedCommitDimension": {
          "docs": "The commit dimension. There may be one or more commit dimensions defined in single product, offer or entitlement.",
          "properties": {
            "category": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "description": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "isUserCreated": {
              "docs": "Whether this commit dimension is newly created by user when creating AWS Marketplace Contract private offer.",
              "type": "optional<boolean>",
            },
            "key": {
              "docs": "API name of the dimension",
              "type": "optional<string>",
            },
            "length": {
              "docs": "The term length for the commit amount, such as 6 months, or 1 year. length is used together with timeUnit",
              "type": "optional<integer>",
            },
            "maximumUsers": {
              "docs": "The maximum number of users for PER_USER commit",
              "type": "optional<integer>",
            },
            "minimumUsers": {
              "docs": "The minimum number of users for PER_USER commit",
              "type": "optional<integer>",
            },
            "name": {
              "docs": "Display name of the dimension",
              "type": "optional<string>",
            },
            "quantity": {
              "docs": "The quantity of this commit.",
              "type": "optional<integer>",
            },
            "rate": {
              "docs": "The commit amount.",
              "type": "optional<double>",
            },
            "timeUnit": {
              "docs": "The term unit for the commit amount.",
              "type": "optional<SharedCommitDimensionTimeUnit>",
            },
            "type": {
              "docs": undefined,
              "type": "optional<SharedCommitDimensionType>",
            },
            "types": {
              "docs": undefined,
              "type": "optional<list<string>>",
            },
          },
        },
        "SharedCommitDimensionTimeUnit": {
          "docs": undefined,
          "enum": [
            {
              "name": "DAY",
              "value": "DAY",
            },
            {
              "name": "MONTH",
              "value": "MONTH",
            },
            {
              "name": "YEAR",
              "value": "YEAR",
            },
          ],
        },
        "SharedCommitDimensionType": {
          "docs": undefined,
          "enum": [
            {
              "name": "FLAT_RATE",
              "value": "FLAT_RATE",
            },
            {
              "name": "PER_USER",
              "value": "PER_USER",
            },
          ],
        },
        "SharedCompanyInfo": {
          "docs": undefined,
          "properties": {
            "addressLine1": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "addressLine2": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "city": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "country": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "emailDomain": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "postalCode": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "state": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedContact": {
          "docs": undefined,
          "properties": {
            "company": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "email": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "name": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedCreateIntegrationParamsPartner": {
          "docs": undefined,
          "enum": [
            {
              "name": "AWS",
              "value": "AWS",
            },
            {
              "name": "AZURE",
              "value": "AZURE",
            },
            {
              "name": "GCP",
              "value": "GCP",
            },
          ],
        },
        "SharedCreateIntegrationParamsService": {
          "docs": undefined,
          "enum": [
            {
              "name": "MARKETPLACE",
              "value": "MARKETPLACE",
            },
          ],
        },
        "SharedEntitlementInfo": {
          "docs": undefined,
          "properties": {
            "autoRenew": {
              "docs": "Is this Entitlement Auto Renew enabled.",
              "type": "optional<boolean>",
            },
            "awsEntitlements": {
              "docs": "Nullable. AWS Entitlements from AWS Marketplace.",
              "type": "optional<list<TypesEntitlement>>",
            },
            "azureSubscriptions": {
              "docs": "Nullable. Azure Subscriptions from Azure Marketplace.",
              "type": "optional<list<SharedAzureMarketplaceSubscription>>",
            },
            "collectableAmount": {
              "docs": "The amount that the seller can collect. It excludes the marketplace commision fee.",
              "type": "optional<double>",
            },
            "commitAmount": {
              "docs": "The amount that the buyer has committed to pay. It can be the sum of payment installments if applicable.",
              "type": "optional<double>",
            },
            "commits": {
              "docs": "The dimensions for commit.",
              "type": "optional<list<SharedCommitDimension>>",
            },
            "currency": {
              "docs": "The default Currency is USD.",
              "type": "optional<string>",
            },
            "dimensions": {
              "docs": "The dimensions for usage-based metering.",
              "type": "optional<list<SharedMeteringDimension>>",
            },
            "disbursedAmount": {
              "docs": "The amount that has been disbursed to the seller account.",
              "type": "optional<double>",
            },
            "discount": {
              "docs": "The rate of discount (0 ~ 1.0), such as 0.1 which is 10% off. 0 which is no discount.",
              "type": "optional<double>",
            },
            "eulaType": {
              "docs": undefined,
              "type": "optional<SharedEulaType>",
            },
            "eulaUrl": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "gcpEntitlements": {
              "docs": "Nullable. GCP Entitlements from GCP Marketplace.",
              "type": "optional<list<SharedGcpMarketplaceEntitlement>>",
            },
            "gcpPlans": {
              "docs": "Only applicable for GCP Marketplace Entitlements.",
              "type": "optional<list<SharedGcpPurchasePlan>>",
            },
            "invoicedAmount": {
              "docs": "The amount that the buyer has got invoiced.",
              "type": "optional<double>",
            },
            "paymentInstallments": {
              "docs": "For flexible payment schedules",
              "type": "optional<list<SharedPaymentInstallment>>",
            },
            "refundCancelationPolicy": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "sellerNotes": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedEntitlementTermInfo": {
          "docs": undefined,
          "properties": {
            "type": {
              "docs": undefined,
              "type": "optional<SharedEntitlementTermType>",
            },
          },
        },
        "SharedEntitlementTermType": {
          "docs": undefined,
          "enum": [
            {
              "name": "Unknown",
              "value": "",
            },
            {
              "name": "AutoRenew",
              "value": "AutoRenew",
            },
            {
              "name": "ManualRenew",
              "value": "ManualRenew",
            },
            {
              "name": "PlanChange",
              "value": "PlanChange",
            },
            {
              "name": "QuantityChange",
              "value": "QuantityChange",
            },
            {
              "name": "Signup",
              "value": "Signup",
            },
          ],
        },
        "SharedEntitlementUsageRecord": {
          "docs": undefined,
          "properties": {
            "amounts": {
              "docs": undefined,
              "type": "optional<list<double>>",
            },
            "date": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "keys": {
              "docs": undefined,
              "type": "optional<list<string>>",
            },
            "quantities": {
              "docs": undefined,
              "type": "optional<list<double>>",
            },
          },
        },
        "SharedEntityType": {
          "docs": undefined,
          "enum": [
            {
              "name": "ORGANIZATION",
              "value": "ORGANIZATION",
            },
            {
              "name": "PRODUCT",
              "value": "PRODUCT",
            },
            {
              "name": "OFFER",
              "value": "OFFER",
            },
            {
              "name": "ENTITLEMENT",
              "value": "ENTITLEMENT",
            },
            {
              "name": "ENTITLEMENT_TERM",
              "value": "ENTITLEMENT_TERM",
            },
            {
              "name": "INTEGRATION",
              "value": "INTEGRATION",
            },
          ],
        },
        "SharedEulaType": {
          "docs": undefined,
          "enum": [
            {
              "name": "UNKNOWN",
              "value": "",
            },
            {
              "name": "SCMP",
              "value": "SCMP",
            },
            {
              "name": "ECMP",
              "value": "ECMP",
            },
            {
              "name": "CUSTOM",
              "value": "CUSTOM",
            },
            {
              "name": "ISV",
              "value": "ISV",
            },
            {
              "name": "CURRENT",
              "value": "CURRENT",
            },
          ],
        },
        "SharedGcpCommerceProducerExternalAccountSpec": {
          "docs": undefined,
          "properties": {
            "loginUri": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "signupUri": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "singleSignOnUri": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedGcpCommerceProducerListingSpec": {
          "docs": undefined,
          "properties": {
            "externalAccountSpec": {
              "docs": undefined,
              "type": "optional<SharedGcpCommerceProducerExternalAccountSpec>",
            },
            "listingType": {
              "docs": undefined,
              "type": "optional<SharedGcpCommerceProducerListingSpecListingType>",
            },
            "marketingSpec": {
              "docs": undefined,
              "type": "optional<SharedGcpCommerceProducerMarketingSpec>",
            },
            "purchaseSpec": {
              "docs": undefined,
              "type": "optional<SharedGcpCommerceProducerPurchaseSpec>",
            },
          },
        },
        "SharedGcpCommerceProducerListingSpecListingType": {
          "docs": undefined,
          "enum": [
            {
              "name": "BillingIntegratedManagedService",
              "value": "BillingIntegratedManagedService",
            },
          ],
        },
        "SharedGcpCommerceProducerMarketingSpec": {
          "docs": undefined,
          "properties": {
            "description": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "displayNames": {
              "docs": "In format of "{provider-id}/{product-name}"",
              "type": "optional<list<string>>",
            },
            "eulaUrl": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "externalMarketingUrl": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "icon": {
              "docs": "In format of "base64://..."",
              "type": "optional<string>",
            },
            "searchCategories": {
              "docs": undefined,
              "type": "optional<list<string>>",
            },
            "searchDescription": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "searchKeywords": {
              "docs": undefined,
              "type": "optional<list<string>>",
            },
            "shortTitle": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "supportSpec": {
              "docs": undefined,
              "type": "optional<SharedGcpCommerceProducerSupportSpec>",
            },
            "title": {
              "docs": "The product title.",
              "type": "optional<string>",
            },
          },
        },
        "SharedGcpCommerceProducerPrice": {
          "docs": undefined,
          "properties": {
            "currencyCode": {
              "docs": "ISO currency code, Three UPPER_CASE characters",
              "type": "optional<string>",
            },
            "nanos": {
              "docs": "Decimal part of the price. For example, 2000000 = 0.002, 200000000 = 0.2",
              "type": "optional<integer>",
            },
            "units": {
              "docs": "Integer part of the price.",
              "type": "optional<integer>",
            },
          },
        },
        "SharedGcpCommerceProducerPriceInfo": {
          "docs": undefined,
          "properties": {
            "description": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "priceModel": {
              "docs": undefined,
              "type": "optional<SharedGcpCommerceProducerPriceModel>",
            },
            "subscriptionPlans": {
              "docs": "Commit price plan, when priceModel = SUBSCRIPTION or SUBSCRIPTION_PLUS_USAGE.",
              "type": "optional<list<SharedGcpCommerceProducerPriceSubscription>>",
            },
            "usageFees": {
              "docs": "Usage based metering plan, when priceModel =  USAGE or SUBSCRIPTION_PLUS_USAGE",
              "type": "optional<list<SharedGcpCommerceProducerPriceUsage>>",
            },
          },
        },
        "SharedGcpCommerceProducerPriceModel": {
          "docs": undefined,
          "enum": [
            {
              "name": "FREE",
              "value": "FREE",
            },
            {
              "name": "SUBSCRIPTION",
              "value": "SUBSCRIPTION",
            },
            {
              "name": "USAGE",
              "value": "USAGE",
            },
            {
              "name": "SUBSCRIPTION_PLUS_USAGE",
              "value": "SUBSCRIPTION_PLUS_USAGE",
            },
          ],
        },
        "SharedGcpCommerceProducerPriceSubscription": {
          "docs": undefined,
          "properties": {
            "period": {
              "docs": undefined,
              "type": "optional<SharedGcpCommerceProducerPriceSubscriptionPeriod>",
            },
            "price": {
              "docs": "the Monthly subscription fee as commit.",
              "type": "optional<SharedGcpCommerceProducerPrice>",
            },
            "taxCategoryOverride": {
              "docs": undefined,
              "type": "optional<SharedGcpCommerceProducerPriceSubscriptionTaxCategoryOverride>",
            },
          },
        },
        "SharedGcpCommerceProducerPriceSubscriptionPeriod": {
          "docs": undefined,
          "enum": [
            {
              "name": "ONE_YEAR",
              "value": "ONE_YEAR",
            },
          ],
        },
        "SharedGcpCommerceProducerPriceSubscriptionTaxCategoryOverride": {
          "docs": undefined,
          "enum": [
            {
              "name": "TAX_CATEGORY_UNSPECIFIED",
              "value": "TAX_CATEGORY_UNSPECIFIED",
            },
          ],
        },
        "SharedGcpCommerceProducerPriceTier": {
          "docs": undefined,
          "properties": {
            "endUsageAmount": {
              "docs": "The usage amount below which this tier is effective.",
              "type": "optional<double>",
            },
            "price": {
              "docs": "The price of this tier",
              "type": "optional<SharedGcpCommerceProducerPrice>",
            },
            "startUsageAmount": {
              "docs": "The usage amount beyond which this tier is effective.",
              "type": "optional<double>",
            },
          },
        },
        "SharedGcpCommerceProducerPriceUsage": {
          "docs": undefined,
          "properties": {
            "displayQuantity": {
              "docs": "Default value is 1.",
              "type": "optional<integer>",
            },
            "metricId": {
              "docs": "the usage metering dimension key",
              "type": "optional<string>",
            },
            "priceTiers": {
              "docs": undefined,
              "type": "optional<list<SharedGcpCommerceProducerPriceTier>>",
            },
            "taxCategoryOverride": {
              "docs": undefined,
              "type": "optional<SharedGcpCommerceProducerPriceUsageTaxCategoryOverride>",
            },
          },
        },
        "SharedGcpCommerceProducerPriceUsageTaxCategoryOverride": {
          "docs": undefined,
          "enum": [
            {
              "name": "TAX_CATEGORY_UNSPECIFIED",
              "value": "TAX_CATEGORY_UNSPECIFIED",
            },
          ],
        },
        "SharedGcpCommerceProducerPurchaseMetric": {
          "docs": undefined,
          "properties": {
            "description": {
              "docs": "Description: A detailed description of the metric, which can be used in documentation.",
              "type": "optional<string>",
            },
            "displayName": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "displayUnit": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "displayUnitDescription": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": "The usage metering dimension key, in format of "{plan_key}_{usage_dimension_key}"",
              "type": "optional<string>",
            },
            "metricKind": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "name": {
              "docs": "Name: The resource name of the metric descriptor, in format of "{service_name}/{plan_key}_{usage_dimension_key}"",
              "type": "optional<string>",
            },
            "reportingUnit": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "unit": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "valueType": {
              "docs": undefined,
              "type": "optional<SharedValueType>",
            },
          },
        },
        "SharedGcpCommerceProducerPurchaseSpec": {
          "docs": undefined,
          "properties": {
            "metrics": {
              "docs": undefined,
              "type": "optional<list<SharedGcpCommerceProducerPurchaseMetric>>",
            },
            "purchaseOptionSpecs": {
              "docs": undefined,
              "type": "optional<list<SharedGcpPurchasePlan>>",
            },
          },
        },
        "SharedGcpCommerceProducerServiceBilling": {
          "docs": undefined,
          "properties": {
            "metrics": {
              "docs": "in format of ["{product-name}.endpoints.{provider-id}.cloud.goog/{plan_key}_{usage_dimension_key}"]",
              "type": "optional<list<string>>",
            },
          },
        },
        "SharedGcpCommerceProducerServiceConfig": {
          "docs": undefined,
          "properties": {
            "billing": {
              "docs": undefined,
              "type": "optional<SharedGcpCommerceProducerServiceBilling>",
            },
            "metrics": {
              "docs": "Metrics: Defines the metrics used by this service.",
              "type": "optional<list<SharedGcpCommerceProducerPurchaseMetric>>",
            },
            "name": {
              "docs": "In format of "{product-name}.endpoints.{provider-id}.cloud.goog"",
              "type": "optional<string>",
            },
            "producerProjectId": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "title": {
              "docs": "The Product title",
              "type": "optional<string>",
            },
          },
        },
        "SharedGcpCommerceProducerSupportSpec": {
          "docs": undefined,
          "properties": {
            "description": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "email": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "uri": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedGcpIntegration": {
          "docs": undefined,
          "properties": {
            "gcpProjectId": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "gcpProjectNumber": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "identityProviderId": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "partnerId": {
              "docs": "The GCP Marketplace Partner ID, it is also called as Provider ID somewhere.",
              "type": "optional<string>",
            },
            "pubsubTopic": {
              "docs": "The resource name of the Pub/Sub topic to receive notifications from Google when a user signs up for your service, purchases a plan, or changes an existing plan.",
              "type": "optional<string>",
            },
            "reportBucket": {
              "docs": "The GCP storage bucket name to store the GCP Marketplace reports.",
              "type": "optional<string>",
            },
            "reportFullSyncDone": {
              "docs": "Is GCP Marketplace Report full-sync done.",
              "type": "optional<boolean>",
            },
            "reportStartDate": {
              "docs": "The UTC date when GCP Marketplace reprots start to generate.",
              "type": "optional<string>",
            },
            "serviceAccountEmail": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "serviceNames": {
              "docs": "The array of service resource names of the listings in GCP Marketplace.",
              "type": "optional<list<string>>",
            },
            "workloadIdentityPoolId": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedGcpMarketplaceConsumer": {
          "docs": undefined,
          "properties": {
            "project": {
              "docs": "The project name with format \`projects/\`.",
              "type": "optional<string>",
            },
          },
        },
        "SharedGcpMarketplaceEntitlement": {
          "docs": undefined,
          "properties": {
            "account": {
              "docs": "The resource name of the account that this entitlement is based on, if any, in format ""providers/{provider_id}/accounts/{account_id}"",
              "type": "optional<string>",
            },
            "consumers": {
              "docs": "The resources using this entitlement, if applicable.",
              "type": "optional<list<SharedGcpMarketplaceConsumer>>",
            },
            "createTime": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": "Entitlement Id generated by GCP Marketplace. For Marketplace pub/sub event.",
              "type": "optional<string>",
            },
            "inputProperties": {
              "docs": "The custom properties that were collected from the user to create this entitlement.",
              "type": "optional<list<integer>>",
            },
            "messageToUser": {
              "docs": "Provider-supplied message that is displayed to the end user. Currently this is used to communicate progress and ETA for
provisioning. This field can be updated only when a user is waiting for an action from the provider, i.e. entitlement state is
EntitlementState.ENTITLEMENT_ACTIVATION_REQUESTED or EntitlementState.ENTITLEMENT_PENDING_PLAN_CHANGE_APPROVAL. This field is cleared automatically when the entitlement state changes.",
              "type": "optional<string>",
            },
            "name": {
              "docs": "The resource name of the entitlement. Entitlement names have the form \`providers/{provider_id}/entitlements/{entitlement_id}\`.",
              "type": "optional<string>",
            },
            "newOfferDuration": {
              "docs": "in ISO 8601 duration format, such as "P2Y3M". For Marketplace pub/sub event.",
              "type": "optional<string>",
            },
            "newOfferEndTime": {
              "docs": "Output only. The end time of the new offer. Field is empty if the pending plan change is not moving to an offer.
If the offer was created with a term instead of a specified end date, this field is empty.",
              "type": "optional<string>",
            },
            "newOfferStartTime": {
              "docs": "Output only. The start time of the new offer. Field is empty if the pending plan change is not moving to an offer.",
              "type": "optional<string>",
            },
            "newPendingOffer": {
              "docs": "The name of the offer the entitlement is switching to upon a pending plan change. Only exists if the
pending plan change is moving to an offer. Format:
'projects/{project}/services/{service}/privateOffers/{offer-id}' OR
'projects/{project}/services/{service}/standardOffers/{offer-id}',
depending on whether the offer is private or public.",
              "type": "optional<string>",
            },
            "newPendingOfferDuration": {
              "docs": "The offer duration of the new offer in ISO 8601 duration format. Field is empty if the pending plan
change is not moving to an offer since the entitlement is not pending, only the plan change is pending.",
              "type": "optional<string>",
            },
            "newPendingPlan": {
              "docs": "The identifier of the pending new plan. Required if the product has plans and the entitlement has a pending plan change.",
              "type": "optional<string>",
            },
            "newPlan": {
              "docs": "When the buyer changes plan, For Marketplace pub/sub event.",
              "type": "optional<string>",
            },
            "offer": {
              "docs": "The name of the offer that was procured. Field is empty if order was not made using an offer. Format:
'projects/{project}/services/{service}/privateOffers/{offer-id}' OR 'projects/{project}/services/{service}/standardOffers/{offer-id}',
depending on whether the offer is private or public.",
              "type": "optional<string>",
            },
            "offerDuration": {
              "docs": "The offer duration of the current offer in ISO 8601 duration format. Field is empty if entitlement was not made using an offer, such as "P1Y", "P2M"",
              "type": "optional<string>",
            },
            "offerEndTime": {
              "docs": "Output only. End time for the Offer association corresponding to this entitlement. The field is only populated if the entitlement is currently associated with an Offer.",
              "type": "optional<string>",
            },
            "plan": {
              "docs": "The identifier of the plan that was procured. Required if the product has plans.",
              "type": "optional<string>",
            },
            "product": {
              "docs": "The identifier of the entity that was purchased. This may actually represent a product, quote, or offer.
For Private offer, "projects/project-id/services/product-id.endpoints.partner-id.cloud.goog/privateOffers/private-offer-id"",
              "type": "optional<string>",
            },
            "productExternalName": {
              "docs": "The identifier of the product that was procured.",
              "type": "optional<string>",
            },
            "provider": {
              "docs": "The ID of the service provider under Cloud Commerce platform that this entitlement was created against.",
              "type": "optional<string>",
            },
            "quoteExternalName": {
              "docs": "The identifier of the quote that was used to procure, such as the private offer Id. Empty if the order is not purchased using a quote.",
              "type": "optional<string>",
            },
            "state": {
              "docs": "Enums of the Entitlement State. https://cloud.google.com/marketplace/docs/partners/commerce-procurement-api/reference/rest/v1/providers.entitlements#EntitlementState",
              "type": "optional<SharedGcpMarketplaceEntitlementState>",
            },
            "subscriptionEndTime": {
              "docs": "The End time for the subscription corresponding to this entitlement.",
              "type": "optional<string>",
            },
            "updateTime": {
              "docs": "The last update timestamp. It is the endTime for the cancelled entitlement.",
              "type": "optional<string>",
            },
            "usageReportingId": {
              "docs": "The consumerId to use when reporting usage through the Service Control API. See the consumerId field at
Reporting Metrics (https://cloud.google.com/service-control/reporting-metrics) for more details.
This field is present only if the product has usage-based billing configured.",
              "type": "optional<string>",
            },
          },
        },
        "SharedGcpMarketplaceEntitlementState": {
          "docs": undefined,
          "enum": [
            {
              "name": "STATE_UNSPECIFIED",
              "value": "ENTITLEMENT_STATE_UNSPECIFIED",
            },
            {
              "name": "ACTIVATION_REQUESTED",
              "value": "ENTITLEMENT_ACTIVATION_REQUESTED",
            },
            {
              "name": "ACTIVE",
              "value": "ENTITLEMENT_ACTIVE",
            },
            {
              "name": "PENDING_CANCELLATION",
              "value": "ENTITLEMENT_PENDING_CANCELLATION",
            },
            {
              "name": "CANCELLED",
              "value": "ENTITLEMENT_CANCELLED",
            },
            {
              "name": "PENDING_PLAN_CHANGE",
              "value": "ENTITLEMENT_PENDING_PLAN_CHANGE",
            },
            {
              "name": "PENDING_PLAN_CHANGE_APPROVAL",
              "value": "ENTITLEMENT_PENDING_PLAN_CHANGE_APPROVAL",
            },
            {
              "name": "SUSPENDED",
              "value": "ENTITLEMENT_SUSPENDED",
            },
          ],
        },
        "SharedGcpMarketplaceUserAccount": {
          "docs": undefined,
          "properties": {
            "approvals": {
              "docs": "The approvals for this account, that are permitted or have been completed.",
              "type": "optional<list<SharedGcpMarketplaceUserAccountApproval>>",
            },
            "createTime": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": "GCP Marketplace User Account ID.",
              "type": "optional<string>",
            },
            "inputProperties": {
              "docs": "RFC3339 UTC timestamp",
              "type": "optional<list<integer>>",
            },
            "name": {
              "docs": "The resource name of the account. Account names have the form providers/{provider_id}/accounts/{account_id}.",
              "type": "optional<string>",
            },
            "provider": {
              "docs": "The identifier of the service provider (SaaS Seller) that this account was created against.",
              "type": "optional<string>",
            },
            "state": {
              "docs": "The state of the account. An account might not be able to make a purchase if the billing account is suspended, for example.",
              "type": "optional<SharedGcpMarketplaceUserAccountState>",
            },
            "updateTime": {
              "docs": "RFC3339 UTC timestamp",
              "type": "optional<string>",
            },
            "userInfo": {
              "docs": undefined,
              "type": "optional<SharedGcpUserInfo>",
            },
          },
        },
        "SharedGcpMarketplaceUserAccountApproval": {
          "docs": undefined,
          "properties": {
            "name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "reason": {
              "docs": "An explanation for the state of the approval.",
              "type": "optional<string>",
            },
            "state": {
              "docs": undefined,
              "type": "optional<SharedGcpMarketplaceUserAccountApprovalState>",
            },
            "updateTime": {
              "docs": "RFC3339 UTC timestamp",
              "type": "optional<string>",
            },
          },
        },
        "SharedGcpMarketplaceUserAccountApprovalState": {
          "docs": undefined,
          "enum": [
            {
              "name": "STATE_UNSPECIFIED",
              "value": "STATE_UNSPECIFIED",
            },
            {
              "name": "PENDING",
              "value": "PENDING",
            },
            {
              "name": "APPROVED",
              "value": "APPROVED",
            },
            {
              "name": "REJECTED",
              "value": "REJECTED",
            },
          ],
        },
        "SharedGcpMarketplaceUserAccountState": {
          "docs": undefined,
          "enum": [
            {
              "name": "UNSPECIFIED",
              "value": "ACCOUNT_STATE_UNSPECIFIED",
            },
            {
              "name": "ACTIVE",
              "value": "ACCOUNT_ACTIVE",
            },
          ],
        },
        "SharedGcpProduct": {
          "docs": undefined,
          "properties": {
            "createTime": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": "Nullable, GCP Marketplace Product UUID",
              "type": "optional<string>",
            },
            "listingSpec": {
              "docs": undefined,
              "type": "optional<SharedGcpCommerceProducerListingSpec>",
            },
            "marketplace": {
              "docs": undefined,
              "type": "optional<SharedGcpProductMarketplace>",
            },
            "name": {
              "docs": "In format of "projects/{project-number}/listings/{product-name}.endpoints.{provider-id}.cloud.goog"",
              "type": "optional<string>",
            },
            "service": {
              "docs": "In format of "services/{product-name}.endpoints.{provider-id}.cloud.goog"",
              "type": "optional<string>",
            },
            "serviceConfig": {
              "docs": undefined,
              "type": "optional<SharedGcpCommerceProducerServiceConfig>",
            },
          },
        },
        "SharedGcpProductMarketplace": {
          "docs": undefined,
          "enum": [
            {
              "name": "MarketplacesGoogleCloud",
              "value": "marketplaces/google-cloud",
            },
          ],
        },
        "SharedGcpPurchasePlan": {
          "docs": undefined,
          "properties": {
            "name": {
              "docs": "The Plan key.",
              "type": "optional<string>",
            },
            "priceInfo": {
              "docs": undefined,
              "type": "optional<SharedGcpCommerceProducerPriceInfo>",
            },
            "purchaseMode": {
              "docs": undefined,
              "type": "optional<SharedGcpPurchasePlanPurchaseMode>",
            },
            "title": {
              "docs": "The Plan title",
              "type": "optional<string>",
            },
          },
        },
        "SharedGcpPurchasePlanPurchaseMode": {
          "docs": undefined,
          "enum": [
            {
              "name": "PURCHASE_MODE_PUBLIC",
              "value": "PURCHASE_MODE_PUBLIC",
            },
          ],
        },
        "SharedGcpUserInfo": {
          "docs": undefined,
          "properties": {
            "roles": {
              "docs": "An array of strings representing the user's roles. Right now, it can be either: ** account_admin, which indicates that the user is a Billing Account Administrator of the billing account that purchased the product, or ** project_editor, which indicates that the user is a Project Editor, but not a Billing Administrator, of the project under that billing account.",
              "type": "optional<list<string>>",
            },
            "user_identity": {
              "docs": "The user's obfuscated GAIA ID, which can be used to initiate Open ID Connect.",
              "type": "optional<string>",
            },
          },
        },
        "SharedGetRevenueReportParamsPartner": {
          "docs": "Required.",
          "enum": [
            {
              "name": "AWS",
              "value": "AWS",
            },
            {
              "name": "AZURE",
              "value": "AZURE",
            },
            {
              "name": "GCP",
              "value": "GCP",
            },
          ],
        },
        "SharedGetRevenueReportParamsService": {
          "docs": "Required.",
          "enum": [
            {
              "name": "MARKETPLACE",
              "value": "MARKETPLACE",
            },
          ],
        },
        "SharedHubspotCrmCredential": {
          "docs": undefined,
          "properties": {
            "accessToken": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "acquiredOn": {
              "docs": "UTC timestamp on receiving the auth response",
              "type": "optional<integer>",
            },
            "expiresIn": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "refreshToken": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedHubspotCrmIntegration": {
          "docs": undefined,
          "properties": {
            "credential": {
              "docs": undefined,
              "type": "optional<SharedHubspotCrmCredential>",
            },
            "portalId": {
              "docs": "Hubspot Account Id",
              "type": "optional<integer>",
            },
            "secretKey": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedIdentityBuyer": {
          "docs": undefined,
          "properties": {
            "creationTime": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "description": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "externalID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "info": {
              "docs": undefined,
              "type": "optional<SharedBuyerInfo>",
            },
            "lastUpdateTime": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "organizationID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "partner": {
              "docs": undefined,
              "type": "optional<SharedIdentityBuyerPartner>",
            },
          },
        },
        "SharedIdentityBuyerPartner": {
          "docs": undefined,
          "enum": [
            {
              "name": "AWS",
              "value": "AWS",
            },
            {
              "name": "AZURE",
              "value": "AZURE",
            },
            {
              "name": "GCP",
              "value": "GCP",
            },
          ],
        },
        "SharedIdentityIntegration": {
          "docs": undefined,
          "properties": {
            "createdBy": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "creationTime": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "info": {
              "docs": undefined,
              "type": "optional<SharedIntegrationInfo>",
            },
            "lastUpdateTime": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "lastUpdatedBy": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "organizationID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "partner": {
              "docs": undefined,
              "type": "optional<SharedIdentityIntegrationPartner>",
            },
            "service": {
              "docs": undefined,
              "type": "optional<SharedIdentityIntegrationService>",
            },
            "status": {
              "docs": undefined,
              "type": "optional<SharedIdentityIntegrationStatus>",
            },
          },
        },
        "SharedIdentityIntegrationPartner": {
          "docs": undefined,
          "enum": [
            {
              "name": "AWS",
              "value": "AWS",
            },
            {
              "name": "AZURE",
              "value": "AZURE",
            },
            {
              "name": "GCP",
              "value": "GCP",
            },
          ],
        },
        "SharedIdentityIntegrationService": {
          "docs": undefined,
          "enum": [
            {
              "name": "MARKETPLACE",
              "value": "MARKETPLACE",
            },
          ],
        },
        "SharedIdentityIntegrationStatus": {
          "docs": undefined,
          "enum": [
            {
              "name": "CREATED",
              "value": "CREATED",
            },
            {
              "name": "VERIFIED",
              "value": "VERIFIED",
            },
            {
              "name": "NOT_VERIFIED",
              "value": "NOT_VERIFIED",
            },
          ],
        },
        "SharedIntegrationInfo": {
          "docs": undefined,
          "properties": {
            "awsAceIntegration": {
              "docs": "AWS ACE Integration",
              "type": "optional<SharedAwsAceIntegration>",
            },
            "awsIntegration": {
              "docs": "AWS Marketplace Integration",
              "type": "optional<SharedAwsMarketplaceIntegration>",
            },
            "azureIntegration": {
              "docs": "Azure Marketplace Integration",
              "type": "optional<SharedAzureIntegration>",
            },
            "gcpIntegration": {
              "docs": "GCP Marketplace Integration",
              "type": "optional<SharedGcpIntegration>",
            },
            "hubspotCrmIntegration": {
              "docs": "Integration for HubSpot CRM",
              "type": "optional<SharedHubspotCrmIntegration>",
            },
            "salesforceCrmIntegration": {
              "docs": "Integration for Salesforce CRM",
              "type": "optional<SharedSalesforceCrmIntegration>",
            },
            "slackIntegration": {
              "docs": undefined,
              "type": "optional<SharedSlackIntegration>",
            },
          },
        },
        "SharedListRevenueRecordDetailsResponse": {
          "docs": undefined,
          "properties": {
            "nextOffset": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "revenueRecordDetails": {
              "docs": undefined,
              "type": "optional<list<SharedRevenueRecordDetail>>",
            },
          },
        },
        "SharedListRevenueRecordsResponse": {
          "docs": undefined,
          "properties": {
            "nextOffset": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "revenueRecords": {
              "docs": undefined,
              "type": "optional<list<SharedRevenueRecord>>",
            },
          },
        },
        "SharedListUsageRecordGroupsResponse": {
          "docs": undefined,
          "properties": {
            "nextOffset": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "usageRecordGroups": {
              "docs": undefined,
              "type": "optional<list<SharedMeteringUsageRecordGroup>>",
            },
          },
        },
        "SharedListUsageRecordReportsResponse": {
          "docs": undefined,
          "properties": {
            "nextOffset": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "usageRecordReports": {
              "docs": undefined,
              "type": "optional<list<SharedMeteringUsageRecordReport>>",
            },
          },
        },
        "SharedMeteringDimension": {
          "docs": "The dimension to meter usage in entitlement.",
          "properties": {
            "category": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "description": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "includedBaseQuantities": {
              "docs": "how many quantities of this dimension are included in the commit.",
              "type": "optional<list<AzureIncludedBaseQuantity>>",
            },
            "key": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "name": {
              "docs": "Display name of the dimension",
              "type": "optional<string>",
            },
            "rate": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "types": {
              "docs": undefined,
              "type": "optional<list<string>>",
            },
            "usageCount": {
              "docs": "The current Dimension Usage Count. Available when call GetEntitlement API.",
              "type": "optional<SharedUsageCount>",
            },
            "valueType": {
              "docs": undefined,
              "type": "optional<SharedValueType>",
            },
          },
        },
        "SharedMeteringUsageRecordGroup": {
          "docs": undefined,
          "properties": {
            "creationTime": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "entitlementID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "lastUpdateTime": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "metaInfo": {
              "docs": undefined,
              "type": "optional<SharedMeteringUsageRecordGroupMetaInfo>",
            },
            "organizationID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "records": {
              "docs": undefined,
              "type": "optional<map<string, optional<double>>>",
            },
            "serialID": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "status": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "usageRecordReportID": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedMeteringUsageRecordGroupMetaInfo": {
          "docs": undefined,
          "properties": {
            "originRecords": {
              "docs": "The original records reported by the customer before convertion. If no dimension mapping is applied, this field is the same as the records field.",
              "type": "optional<map<string, optional<double>>>",
            },
          },
        },
        "SharedMeteringUsageRecordReport": {
          "docs": undefined,
          "properties": {
            "creationTime": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "entitlementID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "entitlementTermID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "info": {
              "docs": undefined,
              "type": "optional<SharedMeteringUsageRecordReportInfo>",
            },
            "organizationID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "productID": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedMeteringUsageRecordReportInfo": {
          "docs": undefined,
          "properties": {
            "awsMeteringResponse": {
              "docs": "The raw response from AWS metering service.",
              "type": "optional<MarketplacemeteringBatchMeterUsageOutput>",
            },
            "azureMeteringResponse": {
              "docs": "The raw response from Azure metering service.",
              "type": "optional<GithubComSugerioMarketplaceServiceAzureSdkMarketplacemeteringv1BatchUsageEventOkResponse>",
            },
            "commitAmount": {
              "docs": "The amount of the commit if applicable.",
              "type": "optional<double>",
            },
            "creditAmount": {
              "docs": "The amount of the credit if applicable.",
              "type": "optional<double>",
            },
            "creditRecords": {
              "docs": "The credit usage records in the map of <DimensionKey, Count>",
              "type": "optional<map<string, optional<double>>>",
            },
            "dimensionUnitPrice": {
              "docs": "The unit price of each dimension in the map of <DimensionKey, UnitPrice>",
              "type": "optional<map<string, optional<double>>>",
            },
            "endTime": {
              "docs": "time in UTC when the UsageRecordReport ends",
              "type": "optional<string>",
            },
            "gcpMeteringResponse": {
              "docs": "The raw response from GCP metering service.",
              "type": "optional<ServicecontrolReportResponse>",
            },
            "includedRecords": {
              "docs": "The included usage records in the map of <DimensionKey, Count>",
              "type": "optional<map<string, optional<double>>>",
            },
            "reportedRecords": {
              "docs": "The reported usage records in the map of <DimensionKey, Count>",
              "type": "optional<map<string, optional<double>>>",
            },
            "startTime": {
              "docs": "time in UTC when the UsageRecordReport starts",
              "type": "optional<string>",
            },
            "usageRecordGroupIds": {
              "docs": "The IDs of UsageRecordGroups aggregated in this UsageRecordReport.",
              "type": "optional<list<string>>",
            },
            "usedCommitAmount": {
              "docs": "The amount of the used commit before the this usage record report if applicable.",
              "type": "optional<double>",
            },
            "usedCommitAmountIncrement": {
              "docs": "The amount of the used commit increment in this usage record report if applicable.",
              "type": "optional<double>",
            },
            "usedCreditAmount": {
              "docs": "The amount of the used credit before the this usage record report if applicable.",
              "type": "optional<double>",
            },
            "usedCreditAmountIncrement": {
              "docs": "The amount of the used credit increment in this usage record report if applicable.",
              "type": "optional<double>",
            },
          },
        },
        "SharedNotificationEvent": {
          "docs": undefined,
          "properties": {
            "action": {
              "docs": undefined,
              "type": "optional<SharedNotificationEventAction>",
            },
            "entityID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "entityStatus": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "entityType": {
              "docs": undefined,
              "type": "optional<SharedEntityType>",
            },
            "eventID": {
              "docs": "notification event id.",
              "type": "optional<string>",
            },
            "eventStatus": {
              "docs": "notification event status.",
              "type": "optional<SharedNotificationEventStatus>",
            },
            "lastUpdateTime": {
              "docs": "timestamp of the event when it is updated.",
              "type": "optional<string>",
            },
            "message": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "organizationID": {
              "docs": "suger organization id.",
              "type": "optional<string>",
            },
            "timestamp": {
              "docs": "timestamp of the event when it is scheduled or created.",
              "type": "optional<string>",
            },
          },
        },
        "SharedNotificationEventAction": {
          "docs": undefined,
          "enum": [
            {
              "name": "ACCEPT",
              "value": "ACCEPT",
            },
            {
              "name": "CREATE",
              "value": "CREATE",
            },
            {
              "name": "DELETE",
              "value": "DELETE",
            },
            {
              "name": "CANCEL",
              "value": "CANCEL",
            },
            {
              "name": "PENDING_CANCEL",
              "value": "PENDING_CANCEL",
            },
            {
              "name": "EXPIRE",
              "value": "EXPIRE",
            },
            {
              "name": "REINSTATE",
              "value": "REINSTATE",
            },
            {
              "name": "SUSPEND",
              "value": "SUSPEND",
            },
            {
              "name": "UPDATE",
              "value": "UPDATE",
            },
            {
              "name": "NOTIFY_CONTACTS",
              "value": "NOTIFY_CONTACTS",
            },
            {
              "name": "TEST",
              "value": "TEST",
            },
          ],
        },
        "SharedNotificationEventStatus": {
          "docs": undefined,
          "enum": [
            {
              "name": "UNKNOWN",
              "value": "",
            },
            {
              "name": "SCHEDULED",
              "value": "SCHEDULED",
            },
            {
              "name": "PENDING",
              "value": "PENDING",
            },
            {
              "name": "DONE",
              "value": "DONE",
            },
            {
              "name": "FAILED",
              "value": "FAILED",
            },
          ],
        },
        "SharedOfferInfo": {
          "docs": undefined,
          "properties": {
            "azureOriginalPlan": {
              "docs": "The origin pricing of Azure plan. Only applicable for Azure Marketplace plans.",
              "type": "optional<AzurePriceAndAvailabilityPrivateOfferPlan>",
            },
            "azurePrivateOffer": {
              "docs": "The private offer for Azure Marketplace. Only applicable for Azure Marketplace private offers.",
              "type": "optional<AzureMarketplacePrivateOffer>",
            },
            "azureProductVariant": {
              "docs": undefined,
              "type": "optional<AzureProductVariant>",
            },
            "buyerAwsAccountIds": {
              "docs": "The buyers' AWS Account IDs of this offer.",
              "type": "optional<list<string>>",
            },
            "buyerAzureTenants": {
              "docs": "The buyers' Azure tenants of this offer.",
              "type": "optional<list<AzureAudience>>",
            },
            "commits": {
              "docs": undefined,
              "type": "optional<list<SharedCommitDimension>>",
            },
            "currency": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "dimensions": {
              "docs": undefined,
              "type": "optional<list<SharedMeteringDimension>>",
            },
            "discount": {
              "docs": "The rate of discount (0 ~ 1.0), such as 0.1 which is 10% off. 0 which is no discount.",
              "type": "optional<double>",
            },
            "eulaType": {
              "docs": undefined,
              "type": "optional<SharedEulaType>",
            },
            "eulaUrl": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "gcpMetrics": {
              "docs": "Only applicable for GCP Marketplace Offers (the default or private offer)",
              "type": "optional<list<SharedGcpCommerceProducerPurchaseMetric>>",
            },
            "gcpPlans": {
              "docs": "Only applicable for GCP Marketplace Offers (the default or private offer).",
              "type": "optional<list<SharedGcpPurchasePlan>>",
            },
            "paymentInstallments": {
              "docs": "For flexible payment schedule. Not empty if it is enabled.",
              "type": "optional<list<SharedPaymentInstallment>>",
            },
            "privateOfferUrl": {
              "docs": "The URL of the private offer sent to buyers to accept. Only applicable for private offer.",
              "type": "optional<string>",
            },
            "refundCancelationPolicy": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "sellerNotes": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "visibility": {
              "docs": "The default visibility of offer is PRIVATE.",
              "type": "optional<SharedOfferInfoVisibility>",
            },
          },
        },
        "SharedOfferInfoVisibility": {
          "docs": undefined,
          "enum": [
            {
              "name": "PRIVATE",
              "value": "PRIVATE",
            },
            {
              "name": "PUBLIC",
              "value": "PUBLIC",
            },
          ],
        },
        "SharedOfferMetaInfo": {
          "docs": undefined,
          "properties": {
            "baseAgreementId": {
              "docs": "Applicable for AWS Marketplace only, when the IsAgreementBasedOffer is true.",
              "type": "optional<string>",
            },
            "contacts": {
              "docs": "The contacts of the offer to notify if any updates.",
              "type": "optional<list<SharedContact>>",
            },
            "isAgreementBasedOffer": {
              "docs": "Applicable for AWS Marketplace only, If this offer is agreement based offer.",
              "type": "optional<boolean>",
            },
            "isRenewalOffer": {
              "docs": "Applicable for AWS Marketplace only, If this offer is renewal offer.",
              "type": "optional<boolean>",
            },
            "notifications": {
              "docs": "The notifications of the offer if any updates. In most cases, it is to notify contacts/buyers when the offer is pending acceptance.",
              "type": "optional<list<SharedNotificationEvent>>",
            },
          },
        },
        "SharedOperation": {
          "docs": undefined,
          "properties": {
            "endTime": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": "Operation ID.",
              "type": "optional<string>",
            },
            "message": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "startTime": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "status": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "type": {
              "docs": undefined,
              "type": "optional<SharedOperationType>",
            },
          },
        },
        "SharedOperationType": {
          "docs": undefined,
          "enum": [
            {
              "name": "OperationType_TemporalWorkflow",
              "value": "TemporalWorkflow",
            },
          ],
        },
        "SharedPaymentInstallment": {
          "docs": undefined,
          "properties": {
            "amount": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "chargeOn": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedProductInfo": {
          "docs": undefined,
          "properties": {
            "attributes": {
              "docs": undefined,
              "type": "optional<map<string, optional<string>>>",
            },
            "awsSaasProduct": {
              "docs": undefined,
              "type": "optional<SharedAwsSaasProduct>",
            },
            "awsSnsSubscriptions": {
              "docs": undefined,
              "type": "optional<list<SharedAwsSnsSubscription>>",
            },
            "azureProduct": {
              "docs": undefined,
              "type": "optional<AzureProduct>",
            },
            "commits": {
              "docs": undefined,
              "type": "optional<list<SharedCommitDimension>>",
            },
            "currency": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "dimensions": {
              "docs": undefined,
              "type": "optional<list<SharedMeteringDimension>>",
            },
            "eulaUrl": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "gcpProduct": {
              "docs": undefined,
              "type": "optional<SharedGcpProduct>",
            },
            "refundCancelationPolicy": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "sellerNotes": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedRevenueRecord": {
          "docs": undefined,
          "properties": {
            "amount": {
              "docs": "The revenue amount for the revenue report",
              "type": "optional<double>",
            },
            "buyerID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "collectableAmount": {
              "docs": "The revenue amount that the seller/ISV can collect.",
              "type": "optional<double>",
            },
            "currency": {
              "docs": "The currency of the revenue in ISO 4217 format, such as "USD".",
              "type": "optional<string>",
            },
            "date": {
              "docs": "The date for the revenue report",
              "type": "optional<string>",
            },
            "disburseAmount": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "disburseDate": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "entitlementID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "info": {
              "docs": undefined,
              "type": "optional<SharedRevenueRecordInfo>",
            },
            "invoiceAmount": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "invoiceDate": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "organizationID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "partner": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "paymentDueDate": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "productID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "refundDisburseAmount": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "refundDisburseDate": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "refundInvoiceAmount": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "refundInvoiceDate": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "taxAmount": {
              "docs": undefined,
              "type": "optional<double>",
            },
          },
        },
        "SharedRevenueRecordDetail": {
          "docs": undefined,
          "properties": {
            "awsRevenueRecordDetail": {
              "docs": "For AWS Marketplace",
              "type": "optional<GithubComSugerioMarketplaceServiceRdsDbLibBillingAwsBillingEvent>",
            },
            "azureRevenueRecordDetail": {
              "docs": "For Azure Marketplace",
              "type": "optional<GithubComSugerioMarketplaceServiceRdsDbLibBillingAzureCmaRevenue>",
            },
            "gcpRevenueRecordDetail": {
              "docs": "For GCP Marketplace",
              "type": "optional<GithubComSugerioMarketplaceServiceRdsDbLibBillingGcpChargeUsage>",
            },
          },
        },
        "SharedRevenueRecordInfo": {
          "docs": undefined,
          "properties": {
            "awsRevenueRecords": {
              "docs": "For raw revenue records in AWS Marketplace",
              "type": "optional<list<GithubComSugerioMarketplaceServiceRdsDbLibBillingAwsBillingEvent>>",
            },
            "azureRevenueRecords": {
              "docs": "For raw revenue records in Azure Marketplace",
              "type": "optional<list<GithubComSugerioMarketplaceServiceRdsDbLibBillingAzureCmaRevenue>>",
            },
            "gcpRevenueRecords": {
              "docs": "For raw revenue records in GCP Marketplace",
              "type": "optional<list<GithubComSugerioMarketplaceServiceRdsDbLibBillingGcpChargeUsage>>",
            },
          },
        },
        "SharedRevenueReport": {
          "docs": undefined,
          "properties": {
            "buyerID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "entitlementID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "organizationID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "partner": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "productID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "reportDate": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "reportType": {
              "docs": undefined,
              "type": "optional<SharedRevenueReportType>",
            },
            "revenueRecords": {
              "docs": undefined,
              "type": "optional<list<SharedRevenueRecord>>",
            },
            "service": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedRevenueReportType": {
          "docs": undefined,
          "enum": [
            {
              "name": "InvoicedAmount",
              "value": "InvoicedAmount",
            },
            {
              "name": "CollectableAmount",
              "value": "CollectableAmount",
            },
            {
              "name": "DisbursedAmount",
              "value": "DisbursedAmount",
            },
          ],
        },
        "SharedSalesforceCrmCredential": {
          "docs": undefined,
          "properties": {
            "access_token": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "exp": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "instance_url": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "refresh_token": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedSalesforceCrmIntegration": {
          "docs": undefined,
          "properties": {
            "credential": {
              "docs": "System created",
              "type": "optional<SharedSalesforceCrmCredential>",
            },
            "filters": {
              "docs": undefined,
              "type": "optional<list<SharedSalesforceSyncFilter>>",
            },
            "instanceUrl": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "isSandbox": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "secretKey": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "subdomain": {
              "docs": "User defined when setting up the integration",
              "type": "optional<string>",
            },
          },
        },
        "SharedSalesforceSyncFilter": {
          "docs": undefined,
          "properties": {
            "fieldName": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "operator": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "value": "unknown",
          },
        },
        "SharedSlackIntegration": {
          "docs": undefined,
          "properties": {
            "accessToken": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "appId": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "authedUser": {
              "docs": undefined,
              "type": "optional<SlackOAuthV2ResponseAuthedUser>",
            },
            "botUserId": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "enterprise": {
              "docs": undefined,
              "type": "optional<SlackOAuthV2ResponseEnterprise>",
            },
            "expiresIn": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "incomingWebhook": {
              "docs": undefined,
              "type": "optional<SlackOAuthResponseIncomingWebhook>",
            },
            "redirectUrl": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "refreshToken": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "scope": {
              "docs": "The scope of the access token. multiple scopes are separated by comma.",
              "type": "optional<string>",
            },
            "team": {
              "docs": undefined,
              "type": "optional<SlackOAuthV2ResponseTeam>",
            },
            "tokenType": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedUpdateIntegrationParamsPartner": {
          "docs": undefined,
          "enum": [
            {
              "name": "AWS",
              "value": "AWS",
            },
            {
              "name": "AZURE",
              "value": "AZURE",
            },
            {
              "name": "GCP",
              "value": "GCP",
            },
          ],
        },
        "SharedUpdateIntegrationParamsService": {
          "docs": undefined,
          "enum": [
            {
              "name": "MARKETPLACE",
              "value": "MARKETPLACE",
            },
          ],
        },
        "SharedUsageCount": {
          "docs": undefined,
          "properties": {
            "creditCount": {
              "docs": "The count of this dimension usage records that are handled as credit.",
              "type": "optional<double>",
            },
            "includedCount": {
              "docs": "The count of this dimension usage records that are handled as included in IncludedBaseQuantity",
              "type": "optional<double>",
            },
            "reportedCount": {
              "docs": "The count of this dimension usage records that are reported to cloud vendors.",
              "type": "optional<double>",
            },
          },
        },
        "SharedUsageReport": {
          "docs": undefined,
          "properties": {
            "entitlementID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "organizationID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "reportDate": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "usageRecords": {
              "docs": undefined,
              "type": "optional<list<SharedEntitlementUsageRecord>>",
            },
          },
        },
        "SharedValueType": {
          "docs": undefined,
          "enum": [
            {
              "name": "UNSPECIFIED",
              "value": "VALUE_TYPE_UNSPECIFIED",
            },
            {
              "name": "BOOL",
              "value": "BOOL",
            },
            {
              "name": "INT64",
              "value": "INT64",
            },
            {
              "name": "DOUBLE",
              "value": "DOUBLE",
            },
            {
              "name": "STRING",
              "value": "STRING",
            },
            {
              "name": "DISTRIBUTION",
              "value": "DISTRIBUTION",
            },
            {
              "name": "MONEY",
              "value": "MONEY",
            },
          ],
        },
        "SharedWorkloadEntitlement": {
          "docs": undefined,
          "properties": {
            "buyerID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "creationTime": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "endTime": {
              "docs": "nullable",
              "type": "optional<string>",
            },
            "entitlementTermID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "externalBuyerID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "externalID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "externalProductID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "info": {
              "docs": undefined,
              "type": "optional<SharedEntitlementInfo>",
            },
            "lastUpdateTime": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "offerID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "organizationID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "partner": {
              "docs": undefined,
              "type": "optional<SharedWorkloadEntitlementPartner>",
            },
            "productID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "service": {
              "docs": undefined,
              "type": "optional<SharedWorkloadEntitlementService>",
            },
            "startTime": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "status": {
              "docs": undefined,
              "type": "optional<SharedWorkloadEntitlementStatus>",
            },
            "type": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedWorkloadEntitlementPartner": {
          "docs": undefined,
          "enum": [
            {
              "name": "AWS",
              "value": "AWS",
            },
            {
              "name": "AZURE",
              "value": "AZURE",
            },
            {
              "name": "GCP",
              "value": "GCP",
            },
          ],
        },
        "SharedWorkloadEntitlementService": {
          "docs": undefined,
          "enum": [
            {
              "name": "MARKETPLACE",
              "value": "MARKETPLACE",
            },
          ],
        },
        "SharedWorkloadEntitlementStatus": {
          "docs": undefined,
          "enum": [
            {
              "name": "ACTIVE",
              "value": "ACTIVE",
            },
            {
              "name": "CANCELLED",
              "value": "CANCELLED",
            },
            {
              "name": "SUSPENDED",
              "value": "SUSPENDED",
            },
            {
              "name": "PENDING_START",
              "value": "PENDING_START",
            },
            {
              "name": "UNKNOWN",
              "value": "UNKNOWN",
            },
          ],
        },
        "SharedWorkloadEntitlementTerm": {
          "docs": undefined,
          "properties": {
            "buyerID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "commitAmount": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "creditAmount": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "endTime": {
              "docs": "nullable",
              "type": "optional<string>",
            },
            "entitlementID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "entitlementInfo": {
              "docs": undefined,
              "type": "optional<SharedEntitlementInfo>",
            },
            "externalEntitlementID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "info": {
              "docs": undefined,
              "type": "optional<SharedEntitlementTermInfo>",
            },
            "offerID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "organizationID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "partner": {
              "docs": undefined,
              "type": "optional<SharedWorkloadEntitlementTermPartner>",
            },
            "productID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "service": {
              "docs": undefined,
              "type": "optional<SharedWorkloadEntitlementTermService>",
            },
            "startTime": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "usedCommitAmount": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "usedCreditAmount": {
              "docs": undefined,
              "type": "optional<double>",
            },
          },
        },
        "SharedWorkloadEntitlementTermPartner": {
          "docs": undefined,
          "enum": [
            {
              "name": "AWS",
              "value": "AWS",
            },
            {
              "name": "AZURE",
              "value": "AZURE",
            },
            {
              "name": "GCP",
              "value": "GCP",
            },
          ],
        },
        "SharedWorkloadEntitlementTermService": {
          "docs": undefined,
          "enum": [
            {
              "name": "MARKETPLACE",
              "value": "MARKETPLACE",
            },
          ],
        },
        "SharedWorkloadOffer": {
          "docs": undefined,
          "properties": {
            "createdBy": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "creationTime": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "endTime": {
              "docs": "nullable",
              "type": "optional<string>",
            },
            "expireTime": {
              "docs": "nullable",
              "type": "optional<string>",
            },
            "externalID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "info": {
              "docs": undefined,
              "type": "optional<SharedOfferInfo>",
            },
            "lastUpdateTime": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "lastUpdatedBy": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "metaInfo": {
              "docs": undefined,
              "type": "optional<SharedOfferMetaInfo>",
            },
            "name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "offerType": {
              "docs": undefined,
              "type": "optional<SharedWorkloadOfferOfferType>",
            },
            "organizationID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "partner": {
              "docs": undefined,
              "type": "optional<SharedWorkloadOfferPartner>",
            },
            "productID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "service": {
              "docs": undefined,
              "type": "optional<SharedWorkloadOfferService>",
            },
            "status": {
              "docs": undefined,
              "type": "optional<SharedWorkloadOfferStatus>",
            },
          },
        },
        "SharedWorkloadOfferOfferType": {
          "docs": undefined,
          "enum": [
            {
              "name": "DEFAULT",
              "value": "DEFAULT",
            },
            {
              "name": "CONTRACT",
              "value": "CONTRACT",
            },
            {
              "name": "SUBSCRIPTION",
              "value": "SUBSCRIPTION",
            },
            {
              "name": "FREE_TRIAL",
              "value": "FREE_TRIAL",
            },
            {
              "name": "FLAT_RATE",
              "value": "FLAT_RATE",
            },
            {
              "name": "PER_USER",
              "value": "PER_USER",
            },
            {
              "name": "PRIVATE",
              "value": "PRIVATE",
            },
            {
              "name": "UNKNOWN",
              "value": "UNKNOWN",
            },
          ],
        },
        "SharedWorkloadOfferPartner": {
          "docs": undefined,
          "enum": [
            {
              "name": "AWS",
              "value": "AWS",
            },
            {
              "name": "AZURE",
              "value": "AZURE",
            },
            {
              "name": "GCP",
              "value": "GCP",
            },
          ],
        },
        "SharedWorkloadOfferService": {
          "docs": undefined,
          "enum": [
            {
              "name": "MARKETPLACE",
              "value": "MARKETPLACE",
            },
          ],
        },
        "SharedWorkloadOfferStatus": {
          "docs": undefined,
          "enum": [
            {
              "name": "ACCEPTED",
              "value": "ACCEPTED",
            },
            {
              "name": "PENDING_CREATE",
              "value": "PENDING_CREATE",
            },
            {
              "name": "CREATE_FAILED",
              "value": "CREATE_FAILED",
            },
            {
              "name": "CREATE_SUCCESS",
              "value": "CREATE_SUCCESS",
            },
            {
              "name": "DRAFT",
              "value": "DRAFT",
            },
            {
              "name": "EXPIRED",
              "value": "EXPIRED",
            },
            {
              "name": "PENDING_ACCEPTANCE",
              "value": "PENDING_ACCEPTANCE",
            },
            {
              "name": "PENDING_CANCEL",
              "value": "PENDING_CANCEL",
            },
            {
              "name": "CANCEL_FAILED",
              "value": "CANCEL_FAILED",
            },
            {
              "name": "CANCEL_SUCCESS",
              "value": "CANCEL_SUCCESS",
            },
          ],
        },
        "SharedWorkloadProduct": {
          "docs": undefined,
          "properties": {
            "createdBy": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "creationTime": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "externalID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "fulfillmentUrl": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "info": {
              "docs": undefined,
              "type": "optional<SharedProductInfo>",
            },
            "lastUpdateTime": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "lastUpdatedBy": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "organizationID": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "partner": {
              "docs": undefined,
              "type": "optional<SharedWorkloadProductPartner>",
            },
            "productType": {
              "docs": undefined,
              "type": "optional<SharedWorkloadProductProductType>",
            },
            "service": {
              "docs": undefined,
              "type": "optional<SharedWorkloadProductService>",
            },
            "status": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SharedWorkloadProductPartner": {
          "docs": undefined,
          "enum": [
            {
              "name": "AWS",
              "value": "AWS",
            },
            {
              "name": "AZURE",
              "value": "AZURE",
            },
            {
              "name": "GCP",
              "value": "GCP",
            },
          ],
        },
        "SharedWorkloadProductProductType": {
          "docs": undefined,
          "enum": [
            {
              "name": "UNKNOWN",
              "value": "UNKNOWN",
            },
            {
              "name": "SUBSCRIPTION",
              "value": "SUBSCRIPTION",
            },
            {
              "name": "CONTRACT",
              "value": "CONTRACT",
            },
            {
              "name": "FLAT_RATE",
              "value": "FLAT_RATE",
            },
            {
              "name": "PER_USER",
              "value": "PER_USER",
            },
            {
              "name": "USAGE_BASED",
              "value": "USAGE_BASED",
            },
          ],
        },
        "SharedWorkloadProductService": {
          "docs": undefined,
          "enum": [
            {
              "name": "MARKETPLACE",
              "value": "MARKETPLACE",
            },
          ],
        },
        "SlackOAuthResponseIncomingWebhook": {
          "docs": undefined,
          "properties": {
            "channel": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "channel_id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "configuration_url": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "url": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SlackOAuthV2ResponseAuthedUser": {
          "docs": undefined,
          "properties": {
            "access_token": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "expires_in": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "refresh_token": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "scope": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "token_type": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SlackOAuthV2ResponseEnterprise": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "name": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SlackOAuthV2ResponseTeam": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "name": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "SqlNullTime": {
          "docs": undefined,
          "properties": {
            "time": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "valid": {
              "docs": "Valid is true if Time is not NULL",
              "type": "optional<boolean>",
            },
          },
        },
        "TypesEntitlement": {
          "docs": undefined,
          "properties": {
            "customerIdentifier": {
              "docs": "The customer identifier is a handle to each unique customer in an application.
Customer identifiers are obtained through the ResolveCustomer operation in AWS
Marketplace Metering Service.",
              "type": "optional<string>",
            },
            "dimension": {
              "docs": "The dimension for which the given entitlement applies. Dimensions represent
categories of capacity in a product and are specified when the product is listed
in AWS Marketplace.",
              "type": "optional<string>",
            },
            "expirationDate": {
              "docs": "The expiration date represents the minimum date through which this entitlement
is expected to remain valid. For contractual products listed on AWS Marketplace,
the expiration date is the date at which the customer will renew or cancel their
contract. Customers who are opting to renew their contract will still have
entitlements with an expiration date.",
              "type": "optional<string>",
            },
            "productCode": {
              "docs": "The product code for which the given entitlement applies. Product codes are
provided by AWS Marketplace when the product listing is created.",
              "type": "optional<string>",
            },
            "value": "unknown",
          },
        },
        "TypesUsageAllocation": {
          "docs": undefined,
          "properties": {
            "allocatedUsageQuantity": {
              "docs": "The total quantity allocated to this bucket of usage.

This member is required.",
              "type": "optional<integer>",
            },
            "tags": {
              "docs": "The set of tags that define the bucket of usage. For the bucket of items with no
tags, this parameter can be left out.",
              "type": "optional<list<GithubComAwsAwsSdkGoV2ServiceMarketplacemeteringTypesTag>>",
            },
          },
        },
        "TypesUsageRecord": {
          "docs": undefined,
          "properties": {
            "customerIdentifier": {
              "docs": "The CustomerIdentifier is obtained through the ResolveCustomer operation and
represents an individual buyer in your application.

This member is required.",
              "type": "optional<string>",
            },
            "dimension": {
              "docs": "During the process of registering a product on AWS Marketplace, dimensions are
specified. These represent different units of value in your application.

This member is required.",
              "type": "optional<string>",
            },
            "quantity": {
              "docs": "The quantity of usage consumed by the customer for the given dimension and time.
Defaults to 0 if not specified.",
              "type": "optional<integer>",
            },
            "timestamp": {
              "docs": "Timestamp, in UTC, for which the usage is being reported. Your application can
meter usage for up to one hour in the past. Make sure the timestamp value is not
before the start of the software usage.

This member is required.",
              "type": "optional<string>",
            },
            "usageAllocations": {
              "docs": "The set of UsageAllocations to submit. The sum of all UsageAllocation quantities
must equal the Quantity of the UsageRecord.",
              "type": "optional<list<TypesUsageAllocation>>",
            },
          },
        },
        "TypesUsageRecordResult": {
          "docs": undefined,
          "properties": {
            "meteringRecordId": {
              "docs": "The MeteringRecordId is a unique identifier for this metering event.",
              "type": "optional<string>",
            },
            "status": {
              "docs": "The UsageRecordResultStatus indicates the status of an individual UsageRecord
processed by BatchMeterUsage.

* Success- The UsageRecord was accepted and
honored by BatchMeterUsage.

* CustomerNotSubscribed- The CustomerIdentifier
specified is not able to use your product. The UsageRecord was not honored.
There are three causes for this result:

* The customer identifier is
invalid.

* The customer identifier provided in the metering record does not
have an active agreement or subscription with this product. Future UsageRecords
for this customer will fail until the customer subscribes to your product.

*
The customer's AWS account was suspended.

* DuplicateRecord- Indicates that the
UsageRecord was invalid and not honored. A previously metered UsageRecord had
the same customer, dimension, and time, but a different quantity.",
              "type": "optional<TypesUsageRecordResultStatus>",
            },
            "usageRecord": {
              "docs": "The UsageRecord that was part of the BatchMeterUsage request.",
              "type": "optional<TypesUsageRecord>",
            },
          },
        },
        "TypesUsageRecordResultStatus": {
          "docs": undefined,
          "enum": [
            {
              "name": "Success",
              "value": "Success",
            },
            {
              "name": "CustomerNotSubscribed",
              "value": "CustomerNotSubscribed",
            },
            {
              "name": "DuplicateRecord",
              "value": "DuplicateRecord",
            },
          ],
        },
        "UpdateIntegrationRequestPartner": {
          "docs": undefined,
          "enum": [
            {
              "name": "AWS",
              "value": "AWS",
            },
            {
              "name": "AZURE",
              "value": "AZURE",
            },
            {
              "name": "GCP",
              "value": "GCP",
            },
          ],
        },
        "UpdateIntegrationRequestService": {
          "docs": undefined,
          "enum": [
            {
              "name": "MARKETPLACE",
              "value": "MARKETPLACE",
            },
            {
              "name": "CRM",
              "value": "CRM",
            },
          ],
        },
        "VerifyIntegrationRequestPartner": {
          "docs": undefined,
          "enum": [
            {
              "name": "AWS",
              "value": "AWS",
            },
            {
              "name": "AZURE",
              "value": "AZURE",
            },
            {
              "name": "GCP",
              "value": "GCP",
            },
          ],
        },
        "VerifyIntegrationRequestService": {
          "docs": undefined,
          "enum": [
            {
              "name": "MARKETPLACE",
              "value": "MARKETPLACE",
            },
            {
              "name": "CRM",
              "value": "CRM",
            },
          ],
        },
        "middleware.Metadata": {
          "docs": undefined,
          "type": "map<string, unknown>",
        },
      },
    },
    "api.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "GetApiClientAccessToken": {
            "auth": false,
            "method": "POST",
            "path": "/public/apiClient/accessToken",
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": "The ID of the API Client.",
                    "type": "string",
                  },
                  "organizationID": {
                    "docs": undefined,
                    "type": "string",
                  },
                  "secret": {
                    "docs": "The secret of the API Client.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "SharedGetApiClientAccessTokenParams",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedApiClientAccessToken",
            },
          },
        },
      },
    },
    "buyer.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "GetBuyer": {
            "auth": true,
            "method": "GET",
            "path": "/org/{orgId}/buyer/{buyerId}",
            "path-parameters": {
              "buyerId": {
                "docs": undefined,
                "type": "string",
              },
              "orgId": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedIdentityBuyer",
            },
          },
          "ListBuyersByOrganization": {
            "auth": true,
            "method": "GET",
            "path": "/org/{orgId}/buyer",
            "path-parameters": {
              "orgId": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "OK",
              "type": "list<root.SharedIdentityBuyer>",
            },
          },
          "UpdateBuyerNameDescription": {
            "auth": true,
            "method": "PATCH",
            "path": "/org/{orgId}/buyer/{buyerId}",
            "path-parameters": {
              "buyerId": {
                "docs": undefined,
                "type": "string",
              },
              "orgId": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "description": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                  "id": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                  "name": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                  "organizationID": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "GithubComSugerioMarketplaceServiceRdsDbLibUpdateBuyerNameDescriptionParams",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedIdentityBuyer",
            },
          },
        },
      },
    },
    "entitlement.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "AddEntitlementCredit": {
            "auth": true,
            "method": "POST",
            "path": "/org/{orgId}/entitlement/{entitlementId}/addCredit",
            "path-parameters": {
              "entitlementId": {
                "docs": undefined,
                "type": "string",
              },
              "orgId": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "creditAmountIncrement": {
                    "docs": "The amount to be added to the credit amount.",
                    "type": "double",
                  },
                  "entitlementID": {
                    "docs": undefined,
                    "type": "string",
                  },
                  "organizationID": {
                    "docs": undefined,
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "SharedAddEntitlementCreditParams",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedAddEntitlementCreditResponse",
            },
          },
          "GetEntitlement": {
            "auth": true,
            "method": "GET",
            "path": "/org/{orgId}/entitlement/{entitlementId}",
            "path-parameters": {
              "entitlementId": {
                "docs": undefined,
                "type": "string",
              },
              "orgId": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedWorkloadEntitlement",
            },
          },
          "ListEntitlements": {
            "auth": true,
            "method": "GET",
            "path": "/org/{orgId}/entitlement",
            "path-parameters": {
              "orgId": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "OK",
              "type": "list<root.SharedWorkloadEntitlement>",
            },
          },
          "ListEntitlementsByBuyer": {
            "auth": true,
            "method": "GET",
            "path": "/org/{orgId}/buyer/{buyerId}/entitlement",
            "path-parameters": {
              "buyerId": {
                "docs": undefined,
                "type": "string",
              },
              "orgId": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "OK",
              "type": "list<root.SharedWorkloadEntitlement>",
            },
          },
          "ListEntitlementsByOffer": {
            "auth": true,
            "method": "GET",
            "path": "/org/{orgId}/offer/{offerId}/entitlement",
            "path-parameters": {
              "offerId": {
                "docs": undefined,
                "type": "string",
              },
              "orgId": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "OK",
              "type": "list<root.SharedWorkloadEntitlement>",
            },
          },
          "ListEntitlementsByPartner": {
            "auth": true,
            "method": "GET",
            "path": "/org/{orgId}/partner/{partner}/entitlement",
            "path-parameters": {
              "orgId": {
                "docs": undefined,
                "type": "string",
              },
              "partner": {
                "docs": undefined,
                "type": "root.ListEntitlementsByPartnerRequestPartner",
              },
            },
            "response": {
              "docs": "OK",
              "type": "list<root.SharedWorkloadEntitlement>",
            },
          },
          "ListEntitlementsByProduct": {
            "auth": true,
            "method": "GET",
            "path": "/org/{orgId}/product/{productId}/entitlement",
            "path-parameters": {
              "orgId": {
                "docs": undefined,
                "type": "string",
              },
              "productId": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "OK",
              "type": "list<root.SharedWorkloadEntitlement>",
            },
          },
          "UpdateEntitlementName": {
            "auth": true,
            "method": "PATCH",
            "path": "/org/{orgId}/entitlement/{entitlementId}/entitlementName",
            "path-parameters": {
              "entitlementId": {
                "docs": undefined,
                "type": "string",
              },
              "orgId": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "id": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                  "name": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                  "organizationID": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "GithubComSugerioMarketplaceServiceRdsDbLibUpdateEntitlementNameParams",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedWorkloadEntitlement",
            },
          },
        },
      },
    },
    "entitlementTerm.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "GetEntitlementTerm": {
            "auth": true,
            "method": "GET",
            "path": "/org/{orgId}/entitlement/{entitlementId}/entitlementTerm/{entitlementTermId}",
            "path-parameters": {
              "entitlementId": {
                "docs": undefined,
                "type": "string",
              },
              "entitlementTermId": {
                "docs": undefined,
                "type": "string",
              },
              "orgId": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedWorkloadEntitlementTerm",
            },
          },
          "ListEntitlementTerms": {
            "auth": true,
            "method": "GET",
            "path": "/org/{orgId}/entitlement/{entitlementId}/entitlementTerm",
            "path-parameters": {
              "entitlementId": {
                "docs": undefined,
                "type": "string",
              },
              "orgId": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "OK",
              "type": "list<root.SharedWorkloadEntitlementTerm>",
            },
          },
        },
      },
    },
    "integration.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "CreateIntegration": {
            "auth": true,
            "method": "POST",
            "path": "/org/{orgId}/integration",
            "path-parameters": {
              "orgId": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "createdBy": {
                    "docs": undefined,
                    "type": "optional<string>",
                  },
                  "info": {
                    "docs": undefined,
                    "type": "root.SharedIntegrationInfo",
                  },
                  "organizationID": {
                    "docs": undefined,
                    "type": "string",
                  },
                  "partner": {
                    "docs": undefined,
                    "type": "root.SharedCreateIntegrationParamsPartner",
                  },
                  "service": {
                    "docs": undefined,
                    "type": "root.SharedCreateIntegrationParamsService",
                  },
                },
              },
              "headers": undefined,
              "name": "SharedCreateIntegrationParams",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedIdentityIntegration",
            },
          },
          "DeleteIntegration": {
            "auth": true,
            "method": "DELETE",
            "path": "/org/{orgId}/integration/{partner}/{service}",
            "path-parameters": {
              "orgId": {
                "docs": undefined,
                "type": "string",
              },
              "partner": {
                "docs": undefined,
                "type": "root.DeleteIntegrationRequestPartner",
              },
              "service": {
                "docs": undefined,
                "type": "root.DeleteIntegrationRequestService",
              },
            },
            "response": {
              "docs": "Empty string if deletion is successful",
              "type": "string",
            },
          },
          "GetIntegration": {
            "auth": true,
            "method": "GET",
            "path": "/org/{orgId}/integration/{partner}/{service}",
            "path-parameters": {
              "orgId": {
                "docs": undefined,
                "type": "string",
              },
              "partner": {
                "docs": undefined,
                "type": "root.GetIntegrationRequestPartner",
              },
              "service": {
                "docs": undefined,
                "type": "root.GetIntegrationRequestService",
              },
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedIdentityIntegration",
            },
          },
          "ListIntegrationsByOrganization": {
            "auth": true,
            "method": "GET",
            "path": "/org/{orgId}/integration",
            "path-parameters": {
              "orgId": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "OK",
              "type": "list<root.SharedIdentityIntegration>",
            },
          },
          "UpdateIntegration": {
            "auth": true,
            "method": "PATCH",
            "path": "/org/{orgId}/integration/{partner}/{service}",
            "path-parameters": {
              "orgId": {
                "docs": undefined,
                "type": "string",
              },
              "partner": {
                "docs": undefined,
                "type": "root.UpdateIntegrationRequestPartner",
              },
              "service": {
                "docs": undefined,
                "type": "root.UpdateIntegrationRequestService",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "info": {
                    "docs": undefined,
                    "type": "root.SharedIntegrationInfo",
                  },
                  "organizationID": {
                    "docs": undefined,
                    "type": "string",
                  },
                  "partner": {
                    "docs": undefined,
                    "type": "root.SharedUpdateIntegrationParamsPartner",
                  },
                  "service": {
                    "docs": undefined,
                    "type": "root.SharedUpdateIntegrationParamsService",
                  },
                },
              },
              "headers": undefined,
              "name": "SharedUpdateIntegrationParams",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedIdentityIntegration",
            },
          },
          "VerifyIntegration": {
            "auth": true,
            "method": "POST",
            "path": "/org/{orgId}/integration/{partner}/{service}/verify",
            "path-parameters": {
              "orgId": {
                "docs": undefined,
                "type": "string",
              },
              "partner": {
                "docs": undefined,
                "type": "root.VerifyIntegrationRequestPartner",
              },
              "service": {
                "docs": undefined,
                "type": "root.VerifyIntegrationRequestService",
              },
            },
            "response": {
              "docs": "whether it is verified or not",
              "type": "boolean",
            },
          },
        },
      },
    },
    "metering.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "GetUsageRecordGroup": {
            "auth": true,
            "method": "GET",
            "path": "/org/{orgId}/usageRecordGroup/{usageRecordGroupId}",
            "path-parameters": {
              "orgId": {
                "docs": undefined,
                "type": "string",
              },
              "usageRecordGroupId": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedMeteringUsageRecordGroup",
            },
          },
          "GetUsageRecordReport": {
            "auth": true,
            "method": "GET",
            "path": "/org/{orgId}/usageRecordReport/{usageRecordReportId}",
            "path-parameters": {
              "orgId": {
                "docs": undefined,
                "type": "string",
              },
              "usageRecordReportId": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedMeteringUsageRecordReport",
            },
          },
          "ListUsageRecordGroupsByEntitlement": {
            "auth": true,
            "method": "GET",
            "path": "/org/{orgId}/entitlement/{entitlementId}/usageRecordGroup",
            "path-parameters": {
              "entitlementId": {
                "docs": undefined,
                "type": "string",
              },
              "orgId": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "name": "ListUsageRecordGroupsByEntitlementRequest",
              "query-parameters": {
                "endDate": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "offset": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "startDate": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedListUsageRecordGroupsResponse",
            },
          },
          "ListUsageRecordGroupsByOrganization": {
            "auth": true,
            "method": "GET",
            "path": "/org/{orgId}/usageRecordGroup",
            "path-parameters": {
              "orgId": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "name": "ListUsageRecordGroupsByOrganizationRequest",
              "query-parameters": {
                "endDate": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "offset": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "startDate": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedListUsageRecordGroupsResponse",
            },
          },
          "ListUsageRecordGroupsByProduct": {
            "auth": true,
            "method": "GET",
            "path": "/org/{orgId}/product/{productId}/usageRecordGroup",
            "path-parameters": {
              "orgId": {
                "docs": undefined,
                "type": "string",
              },
              "productId": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "name": "ListUsageRecordGroupsByProductRequest",
              "query-parameters": {
                "endDate": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "offset": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "startDate": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedListUsageRecordGroupsResponse",
            },
          },
          "ListUsageRecordReportsByEntitlement": {
            "auth": true,
            "method": "GET",
            "path": "/org/{orgId}/entitlement/{entitlementId}/usageRecordReport",
            "path-parameters": {
              "entitlementId": {
                "docs": undefined,
                "type": "string",
              },
              "orgId": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "name": "ListUsageRecordReportsByEntitlementRequest",
              "query-parameters": {
                "endDate": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "entitlementTermId": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "offset": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "startDate": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedListUsageRecordReportsResponse",
            },
          },
          "ListUsageRecordReportsByOrganization": {
            "auth": true,
            "method": "GET",
            "path": "/org/{orgId}/usageRecordReport",
            "path-parameters": {
              "orgId": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "name": "ListUsageRecordReportsByOrganizationRequest",
              "query-parameters": {
                "endDate": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "offset": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "startDate": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedListUsageRecordReportsResponse",
            },
          },
          "ListUsageRecordReportsByProduct": {
            "auth": true,
            "method": "GET",
            "path": "/org/{orgId}/product/{productId}/usageRecordReport",
            "path-parameters": {
              "orgId": {
                "docs": undefined,
                "type": "string",
              },
              "productId": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "name": "ListUsageRecordReportsByProductRequest",
              "query-parameters": {
                "endDate": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "offset": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "startDate": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedListUsageRecordReportsResponse",
            },
          },
          "ReportUsageRecordGroup": {
            "auth": true,
            "method": "POST",
            "path": "/org/{orgId}/entitlement/{entitlementId}/usageRecordGroup",
            "path-parameters": {
              "entitlementId": {
                "docs": undefined,
                "type": "string",
              },
              "orgId": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "entitlementID": {
                    "docs": undefined,
                    "type": "string",
                  },
                  "id": {
                    "docs": "uuid of the UsageRecordGroup (the size is up to 36 characters), if not provided, suger will generate one.",
                    "type": "optional<string>",
                  },
                  "metaInfo": {
                    "docs": "read-only, don't set it when reporting the usage record group.",
                    "type": "optional<root.SharedMeteringUsageRecordGroupMetaInfo>",
                  },
                  "organizationID": {
                    "docs": undefined,
                    "type": "string",
                  },
                  "records": {
                    "docs": undefined,
                    "type": "map<string, double>",
                  },
                },
              },
              "headers": undefined,
              "name": "SharedCreateUsageRecordGroupParams",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedMeteringUsageRecordGroup",
            },
          },
        },
      },
    },
    "offer.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "CancelOffer": {
            "auth": true,
            "method": "POST",
            "path": "/org/{orgId}/offer/{offerId}/cancel",
            "path-parameters": {
              "offerId": {
                "docs": undefined,
                "type": "string",
              },
              "orgId": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Empty string if cancellation is successful",
              "type": "string",
            },
          },
          "CreateOffer": {
            "auth": true,
            "method": "POST",
            "path": "/org/{orgId}/offer",
            "path-parameters": {
              "orgId": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.SharedWorkloadOffer",
              },
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedWorkloadOffer",
            },
          },
          "CreateOrUpdateDraftOffer": {
            "auth": true,
            "method": "POST",
            "path": "/org/{orgId}/draftOffer",
            "path-parameters": {
              "orgId": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "docs": undefined,
                "type": "root.SharedWorkloadOffer",
              },
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedWorkloadOffer",
            },
          },
          "DeleteOffer": {
            "auth": true,
            "method": "DELETE",
            "path": "/org/{orgId}/offer/{offerId}",
            "path-parameters": {
              "offerId": {
                "docs": undefined,
                "type": "string",
              },
              "orgId": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Empty string if deletion is successful",
              "type": "string",
            },
          },
          "GetOffer": {
            "auth": true,
            "method": "GET",
            "path": "/org/{orgId}/offer/{offerId}",
            "path-parameters": {
              "offerId": {
                "docs": undefined,
                "type": "string",
              },
              "orgId": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedWorkloadOffer",
            },
          },
          "ListOffersByOrganization": {
            "auth": true,
            "method": "GET",
            "path": "/org/{orgId}/offer",
            "path-parameters": {
              "orgId": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "OK",
              "type": "list<root.SharedWorkloadOffer>",
            },
          },
          "ListOffersByPartner": {
            "auth": false,
            "method": "GET",
            "path": "/org/{orgId}/partner/{partner}/offer",
            "path-parameters": {
              "orgId": {
                "docs": undefined,
                "type": "string",
              },
              "partner": {
                "docs": undefined,
                "type": "root.ListOffersByPartnerRequestPartner",
              },
            },
            "request": {
              "name": "ListOffersByPartnerRequest",
              "query-parameters": {
                "Authorization": {
                  "docs": undefined,
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "OK",
              "type": "list<root.SharedWorkloadOffer>",
            },
          },
          "ListOffersByProduct": {
            "auth": true,
            "method": "GET",
            "path": "/org/{orgId}/product/{productId}/offer",
            "path-parameters": {
              "orgId": {
                "docs": undefined,
                "type": "string",
              },
              "productId": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "OK",
              "type": "list<root.SharedWorkloadOffer>",
            },
          },
        },
      },
    },
    "operation.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "ListOperations": {
            "auth": true,
            "method": "GET",
            "path": "/org/{orgId}/operation",
            "path-parameters": {
              "orgId": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "name": "ListOperationsRequest",
              "query-parameters": {
                "crmOpportunityId": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "entitlementId": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "offerId": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "partnerOpportunityId": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "OK",
              "type": "list<root.SharedOperation>",
            },
          },
        },
      },
    },
    "product.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "DeleteProduct": {
            "auth": true,
            "method": "DELETE",
            "path": "/org/{orgId}/product/{productId}",
            "path-parameters": {
              "orgId": {
                "docs": undefined,
                "type": "string",
              },
              "productId": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "Empty string if deletion is successful",
              "type": "string",
            },
          },
          "GetProduct": {
            "auth": true,
            "method": "GET",
            "path": "/org/{orgId}/product/{productId}",
            "path-parameters": {
              "orgId": {
                "docs": undefined,
                "type": "string",
              },
              "productId": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedWorkloadProduct",
            },
          },
          "ListProductMeteringDimensions": {
            "auth": true,
            "method": "GET",
            "path": "/org/{orgId}/product/{productId}/dimension",
            "path-parameters": {
              "orgId": {
                "docs": undefined,
                "type": "string",
              },
              "productId": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "OK",
              "type": "list<root.SharedAwsSaasProductDimension>",
            },
          },
          "ListProductsByOrganization": {
            "auth": true,
            "method": "GET",
            "path": "/org/{orgId}/product",
            "path-parameters": {
              "orgId": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "OK",
              "type": "list<root.SharedWorkloadProduct>",
            },
          },
          "ListProductsByPartner": {
            "auth": true,
            "method": "GET",
            "path": "/org/{orgId}/partner/{partner}/product",
            "path-parameters": {
              "orgId": {
                "docs": undefined,
                "type": "string",
              },
              "partner": {
                "docs": undefined,
                "type": "root.ListProductsByPartnerRequestPartner",
              },
            },
            "response": {
              "docs": "OK",
              "type": "list<root.SharedWorkloadProduct>",
            },
          },
          "UpdateProduct": {
            "auth": true,
            "method": "PATCH",
            "path": "/org/{orgId}/product/{productId}",
            "path-parameters": {
              "orgId": {
                "docs": undefined,
                "type": "string",
              },
              "productId": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "fulfillmentUrl": {
                    "docs": undefined,
                    "type": "string",
                  },
                  "id": {
                    "docs": undefined,
                    "type": "string",
                  },
                  "organizationID": {
                    "docs": undefined,
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "SharedUpdateProductParams",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedWorkloadProduct",
            },
          },
        },
      },
    },
    "report.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "GetRevenueReport": {
            "auth": true,
            "method": "POST",
            "path": "/org/{orgId}/revenueReport",
            "path-parameters": {
              "orgId": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "buyerID": {
                    "docs": "Optional, if available, return the report for the Buyer.",
                    "type": "optional<string>",
                  },
                  "entitlementID": {
                    "docs": "Optional, if available, return the report for the Entitlement.",
                    "type": "optional<string>",
                  },
                  "organizationID": {
                    "docs": "Required. If the productID & entitlementID are emtpy, return the report for the entire Organization.",
                    "type": "string",
                  },
                  "partner": {
                    "docs": "Required.",
                    "type": "root.SharedGetRevenueReportParamsPartner",
                  },
                  "productID": {
                    "docs": "Optional, if available, return the report for the Product.",
                    "type": "optional<string>",
                  },
                  "reportType": {
                    "docs": undefined,
                    "type": "root.SharedRevenueReportType",
                  },
                  "service": {
                    "docs": "Required.",
                    "type": "root.SharedGetRevenueReportParamsService",
                  },
                },
              },
              "headers": undefined,
              "name": "SharedGetRevenueReportParams",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedRevenueReport",
            },
          },
          "GetUsageReport": {
            "auth": true,
            "method": "POST",
            "path": "/org/{orgId}/usageReport",
            "path-parameters": {
              "orgId": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "body": {
                "properties": {
                  "entitlementID": {
                    "docs": undefined,
                    "type": "string",
                  },
                  "organizationID": {
                    "docs": undefined,
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "SharedGetUsageReportParams",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedUsageReport",
            },
          },
          "ListRevenueRecordDetails": {
            "auth": true,
            "method": "GET",
            "path": "/org/{orgId}/partner/{partner}/revenueRecordDetail",
            "path-parameters": {
              "orgId": {
                "docs": undefined,
                "type": "string",
              },
              "partner": {
                "docs": undefined,
                "type": "root.ListRevenueRecordDetailsRequestPartner",
              },
            },
            "request": {
              "name": "ListRevenueRecordDetailsRequest",
              "query-parameters": {
                "buyerId": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "endDate": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "entitlementId": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "offset": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "productId": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "startDate": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedListRevenueRecordDetailsResponse",
            },
          },
          "ListRevenueRecords": {
            "auth": true,
            "method": "GET",
            "path": "/org/{orgId}/partner/{partner}/revenueRecord",
            "path-parameters": {
              "orgId": {
                "docs": undefined,
                "type": "string",
              },
              "partner": {
                "docs": undefined,
                "type": "root.ListRevenueRecordsRequestPartner",
              },
            },
            "request": {
              "name": "ListRevenueRecordsRequest",
              "query-parameters": {
                "buyerId": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "endDate": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "entitlementId": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "offset": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "productId": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "startDate": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "OK",
              "type": "root.SharedListRevenueRecordsResponse",
            },
          },
        },
      },
    },
  },
  "rootApiFile": {
    "auth": "BearerTokenAuth",
    "auth-schemes": {
      "BearerTokenAuth": {
        "header": "Authorization",
        "name": "apiKey",
        "type": "string",
      },
    },
    "default-environment": "default",
    "display-name": "Suger API",
    "environments": {
      "default": "https://api.suger.cloud",
    },
    "error-discrimination": {
      "strategy": "status-code",
    },
    "headers": {},
    "name": "api",
  },
}
`;

exports[`open api converter vellum simple 1`] = `
{
  "definitionFiles": {
    "__package__.yml": {
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "generate": {
            "auth": true,
            "method": "POST",
            "path": "/v1/generate",
            "request": {
              "body": {
                "properties": {
                  "deployment_id": {
                    "docs": "The ID of the deployment. Must provide either this or deployment_name.",
                    "type": "optional<string>",
                  },
                  "deployment_name": {
                    "docs": "The name of the deployment. Must provide either this or deployment_id.",
                    "type": "optional<string>",
                  },
                  "options": {
                    "docs": "Additional configuration that can be used to control what's included in the response.",
                    "type": "optional<GenerateOptionsRequest>",
                  },
                  "requests": {
                    "docs": "The generation requests to make. Supplying multiple will perform a bulk request to the LLM provided when possible.",
                    "type": "list<GenerateRequestRequest>",
                  },
                },
              },
              "headers": undefined,
              "name": "GenerateRequestBodyRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "",
              "type": "GenerateResponse",
            },
            "url": "Default",
          },
          "search": {
            "auth": true,
            "method": "POST",
            "path": "/v1/search",
            "request": {
              "body": {
                "properties": {
                  "index_id": {
                    "docs": "The ID of the index to search against. Must provide either this or index_name.",
                    "type": "optional<string>",
                  },
                  "index_name": {
                    "docs": "The name of the index to search against. Must provide either this or index_id.",
                    "type": "optional<string>",
                  },
                  "options": {
                    "docs": "Configuration options for the search.",
                    "type": "optional<SearchRequestOptionsRequest>",
                  },
                  "query": {
                    "docs": "The query to search for.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "SearchRequestBodyRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "",
              "type": "SearchResponse",
            },
            "url": "Predict",
          },
          "submit-completion-actuals": {
            "auth": true,
            "method": "POST",
            "path": "/v1/submit-completion-actuals",
            "request": {
              "body": {
                "properties": {
                  "actuals": {
                    "docs": "Feedback regarding the quality of previously generated completions",
                    "type": "list<SubmitCompletionActualRequest>",
                  },
                  "deployment_id": {
                    "docs": "The ID of the deployment. Must provide either this or deployment_name.",
                    "type": "optional<string>",
                  },
                  "deployment_name": {
                    "docs": "The name of the deployment. Must provide either this or deployment_id.",
                    "type": "optional<string>",
                  },
                },
              },
              "headers": undefined,
              "name": "SubmitCompletionActualsRequestRequest",
              "query-parameters": undefined,
            },
            "url": "Predict",
          },
        },
      },
      "types": {
        "Document": {
          "docs": undefined,
          "properties": {
            "external_id": {
              "docs": "The unique ID of the document as represented in an external system and specified when it was originally uploaded.",
              "type": "optional<string>",
            },
            "id": {
              "docs": "The ID of the document.",
              "type": "string",
            },
            "label": {
              "docs": "The human-readable name for the document.",
              "type": "string",
            },
          },
        },
        "DocumentDocumentToDocumentIndex": {
          "docs": undefined,
          "properties": {
            "document_index_id": {
              "docs": "Vellum-generated ID that uniquely identifies the index this document is included in.",
              "type": "string",
            },
            "id": {
              "docs": "Vellum-generated ID that uniquely identifies this link.",
              "type": "string",
            },
            "indexing_state": {
              "docs": "An enum value representing where this document is along its indexing lifecycle for this index.",
              "type": "optional<IndexingStateEnum>",
            },
          },
        },
        "EnrichedNormalizedCompletion": {
          "docs": undefined,
          "properties": {
            "external_id": {
              "docs": "The external ID that was originally provided along with the generation request, which uniquely identifies this generation in an external system.",
              "type": "optional<string>",
            },
            "finish_reason": {
              "docs": "The reason the generation finished.",
              "type": "FinishReasonEnum",
            },
            "id": {
              "docs": "The Vellum-generated ID of the completion.",
              "type": "string",
            },
            "logprobs": {
              "docs": "The logprobs of the completion. Only present if specified in the original request options.",
              "type": "optional<NormalizedLogProbs>",
            },
            "model_version_id": {
              "docs": "The ID of the model version used to generate this completion.",
              "type": "string",
            },
            "text": {
              "docs": "The text generated by the LLM.",
              "type": "string",
            },
          },
        },
        "FinishReasonEnum": {
          "docs": undefined,
          "enum": [
            {
              "name": "LENGTH",
              "value": "LENGTH",
            },
            {
              "name": "STOP",
              "value": "STOP",
            },
            {
              "name": "UNKNOWN",
              "value": "UNKNOWN",
            },
          ],
        },
        "GenerateErrorResponse": {
          "docs": undefined,
          "properties": {
            "detail": {
              "docs": "Details about why the request failed.",
              "type": "string",
            },
          },
        },
        "GenerateOptionsRequest": {
          "docs": undefined,
          "properties": {
            "logprobs": {
              "docs": "Which logprobs to include, if any. Defaults to NONE.",
              "type": "optional<LogprobsEnum>",
            },
          },
        },
        "GenerateRequestRequest": {
          "docs": undefined,
          "properties": {
            "external_ids": {
              "docs": "Optionally include a unique identifier for each generation, as represented outside of Vellum. Note that this should generally be a list of length one.",
              "type": "optional<list<string>>",
            },
            "input_values": {
              "docs": "Key/value pairs for each template variable defined in the deployment's prompt.",
              "type": "map<string, unknown>",
            },
          },
        },
        "GenerateResponse": {
          "docs": undefined,
          "properties": {
            "results": {
              "docs": "The results of each generation request.",
              "type": "list<GenerateResult>",
            },
          },
        },
        "GenerateResult": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": "An object containing the resulting generation. This key will be absent if the LLM provider experienced an error.",
              "type": "optional<GenerateResultData>",
            },
            "error": {
              "docs": "An object containing details about the error that occurred. This key will be absent if the LLM provider did not experience an error.",
              "type": "optional<GenerateResultError>",
            },
          },
        },
        "GenerateResultData": {
          "docs": undefined,
          "properties": {
            "completions": {
              "docs": "The generated completions. This will generally be a list of length one.",
              "type": "list<EnrichedNormalizedCompletion>",
            },
          },
        },
        "GenerateResultError": {
          "docs": undefined,
          "properties": {
            "message": {
              "docs": "The error message returned by the LLM provider.",
              "type": "string",
            },
          },
        },
        "IndexingStateEnum": {
          "docs": undefined,
          "enum": [
            {
              "name": "AWAITING_PROCESSING",
              "value": "AWAITING_PROCESSING",
            },
            {
              "name": "QUEUED",
              "value": "QUEUED",
            },
            {
              "name": "INDEXING",
              "value": "INDEXING",
            },
            {
              "name": "INDEXED",
              "value": "INDEXED",
            },
            {
              "name": "FAILED",
              "value": "FAILED",
            },
          ],
        },
        "LogprobsEnum": {
          "docs": undefined,
          "enum": [
            {
              "name": "ALL",
              "value": "ALL",
            },
            {
              "name": "NONE",
              "value": "NONE",
            },
          ],
        },
        "ModelTypeEnum": {
          "docs": undefined,
          "enum": [
            {
              "name": "GENERATE",
              "value": "GENERATE",
            },
            {
              "name": "CLASSIFY",
              "value": "CLASSIFY",
            },
          ],
        },
        "ModelVersionBuildConfig": {
          "docs": undefined,
          "properties": {
            "base_model": {
              "docs": "The name of the base model used to create this model version, as identified by the LLM provider.",
              "type": "string",
            },
            "sandbox_snapshot": {
              "docs": "Information about the sandbox snapshot that was used to create this model version, if applicable.",
              "type": "optional<ModelVersionSandboxSnapshot>",
            },
          },
        },
        "ModelVersionExecConfigParameters": {
          "docs": undefined,
          "properties": {
            "frequency_penalty": {
              "docs": undefined,
              "type": "double",
            },
            "logit_bias": {
              "docs": undefined,
              "type": "optional<map<string, optional<double>>>",
            },
            "max_tokens": {
              "docs": undefined,
              "type": "integer",
            },
            "presence_penalty": {
              "docs": undefined,
              "type": "double",
            },
            "stop": {
              "docs": undefined,
              "type": "optional<list<string>>",
            },
            "temperature": {
              "docs": undefined,
              "type": "double",
            },
            "top_k": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "top_p": {
              "docs": undefined,
              "type": "double",
            },
          },
        },
        "ModelVersionExecConfigRead": {
          "docs": undefined,
          "properties": {
            "input_variables": {
              "docs": "Names of the template variables specified in the prompt template.",
              "type": "list<string>",
            },
            "parameters": {
              "docs": "The generation parameters that are passed to the LLM provider at runtime.",
              "type": "ModelVersionExecConfigParameters",
            },
            "prompt_template": {
              "docs": "The template used to generate prompts for this model version.",
              "type": "string",
            },
          },
        },
        "ModelVersionRead": {
          "docs": undefined,
          "properties": {
            "build_config": {
              "docs": "Configuration used to build this model version.",
              "type": "ModelVersionBuildConfig",
            },
            "created": {
              "docs": "Timestamp of when this model version was created.",
              "type": "string",
            },
            "exec_config": {
              "docs": "Configuration used to execute this model version.",
              "type": "ModelVersionExecConfigRead",
            },
            "external_id": {
              "docs": "The unique id of this model version as it exists in the above provider's system.",
              "type": "string",
            },
            "id": {
              "docs": "Vellum-generated ID that uniquely identifies this model version.",
              "type": "string",
            },
            "label": {
              "docs": "Human-friendly name for this model version.",
              "type": "string",
            },
            "model_type": {
              "docs": "The type of task this model is used for.",
              "type": "ModelTypeEnum",
            },
            "provider": {
              "docs": "Which LLM provider this model version is associated with.",
              "type": "ProviderEnum",
            },
          },
        },
        "ModelVersionSandboxSnapshot": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": "The ID of the sandbox snapshot.",
              "type": "string",
            },
            "prompt_index": {
              "docs": "The index of the prompt in the sandbox snapshot.",
              "type": "integer",
            },
          },
        },
        "NormalizedLogProbs": {
          "docs": undefined,
          "properties": {
            "likelihood": {
              "docs": undefined,
              "type": "double",
            },
            "tokens": {
              "docs": undefined,
              "type": "list<NormalizedTokenLogProbs>",
            },
          },
        },
        "NormalizedTokenLogProbs": {
          "docs": undefined,
          "properties": {
            "logprob": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "text_offset": {
              "docs": undefined,
              "type": "integer",
            },
            "token": {
              "docs": undefined,
              "type": "string",
            },
            "top_logprobs": {
              "docs": undefined,
              "type": "optional<map<string, optional<double>>>",
            },
          },
        },
        "PaginatedSlimDocumentList": {
          "docs": undefined,
          "properties": {
            "count": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "next": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "previous": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "results": {
              "docs": undefined,
              "type": "optional<list<SlimDocument>>",
            },
          },
        },
        "ProcessingStateEnum": {
          "docs": undefined,
          "enum": [
            {
              "name": "QUEUED",
              "value": "QUEUED",
            },
            {
              "name": "PROCESSING",
              "value": "PROCESSING",
            },
            {
              "name": "PROCESSED",
              "value": "PROCESSED",
            },
            {
              "name": "FAILED",
              "value": "FAILED",
            },
          ],
        },
        "ProviderEnum": {
          "docs": undefined,
          "enum": [
            {
              "name": "OPENAI",
              "value": "OPENAI",
            },
            {
              "name": "COHERE",
              "value": "COHERE",
            },
            {
              "name": "ANTHROPIC",
              "value": "ANTHROPIC",
            },
          ],
        },
        "SearchErrorResponse": {
          "docs": undefined,
          "properties": {
            "detail": {
              "docs": "Details about why the request failed.",
              "type": "string",
            },
          },
        },
        "SearchFiltersRequest": {
          "docs": undefined,
          "properties": {
            "external_ids": {
              "docs": "The document external IDs to filter by",
              "type": "optional<list<string>>",
            },
          },
        },
        "SearchRequestOptionsRequest": {
          "docs": undefined,
          "properties": {
            "filters": {
              "docs": "The filters to apply to the search.",
              "type": "optional<SearchFiltersRequest>",
            },
            "limit": {
              "docs": "The maximum number of results to return.",
              "type": "optional<integer>",
            },
            "result_merging": {
              "docs": "The configuration for merging results.",
              "type": "optional<SearchResultMergingRequest>",
            },
            "weights": {
              "docs": "The weights to use for the search. Must add up to 1.0.",
              "type": "optional<SearchWeightsRequest>",
            },
          },
        },
        "SearchResponse": {
          "docs": undefined,
          "properties": {
            "results": {
              "docs": "The results of the search. Each result represents a chunk that matches the search query.",
              "type": "list<SearchResult>",
            },
          },
        },
        "SearchResult": {
          "docs": undefined,
          "properties": {
            "document": {
              "docs": "The document that contains the chunk that matched the search query.",
              "type": "Document",
            },
            "keywords": {
              "docs": undefined,
              "type": "list<string>",
            },
            "score": {
              "docs": "A score representing how well the chunk matches the search query.",
              "type": "double",
            },
            "text": {
              "docs": "The text of the chunk that matched the search query.",
              "type": "string",
            },
          },
        },
        "SearchResultMergingRequest": {
          "docs": undefined,
          "properties": {
            "enabled": {
              "docs": "Whether to enable merging results",
              "type": "boolean",
            },
          },
        },
        "SearchWeightsRequest": {
          "docs": undefined,
          "properties": {
            "keywords": {
              "docs": "The relative weight to give to keyword matches",
              "type": "double",
            },
            "semantic_similarity": {
              "docs": "The relative weight to give to semantic similarity",
              "type": "double",
            },
          },
        },
        "SlimDocument": {
          "docs": undefined,
          "properties": {
            "document_to_document_indexes": {
              "docs": undefined,
              "type": "list<DocumentDocumentToDocumentIndex>",
            },
            "external_id": {
              "docs": "The external ID that was originally provided when uploading the document.",
              "type": "optional<string>",
            },
            "id": {
              "docs": "Vellum-generated ID that uniquely identifies this document.",
              "type": "string",
            },
            "keywords": {
              "docs": "A list of keywords associated with this document. Originally provided when uploading the document.",
              "type": "optional<list<string>>",
            },
            "label": {
              "docs": "Human-friendly name for this document.",
              "type": "string",
            },
            "last_uploaded_at": {
              "docs": "A timestamp representing when this document was most recently uploaded.",
              "type": "string",
            },
            "processing_state": {
              "docs": "The current processing state of the document",
              "type": "optional<ProcessingStateEnum>",
            },
            "status": {
              "docs": "The document's current status.",
              "type": "optional<StatusEnum>",
            },
          },
        },
        "StatusEnum": {
          "docs": undefined,
          "enum": [
            {
              "name": "ACTIVE",
              "value": "ACTIVE",
            },
          ],
        },
        "SubmitCompletionActualRequest": {
          "docs": undefined,
          "properties": {
            "external_id": {
              "docs": "The external ID that was originally provided when generating the completion that you'd now like to submit actuals for. Must provide either this or id.",
              "type": "optional<string>",
            },
            "id": {
              "docs": "The Vellum-generated ID of a previously generated completion. Must provide either this or external_id.",
              "type": "optional<string>",
            },
            "quality": {
              "docs": "A number between 0 and 1 representing the quality of the completion. 0 is the worst, 1 is the best.",
              "type": "optional<double>",
            },
            "text": {
              "docs": "Text representing what the completion _should_ have been.",
              "type": "optional<string>",
            },
            "timestamp": {
              "docs": "Optionally provide the timestamp representing when this feedback was collected. Used for reporting purposes.",
              "type": "optional<string>",
            },
          },
        },
        "SubmitCompletionActualsErrorResponse": {
          "docs": undefined,
          "properties": {
            "detail": {
              "docs": undefined,
              "type": "string",
            },
          },
        },
        "UploadDocumentErrorResponse": {
          "docs": undefined,
          "properties": {
            "detail": {
              "docs": undefined,
              "type": "string",
            },
          },
        },
        "UploadDocumentResponse": {
          "docs": undefined,
          "properties": {
            "document_id": {
              "docs": "The ID of the newly created document.",
              "type": "string",
            },
          },
        },
      },
    },
    "documents.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "list": {
            "auth": true,
            "method": "GET",
            "path": "/v1/documents",
            "request": {
              "name": "ListDocumentsRequest",
              "query-parameters": {
                "document_index_id": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "limit": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "offset": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "ordering": {
                  "allow-multiple": undefined,
                  "docs": undefined,
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "",
              "type": "root.PaginatedSlimDocumentList",
            },
            "url": "Default",
          },
          "upload": {
            "auth": true,
            "method": "POST",
            "path": "/v1/upload-document",
            "request": {
              "body": {
                "properties": {
                  "add_to_index_names": {
                    "docs": "Optionally include the names of all indexes that you'd like this document to be included in",
                    "type": "optional<list<string>>",
                  },
                  "contents": "file",
                  "external_id": {
                    "docs": "Optionally include an external ID for this document. This is useful if you want to re-upload the same document later when its contents change and would like it to be re-indexed.",
                    "type": "optional<string>",
                  },
                  "keywords": {
                    "docs": "Optionally include a list of keywords that'll be associated with this document. Used when performing keyword searches.",
                    "type": "optional<list<string>>",
                  },
                  "label": {
                    "docs": "A human-friendly name for this document. Typically the filename.",
                    "type": "string",
                  },
                },
              },
              "headers": undefined,
              "name": "UploadDocumentRequestBodyRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "",
              "type": "root.UploadDocumentResponse",
            },
            "url": "Documents",
          },
        },
      },
    },
    "modelVersions.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "retrieve": {
            "auth": true,
            "method": "GET",
            "path": "/v1/model-versions/{id}",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "",
              "type": "root.ModelVersionRead",
            },
            "url": "Default",
          },
        },
      },
    },
  },
  "rootApiFile": {
    "auth": "apiKeyAuth",
    "auth-schemes": {
      "apiKeyAuth": {
        "header": "X_API_KEY",
        "name": "apiKey",
        "type": "string",
      },
    },
    "default-environment": "Production",
    "display-name": "Vellum Client API",
    "environments": {
      "Production": {
        "urls": {
          "Default": "https://api.vellum.ai",
          "Documents": "https://documents.vellum.ai",
          "Predict": "https://predict.vellum.ai",
        },
      },
    },
    "error-discrimination": {
      "strategy": "status-code",
    },
    "headers": {},
    "name": "api",
  },
}
`;
