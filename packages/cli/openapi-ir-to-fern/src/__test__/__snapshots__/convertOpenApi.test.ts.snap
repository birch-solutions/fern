// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`open api converter buzzshot simple 1`] = `
{
  "definitionFiles": {
    "__package__.yml": {
      "service": {
        "auth": true,
        "base-path": "",
        "endpoints": {
          "listAccounts": {
            "method": "GET",
            "path": "/api/v2/accounts/",
            "request": {
              "name": "listAccountsRequest",
              "query-parameters": {
                "page": {
                  "docs": undefined,
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "",
              "type": "AccountsPage",
            },
          },
          "listGames": {
            "method": "GET",
            "path": "/api/v2/games/",
            "request": {
              "name": "listGamesRequest",
              "query-parameters": {
                "after": {
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "before": {
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "complete": {
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "date": {
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "page": {
                  "docs": undefined,
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "",
              "type": "GamesPage",
            },
          },
          "listGroups": {
            "method": "GET",
            "path": "/api/v2/groups/",
            "request": {
              "name": "listGroupsRequest",
              "query-parameters": {
                "complete": {
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "is_event": {
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "page": {
                  "docs": undefined,
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "",
              "type": "GroupsPage",
            },
          },
          "listLocations": {
            "method": "GET",
            "path": "/api/v2/rooms/",
            "request": {
              "name": "listLocationsRequest",
              "query-parameters": {
                "page": {
                  "docs": undefined,
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "",
              "type": "RoomsPage",
            },
          },
          "listPhotos": {
            "method": "GET",
            "path": "/api/v2/photos/",
            "request": {
              "name": "listPhotosRequest",
              "query-parameters": {
                "page": {
                  "docs": undefined,
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "",
              "type": "PhotosPage",
            },
          },
          "listPlayers": {
            "method": "GET",
            "path": "/api/v2/players/",
            "request": {
              "name": "listPlayersRequest",
              "query-parameters": {
                "page": {
                  "docs": undefined,
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "",
              "type": "PlayersPage",
            },
          },
          "retrieveAccount": {
            "method": "GET",
            "path": "/api/v2/accounts/{id}/",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "",
              "type": "Room",
            },
          },
          "retrieveGame": {
            "method": "GET",
            "path": "/api/v2/games/{id}/",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "name": "retrieveGameRequest",
              "query-parameters": {
                "after": {
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "before": {
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "complete": {
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "date": {
                  "docs": undefined,
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "",
              "type": "Game",
            },
          },
          "retrieveGroup": {
            "method": "GET",
            "path": "/api/v2/groups/{id}/",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "request": {
              "name": "retrieveGroupRequest",
              "query-parameters": {
                "complete": {
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "is_event": {
                  "docs": undefined,
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "",
              "type": "Group",
            },
          },
          "retrieveLocation": {
            "method": "GET",
            "path": "/api/v2/rooms/{id}/",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "",
              "type": "Room",
            },
          },
          "retrievePhoto": {
            "method": "GET",
            "path": "/api/v2/photos/{photo_id}/",
            "path-parameters": {
              "photo_id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "",
              "type": "Photo",
            },
          },
          "retrievePlayer": {
            "method": "GET",
            "path": "/api/v2/players/{id}/",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "",
              "type": "Player",
            },
          },
        },
      },
      "types": {
        "Game": {
          "docs": undefined,
          "properties": {
            "added_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "complete": {
              "docs": undefined,
              "type": "GameCompletionInfo",
            },
            "date": {
              "docs": undefined,
              "type": "string",
            },
            "extra_fields": {
              "docs": undefined,
              "type": "list<GameExtraField>",
            },
            "group": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "photos": {
              "docs": undefined,
              "type": "optional<list<GamePhoto>>",
            },
            "room": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "start_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "time": {
              "docs": undefined,
              "type": "string",
            },
            "updated_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "GameCompletionInfo": {
          "docs": undefined,
          "properties": {
            "completed_at": {
              "docs": undefined,
              "type": "string",
            },
            "completion_time": {
              "docs": undefined,
              "type": "integer",
            },
            "did_win": {
              "docs": undefined,
              "type": "boolean",
            },
            "hints": {
              "docs": undefined,
              "type": "integer",
            },
            "score": {
              "docs": undefined,
              "type": "integer",
            },
          },
        },
        "GameExtraField": {
          "docs": undefined,
          "properties": {
            "key": {
              "docs": undefined,
              "type": "string",
            },
            "label": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "present": {
              "docs": undefined,
              "type": "boolean",
            },
            "value": {
              "docs": undefined,
              "type": "map<string, unknown>",
            },
          },
        },
        "GamePhoto": {
          "docs": undefined,
          "properties": {
            "added_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "photo": {
              "docs": undefined,
              "type": "string",
            },
            "processed_image": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "ready": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "Group": {
          "docs": undefined,
          "properties": {
            "added_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "date": {
              "docs": undefined,
              "type": "string",
            },
            "games": {
              "docs": undefined,
              "type": "optional<list<GroupGamesItem>>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "is_event": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "photos": {
              "docs": undefined,
              "type": "optional<list<GroupPhoto>>",
            },
            "players": {
              "docs": undefined,
              "type": "list<GroupPlayer>",
            },
            "start_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "time": {
              "docs": undefined,
              "type": "string",
            },
            "updated_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "GroupGameExtraField": {
          "docs": undefined,
          "properties": {
            "key": {
              "docs": undefined,
              "type": "string",
            },
            "label": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "present": {
              "docs": undefined,
              "type": "boolean",
            },
            "value": {
              "docs": undefined,
              "type": "map<string, unknown>",
            },
          },
        },
        "GroupGamesItem": {
          "docs": undefined,
          "properties": {
            "added_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "complete": {
              "docs": undefined,
              "type": "GameCompletionInfo",
            },
            "date": {
              "docs": undefined,
              "type": "string",
            },
            "extra_fields": {
              "docs": undefined,
              "type": "list<GroupGameExtraField>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "room": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "start_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "time": {
              "docs": undefined,
              "type": "string",
            },
            "updated_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "GroupPhoto": {
          "docs": undefined,
          "properties": {
            "added_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "game": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "photo": {
              "docs": undefined,
              "type": "string",
            },
            "processed_image": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "ready": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "GroupPlayer": {
          "docs": undefined,
          "properties": {
            "added_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "email": {
              "docs": undefined,
              "type": "string",
            },
            "extra_fields": {
              "docs": undefined,
              "type": "list<GroupPlayerExtraField>",
            },
            "first_name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "last_name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "phone": {
              "docs": undefined,
              "type": "string",
            },
            "player": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "signature": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "updated_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "GroupPlayerExtraField": {
          "docs": undefined,
          "properties": {
            "key": {
              "docs": undefined,
              "type": "string",
            },
            "label": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "present": {
              "docs": undefined,
              "type": "boolean",
            },
            "value": {
              "docs": undefined,
              "type": "map<string, unknown>",
            },
          },
        },
        "Photo": {
          "docs": undefined,
          "properties": {
            "added_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "original_image": {
              "docs": undefined,
              "type": "string",
            },
            "processed": {
              "docs": undefined,
              "type": "list<ProcessedPhoto>",
            },
          },
        },
        "Player": {
          "docs": undefined,
          "properties": {
            "added_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "email": {
              "docs": undefined,
              "type": "string",
            },
            "extra_fields": {
              "docs": undefined,
              "type": "list<PlayerExtraField>",
            },
            "first_name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "last_name": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "marketing_email_allowed": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "phone": {
              "docs": undefined,
              "type": "string",
            },
            "updated_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "PlayerExtraField": {
          "docs": undefined,
          "properties": {
            "key": {
              "docs": undefined,
              "type": "string",
            },
            "label": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "present": {
              "docs": undefined,
              "type": "boolean",
            },
            "value": {
              "docs": undefined,
              "type": "map<string, unknown>",
            },
          },
        },
        "ProcessedPhoto": {
          "docs": undefined,
          "properties": {
            "added_at": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "game": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "group": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "photo": {
              "docs": undefined,
              "type": "string",
            },
            "processed_image": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "ready": {
              "docs": undefined,
              "type": "optional<string>",
            },
          },
        },
        "Room": {
          "docs": undefined,
          "properties": {
            "hidden": {
              "docs": undefined,
              "type": "optional<boolean>",
            },
            "id": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "name": {
              "docs": undefined,
              "type": "string",
            },
          },
        },
      },
    },
  },
  "rootApiFile": {
    "auth": "bearer",
    "display-name": "",
    "error-discrimination": {
      "strategy": "status-code",
    },
    "name": "api",
  },
}
`;

exports[`open api converter vellum simple 1`] = `
{
  "definitionFiles": {
    "__package__.yml": {
      "service": {
        "auth": true,
        "base-path": "",
        "endpoints": {
          "generate": {
            "method": "POST",
            "path": "/v1/generate",
            "request": {
              "body": {
                "properties": {
                  "deployment_id": {
                    "docs": "The ID of the deployment. Must provide either this or deployment_name.",
                    "type": "optional<string>",
                  },
                  "deployment_name": {
                    "docs": "The name of the deployment. Must provide either this or deployment_id.",
                    "type": "optional<string>",
                  },
                  "options": {
                    "docs": "Additional configuration that can be used to control what's included in the response.",
                    "type": "optional<GenerateOptionsRequest>",
                  },
                  "requests": {
                    "docs": "The generation requests to make. Supplying multiple will perform a bulk request to the LLM provided when possible.",
                    "type": "list<GenerateRequestRequest>",
                  },
                },
              },
              "name": "GenerateRequestBodyRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "",
              "type": "GenerateResponse",
            },
            "url": "Default",
          },
          "search": {
            "method": "POST",
            "path": "/v1/search",
            "request": {
              "body": {
                "properties": {
                  "index_id": {
                    "docs": "The ID of the index to search against. Must provide either this or index_name.",
                    "type": "optional<string>",
                  },
                  "index_name": {
                    "docs": "The name of the index to search against. Must provide either this or index_id.",
                    "type": "optional<string>",
                  },
                  "options": {
                    "docs": "Configuration options for the search.",
                    "type": "optional<SearchRequestOptionsRequest>",
                  },
                  "query": {
                    "docs": "The query to search for.",
                    "type": "string",
                  },
                },
              },
              "name": "SearchRequestBodyRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "",
              "type": "SearchResponse",
            },
            "url": "Predict",
          },
          "submit-completion-actuals": {
            "method": "POST",
            "path": "/v1/submit-completion-actuals",
            "request": {
              "body": {
                "properties": {
                  "actuals": {
                    "docs": "Feedback regarding the quality of previously generated completions",
                    "type": "list<SubmitCompletionActualRequest>",
                  },
                  "deployment_id": {
                    "docs": "The ID of the deployment. Must provide either this or deployment_name.",
                    "type": "optional<string>",
                  },
                  "deployment_name": {
                    "docs": "The name of the deployment. Must provide either this or deployment_id.",
                    "type": "optional<string>",
                  },
                },
              },
              "name": "SubmitCompletionActualsRequestRequest",
              "query-parameters": undefined,
            },
            "url": "Predict",
          },
        },
      },
      "types": {
        "Document": {
          "docs": undefined,
          "properties": {
            "external_id": {
              "docs": "The unique ID of the document as represented in an external system and specified when it was originally uploaded.",
              "type": "optional<string>",
            },
            "id": {
              "docs": "The ID of the document.",
              "type": "string",
            },
            "label": {
              "docs": "The human-readable name for the document.",
              "type": "string",
            },
          },
        },
        "DocumentDocumentToDocumentIndex": {
          "docs": undefined,
          "properties": {
            "document_index_id": {
              "docs": "Vellum-generated ID that uniquely identifies the index this document is included in.",
              "type": "string",
            },
            "id": {
              "docs": "Vellum-generated ID that uniquely identifies this link.",
              "type": "string",
            },
            "indexing_state": {
              "docs": "An enum value representing where this document is along its indexing lifecycle for this index.",
              "type": "optional<IndexingStateEnum>",
            },
          },
        },
        "EnrichedNormalizedCompletion": {
          "docs": undefined,
          "properties": {
            "external_id": {
              "docs": "The external ID that was originally provided along with the generation request, which uniquely identifies this generation in an external system.",
              "type": "optional<string>",
            },
            "finish_reason": {
              "docs": "The reason the generation finished.",
              "type": "FinishReasonEnum",
            },
            "id": {
              "docs": "The Vellum-generated ID of the completion.",
              "type": "string",
            },
            "logprobs": {
              "docs": "The logprobs of the completion. Only present if specified in the original request options.",
              "type": "optional<NormalizedLogProbs>",
            },
            "model_version_id": {
              "docs": "The ID of the model version used to generate this completion.",
              "type": "string",
            },
            "text": {
              "docs": "The text generated by the LLM.",
              "type": "string",
            },
          },
        },
        "FinishReasonEnum": {
          "docs": undefined,
          "enum": [
            {
              "name": "LENGTH",
              "value": "LENGTH",
            },
            {
              "name": "STOP",
              "value": "STOP",
            },
            {
              "name": "UNKNOWN",
              "value": "UNKNOWN",
            },
          ],
        },
        "GenerateErrorResponse": {
          "docs": undefined,
          "properties": {
            "detail": {
              "docs": "Details about why the request failed.",
              "type": "string",
            },
          },
        },
        "GenerateOptionsRequest": {
          "docs": undefined,
          "properties": {
            "logprobs": {
              "docs": "Which logprobs to include, if any. Defaults to NONE.",
              "type": "optional<LogprobsEnum>",
            },
          },
        },
        "GenerateRequestRequest": {
          "docs": undefined,
          "properties": {
            "external_ids": {
              "docs": "Optionally include a unique identifier for each generation, as represented outside of Vellum. Note that this should generally be a list of length one.",
              "type": "optional<list<string>>",
            },
            "input_values": {
              "docs": "Key/value pairs for each template variable defined in the deployment's prompt.",
              "type": "map<string, unknown>",
            },
          },
        },
        "GenerateResponse": {
          "docs": undefined,
          "properties": {
            "results": {
              "docs": "The results of each generation request.",
              "type": "list<GenerateResult>",
            },
          },
        },
        "GenerateResult": {
          "docs": undefined,
          "properties": {
            "data": {
              "docs": "An object containing the resulting generation. This key will be absent if the LLM provider experienced an error.",
              "type": "optional<GenerateResultData>",
            },
            "error": {
              "docs": "An object containing details about the error that occurred. This key will be absent if the LLM provider did not experience an error.",
              "type": "optional<GenerateResultError>",
            },
          },
        },
        "GenerateResultData": {
          "docs": undefined,
          "properties": {
            "completions": {
              "docs": "The generated completions. This will generally be a list of length one.",
              "type": "list<EnrichedNormalizedCompletion>",
            },
          },
        },
        "GenerateResultError": {
          "docs": undefined,
          "properties": {
            "message": {
              "docs": "The error message returned by the LLM provider.",
              "type": "string",
            },
          },
        },
        "IndexingStateEnum": {
          "docs": undefined,
          "enum": [
            {
              "name": "AWAITING_PROCESSING",
              "value": "AWAITING_PROCESSING",
            },
            {
              "name": "QUEUED",
              "value": "QUEUED",
            },
            {
              "name": "INDEXING",
              "value": "INDEXING",
            },
            {
              "name": "INDEXED",
              "value": "INDEXED",
            },
            {
              "name": "FAILED",
              "value": "FAILED",
            },
          ],
        },
        "LogprobsEnum": {
          "docs": undefined,
          "enum": [
            {
              "name": "ALL",
              "value": "ALL",
            },
            {
              "name": "NONE",
              "value": "NONE",
            },
          ],
        },
        "ModelTypeEnum": {
          "docs": undefined,
          "enum": [
            {
              "name": "GENERATE",
              "value": "GENERATE",
            },
            {
              "name": "CLASSIFY",
              "value": "CLASSIFY",
            },
          ],
        },
        "ModelVersionBuildConfig": {
          "docs": undefined,
          "properties": {
            "base_model": {
              "docs": "The name of the base model used to create this model version, as identified by the LLM provider.",
              "type": "string",
            },
            "sandbox_snapshot": {
              "docs": "Information about the sandbox snapshot that was used to create this model version, if applicable.",
              "type": "optional<ModelVersionSandboxSnapshot>",
            },
          },
        },
        "ModelVersionExecConfigParameters": {
          "docs": undefined,
          "properties": {
            "frequency_penalty": {
              "docs": undefined,
              "type": "double",
            },
            "logit_bias": {
              "docs": undefined,
              "type": "optional<map<string, optional<double>>>",
            },
            "max_tokens": {
              "docs": undefined,
              "type": "integer",
            },
            "presence_penalty": {
              "docs": undefined,
              "type": "double",
            },
            "stop": {
              "docs": undefined,
              "type": "list<string>",
            },
            "temperature": {
              "docs": undefined,
              "type": "double",
            },
            "top_k": {
              "docs": undefined,
              "type": "optional<double>",
            },
            "top_p": {
              "docs": undefined,
              "type": "double",
            },
          },
        },
        "ModelVersionExecConfigRead": {
          "docs": undefined,
          "properties": {
            "input_variables": {
              "docs": "Names of the template variables specified in the prompt template.",
              "type": "list<string>",
            },
            "parameters": {
              "docs": "The generation parameters that are passed to the LLM provider at runtime.",
              "type": "ModelVersionExecConfigParameters",
            },
            "prompt_template": {
              "docs": "The template used to generate prompts for this model version.",
              "type": "string",
            },
          },
        },
        "ModelVersionRead": {
          "docs": undefined,
          "properties": {
            "build_config": {
              "docs": "Configuration used to build this model version.",
              "type": "ModelVersionBuildConfig",
            },
            "created": {
              "docs": "Timestamp of when this model version was created.",
              "type": "string",
            },
            "exec_config": {
              "docs": "Configuration used to execute this model version.",
              "type": "ModelVersionExecConfigRead",
            },
            "external_id": {
              "docs": "The unique id of this model version as it exists in the above provider's system.",
              "type": "string",
            },
            "id": {
              "docs": "Vellum-generated ID that uniquely identifies this model version.",
              "type": "string",
            },
            "label": {
              "docs": "Human-friendly name for this model version.",
              "type": "string",
            },
            "model_type": {
              "docs": "The type of task this model is used for.",
              "type": "ModelTypeEnum",
            },
            "provider": {
              "docs": "Which LLM provider this model version is associated with.",
              "type": "ProviderEnum",
            },
          },
        },
        "ModelVersionSandboxSnapshot": {
          "docs": undefined,
          "properties": {
            "id": {
              "docs": "The ID of the sandbox snapshot.",
              "type": "string",
            },
            "prompt_index": {
              "docs": "The index of the prompt in the sandbox snapshot.",
              "type": "integer",
            },
          },
        },
        "NormalizedLogProbs": {
          "docs": undefined,
          "properties": {
            "likelihood": {
              "docs": undefined,
              "type": "double",
            },
            "tokens": {
              "docs": undefined,
              "type": "list<NormalizedTokenLogProbs>",
            },
          },
        },
        "NormalizedTokenLogProbs": {
          "docs": undefined,
          "properties": {
            "logprob": {
              "docs": undefined,
              "type": "double",
            },
            "text_offset": {
              "docs": undefined,
              "type": "integer",
            },
            "token": {
              "docs": undefined,
              "type": "string",
            },
            "top_logprobs": {
              "docs": undefined,
              "type": "map<string, double>",
            },
          },
        },
        "PaginatedSlimDocumentList": {
          "docs": undefined,
          "properties": {
            "count": {
              "docs": undefined,
              "type": "optional<integer>",
            },
            "next": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "previous": {
              "docs": undefined,
              "type": "optional<string>",
            },
            "results": {
              "docs": undefined,
              "type": "optional<list<SlimDocument>>",
            },
          },
        },
        "ProcessingStateEnum": {
          "docs": undefined,
          "enum": [
            {
              "name": "QUEUED",
              "value": "QUEUED",
            },
            {
              "name": "PROCESSING",
              "value": "PROCESSING",
            },
            {
              "name": "PROCESSED",
              "value": "PROCESSED",
            },
            {
              "name": "FAILED",
              "value": "FAILED",
            },
          ],
        },
        "ProviderEnum": {
          "docs": undefined,
          "enum": [
            {
              "name": "OPENAI",
              "value": "OPENAI",
            },
            {
              "name": "COHERE",
              "value": "COHERE",
            },
            {
              "name": "ANTHROPIC",
              "value": "ANTHROPIC",
            },
          ],
        },
        "SearchErrorResponse": {
          "docs": undefined,
          "properties": {
            "detail": {
              "docs": "Details about why the request failed.",
              "type": "string",
            },
          },
        },
        "SearchFiltersRequest": {
          "docs": undefined,
          "properties": {
            "external_ids": {
              "docs": "The document external IDs to filter by",
              "type": "optional<list<string>>",
            },
          },
        },
        "SearchRequestOptionsRequest": {
          "docs": undefined,
          "properties": {
            "filters": {
              "docs": "The filters to apply to the search.",
              "type": "optional<SearchFiltersRequest>",
            },
            "limit": {
              "docs": "The maximum number of results to return.",
              "type": "optional<integer>",
            },
            "result_merging": {
              "docs": "The configuration for merging results.",
              "type": "optional<SearchResultMergingRequest>",
            },
            "weights": {
              "docs": "The weights to use for the search. Must add up to 1.0.",
              "type": "optional<SearchWeightsRequest>",
            },
          },
        },
        "SearchResponse": {
          "docs": undefined,
          "properties": {
            "results": {
              "docs": "The results of the search. Each result represents a chunk that matches the search query.",
              "type": "list<SearchResult>",
            },
          },
        },
        "SearchResult": {
          "docs": undefined,
          "properties": {
            "document": {
              "docs": "The document that contains the chunk that matched the search query.",
              "type": "Document",
            },
            "keywords": {
              "docs": undefined,
              "type": "list<string>",
            },
            "score": {
              "docs": "A score representing how well the chunk matches the search query.",
              "type": "double",
            },
            "text": {
              "docs": "The text of the chunk that matched the search query.",
              "type": "string",
            },
          },
        },
        "SearchResultMergingRequest": {
          "docs": undefined,
          "properties": {
            "enabled": {
              "docs": "Whether to enable merging results",
              "type": "boolean",
            },
          },
        },
        "SearchWeightsRequest": {
          "docs": undefined,
          "properties": {
            "keywords": {
              "docs": "The relative weight to give to keyword matches",
              "type": "double",
            },
            "semantic_similarity": {
              "docs": "The relative weight to give to semantic similarity",
              "type": "double",
            },
          },
        },
        "SlimDocument": {
          "docs": undefined,
          "properties": {
            "document_to_document_indexes": {
              "docs": undefined,
              "type": "list<DocumentDocumentToDocumentIndex>",
            },
            "external_id": {
              "docs": "The external ID that was originally provided when uploading the document.",
              "type": "optional<string>",
            },
            "id": {
              "docs": "Vellum-generated ID that uniquely identifies this document.",
              "type": "string",
            },
            "keywords": {
              "docs": "A list of keywords associated with this document. Originally provided when uploading the document.",
              "type": "optional<list<string>>",
            },
            "label": {
              "docs": "Human-friendly name for this document.",
              "type": "string",
            },
            "last_uploaded_at": {
              "docs": "A timestamp representing when this document was most recently uploaded.",
              "type": "string",
            },
            "processing_state": {
              "docs": "The current processing state of the document",
              "type": "optional<ProcessingStateEnum>",
            },
            "status": {
              "docs": "The document's current status.",
              "type": "optional<StatusEnum>",
            },
          },
        },
        "StatusEnum": {
          "docs": undefined,
          "enum": [
            {
              "name": "ACTIVE",
              "value": "ACTIVE",
            },
          ],
        },
        "SubmitCompletionActualRequest": {
          "docs": undefined,
          "properties": {
            "external_id": {
              "docs": "The external ID that was originally provided when generating the completion that you'd now like to submit actuals for. Must provide either this or id.",
              "type": "optional<string>",
            },
            "id": {
              "docs": "The Vellum-generated ID of a previously generated completion. Must provide either this or external_id.",
              "type": "optional<string>",
            },
            "quality": {
              "docs": "A number between 0 and 1 representing the quality of the completion. 0 is the worst, 1 is the best.",
              "type": "optional<double>",
            },
            "text": {
              "docs": "Text representing what the completion _should_ have been.",
              "type": "optional<string>",
            },
            "timestamp": {
              "docs": "Optionally provide the timestamp representing when this feedback was collected. Used for reporting purposes.",
              "type": "optional<string>",
            },
          },
        },
        "SubmitCompletionActualsErrorResponse": {
          "docs": undefined,
          "properties": {
            "detail": {
              "docs": undefined,
              "type": "string",
            },
          },
        },
        "UploadDocumentErrorResponse": {
          "docs": undefined,
          "properties": {
            "detail": {
              "docs": undefined,
              "type": "string",
            },
          },
        },
        "UploadDocumentResponse": {
          "docs": undefined,
          "properties": {
            "document_id": {
              "docs": "The ID of the newly created document.",
              "type": "string",
            },
          },
        },
      },
    },
    "documents": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": true,
        "base-path": "",
        "endpoints": {
          "list": {
            "method": "GET",
            "path": "/v1/documents",
            "request": {
              "name": "ListDocumentsRequest",
              "query-parameters": {
                "document_index_id": {
                  "docs": undefined,
                  "type": "optional<string>",
                },
                "limit": {
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "offset": {
                  "docs": undefined,
                  "type": "optional<integer>",
                },
                "ordering": {
                  "docs": undefined,
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "",
              "type": "root.PaginatedSlimDocumentList",
            },
            "url": "Default",
          },
          "upload": {
            "method": "POST",
            "path": "/v1/upload-document",
            "request": {
              "body": {
                "properties": {
                  "add_to_index_names": {
                    "docs": "Optionally include the names of all indexes that you'd like this document to be included in",
                    "type": "list<string>",
                  },
                  "contents": "file",
                  "external_id": {
                    "docs": "Optionally include an external ID for this document. This is useful if you want to re-upload the same document later when its contents change and would like it to be re-indexed.",
                    "type": "string",
                  },
                  "keywords": {
                    "docs": "Optionally include a list of keywords that'll be associated with this document. Used when performing keyword searches.",
                    "type": "list<string>",
                  },
                  "label": {
                    "docs": "A human-friendly name for this document. Typically the filename.",
                    "type": "string",
                  },
                },
              },
              "name": "UploadDocumentRequestBodyRequest",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "",
              "type": "root.UploadDocumentResponse",
            },
            "url": "Documents",
          },
        },
      },
    },
    "model_versions": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": true,
        "base-path": "",
        "endpoints": {
          "retrieve": {
            "method": "GET",
            "path": "/v1/model-versions/{id}",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "",
              "type": "root.ModelVersionRead",
            },
            "url": "Default",
          },
        },
      },
    },
  },
  "rootApiFile": {
    "auth": "apiKeyAuth",
    "auth-schemes": {
      "apiKeyAuth": {
        "header": "X_API_KEY",
        "name": "apiKey",
        "type": "string",
      },
    },
    "default-environment": "Production",
    "display-name": "Vellum Client API",
    "environments": {
      "Production": {
        "urls": {
          "Default": "https://api.vellum.ai",
          "Documents": "https://documents.vellum.ai",
          "Predict": "https://predict.vellum.ai",
        },
      },
    },
    "error-discrimination": {
      "strategy": "status-code",
    },
    "name": "api",
  },
}
`;
