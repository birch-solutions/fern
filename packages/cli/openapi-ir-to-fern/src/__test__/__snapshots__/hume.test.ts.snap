// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`open api parser hume simple 1`] = `
{
  "definitionFiles": {
    "getJobPredictions.yml": {
      "imports": {
        "package": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "display-name": "Get Job Predictions",
        "endpoints": {
          "get_job": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Get Job Details",
            "docs": "Get the request details and state of a given job.",
            "errors": [],
            "method": "GET",
            "path": "/v0/batch/jobs/{id}",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "",
              "type": "package.JobRequest",
            },
          },
          "get_job_artifacts": {
            "audiences": [
              "external",
            ],
            "auth": true,
            "display-name": "Get Job Artifacts",
            "docs": "Get the artifacts ZIP of a completed job.",
            "errors": [],
            "method": "GET",
            "path": "/v0/batch/jobs/{id}/artifacts",
            "path-parameters": {
              "id": {
                "docs": undefined,
                "type": "string",
              },
            },
            "response": {
              "docs": "",
              "type": "file",
            },
          },
        },
      },
    },
  },
  "packageMarkerFile": {
    "service": {
      "auth": false,
      "base-path": "",
      "endpoints": {
        "Get Job Predictions": {
          "audiences": [
            "external",
          ],
          "auth": true,
          "display-name": "Get Job Predictions",
          "docs": "Get the JSON predictions of a completed job.",
          "errors": [],
          "examples": [
            {
              "headers": undefined,
              "path-parameters": {
                "id": "id",
              },
              "query-parameters": undefined,
              "request": undefined,
              "response": {
                "body": [],
              },
            },
          ],
          "method": "GET",
          "path": "/v0/batch/jobs/{id}/predictions",
          "path-parameters": {
            "id": {
              "docs": undefined,
              "type": "string",
            },
          },
          "response": {
            "docs": "",
            "type": "list<SourceResult>",
          },
        },
        "List Jobs": {
          "audiences": [
            "external",
          ],
          "auth": true,
          "display-name": "List Jobs",
          "docs": "Sort and filter jobs.",
          "errors": [],
          "examples": [
            {
              "headers": undefined,
              "path-parameters": undefined,
              "query-parameters": {
                "direction": "asc",
                "sort_by": "created",
                "status": "QUEUED",
                "when": "created_before",
              },
              "request": undefined,
              "response": {
                "body": [],
              },
            },
          ],
          "method": "GET",
          "path": "/v0/batch/jobs",
          "request": {
            "name": "ListJobsRequest",
            "query-parameters": {
              "direction": {
                "allow-multiple": undefined,
                "docs": "The sort direction.",
                "type": "optional<Direction>",
              },
              "limit": {
                "allow-multiple": undefined,
                "docs": "The maximum number of jobs to include in the response.",
                "type": "optional<integer>",
              },
              "sort_by": {
                "allow-multiple": undefined,
                "docs": "The job timestamp to sort by.",
                "type": "optional<SortBy>",
              },
              "status": {
                "allow-multiple": true,
                "docs": "Include only jobs with these statuses.",
                "type": "optional<Status>",
              },
              "timestamp_ms": {
                "allow-multiple": undefined,
                "docs": "Defaults to the current date and time. See \`when\`.",
                "type": "optional<integer>",
              },
              "when": {
                "allow-multiple": undefined,
                "docs": "Include only jobs that were created before or after \`timestamp_ms\`.",
                "type": "optional<When>",
              },
            },
          },
          "response": {
            "docs": "",
            "type": "list<JobRequest>",
          },
        },
        "Start Job": {
          "audiences": [
            "external",
          ],
          "auth": true,
          "display-name": "Start Job",
          "docs": "Start a new batch job.",
          "errors": [],
          "method": "POST",
          "path": "/v0/batch/jobs",
          "request": {
            "body": {
              "properties": {
                "callback_url": "optional<string>",
                "models": "optional<Models>",
                "notify": "optional<boolean>",
                "transcription": "optional<Transcription>",
                "urls": "optional<list<string>>",
              },
            },
            "headers": undefined,
            "name": "BaseRequest",
            "query-parameters": undefined,
          },
          "response": {
            "docs": "",
            "type": "JobId",
          },
        },
      },
    },
    "types": {
      "Bcp47Tag": {
        "docs": undefined,
        "enum": [
          {
            "docs": undefined,
            "name": "zh",
            "value": "zh",
          },
          {
            "docs": undefined,
            "name": "da",
            "value": "da",
          },
          {
            "docs": undefined,
            "name": "nl",
            "value": "nl",
          },
          {
            "docs": undefined,
            "name": "en",
            "value": "en",
          },
          {
            "docs": undefined,
            "name": "EnAu",
            "value": "en-AU",
          },
          {
            "docs": undefined,
            "name": "EnIn",
            "value": "en-IN",
          },
          {
            "docs": undefined,
            "name": "EnNz",
            "value": "en-NZ",
          },
          {
            "docs": undefined,
            "name": "EnGb",
            "value": "en-GB",
          },
          {
            "docs": undefined,
            "name": "fr",
            "value": "fr",
          },
          {
            "docs": undefined,
            "name": "FrCa",
            "value": "fr-CA",
          },
          {
            "docs": undefined,
            "name": "de",
            "value": "de",
          },
          {
            "docs": undefined,
            "name": "hi",
            "value": "hi",
          },
          {
            "docs": undefined,
            "name": "HiLatn",
            "value": "hi-Latn",
          },
          {
            "docs": undefined,
            "name": "id",
            "value": "id",
          },
          {
            "docs": undefined,
            "name": "it",
            "value": "it",
          },
          {
            "docs": undefined,
            "name": "ja",
            "value": "ja",
          },
          {
            "docs": undefined,
            "name": "ko",
            "value": "ko",
          },
          {
            "docs": undefined,
            "name": "no",
            "value": "no",
          },
          {
            "docs": undefined,
            "name": "pl",
            "value": "pl",
          },
          {
            "docs": undefined,
            "name": "pt",
            "value": "pt",
          },
          {
            "docs": undefined,
            "name": "PtBr",
            "value": "pt-BR",
          },
          {
            "docs": undefined,
            "name": "PtPt",
            "value": "pt-PT",
          },
          {
            "docs": undefined,
            "name": "ru",
            "value": "ru",
          },
          {
            "docs": undefined,
            "name": "es",
            "value": "es",
          },
          {
            "docs": undefined,
            "name": "Es419",
            "value": "es-419",
          },
          {
            "docs": undefined,
            "name": "sv",
            "value": "sv",
          },
          {
            "docs": undefined,
            "name": "ta",
            "value": "ta",
          },
          {
            "docs": undefined,
            "name": "tr",
            "value": "tr",
          },
          {
            "docs": undefined,
            "name": "uk",
            "value": "uk",
          },
        ],
      },
      "BoundingBox": {
        "docs": "A bounding box around a face.",
        "properties": {
          "h": {
            "docs": "Bounding box height.",
            "type": "double",
          },
          "w": {
            "docs": "Bounding box width.",
            "type": "double",
          },
          "x": {
            "docs": "x-coordinate of bounding box top left corner.",
            "type": "double",
          },
          "y": {
            "docs": "y-coordinate of bounding box top left corner.",
            "type": "double",
          },
        },
      },
      "BurstPrediction": {
        "docs": undefined,
        "properties": {
          "descriptions": {
            "docs": "Modality-specific descriptive features and their scores.",
            "type": "list<DescriptionsScore>",
          },
          "emotions": {
            "docs": "A high-dimensional embedding in emotion space.",
            "type": "list<EmotionScore>",
          },
          "time": "TimeInterval",
        },
      },
      "Completed": {
        "docs": undefined,
        "properties": {
          "created_timestamp_ms": {
            "docs": "When this job was created (Unix timestamp in milliseconds).",
            "type": "integer",
          },
          "ended_timestamp_ms": {
            "docs": "When this job ended (Unix timestamp in milliseconds).",
            "type": "integer",
          },
          "num_errors": {
            "docs": "The number of errors that occurred while running this job.",
            "type": "integer",
          },
          "num_predictions": {
            "docs": "The number of predictions that were generated by this job.",
            "type": "integer",
          },
          "started_timestamp_ms": {
            "docs": "When this job started (Unix timestamp in milliseconds).",
            "type": "integer",
          },
        },
      },
      "DescriptionsScore": {
        "docs": undefined,
        "properties": {
          "name": {
            "docs": "Name of the descriptive feature being expressed.",
            "type": "string",
          },
          "score": {
            "docs": "Embedding value for the descriptive feature being expressed.",
            "type": "string",
          },
        },
      },
      "Direction": {
        "docs": undefined,
        "enum": [
          {
            "docs": undefined,
            "name": "asc",
            "value": "asc",
          },
          {
            "docs": undefined,
            "name": "desc",
            "value": "desc",
          },
        ],
      },
      "EmotionScore": {
        "docs": undefined,
        "properties": {
          "name": {
            "docs": "Name of the emotion being expressed.",
            "type": "string",
          },
          "score": {
            "docs": "Embedding value for the emotion being expressed.",
            "type": "string",
          },
        },
      },
      "Empty": {
        "docs": "To include predictions for this model type, set this field to \`{}\`. It is currently not configurable further.",
        "type": "map<string, unknown>",
      },
      "Error": {
        "docs": undefined,
        "properties": {
          "file": {
            "docs": "A file path relative to the top level source URL or file.",
            "type": "string",
          },
          "message": {
            "docs": "An error message.",
            "type": "string",
          },
        },
      },
      "Face": {
        "docs": undefined,
        "properties": {
          "descriptions": "optional<Empty>",
          "facs": "optional<Empty>",
          "fps_pred": "optional<double>",
          "identify_faces": "optional<boolean>",
          "min_face_size": "optional<integer>",
          "prob_threshold": "optional<double>",
          "save_faces": "optional<boolean>",
        },
      },
      "FacePrediction": {
        "docs": undefined,
        "properties": {
          "box": "BoundingBox",
          "descriptions": "optional<list<DescriptionsScore>>",
          "emotions": {
            "docs": "A high-dimensional embedding in emotion space.",
            "type": "list<EmotionScore>",
          },
          "facs": "optional<list<FacsScore>>",
          "frame": {
            "docs": "Frame number",
            "type": "integer",
          },
          "prob": {
            "docs": "The predicted probability that a detected face was actually a face.",
            "type": "double",
          },
          "time": {
            "docs": "Time in seconds when face detection occurred.",
            "type": "double",
          },
        },
      },
      "FacemeshPrediction": {
        "docs": undefined,
        "properties": {
          "emotions": {
            "docs": "A high-dimensional embedding in emotion space.",
            "type": "list<EmotionScore>",
          },
        },
      },
      "FacsScore": {
        "docs": undefined,
        "properties": {
          "name": {
            "docs": "Name of the FACS 2.0 feature being expressed.",
            "type": "string",
          },
          "score": {
            "docs": "Embedding value for the FACS 2.0 feature being expressed.",
            "type": "string",
          },
        },
      },
      "Failed": {
        "docs": undefined,
        "properties": {
          "created_timestamp_ms": {
            "docs": "When this job was created (Unix timestamp in milliseconds).",
            "type": "integer",
          },
          "ended_timestamp_ms": {
            "docs": "When this job ended (Unix timestamp in milliseconds).",
            "type": "integer",
          },
          "message": {
            "docs": "An error message.",
            "type": "string",
          },
          "started_timestamp_ms": {
            "docs": "When this job started (Unix timestamp in milliseconds).",
            "type": "integer",
          },
        },
      },
      "File": {
        "docs": undefined,
        "properties": {
          "content_type": "optional<string>",
          "filename": "optional<string>",
          "md5sum": {
            "docs": "The MD5 checksum of the file.",
            "type": "string",
          },
        },
      },
      "Granularity": {
        "docs": "The granularity at which to generate predictions. \`utterance\` corresponds to a natural pause or break in conversation, while \`conversational_turn\` corresponds to a change in speaker.",
        "enum": [
          {
            "docs": undefined,
            "name": "word",
            "value": "word",
          },
          {
            "docs": undefined,
            "name": "sentence",
            "value": "sentence",
          },
          {
            "docs": undefined,
            "name": "utterance",
            "value": "utterance",
          },
          {
            "docs": undefined,
            "name": "conversational_turn",
            "value": "conversational_turn",
          },
        ],
      },
      "GroupedPredictionsBurstPrediction": {
        "docs": undefined,
        "properties": {
          "id": {
            "docs": "An automatically generated label to identify individuals in your media file. Will be \`unknown\` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
            "type": "string",
          },
          "predictions": "list<BurstPrediction>",
        },
      },
      "GroupedPredictionsFacePrediction": {
        "docs": undefined,
        "properties": {
          "id": {
            "docs": "An automatically generated label to identify individuals in your media file. Will be \`unknown\` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
            "type": "string",
          },
          "predictions": "list<FacePrediction>",
        },
      },
      "GroupedPredictionsFacemeshPrediction": {
        "docs": undefined,
        "properties": {
          "id": {
            "docs": "An automatically generated label to identify individuals in your media file. Will be \`unknown\` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
            "type": "string",
          },
          "predictions": "list<FacemeshPrediction>",
        },
      },
      "GroupedPredictionsLanguagePrediction": {
        "docs": undefined,
        "properties": {
          "id": {
            "docs": "An automatically generated label to identify individuals in your media file. Will be \`unknown\` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
            "type": "string",
          },
          "predictions": "list<LanguagePrediction>",
        },
      },
      "GroupedPredictionsNerPrediction": {
        "docs": undefined,
        "properties": {
          "id": {
            "docs": "An automatically generated label to identify individuals in your media file. Will be \`unknown\` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
            "type": "string",
          },
          "predictions": "list<NerPrediction>",
        },
      },
      "GroupedPredictionsProsodyPrediction": {
        "docs": undefined,
        "properties": {
          "id": {
            "docs": "An automatically generated label to identify individuals in your media file. Will be \`unknown\` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
            "type": "string",
          },
          "predictions": "list<ProsodyPrediction>",
        },
      },
      "InProgress": {
        "docs": undefined,
        "properties": {
          "created_timestamp_ms": {
            "docs": "When this job was created (Unix timestamp in milliseconds).",
            "type": "integer",
          },
          "started_timestamp_ms": {
            "docs": "When this job started (Unix timestamp in milliseconds).",
            "type": "integer",
          },
        },
      },
      "JobId": {
        "docs": undefined,
        "properties": {
          "job_id": {
            "docs": "The ID of the started job.",
            "type": "string",
          },
        },
      },
      "JobRequest": {
        "docs": undefined,
        "properties": {
          "job_id": {
            "docs": "The ID associated with this job.",
            "type": "string",
          },
          "request": "Request",
          "state": "State",
          "user_id": {
            "docs": "Your user ID.",
            "type": "string",
          },
        },
      },
      "Language": {
        "docs": undefined,
        "properties": {
          "granularity": "optional<Granularity>",
          "identify_speakers": "optional<boolean>",
          "sentiment": "optional<Empty>",
          "toxicity": "optional<Empty>",
        },
      },
      "LanguagePrediction": {
        "docs": undefined,
        "properties": {
          "confidence": "optional<double>",
          "emotions": {
            "docs": "A high-dimensional embedding in emotion space.",
            "type": "list<EmotionScore>",
          },
          "position": "PositionInterval",
          "sentiment": "optional<list<SentimentScore>>",
          "speaker_confidence": "optional<double>",
          "text": {
            "docs": "A segment of text (like a word or a sentence).",
            "type": "string",
          },
          "time": "optional<TimeInterval>",
          "toxicity": "optional<list<ToxicityScore>>",
        },
      },
      "Models": {
        "docs": undefined,
        "properties": {
          "burst": "optional<Empty>",
          "face": "optional<Face>",
          "facemesh": "optional<Empty>",
          "language": "optional<Language>",
          "ner": "optional<Ner>",
          "prosody": "optional<Prosody>",
        },
      },
      "ModelsPredictions": {
        "docs": undefined,
        "properties": {
          "burst": "optional<PredictionsOptionalNullBurstPrediction>",
          "face": "optional<PredictionsOptionalNullFacePrediction>",
          "facemesh": "optional<PredictionsOptionalNullFacemeshPrediction>",
          "language": "optional<PredictionsOptionalTranscriptionMetadataLanguagePrediction>",
          "ner": "optional<PredictionsOptionalTranscriptionMetadataNerPrediction>",
          "prosody": "optional<PredictionsOptionalTranscriptionMetadataProsodyPrediction>",
        },
      },
      "Ner": {
        "docs": undefined,
        "properties": {
          "identify_speakers": "optional<boolean>",
        },
      },
      "NerPrediction": {
        "docs": undefined,
        "properties": {
          "confidence": "optional<double>",
          "emotions": {
            "docs": "A high-dimensional embedding in emotion space.",
            "type": "list<EmotionScore>",
          },
          "entity": {
            "docs": "The recognized topic or entity.",
            "type": "string",
          },
          "entity_confidence": {
            "docs": "Our NER model's relative confidence in the recognized topic or entity.",
            "type": "double",
          },
          "link_word": {
            "docs": "The specific word to which the emotion predictions are linked.",
            "type": "string",
          },
          "position": "PositionInterval",
          "speaker_confidence": "optional<double>",
          "support": {
            "docs": "A measure of how often the entity is linked to by other entities.",
            "type": "double",
          },
          "time": "optional<TimeInterval>",
          "uri": {
            "docs": "A URL which provides more information about the recognized topic or entity.",
            "type": "string",
          },
        },
      },
      "Null": {
        "docs": "No associated metadata for this model. Value will be \`null\`.",
        "type": "map<string, unknown>",
      },
      "PositionInterval": {
        "docs": "Position of a segment of text within a larger document, measured in characters. Uses zero-based indexing. The beginning index is inclusive and the end index is exclusive.",
        "properties": {
          "begin": {
            "docs": "The index of the first character in the text segment, inclusive.",
            "type": "integer",
          },
          "end": {
            "docs": "The index of the last character in the text segment, exclusive.",
            "type": "integer",
          },
        },
      },
      "Prediction": {
        "docs": undefined,
        "properties": {
          "file": {
            "docs": "A file path relative to the top level source URL or file.",
            "type": "string",
          },
          "models": "ModelsPredictions",
        },
      },
      "PredictionsOptionalNullBurstPrediction": {
        "docs": undefined,
        "properties": {
          "grouped_predictions": "list<GroupedPredictionsBurstPrediction>",
          "metadata": "optional<Null>",
        },
      },
      "PredictionsOptionalNullFacePrediction": {
        "docs": undefined,
        "properties": {
          "grouped_predictions": "list<GroupedPredictionsFacePrediction>",
          "metadata": "optional<Null>",
        },
      },
      "PredictionsOptionalNullFacemeshPrediction": {
        "docs": undefined,
        "properties": {
          "grouped_predictions": "list<GroupedPredictionsFacemeshPrediction>",
          "metadata": "optional<Null>",
        },
      },
      "PredictionsOptionalTranscriptionMetadataLanguagePrediction": {
        "docs": undefined,
        "properties": {
          "grouped_predictions": "list<GroupedPredictionsLanguagePrediction>",
          "metadata": "optional<TranscriptionMetadata>",
        },
      },
      "PredictionsOptionalTranscriptionMetadataNerPrediction": {
        "docs": undefined,
        "properties": {
          "grouped_predictions": "list<GroupedPredictionsNerPrediction>",
          "metadata": "optional<TranscriptionMetadata>",
        },
      },
      "PredictionsOptionalTranscriptionMetadataProsodyPrediction": {
        "docs": undefined,
        "properties": {
          "grouped_predictions": "list<GroupedPredictionsProsodyPrediction>",
          "metadata": "optional<TranscriptionMetadata>",
        },
      },
      "Prosody": {
        "docs": "NOTE: the \`granularity\` field is ignored if transcription is not enabled or if the \`window\` field has been set.",
        "properties": {
          "granularity": "optional<Granularity>",
          "identify_speakers": "optional<boolean>",
          "window": "optional<Window>",
        },
      },
      "ProsodyPrediction": {
        "docs": undefined,
        "properties": {
          "confidence": "optional<double>",
          "emotions": {
            "docs": "A high-dimensional embedding in emotion space.",
            "type": "list<EmotionScore>",
          },
          "speaker_confidence": "optional<double>",
          "text": "optional<string>",
          "time": "TimeInterval",
        },
      },
      "Queued": {
        "docs": undefined,
        "properties": {
          "created_timestamp_ms": {
            "docs": "When this job was created (Unix timestamp in milliseconds).",
            "type": "integer",
          },
        },
      },
      "Request": {
        "docs": undefined,
        "properties": {
          "callback_url": "optional<string>",
          "files": "list<File>",
          "models": "optional<Models>",
          "notify": "optional<boolean>",
          "transcription": "optional<Transcription>",
          "urls": "optional<list<string>>",
        },
      },
      "Results": {
        "docs": undefined,
        "properties": {
          "errors": "list<Error>",
          "predictions": "list<Prediction>",
        },
      },
      "SentimentScore": {
        "docs": undefined,
        "properties": {
          "name": {
            "docs": "Level of sentiment, ranging from \`1\` (negative) to \`9\` (positive)",
            "type": "string",
          },
          "score": {
            "docs": "Prediction for this level of sentiment",
            "type": "string",
          },
        },
      },
      "SortBy": {
        "docs": undefined,
        "enum": [
          {
            "docs": undefined,
            "name": "created",
            "value": "created",
          },
          {
            "docs": undefined,
            "name": "started",
            "value": "started",
          },
          {
            "docs": undefined,
            "name": "ended",
            "value": "ended",
          },
        ],
      },
      "Source": {
        "base-properties": {},
        "discriminant": "type",
        "docs": undefined,
        "union": {
          "file": "SourceFile",
          "url": "SourceUrl",
        },
      },
      "SourceFile": {
        "docs": undefined,
        "extends": [
          "File",
        ],
        "properties": {},
      },
      "SourceResult": {
        "docs": undefined,
        "properties": {
          "error": "optional<string>",
          "results": "optional<Results>",
          "source": "Source",
        },
      },
      "SourceUrl": {
        "docs": undefined,
        "extends": [
          "Url",
        ],
        "properties": {},
      },
      "State": {
        "base-properties": {},
        "discriminant": "status",
        "docs": undefined,
        "union": {
          "COMPLETED": "StateCompleted",
          "FAILED": "StateFailed",
          "IN_PROGRESS": "StateInProgress",
          "QUEUED": "StateQueued",
        },
      },
      "StateCompleted": {
        "docs": undefined,
        "extends": [
          "Completed",
        ],
        "properties": {},
      },
      "StateFailed": {
        "docs": undefined,
        "extends": [
          "Failed",
        ],
        "properties": {},
      },
      "StateInProgress": {
        "docs": undefined,
        "extends": [
          "InProgress",
        ],
        "properties": {},
      },
      "StateQueued": {
        "docs": undefined,
        "extends": [
          "Queued",
        ],
        "properties": {},
      },
      "Status": {
        "docs": undefined,
        "enum": [
          {
            "docs": undefined,
            "name": "QUEUED",
            "value": "QUEUED",
          },
          {
            "docs": undefined,
            "name": "IN_PROGRESS",
            "value": "IN_PROGRESS",
          },
          {
            "docs": undefined,
            "name": "COMPLETED",
            "value": "COMPLETED",
          },
          {
            "docs": undefined,
            "name": "FAILED",
            "value": "FAILED",
          },
        ],
      },
      "TimeInterval": {
        "docs": "A time range with a beginning and end, measured in seconds.",
        "properties": {
          "begin": {
            "docs": "Beginning of time range in seconds.",
            "type": "double",
          },
          "end": {
            "docs": "End of time range in seconds.",
            "type": "double",
          },
        },
      },
      "ToxicityScore": {
        "docs": undefined,
        "properties": {
          "name": {
            "docs": "Category of toxicity.",
            "type": "string",
          },
          "score": {
            "docs": "Prediction for this category of toxicity",
            "type": "string",
          },
        },
      },
      "Transcription": {
        "docs": undefined,
        "properties": {
          "language": "optional<Bcp47Tag>",
        },
      },
      "TranscriptionMetadata": {
        "docs": "Transcription metadata for your media file.",
        "properties": {
          "confidence": {
            "docs": "Value between \`0.0\` and \`1.0\` indicating our transcription model’s relative confidence in the transcription of your media file.",
            "type": "double",
          },
          "detected_language": "optional<Bcp47Tag>",
        },
      },
      "Url": {
        "docs": undefined,
        "properties": {
          "url": {
            "docs": "The URL of the source media file.",
            "type": "string",
          },
        },
      },
      "When": {
        "docs": undefined,
        "enum": [
          {
            "docs": undefined,
            "name": "created_before",
            "value": "created_before",
          },
          {
            "docs": undefined,
            "name": "created_after",
            "value": "created_after",
          },
        ],
      },
      "Window": {
        "docs": undefined,
        "properties": {
          "length": "optional<double>",
          "step": "optional<double>",
        },
      },
    },
  },
  "rootApiFile": {
    "auth": "Authentication",
    "auth-schemes": {
      "Authentication": {
        "header": "X-Hume-Api-Key",
        "name": "apiKey",
        "prefix": undefined,
        "type": "string",
      },
    },
    "default-environment": "default",
    "display-name": "Hume AI Batch API",
    "environments": {
      "default": "https://api.hume.ai",
    },
    "error-discrimination": {
      "strategy": "status-code",
    },
    "name": "api",
  },
}
`;
