---
openapi: 3.0.3
info:
  title: Generative Language API
  description: The Gemini API allows developers to build generative AI applications
    using Gemini models. Gemini is our most capable model, built from the ground up
    to be multimodal. It can generalize and seamlessly understand, operate across,
    and combine different types of information including language, images, audio,
    video, and code. You can use the Gemini API for use cases like reasoning across
    text and images, content generation, dialogue agents, summarization and classification
    systems, and more.
  version: v1
servers:
- url: https://generativelanguage.googleapis.com
  description: Global Endpoint
paths:
  "/v1/models/{model}:generateContent":
    parameters:
    - "$ref": "#/components/parameters/alt"
    - "$ref": "#/components/parameters/callback"
    - "$ref": "#/components/parameters/prettyPrint"
    - "$ref": "#/components/parameters/_.xgafv"
    post:
      tags:
      - generativelanguage
      operationId: GenerateContent
      description: |-
        Generates a response from the model given an input
        `GenerateContentRequest`.

        Input capabilities differ between models, including tuned models. See the
        [model guide](https://ai.google.dev/models/gemini) and
        [tuning guide](https://ai.google.dev/docs/model_tuning_guidance) for
        details.
      parameters:
      - name: model
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The request body.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/GenerateContentRequest"
      responses:
        default:
          description: Successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/GenerateContentResponse"
  "/v1/tunedModels/{tunedModel}:generateContent":
    parameters:
    - "$ref": "#/components/parameters/alt"
    - "$ref": "#/components/parameters/callback"
    - "$ref": "#/components/parameters/prettyPrint"
    - "$ref": "#/components/parameters/_.xgafv"
    post:
      tags:
      - generativelanguage
      operationId: GenerateContentByTunedModel
      description: |-
        Generates a response from the model given an input
        `GenerateContentRequest`.

        Input capabilities differ between models, including tuned models. See the
        [model guide](https://ai.google.dev/models/gemini) and
        [tuning guide](https://ai.google.dev/docs/model_tuning_guidance) for
        details.
      parameters:
      - name: tunedModel
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The request body.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/GenerateContentRequest"
      responses:
        default:
          description: Successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/GenerateContentResponse"
  "/v1/models/{model}:streamGenerateContent":
    parameters:
    - "$ref": "#/components/parameters/alt"
    - "$ref": "#/components/parameters/callback"
    - "$ref": "#/components/parameters/prettyPrint"
    - "$ref": "#/components/parameters/_.xgafv"
    post:
      tags:
      - generativelanguage
      operationId: StreamGenerateContent
      description: |-
        Generates a streamed response from the model given an input
        `GenerateContentRequest`.
      parameters:
      - name: model
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The request body.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/GenerateContentRequest"
      responses:
        default:
          description: Successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/GenerateContentResponse"
  "/v1/models/{model}:embedContent":
    parameters:
    - "$ref": "#/components/parameters/alt"
    - "$ref": "#/components/parameters/callback"
    - "$ref": "#/components/parameters/prettyPrint"
    - "$ref": "#/components/parameters/_.xgafv"
    post:
      tags:
      - generativelanguage
      operationId: EmbedContent
      description: Generates an embedding from the model given an input `Content`.
      parameters:
      - name: model
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The request body.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/EmbedContentRequest"
      responses:
        default:
          description: Successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/EmbedContentResponse"
  "/v1/models/{model}:batchEmbedContents":
    parameters:
    - "$ref": "#/components/parameters/alt"
    - "$ref": "#/components/parameters/callback"
    - "$ref": "#/components/parameters/prettyPrint"
    - "$ref": "#/components/parameters/_.xgafv"
    post:
      tags:
      - generativelanguage
      operationId: BatchEmbedContents
      description: |-
        Generates multiple embeddings from the model given input text in a
        synchronous call.
      parameters:
      - name: model
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The request body.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/BatchEmbedContentsRequest"
      responses:
        default:
          description: Successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/BatchEmbedContentsResponse"
  "/v1/models/{model}:countTokens":
    parameters:
    - "$ref": "#/components/parameters/alt"
    - "$ref": "#/components/parameters/callback"
    - "$ref": "#/components/parameters/prettyPrint"
    - "$ref": "#/components/parameters/_.xgafv"
    post:
      tags:
      - generativelanguage
      operationId: CountTokens
      description: Runs a model's tokenizer on input content and returns the token
        count.
      parameters:
      - name: model
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The request body.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CountTokensRequest"
      responses:
        default:
          description: Successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CountTokensResponse"
  "/v1/operations":
    parameters:
    - "$ref": "#/components/parameters/alt"
    - "$ref": "#/components/parameters/callback"
    - "$ref": "#/components/parameters/prettyPrint"
    - "$ref": "#/components/parameters/_.xgafv"
    get:
      tags:
      - generativelanguage
      operationId: ListOperations
      description: |-
        Lists operations that match the specified filter in the request. If the
        server doesn't support this method, it returns `UNIMPLEMENTED`.
      parameters:
      - name: filter
        description: The standard list filter.
        in: query
        schema:
          type: string
      - name: pageSize
        description: The standard list page size.
        in: query
        schema:
          type: integer
          format: int32
      - name: pageToken
        description: The standard list page token.
        in: query
        schema:
          type: string
      responses:
        default:
          description: Successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ListOperationsResponse"
  "/v1/tunedModels/{tunedModel}/operations":
    parameters:
    - "$ref": "#/components/parameters/alt"
    - "$ref": "#/components/parameters/callback"
    - "$ref": "#/components/parameters/prettyPrint"
    - "$ref": "#/components/parameters/_.xgafv"
    get:
      tags:
      - generativelanguage
      operationId: ListOperationsByTunedModel
      description: |-
        Lists operations that match the specified filter in the request. If the
        server doesn't support this method, it returns `UNIMPLEMENTED`.
      parameters:
      - name: tunedModel
        in: path
        required: true
        schema:
          type: string
      - name: filter
        description: The standard list filter.
        in: query
        schema:
          type: string
      - name: pageSize
        description: The standard list page size.
        in: query
        schema:
          type: integer
          format: int32
      - name: pageToken
        description: The standard list page token.
        in: query
        schema:
          type: string
      responses:
        default:
          description: Successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ListOperationsResponse"
  "/v1/tunedModels/{tunedModel}/operations/{operation}":
    parameters:
    - "$ref": "#/components/parameters/alt"
    - "$ref": "#/components/parameters/callback"
    - "$ref": "#/components/parameters/prettyPrint"
    - "$ref": "#/components/parameters/_.xgafv"
    get:
      tags:
      - generativelanguage
      operationId: GetOperation
      description: |-
        Gets the latest state of a long-running operation.  Clients can use this
        method to poll the operation result at intervals as recommended by the API
        service.
      parameters:
      - name: tunedModel
        in: path
        required: true
        schema:
          type: string
      - name: operation
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: Successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Operation"
  "/v1/operations/{operationsId}":
    parameters:
    - "$ref": "#/components/parameters/alt"
    - "$ref": "#/components/parameters/callback"
    - "$ref": "#/components/parameters/prettyPrint"
    - "$ref": "#/components/parameters/_.xgafv"
    delete:
      tags:
      - generativelanguage
      operationId: DeleteOperation
      description: |-
        Deletes a long-running operation. This method indicates that the client is
        no longer interested in the operation result. It does not cancel the
        operation. If the server doesn't support this method, it returns
        `google.rpc.Code.UNIMPLEMENTED`.
      parameters:
      - name: operationsId
        description: Part of `name`. The name of the operation resource to be deleted.
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: Successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Empty"
  "/v1/tunedModels/{tunedModel}/operations/{operation}:cancel":
    parameters:
    - "$ref": "#/components/parameters/alt"
    - "$ref": "#/components/parameters/callback"
    - "$ref": "#/components/parameters/prettyPrint"
    - "$ref": "#/components/parameters/_.xgafv"
    post:
      tags:
      - generativelanguage
      operationId: CancelOperation
      description: |-
        Starts asynchronous cancellation on a long-running operation.  The server
        makes a best effort to cancel the operation, but success is not
        guaranteed.  If the server doesn't support this method, it returns
        `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
        Operations.GetOperation or
        other methods to check whether the cancellation succeeded or whether the
        operation completed despite cancellation. On successful cancellation,
        the operation is not deleted; instead, it becomes an operation with
        an Operation.error value with a google.rpc.Status.code of 1,
        corresponding to `Code.CANCELLED`.
      parameters:
      - name: tunedModel
        in: path
        required: true
        schema:
          type: string
      - name: operation
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The request body.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CancelOperationRequest"
      responses:
        default:
          description: Successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Empty"
  "/v1/models/{model}":
    parameters:
    - "$ref": "#/components/parameters/alt"
    - "$ref": "#/components/parameters/callback"
    - "$ref": "#/components/parameters/prettyPrint"
    - "$ref": "#/components/parameters/_.xgafv"
    get:
      tags:
      - generativelanguage
      operationId: GetModel
      description: Gets information about a specific Model.
      parameters:
      - name: model
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: Successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Model"
  "/v1/models":
    parameters:
    - "$ref": "#/components/parameters/alt"
    - "$ref": "#/components/parameters/callback"
    - "$ref": "#/components/parameters/prettyPrint"
    - "$ref": "#/components/parameters/_.xgafv"
    get:
      tags:
      - generativelanguage
      operationId: ListModels
      description: Lists models available through the API.
      parameters:
      - name: pageSize
        description: |-
          The maximum number of `Models` to return (per page).

          The service may return fewer models.
          If unspecified, at most 50 models will be returned per page.
          This method returns at most 1000 models per page, even if you pass a larger
          page_size.
        in: query
        schema:
          type: integer
          format: int32
      - name: pageToken
        description: |-
          A page token, received from a previous `ListModels` call.

          Provide the `page_token` returned by one request as an argument to the next
          request to retrieve the next page.

          When paginating, all other parameters provided to `ListModels` must match
          the call that provided the page token.
        in: query
        schema:
          type: string
      responses:
        default:
          description: Successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ListModelsResponse"
components:
  parameters:
    alt:
      name: "$alt"
      description: Data format for response.
      schema:
        default: json
        enum:
        - json
        - media
        - proto
        x-google-enum-descriptions:
        - Responses with Content-Type of application/json
        - Media download with context-dependent Content-Type
        - Responses with Content-Type of application/x-protobuf
        type: string
      in: query
    callback:
      name: "$callback"
      description: JSONP
      schema:
        type: string
      in: query
    prettyPrint:
      name: "$prettyPrint"
      description: Returns response with indentations and line breaks.
      schema:
        default: 'true'
        type: boolean
      in: query
    _.xgafv:
      name: "$.xgafv"
      description: V1 error format.
      schema:
        enum:
        - '1'
        - '2'
        x-google-enum-descriptions:
        - v1 error format
        - v2 error format
        type: string
      in: query
  securitySchemes: {}
  schemas:
    GenerateContentRequest:
      description: Request to generate a completion from the model.
      type: object
      properties:
        model:
          description: |-
            Required. The name of the `Model` to use for generating the completion.

            Format: `name=models/{model}`.
          type: string
        contents:
          description: |-
            Required. The content of the current conversation with the model.

            For single-turn queries, this is a single instance. For multi-turn queries,
            this is a repeated field that contains conversation history + latest
            request.
          type: array
          items:
            "$ref": "#/components/schemas/Content"
        safetySettings:
          description: |-
            Optional. A list of unique `SafetySetting` instances for blocking unsafe content.

            This will be enforced on the `GenerateContentRequest.contents` and
            `GenerateContentResponse.candidates`. There should not be more than one
            setting for each `SafetyCategory` type. The API will block any contents and
            responses that fail to meet the thresholds set by these settings. This list
            overrides the default settings for each `SafetyCategory` specified in the
            safety_settings. If there is no `SafetySetting` for a given
            `SafetyCategory` provided in the list, the API will use the default safety
            setting for that category. Harm categories HARM_CATEGORY_HATE_SPEECH,
            HARM_CATEGORY_SEXUALLY_EXPLICIT, HARM_CATEGORY_DANGEROUS_CONTENT,
            HARM_CATEGORY_HARASSMENT are supported.
          type: array
          items:
            "$ref": "#/components/schemas/SafetySetting"
        generationConfig:
          description: Optional. Configuration options for model generation and outputs.
          allOf:
          - "$ref": "#/components/schemas/GenerationConfig"
      required:
      - model
      - contents
    Content:
      description: |-
        The base structured datatype containing multi-part content of a message.

        A `Content` includes a `role` field designating the producer of the `Content`
        and a `parts` field containing multi-part data that contains the content of
        the message turn.
      type: object
      properties:
        parts:
          description: |-
            Ordered `Parts` that constitute a single message. Parts may have different
            MIME types.
          type: array
          items:
            "$ref": "#/components/schemas/Part"
        role:
          description: |-
            Optional. The producer of the content. Must be either 'user' or 'model'.

            Useful to set for multi-turn conversations, otherwise can be left blank
            or unset.
          type: string
    Part:
      description: |-
        A datatype containing media that is part of a multi-part `Content` message.

        A `Part` consists of data which has an associated datatype. A `Part` can only
        contain one of the accepted types in `Part.data`.

        A `Part` must have a fixed IANA MIME type identifying the type and subtype
        of the media if the `inline_data` field is filled with raw bytes.
      type: object
      properties:
        text:
          description: Inline text.
          type: string
        inlineData:
          description: Inline media bytes.
          allOf:
          - "$ref": "#/components/schemas/Blob"
    Blob:
      description: |-
        Raw media bytes.

        Text should not be sent as raw bytes, use the 'text' field.
      type: object
      properties:
        mimeType:
          description: |-
            The IANA standard MIME type of the source data.
            Examples:
              - image/png
              - image/jpeg
            If an unsupported MIME type is provided, an error will be returned. For a
            complete list of supported types, see [Supported file
            formats](https://ai.google.dev/gemini-api/docs/prompting_with_media#supported_file_formats).
          type: string
        data:
          description: Raw bytes for media formats.
          type: string
          format: byte
    SafetySetting:
      description: |-
        Safety setting, affecting the safety-blocking behavior.

        Passing a safety setting for a category changes the allowed probability that
        content is blocked.
      type: object
      properties:
        category:
          description: Required. The category for this setting.
          type: string
          x-google-enum-descriptions:
          - Category is unspecified.
          - Negative or harmful comments targeting identity and/or protected attribute.
          - Content that is rude, disrespectful, or profane.
          - |-
            Describes scenarios depicting violence against an individual or group, or
            general descriptions of gore.
          - Contains references to sexual acts or other lewd content.
          - Promotes unchecked medical advice.
          - Dangerous content that promotes, facilitates, or encourages harmful acts.
          - Harasment content.
          - Hate speech and content.
          - Sexually explicit content.
          - Dangerous content.
          enum:
          - HARM_CATEGORY_UNSPECIFIED
          - HARM_CATEGORY_DEROGATORY
          - HARM_CATEGORY_TOXICITY
          - HARM_CATEGORY_VIOLENCE
          - HARM_CATEGORY_SEXUAL
          - HARM_CATEGORY_MEDICAL
          - HARM_CATEGORY_DANGEROUS
          - HARM_CATEGORY_HARASSMENT
          - HARM_CATEGORY_HATE_SPEECH
          - HARM_CATEGORY_SEXUALLY_EXPLICIT
          - HARM_CATEGORY_DANGEROUS_CONTENT
        threshold:
          description: Required. Controls the probability threshold at which harm
            is blocked.
          type: string
          x-google-enum-descriptions:
          - Threshold is unspecified.
          - Content with NEGLIGIBLE will be allowed.
          - Content with NEGLIGIBLE and LOW will be allowed.
          - Content with NEGLIGIBLE, LOW, and MEDIUM will be allowed.
          - All content will be allowed.
          enum:
          - HARM_BLOCK_THRESHOLD_UNSPECIFIED
          - BLOCK_LOW_AND_ABOVE
          - BLOCK_MEDIUM_AND_ABOVE
          - BLOCK_ONLY_HIGH
          - BLOCK_NONE
      required:
      - category
      - threshold
    GenerationConfig:
      description: |-
        Configuration options for model generation and outputs. Not all parameters
        may be configurable for every model.
      type: object
      properties:
        candidateCount:
          description: |-
            Optional. Number of generated responses to return.

            Currently, this value can only be set to 1. If unset, this will default
            to 1.
          type: integer
          format: int32
        stopSequences:
          description: |-
            Optional. The set of character sequences (up to 5) that will stop output generation.
            If specified, the API will stop at the first appearance of a stop
            sequence. The stop sequence will not be included as part of the response.
          type: array
          items:
            type: string
        maxOutputTokens:
          description: |-
            Optional. The maximum number of tokens to include in a candidate.

            Note: The default value varies by model, see the `Model.output_token_limit`
            attribute of the `Model` returned from the `getModel` function.
          type: integer
          format: int32
        temperature:
          description: |-
            Optional. Controls the randomness of the output.

            Note: The default value varies by model, see the `Model.temperature`
            attribute of the `Model` returned from the `getModel` function.

            Values can range from [0.0, 2.0].
          type: number
          format: float
        topP:
          description: |-
            Optional. The maximum cumulative probability of tokens to consider when sampling.

            The model uses combined Top-k and nucleus sampling.

            Tokens are sorted based on their assigned probabilities so that only the
            most likely tokens are considered. Top-k sampling directly limits the
            maximum number of tokens to consider, while Nucleus sampling limits number
            of tokens based on the cumulative probability.

            Note: The default value varies by model, see the `Model.top_p`
            attribute of the `Model` returned from the `getModel` function.
          type: number
          format: float
        topK:
          description: |-
            Optional. The maximum number of tokens to consider when sampling.

            Models use nucleus sampling or combined Top-k and nucleus sampling.
            Top-k sampling considers the set of `top_k` most probable tokens.
            Models running with nucleus sampling don't allow top_k setting.

            Note: The default value varies by model, see the `Model.top_k`
            attribute of the `Model` returned from the `getModel` function. Empty
            `top_k` field in `Model` indicates the model doesn't apply top-k sampling
            and doesn't allow setting `top_k` on requests.
          type: integer
          format: int32
    GenerateContentResponse:
      description: |-
        Response from the model supporting multiple candidates.

        Note on safety ratings and content filtering. They are reported for both
        prompt in `GenerateContentResponse.prompt_feedback` and for each candidate
        in `finish_reason` and in `safety_ratings`. The API contract is that:
         - either all requested candidates are returned or no candidates at all
         - no candidates are returned only if there was something wrong with the
           prompt (see `prompt_feedback`)
         - feedback on each candidate is reported on `finish_reason` and
           `safety_ratings`.
      type: object
      properties:
        candidates:
          description: Candidate responses from the model.
          type: array
          items:
            "$ref": "#/components/schemas/Candidate"
        promptFeedback:
          description: Returns the prompt's feedback related to the content filters.
          allOf:
          - "$ref": "#/components/schemas/PromptFeedback"
        usageMetadata:
          description: Output only. Metadata on the generation requests' token usage.
          readOnly: true
          allOf:
          - "$ref": "#/components/schemas/UsageMetadata"
    Candidate:
      description: A response candidate generated from the model.
      type: object
      properties:
        index:
          description: Output only. Index of the candidate in the list of candidates.
          readOnly: true
          type: integer
          format: int32
        content:
          description: Output only. Generated content returned from the model.
          readOnly: true
          allOf:
          - "$ref": "#/components/schemas/Content"
        finishReason:
          description: |-
            Optional. Output only. The reason why the model stopped generating tokens.

            If empty, the model has not stopped generating the tokens.
          readOnly: true
          type: string
          x-google-enum-descriptions:
          - Default value. This value is unused.
          - Natural stop point of the model or provided stop sequence.
          - The maximum number of tokens as specified in the request was reached.
          - The candidate content was flagged for safety reasons.
          - The candidate content was flagged for recitation reasons.
          - Unknown reason.
          enum:
          - FINISH_REASON_UNSPECIFIED
          - STOP
          - MAX_TOKENS
          - SAFETY
          - RECITATION
          - OTHER
        safetyRatings:
          description: |-
            List of ratings for the safety of a response candidate.

            There is at most one rating per category.
          type: array
          items:
            "$ref": "#/components/schemas/SafetyRating"
        citationMetadata:
          description: |-
            Output only. Citation information for model-generated candidate.

            This field may be populated with recitation information for any text
            included in the `content`. These are passages that are "recited" from
            copyrighted material in the foundational LLM's training data.
          readOnly: true
          allOf:
          - "$ref": "#/components/schemas/CitationMetadata"
        tokenCount:
          description: Output only. Token count for this candidate.
          readOnly: true
          type: integer
          format: int32
    SafetyRating:
      description: |-
        Safety rating for a piece of content.

        The safety rating contains the category of harm and the
        harm probability level in that category for a piece of content.
        Content is classified for safety across a number of
        harm categories and the probability of the harm classification is included
        here.
      type: object
      properties:
        category:
          description: Required. The category for this rating.
          type: string
          x-google-enum-descriptions:
          - Category is unspecified.
          - Negative or harmful comments targeting identity and/or protected attribute.
          - Content that is rude, disrespectful, or profane.
          - |-
            Describes scenarios depicting violence against an individual or group, or
            general descriptions of gore.
          - Contains references to sexual acts or other lewd content.
          - Promotes unchecked medical advice.
          - Dangerous content that promotes, facilitates, or encourages harmful acts.
          - Harasment content.
          - Hate speech and content.
          - Sexually explicit content.
          - Dangerous content.
          enum:
          - HARM_CATEGORY_UNSPECIFIED
          - HARM_CATEGORY_DEROGATORY
          - HARM_CATEGORY_TOXICITY
          - HARM_CATEGORY_VIOLENCE
          - HARM_CATEGORY_SEXUAL
          - HARM_CATEGORY_MEDICAL
          - HARM_CATEGORY_DANGEROUS
          - HARM_CATEGORY_HARASSMENT
          - HARM_CATEGORY_HATE_SPEECH
          - HARM_CATEGORY_SEXUALLY_EXPLICIT
          - HARM_CATEGORY_DANGEROUS_CONTENT
        probability:
          description: Required. The probability of harm for this content.
          type: string
          x-google-enum-descriptions:
          - Probability is unspecified.
          - Content has a negligible chance of being unsafe.
          - Content has a low chance of being unsafe.
          - Content has a medium chance of being unsafe.
          - Content has a high chance of being unsafe.
          enum:
          - HARM_PROBABILITY_UNSPECIFIED
          - NEGLIGIBLE
          - LOW
          - MEDIUM
          - HIGH
        blocked:
          description: Was this content blocked because of this rating?
          type: boolean
      required:
      - category
      - probability
    CitationMetadata:
      description: A collection of source attributions for a piece of content.
      type: object
      properties:
        citationSources:
          description: Citations to sources for a specific response.
          type: array
          items:
            "$ref": "#/components/schemas/CitationSource"
    CitationSource:
      description: A citation to a source for a portion of a specific response.
      type: object
      properties:
        startIndex:
          description: |-
            Optional. Start of segment of the response that is attributed to this source.

            Index indicates the start of the segment, measured in bytes.
          type: integer
          format: int32
        endIndex:
          description: Optional. End of the attributed segment, exclusive.
          type: integer
          format: int32
        uri:
          description: Optional. URI that is attributed as a source for a portion
            of the text.
          type: string
        license:
          description: |-
            Optional. License for the GitHub project that is attributed as a source for segment.

            License info is required for code citations.
          type: string
    PromptFeedback:
      description: |-
        A set of the feedback metadata the prompt specified in
        `GenerateContentRequest.content`.
      type: object
      properties:
        blockReason:
          description: |-
            Optional. If set, the prompt was blocked and no candidates are returned.
            Rephrase your prompt.
          type: string
          x-google-enum-descriptions:
          - Default value. This value is unused.
          - |-
            Prompt was blocked due to safety reasons. You can inspect
            `safety_ratings` to understand which safety category blocked it.
          - Prompt was blocked due to unknown reaasons.
          enum:
          - BLOCK_REASON_UNSPECIFIED
          - SAFETY
          - OTHER
        safetyRatings:
          description: |-
            Ratings for safety of the prompt.
            There is at most one rating per category.
          type: array
          items:
            "$ref": "#/components/schemas/SafetyRating"
    UsageMetadata:
      description: Metadata on the generation request's token usage.
      type: object
      properties:
        promptTokenCount:
          description: Number of tokens in the prompt.
          type: integer
          format: int32
        candidatesTokenCount:
          description: Total number of tokens across the generated candidates.
          type: integer
          format: int32
        totalTokenCount:
          description: Total token count for the generation request (prompt + candidates).
          type: integer
          format: int32
    EmbedContentRequest:
      description: Request containing the `Content` for the model to embed.
      type: object
      properties:
        model:
          description: |-
            Required. The model's resource name. This serves as an ID for the Model to use.

            This name should match a model name returned by the `ListModels` method.

            Format: `models/{model}`
          type: string
        content:
          description: Required. The content to embed. Only the `parts.text` fields
            will be counted.
          allOf:
          - "$ref": "#/components/schemas/Content"
        taskType:
          description: |-
            Optional. Optional task type for which the embeddings will be used. Can only be set
            for `models/embedding-001`.
          type: string
          x-google-enum-descriptions:
          - Unset value, which will default to one of the other enum values.
          - Specifies the given text is a query in a search/retrieval setting.
          - Specifies the given text is a document from the corpus being searched.
          - Specifies the given text will be used for STS.
          - Specifies that the given text will be classified.
          - Specifies that the embeddings will be used for clustering.
          - Specifies that the given text will be used for question answering.
          - Specifies that the given text will be used for fact verification.
          enum:
          - TASK_TYPE_UNSPECIFIED
          - RETRIEVAL_QUERY
          - RETRIEVAL_DOCUMENT
          - SEMANTIC_SIMILARITY
          - CLASSIFICATION
          - CLUSTERING
          - QUESTION_ANSWERING
          - FACT_VERIFICATION
        title:
          description: |-
            Optional. An optional title for the text. Only applicable when TaskType is
            `RETRIEVAL_DOCUMENT`.

            Note: Specifying a `title` for `RETRIEVAL_DOCUMENT` provides better quality
            embeddings for retrieval.
          type: string
        outputDimensionality:
          description: |-
            Optional. Optional reduced dimension for the output embedding. If set, excessive
            values in the output embedding are truncated from the end. Supported by
            newer models since 2024, and the earlier model (`models/embedding-001`)
            cannot specify this value.
          type: integer
          format: int32
      required:
      - model
      - content
    EmbedContentResponse:
      description: The response to an `EmbedContentRequest`.
      type: object
      properties:
        embedding:
          description: Output only. The embedding generated from the input content.
          readOnly: true
          allOf:
          - "$ref": "#/components/schemas/ContentEmbedding"
    ContentEmbedding:
      description: A list of floats representing an embedding.
      type: object
      properties:
        values:
          description: The embedding values.
          type: array
          items:
            type: number
            format: float
    BatchEmbedContentsRequest:
      description: Batch request to get embeddings from the model for a list of prompts.
      type: object
      properties:
        requests:
          description: |-
            Required. Embed requests for the batch. The model in each of these requests must
            match the model specified `BatchEmbedContentsRequest.model`.
          type: array
          items:
            "$ref": "#/components/schemas/EmbedContentRequest"
      required:
      - requests
    BatchEmbedContentsResponse:
      description: The response to a `BatchEmbedContentsRequest`.
      type: object
      properties:
        embeddings:
          description: |-
            Output only. The embeddings for each request, in the same order as provided in the batch
            request.
          readOnly: true
          type: array
          items:
            "$ref": "#/components/schemas/ContentEmbedding"
    CountTokensRequest:
      description: |-
        Counts the number of tokens in the `prompt` sent to a model.

        Models may tokenize text differently, so each model may return a different
        `token_count`.
      type: object
      properties:
        contents:
          description: |-
            Optional. The input given to the model as a prompt. This field is ignored when
            `generate_content_request` is set.
          type: array
          items:
            "$ref": "#/components/schemas/Content"
        generateContentRequest:
          description: |-
            Optional. The overall input given to the model. CountTokens will count prompt,
            function calling, etc.
          allOf:
          - "$ref": "#/components/schemas/GenerateContentRequest"
    CountTokensResponse:
      description: |-
        A response from `CountTokens`.

        It returns the model's `token_count` for the `prompt`.
      type: object
      properties:
        totalTokens:
          description: |-
            The number of tokens that the `model` tokenizes the `prompt` into.

            Always non-negative.
          type: integer
          format: int32
    ListOperationsResponse:
      description: The response message for Operations.ListOperations.
      type: object
      properties:
        operations:
          description: A list of operations that matches the specified filter in the
            request.
          type: array
          items:
            "$ref": "#/components/schemas/Operation"
        nextPageToken:
          description: The standard List next-page token.
          type: string
    Status:
      description: |-
        The `Status` type defines a logical error model that is suitable for
        different programming environments, including REST APIs and RPC APIs. It is
        used by [gRPC](https://github.com/grpc). Each `Status` message contains
        three pieces of data: error code, error message, and error details.

        You can find out more about this error model and how to work with it in the
        [API Design Guide](https://cloud.google.com/apis/design/errors).
      type: object
      properties:
        code:
          description: The status code, which should be an enum value of google.rpc.Code.
          type: integer
          format: int32
        message:
          description: |-
            A developer-facing error message, which should be in English. Any
            user-facing error message should be localized and sent in the
            google.rpc.Status.details field, or localized by the client.
          type: string
        details:
          description: |-
            A list of messages that carry the error details.  There is a common set of
            message types for APIs to use.
          type: array
          items:
            type: object
            additionalProperties:
              description: Properties of the object. Contains field @type with type
                URL.
    Empty:
      description: |-
        A generic empty message that you can re-use to avoid defining duplicated
        empty messages in your APIs. A typical example is to use it as the request
        or the response type of an API method. For instance:

            service Foo {
              rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
            }
      type: object
    CancelOperationRequest:
      description: The request message for Operations.CancelOperation.
      type: object
    Model:
      description: Information about a Generative Language Model.
      type: object
      properties:
        name:
          description: |-
            Required. The resource name of the `Model`.

            Format: `models/{model}` with a `{model}` naming convention of:

            * "{base_model_id}-{version}"

            Examples:

            * `models/chat-bison-001`
          type: string
        baseModelId:
          description: |-
            Required. The name of the base model, pass this to the generation request.

            Examples:

            * `chat-bison`
          type: string
        version:
          description: |-
            Required. The version number of the model.

            This represents the major version
          type: string
        displayName:
          description: |-
            The human-readable name of the model. E.g. "Chat Bison".

            The name can be up to 128 characters long and can consist of any UTF-8
            characters.
          type: string
        description:
          description: A short description of the model.
          type: string
        inputTokenLimit:
          description: Maximum number of input tokens allowed for this model.
          type: integer
          format: int32
        outputTokenLimit:
          description: Maximum number of output tokens available for this model.
          type: integer
          format: int32
        supportedGenerationMethods:
          description: |-
            The model's supported generation methods.

            The method names are defined as Pascal case
            strings, such as `generateMessage` which correspond to API methods.
          type: array
          items:
            type: string
        temperature:
          description: |-
            Controls the randomness of the output.

            Values can range over `[0.0,1.0]`, inclusive. A value closer to `1.0` will
            produce responses that are more varied, while a value closer to `0.0` will
            typically result in less surprising responses from the model.
            This value specifies default to be used by the backend while making the
            call to the model.
          type: number
          format: float
        topP:
          description: |-
            For Nucleus sampling.

            Nucleus sampling considers the smallest set of tokens whose probability
            sum is at least `top_p`.
            This value specifies default to be used by the backend while making the
            call to the model.
          type: number
          format: float
        topK:
          description: |-
            For Top-k sampling.

            Top-k sampling considers the set of `top_k` most probable tokens.
            This value specifies default to be used by the backend while making the
            call to the model.
            If empty, indicates the model doesn't use top-k sampling, and `top_k` isn't
            allowed as a generation parameter.
          type: integer
          format: int32
      required:
      - name
      - baseModelId
      - version
    ListModelsResponse:
      description: Response from `ListModel` containing a paginated list of Models.
      type: object
      properties:
        models:
          description: The returned Models.
          type: array
          items:
            "$ref": "#/components/schemas/Model"
        nextPageToken:
          description: |-
            A token, which can be sent as `page_token` to retrieve the next page.

            If this field is omitted, there are no more pages.
          type: string
    CreateTunedModelMetadata:
      description: |-
        Metadata about the state and progress of creating a tuned model returned from
        the long-running operation
      type: object
      properties:
        tunedModel:
          description: Name of the tuned model associated with the tuning operation.
          type: string
        totalSteps:
          description: The total number of tuning steps.
          type: integer
          format: int32
        completedSteps:
          description: The number of steps completed.
          type: integer
          format: int32
        completedPercent:
          description: The completed percentage for the tuning operation.
          type: number
          format: float
        snapshots:
          description: Metrics collected during tuning.
          type: array
          items:
            "$ref": "#/components/schemas/TuningSnapshot"
    TuningSnapshot:
      description: Record for a single tuning step.
      type: object
      properties:
        step:
          description: Output only. The tuning step.
          readOnly: true
          type: integer
          format: int32
        epoch:
          description: Output only. The epoch this step was part of.
          readOnly: true
          type: integer
          format: int32
        meanLoss:
          description: Output only. The mean loss of the training examples for this
            step.
          readOnly: true
          type: number
          format: float
        computeTime:
          description: Output only. The timestamp when this metric was computed.
          readOnly: true
          type: string
          format: date-time
    BaseOperation:
      description: |-
        This resource represents a long-running operation that is the result of a
        network API call.
      type: object
      properties:
        name:
          description: |-
            The server-assigned name, which is only unique within the same service that
            originally returns it. If you use the default HTTP mapping, the
            `name` should be a resource name ending with `operations/{unique_id}`.
          type: string
        done:
          description: |-
            If the value is `false`, it means the operation is still in progress.
            If `true`, the operation is completed, and either `error` or `response` is
            available.
          type: boolean
        error:
          description: The error result of the operation in case of failure or cancellation.
          allOf:
          - "$ref": "#/components/schemas/Status"
    Operation:
      description: |-
        This resource represents a long-running operation that is the result of a
        network API call.
      type: object
      allOf:
      - "$ref": "#/components/schemas/BaseOperation"
      - type: object
        properties:
          metadata:
            description: |-
              Service-specific metadata associated with the operation.  It typically
              contains progress information and common metadata such as create time.
              Some services might not provide such metadata.  Any method that returns a
              long-running operation should document the metadata type, if any.
            type: object
            additionalProperties:
              description: Properties of the object. Contains field @type with type
                URL.
          response:
            description: |-
              The normal, successful response of the operation.  If the original
              method returns no data on success, such as `Delete`, the response is
              `google.protobuf.Empty`.  If the original method is standard
              `Get`/`Create`/`Update`, the response should be the resource.  For other
              methods, the response should have the type `XxxResponse`, where `Xxx`
              is the original method name.  For example, if the original method name
              is `TakeSnapshot()`, the inferred response type is
              `TakeSnapshotResponse`.
            type: object
            additionalProperties:
              description: Properties of the object. Contains field @type with type
                URL.
externalDocs:
  description: Find more info here.
  url: https://developers.generativeai.google/api
