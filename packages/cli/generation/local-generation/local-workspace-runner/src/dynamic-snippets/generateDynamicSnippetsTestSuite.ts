import { ApiAuth, HttpEndpoint, dynamic as DynamicSnippets, IntermediateRepresentation } from "@fern-api/ir-sdk";
import { assertNever } from "@fern-api/core-utils";
import { FernGeneratorExec } from "@fern-fern/generator-exec-sdk";
import urlJoin from "url-join";
import { DynamicSnippetsTestSuite } from "./DynamicSnippetsTestSuite";

export async function generateDynamicSnippetsTestSuite({
    ir,
    config
}: {
    ir: IntermediateRepresentation;
    config: FernGeneratorExec.GeneratorConfig;
}): Promise<DynamicSnippetsTestSuite> {
    if (ir.dynamic == null) {
        throw new Error("Internal error; dynamic IR is not available");
    }
    return {
        ir: ir.dynamic,
        config,
        requests: getEndpointSnippetRequests({ ir })
    };
}

function getEndpointSnippetRequests({
    ir
}: {
    ir: IntermediateRepresentation;
}): DynamicSnippets.EndpointSnippetRequest[] {
    const requests: DynamicSnippets.EndpointSnippetRequest[] = [];
    for (const endpoint of getAllEndpoints(ir)) {
        const location: DynamicSnippets.EndpointLocation = {
            path: getFullPathForEndpoint(endpoint),
            method: endpoint.method
        };
        const auth = getAuthValues(ir.auth);
        for (const example of [...endpoint.userSpecifiedExamples, ...endpoint.autogeneratedExamples]) {
            requests.push({
                endpoint: location,
                baseUrl: undefined,
                environment: undefined,
                auth,
                headers: Object.fromEntries(
                    [...(example.example?.serviceHeaders ?? []), ...(example.example?.endpointHeaders ?? [])].map(
                        (header) => {
                            return [header.name.wireValue, header.value.jsonExample];
                        }
                    )
                ),
                pathParameters: Object.fromEntries(
                    [
                        ...(example.example?.rootPathParameters ?? []),
                        ...(example.example?.servicePathParameters ?? []),
                        ...(example.example?.endpointPathParameters ?? [])
                    ].map((parameter) => {
                        return [parameter.name.originalName, parameter.value.jsonExample];
                    })
                ),
                queryParameters: Object.fromEntries(
                    [...(example.example?.queryParameters ?? [])].map((parameter) => {
                        return [parameter.name.wireValue, parameter.value.jsonExample];
                    })
                ),
                requestBody: example.example?.request?.jsonExample
            });
        }
    }
    return requests;
}

function getAuthValues(auth: ApiAuth): DynamicSnippets.AuthValues | undefined {
    const scheme = auth.schemes[0];
    if (scheme == null) {
        return undefined;
    }
    switch (scheme.type) {
        case "bearer":
            return DynamicSnippets.AuthValues.bearer({
                token: "<token>"
            });
        case "basic":
            return DynamicSnippets.AuthValues.basic({
                username: "<username>",
                password: "<password>"
            });
        case "header":
            return DynamicSnippets.AuthValues.header({
                value: "<value>"
            });
        case "oauth":
            // TODO: Implement OAuth.
            return undefined;
        default:
            assertNever(scheme);
    }
}

function getAllEndpoints(ir: IntermediateRepresentation): HttpEndpoint[] {
    return Object.values(ir.services).flatMap((service) => Object.values(service.endpoints));
}

function getFullPathForEndpoint(endpoint: HttpEndpoint): string {
    let url = "";
    if (endpoint.fullPath.head.length > 0) {
        url = urlJoin(url, endpoint.fullPath.head);
    }
    for (const part of endpoint.fullPath.parts) {
        url = urlJoin(url, "{" + part.pathParameter + "}");
        if (part.tail.length > 0) {
            url = urlJoin(url, part.tail);
        }
    }
    return url.startsWith("/") ? url : `/${url}`;
}
