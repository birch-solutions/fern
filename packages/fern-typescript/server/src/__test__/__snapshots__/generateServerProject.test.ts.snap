// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generateServerProject posts 1`] = `
Object {
  "/.npmignore": "tsconfig.json",
  "/index.ts": "export * as model from \\"./model\\";
export * as services from \\"./services\\";
",
  "/model/_errors/PostNotFoundError.ts": "import * as model from \\"..\\";

export interface PostNotFoundError {
    id: model.PostId;
}
",
  "/model/_errors/index.ts": "export * from \\"./PostNotFoundError\\";
",
  "/model/_service-types/PostsService/CreatePostErrorBody.ts": "export type CreatePostErrorBody = never;

export declare namespace CreatePostErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const CreatePostErrorBody = {
    _visit: <Result>(_value: CreatePostErrorBody, visitor: CreatePostErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): CreatePostErrorBody[\\"_error\\"][] => [],
} as const;
",
  "/model/_service-types/PostsService/CreatePostRequest.ts": "import * as model from \\"../..\\";

export interface CreatePostRequest {
    type: model.PostType;
    title: string;
    author: model.Author;
    content: string;
}
",
  "/model/_service-types/PostsService/CreatePostResponse.ts": "import * as model from \\"../..\\";

export type CreatePostResponse = CreatePostResponse.SuccessResponse | CreatePostResponse.ErrorResponse;

namespace CreatePostResponse {
    export interface SuccessResponse {
        ok: true;
        body: model.PostId;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.CreatePostErrorBody;
    }
}
",
  "/model/_service-types/PostsService/DeletePostErrorBody.ts": "export type DeletePostErrorBody = never;

export declare namespace DeletePostErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const DeletePostErrorBody = {
    _visit: <Result>(_value: DeletePostErrorBody, visitor: DeletePostErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): DeletePostErrorBody[\\"_error\\"][] => [],
} as const;
",
  "/model/_service-types/PostsService/DeletePostRequest.ts": "import * as model from \\"../..\\";

export interface DeletePostRequest {
    postId: model.PostId;
}
",
  "/model/_service-types/PostsService/DeletePostResponse.ts": "import * as model from \\"../..\\";

export type DeletePostResponse = DeletePostResponse.SuccessResponse | DeletePostResponse.ErrorResponse;

namespace DeletePostResponse {
    export interface SuccessResponse {
        ok: true;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.DeletePostErrorBody;
    }
}
",
  "/model/_service-types/PostsService/GetPostErrorBody.ts": "import * as model from \\"../..\\";
import * as uuid from \\"uuid\\";

export type GetPostErrorBody =
    | GetPostErrorBody.PostNotFoundError;

export declare namespace GetPostErrorBody {
    interface PostNotFoundError extends model.PostNotFoundError {
        _error: \\"PostNotFoundError\\";
        _errorInstanceId: string;
    }

    export interface _Visitor<Result> {
        PostNotFoundError: (value: model.PostNotFoundError) => Result;
        _unknown: () => Result;
    }
}

export const GetPostErrorBody = {
    PostNotFoundError: (value: model.PostNotFoundError): GetPostErrorBody.PostNotFoundError => ({
        ...value,
        _error: \\"PostNotFoundError\\",
        _errorInstanceId: uuid.v4()
    }),

    _visit: <Result>(value: GetPostErrorBody, visitor: GetPostErrorBody._Visitor<Result>): Result => {
        switch (value._error) {
            case \\"PostNotFoundError\\": return visitor.PostNotFoundError(value);
            default: return visitor._unknown();
        }
    },

    _types: (): GetPostErrorBody[\\"_error\\"][] => [\\"PostNotFoundError\\"],
} as const;
",
  "/model/_service-types/PostsService/GetPostRequest.ts": "import * as model from \\"../..\\";

export interface GetPostRequest {
    postId: model.PostId;
    page: number | null | undefined;
    otherParam: number;
}
",
  "/model/_service-types/PostsService/GetPostResponse.ts": "import * as model from \\"../..\\";

export type GetPostResponse = GetPostResponse.SuccessResponse | GetPostResponse.ErrorResponse;

namespace GetPostResponse {
    export interface SuccessResponse {
        ok: true;
        body: model.Post;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.GetPostErrorBody;
    }
}
",
  "/model/_service-types/PostsService/GetPostV2ErrorBody.ts": "import * as model from \\"../..\\";
import * as uuid from \\"uuid\\";

export type GetPostV2ErrorBody =
    | GetPostV2ErrorBody.PostNotFoundError;

export declare namespace GetPostV2ErrorBody {
    interface PostNotFoundError extends model.PostNotFoundError {
        _error: \\"PostNotFoundError\\";
        _errorInstanceId: string;
    }

    export interface _Visitor<Result> {
        PostNotFoundError: (value: model.PostNotFoundError) => Result;
        _unknown: () => Result;
    }
}

export const GetPostV2ErrorBody = {
    PostNotFoundError: (value: model.PostNotFoundError): GetPostV2ErrorBody.PostNotFoundError => ({
        ...value,
        _error: \\"PostNotFoundError\\",
        _errorInstanceId: uuid.v4()
    }),

    _visit: <Result>(value: GetPostV2ErrorBody, visitor: GetPostV2ErrorBody._Visitor<Result>): Result => {
        switch (value._error) {
            case \\"PostNotFoundError\\": return visitor.PostNotFoundError(value);
            default: return visitor._unknown();
        }
    },

    _types: (): GetPostV2ErrorBody[\\"_error\\"][] => [\\"PostNotFoundError\\"],
} as const;
",
  "/model/_service-types/PostsService/GetPostV2Response.ts": "import * as model from \\"../..\\";

export type GetPostV2Response = GetPostV2Response.SuccessResponse | GetPostV2Response.ErrorResponse;

namespace GetPostV2Response {
    export interface SuccessResponse {
        ok: true;
        body: model.Post;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.GetPostV2ErrorBody;
    }
}
",
  "/model/_service-types/PostsService/NoopWithAuthErrorBody.ts": "export type NoopWithAuthErrorBody = never;

export declare namespace NoopWithAuthErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const NoopWithAuthErrorBody = {
    _visit: <Result>(_value: NoopWithAuthErrorBody, visitor: NoopWithAuthErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): NoopWithAuthErrorBody[\\"_error\\"][] => [],
} as const;
",
  "/model/_service-types/PostsService/NoopWithAuthResponse.ts": "import * as model from \\"../..\\";

export type NoopWithAuthResponse = NoopWithAuthResponse.SuccessResponse | NoopWithAuthResponse.ErrorResponse;

namespace NoopWithAuthResponse {
    export interface SuccessResponse {
        ok: true;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.NoopWithAuthErrorBody;
    }
}
",
  "/model/_service-types/PostsService/NoopWithoutAuthErrorBody.ts": "export type NoopWithoutAuthErrorBody = never;

export declare namespace NoopWithoutAuthErrorBody {
    export interface _Visitor<Result> {
        _unknown: () => Result;
    }
}

export const NoopWithoutAuthErrorBody = {
    _visit: <Result>(_value: NoopWithoutAuthErrorBody, visitor: NoopWithoutAuthErrorBody._Visitor<Result>): Result => {
        return visitor._unknown();
    },

    _types: (): NoopWithoutAuthErrorBody[\\"_error\\"][] => [],
} as const;
",
  "/model/_service-types/PostsService/NoopWithoutAuthResponse.ts": "import * as model from \\"../..\\";

export type NoopWithoutAuthResponse = NoopWithoutAuthResponse.SuccessResponse | NoopWithoutAuthResponse.ErrorResponse;

namespace NoopWithoutAuthResponse {
    export interface SuccessResponse {
        ok: true;
    }

    export interface ErrorResponse {
        ok: false;
        error: model.NoopWithoutAuthErrorBody;
    }
}
",
  "/model/_service-types/PostsService/index.ts": "export * from \\"./CreatePostRequest\\";
export * from \\"./CreatePostErrorBody\\";
export * from \\"./CreatePostResponse\\";
export * from \\"./GetPostRequest\\";
export * from \\"./GetPostErrorBody\\";
export * from \\"./GetPostResponse\\";
export * from \\"./GetPostV2ErrorBody\\";
export * from \\"./GetPostV2Response\\";
export * from \\"./DeletePostRequest\\";
export * from \\"./DeletePostErrorBody\\";
export * from \\"./DeletePostResponse\\";
export * from \\"./NoopWithAuthErrorBody\\";
export * from \\"./NoopWithAuthResponse\\";
export * from \\"./NoopWithoutAuthErrorBody\\";
export * from \\"./NoopWithoutAuthResponse\\";
",
  "/model/_service-types/index.ts": "export * from \\"./PostsService\\";
",
  "/model/_types/Author.ts": "export type Author =
    | Author.Anonymous
    | Author.Named;

export declare namespace Author {
    interface Anonymous {
        _type: \\"anonymous\\";
    }

    interface Named {
        _type: \\"named\\";
        named: string;
    }

    export interface _Visitor<Result> {
        anonymous: () => Result;
        named: (value: string) => Result;
        _unknown: () => Result;
    }
}

export const Author = {
    anonymous: (): Author.Anonymous => ({
        _type: \\"anonymous\\"
    }),

    named: (value: string): Author.Named => ({
        named: value,
        _type: \\"named\\"
    }),

    _visit: <Result>(value: Author, visitor: Author._Visitor<Result>): Result => {
        switch (value._type) {
            case \\"anonymous\\": return visitor.anonymous();
            case \\"named\\": return visitor.named(value.named);
            default: return visitor._unknown();
        }
    },

    _types: (): Author[\\"_type\\"][] => [\\"anonymous\\", \\"named\\"],
} as const;
",
  "/model/_types/Post.ts": "import * as model from \\"..\\";

/**
 * A blog post
 */
export interface Post {
    id: model.PostId;
    type: model.PostType;
    title: string;
    author: model.Author;
    content: string;
    relatedPosts: model.Post[];
}
",
  "/model/_types/PostId.ts": "/**
 * An ID of a blog post
 */
export type PostId = string & {
    __PostId: void;
};

export const PostId = {
    of: (value: string): PostId => value as PostId
};
",
  "/model/_types/PostType.ts": "export type PostType =
    | \\"LONG\\"
    | \\"SHORT\\";

export const PostType = {
    Long: \\"LONG\\",
    Short: \\"SHORT\\",

    _visit: <Result>(value: PostType, visitor: PostType._Visitor<Result>): Result => {
        switch (value) {
            case PostType.Long: return visitor.long();
            case PostType.Short: return visitor.short();
            default: return visitor._unknown();
        }
    },

    _values: (): PostType[] => [PostType.Long, PostType.Short],
} as const;

export declare namespace PostType {
    type Long = \\"LONG\\";
    type Short = \\"SHORT\\";

    export interface _Visitor<Result> {
        long: () => Result;
        short: () => Result;
        _unknown: () => Result;
    }
}
",
  "/model/_types/index.ts": "export * from \\"./PostId\\";
export * from \\"./Post\\";
export * from \\"./PostType\\";
export * from \\"./Author\\";
",
  "/model/index.ts": "export * from \\"./_types\\";
export * from \\"./_errors\\";
export * from \\"./_service-types\\";
",
  "/package.json": "{
    \\"name\\": \\"posts\\",
    \\"version\\": \\"0.0.0\\",
    \\"main\\": \\"./index.js\\",
    \\"types\\": \\"./index.d.ts\\",
    \\"scripts\\": {
        \\"build\\": \\"esbuild $(find . -name '*.ts' -not -path './node_modules/*') --format=cjs --sourcemap --outdir=. && tsc\\"
    },
    \\"dependencies\\": {
        \\"uuid\\": \\"8.3.2\\",
        \\"@types/uuid\\": \\"8.3.4\\",
        \\"@fern-typescript/service-utils\\": \\"0.0.114\\",
        \\"express\\": \\"4.18.1\\",
        \\"@types/express\\": \\"4.17.13\\"
    },
    \\"peerDependencies\\": {
        \\"express\\": \\"*\\",
        \\"@types/express\\": \\"*\\"
    },
    \\"devDependencies\\": {
        \\"@types/node\\": \\"17.0.33\\",
        \\"esbuild\\": \\"0.14.47\\",
        \\"typescript\\": \\"4.6.4\\"
    }
}",
  "/services/PostsService.ts": "import * as model from \\"../model\\";
import { MaybePromise, Token } from \\"@fern-typescript/service-utils\\";
import express, { Express } from \\"express\\";

export interface PostsService {
    createPost(request: model.CreatePostRequest): MaybePromise<model.CreatePostResponse>;
    getPost(token: Token, request: model.GetPostRequest): MaybePromise<model.GetPostResponse>;
    getPostV2(token: Token, request: model.PostId): MaybePromise<model.GetPostV2Response>;
    deletePost(token: Token, request: model.DeletePostRequest): MaybePromise<model.DeletePostResponse>;
    noopWithAuth(token: Token): MaybePromise<model.NoopWithAuthResponse>;
    noopWithoutAuth(): MaybePromise<model.NoopWithoutAuthResponse>;
}

export const PostsService = {
    expressMiddleware: (impl: PostsService): Express => {
        const app = express();
        app.use(express.json());
        app.post(\\"/posts/\\", async (request, response) => {
            const result = await impl.createPost(request.body);
            if (result.ok) {
                response.send(result.body);
            }
            else {
                response.sendStatus(500);
            }
        });
        app.get(\\"/posts/:postId\\", async (request, response) => {
            const result = await impl.getPost(Token.fromAuthorizationHeader(request.headers[\\"Authorization\\"] as string), {
                postId: model.PostId.of(request.params.postId),
                page: request.query.page != null ? Number(request.query.page) : undefined,
                otherParam: Number(request.query.otherParam)
            });
            if (result.ok) {
                response.send(result.body);
            }
            else {
                const statusCode = model.GetPostErrorBody._visit(result.error, {
                    PostNotFoundError: () => 404,
                    _unknown: () => 500
                });
                response.status(statusCode).send(result.error);
            }
        });
        app.get(\\"/posts/get\\", async (request, response) => {
            const result = await impl.getPostV2(Token.fromAuthorizationHeader(request.headers[\\"Authorization\\"] as string), request.body);
            if (result.ok) {
                response.send(result.body);
            }
            else {
                const statusCode = model.GetPostV2ErrorBody._visit(result.error, {
                    PostNotFoundError: () => 404,
                    _unknown: () => 500
                });
                response.status(statusCode).send(result.error);
            }
        });
        app.delete(\\"/posts/:postId\\", async (request, response) => {
            const result = await impl.deletePost(Token.fromAuthorizationHeader(request.headers[\\"Authorization\\"] as string), {
                postId: model.PostId.of(request.params.postId)
            });
            if (result.ok) {
                response.end();
            }
            else {
                response.sendStatus(500);
            }
        });
        app.get(\\"/posts/\\", async (request, response) => {
            const result = await impl.noopWithAuth(Token.fromAuthorizationHeader(request.headers[\\"Authorization\\"] as string));
            if (result.ok) {
                response.end();
            }
            else {
                response.sendStatus(500);
            }
        });
        app.get(\\"/posts/\\", async (_request, response) => {
            const result = await impl.noopWithoutAuth();
            if (result.ok) {
                response.end();
            }
            else {
                response.sendStatus(500);
            }
        });
        return app;
    }
};
",
  "/services/index.ts": "export * from \\"./PostsService\\";
",
  "/tsconfig.json": "{
    \\"compilerOptions\\": {
        \\"strict\\": true,
        \\"skipLibCheck\\": true,
        \\"declaration\\": true,
        \\"sourceMap\\": true,
        \\"emitDeclarationOnly\\": true,
        \\"esModuleInterop\\": true,
        \\"noUncheckedIndexedAccess\\": true,
        \\"noUnusedLocals\\": true,
        \\"noUnusedParameters\\": true
    }
}",
}
`;
