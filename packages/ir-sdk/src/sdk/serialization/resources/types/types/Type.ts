/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as FernIr from "../../../../api";
import * as core from "../../../../core";

export const Type: core.serialization.Schema<serializers.Type.Raw, FernIr.Type> = core.serialization
    .union(core.serialization.discriminant("type", "_type"), {
        alias: core.serialization.lazyObject(async () => (await import("../../..")).AliasTypeDeclaration),
        enum: core.serialization.lazyObject(async () => (await import("../../..")).EnumTypeDeclaration),
        object: core.serialization.lazyObject(async () => (await import("../../..")).ObjectTypeDeclaration),
        union: core.serialization.lazyObject(async () => (await import("../../..")).UnionTypeDeclaration),
        undiscriminatedUnion: core.serialization.lazyObject(
            async () => (await import("../../..")).UndiscriminatedUnionTypeDeclaration
        ),
    })
    .transform<FernIr.Type>({
        transform: (value) => {
            switch (value.type) {
                case "alias":
                    return FernIr.Type.alias(value);
                case "enum":
                    return FernIr.Type.enum(value);
                case "object":
                    return FernIr.Type.object(value);
                case "union":
                    return FernIr.Type.union(value);
                case "undiscriminatedUnion":
                    return FernIr.Type.undiscriminatedUnion(value);
                default:
                    return value as FernIr.Type;
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace Type {
    type Raw = Type.Alias | Type.Enum | Type.Object | Type.Union | Type.UndiscriminatedUnion;

    interface Alias extends serializers.AliasTypeDeclaration.Raw {
        _type: "alias";
    }

    interface Enum extends serializers.EnumTypeDeclaration.Raw {
        _type: "enum";
    }

    interface Object extends serializers.ObjectTypeDeclaration.Raw {
        _type: "object";
    }

    interface Union extends serializers.UnionTypeDeclaration.Raw {
        _type: "union";
    }

    interface UndiscriminatedUnion extends serializers.UndiscriminatedUnionTypeDeclaration.Raw {
        _type: "undiscriminatedUnion";
    }
}
