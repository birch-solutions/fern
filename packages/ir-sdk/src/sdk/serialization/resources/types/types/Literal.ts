/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as FernIr from "../../../../api";
import * as core from "../../../../core";

export const Literal: core.serialization.Schema<serializers.Literal.Raw, FernIr.Literal> = core.serialization
    .union("type", {
        string: core.serialization.object({
            string: core.serialization.string(),
        }),
        boolean: core.serialization.object({
            boolean: core.serialization.boolean(),
        }),
    })
    .transform<FernIr.Literal>({
        transform: (value) => {
            switch (value.type) {
                case "string":
                    return FernIr.Literal.string(value.string);
                case "boolean":
                    return FernIr.Literal.boolean(value.boolean);
                default:
                    return value as FernIr.Literal;
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace Literal {
    type Raw = Literal.String | Literal.Boolean;

    interface String {
        type: "string";
        string: string;
    }

    interface Boolean {
        type: "boolean";
        boolean: boolean;
    }
}
