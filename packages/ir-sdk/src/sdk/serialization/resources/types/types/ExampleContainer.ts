/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as FernIr from "../../../../api";
import * as core from "../../../../core";

export const ExampleContainer: core.serialization.Schema<serializers.ExampleContainer.Raw, FernIr.ExampleContainer> =
    core.serialization
        .union("type", {
            list: core.serialization.object({
                list: core.serialization.list(
                    core.serialization.lazyObject(async () => (await import("../../..")).ExampleTypeReference)
                ),
            }),
            set: core.serialization.object({
                set: core.serialization.list(
                    core.serialization.lazyObject(async () => (await import("../../..")).ExampleTypeReference)
                ),
            }),
            optional: core.serialization.object({
                optional: core.serialization
                    .lazyObject(async () => (await import("../../..")).ExampleTypeReference)
                    .optional(),
            }),
            map: core.serialization.object({
                map: core.serialization.list(
                    core.serialization.lazyObject(async () => (await import("../../..")).ExampleKeyValuePair)
                ),
            }),
        })
        .transform<FernIr.ExampleContainer>({
            transform: (value) => {
                switch (value.type) {
                    case "list":
                        return FernIr.ExampleContainer.list(value.list);
                    case "set":
                        return FernIr.ExampleContainer.set(value.set);
                    case "optional":
                        return FernIr.ExampleContainer.optional(value.optional);
                    case "map":
                        return FernIr.ExampleContainer.map(value.map);
                    default:
                        return value as FernIr.ExampleContainer;
                }
            },
            untransform: ({ _visit, ...value }) => value as any,
        });

export declare namespace ExampleContainer {
    type Raw = ExampleContainer.List | ExampleContainer.Set | ExampleContainer.Optional | ExampleContainer.Map;

    interface List {
        type: "list";
        list: serializers.ExampleTypeReference.Raw[];
    }

    interface Set {
        type: "set";
        set: serializers.ExampleTypeReference.Raw[];
    }

    interface Optional {
        type: "optional";
        optional?: serializers.ExampleTypeReference.Raw | null;
    }

    interface Map {
        type: "map";
        map: serializers.ExampleKeyValuePair.Raw[];
    }
}
