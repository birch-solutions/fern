/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as FernIr from "../../../../api";
import * as core from "../../../../core";

export const PrimitiveTypeRules: core.serialization.Schema<
    serializers.PrimitiveTypeRules.Raw,
    FernIr.PrimitiveTypeRules
> = core.serialization
    .union("type", {
        integer: core.serialization.lazyObject(async () => (await import("../../..")).IntegerTypeRules),
        string: core.serialization.lazyObject(async () => (await import("../../..")).StringTypeRules),
    })
    .transform<FernIr.PrimitiveTypeRules>({
        transform: (value) => {
            switch (value.type) {
                case "integer":
                    return FernIr.PrimitiveTypeRules.integer(value);
                case "string":
                    return FernIr.PrimitiveTypeRules.string(value);
                default:
                    return value as FernIr.PrimitiveTypeRules;
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace PrimitiveTypeRules {
    type Raw = PrimitiveTypeRules.Integer | PrimitiveTypeRules.String;

    interface Integer extends serializers.IntegerTypeRules.Raw {
        type: "integer";
    }

    interface String extends serializers.StringTypeRules.Raw {
        type: "string";
    }
}
