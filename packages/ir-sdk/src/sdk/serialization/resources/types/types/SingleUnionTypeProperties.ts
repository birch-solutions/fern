/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as FernIr from "../../../../api";
import * as core from "../../../../core";

export const SingleUnionTypeProperties: core.serialization.Schema<
    serializers.SingleUnionTypeProperties.Raw,
    FernIr.SingleUnionTypeProperties
> = core.serialization
    .union(core.serialization.discriminant("propertiesType", "_type"), {
        samePropertiesAsObject: core.serialization.lazyObject(async () => (await import("../../..")).DeclaredTypeName),
        singleProperty: core.serialization.lazyObject(async () => (await import("../../..")).SingleUnionTypeProperty),
        noProperties: core.serialization.object({}),
    })
    .transform<FernIr.SingleUnionTypeProperties>({
        transform: (value) => {
            switch (value.propertiesType) {
                case "samePropertiesAsObject":
                    return FernIr.SingleUnionTypeProperties.samePropertiesAsObject(value);
                case "singleProperty":
                    return FernIr.SingleUnionTypeProperties.singleProperty(value);
                case "noProperties":
                    return FernIr.SingleUnionTypeProperties.noProperties();
                default:
                    return value as FernIr.SingleUnionTypeProperties;
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace SingleUnionTypeProperties {
    type Raw =
        | SingleUnionTypeProperties.SamePropertiesAsObject
        | SingleUnionTypeProperties.SingleProperty
        | SingleUnionTypeProperties.NoProperties;

    interface SamePropertiesAsObject extends serializers.DeclaredTypeName.Raw {
        _type: "samePropertiesAsObject";
    }

    interface SingleProperty extends serializers.SingleUnionTypeProperty.Raw {
        _type: "singleProperty";
    }

    interface NoProperties {
        _type: "noProperties";
    }
}
