/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as FernIr from "../../../../api";
import * as core from "../../../../core";

export const SingleUnionType: core.serialization.ObjectSchema<serializers.SingleUnionType.Raw, FernIr.SingleUnionType> =
    core.serialization
        .objectWithoutOptionalProperties({
            discriminantValue: core.serialization.lazyObject(async () => (await import("../../..")).NameAndWireValue),
            shape: core.serialization.lazy(async () => (await import("../../..")).SingleUnionTypeProperties),
        })
        .extend(core.serialization.lazyObject(async () => (await import("../../..")).WithDocs));

export declare namespace SingleUnionType {
    interface Raw extends serializers.WithDocs.Raw {
        discriminantValue: serializers.NameAndWireValue.Raw;
        shape: serializers.SingleUnionTypeProperties.Raw;
    }
}
