/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as FernIr from "../../../../api/index";
import * as core from "../../../../core";

export const WellKnownProtobufType: core.serialization.Schema<
    serializers.WellKnownProtobufType.Raw,
    FernIr.WellKnownProtobufType
> = core.serialization
    .union("type", {
        any: core.serialization.object({}),
        api: core.serialization.object({}),
        boolValue: core.serialization.object({}),
        bytesValue: core.serialization.object({}),
        doubleValue: core.serialization.object({}),
        duration: core.serialization.object({}),
        empty: core.serialization.object({}),
        enum: core.serialization.object({}),
        enumValue: core.serialization.object({}),
        field: core.serialization.object({}),
        fieldCardinality: core.serialization.object({}),
        fieldKind: core.serialization.object({}),
        fieldMask: core.serialization.object({}),
        floatValue: core.serialization.object({}),
        int32Value: core.serialization.object({}),
        int64Value: core.serialization.object({}),
        listValue: core.serialization.object({}),
        method: core.serialization.object({}),
        mixin: core.serialization.object({}),
        nullValue: core.serialization.object({}),
        option: core.serialization.object({}),
        sourceContext: core.serialization.object({}),
        stringValue: core.serialization.object({}),
        struct: core.serialization.object({}),
        syntax: core.serialization.object({}),
        timestamp: core.serialization.object({}),
        type: core.serialization.object({}),
        uint32Value: core.serialization.object({}),
        uint64Value: core.serialization.object({}),
        value: core.serialization.object({}),
    })
    .transform<FernIr.WellKnownProtobufType>({
        transform: (value) => {
            switch (value.type) {
                case "any":
                    return FernIr.WellKnownProtobufType.any();
                case "api":
                    return FernIr.WellKnownProtobufType.api();
                case "boolValue":
                    return FernIr.WellKnownProtobufType.boolValue();
                case "bytesValue":
                    return FernIr.WellKnownProtobufType.bytesValue();
                case "doubleValue":
                    return FernIr.WellKnownProtobufType.doubleValue();
                case "duration":
                    return FernIr.WellKnownProtobufType.duration();
                case "empty":
                    return FernIr.WellKnownProtobufType.empty();
                case "enum":
                    return FernIr.WellKnownProtobufType.enum();
                case "enumValue":
                    return FernIr.WellKnownProtobufType.enumValue();
                case "field":
                    return FernIr.WellKnownProtobufType.field();
                case "fieldCardinality":
                    return FernIr.WellKnownProtobufType.fieldCardinality();
                case "fieldKind":
                    return FernIr.WellKnownProtobufType.fieldKind();
                case "fieldMask":
                    return FernIr.WellKnownProtobufType.fieldMask();
                case "floatValue":
                    return FernIr.WellKnownProtobufType.floatValue();
                case "int32Value":
                    return FernIr.WellKnownProtobufType.int32Value();
                case "int64Value":
                    return FernIr.WellKnownProtobufType.int64Value();
                case "listValue":
                    return FernIr.WellKnownProtobufType.listValue();
                case "method":
                    return FernIr.WellKnownProtobufType.method();
                case "mixin":
                    return FernIr.WellKnownProtobufType.mixin();
                case "nullValue":
                    return FernIr.WellKnownProtobufType.nullValue();
                case "option":
                    return FernIr.WellKnownProtobufType.option();
                case "sourceContext":
                    return FernIr.WellKnownProtobufType.sourceContext();
                case "stringValue":
                    return FernIr.WellKnownProtobufType.stringValue();
                case "struct":
                    return FernIr.WellKnownProtobufType.struct();
                case "syntax":
                    return FernIr.WellKnownProtobufType.syntax();
                case "timestamp":
                    return FernIr.WellKnownProtobufType.timestamp();
                case "type":
                    return FernIr.WellKnownProtobufType.type();
                case "uint32Value":
                    return FernIr.WellKnownProtobufType.uint32Value();
                case "uint64Value":
                    return FernIr.WellKnownProtobufType.uint64Value();
                case "value":
                    return FernIr.WellKnownProtobufType.value();
                default:
                    return value as FernIr.WellKnownProtobufType;
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace WellKnownProtobufType {
    type Raw =
        | WellKnownProtobufType.Any
        | WellKnownProtobufType.Api
        | WellKnownProtobufType.BoolValue
        | WellKnownProtobufType.BytesValue
        | WellKnownProtobufType.DoubleValue
        | WellKnownProtobufType.Duration
        | WellKnownProtobufType.Empty
        | WellKnownProtobufType.Enum
        | WellKnownProtobufType.EnumValue
        | WellKnownProtobufType.Field
        | WellKnownProtobufType.FieldCardinality
        | WellKnownProtobufType.FieldKind
        | WellKnownProtobufType.FieldMask
        | WellKnownProtobufType.FloatValue
        | WellKnownProtobufType.Int32Value
        | WellKnownProtobufType.Int64Value
        | WellKnownProtobufType.ListValue
        | WellKnownProtobufType.Method
        | WellKnownProtobufType.Mixin
        | WellKnownProtobufType.NullValue
        | WellKnownProtobufType.Option
        | WellKnownProtobufType.SourceContext
        | WellKnownProtobufType.StringValue
        | WellKnownProtobufType.Struct
        | WellKnownProtobufType.Syntax
        | WellKnownProtobufType.Timestamp
        | WellKnownProtobufType.Type
        | WellKnownProtobufType.Uint32Value
        | WellKnownProtobufType.Uint64Value
        | WellKnownProtobufType.Value;

    interface Any {
        type: "any";
    }

    interface Api {
        type: "api";
    }

    interface BoolValue {
        type: "boolValue";
    }

    interface BytesValue {
        type: "bytesValue";
    }

    interface DoubleValue {
        type: "doubleValue";
    }

    interface Duration {
        type: "duration";
    }

    interface Empty {
        type: "empty";
    }

    interface Enum {
        type: "enum";
    }

    interface EnumValue {
        type: "enumValue";
    }

    interface Field {
        type: "field";
    }

    interface FieldCardinality {
        type: "fieldCardinality";
    }

    interface FieldKind {
        type: "fieldKind";
    }

    interface FieldMask {
        type: "fieldMask";
    }

    interface FloatValue {
        type: "floatValue";
    }

    interface Int32Value {
        type: "int32Value";
    }

    interface Int64Value {
        type: "int64Value";
    }

    interface ListValue {
        type: "listValue";
    }

    interface Method {
        type: "method";
    }

    interface Mixin {
        type: "mixin";
    }

    interface NullValue {
        type: "nullValue";
    }

    interface Option {
        type: "option";
    }

    interface SourceContext {
        type: "sourceContext";
    }

    interface StringValue {
        type: "stringValue";
    }

    interface Struct {
        type: "struct";
    }

    interface Syntax {
        type: "syntax";
    }

    interface Timestamp {
        type: "timestamp";
    }

    interface Type {
        type: "type";
    }

    interface Uint32Value {
        type: "uint32Value";
    }

    interface Uint64Value {
        type: "uint64Value";
    }

    interface Value {
        type: "value";
    }
}
