/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as FernIr from "../../../../api";
import * as core from "../../../../core";

export const Environments: core.serialization.Schema<serializers.Environments.Raw, FernIr.Environments> =
    core.serialization
        .union("type", {
            singleBaseUrl: core.serialization.lazyObject(
                async () => (await import("../../..")).SingleBaseUrlEnvironments
            ),
            multipleBaseUrls: core.serialization.lazyObject(
                async () => (await import("../../..")).MultipleBaseUrlsEnvironments
            ),
        })
        .transform<FernIr.Environments>({
            transform: (value) => {
                switch (value.type) {
                    case "singleBaseUrl":
                        return FernIr.Environments.singleBaseUrl(value);
                    case "multipleBaseUrls":
                        return FernIr.Environments.multipleBaseUrls(value);
                    default:
                        return value as FernIr.Environments;
                }
            },
            untransform: ({ _visit, ...value }) => value as any,
        });

export declare namespace Environments {
    type Raw = Environments.SingleBaseUrl | Environments.MultipleBaseUrls;

    interface SingleBaseUrl extends serializers.SingleBaseUrlEnvironments.Raw {
        type: "singleBaseUrl";
    }

    interface MultipleBaseUrls extends serializers.MultipleBaseUrlsEnvironments.Raw {
        type: "multipleBaseUrls";
    }
}
