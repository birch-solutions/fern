/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../index";
import * as FernIr from "../../../../../../api/index";
import * as core from "../../../../../../core";
import { Declaration } from "../../declaration/types/Declaration";
import { NameAndWireValue } from "../../../../commons/types/NameAndWireValue";

export const DiscriminatedUnionType: core.serialization.ObjectSchema<
    serializers.dynamic.DiscriminatedUnionType.Raw,
    FernIr.dynamic.DiscriminatedUnionType
> = core.serialization.objectWithoutOptionalProperties({
    declaration: Declaration,
    discriminant: NameAndWireValue,
    types: core.serialization.record(
        core.serialization.string(),
        core.serialization.lazy(() => serializers.dynamic.TypeReference)
    ),
});

export declare namespace DiscriminatedUnionType {
    interface Raw {
        declaration: Declaration.Raw;
        discriminant: NameAndWireValue.Raw;
        types: Record<string, serializers.dynamic.TypeReference.Raw>;
    }
}
