/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as FernIr from "../../../../api";
import * as core from "../../../../core";

export const WebSocketChannel: core.serialization.ObjectSchema<
    serializers.WebSocketChannel.Raw,
    FernIr.WebSocketChannel
> = core.serialization
    .objectWithoutOptionalProperties({
        path: core.serialization.lazyObject(async () => (await import("../../..")).HttpPath),
        auth: core.serialization.boolean(),
        headers: core.serialization.list(
            core.serialization.lazyObject(async () => (await import("../../..")).HttpHeader)
        ),
        queryParameters: core.serialization.list(
            core.serialization.lazyObject(async () => (await import("../../..")).QueryParameter)
        ),
        pathParameters: core.serialization.list(
            core.serialization.lazyObject(async () => (await import("../../..")).PathParameter)
        ),
        messages: core.serialization.record(
            core.serialization.lazy(async () => (await import("../../..")).WebSocketMessageId),
            core.serialization.lazyObject(async () => (await import("../../..")).WebSocketMessage)
        ),
        examples: core.serialization.list(
            core.serialization.lazyObject(async () => (await import("../../..")).ExampleWebSocketSession)
        ),
    })
    .extend(core.serialization.lazyObject(async () => (await import("../../..")).Declaration));

export declare namespace WebSocketChannel {
    interface Raw extends serializers.Declaration.Raw {
        path: serializers.HttpPath.Raw;
        auth: boolean;
        headers: serializers.HttpHeader.Raw[];
        queryParameters: serializers.QueryParameter.Raw[];
        pathParameters: serializers.PathParameter.Raw[];
        messages: Record<serializers.WebSocketMessageId.Raw, serializers.WebSocketMessage.Raw>;
        examples: serializers.ExampleWebSocketSession.Raw[];
    }
}
