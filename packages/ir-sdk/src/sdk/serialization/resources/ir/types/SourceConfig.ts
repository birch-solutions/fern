/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as FernIr from "../../../../api";
import * as core from "../../../../core";

export const SourceConfig: core.serialization.Schema<serializers.SourceConfig.Raw, FernIr.SourceConfig> =
    core.serialization
        .union("type", {
            proto: core.serialization.lazyObject(async () => (await import("../../..")).ProtoSourceConfig),
        })
        .transform<FernIr.SourceConfig>({
            transform: (value) => {
                switch (value.type) {
                    case "proto":
                        return FernIr.SourceConfig.proto(value);
                    default:
                        return value as FernIr.SourceConfig;
                }
            },
            untransform: ({ _visit, ...value }) => value as any,
        });

export declare namespace SourceConfig {
    type Raw = SourceConfig.Proto;

    interface Proto extends serializers.ProtoSourceConfig.Raw {
        type: "proto";
    }
}
