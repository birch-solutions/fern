/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as FernIr from "../../../../api";
import * as core from "../../../../core";

export const ErrorDiscriminationStrategy: core.serialization.Schema<
    serializers.ErrorDiscriminationStrategy.Raw,
    FernIr.ErrorDiscriminationStrategy
> = core.serialization
    .union("type", {
        statusCode: core.serialization.object({}),
        property: core.serialization.lazyObject(
            async () => (await import("../../..")).ErrorDiscriminationByPropertyStrategy
        ),
    })
    .transform<FernIr.ErrorDiscriminationStrategy>({
        transform: (value) => {
            switch (value.type) {
                case "statusCode":
                    return FernIr.ErrorDiscriminationStrategy.statusCode();
                case "property":
                    return FernIr.ErrorDiscriminationStrategy.property(value);
                default:
                    return value as FernIr.ErrorDiscriminationStrategy;
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace ErrorDiscriminationStrategy {
    type Raw = ErrorDiscriminationStrategy.StatusCode | ErrorDiscriminationStrategy.Property;

    interface StatusCode {
        type: "statusCode";
    }

    interface Property extends serializers.ErrorDiscriminationByPropertyStrategy.Raw {
        type: "property";
    }
}
