/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as FernIr from "../../../../api";
import * as core from "../../../../core";

export const HeaderAuthScheme: core.serialization.ObjectSchema<
    serializers.HeaderAuthScheme.Raw,
    FernIr.HeaderAuthScheme
> = core.serialization
    .objectWithoutOptionalProperties({
        name: core.serialization.lazyObject(async () => (await import("../../..")).NameAndWireValue),
        valueType: core.serialization.lazy(async () => (await import("../../..")).TypeReference),
        prefix: core.serialization.string().optional(),
        headerEnvVar: core.serialization.lazy(async () => (await import("../../..")).EnvironmentVariable).optional(),
    })
    .extend(core.serialization.lazyObject(async () => (await import("../../..")).WithDocs));

export declare namespace HeaderAuthScheme {
    interface Raw extends serializers.WithDocs.Raw {
        name: serializers.NameAndWireValue.Raw;
        valueType: serializers.TypeReference.Raw;
        prefix?: string | null;
        headerEnvVar?: serializers.EnvironmentVariable.Raw | null;
    }
}
