/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as FernIr from "../../../../api";
import * as core from "../../../../core";

export const PathParameter: core.serialization.ObjectSchema<serializers.PathParameter.Raw, FernIr.PathParameter> =
    core.serialization
        .objectWithoutOptionalProperties({
            name: core.serialization.lazyObject(async () => (await import("../../..")).Name),
            valueType: core.serialization.lazy(async () => (await import("../../..")).TypeReference),
            location: core.serialization.lazy(async () => (await import("../../..")).PathParameterLocation),
            variable: core.serialization.lazy(async () => (await import("../../..")).VariableId).optional(),
        })
        .extend(core.serialization.lazyObject(async () => (await import("../../..")).WithDocs));

export declare namespace PathParameter {
    interface Raw extends serializers.WithDocs.Raw {
        name: serializers.Name.Raw;
        valueType: serializers.TypeReference.Raw;
        location: serializers.PathParameterLocation.Raw;
        variable?: serializers.VariableId.Raw | null;
    }
}
