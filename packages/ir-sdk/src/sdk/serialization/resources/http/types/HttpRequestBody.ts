/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as FernIr from "../../../../api";
import * as core from "../../../../core";

export const HttpRequestBody: core.serialization.Schema<serializers.HttpRequestBody.Raw, FernIr.HttpRequestBody> =
    core.serialization
        .union("type", {
            inlinedRequestBody: core.serialization.lazyObject(
                async () => (await import("../../..")).InlinedRequestBody
            ),
            reference: core.serialization.lazyObject(async () => (await import("../../..")).HttpRequestBodyReference),
            fileUpload: core.serialization.lazyObject(async () => (await import("../../..")).FileUploadRequest),
            bytes: core.serialization.lazyObject(async () => (await import("../../..")).BytesRequest),
        })
        .transform<FernIr.HttpRequestBody>({
            transform: (value) => {
                switch (value.type) {
                    case "inlinedRequestBody":
                        return FernIr.HttpRequestBody.inlinedRequestBody(value);
                    case "reference":
                        return FernIr.HttpRequestBody.reference(value);
                    case "fileUpload":
                        return FernIr.HttpRequestBody.fileUpload(value);
                    case "bytes":
                        return FernIr.HttpRequestBody.bytes(value);
                    default:
                        return value as FernIr.HttpRequestBody;
                }
            },
            untransform: ({ _visit, ...value }) => value as any,
        });

export declare namespace HttpRequestBody {
    type Raw =
        | HttpRequestBody.InlinedRequestBody
        | HttpRequestBody.Reference
        | HttpRequestBody.FileUpload
        | HttpRequestBody.Bytes;

    interface InlinedRequestBody extends serializers.InlinedRequestBody.Raw {
        type: "inlinedRequestBody";
    }

    interface Reference extends serializers.HttpRequestBodyReference.Raw {
        type: "reference";
    }

    interface FileUpload extends serializers.FileUploadRequest.Raw {
        type: "fileUpload";
    }

    interface Bytes extends serializers.BytesRequest.Raw {
        type: "bytes";
    }
}
