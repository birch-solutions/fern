/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as FernIr from "../../../../api";
import * as core from "../../../../core";

export const StreamingResponseChunkType: core.serialization.Schema<
    serializers.StreamingResponseChunkType.Raw,
    FernIr.StreamingResponseChunkType
> = core.serialization
    .union("type", {
        json: core.serialization.object({
            json: core.serialization.lazy(async () => (await import("../../..")).TypeReference),
        }),
        text: core.serialization.object({}),
    })
    .transform<FernIr.StreamingResponseChunkType>({
        transform: (value) => {
            switch (value.type) {
                case "json":
                    return FernIr.StreamingResponseChunkType.json(value.json);
                case "text":
                    return FernIr.StreamingResponseChunkType.text();
                default:
                    return value as FernIr.StreamingResponseChunkType;
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace StreamingResponseChunkType {
    type Raw = StreamingResponseChunkType.Json | StreamingResponseChunkType.Text;

    interface Json {
        type: "json";
        json: serializers.TypeReference.Raw;
    }

    interface Text {
        type: "text";
    }
}
