/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as FernIr from "../../..";

export type SourceConfig = FernIr.SourceConfig.Proto;

export declare namespace SourceConfig {
    interface Proto extends FernIr.ProtoSourceConfig, _Utils {
        type: "proto";
    }

    interface _Utils {
        _visit: <_Result>(visitor: FernIr.SourceConfig._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        proto: (value: FernIr.ProtoSourceConfig) => _Result;
        _other: (value: { type: string }) => _Result;
    }
}

export const SourceConfig = {
    proto: (value: FernIr.ProtoSourceConfig): FernIr.SourceConfig.Proto => {
        return {
            ...value,
            type: "proto",
            _visit: function <_Result>(
                this: FernIr.SourceConfig.Proto,
                visitor: FernIr.SourceConfig._Visitor<_Result>
            ) {
                return FernIr.SourceConfig._visit(this, visitor);
            },
        };
    },

    _visit: <_Result>(value: FernIr.SourceConfig, visitor: FernIr.SourceConfig._Visitor<_Result>): _Result => {
        switch (value.type) {
            case "proto":
                return visitor.proto(value);
            default:
                return visitor._other(value as any);
        }
    },
} as const;
