/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as FernIr from "../../..";

export type ExampleContainer =
    | FernIr.ExampleContainer.List
    | FernIr.ExampleContainer.Set
    | FernIr.ExampleContainer.Optional
    | FernIr.ExampleContainer.Map;

export declare namespace ExampleContainer {
    interface List extends _Utils {
        type: "list";
        list: FernIr.ExampleTypeReference[];
    }

    interface Set extends _Utils {
        type: "set";
        set: FernIr.ExampleTypeReference[];
    }

    interface Optional extends _Utils {
        type: "optional";
        optional: FernIr.ExampleTypeReference | undefined;
    }

    interface Map extends _Utils {
        type: "map";
        map: FernIr.ExampleKeyValuePair[];
    }

    interface _Utils {
        _visit: <_Result>(visitor: FernIr.ExampleContainer._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        list: (value: FernIr.ExampleTypeReference[]) => _Result;
        set: (value: FernIr.ExampleTypeReference[]) => _Result;
        optional: (value: FernIr.ExampleTypeReference | undefined) => _Result;
        map: (value: FernIr.ExampleKeyValuePair[]) => _Result;
        _other: (value: { type: string }) => _Result;
    }
}

export const ExampleContainer = {
    list: (value: FernIr.ExampleTypeReference[]): FernIr.ExampleContainer.List => {
        return {
            list: value,
            type: "list",
            _visit: function <_Result>(
                this: FernIr.ExampleContainer.List,
                visitor: FernIr.ExampleContainer._Visitor<_Result>
            ) {
                return FernIr.ExampleContainer._visit(this, visitor);
            },
        };
    },

    set: (value: FernIr.ExampleTypeReference[]): FernIr.ExampleContainer.Set => {
        return {
            set: value,
            type: "set",
            _visit: function <_Result>(
                this: FernIr.ExampleContainer.Set,
                visitor: FernIr.ExampleContainer._Visitor<_Result>
            ) {
                return FernIr.ExampleContainer._visit(this, visitor);
            },
        };
    },

    optional: (value?: FernIr.ExampleTypeReference): FernIr.ExampleContainer.Optional => {
        return {
            optional: value,
            type: "optional",
            _visit: function <_Result>(
                this: FernIr.ExampleContainer.Optional,
                visitor: FernIr.ExampleContainer._Visitor<_Result>
            ) {
                return FernIr.ExampleContainer._visit(this, visitor);
            },
        };
    },

    map: (value: FernIr.ExampleKeyValuePair[]): FernIr.ExampleContainer.Map => {
        return {
            map: value,
            type: "map",
            _visit: function <_Result>(
                this: FernIr.ExampleContainer.Map,
                visitor: FernIr.ExampleContainer._Visitor<_Result>
            ) {
                return FernIr.ExampleContainer._visit(this, visitor);
            },
        };
    },

    _visit: <_Result>(value: FernIr.ExampleContainer, visitor: FernIr.ExampleContainer._Visitor<_Result>): _Result => {
        switch (value.type) {
            case "list":
                return visitor.list(value.list);
            case "set":
                return visitor.set(value.set);
            case "optional":
                return visitor.optional(value.optional);
            case "map":
                return visitor.map(value.map);
            default:
                return visitor._other(value as any);
        }
    },
} as const;
