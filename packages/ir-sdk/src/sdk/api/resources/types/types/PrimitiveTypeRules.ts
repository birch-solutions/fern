/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as FernIr from "../../..";

export type PrimitiveTypeRules = FernIr.PrimitiveTypeRules.Integer | FernIr.PrimitiveTypeRules.String;

export declare namespace PrimitiveTypeRules {
    interface Integer extends FernIr.IntegerTypeRules, _Utils {
        type: "integer";
    }

    interface String extends FernIr.StringTypeRules, _Utils {
        type: "string";
    }

    interface _Utils {
        _visit: <_Result>(visitor: FernIr.PrimitiveTypeRules._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        integer: (value: FernIr.IntegerTypeRules) => _Result;
        string: (value: FernIr.StringTypeRules) => _Result;
        _other: (value: { type: string }) => _Result;
    }
}

export const PrimitiveTypeRules = {
    integer: (value: FernIr.IntegerTypeRules): FernIr.PrimitiveTypeRules.Integer => {
        return {
            ...value,
            type: "integer",
            _visit: function <_Result>(
                this: FernIr.PrimitiveTypeRules.Integer,
                visitor: FernIr.PrimitiveTypeRules._Visitor<_Result>
            ) {
                return FernIr.PrimitiveTypeRules._visit(this, visitor);
            },
        };
    },

    string: (value: FernIr.StringTypeRules): FernIr.PrimitiveTypeRules.String => {
        return {
            ...value,
            type: "string",
            _visit: function <_Result>(
                this: FernIr.PrimitiveTypeRules.String,
                visitor: FernIr.PrimitiveTypeRules._Visitor<_Result>
            ) {
                return FernIr.PrimitiveTypeRules._visit(this, visitor);
            },
        };
    },

    _visit: <_Result>(
        value: FernIr.PrimitiveTypeRules,
        visitor: FernIr.PrimitiveTypeRules._Visitor<_Result>
    ): _Result => {
        switch (value.type) {
            case "integer":
                return visitor.integer(value);
            case "string":
                return visitor.string(value);
            default:
                return visitor._other(value as any);
        }
    },
} as const;
