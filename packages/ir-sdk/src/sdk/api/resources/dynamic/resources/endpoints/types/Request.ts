/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as FernIr from "../../../../../index";

/**
 * Reperesents the request parameters required to call a specific endpoiont.
 */
export type Request = FernIr.dynamic.Request.Body | FernIr.dynamic.Request.Inlined;

export declare namespace Request {
    interface Body extends FernIr.dynamic.BodyRequest, _Utils {
        type: "body";
    }

    interface Inlined extends FernIr.dynamic.InlinedRequest, _Utils {
        type: "inlined";
    }

    interface _Utils {
        _visit: <_Result>(visitor: FernIr.dynamic.Request._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        body: (value: FernIr.dynamic.BodyRequest) => _Result;
        inlined: (value: FernIr.dynamic.InlinedRequest) => _Result;
        _other: (value: { type: string }) => _Result;
    }
}

export const Request = {
    body: (value: FernIr.dynamic.BodyRequest): FernIr.dynamic.Request.Body => {
        return {
            ...value,
            type: "body",
            _visit: function <_Result>(
                this: FernIr.dynamic.Request.Body,
                visitor: FernIr.dynamic.Request._Visitor<_Result>
            ) {
                return FernIr.dynamic.Request._visit(this, visitor);
            },
        };
    },

    inlined: (value: FernIr.dynamic.InlinedRequest): FernIr.dynamic.Request.Inlined => {
        return {
            ...value,
            type: "inlined",
            _visit: function <_Result>(
                this: FernIr.dynamic.Request.Inlined,
                visitor: FernIr.dynamic.Request._Visitor<_Result>
            ) {
                return FernIr.dynamic.Request._visit(this, visitor);
            },
        };
    },

    _visit: <_Result>(value: FernIr.dynamic.Request, visitor: FernIr.dynamic.Request._Visitor<_Result>): _Result => {
        switch (value.type) {
            case "body":
                return visitor.body(value);
            case "inlined":
                return visitor.inlined(value);
            default:
                return visitor._other(value as any);
        }
    },
} as const;
