/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as FernIr from "../../..";

export type HttpResponseBody =
    | FernIr.HttpResponseBody.Json
    | FernIr.HttpResponseBody.FileDownload
    | FernIr.HttpResponseBody.Text
    | FernIr.HttpResponseBody.Streaming;

export declare namespace HttpResponseBody {
    interface Json extends _Utils {
        type: "json";
        value: FernIr.JsonResponse;
    }

    interface FileDownload extends FernIr.FileDownloadResponse, _Utils {
        type: "fileDownload";
    }

    interface Text extends FernIr.TextResponse, _Utils {
        type: "text";
    }

    interface Streaming extends _Utils {
        type: "streaming";
        value: FernIr.StreamingResponse;
    }

    interface _Utils {
        _visit: <_Result>(visitor: FernIr.HttpResponseBody._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        json: (value: FernIr.JsonResponse) => _Result;
        fileDownload: (value: FernIr.FileDownloadResponse) => _Result;
        text: (value: FernIr.TextResponse) => _Result;
        streaming: (value: FernIr.StreamingResponse) => _Result;
        _other: (value: { type: string }) => _Result;
    }
}

export const HttpResponseBody = {
    json: (value: FernIr.JsonResponse): FernIr.HttpResponseBody.Json => {
        return {
            value: value,
            type: "json",
            _visit: function <_Result>(
                this: FernIr.HttpResponseBody.Json,
                visitor: FernIr.HttpResponseBody._Visitor<_Result>
            ) {
                return FernIr.HttpResponseBody._visit(this, visitor);
            },
        };
    },

    fileDownload: (value: FernIr.FileDownloadResponse): FernIr.HttpResponseBody.FileDownload => {
        return {
            ...value,
            type: "fileDownload",
            _visit: function <_Result>(
                this: FernIr.HttpResponseBody.FileDownload,
                visitor: FernIr.HttpResponseBody._Visitor<_Result>
            ) {
                return FernIr.HttpResponseBody._visit(this, visitor);
            },
        };
    },

    text: (value: FernIr.TextResponse): FernIr.HttpResponseBody.Text => {
        return {
            ...value,
            type: "text",
            _visit: function <_Result>(
                this: FernIr.HttpResponseBody.Text,
                visitor: FernIr.HttpResponseBody._Visitor<_Result>
            ) {
                return FernIr.HttpResponseBody._visit(this, visitor);
            },
        };
    },

    streaming: (value: FernIr.StreamingResponse): FernIr.HttpResponseBody.Streaming => {
        return {
            value: value,
            type: "streaming",
            _visit: function <_Result>(
                this: FernIr.HttpResponseBody.Streaming,
                visitor: FernIr.HttpResponseBody._Visitor<_Result>
            ) {
                return FernIr.HttpResponseBody._visit(this, visitor);
            },
        };
    },

    _visit: <_Result>(value: FernIr.HttpResponseBody, visitor: FernIr.HttpResponseBody._Visitor<_Result>): _Result => {
        switch (value.type) {
            case "json":
                return visitor.json(value.value);
            case "fileDownload":
                return visitor.fileDownload(value);
            case "text":
                return visitor.text(value);
            case "streaming":
                return visitor.streaming(value.value);
            default:
                return visitor._other(value as any);
        }
    },
} as const;
