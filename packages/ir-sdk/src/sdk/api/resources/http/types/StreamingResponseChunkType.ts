/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as FernIr from "../../..";

export type StreamingResponseChunkType =
    | FernIr.StreamingResponseChunkType.Json
    | FernIr.StreamingResponseChunkType.Text;

export declare namespace StreamingResponseChunkType {
    interface Json extends _Utils {
        type: "json";
        json: FernIr.TypeReference;
    }

    interface Text extends _Utils {
        type: "text";
    }

    interface _Utils {
        _visit: <_Result>(visitor: FernIr.StreamingResponseChunkType._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        json: (value: FernIr.TypeReference) => _Result;
        text: () => _Result;
        _other: (value: { type: string }) => _Result;
    }
}

export const StreamingResponseChunkType = {
    json: (value: FernIr.TypeReference): FernIr.StreamingResponseChunkType.Json => {
        return {
            json: value,
            type: "json",
            _visit: function <_Result>(
                this: FernIr.StreamingResponseChunkType.Json,
                visitor: FernIr.StreamingResponseChunkType._Visitor<_Result>
            ) {
                return FernIr.StreamingResponseChunkType._visit(this, visitor);
            },
        };
    },

    text: (): FernIr.StreamingResponseChunkType.Text => {
        return {
            type: "text",
            _visit: function <_Result>(
                this: FernIr.StreamingResponseChunkType.Text,
                visitor: FernIr.StreamingResponseChunkType._Visitor<_Result>
            ) {
                return FernIr.StreamingResponseChunkType._visit(this, visitor);
            },
        };
    },

    _visit: <_Result>(
        value: FernIr.StreamingResponseChunkType,
        visitor: FernIr.StreamingResponseChunkType._Visitor<_Result>
    ): _Result => {
        switch (value.type) {
            case "json":
                return visitor.json(value.json);
            case "text":
                return visitor.text();
            default:
                return visitor._other(value as any);
        }
    },
} as const;
