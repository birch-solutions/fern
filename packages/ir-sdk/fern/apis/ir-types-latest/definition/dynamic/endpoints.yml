imports:
  auth: ./auth.yml
  commons: ../commons.yml
  declaration: ./declaration.yml
  http: ../http.yml
  types: ./types.yml
types:
  EndpointLocation:
    docs: |
      Represents the endpoint location (e.g. "POST /users").
    properties:
      method: http.HttpMethod
      path: string

  Endpoint:
    properties:
      auth: optional<auth.Auth>
      declaration: declaration.Declaration
      location: EndpointLocation
      request: Request
      response: Response

  Request:
    docs: |
      Reperesents the request parameters required to call a specific endpoiont.
    union:
      body: BodyRequest
      inlined: InlinedRequest
  
  Response:
    docs: |
      Reperesents the response returned by a specific endpoint.
      
      For now, we only support unary responses, but this is set up to support a
      variety of other endpoint response types (e.g. file download, pagination,
      streaming, etc).
    union:
      unary: {}

  BodyRequest:
    properties:
      pathParameters: optional<list<types.NamedParameter>>
      body: optional<ReferencedRequestBodyType>
 
  InlinedRequest:
    properties:
      declaration: declaration.Declaration
      pathParameters: optional<list<types.NamedParameter>>
      queryParameters: optional<list<types.NamedParameter>>
      headers: optional<list<types.NamedParameter>>
      body: optional<InlinedRequestBody>

  InlinedRequestBody:
    union:
      properties: list<types.NamedParameter>
      referenced: ReferencedRequestBody
      fileUpload: FileUploadRequestBody
  
  ReferencedRequestBody:
    properties:
      bodyKey: commons.Name
      bodyType: ReferencedRequestBodyType

  ReferencedRequestBodyType:
    union:
      bytes: {}
      typeReference: types.TypeReference

  FileUploadRequestBody:
    properties:
      properties: list<FileUploadRequestBodyProperty>

  FileUploadRequestBodyProperty:
    union:
      file: commons.NameAndWireValue
      fileArray: commons.NameAndWireValue
      bodyProperty: types.NamedParameter
