/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core";
import * as SeedApi from "../../../index";
import * as serializers from "../../../../serialization/index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace Dataservice {
    interface Options {
        environment: core.Supplier<string>;
    }

    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}

export class Dataservice {
    constructor(protected readonly _options: Dataservice.Options) {}

    /**
     * @param {SeedApi.UploadRequest} request
     * @param {Dataservice.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.dataservice.upload({
     *         columns: [{
     *                 id: "id",
     *                 values: [1.1]
     *             }]
     *     })
     */
    public upload(
        request: SeedApi.UploadRequest,
        requestOptions?: Dataservice.RequestOptions
    ): core.APIPromise<SeedApi.UploadResponse> {
        return core.APIPromise.from(
            (async () => {
                const _response = await core.fetcher({
                    url: urlJoin(await core.Supplier.get(this._options.environment), "data"),
                    method: "POST",
                    headers: {
                        "X-Fern-Language": "JavaScript",
                        "X-Fern-SDK-Name": "@fern/grpc-proto-exhaustive",
                        "X-Fern-SDK-Version": "0.0.1",
                        "User-Agent": "@fern/grpc-proto-exhaustive/0.0.1",
                        "X-Fern-Runtime": core.RUNTIME.type,
                        "X-Fern-Runtime-Version": core.RUNTIME.version,
                    },
                    contentType: "application/json",
                    requestType: "json",
                    body: serializers.UploadRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        ok: _response.ok,
                        body: serializers.UploadResponse.parseOrThrow(_response.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        headers: _response.headers,
                    };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.SeedApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.SeedApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                        });
                    case "timeout":
                        throw new errors.SeedApiTimeoutError();
                    case "unknown":
                        throw new errors.SeedApiError({
                            message: _response.error.errorMessage,
                        });
                }
            })()
        );
    }

    /**
     * @param {SeedApi.DeleteRequest} request
     * @param {Dataservice.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.dataservice.delete()
     */
    public delete(
        request: SeedApi.DeleteRequest = {},
        requestOptions?: Dataservice.RequestOptions
    ): core.APIPromise<SeedApi.DeleteResponse> {
        return core.APIPromise.from(
            (async () => {
                const _response = await core.fetcher({
                    url: urlJoin(await core.Supplier.get(this._options.environment), "data/delete"),
                    method: "POST",
                    headers: {
                        "X-Fern-Language": "JavaScript",
                        "X-Fern-SDK-Name": "@fern/grpc-proto-exhaustive",
                        "X-Fern-SDK-Version": "0.0.1",
                        "User-Agent": "@fern/grpc-proto-exhaustive/0.0.1",
                        "X-Fern-Runtime": core.RUNTIME.type,
                        "X-Fern-Runtime-Version": core.RUNTIME.version,
                    },
                    contentType: "application/json",
                    requestType: "json",
                    body: serializers.DeleteRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        ok: _response.ok,
                        body: serializers.DeleteResponse.parseOrThrow(_response.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        headers: _response.headers,
                    };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.SeedApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.SeedApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                        });
                    case "timeout":
                        throw new errors.SeedApiTimeoutError();
                    case "unknown":
                        throw new errors.SeedApiError({
                            message: _response.error.errorMessage,
                        });
                }
            })()
        );
    }

    /**
     * @param {SeedApi.DescribeRequest} request
     * @param {Dataservice.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.dataservice.describe()
     */
    public describe(
        request: SeedApi.DescribeRequest = {},
        requestOptions?: Dataservice.RequestOptions
    ): core.APIPromise<SeedApi.DescribeResponse> {
        return core.APIPromise.from(
            (async () => {
                const _response = await core.fetcher({
                    url: urlJoin(await core.Supplier.get(this._options.environment), "data/describe"),
                    method: "POST",
                    headers: {
                        "X-Fern-Language": "JavaScript",
                        "X-Fern-SDK-Name": "@fern/grpc-proto-exhaustive",
                        "X-Fern-SDK-Version": "0.0.1",
                        "User-Agent": "@fern/grpc-proto-exhaustive/0.0.1",
                        "X-Fern-Runtime": core.RUNTIME.type,
                        "X-Fern-Runtime-Version": core.RUNTIME.version,
                    },
                    contentType: "application/json",
                    requestType: "json",
                    body: serializers.DescribeRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        ok: _response.ok,
                        body: serializers.DescribeResponse.parseOrThrow(_response.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        headers: _response.headers,
                    };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.SeedApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.SeedApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                        });
                    case "timeout":
                        throw new errors.SeedApiTimeoutError();
                    case "unknown":
                        throw new errors.SeedApiError({
                            message: _response.error.errorMessage,
                        });
                }
            })()
        );
    }

    /**
     * @param {SeedApi.FetchRequest} request
     * @param {Dataservice.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.dataservice.fetch()
     */
    public fetch(
        request: SeedApi.FetchRequest = {},
        requestOptions?: Dataservice.RequestOptions
    ): core.APIPromise<SeedApi.FetchResponse> {
        return core.APIPromise.from(
            (async () => {
                const { ids, namespace } = request;
                const _queryParams: Record<string, string | string[] | object | object[]> = {};
                if (ids != null) {
                    if (Array.isArray(ids)) {
                        _queryParams["ids"] = ids.map((item) => item);
                    } else {
                        _queryParams["ids"] = ids;
                    }
                }
                if (namespace != null) {
                    _queryParams["namespace"] = namespace;
                }
                const _response = await core.fetcher({
                    url: urlJoin(await core.Supplier.get(this._options.environment), "data/fetch"),
                    method: "GET",
                    headers: {
                        "X-Fern-Language": "JavaScript",
                        "X-Fern-SDK-Name": "@fern/grpc-proto-exhaustive",
                        "X-Fern-SDK-Version": "0.0.1",
                        "User-Agent": "@fern/grpc-proto-exhaustive/0.0.1",
                        "X-Fern-Runtime": core.RUNTIME.type,
                        "X-Fern-Runtime-Version": core.RUNTIME.version,
                    },
                    contentType: "application/json",
                    queryParameters: _queryParams,
                    requestType: "json",
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        ok: _response.ok,
                        body: serializers.FetchResponse.parseOrThrow(_response.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        headers: _response.headers,
                    };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.SeedApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.SeedApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                        });
                    case "timeout":
                        throw new errors.SeedApiTimeoutError();
                    case "unknown":
                        throw new errors.SeedApiError({
                            message: _response.error.errorMessage,
                        });
                }
            })()
        );
    }

    /**
     * @param {SeedApi.ListRequest} request
     * @param {Dataservice.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.dataservice.list()
     */
    public list(
        request: SeedApi.ListRequest = {},
        requestOptions?: Dataservice.RequestOptions
    ): core.APIPromise<SeedApi.ListResponse> {
        return core.APIPromise.from(
            (async () => {
                const { prefix, limit, paginationToken, namespace } = request;
                const _queryParams: Record<string, string | string[] | object | object[]> = {};
                if (prefix != null) {
                    _queryParams["prefix"] = prefix;
                }
                if (limit != null) {
                    _queryParams["limit"] = limit.toString();
                }
                if (paginationToken != null) {
                    _queryParams["paginationToken"] = paginationToken;
                }
                if (namespace != null) {
                    _queryParams["namespace"] = namespace;
                }
                const _response = await core.fetcher({
                    url: urlJoin(await core.Supplier.get(this._options.environment), "data/list"),
                    method: "GET",
                    headers: {
                        "X-Fern-Language": "JavaScript",
                        "X-Fern-SDK-Name": "@fern/grpc-proto-exhaustive",
                        "X-Fern-SDK-Version": "0.0.1",
                        "User-Agent": "@fern/grpc-proto-exhaustive/0.0.1",
                        "X-Fern-Runtime": core.RUNTIME.type,
                        "X-Fern-Runtime-Version": core.RUNTIME.version,
                    },
                    contentType: "application/json",
                    queryParameters: _queryParams,
                    requestType: "json",
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        ok: _response.ok,
                        body: serializers.ListResponse.parseOrThrow(_response.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        headers: _response.headers,
                    };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.SeedApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.SeedApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                        });
                    case "timeout":
                        throw new errors.SeedApiTimeoutError();
                    case "unknown":
                        throw new errors.SeedApiError({
                            message: _response.error.errorMessage,
                        });
                }
            })()
        );
    }

    /**
     * @param {SeedApi.QueryRequest} request
     * @param {Dataservice.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.dataservice.query({
     *         topK: 1
     *     })
     */
    public query(
        request: SeedApi.QueryRequest,
        requestOptions?: Dataservice.RequestOptions
    ): core.APIPromise<SeedApi.QueryResponse> {
        return core.APIPromise.from(
            (async () => {
                const _response = await core.fetcher({
                    url: urlJoin(await core.Supplier.get(this._options.environment), "data/query"),
                    method: "POST",
                    headers: {
                        "X-Fern-Language": "JavaScript",
                        "X-Fern-SDK-Name": "@fern/grpc-proto-exhaustive",
                        "X-Fern-SDK-Version": "0.0.1",
                        "User-Agent": "@fern/grpc-proto-exhaustive/0.0.1",
                        "X-Fern-Runtime": core.RUNTIME.type,
                        "X-Fern-Runtime-Version": core.RUNTIME.version,
                    },
                    contentType: "application/json",
                    requestType: "json",
                    body: serializers.QueryRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        ok: _response.ok,
                        body: serializers.QueryResponse.parseOrThrow(_response.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        headers: _response.headers,
                    };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.SeedApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.SeedApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                        });
                    case "timeout":
                        throw new errors.SeedApiTimeoutError();
                    case "unknown":
                        throw new errors.SeedApiError({
                            message: _response.error.errorMessage,
                        });
                }
            })()
        );
    }

    /**
     * @param {SeedApi.UpdateRequest} request
     * @param {Dataservice.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.dataservice.update({
     *         id: "id"
     *     })
     */
    public update(
        request: SeedApi.UpdateRequest,
        requestOptions?: Dataservice.RequestOptions
    ): core.APIPromise<SeedApi.UpdateResponse> {
        return core.APIPromise.from(
            (async () => {
                const _response = await core.fetcher({
                    url: urlJoin(await core.Supplier.get(this._options.environment), "data/update"),
                    method: "POST",
                    headers: {
                        "X-Fern-Language": "JavaScript",
                        "X-Fern-SDK-Name": "@fern/grpc-proto-exhaustive",
                        "X-Fern-SDK-Version": "0.0.1",
                        "User-Agent": "@fern/grpc-proto-exhaustive/0.0.1",
                        "X-Fern-Runtime": core.RUNTIME.type,
                        "X-Fern-Runtime-Version": core.RUNTIME.version,
                    },
                    contentType: "application/json",
                    requestType: "json",
                    body: serializers.UpdateRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        ok: _response.ok,
                        body: serializers.UpdateResponse.parseOrThrow(_response.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        headers: _response.headers,
                    };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.SeedApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.SeedApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                        });
                    case "timeout":
                        throw new errors.SeedApiTimeoutError();
                    case "unknown":
                        throw new errors.SeedApiError({
                            message: _response.error.errorMessage,
                        });
                }
            })()
        );
    }
}
