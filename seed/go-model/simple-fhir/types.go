// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/simple-fhir/fern/core"
)

type Account struct {
	Id               string          `json:"id" url:"id"`
	RelatedResources []*ResourceList `json:"related_resources,omitempty" url:"related_resources,omitempty"`
	Memo             *Memo           `json:"memo,omitempty" url:"memo,omitempty"`
	Name             string          `json:"name" url:"name"`
	Patient          *Patient        `json:"patient,omitempty" url:"patient,omitempty"`
	Practitioner     *Practitioner   `json:"practitioner,omitempty" url:"practitioner,omitempty"`
	resourceType     string

	extraProperties map[string]interface{}
}

func (a *Account) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *Account) ResourceType() string {
	return a.resourceType
}

func (a *Account) UnmarshalJSON(data []byte) error {
	type embed Account
	var unmarshaler = struct {
		embed
		ResourceType string `json:"resource_type"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = Account(unmarshaler.embed)
	if unmarshaler.ResourceType != "Account" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "Account", unmarshaler.ResourceType)
	}
	a.resourceType = unmarshaler.ResourceType

	extraProperties, err := core.ExtractExtraProperties(data, *a, "resource_type")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	return nil
}

func (a *Account) MarshalJSON() ([]byte, error) {
	type embed Account
	var marshaler = struct {
		embed
		ResourceType string `json:"resource_type"`
	}{
		embed:        embed(*a),
		ResourceType: "Account",
	}
	return json.Marshal(marshaler)
}

func (a *Account) String() string {
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type BaseResource struct {
	Id               string          `json:"id" url:"id"`
	RelatedResources []*ResourceList `json:"related_resources,omitempty" url:"related_resources,omitempty"`
	Memo             *Memo           `json:"memo,omitempty" url:"memo,omitempty"`

	extraProperties map[string]interface{}
}

func (b *BaseResource) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BaseResource) UnmarshalJSON(data []byte) error {
	type unmarshaler BaseResource
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BaseResource(value)

	extraProperties, err := core.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties

	return nil
}

func (b *BaseResource) String() string {
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type Memo struct {
	Description string   `json:"description" url:"description"`
	Account     *Account `json:"account,omitempty" url:"account,omitempty"`

	extraProperties map[string]interface{}
}

func (m *Memo) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *Memo) UnmarshalJSON(data []byte) error {
	type unmarshaler Memo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = Memo(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	return nil
}

func (m *Memo) String() string {
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type Patient struct {
	Id               string          `json:"id" url:"id"`
	RelatedResources []*ResourceList `json:"related_resources,omitempty" url:"related_resources,omitempty"`
	Memo             *Memo           `json:"memo,omitempty" url:"memo,omitempty"`
	Name             string          `json:"name" url:"name"`
	Scripts          []*Script       `json:"scripts,omitempty" url:"scripts,omitempty"`
	resourceType     string

	extraProperties map[string]interface{}
}

func (p *Patient) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *Patient) ResourceType() string {
	return p.resourceType
}

func (p *Patient) UnmarshalJSON(data []byte) error {
	type embed Patient
	var unmarshaler = struct {
		embed
		ResourceType string `json:"resource_type"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = Patient(unmarshaler.embed)
	if unmarshaler.ResourceType != "Patient" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", p, "Patient", unmarshaler.ResourceType)
	}
	p.resourceType = unmarshaler.ResourceType

	extraProperties, err := core.ExtractExtraProperties(data, *p, "resource_type")
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	return nil
}

func (p *Patient) MarshalJSON() ([]byte, error) {
	type embed Patient
	var marshaler = struct {
		embed
		ResourceType string `json:"resource_type"`
	}{
		embed:        embed(*p),
		ResourceType: "Patient",
	}
	return json.Marshal(marshaler)
}

func (p *Patient) String() string {
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type Practitioner struct {
	Id               string          `json:"id" url:"id"`
	RelatedResources []*ResourceList `json:"related_resources,omitempty" url:"related_resources,omitempty"`
	Memo             *Memo           `json:"memo,omitempty" url:"memo,omitempty"`
	Name             string          `json:"name" url:"name"`
	resourceType     string

	extraProperties map[string]interface{}
}

func (p *Practitioner) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *Practitioner) ResourceType() string {
	return p.resourceType
}

func (p *Practitioner) UnmarshalJSON(data []byte) error {
	type embed Practitioner
	var unmarshaler = struct {
		embed
		ResourceType string `json:"resource_type"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = Practitioner(unmarshaler.embed)
	if unmarshaler.ResourceType != "Practitioner" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", p, "Practitioner", unmarshaler.ResourceType)
	}
	p.resourceType = unmarshaler.ResourceType

	extraProperties, err := core.ExtractExtraProperties(data, *p, "resource_type")
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	return nil
}

func (p *Practitioner) MarshalJSON() ([]byte, error) {
	type embed Practitioner
	var marshaler = struct {
		embed
		ResourceType string `json:"resource_type"`
	}{
		embed:        embed(*p),
		ResourceType: "Practitioner",
	}
	return json.Marshal(marshaler)
}

func (p *Practitioner) String() string {
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ResourceList struct {
	Account      *Account
	Patient      *Patient
	Practitioner *Practitioner
	Script       *Script
}

func NewResourceListFromAccount(value *Account) *ResourceList {
	return &ResourceList{Account: value}
}

func NewResourceListFromPatient(value *Patient) *ResourceList {
	return &ResourceList{Patient: value}
}

func NewResourceListFromPractitioner(value *Practitioner) *ResourceList {
	return &ResourceList{Practitioner: value}
}

func NewResourceListFromScript(value *Script) *ResourceList {
	return &ResourceList{Script: value}
}

func (r *ResourceList) UnmarshalJSON(data []byte) error {
	valueAccount := new(Account)
	if err := json.Unmarshal(data, &valueAccount); err == nil {
		r.Account = valueAccount
		return nil
	}
	valuePatient := new(Patient)
	if err := json.Unmarshal(data, &valuePatient); err == nil {
		r.Patient = valuePatient
		return nil
	}
	valuePractitioner := new(Practitioner)
	if err := json.Unmarshal(data, &valuePractitioner); err == nil {
		r.Practitioner = valuePractitioner
		return nil
	}
	valueScript := new(Script)
	if err := json.Unmarshal(data, &valueScript); err == nil {
		r.Script = valueScript
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r ResourceList) MarshalJSON() ([]byte, error) {
	if r.Account != nil {
		return json.Marshal(r.Account)
	}
	if r.Patient != nil {
		return json.Marshal(r.Patient)
	}
	if r.Practitioner != nil {
		return json.Marshal(r.Practitioner)
	}
	if r.Script != nil {
		return json.Marshal(r.Script)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", r)
}

type ResourceListVisitor interface {
	VisitAccount(*Account) error
	VisitPatient(*Patient) error
	VisitPractitioner(*Practitioner) error
	VisitScript(*Script) error
}

func (r *ResourceList) Accept(visitor ResourceListVisitor) error {
	if r.Account != nil {
		return visitor.VisitAccount(r.Account)
	}
	if r.Patient != nil {
		return visitor.VisitPatient(r.Patient)
	}
	if r.Practitioner != nil {
		return visitor.VisitPractitioner(r.Practitioner)
	}
	if r.Script != nil {
		return visitor.VisitScript(r.Script)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", r)
}

type Script struct {
	Id               string          `json:"id" url:"id"`
	RelatedResources []*ResourceList `json:"related_resources,omitempty" url:"related_resources,omitempty"`
	Memo             *Memo           `json:"memo,omitempty" url:"memo,omitempty"`
	Name             string          `json:"name" url:"name"`
	resourceType     string

	extraProperties map[string]interface{}
}

func (s *Script) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *Script) ResourceType() string {
	return s.resourceType
}

func (s *Script) UnmarshalJSON(data []byte) error {
	type embed Script
	var unmarshaler = struct {
		embed
		ResourceType string `json:"resource_type"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = Script(unmarshaler.embed)
	if unmarshaler.ResourceType != "Script" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", s, "Script", unmarshaler.ResourceType)
	}
	s.resourceType = unmarshaler.ResourceType

	extraProperties, err := core.ExtractExtraProperties(data, *s, "resource_type")
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	return nil
}

func (s *Script) MarshalJSON() ([]byte, error) {
	type embed Script
	var marshaler = struct {
		embed
		ResourceType string `json:"resource_type"`
	}{
		embed:        embed(*s),
		ResourceType: "Script",
	}
	return json.Marshal(marshaler)
}

func (s *Script) String() string {
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}
