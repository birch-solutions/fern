// This file was auto-generated by Fern from our API Definition.

package examples

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/examples/fern/core"
)

type BasicType string

const (
	BasicTypePrimitive BasicType = "primitive"
	BasicTypeLiteral   BasicType = "literal"
)

func NewBasicTypeFromString(s string) (BasicType, error) {
	switch s {
	case "primitive":
		return BasicTypePrimitive, nil
	case "literal":
		return BasicTypeLiteral, nil
	}
	var t BasicType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (b BasicType) Ptr() *BasicType {
	return &b
}

type ComplexType string

const (
	ComplexTypeObject  ComplexType = "object"
	ComplexTypeUnion   ComplexType = "union"
	ComplexTypeUnknown ComplexType = "unknown"
)

func NewComplexTypeFromString(s string) (ComplexType, error) {
	switch s {
	case "object":
		return ComplexTypeObject, nil
	case "union":
		return ComplexTypeUnion, nil
	case "unknown":
		return ComplexTypeUnknown, nil
	}
	var t ComplexType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ComplexType) Ptr() *ComplexType {
	return &c
}

type Identifier struct {
	Type  *Type  `json:"type,omitempty" url:"type,omitempty"`
	Value string `json:"value" url:"value"`
	Label string `json:"label" url:"label"`

	extraProperties map[string]interface{}
}

func (i *Identifier) GetType() *Type {
	if i == nil {
		return nil
	}
	return i.Type
}

func (i *Identifier) GetValue() string {
	if i == nil {
		return ""
	}
	return i.Value
}

func (i *Identifier) GetLabel() string {
	if i == nil {
		return ""
	}
	return i.Label
}

func (i *Identifier) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *Identifier) UnmarshalJSON(data []byte) error {
	type unmarshaler Identifier
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = Identifier(value)

	extraProperties, err := core.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties

	return nil
}

func (i *Identifier) String() string {
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type Type struct {
	BasicType   BasicType
	ComplexType ComplexType

	typ string
}

func NewTypeFromBasicType(value BasicType) *Type {
	return &Type{typ: "BasicType", BasicType: value}
}

func NewTypeFromComplexType(value ComplexType) *Type {
	return &Type{typ: "ComplexType", ComplexType: value}
}

func (t *Type) GetBasicType() BasicType {
	if t == nil {
		return ""
	}
	return t.BasicType
}

func (t *Type) GetComplexType() ComplexType {
	if t == nil {
		return ""
	}
	return t.ComplexType
}

func (t *Type) UnmarshalJSON(data []byte) error {
	var valueBasicType BasicType
	if err := json.Unmarshal(data, &valueBasicType); err == nil {
		t.typ = "BasicType"
		t.BasicType = valueBasicType
		return nil
	}
	var valueComplexType ComplexType
	if err := json.Unmarshal(data, &valueComplexType); err == nil {
		t.typ = "ComplexType"
		t.ComplexType = valueComplexType
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t Type) MarshalJSON() ([]byte, error) {
	if t.typ == "BasicType" || t.BasicType != "" {
		return json.Marshal(t.BasicType)
	}
	if t.typ == "ComplexType" || t.ComplexType != "" {
		return json.Marshal(t.ComplexType)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", t)
}

type TypeVisitor interface {
	VisitBasicType(BasicType) error
	VisitComplexType(ComplexType) error
}

func (t *Type) Accept(visitor TypeVisitor) error {
	if t.typ == "BasicType" || t.BasicType != "" {
		return visitor.VisitBasicType(t.BasicType)
	}
	if t.typ == "ComplexType" || t.ComplexType != "" {
		return visitor.VisitComplexType(t.ComplexType)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", t)
}

type Exception struct {
	Type    string
	Generic *ExceptionInfo
	Timeout interface{}
}

func NewExceptionFromGeneric(value *ExceptionInfo) *Exception {
	return &Exception{Type: "generic", Generic: value}
}

func NewExceptionFromTimeout(value interface{}) *Exception {
	return &Exception{Type: "timeout", Timeout: value}
}

func (e *Exception) GetType() string {
	if e == nil {
		return ""
	}
	return e.Type
}

func (e *Exception) GetGeneric() *ExceptionInfo {
	if e == nil {
		return nil
	}
	return e.Generic
}

func (e *Exception) GetTimeout() interface{} {
	if e == nil {
		return nil
	}
	return e.Timeout
}

func (e *Exception) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	e.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", e)
	}
	switch unmarshaler.Type {
	case "generic":
		value := new(ExceptionInfo)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Generic = value
	case "timeout":
		value := make(map[string]interface{})
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Timeout = value
	}
	return nil
}

func (e Exception) MarshalJSON() ([]byte, error) {
	switch e.Type {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.Type, e)
	case "generic":
		return core.MarshalJSONWithExtraProperty(e.Generic, "type", "generic")
	case "timeout":
		var marshaler = struct {
			Type    string      `json:"type"`
			Timeout interface{} `json:"timeout,omitempty"`
		}{
			Type:    "timeout",
			Timeout: e.Timeout,
		}
		return json.Marshal(marshaler)
	}
}

type ExceptionVisitor interface {
	VisitGeneric(*ExceptionInfo) error
	VisitTimeout(interface{}) error
}

func (e *Exception) Accept(visitor ExceptionVisitor) error {
	switch e.Type {
	default:
		return fmt.Errorf("invalid type %s in %T", e.Type, e)
	case "generic":
		return visitor.VisitGeneric(e.Generic)
	case "timeout":
		return visitor.VisitTimeout(e.Timeout)
	}
}

type ExceptionInfo struct {
	ExceptionType       string `json:"exceptionType" url:"exceptionType"`
	ExceptionMessage    string `json:"exceptionMessage" url:"exceptionMessage"`
	ExceptionStacktrace string `json:"exceptionStacktrace" url:"exceptionStacktrace"`

	extraProperties map[string]interface{}
}

func (e *ExceptionInfo) GetExceptionType() string {
	if e == nil {
		return ""
	}
	return e.ExceptionType
}

func (e *ExceptionInfo) GetExceptionMessage() string {
	if e == nil {
		return ""
	}
	return e.ExceptionMessage
}

func (e *ExceptionInfo) GetExceptionStacktrace() string {
	if e == nil {
		return ""
	}
	return e.ExceptionStacktrace
}

func (e *ExceptionInfo) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExceptionInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler ExceptionInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExceptionInfo(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	return nil
}

func (e *ExceptionInfo) String() string {
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type File struct {
	Name     string `json:"name" url:"name"`
	Contents string `json:"contents" url:"contents"`

	extraProperties map[string]interface{}
}

func (f *File) GetName() string {
	if f == nil {
		return ""
	}
	return f.Name
}

func (f *File) GetContents() string {
	if f == nil {
		return ""
	}
	return f.Contents
}

func (f *File) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *File) UnmarshalJSON(data []byte) error {
	type unmarshaler File
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = File(value)

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	return nil
}

func (f *File) String() string {
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type Request struct {
	Request interface{} `json:"request,omitempty" url:"request,omitempty"`

	extraProperties map[string]interface{}
}

func (r *Request) GetRequest() interface{} {
	if r == nil {
		return nil
	}
	return r.Request
}

func (r *Request) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *Request) UnmarshalJSON(data []byte) error {
	type unmarshaler Request
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = Request(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	return nil
}

func (r *Request) String() string {
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type ResponseType struct {
	Type *Type `json:"type,omitempty" url:"type,omitempty"`

	extraProperties map[string]interface{}
}

func (r *ResponseType) GetType() *Type {
	if r == nil {
		return nil
	}
	return r.Type
}

func (r *ResponseType) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ResponseType) UnmarshalJSON(data []byte) error {
	type unmarshaler ResponseType
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ResponseType(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	return nil
}

func (r *ResponseType) String() string {
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}
