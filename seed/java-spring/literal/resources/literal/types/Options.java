/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.literal.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(
    builder = Options.Builder.class
)
public final class Options {
  private final Map<String, String> values;

  private Options(Map<String, String> values) {
    this.values = values;
  }

  @JsonProperty("id")
  public String getId() {
    return "options";
  }

  @JsonProperty("enabled")
  public Boolean getEnabled() {
    return true;
  }

  @JsonProperty("values")
  public Map<String, String> getValues() {
    return values;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof Options && equalTo((Options) other);
  }

  private boolean equalTo(Options other) {
    return values.equals(other.values);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.values);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Map<String, String> values = new LinkedHashMap<>();

    private Builder() {
    }

    public Builder from(Options other) {
      values(other.getValues());
      return this;
    }

    @JsonSetter(
        value = "values",
        nulls = Nulls.SKIP
    )
    public Builder values(Map<String, String> values) {
      this.values.clear();
      this.values.putAll(values);
      return this;
    }

    public Builder putAllValues(Map<String, String> values) {
      this.values.putAll(values);
      return this;
    }

    public Builder values(String key, String value) {
      this.values.put(key, value);
      return this;
    }

    public Options build() {
      return new Options(values);
    }
  }
}
