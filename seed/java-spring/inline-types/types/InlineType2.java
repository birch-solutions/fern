/**
 * This file was auto-generated by Fern from our API Definition.
 */

package types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = InlineType2.Builder.class
)
public final class InlineType2 {
  private final String baz;

  private InlineType2(String baz) {
    this.baz = baz;
  }

  @JsonProperty("baz")
  public String getBaz() {
    return baz;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof InlineType2 && equalTo((InlineType2) other);
  }

  private boolean equalTo(InlineType2 other) {
    return baz.equals(other.baz);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.baz);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static BazStage builder() {
    return new Builder();
  }

  public interface BazStage {
    _FinalStage baz(@NotNull String baz);

    Builder from(InlineType2 other);
  }

  public interface _FinalStage {
    InlineType2 build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements BazStage, _FinalStage {
    private String baz;

    private Builder() {
    }

    @java.lang.Override
    public Builder from(InlineType2 other) {
      baz(other.getBaz());
      return this;
    }

    @java.lang.Override
    @JsonSetter("baz")
    public _FinalStage baz(@NotNull String baz) {
      this.baz = Objects.requireNonNull(baz, "baz must not be null");
      return this;
    }

    @java.lang.Override
    public InlineType2 build() {
      return new InlineType2(baz);
    }
  }
}
