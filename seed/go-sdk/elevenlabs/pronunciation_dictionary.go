// This file was auto-generated by Fern from our API Definition.

package elevenlabs

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/elevenlabs/fern/core"
)

type PronunciationDictionary struct {
	// List of pronunciation rules. Rule can be either:
	//
	//	an alias rule: {'string_to_replace': 'a', 'type': 'alias', 'alias': 'b', }
	//	or a phoneme rule: {'string_to_replace': 'a', 'type': 'phoneme', 'phoneme': 'b', 'alphabet': 'ipa' }
	Rules []*PronunciationDictionaryRule `json:"rules,omitempty" url:"-"`
}

type BodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost struct {
	// The name of the pronunciation dictionary, used for identification only.
	Name string `json:"name" url:"-"`
	// A description of the pronunciation dictionary, used for identification only.
	Description *string `json:"description,omitempty" url:"-"`
}

type PronunciationDictionaryGetAllRequest struct {
	// Used for fetching next page. Cursor is returned in the response.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// How many pronunciation dictionaries to return at maximum. Can not exceed 100, defaults to 30.
	PageSize *int `json:"-" url:"page_size,omitempty"`
}

type BodyRemoveRulesFromThePronunciationDictionaryV1PronunciationDictionariesPronunciationDictionaryIdRemoveRulesPost struct {
	// List of strings to remove from the pronunciation dictionary.
	RuleStrings []string `json:"rule_strings,omitempty" url:"-"`
}

type AddPronunciationDictionaryResponseModel struct {
	Id               string  `json:"id" url:"id"`
	Name             string  `json:"name" url:"name"`
	CreatedBy        string  `json:"created_by" url:"created_by"`
	CreationTimeUnix int     `json:"creation_time_unix" url:"creation_time_unix"`
	VersionId        string  `json:"version_id" url:"version_id"`
	Description      *string `json:"description,omitempty" url:"description,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *AddPronunciationDictionaryResponseModel) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AddPronunciationDictionaryResponseModel) UnmarshalJSON(data []byte) error {
	type unmarshaler AddPronunciationDictionaryResponseModel
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AddPronunciationDictionaryResponseModel(value)

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AddPronunciationDictionaryResponseModel) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AddPronunciationDictionaryRulesResponseModel struct {
	Id        string `json:"id" url:"id"`
	VersionId string `json:"version_id" url:"version_id"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *AddPronunciationDictionaryRulesResponseModel) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AddPronunciationDictionaryRulesResponseModel) UnmarshalJSON(data []byte) error {
	type unmarshaler AddPronunciationDictionaryRulesResponseModel
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AddPronunciationDictionaryRulesResponseModel(value)

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AddPronunciationDictionaryRulesResponseModel) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type GetPronunciationDictionariesMetadataResponseModel struct {
	PronunciationDictionaries []*GetPronunciationDictionaryMetadataResponse `json:"pronunciation_dictionaries,omitempty" url:"pronunciation_dictionaries,omitempty"`
	NextCursor                string                                        `json:"next_cursor" url:"next_cursor"`
	HasMore                   bool                                          `json:"has_more" url:"has_more"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetPronunciationDictionariesMetadataResponseModel) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetPronunciationDictionariesMetadataResponseModel) UnmarshalJSON(data []byte) error {
	type unmarshaler GetPronunciationDictionariesMetadataResponseModel
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetPronunciationDictionariesMetadataResponseModel(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetPronunciationDictionariesMetadataResponseModel) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetPronunciationDictionaryMetadataResponse struct {
	Id               string  `json:"id" url:"id"`
	LatestVersionId  string  `json:"latest_version_id" url:"latest_version_id"`
	Name             string  `json:"name" url:"name"`
	CreatedBy        string  `json:"created_by" url:"created_by"`
	CreationTimeUnix int     `json:"creation_time_unix" url:"creation_time_unix"`
	Description      *string `json:"description,omitempty" url:"description,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetPronunciationDictionaryMetadataResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetPronunciationDictionaryMetadataResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetPronunciationDictionaryMetadataResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetPronunciationDictionaryMetadataResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetPronunciationDictionaryMetadataResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type RemovePronunciationDictionaryRulesResponseModel struct {
	Id        string `json:"id" url:"id"`
	VersionId string `json:"version_id" url:"version_id"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RemovePronunciationDictionaryRulesResponseModel) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RemovePronunciationDictionaryRulesResponseModel) UnmarshalJSON(data []byte) error {
	type unmarshaler RemovePronunciationDictionaryRulesResponseModel
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RemovePronunciationDictionaryRulesResponseModel(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RemovePronunciationDictionaryRulesResponseModel) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type PronunciationDictionaryRule struct {
	Type    string
	Alias   *PronunciationDictionaryAliasRuleRequestModel
	Phoneme *PronunciationDictionaryPhonemeRuleRequestModel
}

func NewPronunciationDictionaryRuleFromAlias(value *PronunciationDictionaryAliasRuleRequestModel) *PronunciationDictionaryRule {
	return &PronunciationDictionaryRule{Type: "alias", Alias: value}
}

func NewPronunciationDictionaryRuleFromPhoneme(value *PronunciationDictionaryPhonemeRuleRequestModel) *PronunciationDictionaryRule {
	return &PronunciationDictionaryRule{Type: "phoneme", Phoneme: value}
}

func (p *PronunciationDictionaryRule) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	p.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "alias":
		value := new(PronunciationDictionaryAliasRuleRequestModel)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Alias = value
	case "phoneme":
		value := new(PronunciationDictionaryPhonemeRuleRequestModel)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Phoneme = value
	}
	return nil
}

func (p PronunciationDictionaryRule) MarshalJSON() ([]byte, error) {
	switch p.Type {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", p.Type, p)
	case "alias":
		return core.MarshalJSONWithExtraProperty(p.Alias, "type", "alias")
	case "phoneme":
		return core.MarshalJSONWithExtraProperty(p.Phoneme, "type", "phoneme")
	}
}

type PronunciationDictionaryRuleVisitor interface {
	VisitAlias(*PronunciationDictionaryAliasRuleRequestModel) error
	VisitPhoneme(*PronunciationDictionaryPhonemeRuleRequestModel) error
}

func (p *PronunciationDictionaryRule) Accept(visitor PronunciationDictionaryRuleVisitor) error {
	switch p.Type {
	default:
		return fmt.Errorf("invalid type %s in %T", p.Type, p)
	case "alias":
		return visitor.VisitAlias(p.Alias)
	case "phoneme":
		return visitor.VisitPhoneme(p.Phoneme)
	}
}
