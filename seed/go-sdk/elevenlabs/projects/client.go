// This file was auto-generated by Fern from our API Definition.

package projects

import (
	bytes "bytes"
	context "context"
	json "encoding/json"
	errors "errors"
	fmt "fmt"
	fern "github.com/elevenlabs/fern"
	core "github.com/elevenlabs/fern/core"
	option "github.com/elevenlabs/fern/option"
	io "io"
	multipart "mime/multipart"
	http "net/http"
	os "os"
)

type Client struct {
	baseURL string
	caller  *core.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	if options.ApiKey == "" {
		options.ApiKey = os.Getenv("ELEVEN_API_KEY")
	}
	return &Client{
		baseURL: options.BaseURL,
		caller: core.NewCaller(
			&core.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Returns a list of your projects together and its metadata.
func (c *Client) GetAll(
	ctx context.Context,
	opts ...option.RequestOption,
) (*fern.GetProjectsResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.elevenlabs.io"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := baseURL + "/v1/projects"

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 422:
			value := new(fern.UnprocessableEntityError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return apiError
			}
			return value
		}
		return apiError
	}

	var response *fern.GetProjectsResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:          endpointURL,
			Method:       http.MethodGet,
			MaxAttempts:  options.MaxAttempts,
			Headers:      headers,
			Client:       options.HTTPClient,
			Response:     &response,
			ErrorDecoder: errorDecoder,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Creates a new project, it can be either initialized as blank, from a document or from a URL.
func (c *Client) Add(
	ctx context.Context,
	fromDocument io.Reader,
	request *fern.BodyAddProjectV1ProjectsAddPost,
	opts ...option.RequestOption,
) (*fern.AddProjectResponseModel, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.elevenlabs.io"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := baseURL + "/v1/projects/add"

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 422:
			value := new(fern.UnprocessableEntityError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return apiError
			}
			return value
		}
		return apiError
	}

	var response *fern.AddProjectResponseModel
	requestBuffer := bytes.NewBuffer(nil)
	writer := multipart.NewWriter(requestBuffer)
	if fromDocument != nil {
		fromDocumentFilename := "fromDocument_filename"
		if named, ok := fromDocument.(interface{ Name() string }); ok {
			fromDocumentFilename = named.Name()
		}
		fromDocumentPart, err := writer.CreateFormFile("from_document", fromDocumentFilename)
		if err != nil {
			return nil, err
		}
		if _, err := io.Copy(fromDocumentPart, fromDocument); err != nil {
			return nil, err
		}
	}
	if err := writer.WriteField("name", fmt.Sprintf("%v", request.Name)); err != nil {
		return nil, err
	}
	if request.FromUrl != nil {
		if err := writer.WriteField("from_url", fmt.Sprintf("%v", *request.FromUrl)); err != nil {
			return nil, err
		}
	}
	if err := writer.WriteField("default_title_voice_id", fmt.Sprintf("%v", request.DefaultTitleVoiceId)); err != nil {
		return nil, err
	}
	if err := writer.WriteField("default_paragraph_voice_id", fmt.Sprintf("%v", request.DefaultParagraphVoiceId)); err != nil {
		return nil, err
	}
	if err := writer.WriteField("default_model_id", fmt.Sprintf("%v", request.DefaultModelId)); err != nil {
		return nil, err
	}
	if request.QualityPreset != nil {
		if err := writer.WriteField("quality_preset", fmt.Sprintf("%v", *request.QualityPreset)); err != nil {
			return nil, err
		}
	}
	if request.Title != nil {
		if err := writer.WriteField("title", fmt.Sprintf("%v", *request.Title)); err != nil {
			return nil, err
		}
	}
	if request.Author != nil {
		if err := writer.WriteField("author", fmt.Sprintf("%v", *request.Author)); err != nil {
			return nil, err
		}
	}
	if request.IsbnNumber != nil {
		if err := writer.WriteField("isbn_number", fmt.Sprintf("%v", *request.IsbnNumber)); err != nil {
			return nil, err
		}
	}
	if request.AcxVolumeNormalization != nil {
		if err := writer.WriteField("acx_volume_normalization", fmt.Sprintf("%v", *request.AcxVolumeNormalization)); err != nil {
			return nil, err
		}
	}
	if request.VolumeNormalization != nil {
		if err := writer.WriteField("volume_normalization", fmt.Sprintf("%v", *request.VolumeNormalization)); err != nil {
			return nil, err
		}
	}
	if request.PronunciationDictionaryLocators != nil {
		if err := core.WriteMultipartJSON(writer, "pronunciation_dictionary_locators", request.PronunciationDictionaryLocators); err != nil {
			return nil, err
		}
	}
	if request.CallbackUrl != nil {
		if err := writer.WriteField("callback_url", fmt.Sprintf("%v", *request.CallbackUrl)); err != nil {
			return nil, err
		}
	}
	if err := writer.Close(); err != nil {
		return nil, err
	}
	headers.Set("Content-Type", writer.FormDataContentType())

	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:          endpointURL,
			Method:       http.MethodPost,
			MaxAttempts:  options.MaxAttempts,
			Headers:      headers,
			Client:       options.HTTPClient,
			Request:      requestBuffer,
			Response:     &response,
			ErrorDecoder: errorDecoder,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Returns information about a specific project. This endpoint returns more detailed information about a project than GET api.elevenlabs.io/v1/projects.
func (c *Client) Get(
	ctx context.Context,
	// The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
	projectId string,
	opts ...option.RequestOption,
) (*fern.ProjectExtendedResponseModel, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.elevenlabs.io"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v1/projects/%v", projectId)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 422:
			value := new(fern.UnprocessableEntityError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return apiError
			}
			return value
		}
		return apiError
	}

	var response *fern.ProjectExtendedResponseModel
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:          endpointURL,
			Method:       http.MethodGet,
			MaxAttempts:  options.MaxAttempts,
			Headers:      headers,
			Client:       options.HTTPClient,
			Response:     &response,
			ErrorDecoder: errorDecoder,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Delete a project by its project_id.
func (c *Client) Delete(
	ctx context.Context,
	// The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
	projectId string,
	opts ...option.RequestOption,
) (interface{}, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.elevenlabs.io"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v1/projects/%v", projectId)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 422:
			value := new(fern.UnprocessableEntityError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return apiError
			}
			return value
		}
		return apiError
	}

	var response interface{}
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:          endpointURL,
			Method:       http.MethodDelete,
			MaxAttempts:  options.MaxAttempts,
			Headers:      headers,
			Client:       options.HTTPClient,
			Response:     &response,
			ErrorDecoder: errorDecoder,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Starts conversion of a project and all of its chapters.
func (c *Client) Convert(
	ctx context.Context,
	// The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
	projectId string,
	opts ...option.RequestOption,
) (interface{}, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.elevenlabs.io"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v1/projects/%v/convert", projectId)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 422:
			value := new(fern.UnprocessableEntityError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return apiError
			}
			return value
		}
		return apiError
	}

	var response interface{}
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:          endpointURL,
			Method:       http.MethodPost,
			MaxAttempts:  options.MaxAttempts,
			Headers:      headers,
			Client:       options.HTTPClient,
			Response:     &response,
			ErrorDecoder: errorDecoder,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Gets the snapshots of a project.
func (c *Client) GetSnapshots(
	ctx context.Context,
	// The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
	projectId string,
	opts ...option.RequestOption,
) (*fern.ProjectSnapshotsResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.elevenlabs.io"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v1/projects/%v/snapshots", projectId)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 422:
			value := new(fern.UnprocessableEntityError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return apiError
			}
			return value
		}
		return apiError
	}

	var response *fern.ProjectSnapshotsResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:          endpointURL,
			Method:       http.MethodGet,
			MaxAttempts:  options.MaxAttempts,
			Headers:      headers,
			Client:       options.HTTPClient,
			Response:     &response,
			ErrorDecoder: errorDecoder,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Stream the audio from a project snapshot.
func (c *Client) StreamAudio(
	ctx context.Context,
	// The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
	projectId string,
	// The project_snapshot_id of the project snapshot. You can query GET /v1/projects/{project_id}/snapshots to list all available snapshots for a project.
	projectSnapshotId string,
	request *fern.BodyStreamProjectAudioV1ProjectsProjectIdSnapshotsProjectSnapshotIdStreamPost,
	opts ...option.RequestOption,
) (io.Reader, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.elevenlabs.io"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(
		baseURL+"/v1/projects/%v/snapshots/%v/stream",
		projectId,
		projectSnapshotId,
	)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 422:
			value := new(fern.UnprocessableEntityError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return apiError
			}
			return value
		}
		return apiError
	}

	response := bytes.NewBuffer(nil)
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:          endpointURL,
			Method:       http.MethodPost,
			MaxAttempts:  options.MaxAttempts,
			Headers:      headers,
			Client:       options.HTTPClient,
			Request:      request,
			Response:     response,
			ErrorDecoder: errorDecoder,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Streams archive with project audio.
func (c *Client) StreamArchive(
	ctx context.Context,
	// The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
	projectId string,
	// The project_snapshot_id of the project snapshot. You can query GET /v1/projects/{project_id}/snapshots to list all available snapshots for a project.
	projectSnapshotId string,
	opts ...option.RequestOption,
) error {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.elevenlabs.io"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(
		baseURL+"/v1/projects/%v/snapshots/%v/archive",
		projectId,
		projectSnapshotId,
	)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 422:
			value := new(fern.UnprocessableEntityError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return apiError
			}
			return value
		}
		return apiError
	}

	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:          endpointURL,
			Method:       http.MethodPost,
			MaxAttempts:  options.MaxAttempts,
			Headers:      headers,
			Client:       options.HTTPClient,
			ErrorDecoder: errorDecoder,
		},
	); err != nil {
		return err
	}
	return nil
}

// Updates the set of pronunciation dictionaries acting on a project. This will automatically mark text within this project as requiring reconverting where the new dictionary would apply or the old one no longer does.
func (c *Client) UpdatePronunciationDictionaries(
	ctx context.Context,
	// The project_id of the project, you can query GET https://api.elevenlabs.io/v1/projects to list all available projects.
	projectId string,
	request *fern.UpdatePronunciationDictionariesRequest,
	opts ...option.RequestOption,
) (interface{}, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.elevenlabs.io"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v1/projects/%v/update-pronunciation-dictionaries", projectId)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 422:
			value := new(fern.UnprocessableEntityError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return apiError
			}
			return value
		}
		return apiError
	}

	var response interface{}
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:          endpointURL,
			Method:       http.MethodPost,
			MaxAttempts:  options.MaxAttempts,
			Headers:      headers,
			Client:       options.HTTPClient,
			Request:      request,
			Response:     &response,
			ErrorDecoder: errorDecoder,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
