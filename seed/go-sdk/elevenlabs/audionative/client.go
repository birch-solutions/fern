// This file was auto-generated by Fern from our API Definition.

package audionative

import (
	bytes "bytes"
	context "context"
	json "encoding/json"
	errors "errors"
	fmt "fmt"
	fern "github.com/elevenlabs/fern"
	core "github.com/elevenlabs/fern/core"
	option "github.com/elevenlabs/fern/option"
	io "io"
	multipart "mime/multipart"
	http "net/http"
	os "os"
)

type Client struct {
	baseURL string
	caller  *core.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	if options.ApiKey == "" {
		options.ApiKey = os.Getenv("ELEVEN_API_KEY")
	}
	return &Client{
		baseURL: options.BaseURL,
		caller: core.NewCaller(
			&core.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Creates AudioNative enabled project, optionally starts conversion and returns project id and embeddable html snippet.
func (c *Client) Create(
	ctx context.Context,
	file io.Reader,
	request *fern.BodyCreatesAudioNativeEnabledProjectV1AudioNativePost,
	opts ...option.RequestOption,
) (*fern.AudioNativeCreateProjectResponseModel, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.elevenlabs.io"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := baseURL + "/v1/audio-native"

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 422:
			value := new(fern.UnprocessableEntityError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return apiError
			}
			return value
		}
		return apiError
	}

	var response *fern.AudioNativeCreateProjectResponseModel
	requestBuffer := bytes.NewBuffer(nil)
	writer := multipart.NewWriter(requestBuffer)
	fileFilename := "file_filename"
	if named, ok := file.(interface{ Name() string }); ok {
		fileFilename = named.Name()
	}
	filePart, err := writer.CreateFormFile("file", fileFilename)
	if err != nil {
		return nil, err
	}
	if _, err := io.Copy(filePart, file); err != nil {
		return nil, err
	}
	if err := writer.WriteField("name", fmt.Sprintf("%v", request.Name)); err != nil {
		return nil, err
	}
	if request.Image != nil {
		if err := writer.WriteField("image", fmt.Sprintf("%v", *request.Image)); err != nil {
			return nil, err
		}
	}
	if request.Author != nil {
		if err := writer.WriteField("author", fmt.Sprintf("%v", *request.Author)); err != nil {
			return nil, err
		}
	}
	if request.Title != nil {
		if err := writer.WriteField("title", fmt.Sprintf("%v", *request.Title)); err != nil {
			return nil, err
		}
	}
	if request.Small != nil {
		if err := writer.WriteField("small", fmt.Sprintf("%v", *request.Small)); err != nil {
			return nil, err
		}
	}
	if request.TextColor != nil {
		if err := writer.WriteField("text_color", fmt.Sprintf("%v", *request.TextColor)); err != nil {
			return nil, err
		}
	}
	if request.BackgroundColor != nil {
		if err := writer.WriteField("background_color", fmt.Sprintf("%v", *request.BackgroundColor)); err != nil {
			return nil, err
		}
	}
	if request.Sessionization != nil {
		if err := writer.WriteField("sessionization", fmt.Sprintf("%v", *request.Sessionization)); err != nil {
			return nil, err
		}
	}
	if request.VoiceId != nil {
		if err := writer.WriteField("voice_id", fmt.Sprintf("%v", *request.VoiceId)); err != nil {
			return nil, err
		}
	}
	if request.ModelId != nil {
		if err := writer.WriteField("model_id", fmt.Sprintf("%v", *request.ModelId)); err != nil {
			return nil, err
		}
	}
	if request.AutoConvert != nil {
		if err := writer.WriteField("auto_convert", fmt.Sprintf("%v", *request.AutoConvert)); err != nil {
			return nil, err
		}
	}
	if err := writer.Close(); err != nil {
		return nil, err
	}
	headers.Set("Content-Type", writer.FormDataContentType())

	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:          endpointURL,
			Method:       http.MethodPost,
			MaxAttempts:  options.MaxAttempts,
			Headers:      headers,
			Client:       options.HTTPClient,
			Request:      requestBuffer,
			Response:     &response,
			ErrorDecoder: errorDecoder,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
