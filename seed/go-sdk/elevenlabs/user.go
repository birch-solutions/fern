// This file was auto-generated by Fern from our API Definition.

package elevenlabs

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/elevenlabs/fern/core"
)

type Subscription struct {
	Tier                           string                                          `json:"tier" url:"tier"`
	CharacterCount                 int                                             `json:"character_count" url:"character_count"`
	CharacterLimit                 int                                             `json:"character_limit" url:"character_limit"`
	CanExtendCharacterLimit        bool                                            `json:"can_extend_character_limit" url:"can_extend_character_limit"`
	AllowedToExtendCharacterLimit  bool                                            `json:"allowed_to_extend_character_limit" url:"allowed_to_extend_character_limit"`
	NextCharacterCountResetUnix    int                                             `json:"next_character_count_reset_unix" url:"next_character_count_reset_unix"`
	VoiceLimit                     int                                             `json:"voice_limit" url:"voice_limit"`
	MaxVoiceAddEdits               *int                                            `json:"max_voice_add_edits,omitempty" url:"max_voice_add_edits,omitempty"`
	VoiceAddEditCounter            *int                                            `json:"voice_add_edit_counter,omitempty" url:"voice_add_edit_counter,omitempty"`
	ProfessionalVoiceLimit         int                                             `json:"professional_voice_limit" url:"professional_voice_limit"`
	CanExtendVoiceLimit            bool                                            `json:"can_extend_voice_limit" url:"can_extend_voice_limit"`
	CanUseInstantVoiceCloning      bool                                            `json:"can_use_instant_voice_cloning" url:"can_use_instant_voice_cloning"`
	CanUseProfessionalVoiceCloning bool                                            `json:"can_use_professional_voice_cloning" url:"can_use_professional_voice_cloning"`
	Currency                       *Currency                                       `json:"currency,omitempty" url:"currency,omitempty"`
	Status                         *SubscriptionStatus                             `json:"status,omitempty" url:"status,omitempty"`
	BillingPeriod                  *ExtendedSubscriptionResponseModelBillingPeriod `json:"billing_period,omitempty" url:"billing_period,omitempty"`
	NextInvoice                    *Invoice                                        `json:"next_invoice,omitempty" url:"next_invoice,omitempty"`
	HasOpenInvoices                *bool                                           `json:"has_open_invoices,omitempty" url:"has_open_invoices,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *Subscription) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *Subscription) UnmarshalJSON(data []byte) error {
	type unmarshaler Subscription
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = Subscription(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *Subscription) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type User struct {
	Subscription                *SubscriptionResponse `json:"subscription,omitempty" url:"subscription,omitempty"`
	IsNewUser                   bool                  `json:"is_new_user" url:"is_new_user"`
	XiApiKey                    string                `json:"xi_api_key" url:"xi_api_key"`
	CanUseDelayedPaymentMethods bool                  `json:"can_use_delayed_payment_methods" url:"can_use_delayed_payment_methods"`
	IsOnboardingCompleted       bool                  `json:"is_onboarding_completed" url:"is_onboarding_completed"`
	FirstName                   *string               `json:"first_name,omitempty" url:"first_name,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *User) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *User) UnmarshalJSON(data []byte) error {
	type unmarshaler User
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = User(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *User) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}
