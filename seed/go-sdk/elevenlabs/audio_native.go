// This file was auto-generated by Fern from our API Definition.

package elevenlabs

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/elevenlabs/fern/core"
)

type BodyCreatesAudioNativeEnabledProjectV1AudioNativePost struct {
	// Project name.
	Name string `json:"name" url:"-"`
	// Image URL used in the player. If not provided, default image set in the Player settings is used.
	Image *string `json:"image,omitempty" url:"-"`
	// Author used in the player and inserted at the start of the uploaded article. If not provided, the default author set in the Player settings is used.
	Author *string `json:"author,omitempty" url:"-"`
	// Title used in the player and inserted at the top of the uploaded article. If not provided, the default title set in the Player settings is used.
	Title *string `json:"title,omitempty" url:"-"`
	// Whether to use small player or not. If not provided, default value set in the Player settings is used.
	Small *bool `json:"small,omitempty" url:"-"`
	// Text color used in the player. If not provided, default text color set in the Player settings is used.
	TextColor *string `json:"text_color,omitempty" url:"-"`
	// Background color used in the player. If not provided, default background color set in the Player settings is used.
	BackgroundColor *string `json:"background_color,omitempty" url:"-"`
	// Specifies for how many minutes to persist the session across page reloads. If not provided, default sessionization set in the Player settings is used.
	Sessionization *int `json:"sessionization,omitempty" url:"-"`
	// Voice ID used to voice the content. If not provided, default voice ID set in the Player settings is used.
	VoiceId *string `json:"voice_id,omitempty" url:"-"`
	// TTS Model ID used in the player. If not provided, default model ID set in the Player settings is used.
	ModelId *string `json:"model_id,omitempty" url:"-"`
	// Whether to auto convert the project to audio or not.
	AutoConvert *bool `json:"auto_convert,omitempty" url:"-"`
}

type AudioNativeCreateProjectResponseModel struct {
	ProjectId   string `json:"project_id" url:"project_id"`
	Converting  bool   `json:"converting" url:"converting"`
	HtmlSnippet string `json:"html_snippet" url:"html_snippet"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *AudioNativeCreateProjectResponseModel) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AudioNativeCreateProjectResponseModel) UnmarshalJSON(data []byte) error {
	type unmarshaler AudioNativeCreateProjectResponseModel
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AudioNativeCreateProjectResponseModel(value)

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AudioNativeCreateProjectResponseModel) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}
