// This file was auto-generated by Fern from our API Definition.

package dubbing

import (
	bytes "bytes"
	context "context"
	json "encoding/json"
	errors "errors"
	fmt "fmt"
	fern "github.com/elevenlabs/fern"
	core "github.com/elevenlabs/fern/core"
	option "github.com/elevenlabs/fern/option"
	io "io"
	multipart "mime/multipart"
	http "net/http"
	os "os"
)

type Client struct {
	baseURL string
	caller  *core.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	if options.ApiKey == "" {
		options.ApiKey = os.Getenv("ELEVEN_API_KEY")
	}
	return &Client{
		baseURL: options.BaseURL,
		caller: core.NewCaller(
			&core.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Dubs provided audio or video file into given language.
func (c *Client) DubAVideoOrAnAudioFile(
	ctx context.Context,
	file io.Reader,
	csvFile io.Reader,
	foregroundAudioFile io.Reader,
	backgroundAudioFile io.Reader,
	request *fern.BodyDubAVideoOrAnAudioFileV1DubbingPost,
	opts ...option.RequestOption,
) (*fern.DoDubbingResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.elevenlabs.io"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := baseURL + "/v1/dubbing"

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 422:
			value := new(fern.UnprocessableEntityError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return apiError
			}
			return value
		}
		return apiError
	}

	var response *fern.DoDubbingResponse
	requestBuffer := bytes.NewBuffer(nil)
	writer := multipart.NewWriter(requestBuffer)
	if file != nil {
		fileFilename := "file_filename"
		if named, ok := file.(interface{ Name() string }); ok {
			fileFilename = named.Name()
		}
		filePart, err := writer.CreateFormFile("file", fileFilename)
		if err != nil {
			return nil, err
		}
		if _, err := io.Copy(filePart, file); err != nil {
			return nil, err
		}
	}
	if csvFile != nil {
		csvFileFilename := "csvFile_filename"
		if named, ok := csvFile.(interface{ Name() string }); ok {
			csvFileFilename = named.Name()
		}
		csvFilePart, err := writer.CreateFormFile("csv_file", csvFileFilename)
		if err != nil {
			return nil, err
		}
		if _, err := io.Copy(csvFilePart, csvFile); err != nil {
			return nil, err
		}
	}
	if foregroundAudioFile != nil {
		foregroundAudioFileFilename := "foregroundAudioFile_filename"
		if named, ok := foregroundAudioFile.(interface{ Name() string }); ok {
			foregroundAudioFileFilename = named.Name()
		}
		foregroundAudioFilePart, err := writer.CreateFormFile("foreground_audio_file", foregroundAudioFileFilename)
		if err != nil {
			return nil, err
		}
		if _, err := io.Copy(foregroundAudioFilePart, foregroundAudioFile); err != nil {
			return nil, err
		}
	}
	if backgroundAudioFile != nil {
		backgroundAudioFileFilename := "backgroundAudioFile_filename"
		if named, ok := backgroundAudioFile.(interface{ Name() string }); ok {
			backgroundAudioFileFilename = named.Name()
		}
		backgroundAudioFilePart, err := writer.CreateFormFile("background_audio_file", backgroundAudioFileFilename)
		if err != nil {
			return nil, err
		}
		if _, err := io.Copy(backgroundAudioFilePart, backgroundAudioFile); err != nil {
			return nil, err
		}
	}
	if request.Mode != nil {
		if err := writer.WriteField("mode", fmt.Sprintf("%v", *request.Mode)); err != nil {
			return nil, err
		}
	}
	if request.Name != nil {
		if err := writer.WriteField("name", fmt.Sprintf("%v", *request.Name)); err != nil {
			return nil, err
		}
	}
	if request.SourceUrl != nil {
		if err := writer.WriteField("source_url", fmt.Sprintf("%v", *request.SourceUrl)); err != nil {
			return nil, err
		}
	}
	if request.SourceLang != nil {
		if err := writer.WriteField("source_lang", fmt.Sprintf("%v", *request.SourceLang)); err != nil {
			return nil, err
		}
	}
	if err := writer.WriteField("target_lang", fmt.Sprintf("%v", request.TargetLang)); err != nil {
		return nil, err
	}
	if request.NumSpeakers != nil {
		if err := writer.WriteField("num_speakers", fmt.Sprintf("%v", *request.NumSpeakers)); err != nil {
			return nil, err
		}
	}
	if request.Watermark != nil {
		if err := writer.WriteField("watermark", fmt.Sprintf("%v", *request.Watermark)); err != nil {
			return nil, err
		}
	}
	if request.StartTime != nil {
		if err := writer.WriteField("start_time", fmt.Sprintf("%v", *request.StartTime)); err != nil {
			return nil, err
		}
	}
	if request.EndTime != nil {
		if err := writer.WriteField("end_time", fmt.Sprintf("%v", *request.EndTime)); err != nil {
			return nil, err
		}
	}
	if request.HighestResolution != nil {
		if err := writer.WriteField("highest_resolution", fmt.Sprintf("%v", *request.HighestResolution)); err != nil {
			return nil, err
		}
	}
	if request.DubbingStudio != nil {
		if err := writer.WriteField("dubbing_studio", fmt.Sprintf("%v", *request.DubbingStudio)); err != nil {
			return nil, err
		}
	}
	if err := writer.Close(); err != nil {
		return nil, err
	}
	headers.Set("Content-Type", writer.FormDataContentType())

	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:          endpointURL,
			Method:       http.MethodPost,
			MaxAttempts:  options.MaxAttempts,
			Headers:      headers,
			Client:       options.HTTPClient,
			Request:      requestBuffer,
			Response:     &response,
			ErrorDecoder: errorDecoder,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Returns metadata about a dubbing project, including whether it's still in progress or not
func (c *Client) GetDubbingProjectMetadata(
	ctx context.Context,
	// ID of the dubbing project.
	dubbingId string,
	opts ...option.RequestOption,
) (*fern.DubbingMetadataResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.elevenlabs.io"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v1/dubbing/%v", dubbingId)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 422:
			value := new(fern.UnprocessableEntityError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return apiError
			}
			return value
		}
		return apiError
	}

	var response *fern.DubbingMetadataResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:          endpointURL,
			Method:       http.MethodGet,
			MaxAttempts:  options.MaxAttempts,
			Headers:      headers,
			Client:       options.HTTPClient,
			Response:     &response,
			ErrorDecoder: errorDecoder,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Deletes a dubbing project.
func (c *Client) DeleteDubbingProject(
	ctx context.Context,
	// ID of the dubbing project.
	dubbingId string,
	opts ...option.RequestOption,
) (interface{}, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.elevenlabs.io"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v1/dubbing/%v", dubbingId)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 422:
			value := new(fern.UnprocessableEntityError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return apiError
			}
			return value
		}
		return apiError
	}

	var response interface{}
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:          endpointURL,
			Method:       http.MethodDelete,
			MaxAttempts:  options.MaxAttempts,
			Headers:      headers,
			Client:       options.HTTPClient,
			Response:     &response,
			ErrorDecoder: errorDecoder,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Returns dubbed file as a streamed file. Videos will be returned in MP4 format and audio only dubs will be returned in MP3.
func (c *Client) GetDubbedFile(
	ctx context.Context,
	// ID of the dubbing project.
	dubbingId string,
	// ID of the language.
	languageCode string,
	opts ...option.RequestOption,
) (io.Reader, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.elevenlabs.io"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(
		baseURL+"/v1/dubbing/%v/audio/%v",
		dubbingId,
		languageCode,
	)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 422:
			value := new(fern.UnprocessableEntityError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return apiError
			}
			return value
		}
		return apiError
	}

	response := bytes.NewBuffer(nil)
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:          endpointURL,
			Method:       http.MethodGet,
			MaxAttempts:  options.MaxAttempts,
			Headers:      headers,
			Client:       options.HTTPClient,
			Response:     response,
			ErrorDecoder: errorDecoder,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
