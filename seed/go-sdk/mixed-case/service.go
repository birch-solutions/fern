// This file was auto-generated by Fern from our API Definition.

package mixedcase

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/mixed-case/fern/core"
	time "time"
)

type ListResourcesRequest struct {
	PageLimit  int       `json:"-" url:"page_limit"`
	BeforeDate time.Time `json:"-" url:"beforeDate" format:"date"`
}

type NestedUser struct {
	Name       string `json:"Name" url:"Name"`
	NestedUser *User  `json:"NestedUser,omitempty" url:"NestedUser,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NestedUser) GetName() string {
	if n == nil {
		return ""
	}
	return n.Name
}

func (n *NestedUser) GetNestedUser() *User {
	if n == nil {
		return nil
	}
	return n.NestedUser
}

func (n *NestedUser) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NestedUser) UnmarshalJSON(data []byte) error {
	type unmarshaler NestedUser
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NestedUser(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NestedUser) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type Organization struct {
	Name string `json:"name" url:"name"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (o *Organization) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Organization) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *Organization) UnmarshalJSON(data []byte) error {
	type unmarshaler Organization
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = Organization(value)

	extraProperties, err := core.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties

	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *Organization) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type Resource struct {
	ResourceType string
	Status       ResourceStatus
	User         *User
	Organization *Organization
}

func NewResourceFromUser(value *User) *Resource {
	return &Resource{ResourceType: "user", User: value}
}

func NewResourceFromOrganization(value *Organization) *Resource {
	return &Resource{ResourceType: "Organization", Organization: value}
}

func (r *Resource) GetResourceType() string {
	if r == nil {
		return ""
	}
	return r.ResourceType
}

func (r *Resource) GetStatus() ResourceStatus {
	if r == nil {
		return ""
	}
	return r.Status
}

func (r *Resource) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *Resource) GetOrganization() *Organization {
	if r == nil {
		return nil
	}
	return r.Organization
}

func (r *Resource) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		ResourceType string         `json:"resource_type"`
		Status       ResourceStatus `json:"status"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	r.ResourceType = unmarshaler.ResourceType
	r.Status = unmarshaler.Status
	if unmarshaler.ResourceType == "" {
		return fmt.Errorf("%T did not include discriminant resource_type", r)
	}
	switch unmarshaler.ResourceType {
	case "user":
		value := new(User)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		r.User = value
	case "Organization":
		value := new(Organization)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		r.Organization = value
	}
	return nil
}

func (r Resource) MarshalJSON() ([]byte, error) {
	switch r.ResourceType {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", r.ResourceType, r)
	case "user":
		return core.MarshalJSONWithExtraProperty(r.User, "resource_type", "user")
	case "Organization":
		return core.MarshalJSONWithExtraProperty(r.Organization, "resource_type", "Organization")
	}
}

type ResourceVisitor interface {
	VisitUser(*User) error
	VisitOrganization(*Organization) error
}

func (r *Resource) Accept(visitor ResourceVisitor) error {
	switch r.ResourceType {
	default:
		return fmt.Errorf("invalid type %s in %T", r.ResourceType, r)
	case "user":
		return visitor.VisitUser(r.User)
	case "Organization":
		return visitor.VisitOrganization(r.Organization)
	}
}

type ResourceStatus string

const (
	ResourceStatusActive   ResourceStatus = "ACTIVE"
	ResourceStatusInactive ResourceStatus = "INACTIVE"
)

func NewResourceStatusFromString(s string) (ResourceStatus, error) {
	switch s {
	case "ACTIVE":
		return ResourceStatusActive, nil
	case "INACTIVE":
		return ResourceStatusInactive, nil
	}
	var t ResourceStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r ResourceStatus) Ptr() *ResourceStatus {
	return &r
}

type User struct {
	UserName        string            `json:"userName" url:"userName"`
	MetadataTags    []string          `json:"metadata_tags,omitempty" url:"metadata_tags,omitempty"`
	ExtraProperties map[string]string `json:"EXTRA_PROPERTIES,omitempty" url:"EXTRA_PROPERTIES,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *User) GetUserName() string {
	if u == nil {
		return ""
	}
	return u.UserName
}

func (u *User) GetMetadataTags() []string {
	if u == nil {
		return nil
	}
	return u.MetadataTags
}

func (u *User) GetExtraProperties() map[string]string {
	if u == nil {
		return nil
	}
	return u.ExtraProperties
}

func (u *User) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *User) UnmarshalJSON(data []byte) error {
	type unmarshaler User
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = User(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *User) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}
