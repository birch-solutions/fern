# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class One(str, enum.Enum):
    """
    Represents a variety of casing conventions that
    could collide without special care.
    ---
    from seed import One

    One.ONE
    """

    ONE = "one"
    ONE = "One"
    O_NE = "ONe"
    ONE = "ONE"

    def visit(
        self,
        one: typing.Callable[[], T_Result],
        one: typing.Callable[[], T_Result],
        o_ne: typing.Callable[[], T_Result],
        one: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is One.ONE:
            return one()
        if self is One.ONE:
            return one()
        if self is One.O_NE:
            return o_ne()
        if self is One.ONE:
            return one()
