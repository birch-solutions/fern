# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import pydantic_v1
from .primitive_value import PrimitiveValue


class FieldValue_PrimitiveValue(pydantic_v1.BaseModel):
    value: PrimitiveValue
    type: typing.Literal["primitive_value"] = "primitive_value"

    class Config:
        frozen = True
        smart_union = True


class FieldValue_ObjectValue(pydantic_v1.BaseModel):
    type: typing.Literal["object_value"] = "object_value"

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}


class FieldValue_ContainerValue(pydantic_v1.BaseModel):
    value: ContainerValue
    type: typing.Literal["container_value"] = "container_value"

    class Config:
        frozen = True
        smart_union = True


FieldValue = typing.Union[FieldValue_PrimitiveValue, FieldValue_ObjectValue, FieldValue_ContainerValue]
from .container_value import ContainerValue  # noqa: E402

FieldValue_ContainerValue.update_forward_refs(ContainerValue=ContainerValue)
