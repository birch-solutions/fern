# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing
from json.decoder import JSONDecodeError

from ..commons.types.problem_id import ProblemId
from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.datetime_utils import serialize_datetime
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pydantic_utilities import parse_obj_as
from ..core.request_options import RequestOptions
from .errors.playlist_id_not_found_error import PlaylistIdNotFoundError
from .errors.unauthorized_error import UnauthorizedError
from .types.playlist import Playlist
from .types.playlist_id import PlaylistId
from .types.playlist_id_not_found_error_body import PlaylistIdNotFoundErrorBody
from .types.update_playlist_request import UpdatePlaylistRequest

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class PlaylistClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create_playlist(
        self,
        service_param: int,
        *,
        datetime: dt.datetime,
        name: str,
        problems: typing.Sequence[ProblemId],
        optional_datetime: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Playlist:
        """
        Create a new playlist

        Parameters
        ----------
        service_param : int

        datetime : dt.datetime

        name : str

        problems : typing.Sequence[ProblemId]

        optional_datetime : typing.Optional[dt.datetime]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Playlist

        Examples
        --------
        import datetime

        from seed import SeedTrace

        client = SeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        client.playlist.create_playlist(
            service_param=1,
            datetime=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            optional_datetime=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            name="string",
            problems=["string"],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v2/playlist/{jsonable_encoder(service_param)}/create",
            method="POST",
            params={
                "datetime": serialize_datetime(datetime),
                "optionalDatetime": serialize_datetime(optional_datetime) if optional_datetime is not None else None,
            },
            json={"name": name, "problems": problems},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return typing.cast(Playlist, parse_obj_as(type_=Playlist, object_=_response_json))  # type: ignore
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_playlists(
        self,
        service_param: int,
        *,
        other_field: str,
        multi_line_docs: str,
        multiple_field: typing.Union[str, typing.Sequence[str]],
        limit: typing.Optional[int] = None,
        optional_multiple_field: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Playlist]:
        """
        Returns the user's playlists

        Parameters
        ----------
        service_param : int

        other_field : str
            i'm another field

        multi_line_docs : str
            I'm a multiline
            description

        multiple_field : typing.Union[str, typing.Sequence[str]]

        limit : typing.Optional[int]

        optional_multiple_field : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Playlist]

        Examples
        --------
        from seed import SeedTrace

        client = SeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        client.playlist.get_playlists(
            service_param=1,
            limit=1,
            other_field="string",
            multi_line_docs="string",
            optional_multiple_field="string",
            multiple_field="string",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v2/playlist/{jsonable_encoder(service_param)}/all",
            method="GET",
            params={
                "limit": limit,
                "otherField": other_field,
                "multiLineDocs": multi_line_docs,
                "optionalMultipleField": optional_multiple_field,
                "multipleField": multiple_field,
            },
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return typing.cast(typing.List[Playlist], parse_obj_as(type_=typing.List[Playlist], object_=_response_json))  # type: ignore
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_playlist(
        self, service_param: int, playlist_id: PlaylistId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Playlist:
        """
        Returns a playlist

        Parameters
        ----------
        service_param : int

        playlist_id : PlaylistId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Playlist

        Examples
        --------
        from seed import SeedTrace

        client = SeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        client.playlist.get_playlist(
            service_param=1,
            playlist_id="string",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v2/playlist/{jsonable_encoder(service_param)}/{jsonable_encoder(playlist_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return typing.cast(Playlist, parse_obj_as(type_=Playlist, object_=_response_json))  # type: ignore
        if "errorName" in _response_json:
            if _response_json["errorName"] == "PlaylistIdNotFoundError":
                raise PlaylistIdNotFoundError(
                    typing.cast(PlaylistIdNotFoundErrorBody, parse_obj_as(type_=PlaylistIdNotFoundErrorBody, object_=_response_json["content"]))  # type: ignore
                )
            if _response_json["errorName"] == "UnauthorizedError":
                raise UnauthorizedError()
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_playlist(
        self,
        service_param: int,
        playlist_id: PlaylistId,
        *,
        request: typing.Optional[UpdatePlaylistRequest] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[Playlist]:
        """
        Updates a playlist

        Parameters
        ----------
        service_param : int

        playlist_id : PlaylistId

        request : typing.Optional[UpdatePlaylistRequest]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[Playlist]

        Examples
        --------
        from seed import SeedTrace
        from seed.playlist import UpdatePlaylistRequest

        client = SeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        client.playlist.update_playlist(
            service_param=1,
            playlist_id="string",
            request=UpdatePlaylistRequest(
                name="string",
                problems=["string"],
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v2/playlist/{jsonable_encoder(service_param)}/{jsonable_encoder(playlist_id)}",
            method="PUT",
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return typing.cast(typing.Optional[Playlist], parse_obj_as(type_=typing.Optional[Playlist], object_=_response_json))  # type: ignore
        if "errorName" in _response_json:
            if _response_json["errorName"] == "PlaylistIdNotFoundError":
                raise PlaylistIdNotFoundError(
                    typing.cast(PlaylistIdNotFoundErrorBody, parse_obj_as(type_=PlaylistIdNotFoundErrorBody, object_=_response_json["content"]))  # type: ignore
                )
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_playlist(
        self, service_param: int, playlist_id: PlaylistId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Deletes a playlist

        Parameters
        ----------
        service_param : int

        playlist_id : PlaylistId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from seed import SeedTrace

        client = SeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        client.playlist.delete_playlist(
            service_param=1,
            playlist_id="string",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v2/playlist/{jsonable_encoder(service_param)}/{jsonable_encoder(playlist_id)}",
            method="DELETE",
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncPlaylistClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create_playlist(
        self,
        service_param: int,
        *,
        datetime: dt.datetime,
        name: str,
        problems: typing.Sequence[ProblemId],
        optional_datetime: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Playlist:
        """
        Create a new playlist

        Parameters
        ----------
        service_param : int

        datetime : dt.datetime

        name : str

        problems : typing.Sequence[ProblemId]

        optional_datetime : typing.Optional[dt.datetime]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Playlist

        Examples
        --------
        import asyncio
        import datetime

        from seed import AsyncSeedTrace

        client = AsyncSeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.playlist.create_playlist(
                service_param=1,
                datetime=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                optional_datetime=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                name="string",
                problems=["string"],
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v2/playlist/{jsonable_encoder(service_param)}/create",
            method="POST",
            params={
                "datetime": serialize_datetime(datetime),
                "optionalDatetime": serialize_datetime(optional_datetime) if optional_datetime is not None else None,
            },
            json={"name": name, "problems": problems},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return typing.cast(Playlist, parse_obj_as(type_=Playlist, object_=_response_json))  # type: ignore
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_playlists(
        self,
        service_param: int,
        *,
        other_field: str,
        multi_line_docs: str,
        multiple_field: typing.Union[str, typing.Sequence[str]],
        limit: typing.Optional[int] = None,
        optional_multiple_field: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Playlist]:
        """
        Returns the user's playlists

        Parameters
        ----------
        service_param : int

        other_field : str
            i'm another field

        multi_line_docs : str
            I'm a multiline
            description

        multiple_field : typing.Union[str, typing.Sequence[str]]

        limit : typing.Optional[int]

        optional_multiple_field : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Playlist]

        Examples
        --------
        import asyncio

        from seed import AsyncSeedTrace

        client = AsyncSeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.playlist.get_playlists(
                service_param=1,
                limit=1,
                other_field="string",
                multi_line_docs="string",
                optional_multiple_field="string",
                multiple_field="string",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v2/playlist/{jsonable_encoder(service_param)}/all",
            method="GET",
            params={
                "limit": limit,
                "otherField": other_field,
                "multiLineDocs": multi_line_docs,
                "optionalMultipleField": optional_multiple_field,
                "multipleField": multiple_field,
            },
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return typing.cast(typing.List[Playlist], parse_obj_as(type_=typing.List[Playlist], object_=_response_json))  # type: ignore
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_playlist(
        self, service_param: int, playlist_id: PlaylistId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Playlist:
        """
        Returns a playlist

        Parameters
        ----------
        service_param : int

        playlist_id : PlaylistId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Playlist

        Examples
        --------
        import asyncio

        from seed import AsyncSeedTrace

        client = AsyncSeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.playlist.get_playlist(
                service_param=1,
                playlist_id="string",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v2/playlist/{jsonable_encoder(service_param)}/{jsonable_encoder(playlist_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return typing.cast(Playlist, parse_obj_as(type_=Playlist, object_=_response_json))  # type: ignore
        if "errorName" in _response_json:
            if _response_json["errorName"] == "PlaylistIdNotFoundError":
                raise PlaylistIdNotFoundError(
                    typing.cast(PlaylistIdNotFoundErrorBody, parse_obj_as(type_=PlaylistIdNotFoundErrorBody, object_=_response_json["content"]))  # type: ignore
                )
            if _response_json["errorName"] == "UnauthorizedError":
                raise UnauthorizedError()
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_playlist(
        self,
        service_param: int,
        playlist_id: PlaylistId,
        *,
        request: typing.Optional[UpdatePlaylistRequest] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[Playlist]:
        """
        Updates a playlist

        Parameters
        ----------
        service_param : int

        playlist_id : PlaylistId

        request : typing.Optional[UpdatePlaylistRequest]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[Playlist]

        Examples
        --------
        import asyncio

        from seed import AsyncSeedTrace
        from seed.playlist import UpdatePlaylistRequest

        client = AsyncSeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.playlist.update_playlist(
                service_param=1,
                playlist_id="string",
                request=UpdatePlaylistRequest(
                    name="string",
                    problems=["string"],
                ),
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v2/playlist/{jsonable_encoder(service_param)}/{jsonable_encoder(playlist_id)}",
            method="PUT",
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return typing.cast(typing.Optional[Playlist], parse_obj_as(type_=typing.Optional[Playlist], object_=_response_json))  # type: ignore
        if "errorName" in _response_json:
            if _response_json["errorName"] == "PlaylistIdNotFoundError":
                raise PlaylistIdNotFoundError(
                    typing.cast(PlaylistIdNotFoundErrorBody, parse_obj_as(type_=PlaylistIdNotFoundErrorBody, object_=_response_json["content"]))  # type: ignore
                )
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete_playlist(
        self, service_param: int, playlist_id: PlaylistId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Deletes a playlist

        Parameters
        ----------
        service_param : int

        playlist_id : PlaylistId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from seed import AsyncSeedTrace

        client = AsyncSeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.playlist.delete_playlist(
                service_param=1,
                playlist_id="string",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v2/playlist/{jsonable_encoder(service_param)}/{jsonable_encoder(playlist_id)}",
            method="DELETE",
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
