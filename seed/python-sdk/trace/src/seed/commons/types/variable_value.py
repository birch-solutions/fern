# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

from ...core.pydantic_utilities import pydantic_v1
from .binary_tree_node_value import BinaryTreeNodeValue
from .binary_tree_value import BinaryTreeValue
from .doubly_linked_list_node_value import DoublyLinkedListNodeValue
from .doubly_linked_list_value import DoublyLinkedListValue
from .node_id import NodeId
from .singly_linked_list_node_value import SinglyLinkedListNodeValue
from .singly_linked_list_value import SinglyLinkedListValue


class VariableValue_IntegerValue(pydantic_v1.BaseModel):
    type: typing.Literal["integerValue"] = "integerValue"
    value: int

    class Config:
        frozen = True
        smart_union = True


class VariableValue_BooleanValue(pydantic_v1.BaseModel):
    type: typing.Literal["booleanValue"] = "booleanValue"
    value: bool

    class Config:
        frozen = True
        smart_union = True


class VariableValue_DoubleValue(pydantic_v1.BaseModel):
    type: typing.Literal["doubleValue"] = "doubleValue"
    value: float

    class Config:
        frozen = True
        smart_union = True


class VariableValue_StringValue(pydantic_v1.BaseModel):
    type: typing.Literal["stringValue"] = "stringValue"
    value: str

    class Config:
        frozen = True
        smart_union = True


class VariableValue_CharValue(pydantic_v1.BaseModel):
    type: typing.Literal["charValue"] = "charValue"
    value: str

    class Config:
        frozen = True
        smart_union = True


class VariableValue_MapValue(pydantic_v1.BaseModel):
    type: typing.Literal["mapValue"] = "mapValue"
    key_value_pairs: typing.List[KeyValuePair] = pydantic_v1.Field(alias="keyValuePairs")

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        populate_by_name = True


class VariableValue_ListValue(pydantic_v1.BaseModel):
    type: typing.Literal["listValue"] = "listValue"
    value: typing.List[VariableValue]

    class Config:
        frozen = True
        smart_union = True


class VariableValue_BinaryTreeValue(pydantic_v1.BaseModel):
    type: typing.Literal["binaryTreeValue"] = "binaryTreeValue"
    root: typing.Optional[NodeId]
    nodes: typing.Dict[NodeId, BinaryTreeNodeValue]

    class Config:
        frozen = True
        smart_union = True


class VariableValue_SinglyLinkedListValue(pydantic_v1.BaseModel):
    type: typing.Literal["singlyLinkedListValue"] = "singlyLinkedListValue"
    head: typing.Optional[NodeId]
    nodes: typing.Dict[NodeId, SinglyLinkedListNodeValue]

    class Config:
        frozen = True
        smart_union = True


class VariableValue_DoublyLinkedListValue(pydantic_v1.BaseModel):
    type: typing.Literal["doublyLinkedListValue"] = "doublyLinkedListValue"
    head: typing.Optional[NodeId]
    nodes: typing.Dict[NodeId, DoublyLinkedListNodeValue]

    class Config:
        frozen = True
        smart_union = True


class VariableValue_NullValue(pydantic_v1.BaseModel):
    type: typing.Literal["nullValue"] = "nullValue"

    class Config:
        frozen = True
        smart_union = True


VariableValue = typing.Union[
    VariableValue_IntegerValue,
    VariableValue_BooleanValue,
    VariableValue_DoubleValue,
    VariableValue_StringValue,
    VariableValue_CharValue,
    VariableValue_MapValue,
    VariableValue_ListValue,
    VariableValue_BinaryTreeValue,
    VariableValue_SinglyLinkedListValue,
    VariableValue_DoublyLinkedListValue,
    VariableValue_NullValue,
]
from .key_value_pair import KeyValuePair  # noqa: E402
from .map_value import MapValue  # noqa: E402

VariableValue_MapValue.update_forward_refs(KeyValuePair=KeyValuePair, MapValue=MapValue, VariableValue=VariableValue)
VariableValue_ListValue.update_forward_refs(KeyValuePair=KeyValuePair, MapValue=MapValue, VariableValue=VariableValue)
