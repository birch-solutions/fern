# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ....core.pydantic_utilities import UniversalBaseModel
from ....commons.types.list_type import ListType
from ....commons.types.map_type import MapType
import typing
from .parameter import Parameter
from ....core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic
import typing_extensions
from ....commons.types.variable_type import VariableType
from ....core.serialization import FieldMetadata
from ....core.pydantic_utilities import update_forward_refs


class FunctionSignature_Void(UniversalBaseModel):
    type: typing.Literal["void"] = "void"
    parameters: typing.List[Parameter]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class FunctionSignature_NonVoid(UniversalBaseModel):
    type: typing.Literal["nonVoid"] = "nonVoid"
    parameters: typing.List[Parameter]
    return_type: typing_extensions.Annotated[VariableType, FieldMetadata(alias="returnType")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class FunctionSignature_VoidThatTakesActualResult(UniversalBaseModel):
    type: typing.Literal["voidThatTakesActualResult"] = "voidThatTakesActualResult"
    parameters: typing.List[Parameter]
    actual_result_type: typing_extensions.Annotated[VariableType, FieldMetadata(alias="actualResultType")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


FunctionSignature = typing.Union[
    FunctionSignature_Void, FunctionSignature_NonVoid, FunctionSignature_VoidThatTakesActualResult
]
update_forward_refs(ListType, FunctionSignature_Void=FunctionSignature_Void)
update_forward_refs(MapType, FunctionSignature_Void=FunctionSignature_Void)
update_forward_refs(ListType, FunctionSignature_NonVoid=FunctionSignature_NonVoid)
update_forward_refs(MapType, FunctionSignature_NonVoid=FunctionSignature_NonVoid)
update_forward_refs(ListType, FunctionSignature_VoidThatTakesActualResult=FunctionSignature_VoidThatTakesActualResult)
update_forward_refs(MapType, FunctionSignature_VoidThatTakesActualResult=FunctionSignature_VoidThatTakesActualResult)
