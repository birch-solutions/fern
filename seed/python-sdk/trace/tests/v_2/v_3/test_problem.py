# This file was auto-generated by Fern from our API Definition.

from seed import SeedTrace
from seed import AsyncSeedTrace
import typing
from ...utilities import validate_response


async def test_get_lightweight_problems(client: SeedTrace, async_client: AsyncSeedTrace) -> None:
    expected_response: typing.Any = [
        {
            "problemId": "string",
            "problemName": "string",
            "problemVersion": 1,
            "variableTypes": [{"type": "integerType"}],
        }
    ]
    expected_types: typing.Tuple[typing.Any, typing.Any] = (
        "list",
        {
            0: {
                "problemId": None,
                "problemName": None,
                "problemVersion": "integer",
                "variableTypes": ("set", {0: "no_validate"}),
            }
        },
    )
    response = client.v_2.v_3.problem.get_lightweight_problems()
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.v_2.v_3.problem.get_lightweight_problems()
    validate_response(async_response, expected_response, expected_types)


async def test_get_problems(client: SeedTrace, async_client: AsyncSeedTrace) -> None:
    expected_response: typing.Any = [
        {
            "problemId": "string",
            "problemDescription": {
                "boards": [{"0": "s", "1": "t", "2": "r", "3": "i", "4": "n", "5": "g", "type": "html"}]
            },
            "problemName": "string",
            "problemVersion": 1,
            "supportedLanguages": ["JAVA"],
            "customFiles": {"type": "basic"},
            "generatedFiles": {
                "generatedTestCaseFiles": {"string": {"files": []}},
                "generatedTemplateFiles": {"string": {"files": []}},
                "other": {"string": {"files": []}},
            },
            "customTestCaseTemplates": [
                {
                    "templateId": "string",
                    "name": "string",
                    "implementation": {
                        "description": {"boards": [{"type": "html", "key": "value"}]},
                        "function": {"type": "withActualResult"},
                    },
                }
            ],
            "testcases": [
                {
                    "metadata": {"id": "string", "name": "string", "hidden": True},
                    "implementation": {
                        "0": "s",
                        "1": "t",
                        "2": "r",
                        "3": "i",
                        "4": "n",
                        "5": "g",
                        "type": "templateId",
                    },
                    "arguments": {"string": {"type": "integerValue", "key": "value"}},
                    "expects": {},
                }
            ],
            "isPublic": True,
        }
    ]
    expected_types: typing.Tuple[typing.Any, typing.Any] = (
        "list",
        {
            0: {
                "problemId": None,
                "problemDescription": {"boards": ("list", {0: "no_validate"})},
                "problemName": None,
                "problemVersion": "integer",
                "supportedLanguages": ("set", {0: None}),
                "customFiles": "no_validate",
                "generatedFiles": {
                    "generatedTestCaseFiles": ("dict", {0: (None, {"files": ("list", {})})}),
                    "generatedTemplateFiles": ("dict", {0: (None, {"files": ("list", {})})}),
                    "other": ("dict", {0: (None, {"files": ("list", {})})}),
                },
                "customTestCaseTemplates": (
                    "list",
                    {
                        0: {
                            "templateId": None,
                            "name": None,
                            "implementation": {
                                "description": {"boards": ("list", {0: "no_validate"})},
                                "function": "no_validate",
                            },
                        }
                    },
                ),
                "testcases": (
                    "list",
                    {
                        0: {
                            "metadata": {"id": None, "name": None, "hidden": None},
                            "implementation": "no_validate",
                            "arguments": ("dict", {0: (None, "no_validate")}),
                            "expects": {"expectedStdout": None},
                        }
                    },
                ),
                "isPublic": None,
            }
        },
    )
    response = client.v_2.v_3.problem.get_problems()
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.v_2.v_3.problem.get_problems()
    validate_response(async_response, expected_response, expected_types)


async def test_get_latest_problem(client: SeedTrace, async_client: AsyncSeedTrace) -> None:
    expected_response: typing.Any = {
        "problemId": "string",
        "problemDescription": {
            "boards": [{"0": "s", "1": "t", "2": "r", "3": "i", "4": "n", "5": "g", "type": "html"}]
        },
        "problemName": "string",
        "problemVersion": 1,
        "supportedLanguages": ["JAVA"],
        "customFiles": {"type": "basic"},
        "generatedFiles": {
            "generatedTestCaseFiles": {"string": {"files": []}},
            "generatedTemplateFiles": {"string": {"files": []}},
            "other": {"string": {"files": []}},
        },
        "customTestCaseTemplates": [
            {
                "templateId": "string",
                "name": "string",
                "implementation": {
                    "description": {"boards": [{"type": "html", "key": "value"}]},
                    "function": {"type": "withActualResult"},
                },
            }
        ],
        "testcases": [
            {
                "metadata": {"id": "string", "name": "string", "hidden": True},
                "implementation": {"0": "s", "1": "t", "2": "r", "3": "i", "4": "n", "5": "g", "type": "templateId"},
                "arguments": {"string": {"type": "integerValue", "key": "value"}},
                "expects": {},
            }
        ],
        "isPublic": True,
    }
    expected_types: typing.Any = {
        "problemId": None,
        "problemDescription": {"boards": ("list", {0: "no_validate"})},
        "problemName": None,
        "problemVersion": "integer",
        "supportedLanguages": ("set", {0: None}),
        "customFiles": "no_validate",
        "generatedFiles": {
            "generatedTestCaseFiles": ("dict", {0: (None, {"files": ("list", {})})}),
            "generatedTemplateFiles": ("dict", {0: (None, {"files": ("list", {})})}),
            "other": ("dict", {0: (None, {"files": ("list", {})})}),
        },
        "customTestCaseTemplates": (
            "list",
            {
                0: {
                    "templateId": None,
                    "name": None,
                    "implementation": {
                        "description": {"boards": ("list", {0: "no_validate"})},
                        "function": "no_validate",
                    },
                }
            },
        ),
        "testcases": (
            "list",
            {
                0: {
                    "metadata": {"id": None, "name": None, "hidden": None},
                    "implementation": "no_validate",
                    "arguments": ("dict", {0: (None, "no_validate")}),
                    "expects": {"expectedStdout": None},
                }
            },
        ),
        "isPublic": None,
    }
    response = client.v_2.v_3.problem.get_latest_problem(problem_id="string")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.v_2.v_3.problem.get_latest_problem(problem_id="string")
    validate_response(async_response, expected_response, expected_types)


async def test_get_problem_version(client: SeedTrace, async_client: AsyncSeedTrace) -> None:
    expected_response: typing.Any = {
        "problemId": "string",
        "problemDescription": {
            "boards": [{"0": "s", "1": "t", "2": "r", "3": "i", "4": "n", "5": "g", "type": "html"}]
        },
        "problemName": "string",
        "problemVersion": 1,
        "supportedLanguages": ["JAVA"],
        "customFiles": {"type": "basic"},
        "generatedFiles": {
            "generatedTestCaseFiles": {"string": {"files": []}},
            "generatedTemplateFiles": {"string": {"files": []}},
            "other": {"string": {"files": []}},
        },
        "customTestCaseTemplates": [
            {
                "templateId": "string",
                "name": "string",
                "implementation": {
                    "description": {"boards": [{"type": "html", "key": "value"}]},
                    "function": {"type": "withActualResult"},
                },
            }
        ],
        "testcases": [
            {
                "metadata": {"id": "string", "name": "string", "hidden": True},
                "implementation": {"0": "s", "1": "t", "2": "r", "3": "i", "4": "n", "5": "g", "type": "templateId"},
                "arguments": {"string": {"type": "integerValue", "key": "value"}},
                "expects": {},
            }
        ],
        "isPublic": True,
    }
    expected_types: typing.Any = {
        "problemId": None,
        "problemDescription": {"boards": ("list", {0: "no_validate"})},
        "problemName": None,
        "problemVersion": "integer",
        "supportedLanguages": ("set", {0: None}),
        "customFiles": "no_validate",
        "generatedFiles": {
            "generatedTestCaseFiles": ("dict", {0: (None, {"files": ("list", {})})}),
            "generatedTemplateFiles": ("dict", {0: (None, {"files": ("list", {})})}),
            "other": ("dict", {0: (None, {"files": ("list", {})})}),
        },
        "customTestCaseTemplates": (
            "list",
            {
                0: {
                    "templateId": None,
                    "name": None,
                    "implementation": {
                        "description": {"boards": ("list", {0: "no_validate"})},
                        "function": "no_validate",
                    },
                }
            },
        ),
        "testcases": (
            "list",
            {
                0: {
                    "metadata": {"id": None, "name": None, "hidden": None},
                    "implementation": "no_validate",
                    "arguments": ("dict", {0: (None, "no_validate")}),
                    "expects": {"expectedStdout": None},
                }
            },
        ),
        "isPublic": None,
    }
    response = client.v_2.v_3.problem.get_problem_version(problem_id="string", problem_version=1)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.v_2.v_3.problem.get_problem_version(problem_id="string", problem_version=1)
    validate_response(async_response, expected_response, expected_types)
