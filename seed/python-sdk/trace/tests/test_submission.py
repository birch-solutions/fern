# This file was auto-generated by Fern from our API Definition.

from seed import Language
from seed.client import AsyncSeedTrace, SeedTrace

from .utilities import validate_response


async def test_create_execution_session(client: SeedTrace, async_client: AsyncSeedTrace) -> None:
    expected_response = {
        "sessionId": "string",
        "executionSessionUrl": "string",
        "language": "JAVA",
        "status": "CREATING_CONTAINER",
    }
    response = client.submission.create_execution_session(language=Language.JAVA)
    validate_response(response, expected_response)

    async_response = await async_client.submission.create_execution_session(language=Language.JAVA)
    validate_response(async_response, expected_response)


async def test_get_execution_session(client: SeedTrace, async_client: AsyncSeedTrace) -> None:
    expected_response = {
        "sessionId": "string",
        "executionSessionUrl": "string",
        "language": "JAVA",
        "status": "CREATING_CONTAINER",
    }
    response = client.submission.get_execution_session(session_id="string")
    validate_response(response, expected_response)

    async_response = await async_client.submission.get_execution_session(session_id="string")
    validate_response(async_response, expected_response)


async def test_stop_execution_session(client: SeedTrace, async_client: AsyncSeedTrace) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert client.submission.stop_execution_session(session_id="string") is None  # type: ignore[func-returns-value]

    assert await async_client.submission.stop_execution_session(session_id="string") is None  # type: ignore[func-returns-value]


async def test_get_execution_sessions_state(client: SeedTrace, async_client: AsyncSeedTrace) -> None:
    expected_response = {
        "states": {
            "string": {
                "lastTimeContacted": "string",
                "sessionId": "string",
                "isWarmInstance": True,
                "awsTaskId": "string",
                "language": "JAVA",
                "status": "CREATING_CONTAINER",
            }
        },
        "numWarmingInstances": 1,
        "warmingSessionIds": ["string"],
    }
    response = client.submission.get_execution_sessions_state()
    validate_response(response, expected_response)

    async_response = await async_client.submission.get_execution_sessions_state()
    validate_response(async_response, expected_response)
