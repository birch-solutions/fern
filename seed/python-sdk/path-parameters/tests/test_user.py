# This file was auto-generated by Fern from our API Definition.

from seed import SeedPathParameters
from seed import AsyncSeedPathParameters
import typing
from .utilities import validate_response


async def test_get_organization(client: SeedPathParameters, async_client: AsyncSeedPathParameters) -> None:
    expected_response: typing.Any = {"name": "name", "tags": ["tags", "tags"]}
    expected_types: typing.Any = {"name": None, "tags": ("list", {0: None, 1: None})}
    response = client.user.get_organization(organization_id="organizationId")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.user.get_organization(organization_id="organizationId")
    validate_response(async_response, expected_response, expected_types)


async def test_get_user(client: SeedPathParameters, async_client: AsyncSeedPathParameters) -> None:
    expected_response: typing.Any = {"name": "name", "tags": ["tags", "tags"]}
    expected_types: typing.Any = {"name": None, "tags": ("list", {0: None, 1: None})}
    response = client.user.get_user(user_id="userId")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.user.get_user(user_id="userId")
    validate_response(async_response, expected_response, expected_types)


async def test_get_organization_user(client: SeedPathParameters, async_client: AsyncSeedPathParameters) -> None:
    expected_response: typing.Any = {"name": "name", "tags": ["tags", "tags"]}
    expected_types: typing.Any = {"name": None, "tags": ("list", {0: None, 1: None})}
    response = client.user.get_organization_user(organization_id="organizationId", user_id="userId")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.user.get_organization_user(organization_id="organizationId", user_id="userId")
    validate_response(async_response, expected_response, expected_types)
