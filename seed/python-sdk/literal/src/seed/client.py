# This file was auto-generated by Fern from our API Definition.

import typing

import httpx

from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .resources.headers.client import AsyncHeadersClient, HeadersClient
from .resources.inlined.client import AsyncInlinedClient, InlinedClient
from .resources.literal.client import AsyncLiteralClient, LiteralClient
from .resources.path.client import AsyncPathClient, PathClient
from .resources.query.client import AsyncQueryClient, QueryClient
from .resources.reference.client import AsyncReferenceClient, ReferenceClient


class SeedLiteral:
    def __init__(
        self, *, base_url: str, timeout: typing.Optional[float] = 60, httpx_client: typing.Optional[httpx.Client] = None
    ):
        self._client_wrapper = SyncClientWrapper(
            base_url=base_url, httpx_client=httpx.Client(timeout=timeout) if httpx_client is None else httpx_client
        )
        self.headers = HeadersClient(client_wrapper=self._client_wrapper)
        self.inlined = InlinedClient(client_wrapper=self._client_wrapper)
        self.literal = LiteralClient(client_wrapper=self._client_wrapper)
        self.path = PathClient(client_wrapper=self._client_wrapper)
        self.query = QueryClient(client_wrapper=self._client_wrapper)
        self.reference = ReferenceClient(client_wrapper=self._client_wrapper)


class AsyncSeedLiteral:
    def __init__(
        self,
        *,
        base_url: str,
        timeout: typing.Optional[float] = 60,
        httpx_client: typing.Optional[httpx.AsyncClient] = None
    ):
        self._client_wrapper = AsyncClientWrapper(
            base_url=base_url, httpx_client=httpx.AsyncClient(timeout=timeout) if httpx_client is None else httpx_client
        )
        self.headers = AsyncHeadersClient(client_wrapper=self._client_wrapper)
        self.inlined = AsyncInlinedClient(client_wrapper=self._client_wrapper)
        self.literal = AsyncLiteralClient(client_wrapper=self._client_wrapper)
        self.path = AsyncPathClient(client_wrapper=self._client_wrapper)
        self.query = AsyncQueryClient(client_wrapper=self._client_wrapper)
        self.reference = AsyncReferenceClient(client_wrapper=self._client_wrapper)
