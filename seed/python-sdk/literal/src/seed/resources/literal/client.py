# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_dict import remove_none_from_dict
from ...core.request_options import RequestOptions
from .types.create_options_response import CreateOptionsResponse
from .types.options import Options
from .types.undiscriminated_options import UndiscriminatedOptions

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class LiteralClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create_options(
        self, *, values: typing.Dict[str, str], request_options: typing.Optional[RequestOptions] = None
    ) -> CreateOptionsResponse:
        """
        Parameters:
            - values: typing.Dict[str, str].

            - request_options: typing.Optional[RequestOptions]. Additional options for request-specific configuration when calling APIs via the SDK.
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "options"),
            params=jsonable_encoder(
                request_options.additional_query_parameters if request_options is not None else None
            ),
            json=jsonable_encoder({"values": values})
            if request_options is None or request_options.additional_body_parameters is None
            else {
                **jsonable_encoder({"values": values}),
                **(jsonable_encoder(remove_none_from_dict(request_options.additional_body_parameters))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.additional_headers if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.timeout_in_seconds
            if request_options is not None and request_options.timeout_in_seconds is not None
            else 60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CreateOptionsResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_options(self, *, request_options: typing.Optional[RequestOptions] = None) -> Options:
        """
        Parameters:
            - request_options: typing.Optional[RequestOptions]. Additional options for request-specific configuration when calling APIs via the SDK.
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "options"),
            params=jsonable_encoder(
                request_options.additional_query_parameters if request_options is not None else None
            ),
            json=jsonable_encoder({"dryRun": "true"})
            if request_options is None or request_options.additional_body_parameters is None
            else {
                **jsonable_encoder({"dryRun": "true"}),
                **(jsonable_encoder(remove_none_from_dict(request_options.additional_body_parameters))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.additional_headers if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.timeout_in_seconds
            if request_options is not None and request_options.timeout_in_seconds is not None
            else 60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Options, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_undiscriminated_options(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> UndiscriminatedOptions:
        """
        Parameters:
            - request_options: typing.Optional[RequestOptions]. Additional options for request-specific configuration when calling APIs via the SDK.
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "options"),
            params=jsonable_encoder(
                request_options.additional_query_parameters if request_options is not None else None
            ),
            json=jsonable_encoder({"dryRun": "true"})
            if request_options is None or request_options.additional_body_parameters is None
            else {
                **jsonable_encoder({"dryRun": "true"}),
                **(jsonable_encoder(remove_none_from_dict(request_options.additional_body_parameters))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.additional_headers if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.timeout_in_seconds
            if request_options is not None and request_options.timeout_in_seconds is not None
            else 60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(UndiscriminatedOptions, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncLiteralClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create_options(
        self, *, values: typing.Dict[str, str], request_options: typing.Optional[RequestOptions] = None
    ) -> CreateOptionsResponse:
        """
        Parameters:
            - values: typing.Dict[str, str].

            - request_options: typing.Optional[RequestOptions]. Additional options for request-specific configuration when calling APIs via the SDK.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "options"),
            params=jsonable_encoder(
                request_options.additional_query_parameters if request_options is not None else None
            ),
            json=jsonable_encoder({"values": values})
            if request_options is None or request_options.additional_body_parameters is None
            else {
                **jsonable_encoder({"values": values}),
                **(jsonable_encoder(remove_none_from_dict(request_options.additional_body_parameters))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.additional_headers if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.timeout_in_seconds
            if request_options is not None and request_options.timeout_in_seconds is not None
            else 60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CreateOptionsResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_options(self, *, request_options: typing.Optional[RequestOptions] = None) -> Options:
        """
        Parameters:
            - request_options: typing.Optional[RequestOptions]. Additional options for request-specific configuration when calling APIs via the SDK.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "options"),
            params=jsonable_encoder(
                request_options.additional_query_parameters if request_options is not None else None
            ),
            json=jsonable_encoder({"dryRun": "true"})
            if request_options is None or request_options.additional_body_parameters is None
            else {
                **jsonable_encoder({"dryRun": "true"}),
                **(jsonable_encoder(remove_none_from_dict(request_options.additional_body_parameters))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.additional_headers if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.timeout_in_seconds
            if request_options is not None and request_options.timeout_in_seconds is not None
            else 60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Options, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_undiscriminated_options(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> UndiscriminatedOptions:
        """
        Parameters:
            - request_options: typing.Optional[RequestOptions]. Additional options for request-specific configuration when calling APIs via the SDK.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "options"),
            params=jsonable_encoder(
                request_options.additional_query_parameters if request_options is not None else None
            ),
            json=jsonable_encoder({"dryRun": "true"})
            if request_options is None or request_options.additional_body_parameters is None
            else {
                **jsonable_encoder({"dryRun": "true"}),
                **(jsonable_encoder(remove_none_from_dict(request_options.additional_body_parameters))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.additional_headers if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.timeout_in_seconds
            if request_options is not None and request_options.timeout_in_seconds is not None
            else 60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(UndiscriminatedOptions, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
