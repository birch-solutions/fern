# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.remove_none_from_dict import remove_none_from_dict
from ...types.operand import Operand


class QueryParamClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def send(self, *, value: typing.Optional[Operand] = None) -> None:
        """
        Parameters:
            - value: typing.Optional[Operand].
        ---
        from seed import Operand
        from seed.client import SeedEnum

        client = SeedEnum(base_url="https://yourhost.com/path/to/api", )
        client.query_param.send(value=Operand., )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "query"),
            params=remove_none_from_dict({"value": value}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def send_list(self, *, value: typing.Optional[typing.Union[Operand, typing.List[Operand]]] = None) -> None:
        """
        Parameters:
            - value: typing.Optional[typing.Union[Operand, typing.List[Operand]]].
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "query-list"),
            params=remove_none_from_dict({"value": value}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncQueryParamClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def send(self, *, value: typing.Optional[Operand] = None) -> None:
        """
        Parameters:
            - value: typing.Optional[Operand].
        ---
        from seed import Operand
        from seed.client import AsyncSeedEnum

        client = AsyncSeedEnum(base_url="https://yourhost.com/path/to/api", )
        await client.query_param.send(value=Operand., )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "query"),
            params=remove_none_from_dict({"value": value}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def send_list(self, *, value: typing.Optional[typing.Union[Operand, typing.List[Operand]]] = None) -> None:
        """
        Parameters:
            - value: typing.Optional[typing.Union[Operand, typing.List[Operand]]].
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "query-list"),
            params=remove_none_from_dict({"value": value}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
