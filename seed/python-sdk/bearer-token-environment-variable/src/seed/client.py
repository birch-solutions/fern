# This file was auto-generated by Fern from our API Definition.

import os
import typing

import httpx

from .core.api_error import ApiError
from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .resources.service.client import AsyncServiceClient, ServiceClient


class SeedBearerTokenEnvironmentVariable:
    def __init__(
        self,
        *,
        base_url: str,
        api_key: typing.Optional[typing.Union[str, typing.Callable[[], str]]] = os.getenv("COURIER_API_KEY"),
        timeout: typing.Optional[float] = 60,
        httpx_client: typing.Optional[httpx.Client] = None
    ):
        if api_key is None:
            raise ApiError(
                message="The client must be instantiated be either passing in api_key or setting COURIER_API_KEY"
            )
        self._client_wrapper = SyncClientWrapper(
            base_url=base_url,
            api_key=api_key,
            httpx_client=httpx.Client(timeout=timeout) if httpx_client is None else httpx_client,
        )
        self.service = ServiceClient(client_wrapper=self._client_wrapper)


class AsyncSeedBearerTokenEnvironmentVariable:
    def __init__(
        self,
        *,
        base_url: str,
        api_key: typing.Optional[typing.Union[str, typing.Callable[[], str]]] = os.getenv("COURIER_API_KEY"),
        timeout: typing.Optional[float] = 60,
        httpx_client: typing.Optional[httpx.AsyncClient] = None
    ):
        if api_key is None:
            raise ApiError(
                message="The client must be instantiated be either passing in api_key or setting COURIER_API_KEY"
            )
        self._client_wrapper = AsyncClientWrapper(
            base_url=base_url,
            api_key=api_key,
            httpx_client=httpx.AsyncClient(timeout=timeout) if httpx_client is None else httpx_client,
        )
        self.service = AsyncServiceClient(client_wrapper=self._client_wrapper)
