# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ....core.pydantic_utilities import UniversalBaseModel
import typing
import typing_extensions
from ....core.serialization import FieldMetadata
from ....core.pydantic_utilities import universal_root_validator
from ....core.pydantic_utilities import universal_field_validator
import pydantic


class Animal_Dog(UniversalBaseModel):
    animal: typing.Literal["dog"] = "dog"
    name: str
    likes_to_woof: typing_extensions.Annotated[bool, FieldMetadata(alias="likesToWoof")]

    class Partial(typing.TypedDict):
        animal: typing_extensions.NotRequired[typing.Literal["dog"]]
        name: typing_extensions.NotRequired[str]
        likes_to_woof: typing_extensions.NotRequired[
            typing_extensions.Annotated[bool, FieldMetadata(alias="likesToWoof")]
        ]

    class Validators:
        """
        Use this class to add validators to the Pydantic model.

            @Animal_Dog.Validators.root()
            def validate(values: Animal_Dog.Partial) -> Animal_Dog.Partial:
                ...

            @Animal_Dog.Validators.field("animal")
            def validate_animal(animal: typing.Literal["dog"], values: Animal_Dog.Partial) -> typing.Literal["dog"]:
                ...

            @Animal_Dog.Validators.field("name")
            def validate_name(name: str, values: Animal_Dog.Partial) -> str:
                ...

            @Animal_Dog.Validators.field("likes_to_woof")
            def validate_likes_to_woof(likes_to_woof: typing_extensions.Annotated[bool, FieldMetadata(alias="likesToWoof")], values: Animal_Dog.Partial) -> typing_extensions.Annotated[bool, FieldMetadata(alias="likesToWoof")]:
                ...
        """

        _pre_validators: typing.ClassVar[typing.List[Animal_Dog.Validators._PreRootValidator]] = []
        _post_validators: typing.ClassVar[typing.List[Animal_Dog.Validators._RootValidator]] = []
        _animal_pre_validators: typing.ClassVar[typing.List[Animal_Dog.Validators.PreAnimalValidator]] = []
        _animal_post_validators: typing.ClassVar[typing.List[Animal_Dog.Validators.AnimalValidator]] = []
        _name_pre_validators: typing.ClassVar[typing.List[Animal_Dog.Validators.PreNameValidator]] = []
        _name_post_validators: typing.ClassVar[typing.List[Animal_Dog.Validators.NameValidator]] = []
        _likes_to_woof_pre_validators: typing.ClassVar[typing.List[Animal_Dog.Validators.PreLikesToWoofValidator]] = []
        _likes_to_woof_post_validators: typing.ClassVar[typing.List[Animal_Dog.Validators.LikesToWoofValidator]] = []

        @typing.overload
        @classmethod
        def root(
            cls, *, pre: typing.Literal[False] = False
        ) -> typing.Callable[[Animal_Dog.Validators._RootValidator], Animal_Dog.Validators._RootValidator]: ...
        @typing.overload
        @classmethod
        def root(
            cls, *, pre: typing.Literal[True]
        ) -> typing.Callable[[Animal_Dog.Validators._PreRootValidator], Animal_Dog.Validators._PreRootValidator]: ...
        @classmethod
        def root(cls, *, pre: bool = False) -> typing.Any:
            def decorator(validator: typing.Any) -> typing.Any:
                if pre:
                    cls._pre_validators.append(validator)
                else:
                    cls._post_validators.append(validator)
                return validator

            return decorator

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing.Literal["animal"], *, pre: typing.Literal[True]
        ) -> typing.Callable[[Animal_Dog.Validators.PreAnimalValidator], Animal_Dog.Validators.PreAnimalValidator]: ...
        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing.Literal["animal"], *, pre: typing.Literal[False] = False
        ) -> typing.Callable[[Animal_Dog.Validators.AnimalValidator], Animal_Dog.Validators.AnimalValidator]: ...
        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing.Literal["name"], *, pre: typing.Literal[True]
        ) -> typing.Callable[[Animal_Dog.Validators.PreNameValidator], Animal_Dog.Validators.PreNameValidator]: ...
        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing.Literal["name"], *, pre: typing.Literal[False] = False
        ) -> typing.Callable[[Animal_Dog.Validators.NameValidator], Animal_Dog.Validators.NameValidator]: ...
        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing.Literal["likes_to_woof"], *, pre: typing.Literal[True]
        ) -> typing.Callable[
            [Animal_Dog.Validators.PreLikesToWoofValidator], Animal_Dog.Validators.PreLikesToWoofValidator
        ]: ...
        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing.Literal["likes_to_woof"], *, pre: typing.Literal[False] = False
        ) -> typing.Callable[
            [Animal_Dog.Validators.LikesToWoofValidator], Animal_Dog.Validators.LikesToWoofValidator
        ]: ...
        @classmethod
        def field(cls, field_name: str, *, pre: bool = False) -> typing.Any:
            def decorator(validator: typing.Any) -> typing.Any:
                if field_name == "animal":
                    if pre:
                        cls._animal_pre_validators.append(validator)
                    else:
                        cls._animal_post_validators.append(validator)
                if field_name == "name":
                    if pre:
                        cls._name_pre_validators.append(validator)
                    else:
                        cls._name_post_validators.append(validator)
                if field_name == "likes_to_woof":
                    if pre:
                        cls._likes_to_woof_pre_validators.append(validator)
                    else:
                        cls._likes_to_woof_post_validators.append(validator)
                return validator

            return decorator

        class PreAnimalValidator(typing.Protocol):
            def __call__(self, __v: typing.Any, __values: Animal_Dog.Partial) -> typing.Any: ...

        class AnimalValidator(typing.Protocol):
            def __call__(self, __v: typing.Literal["dog"], __values: Animal_Dog.Partial) -> typing.Literal["dog"]: ...

        class PreNameValidator(typing.Protocol):
            def __call__(self, __v: typing.Any, __values: Animal_Dog.Partial) -> typing.Any: ...

        class NameValidator(typing.Protocol):
            def __call__(self, __v: str, __values: Animal_Dog.Partial) -> str: ...

        class PreLikesToWoofValidator(typing.Protocol):
            def __call__(self, __v: typing.Any, __values: Animal_Dog.Partial) -> typing.Any: ...

        class LikesToWoofValidator(typing.Protocol):
            def __call__(
                self,
                __v: typing_extensions.Annotated[bool, FieldMetadata(alias="likesToWoof")],
                __values: Animal_Dog.Partial,
            ) -> typing_extensions.Annotated[bool, FieldMetadata(alias="likesToWoof")]: ...

        class _PreRootValidator(typing.Protocol):
            def __call__(self, __values: typing.Any) -> typing.Any: ...

        class _RootValidator(typing.Protocol):
            def __call__(self, __values: Animal_Dog.Partial) -> Animal_Dog.Partial: ...

    @universal_root_validator(pre=True)
    def _pre_validate(cls, values: Animal_Dog.Partial) -> Animal_Dog.Partial:
        for validator in Animal_Dog.Validators._pre_validators:
            values = validator(values)
        return values

    @universal_root_validator(pre=False)
    def _post_validate(cls, values: Animal_Dog.Partial) -> Animal_Dog.Partial:
        for validator in Animal_Dog.Validators._post_validators:
            values = validator(values)
        return values

    @universal_field_validator("animal", pre=True)
    def _pre_validate_animal(cls, v: typing.Literal["dog"], values: Animal_Dog.Partial) -> typing.Literal["dog"]:
        for validator in Animal_Dog.Validators._animal_pre_validators:
            v = validator(v, values)
        return v

    @universal_field_validator("animal", pre=False)
    def _post_validate_animal(cls, v: typing.Literal["dog"], values: Animal_Dog.Partial) -> typing.Literal["dog"]:
        for validator in Animal_Dog.Validators._animal_post_validators:
            v = validator(v, values)
        return v

    @universal_field_validator("name", pre=True)
    def _pre_validate_name(cls, v: str, values: Animal_Dog.Partial) -> str:
        for validator in Animal_Dog.Validators._name_pre_validators:
            v = validator(v, values)
        return v

    @universal_field_validator("name", pre=False)
    def _post_validate_name(cls, v: str, values: Animal_Dog.Partial) -> str:
        for validator in Animal_Dog.Validators._name_post_validators:
            v = validator(v, values)
        return v

    @universal_field_validator("likes_to_woof", pre=True)
    def _pre_validate_likes_to_woof(
        cls, v: typing_extensions.Annotated[bool, FieldMetadata(alias="likesToWoof")], values: Animal_Dog.Partial
    ) -> typing_extensions.Annotated[bool, FieldMetadata(alias="likesToWoof")]:
        for validator in Animal_Dog.Validators._likes_to_woof_pre_validators:
            v = validator(v, values)
        return v

    @universal_field_validator("likes_to_woof", pre=False)
    def _post_validate_likes_to_woof(
        cls, v: typing_extensions.Annotated[bool, FieldMetadata(alias="likesToWoof")], values: Animal_Dog.Partial
    ) -> typing_extensions.Annotated[bool, FieldMetadata(alias="likesToWoof")]:
        for validator in Animal_Dog.Validators._likes_to_woof_post_validators:
            v = validator(v, values)
        return v

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic.Extra.allow


class Animal_Cat(UniversalBaseModel):
    animal: typing.Literal["cat"] = "cat"
    name: str
    likes_to_meow: typing_extensions.Annotated[bool, FieldMetadata(alias="likesToMeow")]

    class Partial(typing.TypedDict):
        animal: typing_extensions.NotRequired[typing.Literal["cat"]]
        name: typing_extensions.NotRequired[str]
        likes_to_meow: typing_extensions.NotRequired[
            typing_extensions.Annotated[bool, FieldMetadata(alias="likesToMeow")]
        ]

    class Validators:
        """
        Use this class to add validators to the Pydantic model.

            @Animal_Cat.Validators.root()
            def validate(values: Animal_Cat.Partial) -> Animal_Cat.Partial:
                ...

            @Animal_Cat.Validators.field("animal")
            def validate_animal(animal: typing.Literal["cat"], values: Animal_Cat.Partial) -> typing.Literal["cat"]:
                ...

            @Animal_Cat.Validators.field("name")
            def validate_name(name: str, values: Animal_Cat.Partial) -> str:
                ...

            @Animal_Cat.Validators.field("likes_to_meow")
            def validate_likes_to_meow(likes_to_meow: typing_extensions.Annotated[bool, FieldMetadata(alias="likesToMeow")], values: Animal_Cat.Partial) -> typing_extensions.Annotated[bool, FieldMetadata(alias="likesToMeow")]:
                ...
        """

        _pre_validators: typing.ClassVar[typing.List[Animal_Cat.Validators._PreRootValidator]] = []
        _post_validators: typing.ClassVar[typing.List[Animal_Cat.Validators._RootValidator]] = []
        _animal_pre_validators: typing.ClassVar[typing.List[Animal_Cat.Validators.PreAnimalValidator]] = []
        _animal_post_validators: typing.ClassVar[typing.List[Animal_Cat.Validators.AnimalValidator]] = []
        _name_pre_validators: typing.ClassVar[typing.List[Animal_Cat.Validators.PreNameValidator]] = []
        _name_post_validators: typing.ClassVar[typing.List[Animal_Cat.Validators.NameValidator]] = []
        _likes_to_meow_pre_validators: typing.ClassVar[typing.List[Animal_Cat.Validators.PreLikesToMeowValidator]] = []
        _likes_to_meow_post_validators: typing.ClassVar[typing.List[Animal_Cat.Validators.LikesToMeowValidator]] = []

        @typing.overload
        @classmethod
        def root(
            cls, *, pre: typing.Literal[False] = False
        ) -> typing.Callable[[Animal_Cat.Validators._RootValidator], Animal_Cat.Validators._RootValidator]: ...
        @typing.overload
        @classmethod
        def root(
            cls, *, pre: typing.Literal[True]
        ) -> typing.Callable[[Animal_Cat.Validators._PreRootValidator], Animal_Cat.Validators._PreRootValidator]: ...
        @classmethod
        def root(cls, *, pre: bool = False) -> typing.Any:
            def decorator(validator: typing.Any) -> typing.Any:
                if pre:
                    cls._pre_validators.append(validator)
                else:
                    cls._post_validators.append(validator)
                return validator

            return decorator

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing.Literal["animal"], *, pre: typing.Literal[True]
        ) -> typing.Callable[[Animal_Cat.Validators.PreAnimalValidator], Animal_Cat.Validators.PreAnimalValidator]: ...
        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing.Literal["animal"], *, pre: typing.Literal[False] = False
        ) -> typing.Callable[[Animal_Cat.Validators.AnimalValidator], Animal_Cat.Validators.AnimalValidator]: ...
        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing.Literal["name"], *, pre: typing.Literal[True]
        ) -> typing.Callable[[Animal_Cat.Validators.PreNameValidator], Animal_Cat.Validators.PreNameValidator]: ...
        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing.Literal["name"], *, pre: typing.Literal[False] = False
        ) -> typing.Callable[[Animal_Cat.Validators.NameValidator], Animal_Cat.Validators.NameValidator]: ...
        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing.Literal["likes_to_meow"], *, pre: typing.Literal[True]
        ) -> typing.Callable[
            [Animal_Cat.Validators.PreLikesToMeowValidator], Animal_Cat.Validators.PreLikesToMeowValidator
        ]: ...
        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing.Literal["likes_to_meow"], *, pre: typing.Literal[False] = False
        ) -> typing.Callable[
            [Animal_Cat.Validators.LikesToMeowValidator], Animal_Cat.Validators.LikesToMeowValidator
        ]: ...
        @classmethod
        def field(cls, field_name: str, *, pre: bool = False) -> typing.Any:
            def decorator(validator: typing.Any) -> typing.Any:
                if field_name == "animal":
                    if pre:
                        cls._animal_pre_validators.append(validator)
                    else:
                        cls._animal_post_validators.append(validator)
                if field_name == "name":
                    if pre:
                        cls._name_pre_validators.append(validator)
                    else:
                        cls._name_post_validators.append(validator)
                if field_name == "likes_to_meow":
                    if pre:
                        cls._likes_to_meow_pre_validators.append(validator)
                    else:
                        cls._likes_to_meow_post_validators.append(validator)
                return validator

            return decorator

        class PreAnimalValidator(typing.Protocol):
            def __call__(self, __v: typing.Any, __values: Animal_Cat.Partial) -> typing.Any: ...

        class AnimalValidator(typing.Protocol):
            def __call__(self, __v: typing.Literal["cat"], __values: Animal_Cat.Partial) -> typing.Literal["cat"]: ...

        class PreNameValidator(typing.Protocol):
            def __call__(self, __v: typing.Any, __values: Animal_Cat.Partial) -> typing.Any: ...

        class NameValidator(typing.Protocol):
            def __call__(self, __v: str, __values: Animal_Cat.Partial) -> str: ...

        class PreLikesToMeowValidator(typing.Protocol):
            def __call__(self, __v: typing.Any, __values: Animal_Cat.Partial) -> typing.Any: ...

        class LikesToMeowValidator(typing.Protocol):
            def __call__(
                self,
                __v: typing_extensions.Annotated[bool, FieldMetadata(alias="likesToMeow")],
                __values: Animal_Cat.Partial,
            ) -> typing_extensions.Annotated[bool, FieldMetadata(alias="likesToMeow")]: ...

        class _PreRootValidator(typing.Protocol):
            def __call__(self, __values: typing.Any) -> typing.Any: ...

        class _RootValidator(typing.Protocol):
            def __call__(self, __values: Animal_Cat.Partial) -> Animal_Cat.Partial: ...

    @universal_root_validator(pre=True)
    def _pre_validate(cls, values: Animal_Cat.Partial) -> Animal_Cat.Partial:
        for validator in Animal_Cat.Validators._pre_validators:
            values = validator(values)
        return values

    @universal_root_validator(pre=False)
    def _post_validate(cls, values: Animal_Cat.Partial) -> Animal_Cat.Partial:
        for validator in Animal_Cat.Validators._post_validators:
            values = validator(values)
        return values

    @universal_field_validator("animal", pre=True)
    def _pre_validate_animal(cls, v: typing.Literal["cat"], values: Animal_Cat.Partial) -> typing.Literal["cat"]:
        for validator in Animal_Cat.Validators._animal_pre_validators:
            v = validator(v, values)
        return v

    @universal_field_validator("animal", pre=False)
    def _post_validate_animal(cls, v: typing.Literal["cat"], values: Animal_Cat.Partial) -> typing.Literal["cat"]:
        for validator in Animal_Cat.Validators._animal_post_validators:
            v = validator(v, values)
        return v

    @universal_field_validator("name", pre=True)
    def _pre_validate_name(cls, v: str, values: Animal_Cat.Partial) -> str:
        for validator in Animal_Cat.Validators._name_pre_validators:
            v = validator(v, values)
        return v

    @universal_field_validator("name", pre=False)
    def _post_validate_name(cls, v: str, values: Animal_Cat.Partial) -> str:
        for validator in Animal_Cat.Validators._name_post_validators:
            v = validator(v, values)
        return v

    @universal_field_validator("likes_to_meow", pre=True)
    def _pre_validate_likes_to_meow(
        cls, v: typing_extensions.Annotated[bool, FieldMetadata(alias="likesToMeow")], values: Animal_Cat.Partial
    ) -> typing_extensions.Annotated[bool, FieldMetadata(alias="likesToMeow")]:
        for validator in Animal_Cat.Validators._likes_to_meow_pre_validators:
            v = validator(v, values)
        return v

    @universal_field_validator("likes_to_meow", pre=False)
    def _post_validate_likes_to_meow(
        cls, v: typing_extensions.Annotated[bool, FieldMetadata(alias="likesToMeow")], values: Animal_Cat.Partial
    ) -> typing_extensions.Annotated[bool, FieldMetadata(alias="likesToMeow")]:
        for validator in Animal_Cat.Validators._likes_to_meow_post_validators:
            v = validator(v, values)
        return v

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic.Extra.allow


Animal = typing.Union[Animal_Dog, Animal_Cat]
