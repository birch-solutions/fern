# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ....core.pydantic_utilities import UniversalBaseModel
import typing
from ....core.pydantic_utilities import universal_root_validator
import pydantic


class OptionalAlias(UniversalBaseModel):
    __root__: typing.Optional[str]

    def get_as_str(self) -> typing.Optional[str]:
        return self.__root__

    @staticmethod
    def from_str(value: typing.Optional[str]) -> OptionalAlias:
        return OptionalAlias(__root__=value)

    class Validators:
        """
        Use this class to add validators to the Pydantic model.

            @OptionalAlias.Validators.validate
            def validate(value: typing.Optional[str]) -> typing.Optional[str]:
                ...
        """

        _validators: typing.ClassVar[typing.List[typing.Callable[[typing.Optional[str]], typing.Optional[str]]]] = []

        @classmethod
        def validate(cls, validator: typing.Callable[[typing.Optional[str]], typing.Optional[str]]) -> None:
            cls._validators.append(validator)

    @universal_root_validator(pre=False)
    def _validate(cls, values: typing.Dict[str, typing.Any]) -> typing.Dict[str, typing.Any]:
        value = typing.cast(typing.Optional[str], values.get("__root__"))
        for validator in OptionalAlias.Validators._validators:
            value = validator(value)
        return {**values, "__root__": value}

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic.Extra.allow
