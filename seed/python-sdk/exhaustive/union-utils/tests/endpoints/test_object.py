# This file was auto-generated by Fern from our API Definition.

from seed import SeedExhaustive
from seed import AsyncSeedExhaustive
import typing
from ..utilities import validate_response
from seed.types.object import ObjectWithOptionalField
from seed.types.object import NestedObjectWithRequiredField


async def test_get_and_return_with_optional_field(client: SeedExhaustive, async_client: AsyncSeedExhaustive) -> None:
    expected_response: typing.Any = {}
    expected_types: typing.Any = {
        "string": None,
        "integer": None,
        "long": None,
        "double": None,
        "bool": None,
        "datetime": None,
        "date": None,
        "uuid": None,
        "base64": None,
        "list": None,
        "set": None,
        "map": None,
        "bigint": None,
    }
    response = client.endpoints.object.get_and_return_with_optional_field()
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.endpoints.object.get_and_return_with_optional_field()
    validate_response(async_response, expected_response, expected_types)


async def test_get_and_return_with_required_field(client: SeedExhaustive, async_client: AsyncSeedExhaustive) -> None:
    expected_response: typing.Any = {"string": "string"}
    expected_types: typing.Any = {"string": None}
    response = client.endpoints.object.get_and_return_with_required_field(string="string")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.endpoints.object.get_and_return_with_required_field(string="string")
    validate_response(async_response, expected_response, expected_types)


async def test_get_and_return_with_map_of_map(client: SeedExhaustive, async_client: AsyncSeedExhaustive) -> None:
    expected_response: typing.Any = {"map": {"map": {"map": "map"}}}
    expected_types: typing.Any = {"map": ("dict", {0: (None, ("dict", {0: (None, None)}))})}
    response = client.endpoints.object.get_and_return_with_map_of_map(map_={"map": {"map": "map"}})
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.endpoints.object.get_and_return_with_map_of_map(map_={"map": {"map": "map"}})
    validate_response(async_response, expected_response, expected_types)


async def test_get_and_return_nested_with_optional_field(
    client: SeedExhaustive, async_client: AsyncSeedExhaustive
) -> None:
    expected_response: typing.Any = {}
    expected_types: typing.Any = {"string": None, "NestedObject": None}
    response = client.endpoints.object.get_and_return_nested_with_optional_field()
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.endpoints.object.get_and_return_nested_with_optional_field()
    validate_response(async_response, expected_response, expected_types)


async def test_get_and_return_nested_with_required_field(
    client: SeedExhaustive, async_client: AsyncSeedExhaustive
) -> None:
    expected_response: typing.Any = {"string": "string", "NestedObject": {}}
    expected_types: typing.Any = {
        "string": None,
        "NestedObject": {
            "string": None,
            "integer": None,
            "long": None,
            "double": None,
            "bool": None,
            "datetime": None,
            "date": None,
            "uuid": None,
            "base64": None,
            "list": None,
            "set": None,
            "map": None,
            "bigint": None,
        },
    }
    response = client.endpoints.object.get_and_return_nested_with_required_field(
        string_="string", string="string", nested_object=ObjectWithOptionalField()
    )
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.endpoints.object.get_and_return_nested_with_required_field(
        string_="string", string="string", nested_object=ObjectWithOptionalField()
    )
    validate_response(async_response, expected_response, expected_types)


async def test_get_and_return_nested_with_required_field_as_list(
    client: SeedExhaustive, async_client: AsyncSeedExhaustive
) -> None:
    expected_response: typing.Any = {"string": "string", "NestedObject": {}}
    expected_types: typing.Any = {
        "string": None,
        "NestedObject": {
            "string": None,
            "integer": None,
            "long": None,
            "double": None,
            "bool": None,
            "datetime": None,
            "date": None,
            "uuid": None,
            "base64": None,
            "list": None,
            "set": None,
            "map": None,
            "bigint": None,
        },
    }
    response = client.endpoints.object.get_and_return_nested_with_required_field_as_list(
        request=[
            NestedObjectWithRequiredField(string="string", nested_object=ObjectWithOptionalField()),
            NestedObjectWithRequiredField(string="string", nested_object=ObjectWithOptionalField()),
        ]
    )
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.endpoints.object.get_and_return_nested_with_required_field_as_list(
        request=[
            NestedObjectWithRequiredField(string="string", nested_object=ObjectWithOptionalField()),
            NestedObjectWithRequiredField(string="string", nested_object=ObjectWithOptionalField()),
        ]
    )
    validate_response(async_response, expected_response, expected_types)
