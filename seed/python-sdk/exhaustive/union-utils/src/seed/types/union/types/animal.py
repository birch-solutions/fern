# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ....core.pydantic_utilities import pydantic_v1
from .cat import Cat as types_union_types_cat_Cat
from .dog import Dog as types_union_types_dog_Dog

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def dog(self, value: types_union_types_dog_Dog) -> Animal:
        return Animal(__root__=_Animal.Dog(**value.dict(exclude_unset=True), animal="dog"))

    def cat(self, value: types_union_types_cat_Cat) -> Animal:
        return Animal(__root__=_Animal.Cat(**value.dict(exclude_unset=True), animal="cat"))


class Animal(pydantic_v1.BaseModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    def get_as_union(self) -> typing.Union[_Animal.Dog, _Animal.Cat]:
        return self.__root__

    def visit(
        self,
        dog: typing.Callable[[types_union_types_dog_Dog], T_Result],
        cat: typing.Callable[[types_union_types_cat_Cat], T_Result],
    ) -> T_Result:
        if self.__root__.animal == "dog":
            return dog(types_union_types_dog_Dog(**self.__root__.dict(exclude_unset=True, exclude={"animal"})))
        if self.__root__.animal == "cat":
            return cat(types_union_types_cat_Cat(**self.__root__.dict(exclude_unset=True, exclude={"animal"})))

    __root__: typing.Annotated[typing.Union[_Animal.Dog, _Animal.Cat], pydantic_v1.Field(discriminator="animal")]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}


class _Animal:
    class Dog(types_union_types_dog_Dog):
        animal: typing.Literal["dog"] = "dog"

        class Config:
            frozen = True
            smart_union = True
            allow_population_by_field_name = True
            populate_by_name = True

    class Cat(types_union_types_cat_Cat):
        animal: typing.Literal["cat"] = "cat"

        class Config:
            frozen = True
            smart_union = True
            allow_population_by_field_name = True
            populate_by_name = True


Animal.update_forward_refs()
