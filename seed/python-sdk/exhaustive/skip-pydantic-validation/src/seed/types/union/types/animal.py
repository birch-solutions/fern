# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ....core.unchecked_base_model import UncheckedBaseModel
import typing_extensions
import typing
from ....core.serialization import FieldMetadata
from ....core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic
from ....core.unchecked_base_model import UnionMetadata


class Animal_Dog(UncheckedBaseModel):
    animal: typing_extensions.Annotated[typing.Literal["dog"], FieldMetadata(alias="animal")] = "dog"
    name: typing_extensions.Annotated[str, FieldMetadata(alias="name")]
    likes_to_woof: typing_extensions.Annotated[bool, FieldMetadata(alias="likesToWoof")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Animal_Cat(UncheckedBaseModel):
    animal: typing_extensions.Annotated[typing.Literal["cat"], FieldMetadata(alias="animal")] = "cat"
    name: typing_extensions.Annotated[str, FieldMetadata(alias="name")]
    likes_to_meow: typing_extensions.Annotated[bool, FieldMetadata(alias="likesToMeow")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


Animal = typing_extensions.Annotated[typing.Union[Animal_Dog, Animal_Cat], UnionMetadata(discriminant="animal")]
