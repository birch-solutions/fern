# This file was auto-generated by Fern from our API Definition.

from ....core.unchecked_base_model import UncheckedBaseModel
import typing_extensions
import typing
from ....core.serialization import FieldMetadata
import pydantic
import datetime as dt
import uuid
from ....core.pydantic_utilities import IS_PYDANTIC_V2


class ObjectWithOptionalField(UncheckedBaseModel):
    string: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="string")] = pydantic.Field(
        default=None
    )
    """
    This is a rather long descriptor of this single field in a more complex type. If you ask me I think this is a pretty good description for this field all things considered.
    """

    integer: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="integer")] = None
    long_: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="long")] = None
    double: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="double")] = None
    bool_: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="bool")] = None
    datetime: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="datetime")] = None
    date: typing_extensions.Annotated[typing.Optional[dt.date], FieldMetadata(alias="date")] = None
    uuid_: typing_extensions.Annotated[typing.Optional[uuid.UUID], FieldMetadata(alias="uuid")] = None
    base_64: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="base64")] = None
    list_: typing_extensions.Annotated[typing.Optional[typing.List[str]], FieldMetadata(alias="list")] = None
    set_: typing_extensions.Annotated[typing.Optional[typing.Set[str]], FieldMetadata(alias="set")] = None
    map_: typing_extensions.Annotated[typing.Optional[typing.Dict[int, str]], FieldMetadata(alias="map")] = None
    bigint: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="bigint")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
