# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ....core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from .optional_alias import OptionalAlias
from ....core.serialization import FieldMetadata
from ....core.pydantic_utilities import universal_root_validator
from ....core.pydantic_utilities import universal_field_validator
import pydantic


class DoubleOptional(UniversalBaseModel):
    optional_alias: typing_extensions.Annotated[
        typing.Optional[OptionalAlias], FieldMetadata(alias="optionalAlias")
    ] = None

    class Partial(typing.TypedDict):
        optional_alias: typing_extensions.NotRequired[
            typing_extensions.Annotated[typing.Optional[OptionalAlias], FieldMetadata(alias="optionalAlias")]
        ]

    class Validators:
        """
        Use this class to add validators to the Pydantic model.

            @DoubleOptional.Validators.root()
            def validate(values: DoubleOptional.Partial) -> DoubleOptional.Partial:
                ...

            @DoubleOptional.Validators.field("optional_alias")
            def validate_optional_alias(optional_alias: typing_extensions.Annotated[typing.Optional[OptionalAlias], FieldMetadata(alias="optionalAlias")], values: DoubleOptional.Partial) -> typing_extensions.Annotated[typing.Optional[OptionalAlias], FieldMetadata(alias="optionalAlias")]:
                ...
        """

        _pre_validators: typing.ClassVar[typing.List[DoubleOptional.Validators._PreRootValidator]] = []
        _post_validators: typing.ClassVar[typing.List[DoubleOptional.Validators._RootValidator]] = []
        _optional_alias_pre_validators: typing.ClassVar[
            typing.List[DoubleOptional.Validators.PreOptionalAliasValidator]
        ] = []
        _optional_alias_post_validators: typing.ClassVar[
            typing.List[DoubleOptional.Validators.OptionalAliasValidator]
        ] = []

        @typing.overload
        @classmethod
        def root(
            cls, *, pre: typing.Literal[False] = False
        ) -> typing.Callable[[DoubleOptional.Validators._RootValidator], DoubleOptional.Validators._RootValidator]: ...
        @typing.overload
        @classmethod
        def root(
            cls, *, pre: typing.Literal[True]
        ) -> typing.Callable[
            [DoubleOptional.Validators._PreRootValidator], DoubleOptional.Validators._PreRootValidator
        ]: ...
        @classmethod
        def root(cls, *, pre: bool = False) -> typing.Any:
            def decorator(validator: typing.Any) -> typing.Any:
                if pre:
                    cls._pre_validators.append(validator)
                else:
                    cls._post_validators.append(validator)
                return validator

            return decorator

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing.Literal["optional_alias"], *, pre: typing.Literal[True]
        ) -> typing.Callable[
            [DoubleOptional.Validators.PreOptionalAliasValidator], DoubleOptional.Validators.PreOptionalAliasValidator
        ]: ...
        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing.Literal["optional_alias"], *, pre: typing.Literal[False] = False
        ) -> typing.Callable[
            [DoubleOptional.Validators.OptionalAliasValidator], DoubleOptional.Validators.OptionalAliasValidator
        ]: ...
        @classmethod
        def field(cls, field_name: str, *, pre: bool = False) -> typing.Any:
            def decorator(validator: typing.Any) -> typing.Any:
                if field_name == "optional_alias":
                    if pre:
                        cls._optional_alias_pre_validators.append(validator)
                    else:
                        cls._optional_alias_post_validators.append(validator)
                return validator

            return decorator

        class PreOptionalAliasValidator(typing.Protocol):
            def __call__(self, __v: typing.Any, __values: DoubleOptional.Partial) -> typing.Any: ...

        class OptionalAliasValidator(typing.Protocol):
            def __call__(
                self,
                __v: typing_extensions.Annotated[typing.Optional[OptionalAlias], FieldMetadata(alias="optionalAlias")],
                __values: DoubleOptional.Partial,
            ) -> typing_extensions.Annotated[typing.Optional[OptionalAlias], FieldMetadata(alias="optionalAlias")]: ...

        class _PreRootValidator(typing.Protocol):
            def __call__(self, __values: typing.Any) -> typing.Any: ...

        class _RootValidator(typing.Protocol):
            def __call__(self, __values: DoubleOptional.Partial) -> DoubleOptional.Partial: ...

    @universal_root_validator(pre=True)
    def _pre_validate_types_double_optional(cls, values: DoubleOptional.Partial) -> DoubleOptional.Partial:
        for validator in DoubleOptional.Validators._pre_validators:
            values = validator(values)
        return values

    @universal_root_validator(pre=False)
    def _post_validate_types_double_optional(cls, values: DoubleOptional.Partial) -> DoubleOptional.Partial:
        for validator in DoubleOptional.Validators._post_validators:
            values = validator(values)
        return values

    @universal_field_validator("optional_alias", pre=True)
    def _pre_validate_optional_alias(
        cls,
        v: typing_extensions.Annotated[typing.Optional[OptionalAlias], FieldMetadata(alias="optionalAlias")],
        values: DoubleOptional.Partial,
    ) -> typing_extensions.Annotated[typing.Optional[OptionalAlias], FieldMetadata(alias="optionalAlias")]:
        for validator in DoubleOptional.Validators._optional_alias_pre_validators:
            v = validator(v, values)
        return v

    @universal_field_validator("optional_alias", pre=False)
    def _post_validate_optional_alias(
        cls,
        v: typing_extensions.Annotated[typing.Optional[OptionalAlias], FieldMetadata(alias="optionalAlias")],
        values: DoubleOptional.Partial,
    ) -> typing_extensions.Annotated[typing.Optional[OptionalAlias], FieldMetadata(alias="optionalAlias")]:
        for validator in DoubleOptional.Validators._optional_alias_post_validators:
            v = validator(v, values)
        return v

    model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
