/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.api.model.user;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.api.core.ObjectMappers;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = User.Builder.class)
public final class User {
    private final String id;

    private final String username;

    private final Optional<String> email;

    private final Optional<Integer> age;

    private final Optional<Double> weight;

    private final Optional<Map<String, Optional<MetadataValue>>> metadata;

    private User(
            String id,
            String username,
            Optional<String> email,
            Optional<Integer> age,
            Optional<Double> weight,
            Optional<Map<String, Optional<MetadataValue>>> metadata) {
        this.id = id;
        this.username = username;
        this.email = email;
        this.age = age;
        this.weight = weight;
        this.metadata = metadata;
    }

    @JsonProperty("id")
    public String getId() {
        return id;
    }

    @JsonProperty("username")
    public String getUsername() {
        return username;
    }

    @JsonProperty("email")
    public Optional<String> getEmail() {
        return email;
    }

    @JsonProperty("age")
    public Optional<Integer> getAge() {
        return age;
    }

    @JsonProperty("weight")
    public Optional<Double> getWeight() {
        return weight;
    }

    @JsonProperty("metadata")
    public Optional<Map<String, Optional<MetadataValue>>> getMetadata() {
        return metadata;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof User && equalTo((User) other);
    }

    private boolean equalTo(User other) {
        return id.equals(other.id)
                && username.equals(other.username)
                && email.equals(other.email)
                && age.equals(other.age)
                && weight.equals(other.weight)
                && metadata.equals(other.metadata);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.username, this.email, this.age, this.weight, this.metadata);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        UsernameStage id(String id);

        Builder from(User other);
    }

    public interface UsernameStage {
        _FinalStage username(String username);
    }

    public interface _FinalStage {
        User build();

        _FinalStage email(Optional<String> email);

        _FinalStage email(String email);

        _FinalStage age(Optional<Integer> age);

        _FinalStage age(Integer age);

        _FinalStage weight(Optional<Double> weight);

        _FinalStage weight(Double weight);

        _FinalStage metadata(Optional<Map<String, Optional<MetadataValue>>> metadata);

        _FinalStage metadata(Map<String, Optional<MetadataValue>> metadata);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, UsernameStage, _FinalStage {
        private String id;

        private String username;

        private Optional<Map<String, Optional<MetadataValue>>> metadata = Optional.empty();

        private Optional<Double> weight = Optional.empty();

        private Optional<Integer> age = Optional.empty();

        private Optional<String> email = Optional.empty();

        private Builder() {}

        @java.lang.Override
        public Builder from(User other) {
            id(other.getId());
            username(other.getUsername());
            email(other.getEmail());
            age(other.getAge());
            weight(other.getWeight());
            metadata(other.getMetadata());
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public UsernameStage id(String id) {
            this.id = id;
            return this;
        }

        @java.lang.Override
        @JsonSetter("username")
        public _FinalStage username(String username) {
            this.username = username;
            return this;
        }

        @java.lang.Override
        public _FinalStage metadata(Map<String, Optional<MetadataValue>> metadata) {
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public _FinalStage metadata(Optional<Map<String, Optional<MetadataValue>>> metadata) {
            this.metadata = metadata;
            return this;
        }

        @java.lang.Override
        public _FinalStage weight(Double weight) {
            this.weight = Optional.ofNullable(weight);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "weight", nulls = Nulls.SKIP)
        public _FinalStage weight(Optional<Double> weight) {
            this.weight = weight;
            return this;
        }

        @java.lang.Override
        public _FinalStage age(Integer age) {
            this.age = Optional.ofNullable(age);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "age", nulls = Nulls.SKIP)
        public _FinalStage age(Optional<Integer> age) {
            this.age = age;
            return this;
        }

        @java.lang.Override
        public _FinalStage email(String email) {
            this.email = Optional.ofNullable(email);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "email", nulls = Nulls.SKIP)
        public _FinalStage email(Optional<String> email) {
            this.email = email;
            return this;
        }

        @java.lang.Override
        public User build() {
            return new User(id, username, email, age, weight, metadata);
        }
    }
}
