# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic

from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..v_2.resources.problem.test_case_id import TestCaseId
from .error_info import ErrorInfo
from .running_submission_state import RunningSubmissionState
from .test_case_grade import TestCaseGrade


class TestSubmissionUpdateInfo_Running(UniversalBaseModel):
    value: RunningSubmissionState
    type: typing.Literal["running"] = "running"


class TestSubmissionUpdateInfo_Stopped(UniversalBaseModel):
    type: typing.Literal["stopped"] = "stopped"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class TestSubmissionUpdateInfo_Errored(UniversalBaseModel):
    value: ErrorInfo
    type: typing.Literal["errored"] = "errored"


class TestSubmissionUpdateInfo_GradedTestCase(UniversalBaseModel):
    test_case_id: TestCaseId = pydantic.Field(alias="testCaseId")
    grade: TestCaseGrade
    type: typing.Literal["gradedTestCase"] = "gradedTestCase"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class TestSubmissionUpdateInfo_RecordedTestCase(UniversalBaseModel):
    test_case_id: TestCaseId = pydantic.Field(alias="testCaseId")
    trace_responses_size: int = pydantic.Field(alias="traceResponsesSize")
    type: typing.Literal["recordedTestCase"] = "recordedTestCase"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class TestSubmissionUpdateInfo_Finished(UniversalBaseModel):
    type: typing.Literal["finished"] = "finished"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


TestSubmissionUpdateInfo = typing.Union[
    TestSubmissionUpdateInfo_Running,
    TestSubmissionUpdateInfo_Stopped,
    TestSubmissionUpdateInfo_Errored,
    TestSubmissionUpdateInfo_GradedTestCase,
    TestSubmissionUpdateInfo_RecordedTestCase,
    TestSubmissionUpdateInfo_Finished,
]
