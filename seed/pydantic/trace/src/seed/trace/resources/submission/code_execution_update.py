# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import pydantic_v1
from ..v_2.resources.problem.test_case_id import TestCaseId
from .error_info import ErrorInfo
from .execution_session_status import ExecutionSessionStatus
from .invalid_request_cause import InvalidRequestCause
from .lightweight_stackframe_information import LightweightStackframeInformation
from .running_submission_state import RunningSubmissionState
from .submission_id import SubmissionId
from .submission_request import SubmissionRequest
from .test_case_grade import TestCaseGrade
from .test_case_result_with_stdout import TestCaseResultWithStdout
from .traced_file import TracedFile
from .workspace_run_details import WorkspaceRunDetails


class CodeExecutionUpdate_BuildingExecutor(pydantic_v1.BaseModel):
    submission_id: SubmissionId = pydantic_v1.Field(alias="submissionId")
    status: ExecutionSessionStatus
    type: typing.Literal["buildingExecutor"] = "buildingExecutor"

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}


class CodeExecutionUpdate_Running(pydantic_v1.BaseModel):
    submission_id: SubmissionId = pydantic_v1.Field(alias="submissionId")
    state: RunningSubmissionState
    type: typing.Literal["running"] = "running"

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}


class CodeExecutionUpdate_Errored(pydantic_v1.BaseModel):
    submission_id: SubmissionId = pydantic_v1.Field(alias="submissionId")
    error_info: ErrorInfo = pydantic_v1.Field(alias="errorInfo")
    type: typing.Literal["errored"] = "errored"

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}


class CodeExecutionUpdate_Stopped(pydantic_v1.BaseModel):
    submission_id: SubmissionId = pydantic_v1.Field(alias="submissionId")
    type: typing.Literal["stopped"] = "stopped"

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}


class CodeExecutionUpdate_Graded(pydantic_v1.BaseModel):
    submission_id: SubmissionId = pydantic_v1.Field(alias="submissionId")
    test_cases: typing.Dict[str, TestCaseResultWithStdout] = pydantic_v1.Field(alias="testCases")
    type: typing.Literal["graded"] = "graded"

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}


class CodeExecutionUpdate_GradedV2(pydantic_v1.BaseModel):
    submission_id: SubmissionId = pydantic_v1.Field(alias="submissionId")
    test_cases: typing.Dict[TestCaseId, TestCaseGrade] = pydantic_v1.Field(alias="testCases")
    type: typing.Literal["gradedV2"] = "gradedV2"

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}


class CodeExecutionUpdate_WorkspaceRan(pydantic_v1.BaseModel):
    submission_id: SubmissionId = pydantic_v1.Field(alias="submissionId")
    run_details: WorkspaceRunDetails = pydantic_v1.Field(alias="runDetails")
    type: typing.Literal["workspaceRan"] = "workspaceRan"

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}


class CodeExecutionUpdate_Recording(pydantic_v1.BaseModel):
    submission_id: SubmissionId = pydantic_v1.Field(alias="submissionId")
    test_case_id: typing.Optional[str] = pydantic_v1.Field(alias="testCaseId", default=None)
    line_number: int = pydantic_v1.Field(alias="lineNumber")
    lightweight_stack_info: LightweightStackframeInformation = pydantic_v1.Field(alias="lightweightStackInfo")
    traced_file: typing.Optional[TracedFile] = pydantic_v1.Field(alias="tracedFile", default=None)
    type: typing.Literal["recording"] = "recording"

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}


class CodeExecutionUpdate_Recorded(pydantic_v1.BaseModel):
    submission_id: SubmissionId = pydantic_v1.Field(alias="submissionId")
    trace_responses_size: int = pydantic_v1.Field(alias="traceResponsesSize")
    test_case_id: typing.Optional[str] = pydantic_v1.Field(alias="testCaseId", default=None)
    type: typing.Literal["recorded"] = "recorded"

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}


class CodeExecutionUpdate_InvalidRequest(pydantic_v1.BaseModel):
    request: SubmissionRequest
    cause: InvalidRequestCause
    type: typing.Literal["invalidRequest"] = "invalidRequest"

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}


class CodeExecutionUpdate_Finished(pydantic_v1.BaseModel):
    submission_id: SubmissionId = pydantic_v1.Field(alias="submissionId")
    type: typing.Literal["finished"] = "finished"

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}


CodeExecutionUpdate = typing.Union[
    CodeExecutionUpdate_BuildingExecutor,
    CodeExecutionUpdate_Running,
    CodeExecutionUpdate_Errored,
    CodeExecutionUpdate_Stopped,
    CodeExecutionUpdate_Graded,
    CodeExecutionUpdate_GradedV2,
    CodeExecutionUpdate_WorkspaceRan,
    CodeExecutionUpdate_Recording,
    CodeExecutionUpdate_Recorded,
    CodeExecutionUpdate_InvalidRequest,
    CodeExecutionUpdate_Finished,
]
