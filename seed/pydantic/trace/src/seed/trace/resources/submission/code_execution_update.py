# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic

from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..v_2.resources.problem.test_case_id import TestCaseId
from .error_info import ErrorInfo
from .execution_session_status import ExecutionSessionStatus
from .invalid_request_cause import InvalidRequestCause
from .lightweight_stackframe_information import LightweightStackframeInformation
from .running_submission_state import RunningSubmissionState
from .submission_id import SubmissionId
from .submission_request import SubmissionRequest
from .test_case_grade import TestCaseGrade
from .test_case_result_with_stdout import TestCaseResultWithStdout
from .traced_file import TracedFile
from .workspace_run_details import WorkspaceRunDetails


class CodeExecutionUpdate_BuildingExecutor(UniversalBaseModel):
    submission_id: SubmissionId = pydantic.Field(alias="submissionId")
    status: ExecutionSessionStatus
    type: typing.Literal["buildingExecutor"] = "buildingExecutor"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class CodeExecutionUpdate_Running(UniversalBaseModel):
    submission_id: SubmissionId = pydantic.Field(alias="submissionId")
    state: RunningSubmissionState
    type: typing.Literal["running"] = "running"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class CodeExecutionUpdate_Errored(UniversalBaseModel):
    submission_id: SubmissionId = pydantic.Field(alias="submissionId")
    error_info: ErrorInfo = pydantic.Field(alias="errorInfo")
    type: typing.Literal["errored"] = "errored"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class CodeExecutionUpdate_Stopped(UniversalBaseModel):
    submission_id: SubmissionId = pydantic.Field(alias="submissionId")
    type: typing.Literal["stopped"] = "stopped"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class CodeExecutionUpdate_Graded(UniversalBaseModel):
    submission_id: SubmissionId = pydantic.Field(alias="submissionId")
    test_cases: typing.Dict[str, TestCaseResultWithStdout] = pydantic.Field(alias="testCases")
    type: typing.Literal["graded"] = "graded"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class CodeExecutionUpdate_GradedV2(UniversalBaseModel):
    submission_id: SubmissionId = pydantic.Field(alias="submissionId")
    test_cases: typing.Dict[TestCaseId, TestCaseGrade] = pydantic.Field(alias="testCases")
    type: typing.Literal["gradedV2"] = "gradedV2"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class CodeExecutionUpdate_WorkspaceRan(UniversalBaseModel):
    submission_id: SubmissionId = pydantic.Field(alias="submissionId")
    run_details: WorkspaceRunDetails = pydantic.Field(alias="runDetails")
    type: typing.Literal["workspaceRan"] = "workspaceRan"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class CodeExecutionUpdate_Recording(UniversalBaseModel):
    submission_id: SubmissionId = pydantic.Field(alias="submissionId")
    test_case_id: typing.Optional[str] = pydantic.Field(alias="testCaseId", default=None)
    line_number: int = pydantic.Field(alias="lineNumber")
    lightweight_stack_info: LightweightStackframeInformation = pydantic.Field(alias="lightweightStackInfo")
    traced_file: typing.Optional[TracedFile] = pydantic.Field(alias="tracedFile", default=None)
    type: typing.Literal["recording"] = "recording"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class CodeExecutionUpdate_Recorded(UniversalBaseModel):
    submission_id: SubmissionId = pydantic.Field(alias="submissionId")
    trace_responses_size: int = pydantic.Field(alias="traceResponsesSize")
    test_case_id: typing.Optional[str] = pydantic.Field(alias="testCaseId", default=None)
    type: typing.Literal["recorded"] = "recorded"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class CodeExecutionUpdate_InvalidRequest(UniversalBaseModel):
    request: SubmissionRequest
    cause: InvalidRequestCause
    type: typing.Literal["invalidRequest"] = "invalidRequest"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class CodeExecutionUpdate_Finished(UniversalBaseModel):
    submission_id: SubmissionId = pydantic.Field(alias="submissionId")
    type: typing.Literal["finished"] = "finished"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


CodeExecutionUpdate = typing.Union[
    CodeExecutionUpdate_BuildingExecutor,
    CodeExecutionUpdate_Running,
    CodeExecutionUpdate_Errored,
    CodeExecutionUpdate_Stopped,
    CodeExecutionUpdate_Graded,
    CodeExecutionUpdate_GradedV2,
    CodeExecutionUpdate_WorkspaceRan,
    CodeExecutionUpdate_Recording,
    CodeExecutionUpdate_Recorded,
    CodeExecutionUpdate_InvalidRequest,
    CodeExecutionUpdate_Finished,
]
