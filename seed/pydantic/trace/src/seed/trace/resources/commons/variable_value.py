# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from .binary_tree_node_value import BinaryTreeNodeValue
from .binary_tree_value import BinaryTreeValue
from .doubly_linked_list_node_value import DoublyLinkedListNodeValue
from .doubly_linked_list_value import DoublyLinkedListValue
from .node_id import NodeId
from .singly_linked_list_node_value import SinglyLinkedListNodeValue
from .singly_linked_list_value import SinglyLinkedListValue


class VariableValue_IntegerValue(pydantic_v1.BaseModel):
    value: int
    type: typing.Literal["integerValue"] = "integerValue"


class VariableValue_BooleanValue(pydantic_v1.BaseModel):
    value: bool
    type: typing.Literal["booleanValue"] = "booleanValue"


class VariableValue_DoubleValue(pydantic_v1.BaseModel):
    value: float
    type: typing.Literal["doubleValue"] = "doubleValue"


class VariableValue_StringValue(pydantic_v1.BaseModel):
    value: str
    type: typing.Literal["stringValue"] = "stringValue"


class VariableValue_CharValue(pydantic_v1.BaseModel):
    value: str
    type: typing.Literal["charValue"] = "charValue"


class VariableValue_MapValue(pydantic_v1.BaseModel):
    key_value_pairs: typing.List[KeyValuePair] = pydantic_v1.Field(alias="keyValuePairs")
    type: typing.Literal["mapValue"] = "mapValue"

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}


class VariableValue_ListValue(pydantic_v1.BaseModel):
    value: typing.List[VariableValue]
    type: typing.Literal["listValue"] = "listValue"


class VariableValue_BinaryTreeValue(pydantic_v1.BaseModel):
    root: typing.Optional[NodeId] = None
    nodes: typing.Dict[NodeId, BinaryTreeNodeValue]
    type: typing.Literal["binaryTreeValue"] = "binaryTreeValue"

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}


class VariableValue_SinglyLinkedListValue(pydantic_v1.BaseModel):
    head: typing.Optional[NodeId] = None
    nodes: typing.Dict[NodeId, SinglyLinkedListNodeValue]
    type: typing.Literal["singlyLinkedListValue"] = "singlyLinkedListValue"

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}


class VariableValue_DoublyLinkedListValue(pydantic_v1.BaseModel):
    head: typing.Optional[NodeId] = None
    nodes: typing.Dict[NodeId, DoublyLinkedListNodeValue]
    type: typing.Literal["doublyLinkedListValue"] = "doublyLinkedListValue"

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}


class VariableValue_NullValue(pydantic_v1.BaseModel):
    type: typing.Literal["nullValue"] = "nullValue"

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}


VariableValue = typing.Union[
    VariableValue_IntegerValue,
    VariableValue_BooleanValue,
    VariableValue_DoubleValue,
    VariableValue_StringValue,
    VariableValue_CharValue,
    VariableValue_MapValue,
    VariableValue_ListValue,
    VariableValue_BinaryTreeValue,
    VariableValue_SinglyLinkedListValue,
    VariableValue_DoublyLinkedListValue,
    VariableValue_NullValue,
]
from .key_value_pair import KeyValuePair  # noqa: E402
from .map_value import MapValue  # noqa: E402

VariableValue_ListValue.update_forward_refs(KeyValuePair=KeyValuePair)
