// This file was auto-generated by Fern from our API Definition.

package elevenlabs

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/elevenlabs/fern/core"
)

type DownloadHistoryRequest struct {
	// A list of history items to download, you can get IDs of history items and other metadata using the GET https://api.elevenlabs.io/v1/history endpoint.
	HistoryItemIds []string `json:"history_item_ids,omitempty" url:"-"`
	// Output format to transcode the audio file, can be wav or default.
	OutputFormat *string `json:"output_format,omitempty" url:"-"`
}

type HistoryGetAllRequest struct {
	// How many history items to return at maximum. Can not exceed 1000, defaults to 100.
	PageSize *int `query:"page_size"`
	// After which ID to start fetching, use this parameter to paginate across a large collection of history items. In case this parameter is not provided history items will be fetched starting from the most recently created one ordered descending by their creation date.
	StartAfterHistoryItemId *string `query:"start_after_history_item_id"`
	// Voice ID to be filtered for, you can use GET https://api.elevenlabs.io/v1/voices to receive a list of voices and their IDs.
	VoiceId *string `query:"voice_id"`
}

type GetSpeechHistoryResponse struct {
	History           []*SpeechHistoryItemResponse `json:"history,omitempty" url:"history,omitempty"`
	LastHistoryItemId string                       `json:"last_history_item_id" url:"last_history_item_id"`
	HasMore           bool                         `json:"has_more" url:"has_more"`

	extraProperties map[string]interface{}
}

func (g *GetSpeechHistoryResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetSpeechHistoryResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetSpeechHistoryResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetSpeechHistoryResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	return nil
}

func (g *GetSpeechHistoryResponse) String() string {
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type SpeechHistoryItemResponse struct {
	HistoryItemId            string                                       `json:"history_item_id" url:"history_item_id"`
	RequestId                *string                                      `json:"request_id,omitempty" url:"request_id,omitempty"`
	VoiceId                  *string                                      `json:"voice_id,omitempty" url:"voice_id,omitempty"`
	ModelId                  *string                                      `json:"model_id,omitempty" url:"model_id,omitempty"`
	VoiceName                *string                                      `json:"voice_name,omitempty" url:"voice_name,omitempty"`
	VoiceCategory            *SpeechHistoryItemResponseModelVoiceCategory `json:"voice_category,omitempty" url:"voice_category,omitempty"`
	Text                     *string                                      `json:"text,omitempty" url:"text,omitempty"`
	DateUnix                 *int                                         `json:"date_unix,omitempty" url:"date_unix,omitempty"`
	CharacterCountChangeFrom *int                                         `json:"character_count_change_from,omitempty" url:"character_count_change_from,omitempty"`
	CharacterCountChangeTo   *int                                         `json:"character_count_change_to,omitempty" url:"character_count_change_to,omitempty"`
	ContentType              *string                                      `json:"content_type,omitempty" url:"content_type,omitempty"`
	State                    interface{}                                  `json:"state,omitempty" url:"state,omitempty"`
	Settings                 map[string]interface{}                       `json:"settings,omitempty" url:"settings,omitempty"`
	Feedback                 *FeedbackItem                                `json:"feedback,omitempty" url:"feedback,omitempty"`
	ShareLinkId              *string                                      `json:"share_link_id,omitempty" url:"share_link_id,omitempty"`
	Source                   *Source                                      `json:"source,omitempty" url:"source,omitempty"`

	extraProperties map[string]interface{}
}

func (s *SpeechHistoryItemResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SpeechHistoryItemResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SpeechHistoryItemResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SpeechHistoryItemResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	return nil
}

func (s *SpeechHistoryItemResponse) String() string {
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}
