// This file was auto-generated by Fern from our API Definition.

package elevenlabs

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/elevenlabs/fern/core"
)

type BodyAddVoiceV1VoicesAddPost struct {
	// The name that identifies this voice. This will be displayed in the dropdown of the website.
	Name string `json:"name" url:"-"`
	// How would you describe the voice?
	Description *string `json:"description,omitempty" url:"-"`
	// Serialized labels dictionary for the voice.
	Labels *string `json:"labels,omitempty" url:"-"`
}

type AddSharingVoiceRequest struct {
	// The name that identifies this voice. This will be displayed in the dropdown of the website.
	NewName string `json:"new_name" url:"-"`
}

type BodyEditVoiceV1VoicesVoiceIdEditPost struct {
	// The name that identifies this voice. This will be displayed in the dropdown of the website.
	Name string `json:"name" url:"-"`
	// How would you describe the voice?
	Description *string `json:"description,omitempty" url:"-"`
	// Serialized labels dictionary for the voice.
	Labels *string `json:"labels,omitempty" url:"-"`
}

type VoicesGetRequest struct {
	// If set will return settings information corresponding to the voice, requires authorization.
	WithSettings *bool `query:"with_settings"`
}

type VoicesGetSharedRequest struct {
	// How many shared voices to return at maximum. Can not exceed 100, defaults to 30.
	PageSize *int `query:"page_size"`
	// voice category used for filtering
	Category *string `query:"category"`
	// gender used for filtering
	Gender *string `query:"gender"`
	// age used for filtering
	Age *string `query:"age"`
	// accent used for filtering
	Accent *string `query:"accent"`
	// language used for filtering
	Language *string `query:"language"`
	// search term used for filtering
	Search *string `query:"search"`
	// use-case used for filtering
	UseCases []*string `query:"use_cases"`
	// search term used for filtering
	Descriptives []*string `query:"descriptives"`
	// Filter featured voices
	Featured *bool `query:"featured"`
	// Filter voices that are enabled for the reader app
	ReaderAppEnabled *bool `query:"reader_app_enabled"`
	// Filter voices by public owner ID
	OwnerId *string `query:"owner_id"`
	// sort criteria
	Sort *string `query:"sort"`
	Page *int    `query:"page"`
}

type AddVoiceResponseModel struct {
	VoiceId string `json:"voice_id" url:"voice_id"`

	extraProperties map[string]interface{}
}

func (a *AddVoiceResponseModel) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AddVoiceResponseModel) UnmarshalJSON(data []byte) error {
	type unmarshaler AddVoiceResponseModel
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AddVoiceResponseModel(value)

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	return nil
}

func (a *AddVoiceResponseModel) String() string {
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type GetLibraryVoicesResponse struct {
	Voices     []*LibraryVoiceResponse `json:"voices,omitempty" url:"voices,omitempty"`
	HasMore    bool                    `json:"has_more" url:"has_more"`
	LastSortId *string                 `json:"last_sort_id,omitempty" url:"last_sort_id,omitempty"`

	extraProperties map[string]interface{}
}

func (g *GetLibraryVoicesResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetLibraryVoicesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetLibraryVoicesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetLibraryVoicesResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	return nil
}

func (g *GetLibraryVoicesResponse) String() string {
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetVoicesResponse struct {
	Voices []*Voice `json:"voices,omitempty" url:"voices,omitempty"`

	extraProperties map[string]interface{}
}

func (g *GetVoicesResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetVoicesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetVoicesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetVoicesResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	return nil
}

func (g *GetVoicesResponse) String() string {
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}
