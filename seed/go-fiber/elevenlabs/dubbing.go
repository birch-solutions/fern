// This file was auto-generated by Fern from our API Definition.

package elevenlabs

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/elevenlabs/fern/core"
)

type BodyDubAVideoOrAnAudioFileV1DubbingPost struct {
	// automatic or manual.
	Mode *string `json:"mode,omitempty" url:"-"`
	// Name of the dubbing project.
	Name *string `json:"name,omitempty" url:"-"`
	// URL of the source video/audio file.
	SourceUrl *string `json:"source_url,omitempty" url:"-"`
	// Source language.
	SourceLang *string `json:"source_lang,omitempty" url:"-"`
	// The Target language to dub the content into. Can be none if dubbing studio editor is enabled and running manual mode
	TargetLang string `json:"target_lang" url:"-"`
	// Number of speakers to use for the dubbing.
	NumSpeakers *int `json:"num_speakers,omitempty" url:"-"`
	// Whether to apply watermark to the output video.
	Watermark *bool `json:"watermark,omitempty" url:"-"`
	// Start time of the source video/audio file.
	StartTime *int `json:"start_time,omitempty" url:"-"`
	// End time of the source video/audio file.
	EndTime *int `json:"end_time,omitempty" url:"-"`
	// Whether to use the highest resolution available.
	HighestResolution *bool `json:"highest_resolution,omitempty" url:"-"`
	// Whether to prepare dub for edits in dubbing studio.
	DubbingStudio *bool `json:"dubbing_studio,omitempty" url:"-"`
}

type DoDubbingResponse struct {
	DubbingId           string  `json:"dubbing_id" url:"dubbing_id"`
	ExpectedDurationSec float64 `json:"expected_duration_sec" url:"expected_duration_sec"`

	extraProperties map[string]interface{}
}

func (d *DoDubbingResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DoDubbingResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DoDubbingResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DoDubbingResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	return nil
}

func (d *DoDubbingResponse) String() string {
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DubbingMetadataResponse struct {
	DubbingId       string   `json:"dubbing_id" url:"dubbing_id"`
	Name            string   `json:"name" url:"name"`
	Status          string   `json:"status" url:"status"`
	Error           string   `json:"error" url:"error"`
	TargetLanguages []string `json:"target_languages,omitempty" url:"target_languages,omitempty"`

	extraProperties map[string]interface{}
}

func (d *DubbingMetadataResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DubbingMetadataResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DubbingMetadataResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DubbingMetadataResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	return nil
}

func (d *DubbingMetadataResponse) String() string {
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}
