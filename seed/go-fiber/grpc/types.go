// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
)

type Metadata = map[string]*MetadataValue

type MetadataValue struct {
	Double            float64
	String            string
	Boolean           bool
	MetadataValueList []*MetadataValue
}

func NewMetadataValueFromDouble(value float64) *MetadataValue {
	return &MetadataValue{Double: value}
}

func NewMetadataValueFromString(value string) *MetadataValue {
	return &MetadataValue{String: value}
}

func NewMetadataValueFromBoolean(value bool) *MetadataValue {
	return &MetadataValue{Boolean: value}
}

func NewMetadataValueFromMetadataValueList(value []*MetadataValue) *MetadataValue {
	return &MetadataValue{MetadataValueList: value}
}

func (m *MetadataValue) UnmarshalJSON(data []byte) error {
	var valueDouble float64
	if err := json.Unmarshal(data, &valueDouble); err == nil {
		m.Double = valueDouble
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		m.String = valueString
		return nil
	}
	var valueBoolean bool
	if err := json.Unmarshal(data, &valueBoolean); err == nil {
		m.Boolean = valueBoolean
		return nil
	}
	var valueMetadataValueList []*MetadataValue
	if err := json.Unmarshal(data, &valueMetadataValueList); err == nil {
		m.MetadataValueList = valueMetadataValueList
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, m)
}

func (m MetadataValue) MarshalJSON() ([]byte, error) {
	if m.Double != 0 {
		return json.Marshal(m.Double)
	}
	if m.String != "" {
		return json.Marshal(m.String)
	}
	if m.Boolean != false {
		return json.Marshal(m.Boolean)
	}
	if m.MetadataValueList != nil {
		return json.Marshal(m.MetadataValueList)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", m)
}

type MetadataValueVisitor interface {
	VisitDouble(float64) error
	VisitString(string) error
	VisitBoolean(bool) error
	VisitMetadataValueList([]*MetadataValue) error
}

func (m *MetadataValue) Accept(visitor MetadataValueVisitor) error {
	if m.Double != 0 {
		return visitor.VisitDouble(m.Double)
	}
	if m.String != "" {
		return visitor.VisitString(m.String)
	}
	if m.Boolean != false {
		return visitor.VisitBoolean(m.Boolean)
	}
	if m.MetadataValueList != nil {
		return visitor.VisitMetadataValueList(m.MetadataValueList)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", m)
}
