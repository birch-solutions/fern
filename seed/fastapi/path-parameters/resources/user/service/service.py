# This file was auto-generated by Fern from our API Definition.

from ....core.abstract_fern_service import AbstractFernService
from ..types.organization import Organization
import abc
from ..types.user import User
import typing
import fastapi
import inspect
from ....core.exceptions.fern_http_exception import FernHTTPException
import logging
import functools
from ....core.route_args import get_route_args


class AbstractUserService(AbstractFernService):
    """
    AbstractUserService is an abstract class containing the methods that you should implement.

    Each method is associated with an API route, which will be registered
    with FastAPI when you register your implementation using Fern's register()
    function.
    """

    @abc.abstractmethod
    def get_organization(self, *, organization_id: str) -> Organization: ...

    @abc.abstractmethod
    def get_user(self, *, user_id: str) -> User: ...

    @abc.abstractmethod
    def get_organization_user(self, *, organization_id: str, user_id: str) -> User: ...

    @abc.abstractmethod
    def search_users(
        self, *, user_id: str, limit: typing.Optional[int] = None
    ) -> typing.Sequence[User]: ...

    @abc.abstractmethod
    def search_organizations(
        self, *, organization_id: str, limit: typing.Optional[int] = None
    ) -> typing.Sequence[Organization]: ...

    """
    Below are internal methods used by Fern to register your implementation.
    You can ignore them.
    """

    @classmethod
    def _init_fern(cls, router: fastapi.APIRouter) -> None:
        cls.__init_get_organization(router=router)
        cls.__init_get_user(router=router)
        cls.__init_get_organization_user(router=router)
        cls.__init_search_users(router=router)
        cls.__init_search_organizations(router=router)

    @classmethod
    def __init_get_organization(cls, router: fastapi.APIRouter) -> None:
        endpoint_function = inspect.signature(cls.get_organization)
        new_parameters: typing.List[inspect.Parameter] = []
        for index, (parameter_name, parameter) in enumerate(
            endpoint_function.parameters.items()
        ):
            if index == 0:
                new_parameters.append(parameter.replace(default=fastapi.Depends(cls)))
            elif parameter_name == "organization_id":
                new_parameters.append(parameter.replace(default=fastapi.Path(...)))
            else:
                new_parameters.append(parameter)
        setattr(
            cls.get_organization,
            "__signature__",
            endpoint_function.replace(parameters=new_parameters),
        )

        @functools.wraps(cls.get_organization)
        def wrapper(*args: typing.Any, **kwargs: typing.Any) -> Organization:
            try:
                return cls.get_organization(*args, **kwargs)
            except FernHTTPException as e:
                logging.getLogger(f"{cls.__module__}.{cls.__name__}").warn(
                    f"Endpoint 'get_organization' unexpectedly threw {e.__class__.__name__}. "
                    + f"If this was intentional, please add {e.__class__.__name__} to "
                    + "the endpoint's errors list in your Fern Definition."
                )
                raise e

        # this is necessary for FastAPI to find forward-ref'ed type hints.
        # https://github.com/tiangolo/fastapi/pull/5077
        wrapper.__globals__.update(cls.get_organization.__globals__)

        router.get(
            path="/user/organizations/{organization_id}",
            response_model=Organization,
            description=AbstractUserService.get_organization.__doc__,
            **get_route_args(cls.get_organization, default_tag="user"),
        )(wrapper)

    @classmethod
    def __init_get_user(cls, router: fastapi.APIRouter) -> None:
        endpoint_function = inspect.signature(cls.get_user)
        new_parameters: typing.List[inspect.Parameter] = []
        for index, (parameter_name, parameter) in enumerate(
            endpoint_function.parameters.items()
        ):
            if index == 0:
                new_parameters.append(parameter.replace(default=fastapi.Depends(cls)))
            elif parameter_name == "user_id":
                new_parameters.append(parameter.replace(default=fastapi.Path(...)))
            else:
                new_parameters.append(parameter)
        setattr(
            cls.get_user,
            "__signature__",
            endpoint_function.replace(parameters=new_parameters),
        )

        @functools.wraps(cls.get_user)
        def wrapper(*args: typing.Any, **kwargs: typing.Any) -> User:
            try:
                return cls.get_user(*args, **kwargs)
            except FernHTTPException as e:
                logging.getLogger(f"{cls.__module__}.{cls.__name__}").warn(
                    f"Endpoint 'get_user' unexpectedly threw {e.__class__.__name__}. "
                    + f"If this was intentional, please add {e.__class__.__name__} to "
                    + "the endpoint's errors list in your Fern Definition."
                )
                raise e

        # this is necessary for FastAPI to find forward-ref'ed type hints.
        # https://github.com/tiangolo/fastapi/pull/5077
        wrapper.__globals__.update(cls.get_user.__globals__)

        router.get(
            path="/user/users/{user_id}",
            response_model=User,
            description=AbstractUserService.get_user.__doc__,
            **get_route_args(cls.get_user, default_tag="user"),
        )(wrapper)

    @classmethod
    def __init_get_organization_user(cls, router: fastapi.APIRouter) -> None:
        endpoint_function = inspect.signature(cls.get_organization_user)
        new_parameters: typing.List[inspect.Parameter] = []
        for index, (parameter_name, parameter) in enumerate(
            endpoint_function.parameters.items()
        ):
            if index == 0:
                new_parameters.append(parameter.replace(default=fastapi.Depends(cls)))
            elif parameter_name == "organization_id":
                new_parameters.append(parameter.replace(default=fastapi.Path(...)))
            elif parameter_name == "user_id":
                new_parameters.append(parameter.replace(default=fastapi.Path(...)))
            else:
                new_parameters.append(parameter)
        setattr(
            cls.get_organization_user,
            "__signature__",
            endpoint_function.replace(parameters=new_parameters),
        )

        @functools.wraps(cls.get_organization_user)
        def wrapper(*args: typing.Any, **kwargs: typing.Any) -> User:
            try:
                return cls.get_organization_user(*args, **kwargs)
            except FernHTTPException as e:
                logging.getLogger(f"{cls.__module__}.{cls.__name__}").warn(
                    f"Endpoint 'get_organization_user' unexpectedly threw {e.__class__.__name__}. "
                    + f"If this was intentional, please add {e.__class__.__name__} to "
                    + "the endpoint's errors list in your Fern Definition."
                )
                raise e

        # this is necessary for FastAPI to find forward-ref'ed type hints.
        # https://github.com/tiangolo/fastapi/pull/5077
        wrapper.__globals__.update(cls.get_organization_user.__globals__)

        router.get(
            path="/user/organizations/{organization_id}/users/{user_id}",
            response_model=User,
            description=AbstractUserService.get_organization_user.__doc__,
            **get_route_args(cls.get_organization_user, default_tag="user"),
        )(wrapper)

    @classmethod
    def __init_search_users(cls, router: fastapi.APIRouter) -> None:
        endpoint_function = inspect.signature(cls.search_users)
        new_parameters: typing.List[inspect.Parameter] = []
        for index, (parameter_name, parameter) in enumerate(
            endpoint_function.parameters.items()
        ):
            if index == 0:
                new_parameters.append(parameter.replace(default=fastapi.Depends(cls)))
            elif parameter_name == "user_id":
                new_parameters.append(parameter.replace(default=fastapi.Path(...)))
            elif parameter_name == "limit":
                new_parameters.append(
                    parameter.replace(default=fastapi.Query(default=None))
                )
            else:
                new_parameters.append(parameter)
        setattr(
            cls.search_users,
            "__signature__",
            endpoint_function.replace(parameters=new_parameters),
        )

        @functools.wraps(cls.search_users)
        def wrapper(*args: typing.Any, **kwargs: typing.Any) -> typing.Sequence[User]:
            try:
                return cls.search_users(*args, **kwargs)
            except FernHTTPException as e:
                logging.getLogger(f"{cls.__module__}.{cls.__name__}").warn(
                    f"Endpoint 'search_users' unexpectedly threw {e.__class__.__name__}. "
                    + f"If this was intentional, please add {e.__class__.__name__} to "
                    + "the endpoint's errors list in your Fern Definition."
                )
                raise e

        # this is necessary for FastAPI to find forward-ref'ed type hints.
        # https://github.com/tiangolo/fastapi/pull/5077
        wrapper.__globals__.update(cls.search_users.__globals__)

        router.get(
            path="/user/users/{user_id}",
            response_model=typing.Sequence[User],
            description=AbstractUserService.search_users.__doc__,
            **get_route_args(cls.search_users, default_tag="user"),
        )(wrapper)

    @classmethod
    def __init_search_organizations(cls, router: fastapi.APIRouter) -> None:
        endpoint_function = inspect.signature(cls.search_organizations)
        new_parameters: typing.List[inspect.Parameter] = []
        for index, (parameter_name, parameter) in enumerate(
            endpoint_function.parameters.items()
        ):
            if index == 0:
                new_parameters.append(parameter.replace(default=fastapi.Depends(cls)))
            elif parameter_name == "organization_id":
                new_parameters.append(parameter.replace(default=fastapi.Path(...)))
            elif parameter_name == "limit":
                new_parameters.append(
                    parameter.replace(default=fastapi.Query(default=None))
                )
            else:
                new_parameters.append(parameter)
        setattr(
            cls.search_organizations,
            "__signature__",
            endpoint_function.replace(parameters=new_parameters),
        )

        @functools.wraps(cls.search_organizations)
        def wrapper(
            *args: typing.Any, **kwargs: typing.Any
        ) -> typing.Sequence[Organization]:
            try:
                return cls.search_organizations(*args, **kwargs)
            except FernHTTPException as e:
                logging.getLogger(f"{cls.__module__}.{cls.__name__}").warn(
                    f"Endpoint 'search_organizations' unexpectedly threw {e.__class__.__name__}. "
                    + f"If this was intentional, please add {e.__class__.__name__} to "
                    + "the endpoint's errors list in your Fern Definition."
                )
                raise e

        # this is necessary for FastAPI to find forward-ref'ed type hints.
        # https://github.com/tiangolo/fastapi/pull/5077
        wrapper.__globals__.update(cls.search_organizations.__globals__)

        router.get(
            path="/user/organizations/{organization_id}",
            response_model=typing.Sequence[Organization],
            description=AbstractUserService.search_organizations.__doc__,
            **get_route_args(cls.search_organizations, default_tag="user"),
        )(wrapper)
