# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing

import typing_extensions

from ......core.datetime_utils import serialize_datetime
from ......core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def string(self, value: str) -> Data:
        return Data(__root__=_Data.String(type="string", value=value))

    def base_64(self, value: str) -> Data:
        return Data(__root__=_Data.Base64(type="base64", value=value))


class Data(pydantic_v1.BaseModel):
    """
    Examples
    --------
    from seed.examples.resources.commons import Data_String

    Data_String(value="data")
    """

    factory: typing.ClassVar[_Factory] = _Factory()

    def get_as_union(self) -> typing.Union[_Data.String, _Data.Base64]:
        return self.__root__

    def visit(self, string: typing.Callable[[str], T_Result], base_64: typing.Callable[[str], T_Result]) -> T_Result:
        if self.__root__.type == "string":
            return string(self.__root__.value)
        if self.__root__.type == "base64":
            return base_64(self.__root__.value)

    __root__: typing_extensions.Annotated[
        typing.Union[_Data.String, _Data.Base64], pydantic_v1.Field(discriminator="type")
    ]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        extra = pydantic_v1.Extra.forbid
        json_encoders = {dt.datetime: serialize_datetime}


class _Data:
    class String(pydantic_v1.BaseModel):
        type: typing.Literal["string"] = "string"
        value: str

    class Base64(pydantic_v1.BaseModel):
        type: typing.Literal["base64"] = "base64"
        value: str


Data.update_forward_refs()
