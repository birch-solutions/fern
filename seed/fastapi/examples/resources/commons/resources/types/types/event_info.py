# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing

import typing_extensions

from ......core.datetime_utils import serialize_datetime
from ......core.pydantic_utilities import pydantic_v1
from .metadata import Metadata as resources_commons_resources_types_types_metadata_Metadata
from .tag import Tag as resources_commons_resources_types_types_tag_Tag

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def metadata(self, value: resources_commons_resources_types_types_metadata_Metadata) -> EventInfo:
        return EventInfo(__root__=_EventInfo.Metadata(**value.dict(exclude_unset=True), type="metadata"))

    def tag(self, value: resources_commons_resources_types_types_tag_Tag) -> EventInfo:
        return EventInfo(__root__=_EventInfo.Tag(type="tag", value=value))


class EventInfo(pydantic_v1.BaseModel):
    """
    Examples
    --------
    from seed.examples.resources.commons import EventInfo_Metadata

    EventInfo_Metadata(
        id="metadata-alskjfg8",
        data={"one": "two"},
        json_string='{"one": "two"}',
    )
    """

    factory: typing.ClassVar[_Factory] = _Factory()

    def get_as_union(self) -> typing.Union[_EventInfo.Metadata, _EventInfo.Tag]:
        return self.__root__

    def visit(
        self,
        metadata: typing.Callable[[resources_commons_resources_types_types_metadata_Metadata], T_Result],
        tag: typing.Callable[[resources_commons_resources_types_types_tag_Tag], T_Result],
    ) -> T_Result:
        if self.__root__.type == "metadata":
            return metadata(
                resources_commons_resources_types_types_metadata_Metadata(
                    **self.__root__.dict(exclude_unset=True, exclude={"type"})
                )
            )
        if self.__root__.type == "tag":
            return tag(self.__root__.value)

    __root__: typing_extensions.Annotated[
        typing.Union[_EventInfo.Metadata, _EventInfo.Tag], pydantic_v1.Field(discriminator="type")
    ]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        extra = pydantic_v1.Extra.forbid
        json_encoders = {dt.datetime: serialize_datetime}


class _EventInfo:
    class Metadata(resources_commons_resources_types_types_metadata_Metadata):
        type: typing.Literal["metadata"] = "metadata"

        class Config:
            allow_population_by_field_name = True
            populate_by_name = True

    class Tag(pydantic_v1.BaseModel):
        type: typing.Literal["tag"] = "tag"
        value: resources_commons_resources_types_types_tag_Tag


EventInfo.update_forward_refs()
