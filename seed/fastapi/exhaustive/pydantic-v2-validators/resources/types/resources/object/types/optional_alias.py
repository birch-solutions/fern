# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
import pydantic
import typing


class OptionalAlias(pydantic.RootModel[typing.Optional[str]]):
    root: typing.Optional[str]

    def get_as_str(self) -> typing.Optional[str]:
        return self.root

    @staticmethod
    def from_str(value: typing.Optional[str]) -> OptionalAlias:
        return OptionalAlias(root=value)

    class Validators:
        """
        Use this class to add validators to the Pydantic model.

            @OptionalAlias.Validators.validate
            def validate(value: typing.Optional[str]) -> typing.Optional[str]:
                ...
        """

        _validators: typing.ClassVar[
            typing.List[typing.Callable[[typing.Optional[str]], typing.Optional[str]]]
        ] = []

        @classmethod
        def validate(
            cls,
            validator: typing.Callable[[typing.Optional[str]], typing.Optional[str]],
        ) -> None:
            cls._validators.append(validator)

    @pydantic.model_validator(mode="after")
    def _validate(cls, model: OptionalAlias) -> OptionalAlias:
        value = model.root
        for validator in OptionalAlias.Validators._validators:
            value = validator(value)
        return model

    model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
        frozen=True
    )  # type: ignore # Pydantic v2
