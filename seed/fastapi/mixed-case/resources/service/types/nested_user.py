# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ....core.pydantic_utilities import pydantic_v1
from .user import User


class NestedUser(pydantic_v1.BaseModel):
    """
    Examples
    --------
    from seed.mixed_case import NestedUser, User

    NestedUser(
        name="username",
        nested_user=User(
            user_name="nestedUsername",
            metadata_tags=["tag1", "tag2"],
            extra_properties={"foo": "bar", "baz": "qux"},
        ),
    )
    """

    name: str = pydantic_v1.Field(alias="Name")
    nested_user: User = pydantic_v1.Field(alias="NestedUser")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic_v1.Extra.forbid
        json_encoders = {dt.datetime: serialize_datetime}
