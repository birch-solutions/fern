# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ....core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from .key import Key


class Metadata(pydantic_v1.BaseModel):
    """
    Undiscriminated unions can act as a map key
    as long as all of their values are valid keys
    (i.e. do they have a valid string representation).

    Examples
    --------
    from seed.undiscriminated_unions import KeyType

    {
        KeyType.NAME: "exampleName",
        KeyType.VALUE: "exampleValue",
        "default": "exampleDefault",
    }
    """

    __root__: typing.Dict[Key, str]

    def get_as_map(self) -> typing.Dict[Key, str]:
        return self.__root__

    @staticmethod
    def from_map(value: typing.Dict[Key, str]) -> Metadata:
        return Metadata(__root__=value)

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        extra = pydantic_v1.Extra.forbid
        json_encoders = {dt.datetime: serialize_datetime}
