# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing

import typing_extensions

from ....core.datetime_utils import serialize_datetime
from ....core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from .compile_error import CompileError as resources_submission_types_compile_error_CompileError
from .internal_error import InternalError as resources_submission_types_internal_error_InternalError
from .runtime_error import RuntimeError as resources_submission_types_runtime_error_RuntimeError

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def compile_error(self, value: resources_submission_types_compile_error_CompileError) -> ErrorInfo:
        return ErrorInfo(__root__=_ErrorInfo.CompileError(**value.dict(exclude_unset=True), type="compileError"))

    def runtime_error(self, value: resources_submission_types_runtime_error_RuntimeError) -> ErrorInfo:
        return ErrorInfo(__root__=_ErrorInfo.RuntimeError(**value.dict(exclude_unset=True), type="runtimeError"))

    def internal_error(self, value: resources_submission_types_internal_error_InternalError) -> ErrorInfo:
        return ErrorInfo(__root__=_ErrorInfo.InternalError(**value.dict(exclude_unset=True), type="internalError"))


class ErrorInfo(pydantic_v1.BaseModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    def get_as_union(self) -> typing.Union[_ErrorInfo.CompileError, _ErrorInfo.RuntimeError, _ErrorInfo.InternalError]:
        return self.__root__

    def visit(
        self,
        compile_error: typing.Callable[[resources_submission_types_compile_error_CompileError], T_Result],
        runtime_error: typing.Callable[[resources_submission_types_runtime_error_RuntimeError], T_Result],
        internal_error: typing.Callable[[resources_submission_types_internal_error_InternalError], T_Result],
    ) -> T_Result:
        if self.__root__.type == "compileError":
            return compile_error(
                resources_submission_types_compile_error_CompileError(
                    **self.__root__.dict(exclude_unset=True, exclude={"type"})
                )
            )
        if self.__root__.type == "runtimeError":
            return runtime_error(
                resources_submission_types_runtime_error_RuntimeError(
                    **self.__root__.dict(exclude_unset=True, exclude={"type"})
                )
            )
        if self.__root__.type == "internalError":
            return internal_error(
                resources_submission_types_internal_error_InternalError(
                    **self.__root__.dict(exclude_unset=True, exclude={"type"})
                )
            )

    __root__: typing_extensions.Annotated[
        typing.Union[_ErrorInfo.CompileError, _ErrorInfo.RuntimeError, _ErrorInfo.InternalError],
        pydantic_v1.Field(discriminator="type"),
    ]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        extra = pydantic_v1.Extra.forbid
        json_encoders = {dt.datetime: serialize_datetime}


class _ErrorInfo:
    class CompileError(resources_submission_types_compile_error_CompileError):
        type: typing.Literal["compileError"] = "compileError"

        class Config:
            allow_population_by_field_name = True
            populate_by_name = True

    class RuntimeError(resources_submission_types_runtime_error_RuntimeError):
        type: typing.Literal["runtimeError"] = "runtimeError"

        class Config:
            allow_population_by_field_name = True
            populate_by_name = True

    class InternalError(resources_submission_types_internal_error_InternalError):
        type: typing.Literal["internalError"] = "internalError"

        class Config:
            allow_population_by_field_name = True
            populate_by_name = True


ErrorInfo.update_forward_refs()
