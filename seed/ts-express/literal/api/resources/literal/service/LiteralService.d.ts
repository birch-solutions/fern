/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as SeedLiteral from "../../..";
import express from "express";
export interface LiteralServiceMethods {
    createOptions(req: express.Request<never, SeedLiteral.CreateOptionsResponse, SeedLiteral.CreateOptionsRequest, never>, res: {
        send: (responseBody: SeedLiteral.CreateOptionsResponse) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    getOptions(req: express.Request<never, SeedLiteral.Options, SeedLiteral.GetOptionsRequest, never>, res: {
        send: (responseBody: SeedLiteral.Options) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    getUndiscriminatedOptions(req: express.Request<never, SeedLiteral.UndiscriminatedOptions, SeedLiteral.GetUndiscriminatedOptionsRequest, never>, res: {
        send: (responseBody: SeedLiteral.UndiscriminatedOptions) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
}
export declare class LiteralService {
    private readonly methods;
    private router;
    constructor(methods: LiteralServiceMethods, middleware?: express.RequestHandler[]);
    addMiddleware(handler: express.RequestHandler): this;
    toRouter(): express.Router;
}
