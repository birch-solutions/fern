/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.literalHeaders.resources.withnonliteralheaders.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.literalHeaders.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = WithNonLiteralHeadersRequest.Builder.class)
public final class WithNonLiteralHeadersRequest {
    private final int integer;

    private final Optional<Integer> maybeInteger;

    private final Boolean trueServiceHeader;

    private final String nonLiteralEndpointHeader;

    private final Boolean trueEndpointHeader;

    private final Map<String, Object> additionalProperties;

    private WithNonLiteralHeadersRequest(
            int integer,
            Optional<Integer> maybeInteger,
            Boolean trueServiceHeader,
            String nonLiteralEndpointHeader,
            Boolean trueEndpointHeader,
            Map<String, Object> additionalProperties) {
        this.integer = integer;
        this.maybeInteger = maybeInteger;
        this.trueServiceHeader = trueServiceHeader;
        this.nonLiteralEndpointHeader = nonLiteralEndpointHeader;
        this.trueEndpointHeader = trueEndpointHeader;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("integer")
    public int getInteger() {
        return integer;
    }

    @JsonProperty("maybeInteger")
    public Optional<Integer> getMaybeInteger() {
        return maybeInteger;
    }

    @JsonProperty("literalServiceHeader")
    public String getLiteralServiceHeader() {
        return "service header";
    }

    @JsonProperty("trueServiceHeader")
    public Boolean getTrueServiceHeader() {
        return trueServiceHeader;
    }

    @JsonProperty("nonLiteralEndpointHeader")
    public String getNonLiteralEndpointHeader() {
        return nonLiteralEndpointHeader;
    }

    @JsonProperty("literalEndpointHeader")
    public String getLiteralEndpointHeader() {
        return "endpoint header";
    }

    @JsonProperty("trueEndpointHeader")
    public Boolean getTrueEndpointHeader() {
        return trueEndpointHeader;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof WithNonLiteralHeadersRequest && equalTo((WithNonLiteralHeadersRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(WithNonLiteralHeadersRequest other) {
        return integer == other.integer
                && maybeInteger.equals(other.maybeInteger)
                && trueServiceHeader.equals(other.trueServiceHeader)
                && nonLiteralEndpointHeader.equals(other.nonLiteralEndpointHeader)
                && trueEndpointHeader.equals(other.trueEndpointHeader);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.integer,
                this.maybeInteger,
                this.trueServiceHeader,
                this.nonLiteralEndpointHeader,
                this.trueEndpointHeader);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IntegerStage builder() {
        return new Builder();
    }

    public interface IntegerStage {
        TrueServiceHeaderStage integer(int integer);

        Builder from(WithNonLiteralHeadersRequest other);
    }

    public interface TrueServiceHeaderStage {
        NonLiteralEndpointHeaderStage trueServiceHeader(Boolean trueServiceHeader);
    }

    public interface NonLiteralEndpointHeaderStage {
        TrueEndpointHeaderStage nonLiteralEndpointHeader(String nonLiteralEndpointHeader);
    }

    public interface TrueEndpointHeaderStage {
        _FinalStage trueEndpointHeader(Boolean trueEndpointHeader);
    }

    public interface _FinalStage {
        WithNonLiteralHeadersRequest build();

        _FinalStage maybeInteger(Optional<Integer> maybeInteger);

        _FinalStage maybeInteger(Integer maybeInteger);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements IntegerStage,
                    TrueServiceHeaderStage,
                    NonLiteralEndpointHeaderStage,
                    TrueEndpointHeaderStage,
                    _FinalStage {
        private int integer;

        private Boolean trueServiceHeader;

        private String nonLiteralEndpointHeader;

        private Boolean trueEndpointHeader;

        private Optional<Integer> maybeInteger = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(WithNonLiteralHeadersRequest other) {
            integer(other.getInteger());
            maybeInteger(other.getMaybeInteger());
            trueServiceHeader(other.getTrueServiceHeader());
            nonLiteralEndpointHeader(other.getNonLiteralEndpointHeader());
            trueEndpointHeader(other.getTrueEndpointHeader());
            return this;
        }

        @java.lang.Override
        @JsonSetter("integer")
        public TrueServiceHeaderStage integer(int integer) {
            this.integer = integer;
            return this;
        }

        @java.lang.Override
        @JsonSetter("trueServiceHeader")
        public NonLiteralEndpointHeaderStage trueServiceHeader(Boolean trueServiceHeader) {
            this.trueServiceHeader = trueServiceHeader;
            return this;
        }

        @java.lang.Override
        @JsonSetter("nonLiteralEndpointHeader")
        public TrueEndpointHeaderStage nonLiteralEndpointHeader(String nonLiteralEndpointHeader) {
            this.nonLiteralEndpointHeader = nonLiteralEndpointHeader;
            return this;
        }

        @java.lang.Override
        @JsonSetter("trueEndpointHeader")
        public _FinalStage trueEndpointHeader(Boolean trueEndpointHeader) {
            this.trueEndpointHeader = trueEndpointHeader;
            return this;
        }

        @java.lang.Override
        public _FinalStage maybeInteger(Integer maybeInteger) {
            this.maybeInteger = Optional.of(maybeInteger);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "maybeInteger", nulls = Nulls.SKIP)
        public _FinalStage maybeInteger(Optional<Integer> maybeInteger) {
            this.maybeInteger = maybeInteger;
            return this;
        }

        @java.lang.Override
        public WithNonLiteralHeadersRequest build() {
            return new WithNonLiteralHeadersRequest(
                    integer,
                    maybeInteger,
                    trueServiceHeader,
                    nonLiteralEndpointHeader,
                    trueEndpointHeader,
                    additionalProperties);
        }
    }
}
