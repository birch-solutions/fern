/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.version.core;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.TimeUnit;

public final class RequestOptions {
    private final Optional<Integer> timeout;

    private final TimeUnit timeoutTimeUnit;

    /**
     * version.get().toString() is sent as the "X-API-Version" header, overriding client options if present.
     */
    private final Optional<ApiVersion> version;

    private RequestOptions(Optional<Integer> timeout, TimeUnit timeoutTimeUnit, Optional<ApiVersion> version) {
        this.timeout = timeout;
        this.timeoutTimeUnit = timeoutTimeUnit;
        this.version = version;
    }

    public Optional<Integer> getTimeout() {
        return timeout;
    }

    public TimeUnit getTimeoutTimeUnit() {
        return timeoutTimeUnit;
    }

    /**
     * version.get().toString() is sent as the "X-API-Version" header, overriding client options if present.
     */
    public Optional<ApiVersion> getVersion() {
        return version;
    }

    public Map<String, String> getHeaders() {
        Map<String, String> headers = new HashMap<>();
        if (this.version.isPresent()) {
            headers.put("X-API-Version", this.version.get().toString());
        }
        return headers;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static final class Builder {
        private Optional<Integer> timeout = Optional.empty();

        private TimeUnit timeoutTimeUnit = TimeUnit.SECONDS;

        private Optional<ApiVersion> version = Optional.empty();

        /**
         * version.get().toString() is sent as the "X-API-Version" header, overriding client options if present.
         */
        public Builder version(ApiVersion version) {
            this.version = Optional.of(version);
            return this;
        }

        public Builder timeout(Integer timeout) {
            this.timeout = Optional.of(timeout);
            return this;
        }

        public Builder timeout(Integer timeout, TimeUnit timeoutTimeUnit) {
            this.timeout = Optional.of(timeout);
            this.timeoutTimeUnit = timeoutTimeUnit;
            return this;
        }

        public RequestOptions build() {
            return new RequestOptions(timeout, timeoutTimeUnit, version);
        }
    }
}
