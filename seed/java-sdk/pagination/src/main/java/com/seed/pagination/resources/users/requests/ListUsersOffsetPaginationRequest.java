/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.pagination.resources.users.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.pagination.core.ObjectMappers;
import com.seed.pagination.resources.users.types.Order;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ListUsersOffsetPaginationRequest.Builder.class)
public final class ListUsersOffsetPaginationRequest {
    private final int page;

    private final Optional<Integer> perPage;

    private final Optional<Order> order;

    private final Optional<String> startingAfter;

    private final Map<String, Object> additionalProperties;

    private ListUsersOffsetPaginationRequest(
            int page,
            Optional<Integer> perPage,
            Optional<Order> order,
            Optional<String> startingAfter,
            Map<String, Object> additionalProperties) {
        this.page = page;
        this.perPage = perPage;
        this.order = order;
        this.startingAfter = startingAfter;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Defaults to first page
     */
    @JsonProperty("page")
    public int getPage() {
        return page;
    }

    /**
     * @return Defaults to per page
     */
    @JsonProperty("per_page")
    public Optional<Integer> getPerPage() {
        return perPage;
    }

    @JsonProperty("order")
    public Optional<Order> getOrder() {
        return order;
    }

    /**
     * @return The cursor used for pagination in order to fetch
     * the next page of results.
     */
    @JsonProperty("starting_after")
    public Optional<String> getStartingAfter() {
        return startingAfter;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ListUsersOffsetPaginationRequest && equalTo((ListUsersOffsetPaginationRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ListUsersOffsetPaginationRequest other) {
        return page == other.page
                && perPage.equals(other.perPage)
                && order.equals(other.order)
                && startingAfter.equals(other.startingAfter);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.page, this.perPage, this.order, this.startingAfter);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static PageStage builder() {
        return new Builder();
    }

    public interface PageStage {
        _FinalStage page(int page);

        Builder from(ListUsersOffsetPaginationRequest other);
    }

    public interface _FinalStage {
        ListUsersOffsetPaginationRequest build();

        _FinalStage perPage(Optional<Integer> perPage);

        _FinalStage perPage(Integer perPage);

        _FinalStage order(Optional<Order> order);

        _FinalStage order(Order order);

        _FinalStage startingAfter(Optional<String> startingAfter);

        _FinalStage startingAfter(String startingAfter);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements PageStage, _FinalStage {
        private int page;

        private Optional<String> startingAfter = Optional.empty();

        private Optional<Order> order = Optional.empty();

        private Optional<Integer> perPage = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ListUsersOffsetPaginationRequest other) {
            page(other.getPage());
            perPage(other.getPerPage());
            order(other.getOrder());
            startingAfter(other.getStartingAfter());
            return this;
        }

        /**
         * <p>Defaults to first page</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("page")
        public _FinalStage page(int page) {
            this.page = page;
            return this;
        }

        /**
         * <p>The cursor used for pagination in order to fetch
         * the next page of results.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage startingAfter(String startingAfter) {
            this.startingAfter = Optional.of(startingAfter);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "starting_after", nulls = Nulls.SKIP)
        public _FinalStage startingAfter(Optional<String> startingAfter) {
            this.startingAfter = startingAfter;
            return this;
        }

        @java.lang.Override
        public _FinalStage order(Order order) {
            this.order = Optional.of(order);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "order", nulls = Nulls.SKIP)
        public _FinalStage order(Optional<Order> order) {
            this.order = order;
            return this;
        }

        /**
         * <p>Defaults to per page</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage perPage(Integer perPage) {
            this.perPage = Optional.of(perPage);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "per_page", nulls = Nulls.SKIP)
        public _FinalStage perPage(Optional<Integer> perPage) {
            this.perPage = perPage;
            return this;
        }

        @java.lang.Override
        public ListUsersOffsetPaginationRequest build() {
            return new ListUsersOffsetPaginationRequest(page, perPage, order, startingAfter, additionalProperties);
        }
    }
}
