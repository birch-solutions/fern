types:
  FileId:
    docs: ID uniquely identifying an OpenAPI file.
    type: string

  OpenAPIIntermediateRepresentation:
    properties:
      rootPackage:
        type: OpenAPIRootPackage
        docs: |
          Represents the directory structure of multiple OpenAPI yamls.
      files: map<FileId, OpenAPIFile>

  OpenAPIRootPackage:
    properties:
      subpackages: list<OpenAPISubPackage>
      file: optional<FileId>

  OpenAPISubPackage:
    properties:
      name: string
      subpackages: list<OpenAPISubPackage>
      file: optional<FileId>

  OpenAPIFile:
    properties:
      title: optional<string>
      description: optional<string>
      servers: list<Server>
      tags: map<TagId, Tag>
      hasEndpointsMarkedInternal: boolean
      endpoints: list<Endpoint>
      schemas: map<SchemaId, Schema>
      errors: map<StatusCode, HttpError>
      variables: map<string, PrimitiveSchema>
      nonRequestReferencedSchemas:
        type: set<SchemaId>
        docs: Whether the schema is directly referenced from a response, parameters, or other schemas
      securitySchemes: map<SecuritySchemeId, SecurityScheme>
      dependencies:
        type: set<FileId>
        docs: The other specs that this OpenAPI file depends on

  WithDescription:
    properties:
      description: optional<string>

  WithName:
    properties:
      nameOverride:
        type: optional<string>
        docs: Read from `x-fern-type-name`.
      generatedName:
        type: string
        docs: |
          An autogenerated name for a type based on the hierarchy 
          of the type declarations. 
          [MyType -> propA -> propB] will turn into MyTypePropAPropB
          [MyType] will turn into MyType

  StatusCode:
    type: integer

  HttpError:
    extends:
      - WithDescription
      - WithName
    properties:
      schema: optional<Schema>

  Server:
    extends: WithDescription
    properties:
      name:
        type: optional<string>
        docs: Populated by `X-Server-Name`
      url: string

  TagId:
    type: string
    docs: The name of the tag.

  Tag:
    extends: WithDescription
    properties:
      id: TagId

  SchemaId:
    type: string
    docs: The name of the schema.

  SecuritySchemeId:
    type: string
    docs: The name of the security scheme.

  SecurityScheme:
    union:
      basic: BasicSecurityScheme
      bearer: {}
      header: HeaderSecurityScheme
      query:
        type: QuerySecurityScheme
        docs: parameter sent as a security scheme

  BasicSecurityScheme:
    properties:
      usernameVariableName: optional<string>
      passwordVariableName: optional<string>

  HeaderSecurityScheme:
    properties:
      headerName: string
      prefix: optional<string>

  QuerySecurityScheme:
    properties:
      queryParameterName: string

  Endpoint:
    extends: WithDescription
    properties:
      authed: boolean
      internal: optional<boolean>
      method: HttpMethod
      path:
        type: string
        docs: |
          This string includes templated path parameters. 
          For example, `/users/{userId}` is a valid value.
      summary: optional<string>
      operationId: optional<string>
      tags: list<TagId>
      pathParameters: list<PathParameter>
      queryParameters: list<QueryParameter>
      headers: list<Header>
      sdkName: optional<EndpointSdkName>
      generatedRequestName:
        type: string
        docs: |
          Populated as ${operationId}Request
      requestNameOverride:
        type: optional<string>
        docs: |
          Populated by `x-request-name` on a path object.
      request: optional<Request>
      responseIsStreaming:
        type: boolean
        docs: Checks if `x-fern-streaming` is present and is true.
      response: optional<Response>
      errorStatusCode: list<StatusCode>
      server: list<Server>

  EndpointSdkName:
    properties:
      groupName:
        type: list<string>
        docs: This is populated by `x-fern-sdk-method-name`
      methodName:
        type: string
        docs: This is populated by `x-fern-sdk-group-name`

  HttpMethod:
    enum:
      - GET
      - POST
      - PUT
      - PATCH
      - DELETE
      - HEAD
      - OPTIONS
      - TRACE

  PathParameter:
    extends: WithDescription
    properties:
      name: string
      schema: Schema
      variableReference: optional<string>

  QueryParameter:
    extends: WithDescription
    properties:
      name: string
      schema: Schema

  Header:
    extends: WithDescription
    properties:
      name: string
      schema: Schema

  Request:
    union:
      multipart: MultipartRequest
      json: JsonRequest

  JsonRequest:
    extends: WithDescription
    properties:
      schema: Schema

  MultipartRequest:
    extends: WithDescription
    properties:
      name:
        type: optional<string>
        docs: If multipart was a reference, this will be the schema name.
      properties: list<MultipartRequestProperty>

  MultipartRequestProperty:
    extends: WithDescription
    properties:
      key: string
      schema: MultipartSchema

  MultipartSchema:
    union:
      file: {}
      json: Schema

  Response:
    union:
      file: FileResponse
      json: JsonResponse

  FileResponse:
    extends: WithDescription

  JsonResponse:
    extends: WithDescription
    properties:
      schema: Schema

  Schema:
    union:
      primitive: PrimitiveSchema
      object: ObjectSchema
      array: ArraySchema
      map: MapSchema
      optional: OptionalSchema
      enum: EnumSchema
      reference: ReferencedSchema
      literal: LiteralSchema
      oneOf: OneOfSchema
      nullable: NullableSchema
      unknown: {}

  PrimitiveSchema:
    extends: WithDescription
    properties:
      schema: PrimitiveSchemaValue

  PrimitiveSchemaValue:
    union:
      int: {}
      int64: {}
      float: {}
      double: {}
      string: StringSchema
      datetime: {}
      date: {}
      base64: {}
      boolean: {}

  StringSchema:
    properties:
      minLength: optional<integer>
      maxLength: optional<integer>

  LiteralSchema:
    extends: WithDescription
    properties:
      value: string

  ObjectSchema:
    extends:
      - WithDescription
      - WithName
    properties:
      allOf: list<ReferencedSchema>
      properties: list<ObjectProperty>
      allOfPropertyConflicts: list<AllOfPropertyConflict>

  # OpenAPI IR to Fern:
  # For every allOfPropertyConflict, we will inline the SchemaIds that conflict.
  # If the property conflict has conflicting type signatures, then we will make the type unknown.
  AllOfPropertyConflict:
    properties:
      propertyKey: string
      allOfSchemaIds:
        type: list<SchemaId>
        docs: The allOf schemas that conflict with each other
      conflictingTypeSignatures:
        type: boolean
        docs: If the allOf schemas have different types. Unclear how to resolve this. Possibly make the property unknown?

  ObjectProperty:
    properties:
      key: string
      schema: Schema
      conflict:
        type: map<SchemaId, ObjectPropertyConflictInfo>
        docs: The schemas that conflict with this property
      generatedName:
        type: string
        docs: |
          A unique name for the property.

  ObjectPropertyConflictInfo:
    properties:
      differentSchema: boolean

  ArraySchema:
    extends: WithDescription
    properties:
      value: Schema

  MapSchema:
    extends: WithDescription
    properties:
      key: PrimitiveSchemaValue
      value: Schema

  OptionalSchema:
    extends: WithDescription
    properties:
      value: Schema

  NullableSchema:
    extends: WithDescription
    properties:
      value: Schema

  EnumSchema:
    extends:
      - WithDescription
      - WithName
    properties:
      values: list<EnumValue>

  EnumValue:
    extends:
      - WithDescription
    properties:
      nameOverride:
        type: optional<string>
        docs: Codegen friendly name. Read from `X-Enum-Names`
      generatedName:
        type: string
        docs: Codegen friendly name. Generated by removing unalphanumeric characters and camel casing.
      value:
        type: string
        docs: Value of the enum

  ReferencedSchema:
    extends:
      - WithDescription
      - WithName
    properties:
      file:
        type: optional<FileId>
        docs: If empty, means it's in the existing file.
      schema: SchemaId

  OneOfSchema:
    union:
      discriminated: DiscriminatedOneOfSchema
      undisciminated: UnDiscriminatedOneOfSchema

  DiscriminatedOneOfSchema:
    extends:
      - WithDescription
      - WithName
    properties:
      discriminantProperty: string
      commonProperties: list<CommonProperty>
      schemas: map<string, Schema>

  CommonProperty:
    properties:
      key: string
      schema: Schema

  UnDiscriminatedOneOfSchema:
    extends:
      - WithDescription
      - WithName
    properties:
      schemas: list<Schema>
