imports:
  commons: ../commons.yml

types:
  SchemaWithExample:
    union:
      primitive: PrimitiveSchemaWithExample
      object: ObjectSchemaWithExample
      array: ArraySchemaWithExample
      map: MapSchemaWithExample
      optional: OptionalSchema
      enum: EnumSchemaWithExample
      reference: ReferencedSchema
      literal: LiteralSchema
      oneOf: OneOfSchemaWithExample
      nullable: NullableSchema
      unknown: UnknownSchemaWithExample

  ArraySchemaWithExample:
    extends: commons.WithDescription
    properties:
      value: SchemaWithExample

  MapSchemaWithExample:
    extends: commons.WithDescription
    properties:
      key: SchemaWithExample
      value: SchemaWithExample

  OptionalSchema:
    extends: commons.WithDescription
    properties:
      value: SchemaWithExample

  NullableSchema:
    extends: commons.WithDescription
    properties:
      value: SchemaWithExample

  EnumSchemaWithExample:
    extends:
      - commons.WithDescription
      - commons.WithName
    properties:
      values: list<EnumValue>
      example: optional<string>

  ReferencedSchema:
    extends:
      - commons.WithDescription
      - commons.WithName
    properties:
      schema: commons.SchemaId

  EnumValue:
    extends:
      - commons.WithDescription
    properties:
      nameOverride:
        type: optional<string>
        docs: Codegen friendly name. Read from `X-Enum-Names`
      generatedName:
        type: string
        docs: Codegen friendly name. Generated by removing unalphanumeric characters and camel casing.
      value:
        type: string
        docs: Value of the enum

  LiteralSchema:
    extends: commons.WithDescription
    properties:
      value: string

  UnknownSchemaWithExample:
    extends: commons.WithDescription
    properties:
      example: unknown

  ObjectSchemaWithExample:
    extends:
      - commons.WithDescription
      - commons.WithName
    properties:
      allOf: list<ReferencedSchema>
      properties: list<ObjectProperty>
      allOfPropertyConflicts: list<AllOfPropertyConflict>

  # OpenAPI IR to Fern:
  # For every allOfPropertyConflict, we will inline the commons.SchemaIds that conflict.
  # If the property conflict has conflicting type signatures, then we will make the type unknown.
  AllOfPropertyConflict:
    properties:
      propertyKey: string
      allOfcommons.SchemaIds:
        type: list<commons.SchemaId>
        docs: The allOf schemas that conflict with each other
      conflictingTypeSignatures:
        type: boolean
        docs: If the allOf schemas have different types. Unclear how to resolve this. Possibly make the property unknown?

  ObjectProperty:
    properties:
      key: string
      schema: SchemaWithExample
      conflict:
        type: map<commons.SchemaId, ObjectPropertyConflictInfo>
        docs: The schemas that conflict with this property
      generatedName:
        type: string
        docs: |
          A unique name for the property.

  ObjectPropertyConflictInfo:
    properties:
      differentSchema: boolean

  OneOfSchemaWithExample:
    union:
      discriminated: DiscriminatedOneOfSchemaWithExample
      undisciminated: UnDiscriminatedOneOfSchemaWithExample

  DiscriminatedOneOfSchemaWithExample:
    extends:
      - commons.WithDescription
      - commons.WithName
    properties:
      discriminantProperty: string
      commonProperties: list<CommonProperty>
      schemas: map<string, SchemaWithExample>

  CommonProperty:
    properties:
      key: string
      schema: SchemaWithExample

  UnDiscriminatedOneOfSchemaWithExample:
    extends:
      - commons.WithDescription
      - commons.WithName
    properties:
      schemas: list<SchemaWithExample>

  PrimitiveSchemaWithExample:
    extends: commons.WithDescription
    properties:
      schema: PrimitiveSchemaValue

  PrimitiveSchemaValue:
    union:
      int: IntWithExample
      int64: Int64WithExample
      float: FloatWithExample
      double: DoubleWithExample
      string: StringSchemaWithExample
      datetime: DatetimeWithExample
      date: DateWithExample
      base64: Base64WithExample
      boolean: BooleanWithExample

  IntWithExample:
    properties:
      example: optional<integer>

  Int64WithExample:
    properties:
      example: optional<integer>

  FloatWithExample:
    properties:
      example: optional<double>

  DoubleWithExample:
    properties:
      example: optional<double>

  StringSchemaWithExample:
    properties:
      minLength: optional<integer>
      maxLength: optional<integer>
      example: optional<string>

  DatetimeWithExample:
    properties:
      example: optional<string>

  DateWithExample:
    properties:
      example: optional<string>

  Base64WithExample:
    properties:
      example: optional<string>

  BooleanWithExample:
    properties:
      example: optional<boolean>
