import { assertNever } from "@fern-api/core-utils";
import { AbsoluteFilePath, join, RelativeFilePath } from "@fern-api/fs-utils";
import { loadApis } from "@fern-api/project-loader";
import { createMockTaskContext } from "@fern-api/task-context";
import { HttpEndpoint, IntermediateRepresentation, dynamic as DynamicSnippets, ApiAuth } from "@fern-fern/ir-sdk/api";
import path from "path";
import { generateDynamicTestCase } from "./utils/generateDynamicTestCase";
import urlJoin from "url-join";

// eslint-disable-next-line @typescript-eslint/no-misused-promises
describe("test definitions", async () => {
    const TEST_DEFINITIONS_DIR = path.join(__dirname, "../../../../../test-definitions");
    const apiWorkspaces = await loadApis({
        fernDirectory: join(AbsoluteFilePath.of(TEST_DEFINITIONS_DIR), RelativeFilePath.of("fern")),
        context: createMockTaskContext(),
        cliVersion: "0.0.0",
        cliName: "fern",
        commandLineApiWorkspace: undefined,
        defaultToAllApiWorkspaces: true
    });

    await Promise.all(
        apiWorkspaces.map(async (workspace) => {
            it(`${workspace.workspaceName}`, async () => {
                const test = await generateDynamicTestCase({
                    workspace,
                    audiences: { type: "all" }
                });
                const endpoints = getAllEndpoints(test.ir);
                for (const endpoint of endpoints) {
                    const location: DynamicSnippets.EndpointLocation = {
                        path: getFullPathForEndpoint(endpoint),
                        method: endpoint.method
                    };
                    const requests = getEndpointSnippetRequests({
                        location,
                        auth: getAuthValues(test.ir.auth),
                        endpoint
                    });
                    for (const request of requests) {
                        const response = await test.generator.generate(request);
                        test.result.addSnippet(response.snippet);
                    }
                }
                expect(test.result.toString()).toMatchSnapshot();
            });
        })
    );
});

function getEndpointSnippetRequests({
    location,
    auth,
    endpoint
}: {
    location: DynamicSnippets.EndpointLocation;
    auth: DynamicSnippets.AuthValues | undefined;
    endpoint: HttpEndpoint;
}): DynamicSnippets.EndpointSnippetRequest[] {
    const requests: DynamicSnippets.EndpointSnippetRequest[] = [];
    for (const example of [...endpoint.userSpecifiedExamples, ...endpoint.autogeneratedExamples]) {
        requests.push({
            endpoint: location,
            auth,
            headers: Object.fromEntries(
                [...(example.example?.serviceHeaders ?? []), ...(example.example?.endpointHeaders ?? [])].map(
                    (header) => {
                        return [header.name.wireValue, header.value.jsonExample];
                    }
                )
            ),
            pathParameters: Object.fromEntries(
                [
                    ...(example.example?.rootPathParameters ?? []),
                    ...(example.example?.servicePathParameters ?? []),
                    ...(example.example?.endpointPathParameters ?? [])
                ].map((parameter) => {
                    return [parameter.name.originalName, parameter.value.jsonExample];
                })
            ),
            queryParameters: Object.fromEntries(
                [...(example.example?.queryParameters ?? [])].map((parameter) => {
                    return [parameter.name.wireValue, parameter.value.jsonExample];
                })
            ),
            requestBody: example.example?.request?.jsonExample
        });
    }
    return requests;
}

function getAuthValues(auth: ApiAuth): DynamicSnippets.AuthValues | undefined {
    const scheme = auth.schemes[0];
    if (scheme == null) {
        return undefined;
    }
    switch (scheme.type) {
        case "bearer":
            return DynamicSnippets.AuthValues.bearer({
                token: "<token>"
            });
        case "basic":
            return DynamicSnippets.AuthValues.basic({
                username: "<username>",
                password: "<password>"
            });
        case "header":
            return DynamicSnippets.AuthValues.header({
                value: "<value>"
            });
        case "oauth":
            // TODO: Implement OAuth.
            return undefined;
        default:
            assertNever(scheme);
    }
}

function getAllEndpoints(ir: IntermediateRepresentation): HttpEndpoint[] {
    return Object.values(ir.services).flatMap((service) => Object.values(service.endpoints));
}

function getFullPathForEndpoint(endpoint: HttpEndpoint): string {
    let url = "";
    if (endpoint.fullPath.head.length > 0) {
        url = urlJoin(url, endpoint.fullPath.head);
    }
    for (const part of endpoint.fullPath.parts) {
        url = urlJoin(url, "{" + part.pathParameter + "}");
        if (part.tail.length > 0) {
            url = urlJoin(url, part.tail);
        }
    }
    return url.startsWith("/") ? url : `/${url}`;
}
