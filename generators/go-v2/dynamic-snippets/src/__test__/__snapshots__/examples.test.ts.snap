// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`examples (errors) > invalid request body 1`] = `
[
  {
    "message": "Expected string but got number",
    "path": [
      "requestBody",
      "title",
    ],
    "severity": "CRITICAL",
  },
]
`;

exports[`examples > 'GET /metadata (allow-multiple)' 1`] = `
"package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<YOUR_API_KEY>",
		),
	)
	client.Service.GetMetadata(
		context.TODO(),
		&acme.GetMetadataRequest{
			Shallow: acme.Bool(
				false,
			),
			Tag: []*string{
				acme.String(
					"development",
				),
				acme.String(
					"public",
				),
			},
			XAPIVersion: "0.0.1",
		},
	)
}
"
`;

exports[`examples > 'GET /metadata (simple)' 1`] = `
"package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<YOUR_API_KEY>",
		),
	)
	client.Service.GetMetadata(
		context.TODO(),
		&acme.GetMetadataRequest{
			Shallow: acme.Bool(
				false,
			),
			Tag: []*string{
				acme.String(
					"development",
				),
			},
			XAPIVersion: "0.0.1",
		},
	)
}
"
`;

exports[`examples > 'POST /big-entity (simple)' 1`] = `
"package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<YOUR_API_KEY>",
		),
	)
	client.Service.CreateBigEntity(
		context.TODO(),
		&acme.BigEntity{
			CastMember: &acme.CastMember{
				Actor: &acme.Actor{
					ID:   "john.doe",
					Name: "John Doe",
				},
			},
		},
	)
}
"
`;

exports[`examples > 'POST /movie (simple)' 1`] = `
"package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<YOUR_API_KEY>",
		),
	)
	client.Service.CreateMovie(
		context.TODO(),
		&acme.Movie{
			ID: "movie-c06a4ad7",
			Prequel: acme.String(
				"movie-cv9b914f",
			),
			Title:  "The Boy and the Heron",
			From:   "Hayao Miyazaki",
			Rating: 8,
			Tag:    "development",
			Metadata: map[string]interface{}{
				"actors": []interface{}{
					"Christian Bale",
					"Florence Pugh",
					"Willem Dafoe",
				},
				"releaseDate": "2023-12-08",
				"ratings": map[string]interface{}{
					"rottenTomatoes": 97,
					"imdb":           7.6,
				},
			},
			Revenue: 1000000,
		},
	)
}
"
`;
