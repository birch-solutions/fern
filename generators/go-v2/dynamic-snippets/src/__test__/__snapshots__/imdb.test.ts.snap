// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`imdb (errors) > invalid path parameter 1`] = `
[
  {
    "message": ""invalid" is not a recognized parameter for this endpoint",
    "path": [
      "pathParameters",
      "invalid",
    ],
    "severity": "CRITICAL",
  },
]
`;

exports[`imdb (errors) > invalid request body 1`] = `
[
  {
    "message": ""invalid" is not a recognized parameter for this endpoint",
    "path": [
      "requestBody",
      "invalid",
    ],
    "severity": "CRITICAL",
  },
]
`;

exports[`imdb (errors) > invalid request body property type 1`] = `
[
  {
    "message": "Expected string but got number",
    "path": [
      "requestBody",
      "title",
    ],
    "severity": "CRITICAL",
  },
  {
    "message": "Expected number but got string",
    "path": [
      "requestBody",
      "rating",
    ],
    "severity": "CRITICAL",
  },
]
`;

exports[`imdb (success) > 'GET /movies/{movieId} (simple)' 1`] = `
"package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<YOUR_API_KEY>",
		),
	)
	client.Imdb.GetMovie(
		context.TODO(),
		"movie_xyz",
	)
}
"
`;

exports[`imdb (success) > 'POST /movies/create-movie (simple)' 1`] = `
"package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<YOUR_API_KEY>",
		),
	)
	client.Imdb.CreateMovie(
		context.TODO(),
		&acme.CreateMovieRequest{
			Title:  "The Matrix",
			Rating: 8.2,
		},
	)
}
"
`;

exports[`imdb (sync) > GET /movies/{movieId} 1`] = `
"package example

import (
    client "github.com/acme/acme-go/client"
    option "github.com/acme/acme-go/option"
    context "context"
)

func do() () {
    client := client.NewClient(
        option.WithToken(
            "<YOUR_API_KEY>",
        ),
    )
    client.Imdb.GetMovie(
        context.TODO(),
        "movie_xyz",
    )
}
"
`;

exports[`imdb (sync) > GET /movies/{movieId} w/ exportedClientName 1`] = `
"package example

import (
    client "github.com/acme/acme-go/client"
    option "github.com/acme/acme-go/option"
    context "context"
)

func do() () {
    client := client.NewFernClient(
        option.WithToken(
            "<YOUR_API_KEY>",
        ),
    )
    client.Imdb.GetMovie(
        context.TODO(),
        "movie_xyz",
    )
}
"
`;
