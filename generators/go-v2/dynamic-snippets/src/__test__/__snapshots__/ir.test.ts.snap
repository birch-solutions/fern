// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`test definitions > alias 1`] = `
"package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Get(
		context.TODO(),
		"typeId",
	)
}
"
`;

exports[`test definitions > alias-extends 1`] = `
"package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.ExtendedInlineRequestBody(
		context.TODO(),
		&acme.InlinedChildRequest{
			Child: "child",
		},
	)
}
"
`;

exports[`test definitions > any-auth 1`] = `
"package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.GetToken(
		context.TODO(),
		&acme.GetTokenRequest{
			ClientID:     "client_id",
			ClientSecret: "client_secret",
			Scope: acme.String(
				"scope",
			),
		},
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Get(
		context.TODO(),
	)
}
"
`;

exports[`test definitions > api-wide-base-path 1`] = `
"package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Post(
		context.TODO(),
		"pathParam",
		"serviceParam",
		"resourceParam",
		1,
	)
}
"
`;

exports[`test definitions > audiences 1`] = `
"package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.FolderA.GetDirectThread(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.FolderD.GetDirectThread(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Find(
		context.TODO(),
		&acme.FindRequest{
			OptionalString: acme.String(
				"optionalString",
			),
			PublicProperty: acme.String(
				"publicProperty",
			),
			PrivateProperty: acme.Int(
				1,
			),
		},
	)
}
"
`;

exports[`test definitions > auth-environment-variables 1`] = `
"package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithAPIKey(
			"<value>",
		),
	)
	client.GetWithAPIKey(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithAPIKey(
			"<value>",
		),
	)
	client.GetWithHeader(
		context.TODO(),
		&acme.HeaderAuthRequest{
			XEndpointHeader: "X-Endpoint-Header",
		},
	)
}
"
`;

exports[`test definitions > basic-auth 1`] = `
"package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithBasicAuth(
			"<username>",
			"<password>",
		),
	)
	client.GetWithBasicAuth(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithBasicAuth(
			"<username>",
			"<password>",
		),
	)
	client.PostWithBasicAuth(
		context.TODO(),
		map[string]interface{}{
			"key": "value",
		},
	)
}
"
`;

exports[`test definitions > basic-auth-environment-variables 1`] = `
"package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithBasicAuth(
			"<username>",
			"<password>",
		),
	)
	client.GetWithBasicAuth(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithBasicAuth(
			"<username>",
			"<password>",
		),
	)
	client.PostWithBasicAuth(
		context.TODO(),
		map[string]interface{}{
			"key": "value",
		},
	)
}
"
`;

exports[`test definitions > bearer-token-environment-variable 1`] = `
"package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithAPIKey(
			"<token>",
		),
	)
	client.GetWithBearerToken(
		context.TODO(),
	)
}
"
`;

exports[`test definitions > bytes 1`] = `"<none>"`;

exports[`test definitions > circular-references 1`] = `"<none>"`;

exports[`test definitions > circular-references-advanced 1`] = `"<none>"`;

exports[`test definitions > cross-package-type-names 1`] = `
"package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.FolderA.GetDirectThread(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.FolderA.GetDirectThread(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Find(
		context.TODO(),
		&acme.FindRequest{
			OptionalString: acme.String(
				"optionalString",
			),
			PublicProperty: acme.String(
				"publicProperty",
			),
			PrivateProperty: acme.Int(
				1,
			),
		},
	)
}
"
`;

exports[`test definitions > csharp-namespace-conflict 1`] = `
"package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Hello(
		context.TODO(),
	)
}
"
`;

exports[`test definitions > custom-auth 1`] = `
"package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithCustomAuthScheme(
			"<value>",
		),
	)
	client.GetWithCustomAuth(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithCustomAuthScheme(
			"<value>",
		),
	)
	client.PostWithCustomAuth(
		context.TODO(),
		map[string]interface{}{
			"key": "value",
		},
	)
}
"
`;

exports[`test definitions > enum 1`] = `
"package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Send(
		context.TODO(),
		&acme.SendEnumInlinedRequest{
			Operand: acme.OperandGreaterThan,
			OperandOrColor: &acme.ColorOrOperand{
				Color: acme.ColorRed,
			},
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Send(
		context.TODO(),
		&acme.SendEnumInlinedRequest{
			Operand:      acme.OperandGreaterThan,
			MaybeOperand: acme.OperandGreaterThan.Ptr(),
			OperandOrColor: &acme.ColorOrOperand{
				Color: acme.ColorRed,
			},
			MaybeOperandOrColor: &acme.ColorOrOperand{
				Color: acme.ColorRed,
			},
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Send(
		context.TODO(),
		acme.OperandGreaterThan,
		acme.OperandLessThan.Ptr(),
		&acme.ColorOrOperand{
			Color: acme.ColorRed,
		},
		&acme.ColorOrOperand{
			Color: acme.ColorRed,
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Send(
		context.TODO(),
		acme.OperandGreaterThan,
		acme.OperandGreaterThan.Ptr(),
		&acme.ColorOrOperand{
			Color: acme.ColorRed,
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Send(
		context.TODO(),
		&acme.SendEnumAsQueryParamRequest{
			Operand: acme.OperandGreaterThan,
			OperandOrColor: &acme.ColorOrOperand{
				Color: acme.ColorRed,
			},
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Send(
		context.TODO(),
		&acme.SendEnumAsQueryParamRequest{
			Operand:      acme.OperandGreaterThan,
			MaybeOperand: acme.OperandGreaterThan.Ptr(),
			OperandOrColor: &acme.ColorOrOperand{
				Color: acme.ColorRed,
			},
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.SendList(
		context.TODO(),
		&acme.SendEnumListAsQueryParamRequest{
			Operand: []acme.Operand{
				acme.OperandGreaterThan,
			},
			MaybeOperand: []*acme.Operand{
				acme.OperandGreaterThan.Ptr(),
			},
			OperandOrColor: []*acme.ColorOrOperand{
				&acme.ColorOrOperand{
					Color: acme.ColorRed,
				},
			},
			MaybeOperandOrColor: []*acme.ColorOrOperand{},
		},
	)
}
"
`;

exports[`test definitions > error-property 1`] = `
"package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.ThrowError(
		context.TODO(),
	)
}
"
`;

exports[`test definitions > examples 1`] = `
"package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Echo(
		context.TODO(),
		"Hello world!\\n\\nwith\\n\\tnewlines",
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Echo(
		context.TODO(),
		"string",
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Echo(
		context.TODO(),
		"primitive",
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.File.Notification.GetException(
		context.TODO(),
		"notification-hsy129x",
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.File.Notification.GetException(
		context.TODO(),
		"notificationId",
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
	file "github.com/acme/acme-go/file"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.File.GetFile(
		context.TODO(),
		"file.txt",
		&file.GetFileRequest{
			XFileAPIVersion: "0.0.2",
		},
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
	file "github.com/acme/acme-go/file"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.File.GetFile(
		context.TODO(),
		"filename",
		&file.GetFileRequest{
			XFileAPIVersion: "X-File-API-Version",
		},
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Health.Check(
		context.TODO(),
		"id-2sdx82h",
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Health.Check(
		context.TODO(),
		"id-3tey93i",
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Health.Check(
		context.TODO(),
		"id",
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Health.Ping(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Health.Ping(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.GetMovie(
		context.TODO(),
		"movie-c06a4ad7",
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.GetMovie(
		context.TODO(),
		"movieId",
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.CreateMovie(
		context.TODO(),
		&acme.Movie{
			ID: "movie-c06a4ad7",
			Prequel: acme.String(
				"movie-cv9b914f",
			),
			Title:  "The Boy and the Heron",
			From:   "Hayao Miyazaki",
			Rating: 8,
			Tag:    "tag-wf9as23d",
			Metadata: map[string]interface{}{
				"actors": []interface{}{
					"Christian Bale",
					"Florence Pugh",
					"Willem Dafoe",
				},
				"releaseDate": "2023-12-08",
				"ratings": map[string]interface{}{
					"rottenTomatoes": 97,
					"imdb":           7.6,
				},
			},
			Revenue: 1000000,
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.CreateMovie(
		context.TODO(),
		&acme.Movie{
			ID: "id",
			Prequel: acme.String(
				"prequel",
			),
			Title:  "title",
			From:   "from",
			Rating: 1.1,
			Tag:    "tag",
			Book: acme.String(
				"book",
			),
			Metadata: map[string]interface{}{
				"metadata": map[string]interface{}{
					"key": "value",
				},
			},
			Revenue: 1000000,
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.GetMetadata(
		context.TODO(),
		&acme.GetMetadataRequest{
			Shallow: acme.Bool(
				false,
			),
			Tag: []*string{
				acme.String(
					"development",
				),
			},
			XAPIVersion: "0.0.1",
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.GetMetadata(
		context.TODO(),
		&acme.GetMetadataRequest{
			Shallow: acme.Bool(
				true,
			),
			Tag: []*string{
				acme.String(
					"tag",
				),
			},
			XAPIVersion: "X-API-Version",
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
	commons "github.com/acme/acme-go/commons"
	option "github.com/acme/acme-go/option"
	uuid "github.com/google/uuid"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.CreateBigEntity(
		context.TODO(),
		&acme.BigEntity{
			CastMember: &acme.CastMember{
				Actor: &acme.Actor{
					Name: "name",
					ID:   "id",
				},
			},
			ExtendedMovie: &acme.ExtendedMovie{
				Cast: []string{
					"cast",
					"cast",
				},
			},
			Entity: &acme.Entity{
				Type: &acme.Type{
					BasicType: acme.BasicTypePrimitive,
				},
				Name: "name",
			},
			Metadata: &acme.Metadata{},
			CommonMetadata: &commons.Metadata{
				ID: "id",
				Data: map[string]string{
					"data": "data",
				},
				JSONString: acme.String(
					"jsonString",
				),
			},
			EventInfo: &commons.EventInfo{
				Metadata: &commons.Metadata{
					ID: "id",
					Data: map[string]string{
						"data": "data",
					},
					JSONString: acme.String(
						"jsonString",
					),
				},
			},
			Data: &commons.Data{},
			Migration: &acme.Migration{
				Name:   "name",
				Status: acme.MigrationStatusRunning,
			},
			Exception: &acme.Exception{
				Generic: &acme.ExceptionInfo{
					ExceptionType:       "exceptionType",
					ExceptionMessage:    "exceptionMessage",
					ExceptionStacktrace: "exceptionStacktrace",
				},
			},
			Test: &acme.Test{},
			Node: &acme.Node{
				Name: "name",
				Nodes: []*acme.Node{
					&acme.Node{
						Name: "name",
						Nodes: []*acme.Node{
							&acme.Node{
								Name:  "name",
								Nodes: []*acme.Node{},
								Trees: []*acme.Tree{},
							},
							&acme.Node{
								Name:  "name",
								Nodes: []*acme.Node{},
								Trees: []*acme.Tree{},
							},
						},
						Trees: []*acme.Tree{
							&acme.Tree{
								Nodes: []*acme.Node{},
							},
							&acme.Tree{
								Nodes: []*acme.Node{},
							},
						},
					},
					&acme.Node{
						Name: "name",
						Nodes: []*acme.Node{
							&acme.Node{
								Name:  "name",
								Nodes: []*acme.Node{},
								Trees: []*acme.Tree{},
							},
							&acme.Node{
								Name:  "name",
								Nodes: []*acme.Node{},
								Trees: []*acme.Tree{},
							},
						},
						Trees: []*acme.Tree{
							&acme.Tree{
								Nodes: []*acme.Node{},
							},
							&acme.Tree{
								Nodes: []*acme.Node{},
							},
						},
					},
				},
				Trees: []*acme.Tree{
					&acme.Tree{
						Nodes: []*acme.Node{
							&acme.Node{
								Name:  "name",
								Nodes: []*acme.Node{},
								Trees: []*acme.Tree{},
							},
							&acme.Node{
								Name:  "name",
								Nodes: []*acme.Node{},
								Trees: []*acme.Tree{},
							},
						},
					},
					&acme.Tree{
						Nodes: []*acme.Node{
							&acme.Node{
								Name:  "name",
								Nodes: []*acme.Node{},
								Trees: []*acme.Tree{},
							},
							&acme.Node{
								Name:  "name",
								Nodes: []*acme.Node{},
								Trees: []*acme.Tree{},
							},
						},
					},
				},
			},
			Directory: &acme.Directory{
				Name: "name",
				Files: []*acme.File{
					&acme.File{
						Name:     "name",
						Contents: "contents",
					},
					&acme.File{
						Name:     "name",
						Contents: "contents",
					},
				},
				Directories: []*acme.Directory{
					&acme.Directory{
						Name: "name",
						Files: []*acme.File{
							&acme.File{
								Name:     "name",
								Contents: "contents",
							},
							&acme.File{
								Name:     "name",
								Contents: "contents",
							},
						},
						Directories: []*acme.Directory{
							&acme.Directory{
								Name:        "name",
								Files:       []*acme.File{},
								Directories: []*acme.Directory{},
							},
							&acme.Directory{
								Name:        "name",
								Files:       []*acme.File{},
								Directories: []*acme.Directory{},
							},
						},
					},
					&acme.Directory{
						Name: "name",
						Files: []*acme.File{
							&acme.File{
								Name:     "name",
								Contents: "contents",
							},
							&acme.File{
								Name:     "name",
								Contents: "contents",
							},
						},
						Directories: []*acme.Directory{
							&acme.Directory{
								Name:        "name",
								Files:       []*acme.File{},
								Directories: []*acme.Directory{},
							},
							&acme.Directory{
								Name:        "name",
								Files:       []*acme.File{},
								Directories: []*acme.Directory{},
							},
						},
					},
				},
			},
			Moment: &acme.Moment{
				ID: uuid.MustParse(
					"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
				),
				Date: acme.MustParseDateTime(
					"2023-01-15",
				),
				Datetime: acme.MustParseDateTime(
					"2024-01-15T09:30:00Z",
				),
			},
		},
	)
}
"
`;

exports[`test definitions > extends 1`] = `
"package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.ExtendedInlineRequestBody(
		context.TODO(),
		&acme.Inlined{
			Unique: "unique",
		},
	)
}
"
`;

exports[`test definitions > extra-properties 1`] = `
"package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.CreateUser(
		context.TODO(),
		&acme.CreateUserRequest{
			Name: "name",
		},
	)
}
"
`;

exports[`test definitions > file-download 1`] = `"<none>"`;

exports[`test definitions > file-upload 1`] = `"<none>"`;

exports[`test definitions > folders 1`] = `
"package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Foo(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Foo(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Foo(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Foo(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Folder.Endpoint(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Folder.UnknownRequest(
		context.TODO(),
		map[string]interface{}{
			"key": "value",
		},
	)
}
"
`;

exports[`test definitions > go-content-type 1`] = `
"package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.CreateMovie(
		context.TODO(),
		&acme.CreateMovieRequest{
			Title:  "title",
			Rating: 1.1,
		},
	)
}
"
`;

exports[`test definitions > grpc-proto 1`] = `
"package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Create(
		context.TODO(),
		&acme.CreateRequest{},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Create(
		context.TODO(),
		&acme.CreateRequest{
			Username: acme.String(
				"username",
			),
			Email: acme.String(
				"email",
			),
			Age: acme.Int(
				1,
			),
			Weight: acme.Float64(
				1.1,
			),
			Metadata: &acme.Metadata{
				StringMetadataValueMap: map[string]*acme.MetadataValue{
					"metadata": &acme.MetadataValue{
						Double: 1.1,
					},
				},
			},
		},
	)
}
"
`;

exports[`test definitions > grpc-proto-exhaustive 1`] = `
"package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Upload(
		context.TODO(),
		&acme.UploadRequest{
			Columns: []*acme.Column{
				&acme.Column{
					ID: "id",
					Values: []float64{
						1.1,
					},
				},
			},
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Upload(
		context.TODO(),
		&acme.UploadRequest{
			Columns: []*acme.Column{
				&acme.Column{
					ID: "id",
					Values: []float64{
						1.1,
						1.1,
					},
					Metadata: &acme.Metadata{
						StringMetadataValueMap: map[string]*acme.MetadataValue{
							"metadata": &acme.MetadataValue{
								Double: 1.1,
							},
						},
					},
					IndexedData: &acme.IndexedData{
						Indices: []int{
							1,
							1,
						},
						Values: []float64{
							1.1,
							1.1,
						},
					},
				},
				&acme.Column{
					ID: "id",
					Values: []float64{
						1.1,
						1.1,
					},
					Metadata: &acme.Metadata{
						StringMetadataValueMap: map[string]*acme.MetadataValue{
							"metadata": &acme.MetadataValue{
								Double: 1.1,
							},
						},
					},
					IndexedData: &acme.IndexedData{
						Indices: []int{
							1,
							1,
						},
						Values: []float64{
							1.1,
							1.1,
						},
					},
				},
			},
			Namespace: acme.String(
				"namespace",
			),
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Delete(
		context.TODO(),
		&acme.DeleteRequest{},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Delete(
		context.TODO(),
		&acme.DeleteRequest{
			IDs: []string{
				"ids",
				"ids",
			},
			DeleteAll: acme.Bool(
				true,
			),
			Namespace: acme.String(
				"namespace",
			),
			Filter: &acme.Metadata{
				StringMetadataValueMap: map[string]*acme.MetadataValue{
					"filter": &acme.MetadataValue{
						Double: 1.1,
					},
				},
			},
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Describe(
		context.TODO(),
		&acme.DescribeRequest{},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Describe(
		context.TODO(),
		&acme.DescribeRequest{
			Filter: &acme.Metadata{
				StringMetadataValueMap: map[string]*acme.MetadataValue{
					"filter": &acme.MetadataValue{
						Double: 1.1,
					},
				},
			},
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Fetch(
		context.TODO(),
		&acme.FetchRequest{},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Fetch(
		context.TODO(),
		&acme.FetchRequest{
			IDs: []*string{
				acme.String(
					"ids",
				),
			},
			Namespace: acme.String(
				"namespace",
			),
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.List(
		context.TODO(),
		&acme.ListRequest{},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.List(
		context.TODO(),
		&acme.ListRequest{
			Prefix: acme.String(
				"prefix",
			),
			Limit: acme.Int(
				1,
			),
			PaginationToken: acme.String(
				"paginationToken",
			),
			Namespace: acme.String(
				"namespace",
			),
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Query(
		context.TODO(),
		&acme.QueryRequest{
			TopK: 1,
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Query(
		context.TODO(),
		&acme.QueryRequest{
			Namespace: acme.String(
				"namespace",
			),
			TopK: 1,
			Filter: &acme.Metadata{
				StringMetadataValueMap: map[string]*acme.MetadataValue{
					"filter": &acme.MetadataValue{
						Double: 1.1,
					},
				},
			},
			IncludeValues: acme.Bool(
				true,
			),
			IncludeMetadata: acme.Bool(
				true,
			),
			Queries: []*acme.QueryColumn{
				&acme.QueryColumn{
					Values: []float64{
						1.1,
						1.1,
					},
					TopK: acme.Int(
						1,
					),
					Namespace: acme.String(
						"namespace",
					),
					Filter: &acme.Metadata{
						StringMetadataValueMap: map[string]*acme.MetadataValue{
							"filter": &acme.MetadataValue{
								Double: 1.1,
							},
						},
					},
					IndexedData: &acme.IndexedData{
						Indices: []int{
							1,
							1,
						},
						Values: []float64{
							1.1,
							1.1,
						},
					},
				},
				&acme.QueryColumn{
					Values: []float64{
						1.1,
						1.1,
					},
					TopK: acme.Int(
						1,
					),
					Namespace: acme.String(
						"namespace",
					),
					Filter: &acme.Metadata{
						StringMetadataValueMap: map[string]*acme.MetadataValue{
							"filter": &acme.MetadataValue{
								Double: 1.1,
							},
						},
					},
					IndexedData: &acme.IndexedData{
						Indices: []int{
							1,
							1,
						},
						Values: []float64{
							1.1,
							1.1,
						},
					},
				},
			},
			Column: []float64{
				1.1,
				1.1,
			},
			ID: acme.String(
				"id",
			),
			IndexedData: &acme.IndexedData{
				Indices: []int{
					1,
					1,
				},
				Values: []float64{
					1.1,
					1.1,
				},
			},
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Update(
		context.TODO(),
		&acme.UpdateRequest{
			ID: "id",
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Update(
		context.TODO(),
		&acme.UpdateRequest{
			ID: "id",
			Values: []float64{
				1.1,
				1.1,
			},
			SetMetadata: &acme.Metadata{
				StringMetadataValueMap: map[string]*acme.MetadataValue{
					"setMetadata": &acme.MetadataValue{
						Double: 1.1,
					},
				},
			},
			Namespace: acme.String(
				"namespace",
			),
			IndexedData: &acme.IndexedData{
				Indices: []int{
					1,
					1,
				},
				Values: []float64{
					1.1,
					1.1,
				},
			},
		},
	)
}
"
`;

exports[`test definitions > idempotency-headers 1`] = `
"package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Create(
		context.TODO(),
		&acme.CreatePaymentRequest{
			Amount:   1,
			Currency: acme.CurrencyUsd,
		},
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Delete(
		context.TODO(),
		"paymentId",
	)
}
"
`;

exports[`test definitions > imdb 1`] = `
"package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.CreateMovie(
		context.TODO(),
		&acme.CreateMovieRequest{
			Title:  "title",
			Rating: 1.1,
		},
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.GetMovie(
		context.TODO(),
		"movieId",
	)
}
"
`;

exports[`test definitions > literal 1`] = `
"package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Send(
		context.TODO(),
		&acme.SendLiteralsInHeadersRequest{
			Query: "What is the weather today",
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Send(
		context.TODO(),
		&acme.SendLiteralsInHeadersRequest{
			Query: "query",
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Send(
		context.TODO(),
		&acme.SendLiteralsInlinedRequest{
			Temperature: acme.Float64(
				10.1,
			),
			ObjectWithLiteral: &acme.ATopLevelLiteral{
				NestedLiteral: &acme.ANestedLiteral{},
			},
			Query: "What is the weather today",
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Send(
		context.TODO(),
		&acme.SendLiteralsInlinedRequest{
			Query: "query",
			Temperature: acme.Float64(
				1.1,
			),
			ObjectWithLiteral: &acme.ATopLevelLiteral{
				NestedLiteral: &acme.ANestedLiteral{},
			},
		},
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Send(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Send(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Send(
		context.TODO(),
		&acme.SendLiteralsInQueryRequest{
			Query: "What is the weather today",
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Send(
		context.TODO(),
		&acme.SendLiteralsInQueryRequest{
			Query: "query",
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Send(
		context.TODO(),
		&acme.SendRequest{
			Query: "What is the weather today",
			ContainerObject: &acme.ContainerObject{
				NestedObjects: []*acme.NestedObjectWithLiterals{
					&acme.NestedObjectWithLiterals{
						StrProp: "strProp",
					},
				},
			},
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Send(
		context.TODO(),
		&acme.SendRequest{
			Query: "query",
			ContainerObject: &acme.ContainerObject{
				NestedObjects: []*acme.NestedObjectWithLiterals{
					&acme.NestedObjectWithLiterals{
						StrProp: "strProp",
					},
					&acme.NestedObjectWithLiterals{
						StrProp: "strProp",
					},
				},
			},
		},
	)
}
"
`;

exports[`test definitions > mixed-case 1`] = `
"package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.GetResource(
		context.TODO(),
		"rsc-xyz",
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.GetResource(
		context.TODO(),
		"ResourceID",
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.ListResources(
		context.TODO(),
		&acme.ListResourcesRequest{
			PageLimit: 10,
			BeforeDate: acme.MustParseDateTime(
				"2023-01-01",
			),
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.ListResources(
		context.TODO(),
		&acme.ListResourcesRequest{
			PageLimit: 1,
			BeforeDate: acme.MustParseDateTime(
				"2023-01-15",
			),
		},
	)
}
"
`;

exports[`test definitions > mixed-file-directory 1`] = `
"package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Create(
		context.TODO(),
		&acme.CreateOrganizationRequest{
			Name: "name",
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.List(
		context.TODO(),
		&acme.ListUsersRequest{
			Limit: acme.Int(
				1,
			),
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
	user "github.com/acme/acme-go/user"
)

func do() {
	client := client.NewClient()
	client.User.ListEvents(
		context.TODO(),
		&user.ListUserEventsRequest{
			Limit: acme.Int(
				1,
			),
		},
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
	events "github.com/acme/acme-go/user/events"
)

func do() {
	client := client.NewClient()
	client.User.Events.GetMetadata(
		context.TODO(),
		&events.GetEventMetadataRequest{
			ID: "id",
		},
	)
}
"
`;

exports[`test definitions > multi-line-docs 1`] = `
"package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.GetUser(
		context.TODO(),
		"userId",
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.CreateUser(
		context.TODO(),
		&acme.CreateUserRequest{
			Name: "name",
			Age: acme.Int(
				1,
			),
		},
	)
}
"
`;

exports[`test definitions > multi-url-environment 1`] = `
"package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.BootInstance(
		context.TODO(),
		&acme.BootInstanceRequest{
			Size: "size",
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.GetPresignedURL(
		context.TODO(),
		&acme.GetPresignedURLRequest{
			S3Key: "s3Key",
		},
	)
}
"
`;

exports[`test definitions > multi-url-environment-no-default 1`] = `
"package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.BootInstance(
		context.TODO(),
		&acme.BootInstanceRequest{
			Size: "size",
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.GetPresignedURL(
		context.TODO(),
		&acme.GetPresignedURLRequest{
			S3Key: "s3Key",
		},
	)
}
"
`;

exports[`test definitions > no-environment 1`] = `
"package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.GetDummy(
		context.TODO(),
	)
}
"
`;

exports[`test definitions > oauth-client-credentials 1`] = `
"package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.GetTokenWithClientCredentials(
		context.TODO(),
		&acme.GetTokenRequest{
			ClientID:     "client_id",
			ClientSecret: "client_secret",
			Scope: acme.String(
				"scope",
			),
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.RefreshToken(
		context.TODO(),
		&acme.RefreshTokenRequest{
			ClientID:     "client_id",
			ClientSecret: "client_secret",
			RefreshToken: "refresh_token",
			Scope: acme.String(
				"scope",
			),
		},
	)
}
"
`;

exports[`test definitions > oauth-client-credentials-default 1`] = `
"package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.GetToken(
		context.TODO(),
		&acme.GetTokenRequest{
			ClientID:     "client_id",
			ClientSecret: "client_secret",
		},
	)
}
"
`;

exports[`test definitions > oauth-client-credentials-environment-variables 1`] = `
"package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.GetTokenWithClientCredentials(
		context.TODO(),
		&acme.GetTokenRequest{
			ClientID:     "client_id",
			ClientSecret: "client_secret",
			Scope: acme.String(
				"scope",
			),
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.RefreshToken(
		context.TODO(),
		&acme.RefreshTokenRequest{
			ClientID:     "client_id",
			ClientSecret: "client_secret",
			RefreshToken: "refresh_token",
			Scope: acme.String(
				"scope",
			),
		},
	)
}
"
`;

exports[`test definitions > oauth-client-credentials-nested-root 1`] = `
"package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	auth "github.com/acme/acme-go/auth"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Auth.GetToken(
		context.TODO(),
		&auth.GetTokenRequest{
			ClientID:     "client_id",
			ClientSecret: "client_secret",
			Scope: acme.String(
				"scope",
			),
		},
	)
}
"
`;

exports[`test definitions > object 1`] = `"<none>"`;

exports[`test definitions > objects-with-imports 1`] = `"<none>"`;

exports[`test definitions > optional 1`] = `
"package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.SendOptionalBody(
		context.TODO(),
		map[string]interface{}{
			"string": map[string]interface{}{
				"key": "value",
			},
		},
	)
}
"
`;

exports[`test definitions > package-yml 1`] = `
"package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Echo(
		context.TODO(),
		"id-ksfd9c1",
		&acme.EchoRequest{
			Name: "Hello world!",
			Size: 20,
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Echo(
		context.TODO(),
		"id",
		&acme.EchoRequest{
			Name: "name",
			Size: 1,
		},
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Nop(
		context.TODO(),
		"id-a2ijs82",
		"id-219xca8",
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Nop(
		context.TODO(),
		"id",
		"nestedId",
	)
}
"
`;

exports[`test definitions > pagination 1`] = `
"package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.ListWithCursorPagination(
		context.TODO(),
		&acme.ListUsersCursorPaginationRequest{
			Page: acme.Int(
				1,
			),
			PerPage: acme.Int(
				1,
			),
			Order: acme.OrderAsc.Ptr(),
			StartingAfter: acme.String(
				"starting_after",
			),
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.ListWithBodyCursorPagination(
		context.TODO(),
		&acme.ListUsersBodyCursorPaginationRequest{
			Pagination: &acme.WithCursor{
				Cursor: acme.String(
					"cursor",
				),
			},
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.ListWithCursorPagination(
		context.TODO(),
		&acme.ListUsersCursorPaginationRequest{
			Page: acme.Int(
				1,
			),
			PerPage: acme.Int(
				1,
			),
			Order: acme.OrderAsc.Ptr(),
			StartingAfter: acme.String(
				"starting_after",
			),
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.ListWithBodyOffsetPagination(
		context.TODO(),
		&acme.ListUsersBodyOffsetPaginationRequest{
			Pagination: &acme.WithPage{
				Page: acme.Int(
					1,
				),
			},
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.ListWithOffsetStepPagination(
		context.TODO(),
		&acme.ListUsersOffsetStepPaginationRequest{
			Page: acme.Int(
				1,
			),
			Limit: acme.Int(
				1,
			),
			Order: acme.OrderAsc.Ptr(),
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.ListWithOffsetStepPagination(
		context.TODO(),
		&acme.ListUsersOffsetStepPaginationRequest{
			Page: acme.Int(
				1,
			),
			Limit: acme.Int(
				1,
			),
			Order: acme.OrderAsc.Ptr(),
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
	uuid "github.com/google/uuid"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.ListWithExtendedResults(
		context.TODO(),
		&acme.ListUsersExtendedRequest{
			Cursor: acme.UUID(
				uuid.MustParse(
					"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
				),
			),
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
	uuid "github.com/google/uuid"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.ListWithExtendedResults(
		context.TODO(),
		&acme.ListUsersExtendedRequest{
			Cursor: acme.UUID(
				uuid.MustParse(
					"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
				),
			),
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.ListWithCursorPagination(
		context.TODO(),
		&acme.ListUsersCursorPaginationRequest{
			StartingAfter: acme.String(
				"starting_after",
			),
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.ListWithGlobalConfig(
		context.TODO(),
		&acme.ListWithGlobalConfigRequest{
			Offset: acme.Int(
				1,
			),
		},
	)
}
"
`;

exports[`test definitions > plain-text 1`] = `"<none>"`;

exports[`test definitions > query-parameters 1`] = `"<none>"`;

exports[`test definitions > reserved-keywords 1`] = `
"package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Test(
		context.TODO(),
		&acme.TestRequest{
			For: "for",
		},
	)
}
"
`;

exports[`test definitions > response-property 1`] = `
"package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.GetMovie(
		context.TODO(),
		"string",
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.GetMovie(
		context.TODO(),
		"string",
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.GetMovie(
		context.TODO(),
		"string",
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.GetMovie(
		context.TODO(),
		"string",
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.GetMovie(
		context.TODO(),
		"string",
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.GetMovie(
		context.TODO(),
		"string",
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.GetMovie(
		context.TODO(),
		"string",
	)
}
"
`;

exports[`test definitions > server-sent-event-examples 1`] = `
"package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Stream(
		context.TODO(),
		&acme.StreamCompletionRequest{
			Query: "foo",
		},
	)
}
"
`;

exports[`test definitions > server-sent-events 1`] = `"<none>"`;

exports[`test definitions > simple-fhir 1`] = `
"package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.GetAccount(
		context.TODO(),
		"account_id",
	)
}
"
`;

exports[`test definitions > single-url-environment-default 1`] = `
"package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.GetDummy(
		context.TODO(),
	)
}
"
`;

exports[`test definitions > single-url-environment-no-default 1`] = `
"package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.GetDummy(
		context.TODO(),
	)
}
"
`;

exports[`test definitions > streaming 1`] = `
"package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Generate(
		context.TODO(),
		&acme.Generateequest{
			NumEvents: 5,
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Generate(
		context.TODO(),
		&acme.Generateequest{
			NumEvents: 1,
		},
	)
}
"
`;

exports[`test definitions > streaming-parameter 1`] = `
"package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Generate(
		context.TODO(),
		&acme.GenerateRequest{
			Stream:    false,
			NumEvents: 5,
		},
	)
}
"
`;

exports[`test definitions > trace 1`] = `
"package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.V2.Test(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
	uuid "github.com/google/uuid"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.UpdateTestSubmissionStatus(
		context.TODO(),
		uuid.MustParse(
			"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
		),
		&acme.TestSubmissionStatus{
			Stopped: "stopped",
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
	uuid "github.com/google/uuid"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.SendTestSubmissionUpdate(
		context.TODO(),
		uuid.MustParse(
			"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
		),
		&acme.TestSubmissionUpdate{
			UpdateTime: acme.MustParseDateTime(
				"2024-01-15T09:30:00Z",
			),
			UpdateInfo: &acme.TestSubmissionUpdateInfo{},
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
	uuid "github.com/google/uuid"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.UpdateWorkspaceSubmissionStatus(
		context.TODO(),
		uuid.MustParse(
			"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
		),
		&acme.WorkspaceSubmissionStatus{
			Stopped: "stopped",
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
	uuid "github.com/google/uuid"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.SendWorkspaceSubmissionUpdate(
		context.TODO(),
		uuid.MustParse(
			"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
		),
		&acme.WorkspaceSubmissionUpdate{
			UpdateTime: acme.MustParseDateTime(
				"2024-01-15T09:30:00Z",
			),
			UpdateInfo: &acme.WorkspaceSubmissionUpdateInfo{},
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
	uuid "github.com/google/uuid"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.StoreTracedTestCase(
		context.TODO(),
		uuid.MustParse(
			"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
		),
		"testCaseId",
		&acme.StoreTracedTestCaseRequest{
			Result: &acme.TestCaseResultWithStdout{
				Result: &acme.TestCaseResult{
					ExpectedResult: &acme.VariableValue{},
					ActualResult: &acme.ActualResult{
						Value: &acme.VariableValue{},
					},
					Passed: true,
				},
				Stdout: "stdout",
			},
			TraceResponses: []*acme.TraceResponse{
				&acme.TraceResponse{
					SubmissionID: uuid.MustParse(
						"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
					),
					LineNumber:  1,
					ReturnValue: &acme.DebugVariableValue{},
					ExpressionLocation: &acme.ExpressionLocation{
						Start:  1,
						Offset: 1,
					},
					Stack: &acme.StackInformation{
						NumStackFrames: 1,
						TopStackFrame: &acme.StackFrame{
							MethodName: "methodName",
							LineNumber: 1,
							Scopes: []*acme.Scope{
								&acme.Scope{
									Variables: map[string]*acme.DebugVariableValue{
										"variables": &acme.DebugVariableValue{},
									},
								},
								&acme.Scope{
									Variables: map[string]*acme.DebugVariableValue{
										"variables": &acme.DebugVariableValue{},
									},
								},
							},
						},
					},
					Stdout: acme.String(
						"stdout",
					),
				},
				&acme.TraceResponse{
					SubmissionID: uuid.MustParse(
						"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
					),
					LineNumber:  1,
					ReturnValue: &acme.DebugVariableValue{},
					ExpressionLocation: &acme.ExpressionLocation{
						Start:  1,
						Offset: 1,
					},
					Stack: &acme.StackInformation{
						NumStackFrames: 1,
						TopStackFrame: &acme.StackFrame{
							MethodName: "methodName",
							LineNumber: 1,
							Scopes: []*acme.Scope{
								&acme.Scope{
									Variables: map[string]*acme.DebugVariableValue{
										"variables": &acme.DebugVariableValue{},
									},
								},
								&acme.Scope{
									Variables: map[string]*acme.DebugVariableValue{
										"variables": &acme.DebugVariableValue{},
									},
								},
							},
						},
					},
					Stdout: acme.String(
						"stdout",
					),
				},
			},
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
	uuid "github.com/google/uuid"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.StoreTracedTestCaseV2(
		context.TODO(),
		uuid.MustParse(
			"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
		),
		"testCaseId",
		[]*acme.TraceResponseV2{
			&acme.TraceResponseV2{
				SubmissionID: uuid.MustParse(
					"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
				),
				LineNumber: 1,
				File: &acme.TracedFile{
					Filename:  "filename",
					Directory: "directory",
				},
				ReturnValue: &acme.DebugVariableValue{},
				ExpressionLocation: &acme.ExpressionLocation{
					Start:  1,
					Offset: 1,
				},
				Stack: &acme.StackInformation{
					NumStackFrames: 1,
					TopStackFrame: &acme.StackFrame{
						MethodName: "methodName",
						LineNumber: 1,
						Scopes: []*acme.Scope{
							&acme.Scope{
								Variables: map[string]*acme.DebugVariableValue{
									"variables": &acme.DebugVariableValue{},
								},
							},
							&acme.Scope{
								Variables: map[string]*acme.DebugVariableValue{
									"variables": &acme.DebugVariableValue{},
								},
							},
						},
					},
				},
				Stdout: acme.String(
					"stdout",
				),
			},
			&acme.TraceResponseV2{
				SubmissionID: uuid.MustParse(
					"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
				),
				LineNumber: 1,
				File: &acme.TracedFile{
					Filename:  "filename",
					Directory: "directory",
				},
				ReturnValue: &acme.DebugVariableValue{},
				ExpressionLocation: &acme.ExpressionLocation{
					Start:  1,
					Offset: 1,
				},
				Stack: &acme.StackInformation{
					NumStackFrames: 1,
					TopStackFrame: &acme.StackFrame{
						MethodName: "methodName",
						LineNumber: 1,
						Scopes: []*acme.Scope{
							&acme.Scope{
								Variables: map[string]*acme.DebugVariableValue{
									"variables": &acme.DebugVariableValue{},
								},
							},
							&acme.Scope{
								Variables: map[string]*acme.DebugVariableValue{
									"variables": &acme.DebugVariableValue{},
								},
							},
						},
					},
				},
				Stdout: acme.String(
					"stdout",
				),
			},
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
	uuid "github.com/google/uuid"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.StoreTracedWorkspace(
		context.TODO(),
		uuid.MustParse(
			"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
		),
		&acme.StoreTracedWorkspaceRequest{
			WorkspaceRunDetails: &acme.WorkspaceRunDetails{
				ExceptionV2: &acme.ExceptionV2{
					Generic: &acme.ExceptionInfo{
						ExceptionType:       "exceptionType",
						ExceptionMessage:    "exceptionMessage",
						ExceptionStacktrace: "exceptionStacktrace",
					},
				},
				Exception: &acme.ExceptionInfo{
					ExceptionType:       "exceptionType",
					ExceptionMessage:    "exceptionMessage",
					ExceptionStacktrace: "exceptionStacktrace",
				},
				Stdout: "stdout",
			},
			TraceResponses: []*acme.TraceResponse{
				&acme.TraceResponse{
					SubmissionID: uuid.MustParse(
						"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
					),
					LineNumber:  1,
					ReturnValue: &acme.DebugVariableValue{},
					ExpressionLocation: &acme.ExpressionLocation{
						Start:  1,
						Offset: 1,
					},
					Stack: &acme.StackInformation{
						NumStackFrames: 1,
						TopStackFrame: &acme.StackFrame{
							MethodName: "methodName",
							LineNumber: 1,
							Scopes: []*acme.Scope{
								&acme.Scope{
									Variables: map[string]*acme.DebugVariableValue{
										"variables": &acme.DebugVariableValue{},
									},
								},
								&acme.Scope{
									Variables: map[string]*acme.DebugVariableValue{
										"variables": &acme.DebugVariableValue{},
									},
								},
							},
						},
					},
					Stdout: acme.String(
						"stdout",
					),
				},
				&acme.TraceResponse{
					SubmissionID: uuid.MustParse(
						"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
					),
					LineNumber:  1,
					ReturnValue: &acme.DebugVariableValue{},
					ExpressionLocation: &acme.ExpressionLocation{
						Start:  1,
						Offset: 1,
					},
					Stack: &acme.StackInformation{
						NumStackFrames: 1,
						TopStackFrame: &acme.StackFrame{
							MethodName: "methodName",
							LineNumber: 1,
							Scopes: []*acme.Scope{
								&acme.Scope{
									Variables: map[string]*acme.DebugVariableValue{
										"variables": &acme.DebugVariableValue{},
									},
								},
								&acme.Scope{
									Variables: map[string]*acme.DebugVariableValue{
										"variables": &acme.DebugVariableValue{},
									},
								},
							},
						},
					},
					Stdout: acme.String(
						"stdout",
					),
				},
			},
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
	uuid "github.com/google/uuid"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.StoreTracedWorkspaceV2(
		context.TODO(),
		uuid.MustParse(
			"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
		),
		[]*acme.TraceResponseV2{
			&acme.TraceResponseV2{
				SubmissionID: uuid.MustParse(
					"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
				),
				LineNumber: 1,
				File: &acme.TracedFile{
					Filename:  "filename",
					Directory: "directory",
				},
				ReturnValue: &acme.DebugVariableValue{},
				ExpressionLocation: &acme.ExpressionLocation{
					Start:  1,
					Offset: 1,
				},
				Stack: &acme.StackInformation{
					NumStackFrames: 1,
					TopStackFrame: &acme.StackFrame{
						MethodName: "methodName",
						LineNumber: 1,
						Scopes: []*acme.Scope{
							&acme.Scope{
								Variables: map[string]*acme.DebugVariableValue{
									"variables": &acme.DebugVariableValue{},
								},
							},
							&acme.Scope{
								Variables: map[string]*acme.DebugVariableValue{
									"variables": &acme.DebugVariableValue{},
								},
							},
						},
					},
				},
				Stdout: acme.String(
					"stdout",
				),
			},
			&acme.TraceResponseV2{
				SubmissionID: uuid.MustParse(
					"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
				),
				LineNumber: 1,
				File: &acme.TracedFile{
					Filename:  "filename",
					Directory: "directory",
				},
				ReturnValue: &acme.DebugVariableValue{},
				ExpressionLocation: &acme.ExpressionLocation{
					Start:  1,
					Offset: 1,
				},
				Stack: &acme.StackInformation{
					NumStackFrames: 1,
					TopStackFrame: &acme.StackFrame{
						MethodName: "methodName",
						LineNumber: 1,
						Scopes: []*acme.Scope{
							&acme.Scope{
								Variables: map[string]*acme.DebugVariableValue{
									"variables": &acme.DebugVariableValue{},
								},
							},
							&acme.Scope{
								Variables: map[string]*acme.DebugVariableValue{
									"variables": &acme.DebugVariableValue{},
								},
							},
						},
					},
				},
				Stdout: acme.String(
					"stdout",
				),
			},
		},
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.GetHomepageProblems(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.SetHomepageProblems(
		context.TODO(),
		[]acme.ProblemID{
			"string",
			"string",
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.GetAttemptedMigrations(
		context.TODO(),
		&acme.GetAttemptedMigrationsRequest{
			AdminKeyHeader: "admin-key-header",
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.CreatePlaylist(
		context.TODO(),
		1,
		&acme.CreatePlaylistRequest{
			Datetime: acme.MustParseDateTime(
				"2024-01-15T09:30:00Z",
			),
			OptionalDatetime: acme.Time(
				acme.MustParseDateTime(
					"2024-01-15T09:30:00Z",
				),
			),
			Body: &acme.PlaylistCreateRequest{
				Name: "name",
				Problems: []acme.ProblemID{
					"problems",
					"problems",
				},
			},
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.GetPlaylists(
		context.TODO(),
		1,
		&acme.GetPlaylistsRequest{
			Limit: acme.Int(
				1,
			),
			OtherField:    "otherField",
			MultiLineDocs: "multiLineDocs",
			OptionalMultipleField: []*string{
				acme.String(
					"optionalMultipleField",
				),
			},
			MultipleField: []string{
				"multipleField",
			},
		},
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.GetPlaylist(
		context.TODO(),
		1,
		"playlistId",
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.UpdatePlaylist(
		context.TODO(),
		1,
		"playlistId",
		&acme.UpdatePlaylistRequest{
			Name: "name",
			Problems: []acme.ProblemID{
				"problems",
				"problems",
			},
		},
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.DeletePlaylist(
		context.TODO(),
		1,
		"playlist_id",
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.CreateProblem(
		context.TODO(),
		&acme.CreateProblemRequest{
			ProblemName: "problemName",
			ProblemDescription: &acme.ProblemDescription{
				Boards: []*acme.ProblemDescriptionBoard{
					&acme.ProblemDescriptionBoard{},
					&acme.ProblemDescriptionBoard{},
				},
			},
			Files: map[acme.Language]*acme.ProblemFiles{
				acme.LanguageJava: &acme.ProblemFiles{
					SolutionFile: &acme.FileInfo{
						Filename: "filename",
						Contents: "contents",
					},
					ReadOnlyFiles: []*acme.FileInfo{
						&acme.FileInfo{
							Filename: "filename",
							Contents: "contents",
						},
						&acme.FileInfo{
							Filename: "filename",
							Contents: "contents",
						},
					},
				},
			},
			InputParams: []*acme.VariableTypeAndName{
				&acme.VariableTypeAndName{
					VariableType: &acme.VariableType{
						IntegerType: "integerType",
					},
					Name: "name",
				},
				&acme.VariableTypeAndName{
					VariableType: &acme.VariableType{
						IntegerType: "integerType",
					},
					Name: "name",
				},
			},
			OutputType: &acme.VariableType{
				IntegerType: "integerType",
			},
			Testcases: []*acme.TestCaseWithExpectedResult{
				&acme.TestCaseWithExpectedResult{
					TestCase: &acme.TestCase{
						ID: "id",
						Params: []*acme.VariableValue{
							&acme.VariableValue{},
							&acme.VariableValue{},
						},
					},
					ExpectedResult: &acme.VariableValue{},
				},
				&acme.TestCaseWithExpectedResult{
					TestCase: &acme.TestCase{
						ID: "id",
						Params: []*acme.VariableValue{
							&acme.VariableValue{},
							&acme.VariableValue{},
						},
					},
					ExpectedResult: &acme.VariableValue{},
				},
			},
			MethodName: "methodName",
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.UpdateProblem(
		context.TODO(),
		"problemId",
		&acme.CreateProblemRequest{
			ProblemName: "problemName",
			ProblemDescription: &acme.ProblemDescription{
				Boards: []*acme.ProblemDescriptionBoard{
					&acme.ProblemDescriptionBoard{},
					&acme.ProblemDescriptionBoard{},
				},
			},
			Files: map[acme.Language]*acme.ProblemFiles{
				acme.LanguageJava: &acme.ProblemFiles{
					SolutionFile: &acme.FileInfo{
						Filename: "filename",
						Contents: "contents",
					},
					ReadOnlyFiles: []*acme.FileInfo{
						&acme.FileInfo{
							Filename: "filename",
							Contents: "contents",
						},
						&acme.FileInfo{
							Filename: "filename",
							Contents: "contents",
						},
					},
				},
			},
			InputParams: []*acme.VariableTypeAndName{
				&acme.VariableTypeAndName{
					VariableType: &acme.VariableType{
						IntegerType: "integerType",
					},
					Name: "name",
				},
				&acme.VariableTypeAndName{
					VariableType: &acme.VariableType{
						IntegerType: "integerType",
					},
					Name: "name",
				},
			},
			OutputType: &acme.VariableType{
				IntegerType: "integerType",
			},
			Testcases: []*acme.TestCaseWithExpectedResult{
				&acme.TestCaseWithExpectedResult{
					TestCase: &acme.TestCase{
						ID: "id",
						Params: []*acme.VariableValue{
							&acme.VariableValue{},
							&acme.VariableValue{},
						},
					},
					ExpectedResult: &acme.VariableValue{},
				},
				&acme.TestCaseWithExpectedResult{
					TestCase: &acme.TestCase{
						ID: "id",
						Params: []*acme.VariableValue{
							&acme.VariableValue{},
							&acme.VariableValue{},
						},
					},
					ExpectedResult: &acme.VariableValue{},
				},
			},
			MethodName: "methodName",
		},
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.DeleteProblem(
		context.TODO(),
		"problemId",
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.GetDefaultStarterFiles(
		context.TODO(),
		&acme.GetDefaultStarterFilesRequest{
			InputParams: []*acme.VariableTypeAndName{
				&acme.VariableTypeAndName{
					VariableType: &acme.VariableType{
						IntegerType: "integerType",
					},
					Name: "name",
				},
				&acme.VariableTypeAndName{
					VariableType: &acme.VariableType{
						IntegerType: "integerType",
					},
					Name: "name",
				},
			},
			OutputType: &acme.VariableType{
				IntegerType: "integerType",
			},
			MethodName: "methodName",
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.CreateExecutionSession(
		context.TODO(),
		acme.LanguageJava,
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.GetExecutionSession(
		context.TODO(),
		"sessionId",
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.StopExecutionSession(
		context.TODO(),
		"sessionId",
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.GetExecutionSessionsState(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.SetNumWarmInstances(
		context.TODO(),
		acme.LanguageJava,
		1,
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.GetNumWarmInstances(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.V2.GetLightweightProblems(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.V2.GetProblems(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.V2.GetLatestProblem(
		context.TODO(),
		"problemId",
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.V2.GetProblemVersion(
		context.TODO(),
		"problemId",
		1,
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.V2.GetLightweightProblems(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.V2.GetProblems(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.V2.GetLatestProblem(
		context.TODO(),
		"problemId",
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.V2.GetProblemVersion(
		context.TODO(),
		"problemId",
		1,
	)
}
"
`;

exports[`test definitions > ts-express-casing 1`] = `
"package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.CreateMovie(
		context.TODO(),
		&acme.CreateMovieRequest{
			ID:          "id",
			MovieTitle:  "movie_title",
			MovieRating: 1.1,
		},
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
	option "github.com/acme/acme-go/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.GetMovie(
		context.TODO(),
		"movie_id",
	)
}
"
`;

exports[`test definitions > undiscriminated-unions 1`] = `
"package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Get(
		context.TODO(),
		&acme.MyUnion{
			String: "string",
		},
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.GetMetadata(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.GetMetadata(
		context.TODO(),
	)
}
"
`;

exports[`test definitions > unions 1`] = `
"package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Get(
		context.TODO(),
		"id",
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Update(
		context.TODO(),
		&acme.Shape{
			Circle: &acme.Circle{
				Radius: 1.1,
			},
		},
	)
}
"
`;

exports[`test definitions > unknown 1`] = `
"package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Post(
		context.TODO(),
		map[string]interface{}{
			"key": "value",
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.PostObject(
		context.TODO(),
		&acme.MyObject{
			Unknown: map[string]interface{}{
				"key": "value",
			},
		},
	)
}
"
`;

exports[`test definitions > validation 1`] = `
"package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Create(
		context.TODO(),
		&acme.CreateRequest{
			Decimal: 1.1,
			Even:    1,
			Name:    "name",
			Shape:   acme.ShapeSquare,
		},
	)
}

------------------------

package example

import (
	context "context"
	acme "github.com/acme/acme-go"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Get(
		context.TODO(),
		&acme.GetRequest{
			Decimal: 1.1,
			Even:    1,
			Name:    "name",
		},
	)
}
"
`;

exports[`test definitions > variables 1`] = `
"package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.Post(
		context.TODO(),
		"endpointParam",
	)
}
"
`;

exports[`test definitions > version 1`] = `
"package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.GetUser(
		context.TODO(),
		"userId",
	)
}
"
`;

exports[`test definitions > version-no-default 1`] = `
"package example

import (
	context "context"
	client "github.com/acme/acme-go/client"
)

func do() {
	client := client.NewClient()
	client.GetUser(
		context.TODO(),
		"userId",
	)
}
"
`;

exports[`test definitions > websocket 1`] = `"<none>"`;
