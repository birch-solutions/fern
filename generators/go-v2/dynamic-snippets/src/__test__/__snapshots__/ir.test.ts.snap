// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`test definitions > alias 1`] = `
"package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Get(
		context.TODO(),
		"typeId",
	)
}
"
`;

exports[`test definitions > alias-extends 1`] = `
"package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.ExtendedInlineRequestBody(
		context.TODO(),
		&sdk.InlinedChildRequest{
			Child: "child",
		},
	)
}
"
`;

exports[`test definitions > any-auth 1`] = `
"package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.GetToken(
		context.TODO(),
		&sdk.GetTokenRequest{
			ClientID:     "client_id",
			ClientSecret: "client_secret",
		},
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Get(
		context.TODO(),
	)
}
"
`;

exports[`test definitions > api-wide-base-path 1`] = `
"package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Post(
		context.TODO(),
		"pathParam",
		"serviceParam",
		"resourceParam",
		1,
	)
}
"
`;

exports[`test definitions > audiences 1`] = `
"package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.FolderA.GetDirectThread(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.FolderD.GetDirectThread(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Find(
		context.TODO(),
		&sdk.FindRequest{},
	)
}
"
`;

exports[`test definitions > auth-environment-variables 1`] = `
"package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithAPIKey(
			"<value>",
		),
	)
	client.GetWithAPIKey(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithAPIKey(
			"<value>",
		),
	)
	client.GetWithHeader(
		context.TODO(),
		&sdk.HeaderAuthRequest{
			XEndpointHeader: "X-Endpoint-Header",
		},
	)
}
"
`;

exports[`test definitions > basic-auth 1`] = `
"package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithBasicAuth(
			"<username>",
			"<password>",
		),
	)
	client.GetWithBasicAuth(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithBasicAuth(
			"<username>",
			"<password>",
		),
	)
	client.PostWithBasicAuth(
		context.TODO(),
		map[string]interface{}{
			"key": "value",
		},
	)
}
"
`;

exports[`test definitions > basic-auth-environment-variables 1`] = `
"package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithBasicAuth(
			"<username>",
			"<password>",
		),
	)
	client.GetWithBasicAuth(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithBasicAuth(
			"<username>",
			"<password>",
		),
	)
	client.PostWithBasicAuth(
		context.TODO(),
		map[string]interface{}{
			"key": "value",
		},
	)
}
"
`;

exports[`test definitions > bearer-token-environment-variable 1`] = `
"package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithAPIKey(
			"<token>",
		),
	)
	client.GetWithBearerToken(
		context.TODO(),
	)
}
"
`;

exports[`test definitions > bytes 1`] = `"<none>"`;

exports[`test definitions > circular-references 1`] = `"<none>"`;

exports[`test definitions > circular-references-advanced 1`] = `"<none>"`;

exports[`test definitions > cross-package-type-names 1`] = `
"package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.FolderA.GetDirectThread(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.FolderA.GetDirectThread(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Find(
		context.TODO(),
		&sdk.FindRequest{},
	)
}
"
`;

exports[`test definitions > csharp-namespace-conflict 1`] = `
"package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Hello(
		context.TODO(),
	)
}
"
`;

exports[`test definitions > custom-auth 1`] = `
"package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithCustomAuthScheme(
			"<value>",
		),
	)
	client.GetWithCustomAuth(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithCustomAuthScheme(
			"<value>",
		),
	)
	client.PostWithCustomAuth(
		context.TODO(),
		map[string]interface{}{
			"key": "value",
		},
	)
}
"
`;

exports[`test definitions > enum 1`] = `
"package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Send(
		context.TODO(),
		&sdk.SendEnumInlinedRequest{
			Operand: sdk.OperandGreaterThan,
			OperandOrColor: &sdk.ColorOrOperand{
				Color: sdk.ColorRed,
			},
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Send(
		context.TODO(),
		&sdk.SendEnumInlinedRequest{
			Operand: sdk.OperandGreaterThan,
			OperandOrColor: &sdk.ColorOrOperand{
				Color: sdk.ColorRed,
			},
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Send(
		context.TODO(),
		sdk.OperandGreaterThan,
		sdk.OperandLessThan.Ptr(),
		&sdk.ColorOrOperand{
			Color: sdk.ColorRed,
		},
		&sdk.ColorOrOperand{
			Color: sdk.ColorRed,
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Send(
		context.TODO(),
		sdk.OperandGreaterThan,
		&sdk.ColorOrOperand{
			Color: sdk.ColorRed,
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Send(
		context.TODO(),
		&sdk.SendEnumAsQueryParamRequest{
			Operand: sdk.OperandGreaterThan,
			OperandOrColor: &sdk.ColorOrOperand{
				Color: sdk.ColorRed,
			},
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Send(
		context.TODO(),
		&sdk.SendEnumAsQueryParamRequest{
			Operand: sdk.OperandGreaterThan,
			OperandOrColor: &sdk.ColorOrOperand{
				Color: sdk.ColorRed,
			},
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.SendList(
		context.TODO(),
		&sdk.SendEnumListAsQueryParamRequest{
			Operand: []sdk.Operand{
				sdk.OperandGreaterThan,
			},
			OperandOrColor: []*sdk.ColorOrOperand{
				&sdk.ColorOrOperand{
					Color: sdk.ColorRed,
				},
			},
		},
	)
}
"
`;

exports[`test definitions > error-property 1`] = `
"package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.ThrowError(
		context.TODO(),
	)
}
"
`;

exports[`test definitions > examples 1`] = `
"package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Echo(
		context.TODO(),
		"Hello world!\\n\\nwith\\n\\tnewlines",
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Echo(
		context.TODO(),
		"string",
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Echo(
		context.TODO(),
		"primitive",
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.File.Notification.GetException(
		context.TODO(),
		"notification-hsy129x",
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.File.Notification.GetException(
		context.TODO(),
		"notificationId",
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	file "sdk/file"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.File.GetFile(
		context.TODO(),
		"file.txt",
		&file.GetFileRequest{
			XFileAPIVersion: "0.0.2",
		},
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	file "sdk/file"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.File.GetFile(
		context.TODO(),
		"filename",
		&file.GetFileRequest{
			XFileAPIVersion: "X-File-API-Version",
		},
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Health.Check(
		context.TODO(),
		"id-2sdx82h",
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Health.Check(
		context.TODO(),
		"id-3tey93i",
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Health.Check(
		context.TODO(),
		"id",
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Health.Ping(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Health.Ping(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.GetMovie(
		context.TODO(),
		"movie-c06a4ad7",
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.GetMovie(
		context.TODO(),
		"movieId",
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.CreateMovie(
		context.TODO(),
		&sdk.Movie{
			ID: "movie-c06a4ad7",
			Prequel: sdk.String(
				"movie-cv9b914f",
			),
			Title:  "The Boy and the Heron",
			From:   "Hayao Miyazaki",
			Rating: 8,
			Tag:    "tag-wf9as23d",
			Metadata: map[string]interface{}{
				"actors": []interface{}{
					"Christian Bale",
					"Florence Pugh",
					"Willem Dafoe",
				},
				"releaseDate": "2023-12-08",
				"ratings": map[string]interface{}{
					"rottenTomatoes": 97,
					"imdb":           7.6,
				},
			},
			Revenue: 1000000,
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.CreateMovie(
		context.TODO(),
		&sdk.Movie{
			ID:     "id",
			Title:  "title",
			From:   "from",
			Rating: 1.1,
			Tag:    "tag",
			Metadata: map[string]interface{}{
				"metadata": map[string]interface{}{
					"key": "value",
				},
			},
			Revenue: 1000000,
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.GetMetadata(
		context.TODO(),
		&sdk.GetMetadataRequest{
			Shallow: sdk.Bool(
				false,
			),
			Tag: []*string{
				sdk.String(
					"development",
				),
			},
			XAPIVersion: "0.0.1",
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.GetMetadata(
		context.TODO(),
		&sdk.GetMetadataRequest{
			XAPIVersion: "X-API-Version",
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.CreateBigEntity(
		context.TODO(),
		&sdk.BigEntity{},
	)
}
"
`;

exports[`test definitions > exhaustive 1`] = `
"package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Endpoints.GetAndReturnListOfPrimitives(
		context.TODO(),
		[]string{
			"string",
			"string",
		},
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
	types "sdk/types"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Endpoints.GetAndReturnListOfObjects(
		context.TODO(),
		[]*types.ObjectWithRequiredField{
			&types.ObjectWithRequiredField{
				String: "string",
			},
			&types.ObjectWithRequiredField{
				String: "string",
			},
		},
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Endpoints.GetAndReturnSetOfPrimitives(
		context.TODO(),
		[]string{
			"string",
		},
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
	types "sdk/types"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Endpoints.GetAndReturnSetOfObjects(
		context.TODO(),
		[]*types.ObjectWithRequiredField{
			&types.ObjectWithRequiredField{
				String: "string",
			},
		},
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Endpoints.GetAndReturnMapPrimToPrim(
		context.TODO(),
		map[string]string{
			"string": "string",
		},
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
	types "sdk/types"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Endpoints.GetAndReturnMapOfPrimToObject(
		context.TODO(),
		map[string]*types.ObjectWithRequiredField{
			"string": &types.ObjectWithRequiredField{
				String: "string",
			},
		},
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Endpoints.GetAndReturnOptional(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
	types "sdk/types"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Endpoints.GetAndReturnEnum(
		context.TODO(),
		types.WeatherReportSunny,
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Endpoints.TestGet(
		context.TODO(),
		"id",
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
	types "sdk/types"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Endpoints.TestPost(
		context.TODO(),
		&types.ObjectWithRequiredField{
			String: "string",
		},
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
	types "sdk/types"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Endpoints.TestPut(
		context.TODO(),
		"id",
		&types.ObjectWithRequiredField{
			String: "string",
		},
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
	types "sdk/types"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Endpoints.TestPatch(
		context.TODO(),
		"id",
		&types.ObjectWithOptionalField{},
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Endpoints.TestDelete(
		context.TODO(),
		"id",
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
	types "sdk/types"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Endpoints.GetAndReturnWithOptionalField(
		context.TODO(),
		&types.ObjectWithOptionalField{},
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
	types "sdk/types"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Endpoints.GetAndReturnWithRequiredField(
		context.TODO(),
		&types.ObjectWithRequiredField{
			String: "string",
		},
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
	types "sdk/types"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Endpoints.GetAndReturnWithMapOfMap(
		context.TODO(),
		&types.ObjectWithMapOfMap{
			Map: map[string]map[string]string{
				"map": map[string]string{
					"map": "map",
				},
			},
		},
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
	types "sdk/types"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Endpoints.GetAndReturnNestedWithOptionalField(
		context.TODO(),
		&types.NestedObjectWithOptionalField{},
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
	types "sdk/types"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Endpoints.GetAndReturnNestedWithRequiredField(
		context.TODO(),
		"string",
		&types.NestedObjectWithRequiredField{
			String:       "string",
			NestedObject: &types.ObjectWithOptionalField{},
		},
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
	types "sdk/types"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Endpoints.GetAndReturnNestedWithRequiredFieldAsList(
		context.TODO(),
		[]*types.NestedObjectWithRequiredField{
			&types.NestedObjectWithRequiredField{
				String:       "string",
				NestedObject: &types.ObjectWithOptionalField{},
			},
			&types.NestedObjectWithRequiredField{
				String:       "string",
				NestedObject: &types.ObjectWithOptionalField{},
			},
		},
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Endpoints.GetWithPath(
		context.TODO(),
		"param",
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	endpoints "sdk/endpoints"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Endpoints.GetWithQuery(
		context.TODO(),
		&endpoints.GetWithQuery{
			Query:  "query",
			Number: 1,
		},
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	endpoints "sdk/endpoints"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Endpoints.GetWithAllowMultipleQuery(
		context.TODO(),
		&endpoints.GetWithMultipleQuery{
			Query: []string{
				"query",
			},
			Numer: []int{
				1,
			},
		},
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	endpoints "sdk/endpoints"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Endpoints.GetWithPathAndQuery(
		context.TODO(),
		"param",
		&endpoints.GetWithPathAndQuery{
			Query: "query",
		},
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Endpoints.ModifyWithPath(
		context.TODO(),
		"param",
		"string",
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Endpoints.GetAndReturnString(
		context.TODO(),
		"string",
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Endpoints.GetAndReturnInt(
		context.TODO(),
		1,
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Endpoints.GetAndReturnLong(
		context.TODO(),
		1000000,
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Endpoints.GetAndReturnDouble(
		context.TODO(),
		1.1,
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Endpoints.GetAndReturnBool(
		context.TODO(),
		true,
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Endpoints.GetAndReturnDatetime(
		context.TODO(),
		sdk.MustParseDateTime(
			"2024-01-15T09:30:00Z",
		),
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Endpoints.GetAndReturnDate(
		context.TODO(),
		sdk.MustParseDateTime(
			"2023-01-15",
		),
	)
}

------------------------

package example

import (
	context "context"
	uuid "github.com/google/uuid"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Endpoints.GetAndReturnUUID(
		context.TODO(),
		uuid.MustParse(
			"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
		),
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Endpoints.GetAndReturnBase64(
		context.TODO(),
		[]byte("SGVsbG8gd29ybGQh"),
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
	types "sdk/types"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Endpoints.GetAndReturnUnion(
		context.TODO(),
		&types.Animal{
			Dog: &types.Dog{
				Name:        "name",
				LikesToWoof: true,
			},
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
	types "sdk/types"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.PostWithObjectBodyandResponse(
		context.TODO(),
		&sdk.PostWithObjectBody{
			String:       "string",
			Integer:      1,
			NestedObject: &types.ObjectWithOptionalField{},
		},
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.PostWithNoAuth(
		context.TODO(),
		map[string]interface{}{
			"key": "value",
		},
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.GetWithNoRequestBody(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.PostWithNoRequestBody(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.GetWithCustomHeader(
		context.TODO(),
		&sdk.ReqWithHeaders{
			XTestServiceHeader:  "X-TEST-SERVICE-HEADER",
			XTestEndpointHeader: "X-TEST-ENDPOINT-HEADER",
			Body:                "string",
		},
	)
}
"
`;

exports[`test definitions > extends 1`] = `
"package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.ExtendedInlineRequestBody(
		context.TODO(),
		&sdk.Inlined{
			Unique: "unique",
		},
	)
}
"
`;

exports[`test definitions > extra-properties 1`] = `
"package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.CreateUser(
		context.TODO(),
		&sdk.CreateUserRequest{
			Name: "name",
		},
	)
}
"
`;

exports[`test definitions > file-download 1`] = `"<none>"`;

exports[`test definitions > file-upload 1`] = `"<none>"`;

exports[`test definitions > folders 1`] = `
"package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Foo(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Foo(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Foo(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Foo(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Folder.Endpoint(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Folder.UnknownRequest(
		context.TODO(),
		map[string]interface{}{
			"key": "value",
		},
	)
}
"
`;

exports[`test definitions > go-content-type 1`] = `
"package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.CreateMovie(
		context.TODO(),
		&sdk.CreateMovieRequest{
			Title:  "title",
			Rating: 1.1,
		},
	)
}
"
`;

exports[`test definitions > grpc-proto 1`] = `
"package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Create(
		context.TODO(),
		&sdk.CreateRequest{},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Create(
		context.TODO(),
		&sdk.CreateRequest{},
	)
}
"
`;

exports[`test definitions > grpc-proto-exhaustive 1`] = `
"package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Upload(
		context.TODO(),
		&sdk.UploadRequest{
			Columns: []*sdk.Column{
				&sdk.Column{
					ID: "id",
					Values: []float64{
						1.1,
					},
				},
			},
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Upload(
		context.TODO(),
		&sdk.UploadRequest{
			Columns: []*sdk.Column{
				&sdk.Column{
					ID: "id",
					Values: []float64{
						1.1,
						1.1,
					},
				},
				&sdk.Column{
					ID: "id",
					Values: []float64{
						1.1,
						1.1,
					},
				},
			},
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Delete(
		context.TODO(),
		&sdk.DeleteRequest{},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Delete(
		context.TODO(),
		&sdk.DeleteRequest{},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Describe(
		context.TODO(),
		&sdk.DescribeRequest{},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Describe(
		context.TODO(),
		&sdk.DescribeRequest{},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Fetch(
		context.TODO(),
		&sdk.FetchRequest{},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Fetch(
		context.TODO(),
		&sdk.FetchRequest{},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.List(
		context.TODO(),
		&sdk.ListRequest{},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.List(
		context.TODO(),
		&sdk.ListRequest{},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Query(
		context.TODO(),
		&sdk.QueryRequest{
			TopK: 1,
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Query(
		context.TODO(),
		&sdk.QueryRequest{
			TopK: 1,
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Update(
		context.TODO(),
		&sdk.UpdateRequest{
			ID: "id",
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Update(
		context.TODO(),
		&sdk.UpdateRequest{
			ID: "id",
		},
	)
}
"
`;

exports[`test definitions > idempotency-headers 1`] = `
"package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Create(
		context.TODO(),
		&sdk.CreatePaymentRequest{
			Amount:   1,
			Currency: sdk.CurrencyUsd,
		},
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Delete(
		context.TODO(),
		"paymentId",
	)
}
"
`;

exports[`test definitions > imdb 1`] = `
"package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.CreateMovie(
		context.TODO(),
		&sdk.CreateMovieRequest{
			Title:  "title",
			Rating: 1.1,
		},
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.GetMovie(
		context.TODO(),
		"movieId",
	)
}
"
`;

exports[`test definitions > literal 1`] = `
"package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Send(
		context.TODO(),
		&sdk.SendLiteralsInHeadersRequest{
			Query: "What is the weather today",
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Send(
		context.TODO(),
		&sdk.SendLiteralsInHeadersRequest{
			Query: "query",
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Send(
		context.TODO(),
		&sdk.SendLiteralsInlinedRequest{
			Temperature: sdk.Float64(
				10.1,
			),
			ObjectWithLiteral: &sdk.ATopLevelLiteral{
				NestedLiteral: &sdk.ANestedLiteral{},
			},
			Query: "What is the weather today",
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Send(
		context.TODO(),
		&sdk.SendLiteralsInlinedRequest{
			Query: "query",
			ObjectWithLiteral: &sdk.ATopLevelLiteral{
				NestedLiteral: &sdk.ANestedLiteral{},
			},
		},
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Send(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Send(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Send(
		context.TODO(),
		&sdk.SendLiteralsInQueryRequest{
			Query: "What is the weather today",
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Send(
		context.TODO(),
		&sdk.SendLiteralsInQueryRequest{
			Query: "query",
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Send(
		context.TODO(),
		&sdk.SendRequest{
			Query: "What is the weather today",
			ContainerObject: &sdk.ContainerObject{
				NestedObjects: []*sdk.NestedObjectWithLiterals{
					&sdk.NestedObjectWithLiterals{
						StrProp: "strProp",
					},
				},
			},
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Send(
		context.TODO(),
		&sdk.SendRequest{
			Query: "query",
			ContainerObject: &sdk.ContainerObject{
				NestedObjects: []*sdk.NestedObjectWithLiterals{
					&sdk.NestedObjectWithLiterals{
						StrProp: "strProp",
					},
					&sdk.NestedObjectWithLiterals{
						StrProp: "strProp",
					},
				},
			},
		},
	)
}
"
`;

exports[`test definitions > mixed-case 1`] = `
"package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.GetResource(
		context.TODO(),
		"rsc-xyz",
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.GetResource(
		context.TODO(),
		"ResourceID",
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.ListResources(
		context.TODO(),
		&sdk.ListResourcesRequest{
			PageLimit: 10,
			BeforeDate: sdk.MustParseDateTime(
				"2023-01-01",
			),
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.ListResources(
		context.TODO(),
		&sdk.ListResourcesRequest{
			PageLimit: 1,
			BeforeDate: sdk.MustParseDateTime(
				"2023-01-15",
			),
		},
	)
}
"
`;

exports[`test definitions > mixed-file-directory 1`] = `
"package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Create(
		context.TODO(),
		&sdk.CreateOrganizationRequest{
			Name: "name",
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.List(
		context.TODO(),
		&sdk.ListUsersRequest{},
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	user "sdk/user"
)

func do() {
	client := client.NewClient()
	client.User.ListEvents(
		context.TODO(),
		&user.ListUserEventsRequest{},
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	events "sdk/user/events"
)

func do() {
	client := client.NewClient()
	client.User.Events.GetMetadata(
		context.TODO(),
		&events.GetEventMetadataRequest{
			ID: "id",
		},
	)
}
"
`;

exports[`test definitions > multi-line-docs 1`] = `
"package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.GetUser(
		context.TODO(),
		"userId",
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.CreateUser(
		context.TODO(),
		&sdk.CreateUserRequest{
			Name: "name",
		},
	)
}
"
`;

exports[`test definitions > multi-url-environment 1`] = `
"package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.BootInstance(
		context.TODO(),
		&sdk.BootInstanceRequest{
			Size: "size",
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.GetPresignedURL(
		context.TODO(),
		&sdk.GetPresignedURLRequest{
			S3Key: "s3Key",
		},
	)
}
"
`;

exports[`test definitions > multi-url-environment-no-default 1`] = `
"package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.BootInstance(
		context.TODO(),
		&sdk.BootInstanceRequest{
			Size: "size",
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.GetPresignedURL(
		context.TODO(),
		&sdk.GetPresignedURLRequest{
			S3Key: "s3Key",
		},
	)
}
"
`;

exports[`test definitions > no-environment 1`] = `
"package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.GetDummy(
		context.TODO(),
	)
}
"
`;

exports[`test definitions > oauth-client-credentials 1`] = `
"package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.GetTokenWithClientCredentials(
		context.TODO(),
		&sdk.GetTokenRequest{
			ClientID:     "client_id",
			ClientSecret: "client_secret",
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.RefreshToken(
		context.TODO(),
		&sdk.RefreshTokenRequest{
			ClientID:     "client_id",
			ClientSecret: "client_secret",
			RefreshToken: "refresh_token",
		},
	)
}
"
`;

exports[`test definitions > oauth-client-credentials-default 1`] = `
"package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.GetToken(
		context.TODO(),
		&sdk.GetTokenRequest{
			ClientID:     "client_id",
			ClientSecret: "client_secret",
		},
	)
}
"
`;

exports[`test definitions > oauth-client-credentials-environment-variables 1`] = `
"package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.GetTokenWithClientCredentials(
		context.TODO(),
		&sdk.GetTokenRequest{
			ClientID:     "client_id",
			ClientSecret: "client_secret",
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.RefreshToken(
		context.TODO(),
		&sdk.RefreshTokenRequest{
			ClientID:     "client_id",
			ClientSecret: "client_secret",
			RefreshToken: "refresh_token",
		},
	)
}
"
`;

exports[`test definitions > oauth-client-credentials-nested-root 1`] = `
"package example

import (
	context "context"
	auth "sdk/auth"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Auth.GetToken(
		context.TODO(),
		&auth.GetTokenRequest{
			ClientID:     "client_id",
			ClientSecret: "client_secret",
		},
	)
}
"
`;

exports[`test definitions > object 1`] = `"<none>"`;

exports[`test definitions > objects-with-imports 1`] = `"<none>"`;

exports[`test definitions > optional 1`] = `
"package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.SendOptionalBody(
		context.TODO(),
	)
}
"
`;

exports[`test definitions > package-yml 1`] = `
"package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Echo(
		context.TODO(),
		"id-ksfd9c1",
		&sdk.EchoRequest{
			Name: "Hello world!",
			Size: 20,
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Echo(
		context.TODO(),
		"id",
		&sdk.EchoRequest{
			Name: "name",
			Size: 1,
		},
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Nop(
		context.TODO(),
		"id-a2ijs82",
		"id-219xca8",
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Nop(
		context.TODO(),
		"id",
		"nestedId",
	)
}
"
`;

exports[`test definitions > pagination 1`] = `
"package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.ListWithCursorPagination(
		context.TODO(),
		&sdk.ListUsersCursorPaginationRequest{},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.ListWithBodyCursorPagination(
		context.TODO(),
		&sdk.ListUsersBodyCursorPaginationRequest{},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.ListWithCursorPagination(
		context.TODO(),
		&sdk.ListUsersCursorPaginationRequest{},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.ListWithBodyCursorPagination(
		context.TODO(),
		&sdk.ListUsersBodyCursorPaginationRequest{},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.ListWithCursorPagination(
		context.TODO(),
		&sdk.ListUsersCursorPaginationRequest{},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.ListWithCursorPagination(
		context.TODO(),
		&sdk.ListUsersCursorPaginationRequest{},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.ListWithCursorPagination(
		context.TODO(),
		&sdk.ListUsersCursorPaginationRequest{},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.ListWithCursorPagination(
		context.TODO(),
		&sdk.ListUsersCursorPaginationRequest{},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.ListWithCursorPagination(
		context.TODO(),
		&sdk.ListUsersCursorPaginationRequest{},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.ListWithCursorPagination(
		context.TODO(),
		&sdk.ListUsersCursorPaginationRequest{},
	)
}
"
`;

exports[`test definitions > plain-text 1`] = `"<none>"`;

exports[`test definitions > query-parameters 1`] = `"<none>"`;

exports[`test definitions > reserved-keywords 1`] = `
"package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Test(
		context.TODO(),
		&sdk.TestRequest{
			For: "for",
		},
	)
}
"
`;

exports[`test definitions > response-property 1`] = `
"package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.GetMovie(
		context.TODO(),
		"string",
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.GetMovie(
		context.TODO(),
		"string",
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.GetMovie(
		context.TODO(),
		"string",
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.GetMovie(
		context.TODO(),
		"string",
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.GetMovie(
		context.TODO(),
		"string",
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.GetMovie(
		context.TODO(),
		"string",
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.GetMovie(
		context.TODO(),
		"string",
	)
}
"
`;

exports[`test definitions > server-sent-event-examples 1`] = `
"package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Stream(
		context.TODO(),
		&sdk.StreamCompletionRequest{
			Query: "foo",
		},
	)
}
"
`;

exports[`test definitions > server-sent-events 1`] = `"<none>"`;

exports[`test definitions > simple-fhir 1`] = `
"package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.GetAccount(
		context.TODO(),
		"account_id",
	)
}
"
`;

exports[`test definitions > single-url-environment-default 1`] = `
"package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.GetDummy(
		context.TODO(),
	)
}
"
`;

exports[`test definitions > single-url-environment-no-default 1`] = `
"package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.GetDummy(
		context.TODO(),
	)
}
"
`;

exports[`test definitions > streaming 1`] = `
"package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Generate(
		context.TODO(),
		&sdk.Generateequest{
			NumEvents: 5,
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Generate(
		context.TODO(),
		&sdk.Generateequest{
			NumEvents: 1,
		},
	)
}
"
`;

exports[`test definitions > streaming-parameter 1`] = `
"package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Generate(
		context.TODO(),
		&sdk.GenerateRequest{
			Stream:    false,
			NumEvents: 5,
		},
	)
}
"
`;

exports[`test definitions > trace 1`] = `
"package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.V2.Test(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	uuid "github.com/google/uuid"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.UpdateTestSubmissionStatus(
		context.TODO(),
		uuid.MustParse(
			"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
		),
		&sdk.TestSubmissionStatus{
			Stopped: "stopped",
		},
	)
}

------------------------

package example

import (
	context "context"
	uuid "github.com/google/uuid"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.SendTestSubmissionUpdate(
		context.TODO(),
		uuid.MustParse(
			"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
		),
		&sdk.TestSubmissionUpdate{
			UpdateTime: sdk.MustParseDateTime(
				"2024-01-15T09:30:00Z",
			),
			UpdateInfo: &sdk.TestSubmissionUpdateInfo{},
		},
	)
}

------------------------

package example

import (
	context "context"
	uuid "github.com/google/uuid"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.UpdateWorkspaceSubmissionStatus(
		context.TODO(),
		uuid.MustParse(
			"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
		),
		&sdk.WorkspaceSubmissionStatus{
			Stopped: "stopped",
		},
	)
}

------------------------

package example

import (
	context "context"
	uuid "github.com/google/uuid"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.SendWorkspaceSubmissionUpdate(
		context.TODO(),
		uuid.MustParse(
			"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
		),
		&sdk.WorkspaceSubmissionUpdate{
			UpdateTime: sdk.MustParseDateTime(
				"2024-01-15T09:30:00Z",
			),
			UpdateInfo: &sdk.WorkspaceSubmissionUpdateInfo{},
		},
	)
}

------------------------

package example

import (
	context "context"
	uuid "github.com/google/uuid"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.StoreTracedTestCase(
		context.TODO(),
		uuid.MustParse(
			"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
		),
		"testCaseId",
		&sdk.StoreTracedTestCaseRequest{
			Result: &sdk.TestCaseResultWithStdout{
				Result: &sdk.TestCaseResult{
					ExpectedResult: &sdk.VariableValue{},
					ActualResult: &sdk.ActualResult{
						Value: &sdk.VariableValue{},
					},
					Passed: true,
				},
				Stdout: "stdout",
			},
			TraceResponses: []*sdk.TraceResponse{
				&sdk.TraceResponse{
					SubmissionID: uuid.MustParse(
						"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
					),
					LineNumber: 1,
					Stack: &sdk.StackInformation{
						NumStackFrames: 1,
					},
				},
				&sdk.TraceResponse{
					SubmissionID: uuid.MustParse(
						"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
					),
					LineNumber: 1,
					Stack: &sdk.StackInformation{
						NumStackFrames: 1,
					},
				},
			},
		},
	)
}

------------------------

package example

import (
	context "context"
	uuid "github.com/google/uuid"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.StoreTracedTestCaseV2(
		context.TODO(),
		uuid.MustParse(
			"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
		),
		"testCaseId",
		[]*sdk.TraceResponseV2{
			&sdk.TraceResponseV2{
				SubmissionID: uuid.MustParse(
					"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
				),
				LineNumber: 1,
				File: &sdk.TracedFile{
					Filename:  "filename",
					Directory: "directory",
				},
				Stack: &sdk.StackInformation{
					NumStackFrames: 1,
				},
			},
			&sdk.TraceResponseV2{
				SubmissionID: uuid.MustParse(
					"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
				),
				LineNumber: 1,
				File: &sdk.TracedFile{
					Filename:  "filename",
					Directory: "directory",
				},
				Stack: &sdk.StackInformation{
					NumStackFrames: 1,
				},
			},
		},
	)
}

------------------------

package example

import (
	context "context"
	uuid "github.com/google/uuid"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.StoreTracedWorkspace(
		context.TODO(),
		uuid.MustParse(
			"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
		),
		&sdk.StoreTracedWorkspaceRequest{
			WorkspaceRunDetails: &sdk.WorkspaceRunDetails{
				Stdout: "stdout",
			},
			TraceResponses: []*sdk.TraceResponse{
				&sdk.TraceResponse{
					SubmissionID: uuid.MustParse(
						"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
					),
					LineNumber: 1,
					Stack: &sdk.StackInformation{
						NumStackFrames: 1,
					},
				},
				&sdk.TraceResponse{
					SubmissionID: uuid.MustParse(
						"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
					),
					LineNumber: 1,
					Stack: &sdk.StackInformation{
						NumStackFrames: 1,
					},
				},
			},
		},
	)
}

------------------------

package example

import (
	context "context"
	uuid "github.com/google/uuid"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.StoreTracedWorkspaceV2(
		context.TODO(),
		uuid.MustParse(
			"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
		),
		[]*sdk.TraceResponseV2{
			&sdk.TraceResponseV2{
				SubmissionID: uuid.MustParse(
					"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
				),
				LineNumber: 1,
				File: &sdk.TracedFile{
					Filename:  "filename",
					Directory: "directory",
				},
				Stack: &sdk.StackInformation{
					NumStackFrames: 1,
				},
			},
			&sdk.TraceResponseV2{
				SubmissionID: uuid.MustParse(
					"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
				),
				LineNumber: 1,
				File: &sdk.TracedFile{
					Filename:  "filename",
					Directory: "directory",
				},
				Stack: &sdk.StackInformation{
					NumStackFrames: 1,
				},
			},
		},
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.GetHomepageProblems(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.SetHomepageProblems(
		context.TODO(),
		[]sdk.ProblemID{
			"string",
			"string",
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.GetAttemptedMigrations(
		context.TODO(),
		&sdk.GetAttemptedMigrationsRequest{
			AdminKeyHeader: "admin-key-header",
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.CreatePlaylist(
		context.TODO(),
		1,
		&sdk.CreatePlaylistRequest{
			Datetime: sdk.MustParseDateTime(
				"2024-01-15T09:30:00Z",
			),
			Body: &sdk.PlaylistCreateRequest{
				Name: "name",
				Problems: []sdk.ProblemID{
					"problems",
					"problems",
				},
			},
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.GetPlaylists(
		context.TODO(),
		1,
		&sdk.GetPlaylistsRequest{
			OtherField:    "otherField",
			MultiLineDocs: "multiLineDocs",
			MultipleField: []string{
				"multipleField",
			},
		},
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.GetPlaylist(
		context.TODO(),
		1,
		"playlistId",
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.UpdatePlaylist(
		context.TODO(),
		1,
		"playlistId",
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.DeletePlaylist(
		context.TODO(),
		1,
		"playlist_id",
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.CreateProblem(
		context.TODO(),
		&sdk.CreateProblemRequest{
			ProblemName: "problemName",
			ProblemDescription: &sdk.ProblemDescription{
				Boards: []*sdk.ProblemDescriptionBoard{
					&sdk.ProblemDescriptionBoard{},
					&sdk.ProblemDescriptionBoard{},
				},
			},
			Files: map[sdk.Language]*sdk.ProblemFiles{
				sdk.LanguageJava: &sdk.ProblemFiles{
					SolutionFile: &sdk.FileInfo{
						Filename: "filename",
						Contents: "contents",
					},
					ReadOnlyFiles: []*sdk.FileInfo{
						&sdk.FileInfo{
							Filename: "filename",
							Contents: "contents",
						},
						&sdk.FileInfo{
							Filename: "filename",
							Contents: "contents",
						},
					},
				},
			},
			InputParams: []*sdk.VariableTypeAndName{
				&sdk.VariableTypeAndName{
					VariableType: &sdk.VariableType{
						IntegerType: "integerType",
					},
					Name: "name",
				},
				&sdk.VariableTypeAndName{
					VariableType: &sdk.VariableType{
						IntegerType: "integerType",
					},
					Name: "name",
				},
			},
			OutputType: &sdk.VariableType{
				IntegerType: "integerType",
			},
			Testcases: []*sdk.TestCaseWithExpectedResult{
				&sdk.TestCaseWithExpectedResult{
					TestCase: &sdk.TestCase{
						ID: "id",
						Params: []*sdk.VariableValue{
							&sdk.VariableValue{},
							&sdk.VariableValue{},
						},
					},
					ExpectedResult: &sdk.VariableValue{},
				},
				&sdk.TestCaseWithExpectedResult{
					TestCase: &sdk.TestCase{
						ID: "id",
						Params: []*sdk.VariableValue{
							&sdk.VariableValue{},
							&sdk.VariableValue{},
						},
					},
					ExpectedResult: &sdk.VariableValue{},
				},
			},
			MethodName: "methodName",
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.UpdateProblem(
		context.TODO(),
		"problemId",
		&sdk.CreateProblemRequest{
			ProblemName: "problemName",
			ProblemDescription: &sdk.ProblemDescription{
				Boards: []*sdk.ProblemDescriptionBoard{
					&sdk.ProblemDescriptionBoard{},
					&sdk.ProblemDescriptionBoard{},
				},
			},
			Files: map[sdk.Language]*sdk.ProblemFiles{
				sdk.LanguageJava: &sdk.ProblemFiles{
					SolutionFile: &sdk.FileInfo{
						Filename: "filename",
						Contents: "contents",
					},
					ReadOnlyFiles: []*sdk.FileInfo{
						&sdk.FileInfo{
							Filename: "filename",
							Contents: "contents",
						},
						&sdk.FileInfo{
							Filename: "filename",
							Contents: "contents",
						},
					},
				},
			},
			InputParams: []*sdk.VariableTypeAndName{
				&sdk.VariableTypeAndName{
					VariableType: &sdk.VariableType{
						IntegerType: "integerType",
					},
					Name: "name",
				},
				&sdk.VariableTypeAndName{
					VariableType: &sdk.VariableType{
						IntegerType: "integerType",
					},
					Name: "name",
				},
			},
			OutputType: &sdk.VariableType{
				IntegerType: "integerType",
			},
			Testcases: []*sdk.TestCaseWithExpectedResult{
				&sdk.TestCaseWithExpectedResult{
					TestCase: &sdk.TestCase{
						ID: "id",
						Params: []*sdk.VariableValue{
							&sdk.VariableValue{},
							&sdk.VariableValue{},
						},
					},
					ExpectedResult: &sdk.VariableValue{},
				},
				&sdk.TestCaseWithExpectedResult{
					TestCase: &sdk.TestCase{
						ID: "id",
						Params: []*sdk.VariableValue{
							&sdk.VariableValue{},
							&sdk.VariableValue{},
						},
					},
					ExpectedResult: &sdk.VariableValue{},
				},
			},
			MethodName: "methodName",
		},
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.DeleteProblem(
		context.TODO(),
		"problemId",
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.GetDefaultStarterFiles(
		context.TODO(),
		&sdk.GetDefaultStarterFilesRequest{
			InputParams: []*sdk.VariableTypeAndName{
				&sdk.VariableTypeAndName{
					VariableType: &sdk.VariableType{
						IntegerType: "integerType",
					},
					Name: "name",
				},
				&sdk.VariableTypeAndName{
					VariableType: &sdk.VariableType{
						IntegerType: "integerType",
					},
					Name: "name",
				},
			},
			OutputType: &sdk.VariableType{
				IntegerType: "integerType",
			},
			MethodName: "methodName",
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.CreateExecutionSession(
		context.TODO(),
		sdk.LanguageJava,
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.GetExecutionSession(
		context.TODO(),
		"sessionId",
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.StopExecutionSession(
		context.TODO(),
		"sessionId",
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.GetExecutionSessionsState(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.SetNumWarmInstances(
		context.TODO(),
		sdk.LanguageJava,
		1,
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.GetNumWarmInstances(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.V2.GetLightweightProblems(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.V2.GetProblems(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.V2.GetLatestProblem(
		context.TODO(),
		"problemId",
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.V2.GetProblemVersion(
		context.TODO(),
		"problemId",
		1,
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.V2.GetLightweightProblems(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.V2.GetProblems(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.V2.GetLatestProblem(
		context.TODO(),
		"problemId",
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.V2.GetProblemVersion(
		context.TODO(),
		"problemId",
		1,
	)
}
"
`;

exports[`test definitions > ts-express-casing 1`] = `
"package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.CreateMovie(
		context.TODO(),
		&sdk.CreateMovieRequest{
			ID:          "id",
			MovieTitle:  "movie_title",
			MovieRating: 1.1,
		},
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.GetMovie(
		context.TODO(),
		"movie_id",
	)
}
"
`;

exports[`test definitions > undiscriminated-unions 1`] = `
"package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Get(
		context.TODO(),
		&sdk.MyUnion{
			String: "string",
		},
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.GetMetadata(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.GetMetadata(
		context.TODO(),
	)
}
"
`;

exports[`test definitions > unions 1`] = `
"package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Get(
		context.TODO(),
		"id",
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Update(
		context.TODO(),
		&sdk.Shape{
			Circle: &sdk.Circle{
				Radius: 1.1,
			},
		},
	)
}
"
`;

exports[`test definitions > unknown 1`] = `
"package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Post(
		context.TODO(),
		map[string]interface{}{
			"key": "value",
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.PostObject(
		context.TODO(),
		&sdk.MyObject{
			Unknown: map[string]interface{}{
				"key": "value",
			},
		},
	)
}
"
`;

exports[`test definitions > validation 1`] = `
"package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Create(
		context.TODO(),
		&sdk.CreateRequest{
			Decimal: 1.1,
			Even:    1,
			Name:    "name",
			Shape:   sdk.ShapeSquare,
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Get(
		context.TODO(),
		&sdk.GetRequest{
			Decimal: 1.1,
			Even:    1,
			Name:    "name",
		},
	)
}
"
`;

exports[`test definitions > variables 1`] = `
"package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Post(
		context.TODO(),
		"endpointParam",
	)
}
"
`;

exports[`test definitions > version 1`] = `
"package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.GetUser(
		context.TODO(),
		"userId",
	)
}
"
`;

exports[`test definitions > version-no-default 1`] = `
"package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.GetUser(
		context.TODO(),
		"userId",
	)
}
"
`;

exports[`test definitions > websocket 1`] = `"<none>"`;
