// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`test definitions > alias 1`] = `
"package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Get(
		context.TODO(),
		"typeId",
	)
}
"
`;

exports[`test definitions > alias-extends 1`] = `
"package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.ExtendedInlineRequestBody(
		context.TODO(),
		&sdk.InlinedChildRequest{
			Child: "child",
		},
	)
}
"
`;

exports[`test definitions > any-auth 1`] = `
"package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.GetToken(
		context.TODO(),
		&sdk.GetTokenRequest{
			ClientID:     "client_id",
			ClientSecret: "client_secret",
		},
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Get(
		context.TODO(),
	)
}
"
`;

exports[`test definitions > api-wide-base-path 1`] = `
"package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Post(
		context.TODO(),
		"pathParam",
		"serviceParam",
		"resourceParam",
		1,
	)
}
"
`;

exports[`test definitions > audiences 1`] = `
"package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.FolderA.GetDirectThread(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.FolderD.GetDirectThread(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Find(
		context.TODO(),
		&sdk.FindRequest{},
	)
}
"
`;

exports[`test definitions > auth-environment-variables 1`] = `
"package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithAPIKey(
			"<value>",
		),
	)
	client.GetWithAPIKey(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithAPIKey(
			"<value>",
		),
	)
	client.GetWithHeader(
		context.TODO(),
		&sdk.HeaderAuthRequest{
			XEndpointHeader: "X-Endpoint-Header",
		},
	)
}
"
`;

exports[`test definitions > basic-auth 1`] = `
"package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithBasicAuth(
			"<username>",
			"<password>",
		),
	)
	client.GetWithBasicAuth(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithBasicAuth(
			"<username>",
			"<password>",
		),
	)
	client.PostWithBasicAuth(
		context.TODO(),
		map[string]interface{}{
			"key": "value",
		},
	)
}
"
`;

exports[`test definitions > basic-auth-environment-variables 1`] = `
"package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithBasicAuth(
			"<username>",
			"<password>",
		),
	)
	client.GetWithBasicAuth(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithBasicAuth(
			"<username>",
			"<password>",
		),
	)
	client.PostWithBasicAuth(
		context.TODO(),
		map[string]interface{}{
			"key": "value",
		},
	)
}
"
`;

exports[`test definitions > bearer-token-environment-variable 1`] = `
"package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithAPIKey(
			"<token>",
		),
	)
	client.GetWithBearerToken(
		context.TODO(),
	)
}
"
`;

exports[`test definitions > bytes 1`] = `"<none>"`;

exports[`test definitions > circular-references 1`] = `"<none>"`;

exports[`test definitions > circular-references-advanced 1`] = `"<none>"`;

exports[`test definitions > cross-package-type-names 1`] = `
"package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.FolderA.GetDirectThread(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.FolderA.GetDirectThread(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Find(
		context.TODO(),
		&sdk.FindRequest{},
	)
}
"
`;

exports[`test definitions > csharp-namespace-conflict 1`] = `
"package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Hello(
		context.TODO(),
	)
}
"
`;

exports[`test definitions > custom-auth 1`] = `
"package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithCustomAuthScheme(
			"<value>",
		),
	)
	client.GetWithCustomAuth(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithCustomAuthScheme(
			"<value>",
		),
	)
	client.PostWithCustomAuth(
		context.TODO(),
		map[string]interface{}{
			"key": "value",
		},
	)
}
"
`;

exports[`test definitions > error-property 1`] = `
"package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.ThrowError(
		context.TODO(),
	)
}
"
`;

exports[`test definitions > extends 1`] = `
"package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.ExtendedInlineRequestBody(
		context.TODO(),
		&sdk.Inlined{
			Unique: "unique",
		},
	)
}
"
`;

exports[`test definitions > extra-properties 1`] = `
"package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.CreateUser(
		context.TODO(),
		&sdk.CreateUserRequest{
			Name: "name",
		},
	)
}
"
`;

exports[`test definitions > file-download 1`] = `"<none>"`;

exports[`test definitions > file-upload 1`] = `"<none>"`;

exports[`test definitions > folders 1`] = `
"package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Foo(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Foo(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Foo(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Foo(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Folder.Endpoint(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Folder.UnknownRequest(
		context.TODO(),
		map[string]interface{}{
			"key": "value",
		},
	)
}
"
`;

exports[`test definitions > go-content-type 1`] = `
"package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.CreateMovie(
		context.TODO(),
		&sdk.CreateMovieRequest{
			Title:  "title",
			Rating: 1.1,
		},
	)
}
"
`;

exports[`test definitions > grpc-proto 1`] = `
"package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Create(
		context.TODO(),
		&sdk.CreateRequest{},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Create(
		context.TODO(),
		&sdk.CreateRequest{},
	)
}
"
`;

exports[`test definitions > grpc-proto-exhaustive 1`] = `
"package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Upload(
		context.TODO(),
		&sdk.UploadRequest{
			Columns: []*sdk.Column{
				&sdk.Column{
					ID: "id",
					Values: []float64{
						1.1,
					},
				},
			},
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Upload(
		context.TODO(),
		&sdk.UploadRequest{
			Columns: []*sdk.Column{
				&sdk.Column{
					ID: "id",
					Values: []float64{
						1.1,
						1.1,
					},
				},
				&sdk.Column{
					ID: "id",
					Values: []float64{
						1.1,
						1.1,
					},
				},
			},
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Delete(
		context.TODO(),
		&sdk.DeleteRequest{},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Delete(
		context.TODO(),
		&sdk.DeleteRequest{},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Describe(
		context.TODO(),
		&sdk.DescribeRequest{},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Describe(
		context.TODO(),
		&sdk.DescribeRequest{},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Fetch(
		context.TODO(),
		&sdk.FetchRequest{},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Fetch(
		context.TODO(),
		&sdk.FetchRequest{},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.List(
		context.TODO(),
		&sdk.ListRequest{},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.List(
		context.TODO(),
		&sdk.ListRequest{},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Query(
		context.TODO(),
		&sdk.QueryRequest{
			TopK: 1,
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Query(
		context.TODO(),
		&sdk.QueryRequest{
			TopK: 1,
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Update(
		context.TODO(),
		&sdk.UpdateRequest{
			ID: "id",
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Update(
		context.TODO(),
		&sdk.UpdateRequest{
			ID: "id",
		},
	)
}
"
`;

exports[`test definitions > idempotency-headers 1`] = `
"package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Create(
		context.TODO(),
		&sdk.CreatePaymentRequest{
			Amount:   1,
			Currency: sdk.CurrencyUsd,
		},
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.Delete(
		context.TODO(),
		"paymentId",
	)
}
"
`;

exports[`test definitions > imdb 1`] = `
"package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.CreateMovie(
		context.TODO(),
		&sdk.CreateMovieRequest{
			Title:  "title",
			Rating: 1.1,
		},
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.GetMovie(
		context.TODO(),
		"movieId",
	)
}
"
`;

exports[`test definitions > literal 1`] = `
"package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Send(
		context.TODO(),
		&sdk.SendLiteralsInHeadersRequest{
			Query: "What is the weather today",
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Send(
		context.TODO(),
		&sdk.SendLiteralsInHeadersRequest{
			Query: "query",
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Send(
		context.TODO(),
		&sdk.SendLiteralsInlinedRequest{
			Temperature: sdk.Float64(
				10.1,
			),
			ObjectWithLiteral: &sdk.ATopLevelLiteral{
				NestedLiteral: &sdk.ANestedLiteral{},
			},
			Query: "What is the weather today",
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Send(
		context.TODO(),
		&sdk.SendLiteralsInlinedRequest{
			Query: "query",
			ObjectWithLiteral: &sdk.ATopLevelLiteral{
				NestedLiteral: &sdk.ANestedLiteral{},
			},
		},
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Send(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Send(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Send(
		context.TODO(),
		&sdk.SendLiteralsInQueryRequest{
			Query: "What is the weather today",
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Send(
		context.TODO(),
		&sdk.SendLiteralsInQueryRequest{
			Query: "query",
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Send(
		context.TODO(),
		&sdk.SendRequest{
			Query: "What is the weather today",
			ContainerObject: &sdk.ContainerObject{
				NestedObjects: []*sdk.NestedObjectWithLiterals{
					&sdk.NestedObjectWithLiterals{
						StrProp: "strProp",
					},
				},
			},
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Send(
		context.TODO(),
		&sdk.SendRequest{
			Query: "query",
			ContainerObject: &sdk.ContainerObject{
				NestedObjects: []*sdk.NestedObjectWithLiterals{
					&sdk.NestedObjectWithLiterals{
						StrProp: "strProp",
					},
					&sdk.NestedObjectWithLiterals{
						StrProp: "strProp",
					},
				},
			},
		},
	)
}
"
`;

exports[`test definitions > mixed-case 1`] = `
"package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.GetResource(
		context.TODO(),
		"rsc-xyz",
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.GetResource(
		context.TODO(),
		"ResourceID",
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.ListResources(
		context.TODO(),
		&sdk.ListResourcesRequest{
			PageLimit: 10,
			BeforeDate: sdk.MustParseDateTime(
				"2023-01-01",
			),
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.ListResources(
		context.TODO(),
		&sdk.ListResourcesRequest{
			PageLimit: 1,
			BeforeDate: sdk.MustParseDateTime(
				"2023-01-15",
			),
		},
	)
}
"
`;

exports[`test definitions > mixed-file-directory 1`] = `
"package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Create(
		context.TODO(),
		&sdk.CreateOrganizationRequest{
			Name: "name",
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.List(
		context.TODO(),
		&sdk.ListUsersRequest{},
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	user "sdk/user"
)

func do() {
	client := client.NewClient()
	client.User.ListEvents(
		context.TODO(),
		&user.ListUserEventsRequest{},
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	events "sdk/user/events"
)

func do() {
	client := client.NewClient()
	client.User.Events.GetMetadata(
		context.TODO(),
		&events.GetEventMetadataRequest{
			ID: "id",
		},
	)
}
"
`;

exports[`test definitions > multi-line-docs 1`] = `
"package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.GetUser(
		context.TODO(),
		"userId",
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.CreateUser(
		context.TODO(),
		&sdk.CreateUserRequest{
			Name: "name",
		},
	)
}
"
`;

exports[`test definitions > multi-url-environment 1`] = `
"package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.BootInstance(
		context.TODO(),
		&sdk.BootInstanceRequest{
			Size: "size",
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.GetPresignedURL(
		context.TODO(),
		&sdk.GetPresignedURLRequest{
			S3Key: "s3Key",
		},
	)
}
"
`;

exports[`test definitions > multi-url-environment-no-default 1`] = `
"package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.BootInstance(
		context.TODO(),
		&sdk.BootInstanceRequest{
			Size: "size",
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.GetPresignedURL(
		context.TODO(),
		&sdk.GetPresignedURLRequest{
			S3Key: "s3Key",
		},
	)
}
"
`;

exports[`test definitions > no-environment 1`] = `
"package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.GetDummy(
		context.TODO(),
	)
}
"
`;

exports[`test definitions > oauth-client-credentials-default 1`] = `
"package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.GetToken(
		context.TODO(),
		&sdk.GetTokenRequest{
			ClientID:     "client_id",
			ClientSecret: "client_secret",
		},
	)
}
"
`;

exports[`test definitions > oauth-client-credentials-nested-root 1`] = `
"package example

import (
	context "context"
	auth "sdk/auth"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Auth.GetToken(
		context.TODO(),
		&auth.GetTokenRequest{
			ClientID:     "client_id",
			ClientSecret: "client_secret",
		},
	)
}
"
`;

exports[`test definitions > object 1`] = `"<none>"`;

exports[`test definitions > objects-with-imports 1`] = `"<none>"`;

exports[`test definitions > optional 1`] = `
"package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.SendOptionalBody(
		context.TODO(),
	)
}
"
`;

exports[`test definitions > package-yml 1`] = `
"package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Echo(
		context.TODO(),
		"id-ksfd9c1",
		&sdk.EchoRequest{
			Name: "Hello world!",
			Size: 20,
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Echo(
		context.TODO(),
		"id",
		&sdk.EchoRequest{
			Name: "name",
			Size: 1,
		},
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Nop(
		context.TODO(),
		"id-a2ijs82",
		"id-219xca8",
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Nop(
		context.TODO(),
		"id",
		"nestedId",
	)
}
"
`;

exports[`test definitions > pagination 1`] = `
"package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.ListWithCursorPagination(
		context.TODO(),
		&sdk.ListUsersCursorPaginationRequest{},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.ListWithBodyCursorPagination(
		context.TODO(),
		&sdk.ListUsersBodyCursorPaginationRequest{},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.ListWithCursorPagination(
		context.TODO(),
		&sdk.ListUsersCursorPaginationRequest{},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.ListWithBodyCursorPagination(
		context.TODO(),
		&sdk.ListUsersBodyCursorPaginationRequest{},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.ListWithCursorPagination(
		context.TODO(),
		&sdk.ListUsersCursorPaginationRequest{},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.ListWithCursorPagination(
		context.TODO(),
		&sdk.ListUsersCursorPaginationRequest{},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.ListWithCursorPagination(
		context.TODO(),
		&sdk.ListUsersCursorPaginationRequest{},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.ListWithCursorPagination(
		context.TODO(),
		&sdk.ListUsersCursorPaginationRequest{},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.ListWithCursorPagination(
		context.TODO(),
		&sdk.ListUsersCursorPaginationRequest{},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.ListWithCursorPagination(
		context.TODO(),
		&sdk.ListUsersCursorPaginationRequest{},
	)
}
"
`;

exports[`test definitions > plain-text 1`] = `"<none>"`;

exports[`test definitions > query-parameters 1`] = `"<none>"`;

exports[`test definitions > reserved-keywords 1`] = `
"package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Test(
		context.TODO(),
		&sdk.TestRequest{
			For: "for",
		},
	)
}
"
`;

exports[`test definitions > response-property 1`] = `
"package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.GetMovie(
		context.TODO(),
		"string",
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.GetMovie(
		context.TODO(),
		"string",
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.GetMovie(
		context.TODO(),
		"string",
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.GetMovie(
		context.TODO(),
		"string",
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.GetMovie(
		context.TODO(),
		"string",
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.GetMovie(
		context.TODO(),
		"string",
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.GetMovie(
		context.TODO(),
		"string",
	)
}
"
`;

exports[`test definitions > server-sent-event-examples 1`] = `
"package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Stream(
		context.TODO(),
		&sdk.StreamCompletionRequest{
			Query: "foo",
		},
	)
}
"
`;

exports[`test definitions > server-sent-events 1`] = `"<none>"`;

exports[`test definitions > simple-fhir 1`] = `
"package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.GetAccount(
		context.TODO(),
		"account_id",
	)
}
"
`;

exports[`test definitions > single-url-environment-default 1`] = `
"package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.GetDummy(
		context.TODO(),
	)
}
"
`;

exports[`test definitions > single-url-environment-no-default 1`] = `
"package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.GetDummy(
		context.TODO(),
	)
}
"
`;

exports[`test definitions > streaming 1`] = `
"package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Generate(
		context.TODO(),
		&sdk.Generateequest{
			NumEvents: 5,
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Generate(
		context.TODO(),
		&sdk.Generateequest{
			NumEvents: 1,
		},
	)
}
"
`;

exports[`test definitions > streaming-parameter 1`] = `
"package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Generate(
		context.TODO(),
		&sdk.GenerateRequest{
			Stream:    false,
			NumEvents: 5,
		},
	)
}
"
`;

exports[`test definitions > ts-express-casing 1`] = `
"package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.CreateMovie(
		context.TODO(),
		&sdk.CreateMovieRequest{
			ID:          "id",
			MovieTitle:  "movie_title",
			MovieRating: 1.1,
		},
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
	option "sdk/option"
)

func do() {
	client := client.NewClient(
		option.WithToken(
			"<token>",
		),
	)
	client.GetMovie(
		context.TODO(),
		"movie_id",
	)
}
"
`;

exports[`test definitions > undiscriminated-unions 1`] = `
"package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Get(
		context.TODO(),
		&sdk.MyUnion{
			String: "string",
		},
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.GetMetadata(
		context.TODO(),
	)
}

------------------------

package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.GetMetadata(
		context.TODO(),
	)
}
"
`;

exports[`test definitions > unions 1`] = `
"package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Get(
		context.TODO(),
		"id",
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Update(
		context.TODO(),
		&sdk.Shape{
			Circle: &sdk.Circle{
				Radius: 1.1,
			},
		},
	)
}
"
`;

exports[`test definitions > unknown 1`] = `
"package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Post(
		context.TODO(),
		map[string]interface{}{
			"key": "value",
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.PostObject(
		context.TODO(),
		&sdk.MyObject{
			Unknown: map[string]interface{}{
				"key": "value",
			},
		},
	)
}
"
`;

exports[`test definitions > validation 1`] = `
"package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Create(
		context.TODO(),
		&sdk.CreateRequest{
			Decimal: 1.1,
			Even:    1,
			Name:    "name",
			Shape:   sdk.ShapeSquare,
		},
	)
}

------------------------

package example

import (
	context "context"
	sdk "sdk"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Get(
		context.TODO(),
		&sdk.GetRequest{
			Decimal: 1.1,
			Even:    1,
			Name:    "name",
		},
	)
}
"
`;

exports[`test definitions > variables 1`] = `
"package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.Post(
		context.TODO(),
		"endpointParam",
	)
}
"
`;

exports[`test definitions > version 1`] = `
"package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.GetUser(
		context.TODO(),
		"userId",
	)
}
"
`;

exports[`test definitions > version-no-default 1`] = `
"package example

import (
	context "context"
	client "sdk/client"
)

func do() {
	client := client.NewClient()
	client.GetUser(
		context.TODO(),
		"userId",
	)
}
"
`;

exports[`test definitions > websocket 1`] = `"<none>"`;
