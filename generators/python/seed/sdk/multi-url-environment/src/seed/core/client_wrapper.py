# This file was auto-generated by Fern from our API Definition.

import typing

import httpx

from ..environment import SeedMultiUrlEnvironmentEnvironment


class BaseClientWrapper:
    def __init__(
        self, *, token: typing.Union[str, typing.Callable[[], str]], environment: SeedMultiUrlEnvironmentEnvironment
    ):
        self._token = token
        self._environment = environment

    def get_headers(self) -> typing.Dict[str, str]:
        headers: typing.Dict[str, str] = {
            "X-Fern-Language": "Python",
            "X-Fern-SDK-Name": "seed",
            "X-Fern-SDK-Version": "0.0.0",
        }
        headers["Authorization"] = f"Bearer {self._get_token()}"
        return headers

    def _get_token(self) -> str:
        if isinstance(self._token, str):
            return self._token
        else:
            return self._token()

    def get_environment(self) -> SeedMultiUrlEnvironmentEnvironment:
        return self._environment


class SyncClientWrapper(BaseClientWrapper):
    def __init__(
        self,
        *,
        token: typing.Union[str, typing.Callable[[], str]],
        environment: SeedMultiUrlEnvironmentEnvironment,
        httpx_client: httpx.Client,
    ):
        super().__init__(token=token, environment=environment)
        self.httpx_client = httpx_client


class AsyncClientWrapper(BaseClientWrapper):
    def __init__(
        self,
        *,
        token: typing.Union[str, typing.Callable[[], str]],
        environment: SeedMultiUrlEnvironmentEnvironment,
        httpx_client: httpx.AsyncClient,
    ):
        super().__init__(token=token, environment=environment)
        self.httpx_client = httpx_client
