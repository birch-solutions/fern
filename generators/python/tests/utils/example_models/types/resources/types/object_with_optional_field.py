# This file was auto-generated by Fern from our API Definition.

from ...core.unchecked_base_model import UncheckedBaseModel
import typing_extensions
import typing
from ...core.serialization import FieldMetadata
import datetime as dt
import uuid
from .color import Color
from .shape import Shape
from .undiscriminated_shape import UndiscriminatedShape
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class ObjectWithOptionalField(UncheckedBaseModel):
    literal: typing_extensions.Annotated[
        typing.Literal["lit_one"], FieldMetadata(alias="literal")
    ] = "lit_one"
    string: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="string")
    ] = None
    integer: typing_extensions.Annotated[
        typing.Optional[int], FieldMetadata(alias="integer")
    ] = None
    long_: typing_extensions.Annotated[
        typing.Optional[int], FieldMetadata(alias="long")
    ] = None
    double: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="double")
    ] = None
    bool_: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="bool")
    ] = None
    datetime: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="datetime")
    ] = None
    date: typing_extensions.Annotated[
        typing.Optional[dt.date], FieldMetadata(alias="date")
    ] = None
    uuid_: typing_extensions.Annotated[
        typing.Optional[uuid.UUID], FieldMetadata(alias="uuid")
    ] = None
    base_64: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="base64")
    ] = None
    list_: typing_extensions.Annotated[
        typing.Optional[typing.List[str]], FieldMetadata(alias="list")
    ] = None
    set_: typing_extensions.Annotated[
        typing.Optional[typing.Set[str]], FieldMetadata(alias="set")
    ] = None
    map_: typing_extensions.Annotated[
        typing.Optional[typing.Dict[int, str]], FieldMetadata(alias="map")
    ] = None
    enum: typing_extensions.Annotated[
        typing.Optional[Color], FieldMetadata(alias="enum")
    ] = None
    union: typing_extensions.Annotated[
        typing.Optional[Shape], FieldMetadata(alias="union")
    ] = None
    second_union: typing_extensions.Annotated[
        typing.Optional[Shape], FieldMetadata(alias="second_union")
    ] = None
    undiscriminated_union: typing_extensions.Annotated[
        typing.Optional[UndiscriminatedShape],
        FieldMetadata(alias="undiscriminated_union"),
    ] = None
    any: typing_extensions.Annotated[
        typing.Optional[typing.Any], FieldMetadata(alias="any")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow"
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow
