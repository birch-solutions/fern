# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ...core.unchecked_base_model import UncheckedBaseModel
import typing_extensions
from ...core.serialization import FieldMetadata
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import typing
import pydantic
from ...core.unchecked_base_model import UnionMetadata


class Base(UncheckedBaseModel):
    id: typing_extensions.Annotated[str, FieldMetadata(alias="id")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow"
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class Shape_Circle(Base):
    type: typing_extensions.Annotated[
        typing.Literal["circle"], FieldMetadata(alias="type")
    ] = "circle"
    radius: typing_extensions.Annotated[float, FieldMetadata(alias="radius")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow"
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class Shape_Square(Base):
    type: typing_extensions.Annotated[
        typing.Literal["square"], FieldMetadata(alias="type")
    ] = "square"
    length: typing_extensions.Annotated[float, FieldMetadata(alias="length")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow"
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


Shape = typing_extensions.Annotated[
    typing.Union[Shape_Circle, Shape_Square], UnionMetadata(discriminant="type")
]
