# For unreleased changes, use unreleased.yml
- version: 4.3.10
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        Pagination correctly uses specified defaults to support custom schemes.

- version: 4.3.9
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        Fix indentation in generated README.md sections to ensure proper formatting and readability.

- version: 4.3.8
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        Include content-type headers when available as part of endpoint request generation.

- version: 4.3.7
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        Update multipart endpoint generation to propertly omit optional body parameters.

- version: 4.3.6
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        Fix README.md and reference.md generation.

- version: 4.3.5
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        Update README.md snippet builder to omit invalid snippets during readme config generation.

- version: 4.3.4
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        Update shared http_client.py to remove omitted entries during file upload requests.

- version: 4.3.3
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        The generator now writes the reference.md configuration correctly, using `.dict()` instead of `.json()`.
        
- version: 4.3.2
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        The generator will now correctly default to the configured global `default_bytes_stream_chunk_size` when the `request_options` parameter is not provided.
        
- version: 4.3.1
  irVersion: 53
  changelogEntry:
    - type: feat
      summary: |
        Requests for file download will now allow users to pass in a `chunk_size` option that allows them to receive chunks of a specific size
        from the resultant `iter_bytes` invocation on the response byte stream.

        Concretely, a user would leverage the following:
        ```python
        client.download(
          ...,
          request_options={
            "chunk_size": 1024    # 1MB
          }
        )
        ```

- version: 4.2.8
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        The snippet writer now correctly handles base64 strings.

- version: 4.2.7
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: | 
        The generated README will now have a section that links to the generated
        SDK Reference (in `reference.md`). 
        
        ```md
        ## Reference

        A full reference for this library can be found [here](./reference.md). 
        ```

- version: 4.2.7-rc4
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: Generated readmes now include the parameter name required for the request options parameter within the example snippets.

- version: 4.2.7-rc3
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        Now, when sending Snippet Templates back to Fern, the generator will not try to coerce a potentially missing ID into the `api_definition_id` field.
        This, had been a cause of the error log `Failed to upload snippet templates to FDR, this is ok: one of the hex, bytes, bytes_le, fields, or int arguments must be given`.

- version: 4.2.7-rc2
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        Pydantic utilities now correctly handles cases where you have a Pydantic model, with a list of pydantic models as a field, where those models have literals.
        Effectively, `deep_union_pydantic_objects` now handles lists of objects and merges them appropriately.

- version: 4.2.7-rc1
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        When leveraging the `include_union_utils` configuration flag, the Pydantic models will no longer include transitive dependencies within
        `update_forward_ref` calls, since these should not be necessary. This effectively scopes back the changes introduced in 4.0.0-rc5, which included
        changes to improve circular reference handling in Pydantic models.

- version: 4.2.7-rc0
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        Dynamic header suppliers, as used within the OAuth provider are now invoked on every request, not just the first.
        This was a regression introduced within an earlier version that is now fixed. As a results of this fix, the `refresh_token` is now correctly refreshed.

- version: 4.2.6
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        Serialization utilities (necessary when pydantic aliases are removed) now respects dictionaries as well.

- version: 4.2.5
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        Parameters of file upload functions now default to OMIT, not None, so that the SDK appropriately
        filters out unset parameters, while still allowing for user specified None values.

- version: 4.2.4
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        Datetime examples are generated correctly once again.
        The `pydantic_utilites` file is python 3.8 compatible.

- version: 4.2.3
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        The content type of file properties is now respected for multipart
        requests. For example, if you have a file property called `image` that has the
        content type `image/jpeg`, then it will be sent as:

        ```python
        "image": core.with_content_type(file=image, content_type="image/jpeg"),
        ````

- version: 4.2.2
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        The content type of non-file properties is now respected for multipart
        requests. For example, if you have a type called `metadata` that has the
        content type `application/json`, then it will be sent as:

        ```python
        "metadata": (None, json.dumps(jsonable_encoder(metadata)), "application/json"),
        ```

- version: 4.2.1
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        When the generator runs bash commands such as `poetry install` and there is a failure,
        now the `stderr` and `stdout` is logged to help improve user debugging.

- version: 4.2.0
  irVersion: 53
  changelogEntry:
    - type: feat
      summary: |
        Allow specifying arbitrary configuration to your packages `pyproject.toml` by adding a `pyproject_toml` block to your configuration
        whatever you include in this block will be added as-is to the `pyproject.toml` file. The config, as an example is:

        ```yaml
        config:
          pyproject_toml: |
            [tool.covcheck.group.unit.coverage]
            branch = 26.0
            line = 62.0

            [tool.covcheck.group.service.coverage]
            branch = 30.0
            line = 67.0
        ```

- version: 4.1.0
  irVersion: 53
  changelogEntry:
    - type: feat
      summary: |
        Allow specifying pip extras within your `pyproject.toml`. The following config:

        ```yaml
        config:
          extra_dev_dependencies:
            covcheck:
              version: "^0.4.3"
              extras: ["toml"]
        ```

        would add the following to your `pyproject.toml`:

        ```toml
        [tool.poetry.dev-dependencies]
        covcheck = { version = "^0.4.3", extras = ["toml"] }
        ```

- version: 4.0.0
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        Generated tests that expect an empty result when they are of type `text` (not JSON) now appropriately expect an empty string instead of `None` for async functions as well.
        Version 3.3.4 fixed this for sync functions only, which was a bug.

- version: 4.0.0-rc9
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: All Pydantic V2 warnings have been resolved
      fixed:
        - json_encoders have been removed from Pydantic V2, and replaced with a `model_serializer` method.
        - additional model construction functions have been added when not leveraging pydantic field aliases to allow users to construct a model from JSOn without the need for dealiasing the object themselves.

- version: 4.0.0-rc8
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        Pydantic models that call `update_forward_refs` on non-union circular reference dependencies now pass in `localns` for
        the current member, a field in Pydantic V1 that provides object contexts to models in the event objects are not fully rebuilt.

- version: 4.0.0-rc7
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        The generator now respects the old use_str_enums flag again, a regression was introduced where only the new flag `enum_type`
        was respected.

- version: 4.0.0-rc6
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        Pydantic models now call update forward refs on non-uion circular references. This
        prevents runtime errors in certain cases where types self reference itself through
        a union.

- version: 4.0.0-rc5
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        Pydantic models now call update forward refs on non-uion circular references. This
        prevents runtime errors in certain cases where types self reference itself through
        a union.

- version: 4.0.0-rc4
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        Pydantic models now call update forward refs on non-uion circular references. This
        prevents runtime errors in certain cases where types self reference itself through
        a union.

- version: 4.0.0-rc3
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        Pydantic models now call update forward refs on non-uion circular references. This
        prevents runtime errors in certain cases where types self reference itself through
        a union.

- version: 4.0.0-rc2
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: Update .dict calls in Pydantic V2 to be back to pre-3.10.4 logic for SDKs that continue using Pydantic aliases.

- version: 4.0.0-rc1
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: Update .dict calls in Pydantic V2 to be back to pre-3.10.4 logic.
      fixed:
        - >-
          Pydantic V2 `.dict` calls are updated to be back to pre-3.10.4 logic.
          This is fix a regression where nested literals were being omitted due to the Pydantic V2 serializers not respecting the recursive .dict logic, as
          Pydantic V2 shells out `model_dump` calls to Rust library and serializers, as opposed to recursively calling `model_dump`.

          It is expected that performance will not be degraded given the Rust-based serializers have optimized performance, compared to the Pydantic V1 .dict approach.

- version: 4.0.0-rc0
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: Rerelease 3.11.0-rc0 as a major version, with a configuration flag to disable the behavior (`use_pydantic_field_aliases`), defaulted to `true` to preserve existing behavior.
      fixed:
        - >-
          Rerelease 3.11.0-rc0 as a major version, with a configuration flag to
          disable the behavior (`use_pydantic_field_aliases`), defaulted to `false`
          to introduce the break on a major version.

          To maintain parity with pre-3.11.0 behavior, update the flag to `true`:

            ```yaml
            - name: fernapi/fern-python-sdk
              version: 4.0.0-rc0
              config:
                pydantic_config:
                  use_pydantic_field_aliases: true
            ```
    - type: internal
      summary: The generator now shares "as is" files with Pydantic and FastAPI generators.

- version: 3.11.0-rc0
  irVersion: 53
  changelogEntry:
    - type: chore
      summary: Remove Pydantic field aliases and leverage an internal representation.
      fixed:
        - >-
          Pydantic field aliases are removed and replaced with an internal
          representation. This allows for more robust handling of field aliases
          and prevents issues with Pydantic V2 and mypy.

          Previously, you'd have for V1 and V2 compatibility in Pydantic, you'd want to conditionally apply the config class within
          the base model, however this would lead to mypy errors when filling out a model with it's field alias. To solve this, We
          used the deprecated `class Config`, regardless of the Pydantic version to satisfy mypy, which lead to warnings in the console.

          Now, we've removed the field aliases and replaced them with an internal representation, which allows us to avoid pydantic config altogether.

- version: 3.10.8
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: Allow for fields prefixed with the name `model`, a silent break introduced in Pydantic V2.

- version: 3.10.7
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: When not leveraging mock integration tests, still run pytest over everything, not a specific directory.

# ===== Migrated versions =====

# TODO: It'd be great if we generated YAML schemas so people had validation on these files
- changelogEntry:
    - summary: >
        Cursor-based pagination also assumes `""` is a terminal signal for
        pagination, same as if the next cursor were `None`.
      type: fix
  version: 3.10.6
  createdAt: '2024-08-16'
  irVersion: 53
- changelogEntry:
    - summary: >
        Upgrade intermediate representation dependency to safely parse null
        unknown types.
      type: fix
  version: 3.10.5
  createdAt: '2024-08-16'
  irVersion: 53
- changelogEntry:
    - summary: >
        `.dict` performance is increased, consolidating to a single call to
        Pydantic's `.dict` instead of 2 in attempts to remove unset optional
        values.
      type: fix
  version: 3.10.4
  createdAt: '2024-08-14'
  irVersion: 53
- changelogEntry:
    - summary: >
        Query encoding now appropriately takes arrays of deep objects into
        account.
      type: fix
  version: 3.10.3
  createdAt: '2024-08-14'
  irVersion: 53
- changelogEntry:
    - summary: >
        Unions with utils now update forward refs again, a regression that was
        introduced in version 3.7.0
      type: fix
  version: 3.10.2
  createdAt: '2024-08-13'
  irVersion: 53
- changelogEntry:
    - summary: >
        If there are no autogenerated examples present, the Python SDK generator
        no longer fails.
      type: fix
  version: 3.10.1
  createdAt: '2024-08-13'
  irVersion: 53
- changelogEntry:
    - summary: >
        Adds a new flag to generate forward compatible Python enums, as opposed
        to leveraging raw string enums as literals. This works through addding
        an "\_UNKNOWN" member to your enum set, the value of which is the raw
        value of the unrecognized enum.

          ```yaml
          generators:
            - name: fernapi/fern-python-sdk
              config:
                pydantic_config:
                  enum_type: "forward_compatible_python_enums" # Other valid option is: "literals" and "python_enums"
          ```
      type: feat
  version: 3.10.0
  createdAt: '2024-08-09'
  irVersion: 53
- changelogEntry:
    - summary: >
        A new configuration is introduced to make discriminated union member
        naming more Pythonic. With V1 union naming, member names change from
        `<UnionName>_<DiscriminantValue>` to `<DiscriminantValue><UnionName>`.
        Concretely, union members previously named `Chat_User` will now be named
        `UserChat` under the new configuration.
          ```yaml
          generators:
            - name: fernapi/fern-python-sdk
              config:
                pydantic_config:
                  union_naming: "v1" # Other valid option is: "v0"
          ```
      type: feat
  version: 3.9.0
  createdAt: '2024-08-09'
  irVersion: 53
- changelogEntry:
    - summary: >
        generated SDKs now use ruff for linting and formatting, instead of
        Black.
      type: fix
  version: 3.8.0
  createdAt: '2024-08-09'
  irVersion: 53
- changelogEntry:
    - summary: |
        Python circular referencing types are more robust.
      type: fix
  version: 3.7.0
  createdAt: '2024-08-08'
  irVersion: 53
- changelogEntry:
    - summary: >
        The generator now respects returning nested properties, these can be
        specified via:

          In OpenAPI below, we'd like to only return the property `jobId` from the `Job` object we get back from our server to our SDK users:

          ```yaml
          my/endpoint:
            get:
              x-fern-sdk-return-value: jobId
              response: Job
          ```

          For a similar situation using the Fern definition:

          ```yaml
          endpoints:
            getJob:
              method: GET
              path: my/endpoint
              response:
                type: Job
                property: jobId
          ```
      type: feat
  version: 3.6.0
  createdAt: '2024-08-08'
  irVersion: 53
- changelogEntry:
    - summary: >
        The underlying content no longer sends empty JSON bodies, instead it'll
        pass a `None` value to httpx
      type: fix
  version: 3.6.0
  createdAt: '2024-08-08'
  irVersion: 53
- changelogEntry:
    - summary: >
        The root type for unions with visitors now has it's parent typed
        correctly. This allows auto-complete to work once again on the union
        when it's nested within other pydantic models.
      type: fix
  version: 3.5.1
  createdAt: '2024-08-05'
  irVersion: 53
- changelogEntry:
    - summary: >
        The generated SDK now respects the pydantic version flag, generating V1
        only code and V2 only code if specified. If not, the SDK is generated as
        it is today, with compatibility for BOTH Pydantic versions. This cleans
        up the generated code, and brings back features liked wrapped aliases
        for V1-only SDKs.

          Pydantic compatibility can be specified through the config below:

          ```yaml
          generators:
            - name: fernapi/fern-python-sdk
              config:
                pydantic_config:
                  version: "v1" # Other valid options include: "v2" and "both"
          ```
      type: fix
  version: 3.5.0
  createdAt: '2024-08-05'
  irVersion: 53
- changelogEntry:
    - summary: >
        The Python generator now instantiates `Any` types as `Optional[Any]` to
        be able to meet some breaks in Pydantic V2.
      type: fix
  version: 3.4.2
  createdAt: '2024-08-05'
  irVersion: 53
- changelogEntry:
    - summary: |
        Literal templates are generated if they are union members
      type: fix
  version: 3.4.1
  createdAt: '2024-08-04'
  irVersion: 53
- changelogEntry:
    - summary: >
        The SDK generator has now been upgraded to use Pydantic V2 internally.
        Note that
          there is no change to the generated code, however by leveraging Pydantic V2 you should notice
          an improvement in `fern generate` times.
      type: fix
  version: 3.4.0
  createdAt: '2024-08-02'
  irVersion: 53
- changelogEntry:
    - summary: >
        Aliased literals are also defaulted within Pydantic models, whereas
        previously only direct literals were defaulted.
      type: fix
  version: 3.3.4
  createdAt: '2024-08-02'
  irVersion: 53
- changelogEntry:
    - summary: |
        Snippets now provide optional literals in functions and models.
      type: fix
  version: 3.3.4
  createdAt: '2024-08-02'
  irVersion: 53
- changelogEntry:
    - summary: >
        Generated tests that expect an empty result when they are of type `text`
        (not JSON) now appropriately expect an empty string instead of `None`.
      type: fix
  version: 3.3.4
  createdAt: '2024-08-02'
  irVersion: 53
- changelogEntry:
    - summary: >
        The generator now allows you to extend aliased types (as long as they're
        objects).
      type: fix
  version: 3.3.3
  createdAt: '2024-08-02'
  irVersion: 53
- changelogEntry:
    - summary: |
        regression in readme generation introduced in 3.3.1
      type: fix
  version: 3.3.2
  createdAt: '2024-08-02'
  irVersion: 53
- changelogEntry:
    - summary: |
        Generated READMEs now reference RequestOptions as TypedDicts correctly.
      type: fix
  version: 3.3.1
  createdAt: '2024-08-02'
  irVersion: 53
- changelogEntry:
    - summary: |
        TypedDict snippets now include literals where available.
      type: fix
  version: 3.3.0-rc1
  createdAt: '2024-08-01'
  irVersion: 53
- changelogEntry:
    - summary: |
        Upgrade to IR 53.1.0
      type: fix
  version: 3.3.0-rc0
  createdAt: '2024-07-31'
  irVersion: 53
- changelogEntry:
    - summary: >
        The Python generator now creates snippet templates for undiscriminated
        unions.
      type: chore
  version: 3.3.0-rc0
  createdAt: '2024-07-31'
  irVersion: 53
- changelogEntry:
    - summary: >
        The generated README now imports `ApiError` as if it were from outside
        the module.
      type: fix
  version: 3.2.0-rc1
  createdAt: '2024-07-29'
  irVersion: 49
- changelogEntry:
    - summary: >
        The Python SDK can now be generated such that inputs to requests are
        TypedDicts, instead of Pydantic models. This allows for consumers of the
        SDK
          to continue to have type hinting and autocomplete, but not need to import new object types when creating requests.

          With the following config:

          ```yaml
          generators:
            - name: fernapi/fern-python-sdk
              config:
                pydantic_config:
                  use_typeddict_requests: true
          ```

          The usage will change from:

          ```python
          client\
              .imdb\
              .create_movie(
                request=CreateMovieRequest(title="title", rating=4.3),
              )
          ```

          to:

          ```python
            client\
              .imdb\
              .create_movie(
                request={"title": "title", "rating": 4.3},
              )
          ```
      type: fix
  version: 3.2.0-rc0
  createdAt: '2024-07-25'
  irVersion: 49
- changelogEntry:
    - summary: >
        The root client users interact with is now exported from the main
        `__init__.py`, this allows users to access the client via `from my_sdk
        import my_sdk_client` as opposed to `from my_sdk.client import
        my_sdk_client`.
      type: fix
  version: 3.1.0-rc0
  createdAt: '2024-07-24'
  irVersion: 49
- changelogEntry:
    - summary: >
        - Note this comes with an edge-case break. In the unlikely event you
        have a type that conflicts in naming with the exported root client, that
        type model is post-fixed with "Model". e.g. a type `Merge` in an SDK
        exporting a client `Merge` becomes `MergeModel`.
      type: fix
  version: 3.1.0-rc0
  createdAt: '2024-07-24'
  irVersion: 49
- changelogEntry:
    - summary: >
        `update_forward_refs` no longer raises errors, preserving original
        behavior, pre-3.x.
      type: fix
  version: 3.0.0-rc2
  createdAt: '2024-07-24'
  irVersion: 49
- changelogEntry:
    - summary: >
        Sometimes mypy will error on the typing of `expected_types` within our
        test suite, despite them being labeled as `typing.Any`. This updates the
        types for tuples to `typing.Tuple[tying.Any, typing.Any]` to appease
        mypy.
      type: fix
  version: 3.0.0-rc1
  createdAt: '2024-07-23'
  irVersion: 49
- changelogEntry:
    - summary: >
        The generated SDK now supports Pydantic V2 outright, it no longer uses
        `pydantic.v1` models. This change introduces additional breaks:
      type: fix
  version: 3.0.0-rc0
  createdAt: '2024-07-23'
  irVersion: 49
- changelogEntry:
    - summary: |
        - Wrapped aliases have been removed
      type: fix
  version: 3.0.0-rc0
  createdAt: '2024-07-23'
  irVersion: 49
- changelogEntry:
    - summary: >
        - Custom root validators for models with a **root** type have been
        removed (e.g. only unions with utils still leverages root models)
      type: fix
  version: 3.0.0-rc0
  createdAt: '2024-07-23'
  irVersion: 49
- changelogEntry:
    - summary: >
        - Public fields previously prefixed with `_` are now prefixed with `f_`
        (Pydantic V2 does not allow for `_` prefixes on public fields and Python
        does not allow for a numeric prefix)
      type: fix
  version: 3.0.0-rc0
  createdAt: '2024-07-23'
  irVersion: 49
- changelogEntry:
    - summary: >
        The generated SDK now allows for specifying whether or not to generate
        `streaming` functions as overloaded functions or suparate functions.
          Concretely, you can now specifiy whether or not you'd prefer the generation of your streaming functions as:

          ```
          def chat(...) -> ChatResponse:
            ...
          # and
          def chat_stream(...) -> typing.Iterator[StreamedChatResponse]:
            ...
          ```

          or:

          ```
          @overload
          def chat(...) -> ChatResponse:
            ...
          # and
          @overload
          def chat(..., stream=True) -> typing.Iterator[StreamedChatResponse]:
            ...
          ```

          The latter is configurable by specifying `stream-condition` and `response-stream` on your request within your Fern definition:

          ```
          service:
          auth: false
          base-path: /
          endpoints:
            listUsers:
              method: GET
              path: /users
              stream-condition: $request.stream
              request:
                name: ListUsersRequest
                query-parameters:
                  page: integer
                body:
                  properties:
                    stream: optional<boolean>
              response: ListUsersResponse
              response-stream: User
          ```
      type: fix
  version: 2.16.0
  createdAt: '2024-07-16'
  irVersion: 49
- changelogEntry:
    - summary: >
        The generated python SDK now requires an environment be specified if a
        default is not provided.
      type: fix
  version: 2.15.6
  createdAt: '2024-07-17'
  irVersion: 49
- changelogEntry:
    - summary: >
        The generated python SDK Oauth client now no longer checks for an expiry
        when getting the access token if an expiry field is not configured.
      type: fix
  version: 2.15.5
  createdAt: '2024-07-17'
  irVersion: 49
- changelogEntry:
    - summary: >
        The generated python SDK now serializes bytes within JSON as a utf-8
        encoded string.
      type: fix
  version: 2.15.4
  createdAt: '2024-07-10'
  irVersion: 49
- changelogEntry:
    - summary: >
        The generated python SDK no longer runs into a recursion error during
        snippet generation.
      type: fix
  version: 2.15.3
  createdAt: '2024-07-10'
  irVersion: 49
- changelogEntry:
    - summary: >
        The generated python SDK no longer treats `set` as a reserved word for
        method names.
      type: fix
  version: 2.15.2
  createdAt: '2024-07-10'
  irVersion: 49
- changelogEntry:
    - summary: |
        The unchecked base model no longer coerces None to a type.
      type: fix
  version: 2.15.1
  createdAt: '2024-07-09'
  irVersion: 49
- changelogEntry:
    - summary: >
        The http client appropriately defaults empty fields within
        RequestOptions.
      type: fix
  version: 2.15.1
  createdAt: '2024-07-09'
  irVersion: 49
- changelogEntry:
    - summary: >
        The generated Python SDK can now respect configured defaults from the
        API spec.


        ```yaml

        generators:
          - name: fernapi/fern-python-sdk
            config:
              pydantic_config:
                use_provided_defaults: true
        ```
      type: fix
  version: 2.15.0
  createdAt: '2024-07-03'
  irVersion: 49
- changelogEntry:
    - summary: >
        Sync and AsyncPage now pass through the generic type to BasePage,
        allowing the use of `.items`, etc. to be appropriately typed within your
        type checking system.
      type: fix
  version: 2.14.1
  createdAt: '2024-07-01'
  irVersion: 49
- changelogEntry:
    - summary: >
        offset page now allows for the usage of 0 as a page start, previously
        the use of `page or 1` made Python coerce booleans and become 1,
        ignoring the user-provided 0.
      type: fix
  version: 2.14.0
  createdAt: '2024-07-01'
  irVersion: 49
- changelogEntry:
    - summary: >
        Generated readmes now include an "advanced" section, outlining usage of
        retries, timeouts, error handling and usage of a custom client.
      type: fix
  version: 2.14.0-rc3
  createdAt: '2024-07-01'
  irVersion: 49
- changelogEntry:
    - summary: >
        Async snippets now run the async function leveraging asyncio.run to be
        more copy-pastable.
      type: fix
  version: 2.14.0-rc2
  createdAt: '2024-07-01'
  irVersion: 49
- changelogEntry:
    - summary: |
        the fix from 2.5.2 is now case-insentitive
          Recap of 2.5.2: `Fix: Support `list`SDK method names instead of defaulting to`list\_`.`
      type: fix
  version: 2.14.0-rc1
  createdAt: '2024-06-27'
  irVersion: 49
- changelogEntry:
    - summary: >
        the Python SDK now generates an accompanying SDK reference
        (`reference.md`) for users to review the SDK methods at a glance within
        the SDK's GitHub repository.
      type: feat
  version: 2.14.0-rc0
  createdAt: '2024-06-26'
  irVersion: 49
- changelogEntry:
    - summary: >
        the Python SDK now does not send additional properties via JSON or data
        if the request is leveraging the other field.
      type: fix
  version: 2.13.1-rc0
  createdAt: '2024-06-20'
  irVersion: 49
- changelogEntry:
    - summary: >
        the Python SDK now copies unit tests over to the generated SDK for
        additional unit testing (separate from wire-format testing).
      type: fix
  version: 2.13.1-rc0
  createdAt: '2024-06-20'
  irVersion: 49
- changelogEntry:
    - summary: |
        The Python SDK generator is now upgraded to IR V49.
      type: fix
  version: 2.13.0-rc0
  createdAt: '2024-06-20'
  irVersion: 49
- changelogEntry:
    - summary: >
        README generation now supports a section dedicated to streaming usage,
        as well as one for paginated endpoints.
      type: feat
  version: 2.12.0-rc0
  createdAt: '2024-06-25'
  irVersion: 49
- changelogEntry:
    - summary: |
        Paginated endpoint snippets now show using an iterator:

          Before:

          ```python
          from seed.client import SeedPagination

          client = SeedPagination(
              token="YOUR_TOKEN",
              base_url="https://yourhost.com/path/to/api",
          )
          client.users.list_with_cursor_pagination(
              page=1,
              per_page=1,
              order="asc",
              starting_after="string",
          )
          ```

          After:

          ```python
          from seed.client import SeedPagination

          client = SeedPagination(
              token="YOUR_TOKEN",
              base_url="https://yourhost.com/path/to/api",
          )
          response = client.users.list_with_cursor_pagination(
              page=1,
              per_page=1,
              order="asc",
              starting_after="string",
          )
          for item in response:
              yield item
          # alternatively, you can paginate page-by-page
          for page in response.iter_pages():
              yield page
          ```
      type: fix
  version: 2.12.0-rc0
  createdAt: '2024-06-25'
  irVersion: 49
- changelogEntry:
    - summary: >
        The SDK now produces templates for the root clients within
        snippet-template.json. This allows users of the Templates API to pass in
        data for the auth variables present within the root client.
      type: fix
  version: 2.11.0-rc0
  createdAt: '2024-06-25'
  irVersion: 49
- changelogEntry:
    - summary: >
        The SDK now handles stream termination sequences like `[DONE]`. This is
        a typical way for LLM
          providers to communicate when the stream has ended.
      type: fix
  version: 2.10.2
  createdAt: '2024-06-20'
  irVersion: 46
- changelogEntry:
    - summary: >
        Improve the SDK to not leak `JSONDecodeError` to SDK users. Instead, an
        `ApiError` will be thrown
          with the text content of the response.
      type: fix
  version: 2.10.1
  createdAt: '2024-06-20'
  irVersion: 46
- changelogEntry:
    - summary: |
        Add support for higher quality `README.md` generation.
      type: feat
  version: 2.10.0
  createdAt: '2024-06-20'
  irVersion: 46
- changelogEntry:
    - summary: >
        the generator now only specifies the readme location within
        pyproject.toml if one was successfully created.
      type: fix
  version: 2.9.10
  createdAt: '2024-06-20'
  irVersion: 46
- changelogEntry:
    - summary: |
        The generator now consumes IRv46.
      type: fix
  version: 2.9.9
  createdAt: '2024-06-19'
  irVersion: 46
- changelogEntry:
    - summary: >
        The python generator only adds a publish step in github actions if
        credentials are specified.
      type: fix
  version: 2.9.8
  createdAt: '2024-06-18'
  irVersion: 39
- changelogEntry:
    - summary: |
        The unchecked base model stops special casing defaults and pydantic v2.
      type: fix
  version: 2.9.7
  createdAt: '2024-06-12'
  irVersion: 39
- changelogEntry:
    - summary: |
        Offset based pagination is now 1-based, as opposed to 0 based
      type: fix
  version: 2.9.6
  createdAt: '2024-06-11'
  irVersion: 39
- changelogEntry:
    - summary: >
        The HTTP client now passes in additional body properties from the
        request options, even if the body is empty (regression from the client
        migration in 2.8.0)
      type: fix
  version: 2.9.6
  createdAt: '2024-06-11'
  irVersion: 39
- changelogEntry:
    - summary: |
        Unions with elements that specify no properties are generated correctly.
      type: fix
  version: 2.9.5
  createdAt: '2024-06-10'
  irVersion: 39
- changelogEntry:
    - summary: >
        Unions with a single type now have a valid type alias (rather than an
        invalid `typing.Union`).
      type: fix
  version: 2.9.5
  createdAt: '2024-06-10'
  irVersion: 39
- changelogEntry:
    - summary: >
        The unchecked base model now handles pulling the discriminant from a
        dict, not just a model/object.
      type: fix
  version: 2.9.4
  createdAt: '2024-06-07'
  irVersion: 39
- changelogEntry:
    - summary: >
        Snippet templates for discrminated unions now specify the
        `template_input` property which is
          required to actually see snippets of instantiating discrminated unions.
      type: fix
  version: 2.9.3
  createdAt: '2024-06-06'
  irVersion: 39
- changelogEntry:
    - summary: >
        downgrades mypy so we can run it over all our files without concern for
        their pydantic bug
      type: fix
  version: 2.9.2
  createdAt: '2024-06-06'
  irVersion: 39
- changelogEntry:
    - summary: |
        adds typehint to the response variable
      type: fix
  version: 2.9.2
  createdAt: '2024-06-06'
  irVersion: 39
- changelogEntry:
    - summary: >
        The SDK removes unset query parameters from requests (regression from
        the client migration in 2.8.0)
      type: fix
  version: 2.9.1
  createdAt: '2024-06-06'
  irVersion: 39
- changelogEntry:
    - summary: >
        The SDK fixes it's type for `files` parameters to the http client
        (regression from the client migration in 2.8.0)
      type: fix
  version: 2.9.1
  createdAt: '2024-06-06'
  irVersion: 39
- changelogEntry:
    - summary: |
        Snippets preserve trailing slashes
      type: fix
  version: 2.9.0
  createdAt: '2024-06-05'
  irVersion: 39
- changelogEntry:
    - summary: >
        The new http client abstraction ensures a slash is postfixed to the
        baseurl
      type: fix
  version: 2.9.0-rc1
  createdAt: '2024-06-05'
  irVersion: 39
- changelogEntry:
    - summary: |
        Snippets preserve trailing slashes
      type: fix
  version: 2.9.0-rc1
  createdAt: '2024-06-05'
  irVersion: 39
- changelogEntry:
    - summary: |
        The Python generator now runs custom unit tests in CI if configured.
      type: fix
  version: 2.9.0-rc0
  createdAt: '2024-06-04'
  irVersion: 39
- changelogEntry:
    - summary: |
        The none-filtering function now supports mypy's invariance check.
      type: fix
  version: 2.8.2
  createdAt: '2024-06-04'
  irVersion: 39
- changelogEntry:
    - summary: >
        The parameter comment/documentation for timeouts on the root client now
        reflects the custom timeout passed through within configuration.
      type: fix
  version: 2.8.1
  createdAt: '2024-06-04'
  irVersion: 39
- changelogEntry:
    - summary: >
        Endpoint function request logic has been abstracted into the request
        function of the wrapped httpx client.
      type: fix
  version: 2.8.0
  createdAt: '2024-06-03'
  irVersion: 39
- changelogEntry:
    - summary: >
        The generator now outputs an `exampleId` alongside each generated
        snippet so that
          we can correlate snippets with the relevant examples. This is useful for retrieving examples from
          Fern's API and making sure that you can show multiple snippets in the generated docs.
      type: fix
  version: 2.7.0
  createdAt: '2024-05-30'
  irVersion: 39
- changelogEntry:
    - summary: >
        this adds a back door token getter function to OAuth clients to better
        test the functionality.
      type: fix
  version: 2.6.1
  createdAt: '2024-05-31'
  irVersion: 39
- changelogEntry:
    - summary: >
        Support adding optional dependencies and extras to your generated
        `pyproject.toml`. To
          use this configuration, please add the following:

          ```yaml
          extra_dependencies:
            boto3: 1.28.57
            langchain:
              version: "^0.1.20"
              optional: true
          extras:
            telemetry: ["langchain", "boto3"]
          ```
      type: fix
  version: 2.6.0
  createdAt: '2024-05-30'
  irVersion: 39
- changelogEntry:
    - summary: |
        tests now carry a type annotation for `expected_types` variable.
      type: fix
  version: 2.5.7
  createdAt: '2024-05-30'
  irVersion: 39
- changelogEntry:
    - summary: >
        literal values are now all defaulted such that users are not required to
        plug in a redundant value.
      type: fix
  version: 2.5.6
  createdAt: '2024-05-29'
  irVersion: 39
- changelogEntry:
    - summary: >
        Optional lists returned from pagination endpoints are now appropriately
        flattened such that the `Pager` return types are correctly
        `Pager[ListItem]` as opposed to `Pager[List[ListItem]]`.
      type: fix
  version: 2.5.5
  createdAt: '2024-05-29'
  irVersion: 39
- changelogEntry:
    - summary: |
        Add typing library for dateutils in testing lib to satisfy mypy errors.
      type: fix
  version: 2.5.4
  createdAt: '2024-05-28'
  irVersion: 39
- changelogEntry:
    - summary: |
        Stop specifying custom licenses manually, let poetry handle adding them.
      type: fix
  version: 2.5.3
  createdAt: '2024-05-24'
  irVersion: 39
- changelogEntry:
    - summary: |
        Support `list` SDK method names instead of defaulting to `list_`.
      type: fix
  version: 2.5.2
  createdAt: '2024-05-23'
  irVersion: 39
- changelogEntry:
    - summary: |
        Literal parameters are added back to the request body.
      type: fix
  version: 2.5.1-rc0
  createdAt: '2024-05-23'
  irVersion: 39
- changelogEntry:
    - summary: >
        Do not attempt to run `fern test` in CI until the command is more widely
        rolled out.
      type: fix
  version: 2.5.0-rc2
  createdAt: '2024-05-23'
  irVersion: 39
- changelogEntry:
    - summary: |
        Address `propogate` -> `propagate` typo in python codegen.
      type: fix
  version: 2.5.0-rc1
  createdAt: '2024-05-22'
  irVersion: 39
- changelogEntry:
    - summary: >
        This version addresses issues in unit test generation and reenables the
        creation of unit tests.
      type: fix
  version: 2.5.0-rc0
  createdAt: '2024-05-22'
  irVersion: 39
- changelogEntry:
    - summary: >
        The Python SDK generator now uses safe names wherever string concat is
        not used (like in client generation naming), so this will update module
        and parameter names.
      type: fix
  version: 2.4.0-rc0
  createdAt: '2024-05-21'
  irVersion: 39
- changelogEntry:
    - summary: >
        Snippets and unit tests now correctly write optional request bodies when
        `inline_request_params` is set to `True`. Previously the generator wrote
        snippets that inlined these parameters, which does not match the
        generated SDK itself.
      type: fix
  version: 2.3.4
  createdAt: '2024-05-21'
  irVersion: 39
- changelogEntry:
    - summary: >
        Inlined body parameters now deconflict in naming with header and query
        parameters by prefixing the request objects name.
      type: fix
  version: 2.3.3
  createdAt: '2024-05-21'
  irVersion: 39
- changelogEntry:
    - summary: >
        The `pyproject.toml` generator now writes authors in a valid format for
        `tool.poetry`, not just `project`
      type: fix
  version: 2.3.2
  createdAt: '2024-05-21'
  irVersion: 39
- changelogEntry:
    - summary: |
        The query encoder now correctly handles none values
      type: fix
  version: 2.3.2
  createdAt: '2024-05-21'
  irVersion: 39
- changelogEntry:
    - summary: |
        The `pyproject.toml` generator now includes project URLs when specified.
      type: fix
  version: 2.3.1
  createdAt: '2024-05-21'
  irVersion: 39
- changelogEntry:
    - summary: |
        Users can now specify information that will appear in their pypi record.

        ```yaml
        generators:
          - name: fernapi/fern-python-sdk
            metadata:
              description: this is the desc for my package
              keywords:
                - science
                - data analysis
              documentationLink: "https://buildwithfern.com/learn"
              homepageLink: "https://buildwithfern.com/"
              authors:
                - email: support@buildwithfern.com
                  name: Armando
        ```
      type: fix
  version: 2.3.0
  createdAt: '2024-05-21'
  irVersion: 39
- changelogEntry:
    - summary: >
        Inline request parameters now deconflict in naming with the unnamed path
        parameter arguments. Previously, when inlining request parameters into
        the method signature, we would not deconflict naming with the unnamed
        args preceeding them. Now, conflicting unnamed parameters are post-fixed
        with an "\_".


        Before:


        ```python

        def method_name(id: str, *, id: str) -> None:
          ...
        ```


        After:


        ```python

        def method_name(id_: str, *, id: str) -> None:
          ...
        ```
      type: fix
  version: 2.2.2
  createdAt: '2024-05-20'
  irVersion: 39
- changelogEntry:
    - summary: |
        The generator now uses the latest FDR SDK.
      type: fix
  version: 2.2.1
  createdAt: '2024-05-17'
  irVersion: 39
- changelogEntry:
    - summary: >
        The generated SDK will now correctly encode deep object query
        parameters.
          For example, if you have an object `{"test": {"nested": "object"}}` as a query parameter, we will now encode it as `test[nested]=object`.
      type: fix
  version: 2.2.0
  createdAt: '2024-05-16'
  irVersion: 39
- changelogEntry:
    - summary: |
        add enhanced snippet support for streaming endpoints.

          Before:

          ```python
          from seed.client import SeedStreaming

          client = SeedStreaming(
              base_url="https://yourhost.com/path/to/api",
          )
          client.dummy.generate_stream(
              num_events=1,
          )
          ```

          After:

          ```python
          from seed.client import SeedStreaming

          client = SeedStreaming(
              base_url="https://yourhost.com/path/to/api",
          )
          response = client.dummy.generate_stream(
              num_events=1,
          )
          for chunk in response:
              yield chunk
          ```
      type: chore
  version: 2.1.1
  createdAt: '2024-05-15'
  irVersion: 39
- changelogEntry:
    - summary: |
        Add support for cursor and offset pagination.

          For example, consider the following endpoint `/users` endpoint:

          ```yaml
          types:
            User:
              properties:
                name: string

            ListUserResponse:
              properties:
                next: optional<string>
                data: list<User>

          service:
            auth: false
            base-path: /users
            endpoints:
              list:
                path: ""
                method: GET
                pagination:
                  cursor: $request.starting_after
                  next_cursor: $response.next
                  results: $response.data
                request:
                  name: ListUsersRequest
                  query-parameters:
                    starting_after: optional<string>
                response: ListUsersResponse
          ```

          The generated `client.Users.List` can then be used as a `User` generator (effectively the "default"):

          ```python
          for user in client.users.list(...):
            print user
          ```

          a page-by-page generator:

          ```python
          for page in client.users.list(...).iter_pages():
            print(page.items)
          ```

          or statically calling `next_page` to perform the pagination manually:

          ```python
          pager = client.users.list(...)
          # First page
          print(pager.items)
          # Second page
          pager = pager.next_page()
          print(pager.items)
          ```
      type: feat
  version: 2.1.0
  createdAt: '2024-05-14'
  irVersion: 39
- changelogEntry:
    - summary: >
        the python generator previously used `exclude_unset` on pydantic models,
        however this would remove defaulted values. This change updates this to
        only exclude none fields that were not required.
      type: fix
  version: 2.0.1
  createdAt: '2024-05-14'
  irVersion: 39
- changelogEntry:
    - summary: >
        the python SDK is now on major version 2, there are no substantial logic
        changes, however default configuration has changed. To take this upgrade
        without any breaks, please add the below configuration to your
        `generators.yml` file:

          ```yaml
          generators:
            - name: fernapi/fern-python-sdk
              config:
                inline_request_params: false
          ```
      type: fix
  version: 2.0.0
  createdAt: '2024-05-09'
  irVersion: 39
- changelogEntry:
    - summary: >
        you can now declare a new python version range for your
        `pyproject.toml`, which will declare a new version range for your pip
        package.

          ```yaml
          generators:
            - name: fernapi/fern-python-sdk
              config:
                pyproject_python_version: ^3.8.1
          ```
      type: fix
  version: 1.7.0-rc0
  createdAt: '2024-05-09'
  irVersion: 39
- changelogEntry:
    - summary: |
        you can now specify dev dependencies from your `generators.yml` file:

          ```yaml
          generators:
            - name: fernapi/fern-python-sdk
              config:
                extra_dev_dependencies:
                  requests_mock: 1.12.1
                  boto3: 1.28.57
          ```

          These will then populare your `pyproject.toml` automatically:

          ```toml
          ...
          [tool.poetry.dev-dependencies]
          requests_mock = "1.12.1"
          boto3 = "1.28.57"
          ...
          ```
      type: fix
  version: 1.6.0-rc0
  createdAt: '2024-05-09'
  irVersion: 39
- changelogEntry:
    - summary: >
        the unchecked basemodel no longer tries to dereference an object if it's
        null.
      type: fix
  version: 1.5.3-rc0
  createdAt: '2024-05-02'
  irVersion: 39
- changelogEntry:
    - summary: >
        The python generator now produces sync snippet templates, as opposed to
        just async templates as it was before
      type: fix
  version: 1.5.2-rc0
  createdAt: '2024-05-02'
  irVersion: 39
- changelogEntry:
    - summary: |
        Snippet templates now generate the correct imports for object types.
      type: fix
  version: 1.5.1-rc5
  createdAt: '2024-05-01'
  irVersion: 39
- changelogEntry:
    - summary: |
        The SDK now generates discriminated union snippet templates correctly.
      type: fix
  version: 1.5.1-rc4
  createdAt: '2024-05-01'
  irVersion: 39
- changelogEntry:
    - summary: >
        Union types leverage the fern aware base model to include JSON and Dict
        function overrides.
      type: fix
  version: 1.5.1-rc3
  createdAt: '2024-05-01'
  irVersion: 39
- changelogEntry:
    - summary: >
        The vanilla pydantic base model now respects the
        `require_optional_fields`, this became a regression in 1.5.1-rc0 when we
        started to inline union properties which leverages the vanilla base
        model.
      type: fix
  version: 1.5.1-rc2
  createdAt: '2024-05-01'
  irVersion: 39
- changelogEntry:
    - summary: >
        Address formatting issues with snippet templates, we now strip newlines
        off OG snippets as well as plumb through indentation metadata to places
        that were previously missing it.
      type: fix
  version: 1.5.1-rc1
  createdAt: '2024-05-01'
  irVersion: 39
- changelogEntry:
    - summary: >
        Discriminated union variants that are objects now have inlined
        properties instead of
          extending a base type.

          ```python

          Circle_Shape(pydantic_v1.BaseModel):
            type: typing.Literal["circle"]
            radius: integer

          Square_Shape(pydantic_v1.BaseModel):
            type: typing.Literal["circle"]
            side: integer
          ```

          instead of

          ```python
          Circle_Shape(Circle):
            type: typing.Literal["circle"]

          Square_Shape(Square):
            type: typing.Literal["circle"]
          ```
      type: fix
  version: 1.5.1-rc0
  createdAt: '2024-04-26'
  irVersion: 39
- changelogEntry:
    - summary: >
        The generator now supports inlining top-level request parameters instead
        of requiring users create a request object.

          Config:

          ```yaml
          generators:
            - name: fernapi/fern-python-sdk
              config:
                inline_request_params: true
          ```

          Before:

          ```python
          def get_and_return_with_optional_field(
            self,
            *,
            request: ObjectWithOptionalField,
            request_options: typing.Optional[RequestOptions] = None
          ) -> ObjectWithOptionalField:
            ...
          ```

          After:

          ```python
          def get_and_return_with_optional_field(
            self,
            *,
            string: typing.Optional[str] = OMIT,
            integer: typing.Optional[int] = OMIT,
            long: typing.Optional[int] = OMIT,
            double: typing.Optional[float] = OMIT,
            bool: typing.Optional[bool] = OMIT,
            request_options: typing.Optional[RequestOptions] = None
          ) -> ObjectWithOptionalField:
            ...
          ```
      type: feat
  version: 1.5.0-rc0
  createdAt: '2024-04-30'
  irVersion: 39
- changelogEntry:
    - summary: >
        keyword arguments are now ordered such that required params are ordered
        before optional params. Note that since these are kwargs, this is a
        non-breaking change.
      type: fix
  version: 1.4.0
  createdAt: '2024-04-29'
  irVersion: 39
- changelogEntry:
    - summary: |
        docstrings now match numpydoc/PEP257 format
      type: fix
  version: 1.4.0
  createdAt: '2024-04-29'
  irVersion: 39
- changelogEntry:
    - summary: |
        Set `mypy` dev depenency in generated `pyproject.toml` to `1.9.0`.
          This prevents upstream `mypy` bugs from affecting user builds. Note that
          this is only a dev dependency, so it does not affect the behavior of the
          SDK.
      type: fix
  version: 1.4.0-rc3
  createdAt: '2024-04-24'
  irVersion: 39
- changelogEntry:
    - summary: |
        Temporarily disable unit test generation.
      type: fix
  version: 1.4.0-rc3
  createdAt: '2024-04-24'
  irVersion: 39
- changelogEntry:
    - summary: |
        Use named parameters for all `httpx` request params.
      type: fix
  version: 1.4.0-rc3
  createdAt: '2024-04-24'
  irVersion: 39
- changelogEntry:
    - summary: >
        Initialize the OAuth token provider member variables to their default
        values before they are set.
      type: fix
  version: 1.4.0-rc2
  createdAt: '2024-04-23'
  irVersion: 39
- changelogEntry:
    - summary: >
        The python SDK generator now supports OAuth client generation for the
        client-credentials flow.
      type: feat
  version: 1.4.0-rc1
  createdAt: '2024-04-22'
  irVersion: 39
- changelogEntry:
    - summary: >
        default generated clients to follow redirects by default, this
        effectively flips the `follow_redirects_by_default` flag to `True` and
        can be reverted with the following configuration:

          ```yaml
          generators:
            - name: fernapi/fern-python-sdk
              config:
                follow_redirects_by_default: false
          ```
      type: chore
  version: 1.4.0-rc0
  createdAt: '2024-04-22'
  irVersion: 38
- changelogEntry:
    - summary: >
        the python SDK generator now checks to make sure a header is not null
        before casting it to a string.
      type: fix
  version: 1.3.1-rc0
  createdAt: '2024-04-22'
  irVersion: 38
- changelogEntry:
    - summary: |
        add logging for python snippet template generation.
      type: fix
  version: 1.3.0-rc1
  createdAt: '2024-04-22'
  irVersion: 38
- changelogEntry:
    - summary: >
        The generator now registers snippet templates which can be used for
        dynamic
          SDK code snippet generation.

          **Note**: You must be on the enterprise tier to enable this mode.
      type: feat
  version: 1.3.0-rc0
  createdAt: '2024-04-21'
  irVersion: 38
- changelogEntry:
    - summary: >
        The generator now correctly imports `json` when deserializing server
        sent events.
      type: fix
  version: 1.2.0-rc2
  createdAt: '2024-04-10'
  irVersion: 38
- changelogEntry:
    - summary: >
        The generator now depends on v38 of Intermediate Representation which
        requires the latest
          CLI. As part of this, the generator now supports server sent events using `httpx-sse`.
      type: feat
  version: 1.2.0-rc0
  createdAt: '2024-04-10'
  irVersion: 38
- changelogEntry:
    - summary: >
        There are a number of fixes to the skip validation code as well as tests
        to reflect those updates.
      type: fix
  version: 1.1.0-rc3
  createdAt: '2024-04-04'
  irVersion: 37
- changelogEntry:
    - summary: >
        The generator now writes the skipped-validation `cast` with a suffixing
        new line so that the code compiles.
      type: fix
  version: 1.1.0-rc2
  createdAt: '2024-04-04'
  irVersion: 37
- changelogEntry:
    - summary: >
        The generator no longer attempts to create a version file if Fern does
        not own generating the full package (e.g. in local generation). It's too
        confusing for to make the relevant changes to the package set up, and is
        also arguably not even needed in local generation.
      type: fix
  version: 1.1.0-rc1
  createdAt: '2024-04-04'
  irVersion: 37
- changelogEntry:
    - summary: >
        The python SDK now includes a configuration option to skip pydantic
        validation. This ensures that Pydantic does not immediately fail if the
        model being returned from an API does not exactly match the Pydantic
        model. This is meant to add flexibility, should your SDK fall behind
        your API, but should be used sparringly, as the type-hinting for users
        will still reflect the Pydantic model exactly.

          ```yaml
          generators:
            - name: fernapi/fern-python-sdk
              ...
              config:
                pydantic_config:
                  skip_validation: true
          ```
      type: feat
  version: 1.1.0-rc0
  createdAt: '2024-04-03'
  irVersion: 37
- changelogEntry:
    - summary: >
        Pydantic introduced a "break" to their 1.x libs by adding in a .v1
        submodule that does not mirror the one that comes with pydantic v2. To
        get around this we now force the usage of the v1 submodule only if the
        pydantic version is v2.
      type: fix
  version: 1.0.1
  createdAt: '2024-04-03'
  irVersion: 37
- changelogEntry:
    - summary: >
        The python SDK now defaults new (breaking configuration) to introduce
        general improvements.

          In order to revert to the previous configuration flags and avoid the break, please leverage the below configuration:

          ```yaml
          generators:
            - name: fernapi/fern-python-sdk
              config:
                improved_imports: false
                pydantic_config:
                  require_optional_fields: true
                  use_str_enums: false
                  extra_fields: "forbid"
          ```
      type: fix
  version: 1.0.0
  createdAt: '2024-04-02'
  irVersion: 37
- changelogEntry:
    - summary: >
        The python SDK now supports specifying whether or not to follow
        redirects in requests by default, and exposes an option to override that
        functionality for consumers.

          ```yaml
          generators:
            - name: fernapi/fern-python-sdk
              config:
                follow_redirects_by_default: true
          ```

          which then just instantiates the client like so:

          ```python
          client = SeedExhaustive(
                token="YOUR_TOKEN",
                follow_redirects=True  # This is defaulted to the value passed into follow_redirects_by_default, and ignored if not specified
          )
          ```
      type: fix
  version: 1.0.0
  createdAt: '2024-04-02'
  irVersion: 37
- changelogEntry:
    - summary: >
        revert the change from 0.13.2, the stream call returns a context
        manager, which is not awaited. The issue that this was meant to solve
        was actually fixed in version `0.12.2`.
      type: fix
  version: 0.13.4
  createdAt: '2024-04-03'
  irVersion: 37
- changelogEntry:
    - summary: >
        Github workflows for publishing now work again (previously the trigger
        was incorrect).
      type: fix
  version: 0.13.3
  createdAt: '2024-03-28'
  irVersion: 37
- changelogEntry:
    - summary: >
        Asynchronous calls to `httpx.stream` are now awaited. This is applicable
        to any file download or
          JSON streaming (chat completion) endpoints.

          ```python
          # Before
          async with httpx.stream

          # After
          async with await httpx.stream
          ```
      type: fix
  version: 0.13.2
  createdAt: '2024-03-28'
  irVersion: 37
- changelogEntry:
    - summary: >
        discriminant values in unions are now defaulted such that callers no
        longer need to specify the discriminant:

          ```python
          # Before
          shape = Circle(discriminant="circle", radius=2.0)

          # After
          shape = Circle(radius=2.0)
          ```
      type: fix
  version: 0.13.1
  createdAt: '2024-03-26'
  irVersion: 37
- changelogEntry:
    - summary: >
        the python SDK now exposes it's version through `__version__` to match
        module standards and expectations.


        ```python

        import seed


        print(seed.__version__)  # prints 0.0.1 or whatever version is contained
        within the pyproject.toml

        ```
      type: fix
  version: 0.13.0
  createdAt: '2024-03-25'
  irVersion: 37
- changelogEntry:
    - summary: >
        the python SDK uses the timeout provided to the top level client as the
        default per-request, previously if there was no timeout override in the
        RequestOptions, we'd default to 60s, even if a timeout was provided at
        the client level.
      type: fix
  version: 0.12.5
  createdAt: '2024-03-22'
  irVersion: 37
- changelogEntry:
    - summary: >
        Allow full forward compat with enums while keeping intellisense by
        unioning enum literals with `typing.AnyStr`.

          Before:

          ```python
          Operand = typing.Union[typing.AnyStr, typing.Literal[">", "=", "less_than"]]
          ```

          After:

          ```python
          Operand = typing.Literal[">", "=", "less_than"]
          ```
      type: fix
  version: 0.12.4
  createdAt: '2024-03-19'
  irVersion: 37
- changelogEntry:
    - summary: >
        Allow bytes requests to take in iterators of bytes, mirroring the types
        allowed by HTTPX.
      type: fix
  version: 0.12.3
  createdAt: '2024-03-18'
  irVersion: 37
- changelogEntry:
    - summary: >
        Fix the returned type and value contained within the retrying wrapper
        for the HTTPX client (http_client.py).
      type: fix
  version: 0.12.2
  createdAt: '2024-03-18'
  irVersion: 37
- changelogEntry:
    - summary: >
        - Improves example generation and snippets for union types, as well as
        multi-url environments.
      type: fix
  version: 0.12.1
  createdAt: '2024-03-14'
  irVersion: 37
- changelogEntry:
    - summary: >
        Stringifies header arguments, HTTPX was previously hard failing for
        certain types
      type: fix
  version: 0.12.1
  createdAt: '2024-03-14'
  irVersion: 37
- changelogEntry:
    - summary: >
        The SDK now generates tests leveraging auto-generated data to test
        typing, as well as wire-formatting (e.g. the SDKs are sending and
        receiving data as expected). This comes out of the box within the
        generated github workflow, as well as through the fern cli: `fern test
        --command "your test command"`.
          **Note**: You must be on the enterprise tier to enable this mode.
      type: feat
  version: 0.12.0
  createdAt: '2024-03-11'
  irVersion: 37
- changelogEntry:
    - summary: >
        Expose a feature flag to pass through additional properties not
        specified within your pydantic model from your SDK. This allows for
        easier forward compatibility should your SDK drift behind your spec.

          Config:

          ```yaml
          generators:
            - name: fernapi/fern-python-sdk
              ...
              config:
                pydantic_config:
                  extra_fields: "allow"
          ```

          Example generated code:

          ```python
          # my_object.py
          class MyObject(pydantic.BaseModel):
              string: typing.Optional[str] = None
              ...

          # main.py
          o = pydantic.parse_obj_as(MyObject, {"string": "string", "my_new_property": "custom_value"})

          print(o.my_new_property) # <--- "custom_value"
          ```
      type: feat
  version: 0.11.10
  createdAt: '2024-03-08'
  irVersion: 36
- changelogEntry:
    - summary: >
        Use docstrings instead of Pydantic field descriptions. This is meant to
        be a cleanliness change.
          This goes from:

          ```python
          field: Optional[str] = pydantic.Field(default=None, description="This is the description.")
          ```

          to:

          ```python
          field: Optional[str] = pydantic.Field(default=None)
          """This is the description."""
          ```
      type: chore
  version: 0.11.9
  createdAt: '2024-03-04'
  irVersion: 36
- changelogEntry:
    - summary: >
        Introduces a `max_retries` parameter to the RequestOptions dict accepted
        by all requests. This parameter will retry requests automatically, with
        exponential backoff and a jitter. The client will automatically retry
        requests of a 5XX status code, or certain 4XX codes (429, 408, 409).

          ```python
            client\
              .imdb\
              .create_movie(
                request=CreateMovieRequest(title="title", rating=4.3),
                request_options={
                  "max_retries": 5,
                }
              )
          ```
      type: fix
  version: 0.11.8-rc1
  createdAt: '2024-03-02'
  irVersion: 36
- changelogEntry:
    - summary: >
        Introduce a `client` custom config that allows you to specify class_name
        and
          filename for the client. This configuration can be used in several ways:

          1. Rename your client class:

             ```yml
             config:
               client:
                 class_name: Imdb
             ```

          2. Add custom functions to your generated SDK:

             ```yml
             config:
               client:
                 class_name: BaseImdb
                 filename: base_client.py
                 exported_class_name: Imdb
                 exported_filename: client.py
             ```

             Often times you may want to add additional methods or utilites to the
             generated client. The easiest way to do this is to configure Fern to write
             the autogenerated client in another file and extend it on your own.

             With the configuration above, Fern's Python SDK generator will create a
             class called `BaseImdb` and `AsyncBaseImdb` and put them in a file called
             `base_client.py`. As a user, you can extend both these classes with
             custom utilities.

             To make sure the code snippets in the generated SDK are accurate you can
             specify `exported_class_name` and `exported_filename`.
      type: fix
  version: 0.11.8-rc0
  createdAt: '2024-02-27'
  irVersion: 36
- changelogEntry:
    - summary: >
        Introduces a flag `use_str_enums` to swap from using proper Enum classes
        to using Literals to represent enums. This change allows for forward
        compatibility of enums, since the user will receive the string back.

          ```
          config:
            pydantic_config:
              use_str_enums: true
          ```

          generates enums as:

          ```
          Operand = typing.Literal[">", "=", "less_than"]
          ```
      type: fix
  version: 0.11.7
  createdAt: '2024-02-27'
  irVersion: 36
- changelogEntry:
    - summary: >
        You can now specify envvars to scan for headers, not just auth scheme
        headers.

          ```
          # OpenAPI
          x-fern-global-headers:
           - header: x-api-key
             name: api_key
             optional: true
             env: MY_API_KEY
          ```

          ... or ...

          ```
          # Fern Definition
          getAllUsers:
            method: GET
            path: /all
            request:
              name: GetAllUsersRequest
              headers:
                X-API-KEY: string
                env: MY_API_KEY
          ```

          the generated client will look like

          ```python
          import os

          class Client:

            def __init__(self, *, apiKey: str = os.getenv("MY_API_KEY"))
          ```
      type: fix
  version: 0.11.6
  createdAt: '2024-02-26'
  irVersion: 36
- changelogEntry:
    - summary: >
        Fix the usage of ApiError when leveraging auth envvars, when the schema
        for ApiError was changed, this usage was missed in the update.
      type: fix
  version: 0.11.5
  createdAt: '2024-02-23'
  irVersion: 34
- changelogEntry:
    - summary: |
        We now grab enum values appropriately when enums are within unions.
      type: fix
  version: 0.11.4
  createdAt: '2024-02-23'
  irVersion: 34
- changelogEntry:
    - summary: >
        Transition from lists to sequences within function calls, this is a fix
        as a result of how mypy handles type variance.
          This fix is only for function calls as testing shows that we do not hit the same issue within mypy with list[union[*]] fields on pydantic objects.
          This issue outlines it well: https://stackoverflow.com/questions/76138438/incompatible-types-in-assignment-expression-has-type-liststr-variable-has
      type: fix
  version: 0.11.3
  createdAt: '2024-02-22'
  irVersion: 34
- changelogEntry:
    - summary: >
        The Python SDK generator now defaults to `require_optional_fields =
        False`. This means that any requests that have optional fields no longer
        require a user to input data (or a `None` value) in.
          Example:

          ```python
          # Previously:
          def my_function(my_parameter: typing.Optional[str]):
            pass

          my_function()  # <--- This fails mypy
          my_function(None)  # <--- This is necessary
          my_function("I work in both cases!")
          ...
          # Now:
          def my_function():
            pass

          my_function()  # <--- I no longer fail mypy
          my_function(None)  # <--- I still work
          my_function("I work in both cases!")
          ```
      type: fix
  version: 0.11.3
  createdAt: '2024-02-22'
  irVersion: 34
- changelogEntry:
    - summary: >
        The Python generator now supports a configuration option called
        `improved_imports`. To enable
          this configuration, just add the following to your generators.yml

          ```yaml
          generators:
            - name: fernapi/fern-python-sdk
              ...
              config:
                improved_imports: true
          ```

          Enabling improved imports will remove the verbose `resources` directory in the SDK and make the imports
          shorter. This will also improve the imports from Pylance and Pyright that are automaticaly generated

          ```python
          # Before
          from sdk.resources.fhir import Paient

          # After
          from sdk.fhir import Patient
          ```
      type: fix
  version: 0.11.2
  createdAt: '2024-02-21'
  irVersion: 34
- changelogEntry:
    - summary: >
        Python now supports specifying files to auto-export from the root
        `__init__.py` file, this means you can export custom classes and
        functions from your package for users to access like so:

          ```python
          from my_package import custom_function
          ```

          the configuration for this is:

          ```yaml
          # generators.yml
          python-sdk:
            generators:
              - name: fernapi/fern-python-sdk
                version: 0.11.1
                config:
                  additional_init_exports:
                    - from: file_with_custom_function
                      imports:
                        - custom_function
          ```
      type: fix
  version: 0.11.1
  createdAt: '2024-02-20'
  irVersion: 34
- changelogEntry:
    - summary: |
        Add a docstring for base clients to explain usage, example:

          ```python
          class SeedTest:
            """
            Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propogate to these functions.
            ---
            from seed.client import SeedTest

            client = SeedTest(
                token="YOUR_TOKEN",
                base_url="https://yourhost.com/path/to/api",
            )
            """
          ```
      type: chore
  version: 0.11.1
  createdAt: '2024-02-20'
  irVersion: 34
- changelogEntry:
    - summary: >
        Python now supports a wider range of types for file upload, mirroring
        the `httpx` library used under the hood, these are grouped under a new
        type `File`:

          ```python
          # core/file.py
          FileContent = typing.Union[typing.IO[bytes], bytes, str]
          File = typing.Union[
              # file (or bytes)
              FileContent,
              # (filename, file (or bytes))
              typing.Tuple[typing.Optional[str], FileContent],
              # (filename, file (or bytes), content_type)
              typing.Tuple[typing.Optional[str], FileContent, typing.Optional[str]],
              # (filename, file (or bytes), content_type, headers)
              typing.Tuple[typing.Optional[str], FileContent, typing.Optional[str], typing.Mapping[str, str]],
          ]

          ...

          # service.py
          def post(
              self,
              *,
              file: core.File,
              request_options: typing.Optional[RequestOptions] = None,
          ) -> None:
              """
              Parameters:
                  - file: core.File. See core.File for more documentation
                  - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
              """
          ...

          # main.py
          f = open('report.xls', 'rb')
          service.post(file=f)

          # Or leveraging a tuple
          with open('largefile.zip', 'rb') as f:
            service.post(file=('largefile.zip', f))
          ...
          ```
      type: fix
  version: 0.11.0
  createdAt: '2024-02-19'
  irVersion: 34
- changelogEntry:
    - summary: >
        Python now supports API specifications that leverage lists for file
        upload. Previously, Fern incorrectly made all `list<file>` type requests
        simply `file`.

          ```python
          # service.py
          def post(
              self,
              *,
              file_list: typing.List[core.File],
              request_options: typing.Optional[RequestOptions] = None,
          ) -> None:
              """
              Parameters:
                  - file_list: typing.List[core.File]. See core.File for more documentation
                  - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
              """
          ...

          # main.py
          f1 = open('report.xls', 'rb')
          f2 = open('page.docx', 'rb')
          service.post(file_list=[f1, f2])
          ```
      type: fix
  version: 0.11.0
  createdAt: '2024-02-19'
  irVersion: 34
- changelogEntry:
    - summary: >
        Several bugfixes were made to related to literal properties. If a
        literal is
          used as a query parameeter, header, path parameter, or request parameter, the user
          no longer has to explicitly pass it in.

          For example, the following endpoint

          ```yaml
          endpoints:
            chat_stream:
              request:
                name: ListUsersRequest
                headers:
                  X_API_VERSION: literal<"2022-02-02">
                body:
                  properties:
                    stream: literal<true>
                    query: string
          ```

          would generate the following signature in Python

          ```python
          class Client:

            # The user does not have to pass in api version or stream since
            # they are literals and always the same
            def chat_stream(self, *, query: str) -> None:
          ```
      type: fix
  version: 0.10.3
  createdAt: '2024-02-19'
  irVersion: 31
- changelogEntry:
    - summary: >
        The SDK always sends the enum wire value instead of the name of the
        enum. For example,
          for the following enum,

          ```python
          class Operand(str, enum.Enum):
            GREATER_THAN = ">"
            EQUAL_TO = "="
          ```

          the SDK should always be sending `>` and `=` when making a request.

          This affected enums used in path parameters, query parameters and any request body parameters at
          the first level. To fix, the SDK sends the `.value` attribute of the enum.
      type: fix
  version: 0.10.2
  createdAt: '2024-02-18'
  irVersion: 31
- changelogEntry:
    - summary: >
        Revert #2719 which introduced additional issues with circular references
        within our Python types.
      type: fix
  version: 0.10.2
  createdAt: '2024-02-18'
  irVersion: 31
- changelogEntry:
    - summary: >
        Add support for a RequestOptions object for each generated function
        within Python SDKs. This parameter is an optional final parameter that
        allows for configuring timeout, as well as pass in arbitrary data
        through to the request. RequestOptions is a TypedDict, with optional
        fields, so there's no need to instantiate an object, just pass in the
        relevant keys within a dict!
      type: fix
  version: 0.10.1
  createdAt: '2024-02-14'
  irVersion: 31
- changelogEntry:
    - summary: |
        - `timeout_in_seconds` overrides the timeout for this specific request
      type: fix
  version: 0.10.1
  createdAt: '2024-02-14'
  irVersion: 31
- changelogEntry:
    - summary: |
        - `additional_body_parameters` are expanded into the JSON request body
      type: fix
  version: 0.10.1
  createdAt: '2024-02-14'
  irVersion: 31
- changelogEntry:
    - summary: >
        - `additional_query_parameters` are expanded into the JSON query
        parameters map
      type: fix
  version: 0.10.1
  createdAt: '2024-02-14'
  irVersion: 31
- changelogEntry:
    - summary: |
        - `additional_headers` are expanded into the request's header map
      type: fix
  version: 0.10.1
  createdAt: '2024-02-14'
  irVersion: 31
- changelogEntry:
    - summary: |
        ```python
            client\
              .imdb\
              .create_movie(
                request=CreateMovieRequest(title="title", rating=4.3),
                request_options={
                  "timeout_in_seconds": 99,
                  "additional_body_parameters": {"another": "body parameter"},
                  "additional_headers": {"another": "header"},
                }
              )
            ```
      type: fix
  version: 0.10.1
  createdAt: '2024-02-14'
  irVersion: 31
- changelogEntry:
    - summary: >
        Remove support for Python 3.7. In order to support newer versions of
        libraries we depend on (such as typing and typing-extensions), we must
        move on to Python 3.8. With this change we are also able to:
      type: fix
  version: 0.10.0
  createdAt: '2024-02-13'
  irVersion: 31
- changelogEntry:
    - summary: >
        - Remove the `backports` dependency, as `cached_property` is now
        included within `functools`
      type: fix
  version: 0.10.0
  createdAt: '2024-02-13'
  irVersion: 31
- changelogEntry:
    - summary: >
        - Remove the upper bound dependency on Pydantic which had dropped
        support for Python 3.7
      type: fix
  version: 0.10.0
  createdAt: '2024-02-13'
  irVersion: 31
- changelogEntry:
    - summary: >
        Remove literals from SDK function signatures, as they are not modifiable
        for end users.

          Before:

          ```python
          def get_options(self, *, dry_run: typing_extensions.Literal[True]) -> Options:
            ...
            json=jsonable_encoder({"dryRun": dry_run}),
            ...
          ```

          After:

          ```python
          def get_options(self, *) -> Options:
            ...
            json=jsonable_encoder({"dryRun": "true"}),
          ```
      type: fix
  version: 0.9.1
  createdAt: '2024-02-11'
  irVersion: 31
- changelogEntry:
    - summary: >
        Acknowledge the optionality of a `File` property, previously we were
        requiring all `File` type inputs, even if they were specified as
        optional within the OpenAPI or Fern definition. Now, we check if the
        parameter is required and make the parameter optional if it is not.
      type: fix
  version: 0.9.1
  createdAt: '2024-02-11'
  irVersion: 31
- changelogEntry:
    - summary: |
        The SDK generator now supports whitelabelling. When this is turned on,
          there will be no mention of Fern in the generated code.

          **Note**: You must be on the enterprise tier to enable this mode.
      type: feat
  version: 0.9.0
  createdAt: '2024-02-11'
  irVersion: 31
- changelogEntry:
    - summary: >
        Increase recursion depth to allow for highly nested and complex
        examples,
          this is a temporary solution while the example datamodel is further refined.
      type: fix
  version: 0.8.3-rc0
  createdAt: '2024-01-29'
  irVersion: 31
- changelogEntry:
    - summary: |
        The Python SDK better handles cyclical references. In particular,
          cyclical references are tracked for undiscriminated unions,
          and update_forward_refs is always called with object references.
      type: fix
  version: 0.8.2-rc0
  createdAt: '2024-01-28'
  irVersion: 31
- changelogEntry:
    - summary: |
        If the auth scheme has environment variables specified,
          the generated python client will scan those environment variables.

          For example, for the following Fern Definition

          ```
          auth: APIKey
          auth-schemes:
            APIKey:
              header: X-FERN-API-KEY
              type: string
              env: FERN_API_KEY
          ```

          the generated client will look like

          ```python
          import os

          class Client:

            def __init__(self, *, apiKey: str = os.getenv("FERN_API_KEY"))
          ```
      type: feat
  version: 0.8.1
  createdAt: '2024-01-26'
  irVersion: 31
- changelogEntry:
    - summary: |
        Enums in inlined requests send the appropriate value.

          ```python
          class Operand(str, Enum):
            greater_than = ">"
            equal_to = "="

          # Previously the SDK would just send the operand directly
          def endpoint(self, *, operand: Operand):
            httpx.post(json={"operand": operand})

          # Now, the SDK will send the value of the enum
          def endpoint(self, *, operand: Operand):
            httpx.post(json={"operand": operand.value})
          ```
      type: fix
  version: 0.8.0
  createdAt: '2024-01-25'
  irVersion: 31
- changelogEntry:
    - summary: |
        Intialize this changelog
      type: chore
  version: 0.7.7
  createdAt: '2024-01-21'
  irVersion: 31
