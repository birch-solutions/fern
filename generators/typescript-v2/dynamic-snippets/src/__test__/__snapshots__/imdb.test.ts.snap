// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`imdb (errors) > invalid path parameter 1`] = `
[
  {
    "message": ""invalid" is not a recognized parameter for this endpoint",
    "path": [
      "pathParameters",
      "invalid",
    ],
    "severity": "CRITICAL",
  },
]
`;

exports[`imdb (errors) > invalid request body 1`] = `
[
  {
    "message": ""invalid" is not a recognized parameter for this endpoint",
    "path": [
      "requestBody",
      "invalid",
    ],
    "severity": "CRITICAL",
  },
]
`;

exports[`imdb (errors) > invalid request body property type 1`] = `
[
  {
    "message": "Expected string but got number",
    "path": [
      "requestBody",
      "title",
    ],
    "severity": "CRITICAL",
  },
  {
    "message": "Expected number but got string",
    "path": [
      "requestBody",
      "rating",
    ],
    "severity": "CRITICAL",
  },
]
`;

exports[`imdb (success) > 'GET /movies/{movieId} (simple)' 1`] = `
"const do = () => {
    const client = NewClient(WithToken("<YOUR_API_KEY>"))
    client.Imdb.GetMovie(TODO(), MovieID: )
}
"
`;

exports[`imdb (success) > 'POST /movies/create-movie (simple)' 1`] = `
"const do = () => {
    const client = NewClient(WithToken("<YOUR_API_KEY>"))
    client.Imdb.CreateMovie(TODO(), {
        Title: "The Matrix",
        Rating: 8.2,
    })
}
"
`;

exports[`imdb (sync) > GET /movies/{movieId} 1`] = `
"const do = () => {
    const client = NewClient(WithToken("<YOUR_API_KEY>"))
    client.Imdb.GetMovie(TODO(), MovieID: )
}
"
`;

exports[`imdb (sync) > GET /movies/{movieId} w/ baseURL 1`] = `
"const do = () => {
    const client = NewClient(withBaseURL("http://localhost:8080"), WithToken("<YOUR_API_KEY>"))
    client.Imdb.GetMovie(TODO(), MovieID: )
}
"
`;

exports[`imdb (sync) > GET /movies/{movieId} w/ exportedClientName 1`] = `
"const do = () => {
    const client = NewFernClient(WithToken("<YOUR_API_KEY>"))
    client.Imdb.GetMovie(TODO(), MovieID: )
}
"
`;
