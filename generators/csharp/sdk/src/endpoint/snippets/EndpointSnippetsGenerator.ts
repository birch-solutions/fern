import { ExampleEndpointCall, HttpEndpoint } from "@fern-fern/ir-sdk/api";
import { SdkGeneratorContext } from "../../SdkGeneratorContext";
import { GrpcEndpointGenerator } from "../grpc/GrpcEndpointGenerator";
import { HttpEndpointGenerator } from "../http/HttpEndpointGenerator";
import { HttpPagerEndpointGenerator } from "../http/HttpPagerEndpointGenerator";

export interface EndpointSnippets {
    autogenerated: SingleEndpointSnippet[];
    userSpecified: SingleEndpointSnippet[];
}

export interface SingleEndpointSnippet {
    exampleIdentifier: string | undefined;
    imports: string | undefined;
    endpointCall: string;
}

export class EndpointSnippetsGenerator {
    public static CLIENT_VARIABLE_NAME = "client";

    private readonly context: SdkGeneratorContext;
    private readonly grpcEndpointGenerator: GrpcEndpointGenerator;
    private readonly httpEndpointGenerator: HttpEndpointGenerator;
    private readonly httpPagerEndpointGenerator: HttpPagerEndpointGenerator;
    private readonly snippets: Map<string, EndpointSnippets>;
    constructor({ context }: { context: SdkGeneratorContext }) {
        this.context = context;
        this.grpcEndpointGenerator = new GrpcEndpointGenerator({ context });
        this.httpEndpointGenerator = new HttpEndpointGenerator({ context });
        this.httpPagerEndpointGenerator = new HttpPagerEndpointGenerator({ context });
        this.snippets = this.generate();
    }

    public getSnippetsForEndpoint(endpointId: string): EndpointSnippets | undefined {
        return this.snippets.get(endpointId);
    }

    public getPagerSnippetId(endpointId: string): string {
        return `${endpointId}-pager`;
    }

    private generate(): Map<string, EndpointSnippets> {
        const endpointSnippetsById = new Map<string, EndpointSnippets>();
        for (const [serviceId, service] of Object.entries(this.context.ir.services)) {
            for (const endpoint of service.endpoints) {
                const endpointIdsWithGenerator = [{ id: endpoint.id, isPager: false }];
                if (endpoint.pagination) {
                    endpointIdsWithGenerator.push({ id: this.getPagerSnippetId(endpoint.id), isPager: true });
                }
                for (const { id, isPager } of endpointIdsWithGenerator) {
                    const autogenerated = endpoint.autogeneratedExamples
                        .flatMap((example) =>
                            this.generateSingleEndpointSnippet({
                                endpoint,
                                example: example.example,
                                serviceId,
                                generatePagerSnippet: isPager
                            })
                        )
                        .filter((snippet): snippet is SingleEndpointSnippet => snippet != null);
                    const userSpecified = endpoint.userSpecifiedExamples
                        .flatMap((example) =>
                            example.example != null
                                ? this.generateSingleEndpointSnippet({
                                      endpoint,
                                      example: example.example,
                                      serviceId,
                                      generatePagerSnippet: isPager
                                  })
                                : undefined
                        )
                        .filter((snippet): snippet is SingleEndpointSnippet => snippet != null);
                    if (autogenerated.length > 0 || userSpecified.length > 0) {
                        endpointSnippetsById.set(id, { autogenerated, userSpecified });
                    }
                }
            }
        }
        return endpointSnippetsById;
    }

    public generateSingleEndpointSnippet({
        endpoint,
        example,
        serviceId,
        generatePagerSnippet = false
    }: {
        endpoint: HttpEndpoint;
        example: ExampleEndpointCall;
        serviceId: string;
        generatePagerSnippet?: boolean;
    }): SingleEndpointSnippet | undefined {
        const isGrpc = this.context.getGrpcClientInfoForServiceId(serviceId);
        const methodInvocation = isGrpc
            ? this.grpcEndpointGenerator.generateGrpcEndpointSnippet({
                  example,
                  endpoint,
                  serviceId,
                  clientVariableName: EndpointSnippetsGenerator.CLIENT_VARIABLE_NAME,
                  parseDatetimes: false
              })
            : generatePagerSnippet
            ? this.httpPagerEndpointGenerator.generateHttpEndpointSnippet({
                  example,
                  endpoint,
                  clientVariableName: EndpointSnippetsGenerator.CLIENT_VARIABLE_NAME,
                  serviceId,
                  getResult: true,
                  parseDatetimes: false
              })
            : this.httpEndpointGenerator.generateHttpEndpointSnippet({
                  example,
                  endpoint,
                  clientVariableName: EndpointSnippetsGenerator.CLIENT_VARIABLE_NAME,
                  serviceId,
                  getResult: true,
                  parseDatetimes: false
              });
        if (methodInvocation == null) {
            return undefined;
        }
        const formattedAstNodeSnippet = methodInvocation.toFormattedSnippet({
            allNamespaceSegments: this.context.getAllNamespaceSegments(),
            allTypeClassReferences: this.context.getAllTypeClassReferences(),
            rootNamespace: this.context.getNamespace(),
            customConfig: this.context.customConfig
        });
        return {
            imports: formattedAstNodeSnippet.imports,
            endpointCall: formattedAstNodeSnippet.body,
            exampleIdentifier: example.name?.originalName
        };
    }
}
