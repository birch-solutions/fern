import { CSharpFile } from "@fern-api/csharp-codegen";
import { ExampleEndpointCall } from "@fern-fern/ir-sdk/api";
import { SdkGeneratorContext } from "./SdkGeneratorContext";
import { BaseWireTestGenerator } from "./test-generation/wire/BaseWireTestGenerator";
import { WireTestGenerator } from "./test-generation/wire/WireTestGenerator";

export function generateSdkTests({ context }: { context: SdkGeneratorContext }): CSharpFile[] {
    const files: CSharpFile[] = [];
    // wire tests
    files.push(new BaseWireTestGenerator(context).generate());
    for (const [serviceId, service] of Object.entries(context.ir.services)) {
        for (const endpoint of service.endpoints) {
            // TODO: support other request body
            if (endpoint.requestBody?.type === "bytes" || endpoint.requestBody?.type === "fileUpload") {
                continue;
            }
            const allExamples = [...endpoint.autogeneratedExamples, ...endpoint.userSpecifiedExamples].map(
                (example) => example.example
            );
            // TODO: support other response body types
            const useableExamples = allExamples.filter((example): example is ExampleEndpointCall => {
                const response = example?.response;
                return response?.type === "ok" && response.value.type === "body";
            });
            if (useableExamples.length === 0) {
                continue;
            }
            const file = new WireTestGenerator(
                context,
                useableExamples,
                endpoint,
                serviceId,
                service.name.fernFilepath
            ).generate();
            files.push(file);
        }
    }
    return files;
}
