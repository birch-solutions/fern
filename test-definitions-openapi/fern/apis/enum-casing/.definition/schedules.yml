imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    org-schedule-fragments-create:
      path: /org-schedule-fragments.create
      method: POST
      auth: true
      docs: Creates an organization schedule fragment.
      request:
        name: OrgScheduleFragmentsCreateRequest
        body:
          properties:
            from:
              type: datetime
              docs: |
                Date (inclusive) on which the organization schedule fragment
                begins.
            intervals:
              docs: The intervals that comprise the schedule fragment.
              type: list<root.CreateOrgScheduleInterval>
            name:
              type: string
              docs: Name of the organization schedule fragment.
            region_codes:
              docs: >
                CLDR region code of the countries/regions it is meant to be
                valid

                for. Does not drive logic, serves only for easier filtering and

                organization.
              type: optional<list<string>>
            to:
              type: datetime
              docs: |
                Date (exclusive) on which the organization schedule fragment's
                validity ends.
      response:
        docs: Success.
        type: root.OrgScheduleFragmentsCreateResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request:
            from: '2023-01-01T12:00:00Z'
            intervals:
              - from: '2023-01-01T12:00:00Z'
                name: name
                to: '2023-01-01T12:00:00Z'
            name: name
            to: '2023-01-01T12:00:00Z'
          response:
            body:
              org_schedule_fragment:
                created_date: '2023-01-01T12:00:00Z'
                display_id: display_id
                id: id
                modified_date: '2023-01-01T12:00:00Z'
                from: '2023-01-01T12:00:00Z'
                intervals:
                  - {}
                name: name
                region_codes:
                  - region_codes
                status: archived
                to: '2023-01-01T12:00:00Z'
    org-schedule-fragments-get:
      path: /org-schedule-fragments.get
      method: GET
      auth: true
      docs: Gets an organization schedule fragment.
      request:
        name: OrgScheduleFragmentsGetQuery
        query-parameters:
          id:
            type: string
            docs: Organization schedule Fragment ID.
      response:
        docs: Success.
        type: root.OrgScheduleFragmentsGetResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - query-parameters:
            id: id
          response:
            body:
              org_schedule_fragment:
                created_date: '2023-01-01T12:00:00Z'
                display_id: display_id
                id: id
                modified_date: '2023-01-01T12:00:00Z'
                from: '2023-01-01T12:00:00Z'
                intervals:
                  - {}
                name: name
                region_codes:
                  - region_codes
                status: archived
                to: '2023-01-01T12:00:00Z'
    org-schedule-fragments-get-post:
      path: /org-schedule-fragments.get
      method: POST
      auth: true
      docs: Gets an organization schedule fragment.
      request:
        name: OrgScheduleFragmentsGetRequest
        body:
          properties:
            id:
              type: string
              docs: Organization schedule Fragment ID.
      response:
        docs: Success.
        type: root.OrgScheduleFragmentsGetResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request:
            id: id
          response:
            body:
              org_schedule_fragment:
                created_date: '2023-01-01T12:00:00Z'
                display_id: display_id
                id: id
                modified_date: '2023-01-01T12:00:00Z'
                from: '2023-01-01T12:00:00Z'
                intervals:
                  - {}
                name: name
                region_codes:
                  - region_codes
                status: archived
                to: '2023-01-01T12:00:00Z'
    org-schedule-fragments-transition:
      path: /org-schedule-fragments.transition
      method: POST
      auth: true
      docs: Changes stage of an organization schedule fragment.
      request:
        name: OrgScheduleFragmentsTransitionRequest
        body:
          properties:
            id:
              type: string
              docs: Organization schedule Fragment ID.
            status: root.OrgScheduleFragmentStatus
      response:
        docs: Success.
        type: root.OrgScheduleFragmentsTransitionResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request:
            id: id
            status: archived
          response:
            body:
              org_schedule_fragment:
                created_date: '2023-01-01T12:00:00Z'
                display_id: display_id
                id: id
                modified_date: '2023-01-01T12:00:00Z'
                from: '2023-01-01T12:00:00Z'
                intervals:
                  - {}
                name: name
                region_codes:
                  - region_codes
                status: archived
                to: '2023-01-01T12:00:00Z'
    org-schedules-create:
      path: /org-schedules.create
      method: POST
      auth: true
      docs: |
        Creates an organization schedule with a default weekly organization
        schedule and a list of organization schedule fragments.
      request:
        name: OrgSchedulesCreateRequest
        body:
          properties:
            default_weekly_org_schedule: optional<root.SetWeeklyOrgSchedule>
            min_valid_days:
              docs: >
                Organization schedule must be valid for at least this many days
                in

                the future. Meaning organization schedule fragments must cover
                this

                period. 0 if omitted.
              type: optional<integer>
            name:
              type: string
              docs: Human-readable name.
            org_schedule_fragments:
              docs: >
                List of organization schedule fragments with no overlaps or
                gaps.
              type: optional<list<root.SetOrgScheduleFragmentSummary>>
            timezone:
              type: string
              docs: >
                Timezone in which the organization schedule applies. Expected to
                be

                a valid IANA time zone name such as America/New_York.
            weekly_org_schedules:
              docs: |
                If this day belongs to a named period according to the currently
                active organization schedule fragment, a weekly organization
                schedule from this list with the corresponding name will apply.
              type: optional<list<root.SetWeeklyOrgSchedule>>
      response:
        docs: Success.
        type: root.OrgSchedulesCreateResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request:
            name: name
            timezone: timezone
          response:
            body:
              org_schedule:
                created_date: '2023-01-01T12:00:00Z'
                display_id: display_id
                id: id
                modified_date: '2023-01-01T12:00:00Z'
                default_weekly_org_schedule:
                  default_weekly_org_schedule:
                    key: value
                min_valid_days: 1
                name: name
                org_schedule_fragments:
                  - {}
                status: archived
                timezone: timezone
                valid_until: '2023-01-01T12:00:00Z'
                weekly_org_schedules:
                  - {}
    org-schedules-get:
      path: /org-schedules.get
      method: GET
      auth: true
      docs: Gets an organization schedule.
      request:
        name: OrgSchedulesGetQuery
        query-parameters:
          id:
            type: string
            docs: Organization schedule ID.
      response:
        docs: Success.
        type: root.OrgSchedulesGetResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - query-parameters:
            id: id
          response:
            body:
              org_schedule:
                created_date: '2023-01-01T12:00:00Z'
                display_id: display_id
                id: id
                modified_date: '2023-01-01T12:00:00Z'
                default_weekly_org_schedule:
                  default_weekly_org_schedule:
                    key: value
                min_valid_days: 1
                name: name
                org_schedule_fragments:
                  - {}
                status: archived
                timezone: timezone
                valid_until: '2023-01-01T12:00:00Z'
                weekly_org_schedules:
                  - {}
    org-schedules-get-post:
      path: /org-schedules.get
      method: POST
      auth: true
      docs: Gets an organization schedule.
      request:
        name: OrgSchedulesGetRequest
        body:
          properties:
            id:
              type: string
              docs: Organization schedule ID.
      response:
        docs: Success.
        type: root.OrgSchedulesGetResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request:
            id: id
          response:
            body:
              org_schedule:
                created_date: '2023-01-01T12:00:00Z'
                display_id: display_id
                id: id
                modified_date: '2023-01-01T12:00:00Z'
                default_weekly_org_schedule:
                  default_weekly_org_schedule:
                    key: value
                min_valid_days: 1
                name: name
                org_schedule_fragments:
                  - {}
                status: archived
                timezone: timezone
                valid_until: '2023-01-01T12:00:00Z'
                weekly_org_schedules:
                  - {}
    org-schedules-list:
      path: /org-schedules.list
      method: GET
      auth: true
      docs: Gets list of organization schedules.
      request:
        name: OrgSchedulesListQuery
        query-parameters:
          created_by_id:
            type: optional<string>
            allow-multiple: true
            docs: Creator ID the filter matches.
          cursor:
            type: optional<string>
            docs: >
              The cursor to resume iteration from. If not provided, then
              iteration

              starts from the beginning.
          limit:
            type: optional<integer>
            docs: >
              Max number of organization schedules returned in a page. Default
              is

              50.
          mode:
            type: optional<root.ListMode>
            docs: |
              The iteration mode to use, otherwise if not set, then "after" is
              used.
          status:
            type: optional<root.OrgScheduleStatus>
            allow-multiple: true
            docs: The organization schedule statuses the filter matches.
      response:
        docs: Success.
        type: root.OrgSchedulesListResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - response:
            body:
              next_cursor: next_cursor
              org_schedules:
                - created_date: '2023-01-01T12:00:00Z'
                  display_id: display_id
                  id: id
                  modified_date: '2023-01-01T12:00:00Z'
                  min_valid_days: 1
                  name: name
                  org_schedule_fragments:
                    - {}
                  status: archived
                  timezone: timezone
                  valid_until: '2023-01-01T12:00:00Z'
                  weekly_org_schedules:
                    - {}
              prev_cursor: prev_cursor
    org-schedules-list-post:
      path: /org-schedules.list
      method: POST
      auth: true
      docs: Gets list of organization schedules.
      request:
        name: OrgSchedulesListRequest
        body:
          properties:
            created_by_id:
              docs: Creator ID the filter matches.
              type: optional<list<string>>
            cursor:
              docs: |
                The cursor to resume iteration from. If not provided, then
                iteration starts from the beginning.
              type: optional<string>
            limit:
              docs: >
                Max number of organization schedules returned in a page. Default
                is

                50.
              type: optional<integer>
            mode: optional<root.ListMode>
            status:
              docs: The organization schedule statuses the filter matches.
              type: optional<list<root.OrgScheduleStatus>>
            valid_until: optional<root.DateFilter>
      response:
        docs: Success.
        type: root.OrgSchedulesListResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request: {}
          response:
            body:
              next_cursor: next_cursor
              org_schedules:
                - created_date: '2023-01-01T12:00:00Z'
                  display_id: display_id
                  id: id
                  modified_date: '2023-01-01T12:00:00Z'
                  min_valid_days: 1
                  name: name
                  org_schedule_fragments:
                    - {}
                  status: archived
                  timezone: timezone
                  valid_until: '2023-01-01T12:00:00Z'
                  weekly_org_schedules:
                    - {}
              prev_cursor: prev_cursor
    org-schedules-set-future:
      path: /org-schedules.set-future
      method: POST
      auth: true
      docs: |
        Sets next organization schedule fragment which must begin the day the
        last existing fragment ends.
      request:
        name: OrgSchedulesSetFutureRequest
        body:
          properties:
            id:
              type: string
              docs: Organization schedule ID.
            org_schedule_fragment_id:
              type: string
              docs: Organization schedule Fragment ID.
      response:
        docs: Success.
        type: root.OrgSchedulesSetFutureResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request:
            id: id
            org_schedule_fragment_id: org_schedule_fragment_id
          response:
            body:
              org_schedule:
                created_date: '2023-01-01T12:00:00Z'
                display_id: display_id
                id: id
                modified_date: '2023-01-01T12:00:00Z'
                default_weekly_org_schedule:
                  default_weekly_org_schedule:
                    key: value
                min_valid_days: 1
                name: name
                org_schedule_fragments:
                  - {}
                status: archived
                timezone: timezone
                valid_until: '2023-01-01T12:00:00Z'
                weekly_org_schedules:
                  - {}
    org-schedules-transition:
      path: /org-schedules.transition
      method: POST
      auth: true
      docs: Publishes or archives an organization schedule.
      request:
        name: OrgSchedulesTransitionRequest
        body:
          properties:
            id:
              type: string
              docs: Organization schedule ID.
            status: root.OrgScheduleStatus
      response:
        docs: Success.
        type: root.OrgSchedulesTransitionResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request:
            id: id
            status: archived
          response:
            body:
              org_schedule:
                created_date: '2023-01-01T12:00:00Z'
                display_id: display_id
                id: id
                modified_date: '2023-01-01T12:00:00Z'
                default_weekly_org_schedule:
                  default_weekly_org_schedule:
                    key: value
                min_valid_days: 1
                name: name
                org_schedule_fragments:
                  - {}
                status: archived
                timezone: timezone
                valid_until: '2023-01-01T12:00:00Z'
                weekly_org_schedules:
                  - {}
    org-schedules-update:
      path: /org-schedules.update
      method: POST
      auth: true
      docs: Updates an organization schedule.
      request:
        name: OrgSchedulesUpdateRequest
        body:
          properties:
            default_weekly_org_schedule: optional<root.SetWeeklyOrgSchedule>
            id:
              type: string
              docs: Organization schedule ID.
            min_valid_days:
              docs: >
                Organization schedule must be valid for at least this many days
                in

                the future. Meaning organization schedule fragments must cover
                this

                period. 0 if omitted.
              type: optional<integer>
            name:
              docs: Human-readable name.
              type: optional<string>
            org_schedule_fragments:
              docs: >
                List of organization schedule fragments with no overlaps or
                gaps.
              type: optional<list<root.SetOrgScheduleFragmentSummary>>
            timezone:
              docs: >
                Timezone in which the organization schedule applies. Expected to
                be

                a valid IANA time zone name such as America/New_York.
              type: optional<string>
            weekly_org_schedules:
              docs: |
                If this day belongs to a named period according to the currently
                active organization schedule fragment, a weekly organization
                schedule from this list with the corresponding name will apply.
              type: optional<list<root.SetWeeklyOrgSchedule>>
      response:
        docs: Success.
        type: root.OrgSchedulesUpdateResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request:
            id: id
          response:
            body:
              org_schedule:
                created_date: '2023-01-01T12:00:00Z'
                display_id: display_id
                id: id
                modified_date: '2023-01-01T12:00:00Z'
                default_weekly_org_schedule:
                  default_weekly_org_schedule:
                    key: value
                min_valid_days: 1
                name: name
                org_schedule_fragments:
                  - {}
                status: archived
                timezone: timezone
                valid_until: '2023-01-01T12:00:00Z'
                weekly_org_schedules:
                  - {}
  display-name: schedules
docs: Management APIs for availability schedules.
