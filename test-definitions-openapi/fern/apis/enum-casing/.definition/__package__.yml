types:
  AccessLevel:
    enum:
      - external
      - internal
      - private
      - public
      - restricted
  account:
    properties:
      artifacts:
        docs: The artifacts attached to the Account.
        type: optional<list<ArtifactSummary>>
      custom_fields:
        docs: Custom fields.
        type: optional<map<string, unknown>>
      custom_schema_fragments:
        docs: Custom schema fragments.
        type: optional<list<string>>
      description:
        docs: Description of the corresponding Account.
        type: optional<string>
      domains:
        docs: Company's domain names. Example - 'devrev.ai'.
        type: optional<list<string>>
      external_refs:
        docs: |
          External refs are unique identifiers from your customer system of
          records, stored as a list.
        type: list<string>
      owned_by:
        docs: List of Dev user IDs owning this Account.
        type: list<UserSummary>
      stock_schema_fragment:
        docs: Stock schema fragment.
        type: optional<string>
      subtype:
        docs: Subtype corresponding to the custom type fragment.
        type: optional<string>
      tags:
        docs: Tags associated with an object.
        type: optional<list<TagWithValue>>
      tier:
        docs: The Tier of the corresponding Account.
        type: optional<string>
    extends:
      - OrgBase
  AccountSearchSummary:
    properties:
      account: AccountSummary
    extends:
      - SearchSummaryBase
  SearchSummaryBase:
    properties:
      modified_date:
        docs: Timestamp when the object was last modified.
        type: optional<datetime>
      snippet:
        docs: Text snippet where the search hit occurred.
        type: optional<string>
  AccountSummary: OrgBaseSummary
  AccountsCreateResponse:
    docs: The response to creating a new account.
    properties:
      account: account
      default_rev_org: RevOrg
  AccountsDeleteResponse:
    docs: The response to deleting an account.
    type: map<string, unknown>
  AccountsExportResponse:
    docs: The response to exporting a collection of accounts.
    properties:
      accounts:
        docs: The exported accounts.
        type: list<account>
  AccountsFilters:
    properties:
      created_by:
        docs: Filters for accounts created by the specified user(s).
        type: optional<list<string>>
      created_date: optional<DateTimeFilter>
      custom_fields:
        docs: Filters for custom fields.
        type: optional<map<string, unknown>>
      display_name:
        docs: Array of display names of accounts to be filtered.
        type: optional<list<string>>
      domains:
        docs: Domains for accounts to be filtered.
        type: optional<list<string>>
      external_refs:
        docs: Array of references of accounts to be filtered.
        type: optional<list<string>>
      modified_date: optional<DateTimeFilter>
      owned_by:
        docs: Filters for accounts owned by the specified user(s).
        type: optional<list<string>>
      stage:
        docs: Filters for accounts on specified stages.
        type: optional<list<string>>
      tags:
        docs: List of tags to be filtered.
        type: optional<list<string>>
  AccountsGetResponse:
    docs: The returned account.
    properties:
      account: account
  AccountsListResponse:
    docs: |
      The response to listing all accounts matching the filter criteria.
    properties:
      accounts:
        docs: List containing all the accounts
        type: list<account>
      next_cursor:
        docs: |
          The cursor used to iterate subsequent results in accordance to the
          sort order. If not set, then no later elements exist.
        type: optional<string>
      prev_cursor:
        docs: |
          The cursor used to iterate preceding results in accordance to the
          sort order. If not set, then no prior elements exist.
        type: optional<string>
  AccountsUpdateRequestArtifacts:
    properties:
      set:
        docs: Sets the IDs to the provided artifact IDs.
        type: optional<list<string>>
  AccountsUpdateResponse:
    docs: Updated account object.
    properties:
      account: account
  AggregatedSchema:
    docs: List of custom fields from multiple source fragments.
    type: map<string, unknown>
  AggregatedSchemaGetResponse:
    properties:
      schema: AggregatedSchema
  AggregationDetail:
    docs: Stores aggregation type and dimension information.
    properties:
      aggregation_type: AggregationDetailAggregationType
      unique_dimension:
        docs: |
          Unique dimension if provided to be considered for grouping metering
          data for the UOM.
        type: optional<string>
  AggregationDetailAggregationType:
    enum:
      - duration
      - latest
      - maximum
      - minimum
      - oldest
      - running_total
      - sum
      - unique_count
    docs: |
      Aggregation type to be used while aggregating the metering data for the
      UOM. 1] Sum - sum of all the values for the meter in a given period Ex.
      { M1:2, M1:4 } => {M1:6} 2] Minimum - min of all the values for the
      meter in a given period Ex. { M1:2, M1:4 } => {M1:2} 3] Maximum - max
      of all the values for the meter in a given period Ex. { M1:2, M1:4 } =>
      {M1:4} 4] Unique Count - Sum of distinct unique dimension observed for
      the meter in the given period (not considering the data from the
      previous billing period) Ex. January {M1:{VM:VM0}}, February
      {M1:{VM:VM1}, M1:{VM:VM2}, M1:{VM:VM1}} => {M1:2} 5] Running Total -
      Sum of distinct active unique dimension observed for a meter in the
      given period, taking into consideration the active data from the
      previous billing cycle Ex. January {M1:{VM:VM0,on}, {M1:{VM:VM1,off}
      February {M1:{VM:VM2, on}, M1:{VM:VM2, off}, M1:{VM:VM3, on}} => {M1:3}
      6] Duration - Sum of distinct active unique dimension duration for a
      meter in the given period, taking into consideration the active data
      from the previous month Ex. January15 {M1:{VM:VM0,on, 4}} February15
      {M1:{VM:VM0,off}, February18 {M1:{VM:VM1,on,5} => M1->
      30*4*charge_per_day + 10*5*charge_per_day 7] Latest - consider the
      latest/last meter in the given period 8] Oldest - consider the
      oldest/first record in the given period.
  AppFragment:
    properties:
      app:
        docs: App this fragment applies to.
        type: optional<string>
    extends:
      - CustomSchemaFragmentBase
  CustomSchemaFragmentBase:
    properties:
      conditions:
        docs: The conditions associated with the fields.
        type: optional<list<CustomSchemaFragmentCondition>>
      deprecated:
        docs: |
          Indicates if the fragment has been deprecated. Modifications to
          this field are done in-place and don't result in creation of a new
          fragment in chain.
        type: optional<boolean>
      description:
        docs: Description of the custom schema fragment.
        type: optional<string>
      fields:
        docs: List of all fields in this custom schema fragment.
        type: optional<list<SchemaFieldDescriptor>>
      fragment_type: optional<CustomSchemaFragmentFragmentType>
      leaf_type:
        docs: Leaf type this fragment applies to.
        type: optional<string>
      new_fragment_ref: optional<CustomSchemaFragmentSummary>
      old_fragment_ref: optional<CustomSchemaFragmentSummary>
    extends:
      - AtomBase
  AtomBase:
    properties:
      created_by: optional<UserSummary>
      created_date:
        docs: Timestamp when the object was created.
        type: optional<datetime>
      display_id:
        docs: Human-readable object ID unique to the Dev organization.
        type: optional<string>
      id:
        type: string
        docs: Globally unique object ID.
      modified_by: optional<UserSummary>
      modified_date:
        docs: Timestamp when the object was last modified.
        type: optional<datetime>
  AppFragmentSummary: CustomSchemaFragmentBaseSummary
  article:
    properties:
      applies_to_parts:
        docs: Details of the parts relevant to the article.
        type: list<PartSummary>
      description:
        docs: Description of the article.
        type: optional<string>
      extracted_content:
        docs: Artifacts containing the extracted content.
        type: optional<list<ArtifactSummary>>
      parent: optional<DirectorySummary>
      rank:
        docs: Rank of the article.
        type: optional<string>
      resource: optional<resource>
      title:
        docs: Title of the article.
        type: optional<string>
    extends:
      - AtomBase
  ArticleSearchSummary:
    properties:
      article: ArticleSummary
    extends:
      - SearchSummaryBase
  ArticleStatus:
    enum:
      - archived
      - draft
      - published
      - review_needed
    docs: Status of the article.
  ArticleSummary:
    properties:
      resource: optional<ResourceSummary>
      title:
        docs: Title of the article.
        type: optional<string>
    extends:
      - AtomBaseSummary
  ArticlesCountResponse:
    properties:
      count:
        type: integer
        docs: The total number of articles matching the filter.
  ArticlesCreateRequestResource:
    properties:
      artifacts:
        docs: IDs of the artifacts.
        type: optional<list<string>>
      published_version:
        docs: The latest published version.
        type: optional<string>
      url:
        docs: URL of the external article.
        type: optional<string>
  ArticlesCreateResponse:
    docs: Create article response.
    properties:
      article: article
  ArticlesDeleteResponse: map<string, unknown>
  ArticlesGetResponse:
    docs: Get article response.
    properties:
      article: article
  ArticlesListResponse:
    docs: List articles response.
    properties:
      articles:
        docs: The article entries matching the request.
        type: list<article>
      next_cursor:
        docs: |
          The cursor used to iterate subsequent results in accordance to the
          sort order. If not set, then no later elements exist.
        type: optional<string>
      prev_cursor:
        docs: |
          The cursor used to iterate preceding results in accordance to the
          sort order. If not set, then no prior elements exist.
        type: optional<string>
      total:
        type: integer
        docs: Total number of article items for the request.
  ArticlesUpdateRequestAppliesToParts:
    properties:
      set:
        docs: Updates the parts that the article applies to.
        type: optional<list<string>>
  ArticlesUpdateRequestArtifacts:
    properties:
      set:
        docs: Updates IDs of the artifacts.
        type: optional<list<string>>
  ArticlesUpdateRequestAuthoredBy:
    properties:
      set:
        docs: Sets the users that authored the article.
        type: optional<list<string>>
  ArticlesUpdateRequestExtractedContent:
    properties:
      set:
        docs: Update the ID of the extracted content.
        type: optional<list<string>>
  ArticlesUpdateRequestOwnedBy:
    properties:
      set:
        docs: |
          Sets the owner IDs to the provided user IDs. This must not be
          empty.
        type: optional<list<string>>
  ArticlesUpdateRequestReorder:
    properties:
      after:
        docs: The article after which the reordered article is placed.
        type: optional<string>
      before:
        docs: |
          The article before which the reordered article is placed.
        type: optional<string>
  ArticlesUpdateRequestSharedWith:
    properties:
      set:
        docs: Sets the field to the provided membership list.
        type: optional<list<SharedWithMembership>>
  ArticlesUpdateRequestTags:
    properties:
      set:
        docs: Sets the provided tags on the article.
        type: optional<list<SetTagWithValue>>
  ArticlesUpdateResponse:
    properties:
      article: article
  Artifact: AtomBase
  ArtifactSearchSummary:
    properties:
      artifact: ArtifactSummary
    extends:
      - SearchSummaryBase
  ArtifactSummary: AtomBaseSummary
  ArtifactVersion:
    docs: The version of the artifact.
    properties:
      modified_by: optional<UserSummary>
      timestamp:
        type: datetime
        docs: The timestamp at which the version was created.
      version:
        type: string
        docs: The version of the artifact.
  ArtifactsGetResponse:
    docs: The response to getting an artifact's information.
    properties:
      artifact: Artifact
      version: ArtifactVersion
  ArtifactsListResponse:
    docs: The response to list artifacts attached to an object.
    properties:
      artifacts:
        docs: The artifact's information.
        type: list<Artifact>
  ArtifactsLocateResponse:
    docs: The response to getting an artifact's download URL.
    properties:
      expires_at:
        docs: The expiration timestamp of the URL.
        type: optional<datetime>
      url:
        type: string
        docs: The artifact's download URL.
  ArtifactsPrepareResponse:
    docs: The response to preparing a URL to upload a file.
    properties:
      form_data:
        docs: The POST policy form data.
        type: list<ArtifactsPrepareResponseFormData>
      id:
        type: string
        docs: The generated artifact's ID.
      url:
        type: string
        docs: The URL that the file's data should be uploaded to.
  ArtifactsPrepareResponseFormData:
    properties:
      key:
        type: string
        docs: Key of the form field.
      value:
        type: string
        docs: Value corresponding to the key.
  ArtifactsVersionsPrepareResponse:
    docs: The response to preparing a new artifact version.
    properties:
      form_data:
        docs: The POST policy form data.
        type: list<ArtifactsVersionsPrepareResponseFormData>
      url:
        type: string
        docs: The URL that the file's data should be uploaded to.
  ArtifactsVersionsPrepareResponseFormData:
    properties:
      key:
        type: string
        docs: Key of the form field.
      value:
        type: string
        docs: Value corresponding to the key.
  AtomBaseSummary:
    properties:
      display_id:
        docs: Human-readable object ID unique to the Dev organization.
        type: optional<string>
      id:
        type: string
        docs: Globally unique object ID.
  AtomSummary:
    discriminant: type
    base-properties: {}
    union:
      account: AccountSummary
      app_fragment: AppFragmentSummary
      capability: CapabilitySummary
      conversation: ConversationSummary
      custom_type_fragment: CustomTypeFragmentSummary
      dev_user: DevUserSummary
      engagement: EngagementSummary
      enhancement: EnhancementSummary
      feature: FeatureSummary
      issue: IssueSummary
      meeting: MeetingSummary
      opportunity: OpportunitySummary
      product: ProductSummary
      rev_org: RevOrgSummary
      rev_user: RevUserSummary
      service_account: ServiceAccountSummary
      sys_user: SysUserSummary
      tag: TagSummary
      task: TaskSummary
      tenant_fragment: TenantFragmentSummary
      ticket: TicketSummary
      timeline_comment: TimelineCommentSummary
      webhook: WebhookSummary
  AtomType:
    enum:
      - account
      - app_fragment
      - capability
      - conversation
      - custom_type_fragment
      - dev_user
      - engagement
      - enhancement
      - feature
      - issue
      - meeting
      - opportunity
      - product
      - rev_org
      - rev_user
      - service_account
      - sys_user
      - tag
      - task
      - tenant_fragment
      - ticket
      - timeline_comment
      - webhook
  AuthConnection:
    discriminant: type
    base-properties:
      display_name:
        docs: |
          Display name of the authentication connection. This name will be
          visible to all the users when they sign in to this Dev
          organization. For example, if the display_name is 'abclogin', then
          it would appear on the login button as 'Log in to abclogin'.
        type: optional<string>
      enabled:
        docs: |
          Whether the authentication connection is enabled or disabled. If
          set to false, the authentication connection will not show up on the
          login screen as a login option.
        type: optional<boolean>
      id:
        type: string
        docs: ID of the authentication connection.
    docs: |
      Connection object that specifies the configuration for an
      authentication connection that is set up for a Dev organization.
    union:
      google_apps: AuthConnectionOptionsGoogleApps
      oidc: AuthConnectionOptionsOidc
      samlp: AuthConnectionOptionsSaml
      social: AuthConnectionOptionsSocial
      waad: AuthConnectionOptionsAzureAd
  AuthConnectionOptionsAzureAd:
    docs: |
      Object encapsulating the configuration parameters for an Azure AD
      authentication connection.
    properties:
      client_id:
        docs: Client ID for the Azure authentication connection.
        type: optional<string>
      client_secret:
        docs: Client secret for the Azure authentication connection.
        type: optional<string>
      domain:
        docs: Domain URL of the Azure authentication connection.
        type: optional<string>
  AuthConnectionOptionsGoogleApps:
    docs: |
      Object encapsulating the configuration parameters for a Google Apps
      authentication connection.
    properties:
      client_id:
        docs: Client ID for the Google Apps authentication connection.
        type: optional<string>
      client_secret:
        docs: |
          Client secret for the Google Apps authentication connection.
        type: optional<string>
      tenant_domain:
        docs: |
          Tenant domain URL of the Google Apps authentication connection.
        type: optional<string>
  AuthConnectionOptionsOidc:
    docs: |
      Object encapsulating the configuration parameters for an OIDC
      authentication connection.
    properties:
      client_id:
        docs: Client ID for the OIDC authentication connection.
        type: optional<string>
      client_secret:
        docs: Client secret for the OIDC authentication connection.
        type: optional<string>
      issuer:
        docs: Issuer URL of the OIDC authentication connection.
        type: optional<string>
  AuthConnectionOptionsSaml:
    docs: |
      Object encapsulating the configuration parameters for a SAML
      authentication connection.
    properties:
      sign_in_endpoint:
        docs: Sign In endpoint for the SAML authentication connection.
        type: optional<string>
      signing_cert:
        docs: |
          Signing certificate for the SAML authentication connection.
        type: optional<string>
  AuthConnectionOptionsSocial: map<string, unknown>
  AuthConnectionToggle:
    enum:
      - disable
      - enable
  AuthConnectionType:
    enum:
      - google_apps
      - oidc
      - samlp
      - social
      - waad
    docs: |
      Defines the type for the authentication connection. The configuration
      for each authentication connection will depend on the type value.
  AuthToken:
    properties:
      client_id:
        docs: |
          An identifier that represents the application that requested the
          token. Only applicable for application access tokens.
        type: optional<string>
      expires_at:
        docs: The time at which the token expires.
        type: optional<datetime>
      issued_at:
        docs: The time at which the token was issued.
        type: optional<datetime>
      requested_token_type: optional<AuthTokenRequestedTokenType>
      scopes:
        docs: The scopes associated with the issued token.
        type: optional<list<string>>
      status: optional<AuthTokenStatus>
      subject:
        docs: The subject of the token.
        type: optional<string>
      token_hint:
        docs: A hint that identifies the token.
        type: optional<string>
    extends:
      - AtomBase
  AuthTokenGrantType:
    enum:
      - value: urn:devrev:params:oauth:grant-type:token-issue
        name: urn-devrev-params-oauth-grant-type-token-issue
      - value: urn:ietf:params:oauth:grant-type:token-exchange
        name: urn-ietf-params-oauth-grant-type-token-exchange
    docs: Specifies the process of obtaining a token.
  AuthTokenRequestedTokenType:
    enum:
      - value: urn:devrev:params:oauth:token-type:aat
        name: urn-devrev-params-oauth-token-type-aat
      - value: urn:devrev:params:oauth:token-type:aat:public
        name: urn-devrev-params-oauth-token-type-aat-public
      - value: urn:devrev:params:oauth:token-type:dev
        name: urn-devrev-params-oauth-token-type-dev
      - value: urn:devrev:params:oauth:token-type:gat
        name: urn-devrev-params-oauth-token-type-gat
      - value: urn:devrev:params:oauth:token-type:pat
        name: urn-devrev-params-oauth-token-type-pat
      - value: urn:devrev:params:oauth:token-type:pat:act-as
        name: urn-devrev-params-oauth-token-type-pat-act-as
      - value: urn:devrev:params:oauth:token-type:rat
        name: urn-devrev-params-oauth-token-type-rat
      - value: urn:devrev:params:oauth:token-type:rev
        name: urn-devrev-params-oauth-token-type-rev
      - value: urn:devrev:params:oauth:token-type:session
        name: urn-devrev-params-oauth-token-type-session
      - value: urn:devrev:params:oauth:token-type:session:dev0
        name: urn-devrev-params-oauth-token-type-session-dev0
      - value: urn:devrev:params:oauth:token-type:session:onetime
        name: urn-devrev-params-oauth-token-type-session-onetime
      - value: urn:devrev:params:oauth:token-type:super
        name: urn-devrev-params-oauth-token-type-super
      - value: urn:devrev:params:oauth:token-type:sys
        name: urn-devrev-params-oauth-token-type-sys
      - value: urn:ietf:params:oauth:token-type:jwt
        name: urn-ietf-params-oauth-token-type-jwt
    docs: The type of the requested token.
  AuthTokenStatus:
    enum:
      - active
      - expired
      - revoked
    docs: The status of the token.
  AuthTokenSubjectTokenType:
    enum:
      - value: urn:devrev:params:oauth:token-type:jwt:auth0
        name: urn-devrev-params-oauth-token-type-jwt-auth0
      - value: urn:devrev:params:oauth:token-type:jwt:dev
        name: urn-devrev-params-oauth-token-type-jwt-dev
      - value: urn:devrev:params:oauth:token-type:rat
        name: urn-devrev-params-oauth-token-type-rat
      - value: urn:devrev:params:oauth:token-type:revinfo
        name: urn-devrev-params-oauth-token-type-revinfo
      - value: urn:devrev:params:oauth:token-type:session
        name: urn-devrev-params-oauth-token-type-session
      - value: urn:devrev:params:oauth:token-type:sysu
        name: urn-devrev-params-oauth-token-type-sysu
      - value: urn:devrev:params:oauth:token-type:userinfo
        name: urn-devrev-params-oauth-token-type-userinfo
      - value: urn:devrev:params:oauth:token-type:userinfo:profile
        name: urn-devrev-params-oauth-token-type-userinfo-profile
      - value: urn:ietf:params:oauth:token-type:jwt
        name: urn-ietf-params-oauth-token-type-jwt
    docs: The type of the subject token.
  AuthTokenTokenType: literal<"bearer">
  AuthTokensCreateResponse:
    docs: |
      Response for the request to create a new token corresponding to the
      requested token type.
    properties:
      access_token:
        type: string
        docs: |
          The issued JSON Web Token (JWT) corresponding to the requested
          token type.
      client_id:
        docs: |
          An identifier that represents the application which is requesting
          the token. Only present in a response corresponding to an
          application access token (AAT).
        type: optional<string>
      expires_in:
        type: integer
        docs: |
          The validity lifetime of the token specified in seconds since Unix
          epoch.
      refresh_token:
        docs: A token to refresh the issued token.
        type: optional<string>
      scope:
        docs: |
          The scopes associated with the issued token. A space-delimited list
          of values in which the order of values does not matter.
        type: optional<string>
      token_type: AuthTokenTokenType
  AuthTokensGetResponse:
    docs: The response to get the token metadata.
    properties:
      token: AuthToken
  AuthTokensListResponse:
    docs: The response to list the token metadata.
    properties:
      tokens:
        docs: The list of token metadata.
        type: list<AuthToken>
  AuthTokensOrgTraits:
    docs: Carries Rev org info.
    properties:
      custom_fields:
        docs: Application-defined custom fields of the Rev org.
        type: optional<map<string, unknown>>
      description:
        docs: The description of the Rev org.
        type: optional<string>
      display_name:
        docs: The display name of the Rev org.
        type: optional<string>
      domain:
        docs: The domain of the Rev org.
        type: optional<string>
      phone_numbers:
        docs: Phone numbers of the Rev org.
        type: optional<list<string>>
      tier:
        docs: The tier of the Rev org.
        type: optional<string>
  AuthTokensRevInfo:
    docs: |
      Carries info corresponding to the Rev user to be provisioned and/or
      issue a Rev session token.
    properties:
      org_ref:
        docs: An identifier which uniquely identifies a Rev org.
        type: optional<string>
      org_traits: optional<AuthTokensOrgTraits>
      user_id:
        docs: The unique ID of the Rev user.
        type: optional<string>
      user_ref:
        docs: An identifier which uniquely identifies a Rev user.
        type: optional<string>
      user_traits: optional<AuthTokensUserTraits>
  AuthTokensUpdateResponse:
    docs: Response for the request to update the token metadata.
    properties:
      token: AuthToken
  AuthTokensUserTraits:
    docs: Carries Rev user info.
    properties:
      custom_fields:
        docs: Application-defined custom fields of the Rev user.
        type: optional<map<string, unknown>>
      description:
        docs: The description of the Rev user.
        type: optional<string>
      display_name:
        docs: The display name of the Rev user.
        type: optional<string>
      email:
        docs: The email address of the Rev user.
        type: optional<string>
      full_name:
        docs: The full name of the Rev user.
        type: optional<string>
      phone_numbers:
        docs: Phone numbers of the Rev user.
        type: optional<list<string>>
  Capability: PartBase
  CapabilitySummary: PartBaseSummary
  ClientContext:
    docs: Properties of client to be used in track API.
    properties:
      browser: optional<ClientContextBrowser>
      cpu: optional<ClientContextCpu>
      device: optional<ClientContextDevice>
      engine: optional<ClientContextEngine>
      ip:
        docs: IP address of the client.
        type: optional<string>
      locale:
        docs: 'The client''s locale, example: en-US.'
        type: optional<string>
      os: optional<ClientContextOs>
      page: optional<ClientContextPage>
      timezone:
        docs: 'The client''s timezone, example: Asia/Kolkata.'
        type: optional<string>
      user_agent:
        docs: |
          User agent of the client, example: Mozilla/5.0 (Macintosh; Intel
          Mac OS X.
        type: optional<string>
  ClientContextBrowser:
    docs: Properties of client's browser to be used in track API.
    properties:
      name:
        docs: 'The browser''s name, example: Chrome, Safari.'
        type: optional<string>
      version:
        docs: 'The browser''s version, example: 53.0.2785.143.'
        type: optional<string>
  ClientContextCpu:
    docs: Properties of client's CPU to be used in track API.
    properties:
      architecture:
        docs: 'CPU architecture, example: amd64.'
        type: optional<string>
  ClientContextDevice:
    docs: Properties of client's device to be used in track API.
    properties:
      manufacturer:
        docs: 'Device manufacturer, example: Apple.'
        type: optional<string>
      model:
        docs: 'Device model, example: iphone 6s.'
        type: optional<string>
      type:
        docs: 'Device type, example: mobile, tablet, desktop.'
        type: optional<string>
  ClientContextEngine:
    docs: Properties of client's engine to be used in track API.
    properties:
      name:
        docs: 'The engine''s name, example: Blink, WebKit.'
        type: optional<string>
      version:
        docs: 'The engine''s version, example: 537.36.'
        type: optional<string>
  ClientContextOs:
    docs: Properties of client's OS to be used in track API.
    properties:
      name:
        docs: 'The OS''s name, example : Windows, Mac OS X.'
        type: optional<string>
      version:
        docs: 'The OS''s version, example : 10.11.1.'
        type: optional<string>
  ClientContextPage:
    docs: Properties of client's page to be used in track API.
    properties:
      domain:
        docs: 'Page domain, example: devrev.ai'
        type: optional<string>
      path:
        docs: 'Page path, example: /pricing'
        type: optional<string>
      referrer:
        docs: 'Page referrer, example: https://devrev.ai'
        type: optional<string>
      title:
        docs: 'Page title, example: Pricing'
        type: optional<string>
      url:
        docs: 'Page URL, example: https://devrev.ai/pricing'
        type: optional<string>
  CodeChange:
    properties:
      branch:
        docs: Name of the code branch in the repo.
        type: optional<string>
      description:
        docs: Detailed description of the contents of this change.
        type: optional<string>
      external_identifier:
        docs: |
          Unique external identifier for this change.e.g Pull Request URL.
        type: optional<string>
      filtered_loc: optional<LinesOfCode>
      repo_url:
        docs: URL pointing to the repo this change was on.
        type: optional<string>
      source: optional<CodeChangeSource>
      title:
        docs: Title describing in brief the contents of this change.
        type: optional<string>
      total_loc: optional<LinesOfCode>
    extends:
      - AtomBase
  CodeChangeSource: literal<"github">
  CodeChangesCreateRequest: map<string, unknown>
  CodeChangesCreateResponse:
    properties:
      code_change: CodeChange
  CodeChangesDeleteResponse: map<string, unknown>
  CodeChangesGetResponse:
    properties:
      code_change: CodeChange
  CodeChangesListResponse:
    properties:
      code_changes:
        docs: The list of requested code change objects.
        type: list<CodeChange>
      next_cursor:
        docs: |
          The cursor used to iterate subsequent results in accordance to the
          sort order. If not set, then no later elements exist.
        type: optional<string>
      prev_cursor:
        docs: |
          The cursor used to iterate preceding results in accordance to the
          sort order. If not set, then no prior elements exist.
        type: optional<string>
  CodeChangesUpdateResponse:
    properties:
      code_change: CodeChange
  conversation:
    properties:
      description:
        docs: Description of the conversation object.
        type: optional<string>
      group: optional<GroupSummary>
      members:
        docs: The users in the conversation.
        type: list<UserSummary>
      messages:
        docs: The latest messages on the conversation.
        type: optional<list<TimelineEntry>>
      metadata: optional<ConversationMetadata>
      owned_by:
        docs: Owner IDs for the conversation.
        type: optional<list<UserSummary>>
      stage: optional<LegacyStage>
      tags:
        docs: Tags associated with the object.
        type: optional<list<TagWithValue>>
      title:
        docs: Title of the conversation object.
        type: optional<string>
    extends:
      - AtomBase
  ConversationMetadata:
    docs: Metadata on conversation.
    properties:
      url_context:
        docs: |
          URL from which the conversation was created if the conversation was
          created via PLuG.
        type: optional<string>
  ConversationSearchSummary:
    properties:
      conversation: ConversationSummary
    extends:
      - SearchSummaryBase
  ConversationSummary:
    properties:
      title:
        docs: Title of the conversation object.
        type: optional<string>
    extends:
      - AtomBaseSummary
  ConversationsCreateRequestMessage:
    properties:
      artifacts:
        docs: The IDs of the artifacts to the message.
        type: optional<list<string>>
      body:
        docs: The message's body.
        type: optional<string>
  ConversationsCreateRequestMetadata:
    properties:
      url_context: optional<string>
  ConversationsCreateRequestTypeValue: literal<"support">
  ConversationsCreateResponse:
    docs: The response to creating a new conversation.
    properties:
      conversation: conversation
  ConversationsDeleteResponse:
    docs: The response for deleting a conversation.
    type: map<string, unknown>
  ConversationsExportResponse:
    properties:
      conversations:
        docs: The resulting collection of conversation items.
        type: list<conversation>
  ConversationsGetResponse:
    docs: The response to getting a conversation's information.
    properties:
      conversation: conversation
  ConversationsListResponse:
    docs: The response to listing the conversations.
    properties:
      conversations:
        docs: The list of conversations.
        type: list<conversation>
      next_cursor:
        docs: |
          The cursor used to iterate subsequent results in accordance to the
          sort order. If not set, then no later elements exist.
        type: optional<string>
      prev_cursor:
        docs: |
          The cursor used to iterate preceding results in accordance to the
          sort order. If not set, then no prior elements exist.
        type: optional<string>
  ConversationsUpdateRequestAppliesToParts:
    properties:
      set:
        docs: Updates the parts that the conversation applies to.
        type: optional<list<string>>
  ConversationsUpdateRequestMetadata:
    properties:
      url_context: optional<string>
  ConversationsUpdateRequestTags:
    properties:
      set:
        docs: Sets the tag IDs to the provided tags.
        type: optional<list<SetTagWithValue>>
  ConversationsUpdateRequestUserSessions:
    properties:
      set:
        docs: |
          The updated user sessions that the conversation is associated with.
        type: optional<list<string>>
  ConversationsUpdateResponse:
    docs: The response for updating a conversation.
    properties:
      conversation: conversation
  CreateEmailInfo:
    docs: Information related to an email.
    properties:
      address:
        type: string
        docs: The address of the email address.
      name:
        docs: The name of the email address.
        type: optional<string>
      user:
        docs: The ID of the user associated with the email address.
        type: optional<string>
  CreateEmailInlineAttachment:
    docs: An inline attachment.
    properties:
      artifact:
        docs: The artifact of the attachment.
        type: optional<string>
      content_id:
        docs: The content id of the attachment.
        type: optional<string>
  CreateEmailPreviewWidget:
    docs: An email preview widget.
    properties:
      bcc:
        docs: The list of bcc addresses.
        type: optional<list<CreateEmailInfo>>
      cc:
        docs: The list of cc addresses.
        type: optional<list<CreateEmailInfo>>
      from:
        docs: The list of from addresses.
        type: optional<list<CreateEmailInfo>>
      html_body:
        docs: The html body of the email.
        type: optional<string>
      in_reply_to:
        docs: The in reply to of the email.
        type: optional<string>
      inlines:
        docs: The list of inline attachments.
        type: optional<list<CreateEmailInlineAttachment>>
      message_id:
        docs: The message id of the email.
        type: optional<string>
      raw_email_artifact:
        docs: The raw email artifact.
        type: optional<string>
      references:
        docs: The list of references in the email.
        type: optional<list<string>>
      reply_to:
        docs: The list of reply to addresses.
        type: optional<list<CreateEmailInfo>>
      sent_timestamp:
        docs: The time the email was sent.
        type: optional<datetime>
      subject:
        docs: The subject of the email.
        type: optional<string>
      text_body:
        docs: The text body of the email.
        type: optional<string>
      to:
        docs: The list of to addresses.
        type: optional<list<CreateEmailInfo>>
  CreateOrgScheduleInterval:
    properties:
      from:
        type: datetime
        docs: Date (inclusive) on which the interval begins.
      is_excluded:
        docs: |
          If true, no organization schedule is looked up for these days and
          they are marked as holidays.
        type: optional<boolean>
      name:
        type: string
        docs: |
          The name of the period, for example the event or holiday it
          represents.
      to:
        docs: |
          Date (exclusive) on which the interval ends. If omitted, it is a
          single day interval.
        type: optional<datetime>
  CreateWeeklyOrgScheduleInterval:
    properties:
      from:
        type: integer
        docs: |
          Duration in minutes of the week when the interval starts. 0 is
          Sunday midnight, when Sunday ends and Monday begins.
      to:
        type: integer
        docs: |
          Duration in minutes of the week when the interval ends (must be
          larger than 'from'). 0 is Sunday midnight, when Sunday ends and
          Monday begins.
  CuratedVistaSummary:
    type: VistaBaseSummary
    docs: Static collection of Devrev objects.
  CustomSchemaFragment:
    discriminant: type
    base-properties: {}
    union:
      app_fragment: AppFragment
      custom_type_fragment: CustomTypeFragment
      tenant_fragment: TenantFragment
  CustomSchemaFragmentBaseSummary: AtomBaseSummary
  CustomSchemaFragmentCondition:
    docs: The condition associated with a field.
    type: map<string, unknown>
  CustomSchemaFragmentFragmentType:
    enum:
      - app
      - custom_type
      - tenant
    docs: Type of the custom schema fragment.
  CustomSchemaFragmentSummary:
    discriminant: type
    base-properties: {}
    union:
      app_fragment: AppFragmentSummary
      custom_type_fragment: CustomTypeFragmentSummary
      tenant_fragment: TenantFragmentSummary
  CustomSchemaFragmentType:
    enum:
      - app_fragment
      - custom_type_fragment
      - tenant_fragment
  CustomSchemaFragmentsGetResponse:
    properties:
      fragment: CustomSchemaFragment
  CustomSchemaFragmentsListRequestPrune: literal<"fields">
  CustomSchemaFragmentsListResponse:
    properties:
      cursor:
        docs: |
          The cursor to resume iteration from, otherwise if not provided,
          then iteration starts from the beginning.
        type: optional<string>
      result:
        docs: The custom schema fragments.
        type: list<CustomSchemaFragment>
  CustomSchemaFragmentsSetRequest:
    discriminant: type
    base-properties:
      conditions:
        docs: List of conditions for this fragment.
        type: optional<list<CustomSchemaFragmentCondition>>
      deleted_fields:
        docs: List of field names which are being dropped.
        type: optional<list<string>>
      deprecated:
        docs: Whether this fragment has been deprecated.
        type: optional<boolean>
      description:
        type: string
        docs: The description of the custom schema fragment.
      fields:
        docs: List of all fields in this fragment.
        type: optional<list<SchemaFieldDescriptor>>
      leaf_type:
        type: string
        docs: The leaf type this fragment applies to.
    union:
      app_fragment: CustomSchemaFragmentsSetRequestAppFragment
      custom_type_fragment: CustomSchemaFragmentsSetRequestCustomTypeFragment
      tenant_fragment: CustomSchemaFragmentsSetRequestTenantFragment
  CustomSchemaFragmentsSetRequestAppFragment:
    properties:
      app:
        type: string
        docs: The app this fragment applies to.
  CustomSchemaFragmentsSetRequestCustomTypeFragment:
    properties:
      path:
        docs: |
          Path components used to display available custom types in tree
          form.
        type: optional<list<CustomTypePathComponent>>
      stage_diagram:
        docs: The ID of the associated custom stage diagram.
        type: optional<string>
      stock_field_overrides:
        docs: List of Per-DevOrg stock field overrides.
        type: optional<list<StockFieldOverride>>
      subtype:
        type: string
        docs: |
          The string used to populate the subtype in the leaf type.
      subtype_display_name:
        docs: The display name of the subtype.
        type: optional<string>
  CustomSchemaFragmentsSetRequestTenantFragment:
    properties:
      stock_field_overrides:
        docs: List of Per-DevOrg stock field overrides.
        type: optional<list<StockFieldOverride>>
  CustomSchemaFragmentsSetRequestType:
    enum:
      - app_fragment
      - custom_type_fragment
      - tenant_fragment
  CustomSchemaFragmentsSetResponse:
    properties:
      id:
        type: string
        docs: The ID of the custom schema fragment.
  CustomSchemaSpec:
    docs: |
      Requested custom schemas described abstractly. Every provided schema's
      custom field must be specified, otherwise a bad request error is
      returned. If a new custom schema specifier is provided, then it will be
      added to the work, otherwise if a custom schema is omitted from the
      specifier, it remains unmodified.
    properties:
      apps:
        docs: List of apps that are requested.
        type: optional<list<string>>
      subtype:
        docs: Name of the subtype requested.
        type: optional<string>
      tenant_fragment:
        docs: Whether the tenant schema is requested.
        type: optional<boolean>
      validate_required_fields:
        docs: Whether to enforce required fields validation.
        type: optional<boolean>
  CustomTypeFragment:
    properties:
      stage_diagram: optional<StageDiagramSummary>
      subtype:
        docs: |
          The string used to populate the subtype in the leaf type.
        type: optional<string>
      subtype_display_name:
        docs: |
          Display name of the subtype. Modifications to this field are done
          in-place and don't result in creation of a new fragment in chain.
        type: optional<string>
    extends:
      - CustomSchemaFragmentBase
  CustomTypeFragmentSummary: CustomSchemaFragmentBaseSummary
  CustomTypePathComponent:
    docs: Path component for rendering custom type lists in tree form.
    type: map<string, unknown>
  DateFilter:
    discriminant: type
    base-properties: {}
    docs: Provides ways to specify date ranges on objects.
    union:
      preset: DateTimePreset
      range: DateTimeFilter
  DateFilterType:
    enum:
      - preset
      - range
    docs: Type of date filter.
  DateTimeFilter:
    properties:
      after:
        docs: |
          Filters for objects created after the provided timestamp
          (inclusive).
        type: optional<datetime>
      before:
        docs: |
          Filters for objects created before the provided timestamp
          (inclusive).
        type: optional<datetime>
  DateTimePreset:
    discriminant: preset_type
    base-properties: {}
    docs: Provides preset types for date filter.
    union:
      last_n_days: DateTimePresetLastNDays
      next_n_days: DateTimePresetNextNDays
  DateTimePresetLastNDays:
    properties:
      days:
        type: integer
        docs: |
          The range starts from the current timestamp and continues for the
          past n days.
  DateTimePresetNextNDays:
    properties:
      days:
        type: integer
        docs: |
          The range starts from the current timestamp and continues for the
          next n days.
  DateTimePresetType:
    enum:
      - last_n_days
      - next_n_days
    docs: Type of date preset.
  DevOrgAuthConnectionsCreateRequest:
    discriminant: type
    base-properties:
      display_name:
        docs: |
          Display name of the authentication connection. This name will be
          visible to all the users when they sign in to this Dev
          organization. For example, if the display_name is 'abclogin', then
          it would appear on the login button as 'Log in to abclogin'.
        type: optional<string>
    docs: |
      Request to create a new enterprise authentication connection.
    union:
      google_apps: AuthConnectionOptionsGoogleApps
      oidc: AuthConnectionOptionsOidc
      samlp: AuthConnectionOptionsSaml
      waad: AuthConnectionOptionsAzureAd
  DevOrgAuthConnectionsCreateRequestType:
    enum:
      - google_apps
      - oidc
      - samlp
      - waad
    docs: |
      Defines the type for the authentication connection. Different types of
      authentication connections have different configuration parameters.
  DevOrgAuthConnectionsCreateResponse:
    docs: |
      Response for the request to create a new enterprise authentication
      connection.
    properties:
      auth_connection: AuthConnection
  DevOrgAuthConnectionsGetResponse:
    docs: |
      Response object encapsulating the configuration details of an
      authentication connection.
    properties:
      auth_connection: AuthConnection
  DevOrgAuthConnectionsListResponse:
    docs: |
      Response object for the request to list all the social and enterprise
      authentication connections configured for a Dev organization.
    properties:
      auth_connections:
        docs: |
          List of all the authentication connections currently configured for
          a Dev organization.
        type: list<AuthConnection>
  DevOrgAuthConnectionsUpdateRequest:
    discriminant: type
    base-properties:
      display_name:
        docs: |
          New display name of the authentication connection. This name will
          be visible to all the users when they sign in to this Dev
          organization. For example, if the display_name is 'abclogin', then
          it would appear on the login button as 'Log in to abclogin'.
        type: optional<string>
      id:
        type: string
        docs: |
          ID of the authentication connection which is to be updated.
    docs: |
      Request to update an enterprise authentication connection for a Dev
      organization.
    union:
      google_apps: AuthConnectionOptionsGoogleApps
      none: empty
      oidc: AuthConnectionOptionsOidc
      samlp: AuthConnectionOptionsSaml
      waad: AuthConnectionOptionsAzureAd
  DevOrgAuthConnectionsUpdateRequestType:
    enum:
      - google_apps
      - none
      - oidc
      - samlp
      - waad
    docs: |
      Specifies the type for the authentication connection. Different types
      of authentication connections have different configuration parameters
      that can be updated.
  DevOrgAuthConnectionsUpdateResponse:
    docs: |
      Response for the request to update an enterprise authentication
      connection.
    properties:
      auth_connection: AuthConnection
  DevUser:
    properties:
      external_identities:
        docs: IDs of the Dev User outside the DevRev SOR.
        type: optional<list<ExternalIdentity>>
    extends:
      - UserBase
  DevUserExternalIdentityFilter:
    properties:
      id:
        docs: Unique ID of the user in the external source.
        type: optional<string>
      issuer:
        docs: Issuer of the external identity of the user.
        type: optional<string>
  DevUserSummary: UserBaseSummary
  DevUsersGetResponse:
    docs: The response to getting the information for the Dev user.
    properties:
      dev_user: DevUser
  DevUsersListResponse:
    docs: The response to listing the Dev users.
    properties:
      dev_users:
        docs: The list of Dev users.
        type: list<DevUser>
      next_cursor:
        docs: |
          The cursor used to iterate subsequent results in accordance to the
          sort order. If not set, then no later elements exist.
        type: optional<string>
      prev_cursor:
        docs: |
          The cursor used to iterate preceding results in accordance to the
          sort order. If not set, then no prior elements exist.
        type: optional<string>
  DevUsersSelfRequest:
    docs: A request to get the authenticated user's information.
    type: map<string, unknown>
  DevUsersSelfResponse:
    docs: |
      The response to getting the information for the authenticated user.
    properties:
      dev_user: DevUser
  DirectorySummary: AtomBaseSummary
  DynamicGroupInfo:
    docs: Information to define dynamic groups.
    type: map<string, unknown>
  DynamicVistaSummary:
    type: VistaBaseSummary
    docs: |
      Dynamic collection of Devrev objects, all adhering to a specific
      filter.
  EmailInfo:
    properties:
      address:
        type: string
        docs: The email address.
      name:
        docs: The email recipient's name.
        type: optional<string>
      user: optional<UserSummary>
  EmailInlineAttachment:
    properties:
      artifact: optional<ArtifactSummary>
      content_id:
        docs: The content id of the attachment.
        type: optional<string>
  EmailPreviewWidget:
    properties:
      bcc:
        docs: The list of bcc addresses.
        type: list<EmailInfo>
      cc:
        docs: The list of cc addresses.
        type: list<EmailInfo>
      from:
        docs: The list of from addresses.
        type: list<EmailInfo>
      html_body:
        docs: The html body of the email.
        type: optional<string>
      in_reply_to:
        docs: The in-reply-to header of the email.
        type: optional<string>
      inlines:
        docs: The list of inline attachments.
        type: list<EmailInlineAttachment>
      message_id:
        docs: The message id of the email.
        type: optional<string>
      raw_email_artifact: optional<ArtifactSummary>
      references:
        docs: The references header in the email.
        type: list<string>
      reply_to:
        docs: The list of reply to addresses.
        type: list<EmailInfo>
      sent_timestamp:
        docs: The time the email was sent.
        type: optional<datetime>
      subject:
        docs: The subject of the email.
        type: optional<string>
      text_body:
        docs: The text body of the email.
        type: optional<string>
      to:
        docs: The list of to addresses.
        type: list<EmailInfo>
    extends:
      - SnapWidgetBase
  SnapWidgetBase:
    properties:
      name:
        type: string
        docs: A human readable name for the snap widget.
      namespace: optional<SnapWidgetNamespace>
      status: SnapWidgetStatus
    extends:
      - AtomBase
  empty: map<string, unknown>
  engagement:
    properties:
      description:
        docs: Description of the engagement object.
        type: optional<string>
    extends:
      - AtomBase
  EngagementSummary: AtomBaseSummary
  EngagementType:
    enum:
      - call
      - default
      - email
      - linked_in
      - meeting
      - offline
      - survey
    docs: Type of engagement.
  EngagementsCountResponse:
    properties:
      count:
        type: integer
        docs: The number of engagements matching the filter.
  EngagementsCreateRequestEngagementType:
    enum:
      - call
      - default
      - email
      - linked_in
      - offline
    docs: The type of engagement.
  EngagementsCreateResponse:
    properties:
      engagement: engagement
  EngagementsDeleteResponse: map<string, unknown>
  EngagementsGetResponse:
    properties:
      engagement: engagement
  EngagementsListResponse:
    properties:
      engagements:
        docs: The list of engagements.
        type: list<engagement>
      next_cursor:
        docs: |
          The cursor used to iterate subsequent results in accordance to the
          sort order. If not set, then no later elements exist.
        type: optional<string>
      prev_cursor:
        docs: |
          The cursor used to iterate preceding results in accordance to the
          sort order. If not set, then no prior elements exist.
        type: optional<string>
  EngagementsUpdateRequestArtifactIds:
    properties:
      set:
        docs: Sets the IDs to the provided artifact IDs.
        type: optional<list<string>>
  EngagementsUpdateRequestMembers:
    properties:
      set:
        docs: |
          Sets the members to the provided user IDs. If specified, this must
          not be empty.
        type: optional<list<string>>
  EngagementsUpdateRequestTags:
    properties:
      set:
        docs: Sets the provided tags on the engagement item.
        type: optional<list<SetTagWithValue>>
  EngagementsUpdateResponse:
    properties:
      engagement: engagement
  Enhancement: PartBase
  EnhancementSummary: PartBaseSummary
  error:
    properties:
      message:
        type: string
        docs: Information about the error.
      status:
        type: integer
        docs: The corresponding HTTP status code.
      type:
        docs: The error type.
        type: optional<string>
  ErrorBadRequest:
    properties: {}
    extends:
      - ErrorBase
  ErrorBadRequestBadRequest: map<string, unknown>
  ErrorBadRequestInvalidApiVersion:
    properties:
      value:
        type: string
        docs: The provided API version.
  ErrorBadRequestInvalidEnumValue:
    properties:
      allowed_values:
        docs: The allowed values for the field.
        type: list<string>
      field_name:
        type: string
        docs: The field whose enum value is invalid.
      value:
        type: string
        docs: The value that was received.
  ErrorBadRequestInvalidField:
    properties:
      field_name:
        type: string
        docs: The field name that's invalid.
  ErrorBadRequestMissingDependency:
    properties:
      dependencies:
        docs: The dependent fields.
        type: optional<list<ErrorBadRequestMissingDependencyDependency>>
      dependent_field_name:
        docs: The field on which the value depends.
        type: optional<string>
      dependent_field_value:
        docs: The value which needs to be set of the dependent field.
        type: optional<string>
      provided_field_name:
        docs: The field whose value was received.
        type: optional<string>
      provided_field_value:
        docs: The value that was received.
        type: optional<string>
  ErrorBadRequestMissingDependencyDependency:
    properties:
      field_name:
        type: string
        docs: The dependent field name.
      field_value:
        type: string
        docs: The dependent field value.
  ErrorBadRequestMissingRequiredField:
    properties:
      field_name:
        type: string
        docs: The missing field's name.
  ErrorBadRequestParseError: map<string, unknown>
  ErrorBadRequestStaleSchemaFragments:
    docs: |
      Error indicating that the request contained one or more stale schema
      fragments, which are schema fragments that have been replaced by a
      newer version and are therefore considered deprecated schema fragments.
      The caller should refresh and use the latest schema fragments in their
      request.
    type: map<string, unknown>
  ErrorBadRequestType:
    enum:
      - bad_request
      - invalid_api_version
      - invalid_enum_value
      - invalid_field
      - missing_dependency
      - missing_required_field
      - parse_error
      - stale_schema_fragments
      - unexpected_json_type
      - value_not_permitted
  ErrorBadRequestUnexpectedJsonType:
    properties:
      actual: ErrorBadRequestUnexpectedJsonTypeType
      expected: ErrorBadRequestUnexpectedJsonTypeType
      field_name:
        type: string
        docs: The field name that's invalid.
  ErrorBadRequestUnexpectedJsonTypeType:
    enum:
      - array
      - bool
      - 'null'
      - number
      - object
      - string
  ErrorBadRequestValueNotPermitted:
    properties:
      allowed_values:
        docs: The allowed values for the field.
        type: optional<list<string>>
      field_name:
        type: string
        docs: The field whose value is not permitted.
      reason:
        docs: The reason the value isn't permitted.
        type: optional<string>
  ErrorBase:
    properties:
      detail:
        docs: Error detail information.
        type: optional<string>
      message:
        docs: The message associated with the error.
        type: optional<string>
  ErrorConflict:
    properties: {}
    extends:
      - ErrorBase
  ErrorConflictConflict: map<string, unknown>
  ErrorConflictType: literal<"conflict">
  ErrorForbidden:
    properties: {}
    extends:
      - ErrorBase
  ErrorForbiddenForbidden: map<string, unknown>
  ErrorForbiddenType: literal<"forbidden">
  ErrorInternalServerError:
    properties: {}
    extends:
      - ErrorBase
  ErrorInternalServerErrorInternalError: map<string, unknown>
  ErrorInternalServerErrorType: literal<"internal_error">
  ErrorNotFound:
    properties: {}
    extends:
      - ErrorBase
  ErrorNotFoundNotFound: map<string, unknown>
  ErrorNotFoundType: literal<"not_found">
  ErrorServiceUnavailable:
    properties: {}
    extends:
      - ErrorBase
  ErrorServiceUnavailableServiceUnavailable: map<string, unknown>
  ErrorServiceUnavailableType: literal<"service_unavailable">
  ErrorTooManyRequests:
    properties: {}
    extends:
      - ErrorBase
  ErrorTooManyRequestsTooManyRequests: map<string, unknown>
  ErrorTooManyRequestsType: literal<"too_many_requests">
  ErrorUnauthorized:
    properties: {}
    extends:
      - ErrorBase
  ErrorUnauthorizedType: literal<"unauthenticated">
  ErrorUnauthorizedUnauthenticated: map<string, unknown>
  EventAccountCreated:
    properties:
      account: account
  EventAccountDeleted:
    properties:
      id:
        type: string
        docs: The ID of the account that was deleted.
  EventAccountUpdated:
    properties:
      account: account
  EventConversationCreated:
    properties:
      conversation: conversation
  EventConversationDeleted:
    properties:
      id:
        type: string
        docs: The ID of the conversation that was deleted.
  EventConversationUpdated:
    properties:
      conversation: conversation
  EventDevUserCreated:
    properties:
      dev_user: DevUser
  EventDevUserDeleted:
    properties:
      id:
        type: string
        docs: The ID of the Dev user that was deleted.
  EventDevUserUpdated:
    properties:
      dev_user: DevUser
  EventPartCreated:
    properties:
      part: part
  EventPartDeleted:
    properties:
      id:
        type: string
        docs: The ID of the part that was deleted.
  EventPartUpdated:
    properties:
      part: part
  EventRevOrgCreated:
    properties:
      rev_org: RevOrg
  EventRevOrgDeleted:
    properties:
      id:
        type: string
        docs: The ID of the Rev organization that was deleted.
  EventRevOrgUpdated:
    properties:
      rev_org: RevOrg
  EventRevUserCreated:
    properties:
      rev_user: RevUser
  EventRevUserDeleted:
    properties:
      id:
        type: string
        docs: The ID of the Rev user that was deleted.
  EventRevUserUpdated:
    properties:
      rev_user: RevUser
  EventSlaTrackerCreated:
    properties:
      sla_tracker: SlaTracker
  EventSlaTrackerDeleted:
    properties:
      id:
        type: string
        docs: The ID of the SLA tracker that was deleted.
  EventSlaTrackerUpdated:
    properties:
      sla_tracker: SlaTracker
  EventSource:
    properties:
      config:
        docs: |
          Configuration of the event source. Fields depend on the event
          source type.
        type: optional<map<string, unknown>>
      name:
        docs: Name of the event source.
        type: optional<string>
      setup_instructions: optional<EventSourceSetupInstructions>
      status: optional<EventSourceStatus>
      trigger_url:
        docs: |
          The URL to trigger the event source. Valid only for HTTP
          based-event sources. This URL supports both GET and POST requests.
        type: optional<string>
    extends:
      - AtomBase
  EventSourceGetResponse:
    properties:
      event_source: EventSource
  EventSourceSetupInstructions:
    docs: Instructions for setting up the event source.
    properties:
      content:
        docs: Content of the instructions.
        type: optional<string>
  EventSourceStatus:
    enum:
      - active
      - blocked
      - paused
    docs: |
      Status of the event source. Note that paused/blocked event sources
      return NotFound error on triggering.
  EventSourcesScheduleEventResponse:
    properties:
      event_key:
        docs: |
          The event key for this event. Auto-generated if the caller doesn't
          specify the event key. This may be empty if the event was published
          immediately.
        type: optional<string>
  EventTagCreated:
    properties:
      tag: tag
  EventTagDeleted:
    properties:
      id:
        type: string
        docs: The ID of the tag that was deleted.
  EventTagUpdated:
    properties:
      tag: tag
  EventTimelineEntryCreated:
    properties:
      entry: TimelineEntry
  EventTimelineEntryDeleted:
    properties:
      id:
        type: string
        docs: The ID of the timeline entry that was deleted.
  EventTimelineEntryUpdated:
    properties:
      entry: TimelineEntry
  EventWebhookCreated:
    properties:
      webhook: webhook
  EventWebhookDeleted:
    properties:
      id:
        type: string
        docs: The ID of the webhook that was deleted.
  EventWebhookUpdated:
    properties:
      webhook: webhook
  EventWorkCreated:
    properties:
      work: work
  EventWorkDeleted:
    properties:
      id:
        type: string
        docs: The ID of the work that was deleted.
  EventWorkUpdated:
    properties:
      work: work
  ExternalIdentity:
    docs: External identity of a user.
    type: map<string, unknown>
  Feature: PartBase
  FeatureSummary: PartBaseSummary
  FieldDescriptor:
    docs: Set of field attributes.
    type: map<string, unknown>
  group:
    properties:
      description:
        docs: Description of the group.
        type: optional<string>
      is_default:
        type: boolean
        docs: Whether it is a default group.
      member_type: optional<GroupMemberType>
      name:
        docs: Name of the group.
        type: optional<string>
      owner: optional<UserSummary>
    extends:
      - AtomBase
  GroupMemberType:
    enum:
      - dev_user
      - rev_user
    docs: Type of the members in the group.
  GroupMembersAddResponse: map<string, unknown>
  GroupMembersListResponse:
    docs: List of group members.
    properties:
      members:
        docs: List of members.
        type: list<GroupMembersListResponseMember>
      next_cursor:
        docs: |
          The cursor used to iterate subsequent results in accordance to the
          sort order. If not set, then no later elements exist.
        type: optional<string>
      prev_cursor:
        docs: |
          The cursor used to iterate preceding results in accordance to the
          sort order. If not set, then no prior elements exist.
        type: optional<string>
  GroupMembersListResponseMember:
    docs: A group member.
    properties:
      member: MemberSummary
  GroupMembersRemoveResponse: map<string, unknown>
  GroupSearchSummary:
    properties:
      group: GroupSummary
    extends:
      - SearchSummaryBase
  GroupSummary:
    properties:
      name:
        docs: Name of the group.
        type: optional<string>
    extends:
      - AtomBaseSummary
  GroupType:
    enum:
      - dynamic
      - static
    docs: Type of the group.
  GroupedVistaFlavor:
    enum:
      - nnl
      - sprint_board
      - support_inbox
    docs: Denotes the use case of the grouped vista.
  GroupedVistaSummary:
    docs: Represents a group of multiple vistas as a single unit.
    properties:
      flavor: optional<GroupedVistaFlavor>
    extends:
      - VistaBaseSummary
  VistaBaseSummary:
    properties:
      name:
        type: string
        docs: Name of the vista.
    extends:
      - AtomBaseSummary
  GroupsCreateResponse:
    docs: The response to group creation.
    properties:
      group: group
  GroupsGetResponse:
    docs: The response to getting the group.
    properties:
      group: group
  GroupsListResponse:
    docs: The response to listing the groups.
    properties:
      groups:
        docs: The list of groups.
        type: list<group>
      next_cursor:
        docs: |
          The cursor used to iterate subsequent results in accordance to the
          sort order. If not set, then no later elements exist.
        type: optional<string>
      prev_cursor:
        docs: |
          The cursor used to iterate preceding results in accordance to the
          sort order. If not set, then no prior elements exist.
        type: optional<string>
  GroupsUpdateResponse:
    docs: The response to group update.
    properties:
      group: group
  issue:
    properties:
      developed_with:
        docs: Parts associated based on git events.
        type: optional<list<PartSummary>>
      priority: optional<IssuePriority>
    extends:
      - WorkBase
  WorkBase:
    properties:
      applies_to_part: optional<PartSummary>
      artifacts:
        docs: The artifacts attached to the work item.
        type: optional<list<ArtifactSummary>>
      body:
        docs: Body of the work object.
        type: optional<string>
      custom_fields:
        docs: Custom fields.
        type: optional<map<string, unknown>>
      custom_schema_fragments:
        docs: Custom schema fragments.
        type: optional<list<string>>
      owned_by:
        docs: The users that own the work.
        type: list<UserSummary>
      reported_by:
        docs: Users that reported the work.
        type: optional<list<UserSummary>>
      stage: optional<LegacyStage>
      stock_schema_fragment:
        docs: Stock schema fragment.
        type: optional<string>
      subtype:
        docs: Subtype corresponding to the custom type fragment.
        type: optional<string>
      tags:
        docs: Tags associated with the object.
        type: optional<list<TagWithValue>>
      target_close_date:
        docs: Timestamp when the work is expected to be complete.
        type: optional<datetime>
      title:
        type: string
        docs: Title of the work object.
    extends:
      - AtomBase
  IssuePriority:
    enum:
      - p0
      - p1
      - p2
      - p3
    docs: Priority of the work based upon impact and criticality.
  IssueSummary:
    properties:
      priority: optional<IssuePriority>
    extends:
      - WorkBaseSummary
  WorkBaseSummary:
    properties:
      owned_by:
        docs: The users that own the work.
        type: list<UserSummary>
      stage: optional<LegacyStageSummary>
      title:
        type: string
        docs: Title of the work object.
    extends:
      - AtomBaseSummary
  LegacyStage:
    docs: Describes the current stage of a work item.
    properties:
      name:
        type: string
        docs: Current stage name of the work item.
  LegacyStageSummary:
    docs: Describes the current stage of a work item.
    properties:
      name:
        type: string
        docs: Current stage name of the work item.
  LinesOfCode:
    docs: Details of lines of code in this code change.
    properties:
      file_count:
        docs: Count of files involved in this code change.
        type: optional<integer>
      lines_added:
        docs: Number of new lines added in this code change.
        type: optional<integer>
      lines_deleted:
        docs: Number of lines deleted in this code change.
        type: optional<integer>
      lines_modified:
        docs: Number of lines modified in this code change.
        type: optional<integer>
  link:
    properties:
      link_type: LinkType
      source: LinkEndpointSummary
      target: LinkEndpointSummary
    extends:
      - AtomBase
  LinkEndpointSummary:
    discriminant: type
    base-properties: {}
    union:
      capability: CapabilitySummary
      conversation: ConversationSummary
      enhancement: EnhancementSummary
      feature: FeatureSummary
      issue: IssueSummary
      opportunity: OpportunitySummary
      product: ProductSummary
      task: TaskSummary
      ticket: TicketSummary
  LinkEndpointType:
    enum:
      - capability
      - conversation
      - enhancement
      - feature
      - issue
      - opportunity
      - product
      - task
      - ticket
  LinkRevUserToRevOrgResponse:
    docs: The response to link a rev user to a rev org.
    properties:
      rev_user: RevUser
  LinkSearchSummary:
    properties:
      link: LinkSummary
    extends:
      - SearchSummaryBase
  LinkSummary:
    properties:
      link_type: LinkType
      source: LinkEndpointSummary
      target: LinkEndpointSummary
    extends:
      - AtomBaseSummary
  LinkType:
    enum:
      - developed_with
      - imports
      - is_dependent_on
      - is_duplicate_of
      - is_parent_of
      - is_part_of
      - is_related_to
      - serves
    docs: Type of link used to define the relationship.
  LinksCreateResponse:
    docs: The response to creating a new link.
    properties:
      link: link
  LinksDeleteResponse:
    docs: The response for deleting a link.
    type: map<string, unknown>
  LinksDirection:
    enum:
      - is_source
      - is_target
    docs: |
      The direction of link, which can either be outbound such that the
      object is the source of the link, otherwise inbound where the object is
      the target of the link.
  LinksGetResponse:
    docs: The response to getting a link's information.
    properties:
      link: link
  LinksListResponse:
    docs: The response to listing the links.
    properties:
      links:
        docs: The list of links.
        type: list<link>
      next_cursor:
        docs: |
          The cursor used to iterate subsequent results in accordance to the
          sort order. If not set, then no later elements exist.
        type: optional<string>
      prev_cursor:
        docs: |
          The cursor used to iterate preceding results in accordance to the
          sort order. If not set, then no prior elements exist.
        type: optional<string>
  ListMode:
    enum:
      - after
      - before
    docs: |
      The iteration mode to use. If "after", then entries after the provided
      cursor will be returned, or if no cursor is provided, then from the
      beginning. If "before", then entries before the provided cursor will be
      returned, or if no cursor is provided, then from the end. Entries will
      always be returned in the specified sort-by order.
  MeetingSummary: AtomBaseSummary
  MemberSummary:
    discriminant: type
    base-properties: {}
    union:
      dev_user: DevUserSummary
      rev_user: RevUserSummary
      sys_user: SysUserSummary
  MemberType:
    enum:
      - dev_user
      - rev_user
      - sys_user
  MetricDataPoint:
    properties:
      dimensions:
        docs: Key-value pairs for specifying additional attributes.
        type: optional<list<MetricDataPointDimension>>
      id:
        docs: |
          An ID that uniquely identifies the metric data point. This ID will
          be used for deduplication. Clients can generate its own ID and send
          it in the request. If not provided, DevRev will perform
          content-based deduplication.
        type: optional<string>
      timestamp:
        type: datetime
        docs: Timestamp when metric value is captured.
      value:
        type: double
        docs: |
          The value corresponding to the metric. For simply recording
          occurrence of an event, this value should be 1.0.
  MetricDataPointDimension:
    properties:
      key:
        type: string
        docs: |
          The key for the dimension. The keys must be unique and it is not
          allowed to have more than one value with the same key. Key must be
          at least one character long and cannot be longer than 64
          characters.Key can only contain alphanumeric characters (A-Z, a-z,
          and 0-9) and underscores (_). Key cannot start with a number and is
          case-insensitive.
      value:
        type: string
        docs: |
          The value for the dimension. Value could be any string and cannot
          be longer than 256 characters.
  MetricDefinition: AtomBase
  MetricDefinitionAppliesTo:
    enum:
      - conversation
      - ticket
    docs: The list of item types on which the metric might be applied.
  MetricDefinitionMetricType:
    enum:
      - time
      - value
    docs: |
      The type of the metric. 'time' metrics track the time spent in some
      state, supporting operations like 'start', 'stop', 'pause', 'resume'.
      'value' metrics track a value, supporting operations like 'set',
      'increment', 'decrement'.
  MetricDefinitionsListResponse:
    properties:
      metric_definitions:
        docs: The list of metric definitions.
        type: list<MetricDefinition>
      next_cursor:
        docs: |
          The cursor used to iterate subsequent results in accordance to the
          sort order. If not set, then no later elements exist.
        type: optional<string>
      prev_cursor:
        docs: |
          The cursor used to iterate preceding results in accordance to the
          sort order. If not set, then no prior elements exist.
        type: optional<string>
  MetricsData:
    properties:
      data_points:
        docs: |
          One or more data points collected for a given metric such as object
          usage, object state etc.
        type: list<MetricDataPoint>
      name:
        type: string
        docs: |
          Name of the metric which is being measured. For example,
          num_api_calls, num_active_users, etc.
      org_ref:
        type: string
        docs: |
          Rev Org ID or external_ref for which metric is being published.Rev
          Org ID is DevRev DON ID. For example,
          don:identity:dvrv-us-1:devo/0:revo/156. External_ref is the
          identification of DevRev customer's customers and maintained by
          DevRev's customers. Devrev will internally resolve external_ref to
          Rev Org ID and use it for further processing. For example,
          external_ref=org_customer_1 may resolve to
          don:identity:dvrv-us-1:devo/0:revo/155.
      user_ref:
        docs: |
          Rev User ID or user ref for which metric is being published.
        type: optional<string>
  ObjectMemberSearchSummary:
    properties:
      object_member: ObjectMemberSummary
    extends:
      - SearchSummaryBase
  ObjectMemberSummary: AtomBaseSummary
  Opportunity: WorkBase
  OpportunityForecastCategory:
    enum:
      - commit
      - omitted
      - pipeline
      - strong_upside
      - upside
      - won
    docs: Forecast category of the opportunity.
  OpportunityPriority:
    enum:
      - p0
      - p1
      - p2
      - p3
    docs: Priority of the opportunity.
  OpportunitySummary: WorkBaseSummary
  OrgBase:
    properties:
      display_name:
        docs: Name of the Organization.
        type: optional<string>
    extends:
      - AtomBase
  OrgBaseSummary:
    properties:
      display_name:
        docs: Name of the Organization.
        type: optional<string>
    extends:
      - AtomBaseSummary
  OrgEnvironment:
    enum:
      - production
      - staging
      - test
    docs: |
      The environment of the Org. Defaults to 'production' if not specified.
  OrgSchedule:
    properties:
      default_weekly_org_schedule: optional<WeeklyOrgSchedule>
      min_valid_days:
        docs: |
          The schedule must be valid and well-defined for at least this many
          days in the future, otherwise a warning notification is generated.
          Default is 0 if not specified.
        type: optional<integer>
      name:
        docs: Human-readable name.
        type: optional<string>
      org_schedule_fragments:
        docs: |
          The list of schedule fragments. It must be an ordered list of
          contiguous fragments (the next starting when the previous one
          ends), updates in a published schedule are only allowed to add new
          ones to the future.
        type: optional<list<OrgScheduleFragmentOverview>>
      status: OrgScheduleStatus
      timezone:
        docs: |
          Timezone in which this is defined. Only organization schedules in
          the same timezone can be directly combined.
        type: optional<string>
      valid_until:
        docs: |
          Derived field indicating when a valid organization schedule will
          become invalid. If omitted, the schedule is already invalid. A
          schedule is valid if it has a weekly schedule for all named periods
          for all its schedule fragments, and if it has a schedule fragment
          for the time period in question.
        type: optional<datetime>
      weekly_org_schedules:
        docs: |
          If the organization schedule fragment specifies that the given day
          belongs to a named period, a weekly schedule from this list with
          the matching name will be selected.
        type: optional<list<WeeklyOrgSchedule>>
    extends:
      - AtomBase
  OrgScheduleFragment:
    properties:
      from:
        docs: |
          The date (inclusive) on which the organization schedule fragment
          begins.
        type: optional<datetime>
      intervals:
        docs: |
          Periods during which the schedule is considered to be 'off' or to
          be in some specific named period.
        type: optional<list<OrgScheduleInterval>>
      name:
        docs: |
          Human-readable name, indicating the purpose of the schedule.
        type: optional<string>
      region_codes:
        docs: |
          CLDR region code of the countries/regions it is meant to be valid
          for. Does not drive logic, serves only for easier filtering and
          organization.
        type: optional<list<string>>
      status: OrgScheduleFragmentStatus
      to:
        docs: |
          The date (exclusive) on which the organization schedule fragment's
          validity ends.
        type: optional<datetime>
    extends:
      - AtomBase
  OrgScheduleFragmentOverview:
    docs: |
      The representation of the organization schedule fragment embedded
      inside a organization schedule, used to quickly look up the schedule
      fragment for the right period.
    type: map<string, unknown>
  OrgScheduleFragmentStatus:
    enum:
      - archived
      - draft
      - published
    docs: |
      Status determines how an item can be used. In 'draft' status an item
      can be edited but can't be used. When 'published' the item can longer
      be edited but can be used. 'Archived' is read-only.
  OrgScheduleFragmentsCreateResponse:
    properties:
      org_schedule_fragment: OrgScheduleFragment
  OrgScheduleFragmentsGetResponse:
    properties:
      org_schedule_fragment: OrgScheduleFragment
  OrgScheduleFragmentsTransitionResponse:
    properties:
      org_schedule_fragment: OrgScheduleFragment
  OrgScheduleInterval:
    docs: An optionally named period on day granularity.
    type: map<string, unknown>
  OrgScheduleStatus:
    enum:
      - archived
      - draft
      - published
    docs: |
      Status determines how an item can be used. In 'draft' status an item
      can be edited but can't be used. When 'published' the item can longer
      be edited but can be used. 'Archived' is read-only.
  OrgSchedulesCreateResponse:
    properties:
      org_schedule: OrgSchedule
  OrgSchedulesGetResponse:
    properties:
      org_schedule: OrgSchedule
  OrgSchedulesListResponse:
    properties:
      next_cursor:
        docs: |
          The cursor used to iterate subsequent results in accordance to the
          sort order. If not set, then no later elements exist.
        type: optional<string>
      org_schedules:
        docs: The list of organization schedules.
        type: list<OrgSchedule>
      prev_cursor:
        docs: |
          The cursor used to iterate preceding results in accordance to the
          sort order. If not set, then no prior elements exist.
        type: optional<string>
  OrgSchedulesSetFutureResponse:
    properties:
      org_schedule: OrgSchedule
  OrgSchedulesTransitionResponse:
    properties:
      org_schedule: OrgSchedule
  OrgSchedulesUpdateResponse:
    properties:
      org_schedule: OrgSchedule
  OrgSearchSummary:
    properties:
      org: OrgSummary
    extends:
      - SearchSummaryBase
  OrgSummary:
    discriminant: type
    base-properties: {}
    union:
      account: AccountSummary
      rev_org: RevOrgSummary
  OrgType:
    enum:
      - account
      - rev_org
  ParentPartFilter:
    docs: The filter for specifying parent part.
    properties:
      level:
        docs: Number of levels to fetch the part hierarchy up to.
        type: optional<integer>
      parts:
        docs: Part IDs to fetch the hierarchy for.
        type: list<string>
  part:
    discriminant: type
    base-properties: {}
    union:
      capability: Capability
      enhancement: Enhancement
      feature: Feature
      product: Product
  PartBase:
    properties:
      artifacts:
        docs: The attached artifacts.
        type: optional<list<ArtifactSummary>>
      custom_fields:
        docs: Custom fields.
        type: optional<map<string, unknown>>
      custom_schema_fragments:
        docs: Custom schema fragments.
        type: optional<list<string>>
      description:
        docs: Description of the part.
        type: optional<string>
      name:
        type: string
        docs: Name of the part.
      owned_by:
        docs: The users that own the part.
        type: list<UserSummary>
      stock_schema_fragment:
        docs: Stock schema fragment.
        type: optional<string>
      subtype:
        docs: Subtype corresponding to the custom type fragment.
        type: optional<string>
      tags:
        docs: Tags associated with the object.
        type: optional<list<TagWithValue>>
    extends:
      - AtomBase
  PartBaseSummary:
    properties:
      name:
        type: string
        docs: Name of the part.
    extends:
      - AtomBaseSummary
  PartSearchSummary:
    properties:
      part: PartSummary
    extends:
      - SearchSummaryBase
  PartSummary:
    discriminant: type
    base-properties: {}
    union:
      capability: CapabilitySummary
      enhancement: EnhancementSummary
      feature: FeatureSummary
      product: ProductSummary
  PartType:
    enum:
      - capability
      - enhancement
      - feature
      - product
  PartsCreateRequest:
    discriminant: type
    base-properties:
      artifacts:
        docs: The IDs of the artifacts.
        type: optional<list<string>>
      custom_fields:
        docs: Custom fields.
        type: optional<map<string, unknown>>
      custom_schema_fragments:
        docs: The custom schema fragments to use.
        type: optional<list<string>>
      description:
        docs: Description of the part.
        type: optional<string>
      name:
        type: string
        docs: Name of the part.
      owned_by:
        docs: The users that own the part.
        type: list<string>
    union:
      capability: PartsCreateRequestCapability
      enhancement: PartsCreateRequestEnhancement
      feature: PartsCreateRequestFeature
      product: PartsCreateRequestProduct
  PartsCreateRequestCapability:
    properties:
      parent_part:
        docs: ID of the parent product for the capability.
        type: list<string>
  PartsCreateRequestEnhancement:
    properties:
      parent_part:
        docs: |
          ID of the parent part on which the enhancement is to be created.
        type: list<string>
      target_close_date:
        docs: |
          Target close date by which enhancement is expected to be closed.
        type: optional<datetime>
      target_start_date:
        docs: |
          Target start date by which enhancement is expected to be started.
          Example Date Format: 2000-11-01T01:01:01Z
        type: optional<datetime>
  PartsCreateRequestFeature:
    properties:
      parent_part:
        docs: ID of the parent capability/feature for the feature.
        type: list<string>
  PartsCreateRequestProduct: map<string, unknown>
  PartsCreateResponse:
    properties:
      part: part
  PartsDeleteResponse: map<string, unknown>
  PartsGetResponse:
    properties:
      part: part
  PartsListResponse:
    properties:
      next_cursor:
        docs: |
          The cursor used to iterate subsequent results in accordance to the
          sort order. If not set, then no later elements exist.
        type: optional<string>
      parts:
        docs: The list of parts.
        type: list<part>
      prev_cursor:
        docs: |
          The cursor used to iterate preceding results in accordance to the
          sort order. If not set, then no prior elements exist.
        type: optional<string>
  PartsUpdateRequest:
    discriminant: type
    base-properties:
      artifacts: optional<PartsUpdateRequestArtifacts>
      custom_fields:
        docs: Custom fields.
        type: optional<map<string, unknown>>
      custom_schema_fragments:
        docs: The custom schema fragments to use.
        type: optional<list<string>>
      description:
        docs: The updated description of the part.
        type: optional<string>
      id:
        type: string
        docs: The ID of the part to update.
      name:
        docs: The updated name of the part.
        type: optional<string>
      owned_by: optional<PartsUpdateRequestOwnedBy>
    union:
      capability: PartsUpdateRequestCapability
      enhancement: PartsUpdateRequestEnhancement
      feature: PartsUpdateRequestFeature
      none: empty
      product: PartsUpdateRequestProduct
  PartsUpdateRequestArtifacts:
    properties:
      set:
        docs: Sets the artifacts to the provided IDs.
        type: optional<list<string>>
  PartsUpdateRequestCapability: map<string, unknown>
  PartsUpdateRequestEnhancement:
    properties:
      target_close_date:
        docs: Updates the target close date of the enhancement.
        type: optional<datetime>
      target_start_date:
        docs: |
          Updates the target start date of the enhancement. Example Date
          Format: 2000-11-01T01:01:01Z
        type: optional<datetime>
  PartsUpdateRequestFeature: map<string, unknown>
  PartsUpdateRequestOwnedBy:
    properties:
      set:
        docs: |
          Sets the owner IDs to the provided user IDs. This must not be
          empty.
        type: optional<list<string>>
  PartsUpdateRequestProduct: map<string, unknown>
  PartsUpdateResponse:
    properties:
      part: part
  Product: PartBase
  ProductSummary: PartBaseSummary
  QuestionAnswerSearchSummary:
    properties:
      question_answer: QuestionAnswerSummary
    extends:
      - SearchSummaryBase
  QuestionAnswerSummary:
    properties:
      question:
        docs: The Question.
        type: optional<string>
    extends:
      - AtomBaseSummary
  resource:
    docs: Resource details.
    properties:
      artifacts:
        docs: Ids of the artifacts.
        type: optional<list<ArtifactSummary>>
      url:
        docs: URL of the external article.
        type: optional<string>
  ResourceSummary:
    docs: Resource details.
    properties:
      artifacts:
        docs: Ids of the artifacts.
        type: optional<list<ArtifactSummary>>
      url:
        docs: URL of the external article.
        type: optional<string>
  RevOrg:
    properties:
      account: optional<AccountSummary>
      artifacts:
        docs: The artifacts attached to the Rev organization.
        type: optional<list<ArtifactSummary>>
      custom_fields:
        docs: Custom fields.
        type: optional<map<string, unknown>>
      custom_schema_fragments:
        docs: Custom schema fragments.
        type: optional<list<string>>
      description:
        docs: Description of the Rev organization.
        type: optional<string>
      domain:
        docs: Company's domain name. Example - 'devrev.ai'.
        type: optional<string>
      external_ref:
        docs: |
          External ref is a unique identifier for the Rev (customer)
          organization from your primary customer system of records. If none
          is specified, a system-generated identifier will be assigned to the
          organization.
        type: optional<string>
      stock_schema_fragment:
        docs: Stock schema fragment.
        type: optional<string>
      subtype:
        docs: Subtype corresponding to the custom type fragment.
        type: optional<string>
      tags:
        docs: Tags associated with an object.
        type: optional<list<TagWithValue>>
    extends:
      - OrgBase
  RevOrgSummary: OrgBaseSummary
  RevOrgsCreateResponse:
    docs: |
      Response object for request to create a new Rev organization.
    properties:
      rev_org: RevOrg
  RevOrgsDeleteResponse:
    docs: The response to deleting a Rev organization.
    type: map<string, unknown>
  RevOrgsGetResponse:
    docs: The response to getting a Rev organization's information.
    properties:
      rev_org: RevOrg
  RevOrgsListResponse:
    docs: |
      The response to getting a list of Rev organizations' information.
    properties:
      next_cursor:
        docs: |
          The cursor used to iterate subsequent results in accordance to the
          sort order. If not set, then no later elements exist.
        type: optional<string>
      prev_cursor:
        docs: |
          The cursor used to iterate preceding results in accordance to the
          sort order. If not set, then no prior elements exist.
        type: optional<string>
      rev_orgs:
        docs: List with all of the Rev organizations' information.
        type: list<RevOrg>
  RevOrgsUpdateRequestArtifacts:
    properties:
      set:
        docs: Sets the IDs to the provided artifact IDs.
        type: optional<list<string>>
  RevOrgsUpdateResponse:
    docs: Response object to updating Rev organization's information.
    properties:
      rev_org: RevOrg
  RevUser:
    properties:
      artifacts:
        docs: The artifacts attached to the Rev user.
        type: optional<list<ArtifactSummary>>
      custom_fields:
        docs: Custom fields.
        type: optional<map<string, unknown>>
      custom_schema_fragments:
        docs: Custom schema fragments.
        type: optional<list<string>>
      description:
        docs: Description of the Rev user.
        type: optional<string>
      external_ref:
        docs: |
          External ref is a mutable unique identifier for a user within the
          Rev organization from your primary customer record. If none is
          available, a good alternative is the email address/phone number
          which could uniquely identify the user. If none is specified, a
          system-generated identifier will be assigned to the user.
        type: optional<string>
      is_verified:
        docs: Whether the Rev user is verified or not.
        type: optional<boolean>
      rev_org: optional<OrgSummary>
      stock_schema_fragment:
        docs: Stock schema fragment.
        type: optional<string>
      subtype:
        docs: Subtype corresponding to the custom type fragment.
        type: optional<string>
      tags:
        docs: Tags associated with the object.
        type: optional<list<TagWithValue>>
    extends:
      - UserBase
  RevUserSummary:
    properties:
      external_ref:
        docs: |
          External ref is a mutable unique identifier for a user within the
          Rev organization from your primary customer record. If none is
          available, a good alternative is the email address/phone number
          which could uniquely identify the user. If none is specified, a
          system-generated identifier will be assigned to the user.
        type: optional<string>
      rev_org: optional<OrgSummary>
    extends:
      - UserBaseSummary
  UserBaseSummary:
    properties:
      display_name:
        docs: |
          The user's display name. The name is non-unique and mutable.
        type: optional<string>
      display_picture: optional<ArtifactSummary>
      email:
        docs: Email address of the user.
        type: optional<string>
      full_name:
        docs: Full name of the user.
        type: optional<string>
      state: optional<UserState>
    extends:
      - AtomBaseSummary
  RevUsersCreateResponse:
    docs: |
      Response object for creating a new Rev user for Rev organization.
    properties:
      rev_user: RevUser
  RevUsersDeleteResponse:
    docs: The response to deleting a Rev user of a Rev organization.
    type: map<string, unknown>
  RevUsersGetResponse:
    docs: The returned Rev user.
    properties:
      rev_user: RevUser
  RevUsersListResponse:
    docs: |
      The response to listing all Rev users matching the filter criteria.
    properties:
      next_cursor:
        docs: |
          The cursor used to iterate subsequent results in accordance to the
          sort order. If not set, then no later elements exist.
        type: optional<string>
      prev_cursor:
        docs: |
          The cursor used to iterate preceding results in accordance to the
          sort order. If not set, then no prior elements exist.
        type: optional<string>
      rev_users:
        docs: List containing all the Rev users.
        type: list<RevUser>
  RevUsersUpdateRequestArtifacts:
    properties:
      set:
        docs: Sets the IDs to the provided artifact IDs.
        type: optional<list<string>>
  RevUsersUpdateRequestCustomSchemaFragments:
    properties:
      set:
        docs: Sets the IDs to the provided schema fragment IDs.
        type: optional<list<string>>
  RevUsersUpdateResponse:
    docs: Updated Rev user object.
    properties:
      rev_user: RevUser
  SchemaBoolFieldDescriptor:
    properties:
      default_value:
        docs: Default value.
        type: optional<boolean>
    extends:
      - SchemaFieldDescriptorBase
  SchemaFieldDescriptorBase:
    properties:
      description:
        docs: Description of the field.
        type: optional<string>
      is_filterable:
        docs: |
          Whether this field is filterable, groupable and sortable.
        type: optional<boolean>
      is_pii:
        docs: |
          Whether this field can hold Personally Identifiable Information
          (PII).
        type: optional<boolean>
      is_required:
        docs: Whether this field is required or not.
        type: optional<boolean>
      mfz: optional<SchemaFieldMfzMetadata>
      name:
        type: string
        docs: Name of the field.
      origin:
        docs: Type this field is from.
        type: optional<string>
      ui: optional<SchemaFieldUiMetadata>
  SchemaBoolListFieldDescriptor:
    properties:
      default_value:
        docs: Default value.
        type: optional<list<boolean>>
    extends:
      - SchemaFieldDescriptorBase
  SchemaCompositeFieldDescriptor:
    properties:
      composite_type:
        docs: Composite type. Required when field type is composite.
        type: optional<string>
    extends:
      - SchemaFieldDescriptorBase
  SchemaCompositeListFieldDescriptor:
    properties:
      composite_type:
        docs: Composite type. Required when field type is composite.
        type: optional<string>
    extends:
      - SchemaFieldDescriptorBase
  SchemaDateFieldDescriptor:
    properties:
      default_value:
        docs: Default value.
        type: optional<string>
    extends:
      - SchemaFieldDescriptorBase
  SchemaDateListFieldDescriptor:
    properties:
      default_value:
        docs: Default value.
        type: optional<list<string>>
    extends:
      - SchemaFieldDescriptorBase
  SchemaDoubleFieldDescriptor:
    properties:
      default_value:
        docs: Default value.
        type: optional<double>
    extends:
      - SchemaFieldDescriptorBase
  SchemaDoubleListFieldDescriptor:
    properties:
      default_value:
        docs: Default value.
        type: optional<list<double>>
    extends:
      - SchemaFieldDescriptorBase
  SchemaEnumFieldDescriptor:
    properties:
      allowed_values:
        docs: Allowed values for the field.
        type: list<string>
      default_value:
        docs: Default value.
        type: optional<string>
    extends:
      - SchemaFieldDescriptorBase
  SchemaEnumListFieldDescriptor:
    properties:
      allowed_values:
        docs: Allowed values for the field.
        type: list<string>
      default_value:
        docs: Default value.
        type: optional<list<string>>
    extends:
      - SchemaFieldDescriptorBase
  SchemaFieldCreateViewUiMetadata:
    docs: Create view UI hint overrides.
    properties:
      is_hidden:
        docs: Whether field is hidden in the UI create view.
        type: optional<boolean>
  SchemaFieldDescriptor:
    discriminant: field_type
    base-properties: {}
    docs: Set of field attributes.
    union:
      array: SchemaFieldDescriptorArrayType
      bool: SchemaBoolFieldDescriptor
      composite: SchemaCompositeFieldDescriptor
      date: SchemaDateFieldDescriptor
      double: SchemaDoubleFieldDescriptor
      enum: SchemaEnumFieldDescriptor
      id: SchemaIdFieldDescriptor
      int: SchemaIntFieldDescriptor
      rich_text: SchemaRichTextFieldDescriptor
      text: SchemaTextFieldDescriptor
      timestamp: SchemaTimestampFieldDescriptor
      tokens: SchemaTokensFieldDescriptor
      uenum: SchemaUenumFieldDescriptor
      unknown: SchemaUnknownFieldDescriptor
  SchemaFieldDescriptorArrayType:
    discriminant: base_type
    base-properties:
      eq_items:
        docs: The exact array length.
        type: optional<integer>
      max_items:
        docs: The maximum array length.
        type: optional<integer>
      min_items:
        docs: The minimum array length.
        type: optional<integer>
    union:
      bool: SchemaBoolListFieldDescriptor
      composite: SchemaCompositeListFieldDescriptor
      date: SchemaDateListFieldDescriptor
      double: SchemaDoubleListFieldDescriptor
      enum: SchemaEnumListFieldDescriptor
      id: SchemaIdListFieldDescriptor
      int: SchemaIntListFieldDescriptor
      rich_text: SchemaRichTextListFieldDescriptor
      text: SchemaTextListFieldDescriptor
      timestamp: SchemaTimestampListFieldDescriptor
      tokens: SchemaTokensListFieldDescriptor
      uenum: SchemaUenumListFieldDescriptor
  SchemaFieldDescriptorArrayTypeBaseType:
    enum:
      - bool
      - composite
      - date
      - double
      - enum
      - id
      - int
      - rich_text
      - text
      - timestamp
      - tokens
      - uenum
  SchemaFieldDescriptorFieldType:
    enum:
      - array
      - bool
      - composite
      - date
      - double
      - enum
      - id
      - int
      - rich_text
      - text
      - timestamp
      - tokens
      - uenum
      - unknown
  SchemaFieldDetailViewUiMetadata:
    docs: Detail view UI hint overrides.
    properties:
      is_hidden:
        docs: Whether the field is hidden in the UI detail view.
        type: optional<boolean>
  SchemaFieldFilterViewUiMetadata:
    docs: Filter view UI hint overrides.
    properties:
      is_hidden:
        docs: Whether field is hidden in the UI filter view.
        type: optional<boolean>
  SchemaFieldListViewUiMetadata:
    docs: List view UI hint overrides.
    properties:
      is_hidden:
        docs: Whether the field is hidden in the UI list view.
        type: optional<boolean>
  SchemaFieldMfzMetadata:
    docs: The schema of MFZ specific fields.
    type: map<string, unknown>
  SchemaFieldSummaryViewUiMetadata:
    docs: Summary view UI hint overrides.
    properties:
      is_hidden:
        docs: Whether field is hidden in the UI summary view.
        type: optional<boolean>
  SchemaFieldUenumValue:
    docs: A unified enum value.
    type: map<string, unknown>
  SchemaFieldUiMetadata:
    docs: The schema of ui specific fields.
    properties:
      create_view: optional<SchemaFieldCreateViewUiMetadata>
      detail_view: optional<SchemaFieldDetailViewUiMetadata>
      display_name:
        docs: The display name of the field.
        type: optional<string>
      filter_view: optional<SchemaFieldFilterViewUiMetadata>
      group_name:
        docs: An optional group name for the field.
        type: optional<string>
      is_active_in_detail_view:
        docs: Whether the field is active in the UI detail view.
        type: optional<boolean>
      is_bulk_action_enabled:
        docs: Whether the field supports bulk action.
        type: optional<boolean>
      is_groupable:
        docs: Whether the field is groupable in the UI.
        type: optional<boolean>
      is_hidden:
        docs: Whether the field is hidden in the UI.
        type: optional<boolean>
      is_hidden_during_create:
        docs: Whether the field is hidden in the UI during creation.
        type: optional<boolean>
      is_read_only:
        docs: Whether the field is read-only in the UI.
        type: optional<boolean>
      is_shown_in_summary:
        docs: Whether the field is shown in the UI summary view.
        type: optional<boolean>
      is_sortable:
        docs: Whether the field is sortable in the UI.
        type: optional<boolean>
      list_view: optional<SchemaFieldListViewUiMetadata>
      placeholder:
        docs: A placeholder for the field.
        type: optional<string>
      summary_view: optional<SchemaFieldSummaryViewUiMetadata>
      tooltip:
        docs: Tooltip for the field.
        type: optional<string>
  SchemaIdFieldDescriptor:
    properties:
      default_value:
        docs: Default value.
        type: optional<string>
      id_type:
        docs: Object ID types. Required when field type is ID.
        type: optional<list<string>>
    extends:
      - SchemaFieldDescriptorBase
  SchemaIdListFieldDescriptor:
    properties:
      default_value:
        docs: Default value.
        type: optional<list<string>>
      id_type:
        docs: Object ID types. Required when field type is ID.
        type: optional<list<string>>
    extends:
      - SchemaFieldDescriptorBase
  SchemaIntFieldDescriptor:
    properties:
      default_value:
        docs: Default value.
        type: optional<integer>
      gt:
        docs: The minimum value for the integer (exclusive).
        type: optional<integer>
      gte:
        docs: The minimum value for the integer (inclusive).
        type: optional<integer>
      lt:
        docs: The maximum value for the integer (exclusive).
        type: optional<integer>
      lte:
        docs: The maximum value for the integer (inclusive).
        type: optional<integer>
    extends:
      - SchemaFieldDescriptorBase
  SchemaIntListFieldDescriptor:
    properties:
      default_value:
        docs: Default value.
        type: optional<list<integer>>
      gt:
        docs: The minimum value for the integer (exclusive).
        type: optional<integer>
      gte:
        docs: The minimum value for the integer (inclusive).
        type: optional<integer>
      lt:
        docs: The maximum value for the integer (exclusive).
        type: optional<integer>
      lte:
        docs: The maximum value for the integer (inclusive).
        type: optional<integer>
    extends:
      - SchemaFieldDescriptorBase
  SchemaRichTextFieldDescriptor:
    properties:
      contains:
        docs: The contained substring.
        type: optional<string>
      default_value:
        docs: Default value.
        type: optional<string>
      eq_len:
        docs: The exact string length.
        type: optional<integer>
      max_len:
        docs: The maximum string length.
        type: optional<integer>
      min_len:
        docs: The minimum string length.
        type: optional<integer>
      pattern:
        docs: The string pattern (regular expression).
        type: optional<string>
      prefix:
        docs: The string prefix.
        type: optional<string>
      suffix:
        docs: The string suffix.
        type: optional<string>
    extends:
      - SchemaFieldDescriptorBase
  SchemaRichTextListFieldDescriptor:
    properties:
      contains:
        docs: The contained substring.
        type: optional<string>
      default_value:
        docs: Default value.
        type: optional<list<string>>
      eq_len:
        docs: The exact string length.
        type: optional<integer>
      max_len:
        docs: The maximum string length.
        type: optional<integer>
      min_len:
        docs: The minimum string length.
        type: optional<integer>
      pattern:
        docs: The string pattern (regular expression).
        type: optional<string>
      prefix:
        docs: The string prefix.
        type: optional<string>
      suffix:
        docs: The string suffix.
        type: optional<string>
    extends:
      - SchemaFieldDescriptorBase
  SchemaTextFieldDescriptor:
    properties:
      contains:
        docs: The contained substring.
        type: optional<string>
      default_value:
        docs: Default value.
        type: optional<string>
      eq_len:
        docs: The exact string length.
        type: optional<integer>
      max_len:
        docs: The maximum string length.
        type: optional<integer>
      min_len:
        docs: The minimum string length.
        type: optional<integer>
      pattern:
        docs: The string pattern (regular expression).
        type: optional<string>
      prefix:
        docs: The string prefix.
        type: optional<string>
      suffix:
        docs: The string suffix.
        type: optional<string>
    extends:
      - SchemaFieldDescriptorBase
  SchemaTextListFieldDescriptor:
    properties:
      contains:
        docs: The contained substring.
        type: optional<string>
      default_value:
        docs: Default value.
        type: optional<list<string>>
      eq_len:
        docs: The exact string length.
        type: optional<integer>
      max_len:
        docs: The maximum string length.
        type: optional<integer>
      min_len:
        docs: The minimum string length.
        type: optional<integer>
      pattern:
        docs: The string pattern (regular expression).
        type: optional<string>
      prefix:
        docs: The string prefix.
        type: optional<string>
      suffix:
        docs: The string suffix.
        type: optional<string>
    extends:
      - SchemaFieldDescriptorBase
  SchemaTimestampFieldDescriptor:
    properties:
      default_value:
        docs: Default value.
        type: optional<string>
    extends:
      - SchemaFieldDescriptorBase
  SchemaTimestampListFieldDescriptor:
    properties:
      default_value:
        docs: Default value.
        type: optional<list<string>>
    extends:
      - SchemaFieldDescriptorBase
  SchemaTokensFieldDescriptor:
    properties:
      contains:
        docs: The contained substring.
        type: optional<string>
      default_value:
        docs: Default value.
        type: optional<string>
      eq_len:
        docs: The exact string length.
        type: optional<integer>
      max_len:
        docs: The maximum string length.
        type: optional<integer>
      min_len:
        docs: The minimum string length.
        type: optional<integer>
      pattern:
        docs: The string pattern (regular expression).
        type: optional<string>
      prefix:
        docs: The string prefix.
        type: optional<string>
      suffix:
        docs: The string suffix.
        type: optional<string>
    extends:
      - SchemaFieldDescriptorBase
  SchemaTokensListFieldDescriptor:
    properties:
      contains:
        docs: The contained substring.
        type: optional<string>
      default_value:
        docs: Default value.
        type: optional<list<string>>
      eq_len:
        docs: The exact string length.
        type: optional<integer>
      max_len:
        docs: The maximum string length.
        type: optional<integer>
      min_len:
        docs: The minimum string length.
        type: optional<integer>
      pattern:
        docs: The string pattern (regular expression).
        type: optional<string>
      prefix:
        docs: The string prefix.
        type: optional<string>
      suffix:
        docs: The string suffix.
        type: optional<string>
    extends:
      - SchemaFieldDescriptorBase
  SchemaUenumFieldDescriptor:
    properties:
      allowed_values:
        docs: Allowed values for the field.
        type: list<SchemaFieldUenumValue>
      default_value:
        docs: Default value.
        type: optional<integer>
    extends:
      - SchemaFieldDescriptorBase
  SchemaUenumListFieldDescriptor:
    properties:
      allowed_values:
        docs: Allowed values for the field.
        type: list<SchemaFieldUenumValue>
      default_value:
        docs: Default value.
        type: optional<list<integer>>
    extends:
      - SchemaFieldDescriptorBase
  SchemaUnknownFieldDescriptor: SchemaFieldDescriptorBase
  SearchCoreResponse:
    docs: Search response.
    properties:
      cursor:
        docs: |
          The cursor from where to begin iteration. Start from beginning if
          not provided.
        type: optional<string>
      results:
        docs: The search results.
        type: list<SearchResult>
  SearchNamespace:
    enum:
      - account
      - article
      - capability
      - component
      - conversation
      - custom_part
      - custom_work
      - dev_user
      - enhancement
      - feature
      - group
      - issue
      - linkable
      - microservice
      - object_member
      - opportunity
      - product
      - project
      - question_answer
      - rev_org
      - rev_user
      - runnable
      - service_account
      - sys_user
      - tag
      - task
      - ticket
      - vista
    docs: The namespaces to search in.
  SearchResult:
    discriminant: type
    base-properties: {}
    union:
      account: AccountSearchSummary
      article: ArticleSearchSummary
      artifact: ArtifactSearchSummary
      conversation: ConversationSearchSummary
      group: GroupSearchSummary
      link: LinkSearchSummary
      object_member: ObjectMemberSearchSummary
      org: OrgSearchSummary
      part: PartSearchSummary
      question_answer: QuestionAnswerSearchSummary
      tag: TagSearchSummary
      user: UserSearchSummary
      vista: VistaSearchSummary
      work: WorkSearchSummary
  SearchResultType:
    enum:
      - account
      - article
      - artifact
      - conversation
      - group
      - link
      - object_member
      - org
      - part
      - question_answer
      - tag
      - user
      - vista
      - work
  SearchSortByParam:
    enum:
      - created_date
      - modified_date
      - relevance
    docs: Search sort by parameters.
  SearchSortOrderParam:
    enum:
      - asc
      - desc
    docs: Search sort order parameters.
  ServiceAccount: UserBase
  ServiceAccountSummary: UserBaseSummary
  ServiceAccountsGetResponse:
    docs: |
      The response object that carries the service account's information
      corresponding to the request.
    properties:
      service_account: ServiceAccount
  SetOrgScheduleFragmentSummary:
    properties:
      id:
        type: string
        docs: Organization schedule fragment ID.
  SetSlaPolicy:
    properties:
      metrics:
        docs: Metrics to apply to the selected items.
        type: optional<list<SetSupportMetricTarget>>
      name:
        type: string
        docs: Human-readable name.
      selector: SetSlaSelector
  SetSlaSelector:
    properties:
      applies_to: SlaSelectorAppliesTo
      custom_fields:
        docs: |
          Custom fields with their fully qualified names and associated with
          their exact allowed values. The SLA policy applies to records where
          all named custom fields have exactly the specified values. If the
          value is null, the field must have null value or not be present.
        type: optional<map<string, unknown>>
      parts:
        docs: The SLA policy applies to the tickets of these parts.
        type: optional<list<string>>
      priority:
        docs: |
          The SLA policy applies to conversations with these priorities.
        type: optional<list<SlaSelectorPriority>>
      severity:
        docs: The SLA policy applies to tickets with these severities.
        type: optional<list<SlaSelectorSeverity>>
      source_channel:
        docs: |
          The SLA policy applies to conversations with these sources.
        type: optional<list<string>>
      subtype:
        docs: The SLA policy applies to tickets with these subtypes.
        type: optional<list<string>>
      tags:
        docs: The SLA policy applies to items with these tags.
        type: optional<list<string>>
  SetSupportMetricTarget:
    properties:
      metric:
        type: string
        docs: The metric to apply.
      org_schedule_id:
        docs: |
          The organization schedule controlling this metrics calculation.
          Time based metrics don't consume time while their schedule is off.
        type: optional<string>
      performance:
        docs: |
          The percentage of instances for which this metric's target must not
          be breached, in order to avoid breaching the overall SLA policy.
        type: optional<double>
      target:
        type: integer
        docs: |
          The target value to be achieved, for example the time in which to
          do something, or the maximum allowed number of message pairs. The
          units and interpretation of the value is controlled by the
          properties of the referenced metric.
      warning_target:
        docs: |
          The threshold in the same units as target where the metric is
          considered to be 'at risk'.
        type: optional<integer>
  SetTagWithValue:
    properties:
      id:
        type: string
        docs: The ID of the tag.
      value:
        docs: |
          The value for the object's association with the tag. If specified,
          the value must be one that's specified in the tag's allowed values.
        type: optional<string>
  SetWeeklyOrgSchedule:
    properties:
      intervals:
        docs: The 'on' intervals of the week.
        type: list<CreateWeeklyOrgScheduleInterval>
      period_name:
        type: string
        docs: |
          The name of the period during which the organization schedule
          applies.
  SharedWithMembership:
    docs: |
      Information about the role the member receives due to the share.
    type: map<string, unknown>
  SharedWithMembershipFilter:
    docs: Filter on target item based on intended audience.
    type: map<string, unknown>
  sla:
    properties:
      compensation: optional<SlaCompensation>
      description:
        docs: Description of the purpose and capabilities of the SLA.
        type: optional<string>
      evaluation_period: optional<SlaEvaluationPeriod>
      name:
        type: string
        docs: Human-readable name.
      policies:
        docs: |
          The policies encompassed by this SLA, ordered in decreasing
          priority.
        type: optional<list<SlaPolicy>>
      status: SlaStatus
    extends:
      - AtomBase
  SlaAssignResult:
    properties:
      error: optional<error>
      rev_org: RevOrgSummary
  SlaCompensation:
    docs: |
      Describes the compensation to be provided in case of SLA breach. It is
      not 'self-executing', it is the responsibility of the organization
      providing the SLA to actually transfer the promised credit, resource or
      other payment.
    type: map<string, unknown>
  SlaEvaluationPeriod:
    enum:
      - monthly
      - quarterly
      - weekly
      - yearly
    docs: |
      Specifies the frequency of when the contractually-meaningful evaluation
      of the SLA happens. The organization for their own information might
      evaluate the various metrics contained in the policy as often as we can
      make it feasible for them, but only the evaluation at the end of the
      evaluation period triggers a compensation and needs to be shared with
      the customer.
  SlaPolicy:
    docs: A policy that represents a promise to your revs.
    type: map<string, unknown>
  SlaSelectorAppliesTo:
    enum:
      - conversation
      - ticket
    docs: The item type for which the SLA policy applies.
  SlaSelectorPriority:
    enum:
      - p0
      - p1
      - p2
    docs: |
      Th SLA policy applies to conversations with these priorities.
  SlaSelectorSeverity:
    enum:
      - blocker
      - high
      - low
      - medium
    docs: The SLA policy applies to tickets with these severities.
  SlaStatus:
    enum:
      - archived
      - draft
      - published
    docs: |
      Status determines how an item can be used. In 'draft' status an item
      can be edited but can't be used. When 'published' the item can longer
      be edited but can be used. 'Archived' is read-only.
  SlaSummaryFilter:
    docs: The filter for SLA summary.
    properties:
      stage:
        docs: Filters for records with any of the provided SLA stages.
        type: optional<list<SlaSummaryStage>>
      target_time: optional<DateFilter>
  SlaSummaryStage:
    enum:
      - breached
      - completed
      - paused
      - running
      - warning
    docs: |
      The stage of the SLA. This is the metric stage which is closest to
      breach.
  SlaTracker: AtomBase
  SlasAssignResponse:
    properties:
      results:
        docs: The list of outcomes for each Rev organization.
        type: list<SlaAssignResult>
  SlasCreateResponse:
    properties:
      sla: sla
  SlasGetResponse:
    properties:
      sla: sla
  SlasListResponse:
    properties:
      next_cursor:
        docs: |
          The cursor used to iterate subsequent results in accordance to the
          sort order. If not set, then no later elements exist.
        type: optional<string>
      prev_cursor:
        docs: |
          The cursor used to iterate preceding results in accordance to the
          sort order. If not set, then no prior elements exist.
        type: optional<string>
      slas:
        docs: The list of SLAs.
        type: list<sla>
  SlasTransitionResponse:
    properties:
      sla: sla
  SlasUpdateResponse:
    properties:
      sla: sla
  SnapInVersionSummary: AtomBaseSummary
  SnapInsResourcesResponse:
    properties:
      event_sources: optional<SnapInsResourcesResponseEventSourcesEntry>
      inputs:
        docs: The inputs for the snap-in.
        type: optional<map<string, unknown>>
      keyrings: optional<SnapInsResourcesResponseKeyringsEntry>
      snap_in_version: SnapInVersionSummary
  SnapInsResourcesResponseEventSourcesEntry:
    properties:
      key: string
      value: string
  SnapInsResourcesResponseKeyringData:
    properties:
      id:
        type: string
        docs: The ID of the keyring.
      secret:
        type: string
        docs: |
          The secret value of the keyring. This must be handled with caution.
  SnapInsResourcesResponseKeyringsEntry:
    properties:
      key: string
      value: SnapInsResourcesResponseKeyringData
  SnapWidget:
    discriminant: type
    base-properties: {}
    union:
      email_preview: EmailPreviewWidget
  SnapWidgetNamespace:
    enum:
      - email_preview
      - link_preview
      - plug_nudge
    docs: Logical grouping of snap widgets. Useful for filtering.
  SnapWidgetStatus:
    enum:
      - draft
      - published
    docs: The status of the snap widget.
  SnapWidgetType: literal<"email_preview">
  SnapWidgetsCreateRequest:
    discriminant: type
    base-properties:
      name:
        type: string
        docs: A human readable name for the snap widget.
      namespace: optional<SnapWidgetNamespace>
      status: optional<SnapWidgetStatus>
    union:
      email_preview: CreateEmailPreviewWidget
  SnapWidgetsCreateRequestType: literal<"email_preview">
  SnapWidgetsCreateResponse:
    properties:
      snap_widget: SnapWidget
  StageDiagramSummary: AtomBaseSummary
  StageFilter:
    docs: The filter for stages.
    properties:
      name:
        docs: Filters for records in the provided stage(s) by name.
        type: optional<list<string>>
  StageInit:
    docs: Sets an object's initial stage.
    properties:
      name:
        docs: The name of the stage.
        type: optional<string>
  StageUpdate:
    docs: Updates an object's stage.
    properties:
      name:
        docs: |
          The updated name of the stage, otherwise unchanged if not set.
        type: optional<string>
  StagedInfoFilter:
    properties:
      is_staged:
        docs: Filters for issues that are staged.
        type: optional<boolean>
  StockFieldOverride:
    docs: A stock field override.
    type: map<string, unknown>
  StockSchemaFragment:
    properties:
      description:
        docs: Description of the schema.
        type: optional<string>
      fields:
        docs: List of all fields in this schema.
        type: list<SchemaFieldDescriptor>
      leaf_type:
        docs: Leaf type this fragment applies to.
        type: optional<string>
      new_fragment_ref: optional<AtomSummary>
      old_fragment_ref: optional<AtomSummary>
      title:
        docs: Title of the schema.
        type: optional<string>
    extends:
      - AtomBase
  StockSchemaFragmentsGetResponse:
    properties:
      fragment: StockSchemaFragment
  StockSchemaFragmentsListRequestFilterPreset:
    enum:
      - customizable_types_preset
      - no_preset
  StockSchemaFragmentsListRequestPrune:
    enum:
      - composite_schemas
      - fields
  StockSchemaFragmentsListResponse:
    properties:
      cursor:
        docs: |
          The cursor to resume iteration from, otherwise if not provided,
          then iteration starts from the beginning.
        type: optional<string>
      result:
        docs: The stock schema fragments.
        type: list<StockSchemaFragment>
  subtype:
    properties:
      display_name:
        docs: Display name of the subtype.
        type: optional<string>
      fragment_id:
        type: string
        docs: DON of the custom type fragment this subtype belongs to.
      leaf_type:
        type: string
        docs: Leaf type for the subtype.
      value:
        type: string
        docs: Value of the subtype.
  SubtypesListResponse:
    properties:
      subtypes:
        docs: List of subtypes.
        type: list<subtype>
  SurveyAggregationFilter:
    docs: The filter for survey aggregation.
    type: map<string, unknown>
  SyncMetadataFilter:
    properties:
      last_sync_in: optional<SyncMetadataFilterSyncInFilter>
      last_sync_out: optional<SyncMetadataFilterSyncOutFilter>
      origin_system:
        docs: |
          Filters for issues synced from this specific origin system.
        type: optional<list<string>>
  SyncMetadataFilterSyncInFilter:
    properties:
      status:
        docs: Filters for works with selected sync statuses.
        type: optional<list<SyncMetadataFilterSyncInFilterStatus>>
      sync_date: optional<DateFilter>
      sync_unit:
        docs: Filters for works modified with selected sync units.
        type: optional<list<string>>
  SyncMetadataFilterSyncInFilterStatus:
    enum:
      - failed
      - modified
      - staged
      - succeeded
  SyncMetadataFilterSyncOutFilter:
    properties:
      status:
        docs: Filters for works with selected sync statuses.
        type: optional<list<SyncMetadataFilterSyncOutFilterStatus>>
      sync_date: optional<DateFilter>
      sync_unit:
        docs: Filters for works modified with selected sync units.
        type: optional<list<string>>
  SyncMetadataFilterSyncOutFilterStatus:
    enum:
      - failed
      - succeeded
  SysUser: UserBase
  SysUserSummary: UserBaseSummary
  SysUsersListResponse:
    docs: The response to listing the system users.
    properties:
      next_cursor:
        docs: |
          The cursor used to iterate subsequent results in accordance to the
          sort order. If not set, then no later elements exist.
        type: optional<string>
      prev_cursor:
        docs: |
          The cursor used to iterate preceding results in accordance to the
          sort order. If not set, then no prior elements exist.
        type: optional<string>
      sys_users:
        docs: The list of system users.
        type: list<SysUser>
  SysUsersUpdateResponse:
    docs: Updated Sys user object.
    properties:
      sys_user: SysUser
  tag:
    properties:
      allowed_values:
        docs: |
          The allowed values for the tag, where a value is provided when a
          tag is associated with an object. If empty, then no value should be
          provided when the association is made.
        type: optional<list<string>>
      description:
        docs: |
          An informative description for the tag that should provide context
          on the tag's purpose and usage.
        type: optional<string>
      name:
        type: string
        docs: |
          The name of the tag, which denotes the logical concept by which all
          tagged objects will be associated. The name is guaranteed to be
          unique.
    extends:
      - AtomBase
  TagSearchSummary:
    properties:
      tag: TagSummary
    extends:
      - SearchSummaryBase
  TagSummary:
    properties:
      name:
        type: string
        docs: |
          The name of the tag, which denotes the logical concept by which all
          tagged objects will be associated. The name is guaranteed to be
          unique.
    extends:
      - AtomBaseSummary
  TagWithValue:
    properties:
      tag: TagSummary
      value:
        docs: The value for the object's association with the tag.
        type: optional<string>
  TagWithValueFilter:
    properties:
      id:
        docs: The ID of the tag.
        type: optional<string>
      value:
        docs: |
          The value for the object's association with the tag. If specified,
          the value must be one that's specified in the tag's allowed values.
        type: optional<string>
  TagsCreateResponse:
    docs: The response to creating a new tag.
    properties:
      tag: tag
  TagsDeleteResponse:
    docs: The response for deleting a tag.
    type: map<string, unknown>
  TagsGetResponse:
    docs: The response to getting a tag's information.
    properties:
      tag: tag
  TagsListResponse:
    docs: The response to listing the tags.
    properties:
      next_cursor:
        docs: |
          The cursor used to iterate subsequent results in accordance to the
          sort order. If not set, then no later elements exist.
        type: optional<string>
      prev_cursor:
        docs: |
          The cursor used to iterate preceding results in accordance to the
          sort order. If not set, then no prior elements exist.
        type: optional<string>
      tags:
        docs: The list of tags.
        type: list<tag>
  TagsUpdateAllowedValues:
    docs: Specifies an update to a tag's allowed values.
    properties:
      set:
        docs: Sets the allowed values for the tag.
        type: optional<list<string>>
  TagsUpdateResponse:
    docs: The response for updating a tag.
    properties:
      tag: tag
  Task: WorkBase
  TaskPriority:
    enum:
      - p0
      - p1
      - p2
      - p3
    docs: Priority of the work based upon impact and criticality.
  TaskSummary: WorkBaseSummary
  TenantFragment: CustomSchemaFragmentBase
  TenantFragmentSummary: CustomSchemaFragmentBaseSummary
  ticket:
    properties:
      channels:
        docs: Channels of the ticket.
        type: optional<list<TicketChannels>>
      group: optional<GroupSummary>
      rev_org: optional<OrgSummary>
      severity: optional<TicketSeverity>
      source_channel:
        docs: Source channel of the ticket.
        type: optional<string>
    extends:
      - WorkBase
  TicketChannels:
    enum:
      - email
      - plug
      - slack
    docs: Channels of the ticket.
  TicketSeverity:
    enum:
      - blocker
      - high
      - low
      - medium
    docs: Severity of the ticket.
  TicketSummary:
    properties:
      rev_org: optional<OrgSummary>
      severity: optional<TicketSeverity>
    extends:
      - WorkBaseSummary
  TimelineComment:
    properties:
      artifacts:
        docs: The artifacts for the comment.
        type: optional<list<ArtifactSummary>>
      body:
        docs: |
          The comment's body. If the comment has been deleted, then no body
          will appear in the response.
        type: optional<string>
      body_type: optional<TimelineCommentBodyType>
      snap_kit_body: optional<TimelineSnapKitBody>
      snap_widget_body:
        docs: The snap widget body of the comment.
        type: optional<list<SnapWidget>>
    extends:
      - TimelineEntryBase
  TimelineEntryBase:
    properties:
      labels:
        docs: Labels that are associated with the Timeline entry.
        type: optional<list<string>>
      object:
        type: string
        docs: The object that the Timeline entry belongs to.
      object_display_id:
        type: string
        docs: |
          The display ID of the object that the Timeline entry belongs to.
      object_type: optional<TimelineEntryObjectType>
      reactions:
        docs: The reactions to the entry.
        type: optional<list<TimelineReaction>>
      thread: optional<TimelineThread>
      visibility: optional<TimelineEntryVisibility>
    extends:
      - AtomBase
  TimelineCommentBodyType:
    enum:
      - snap_kit
      - snap_widget
      - text
    docs: The type of the body to use for the comment.
  TimelineCommentSummary: TimelineEntryBaseSummary
  TimelineEntriesCollection:
    enum:
      - discussions
      - events
    docs: Describes collections of timeline entries.
  TimelineEntriesCreateRequest:
    discriminant: type
    base-properties:
      collections:
        docs: |
          The collection(s) that the entry belongs to, otherwise if not
          provided, then the entry's default collection is used.
        type: optional<list<TimelineEntriesCollection>>
      expires_at:
        docs: |
          If set, then the entry is ephemeral and will be deleted after the
          provided time. The minimum value should be at least a minute more
          than the current timestamp.
        type: optional<datetime>
      labels:
        docs: The labels to be associated with the entry.
        type: optional<list<string>>
      object:
        type: string
        docs: The ID of the object to create the timeline entry for.
      private_to:
        docs: |
          If the visibility of the entry is private, this specifies the users
          that the entry is private to. Note the creator is always implicitly
          included in this list.
        type: optional<list<string>>
      visibility: optional<TimelineEntryVisibility>
    docs: The request to create a timeline entry for an object.
    union:
      timeline_comment: TimelineEntriesCreateRequestTimelineComment
  TimelineEntriesCreateRequestTimelineComment:
    properties:
      artifacts:
        docs: The IDs of the artifacts attached to the comment.
        type: optional<list<string>>
      body:
        docs: The comment's body.
        type: optional<string>
      body_type: optional<TimelineCommentBodyType>
      link_previews:
        docs: |
          The IDs of the previews of the links posted in the comment.
        type: optional<list<string>>
      snap_kit_body: optional<TimelineSnapKitBody>
      snap_widget_body:
        docs: The snap widget body of the comment.
        type: optional<list<string>>
  TimelineEntriesCreateRequestType: literal<"timeline_comment">
  TimelineEntriesCreateResponse:
    docs: The response to creating a timeline entry for an object.
    properties:
      timeline_entry: TimelineEntry
  TimelineEntriesDeleteResponse:
    docs: The response to deleting a timeline entry from an object.
    type: map<string, unknown>
  TimelineEntriesGetResponse:
    docs: The request to getting a timeline entry.
    properties:
      timeline_entry: TimelineEntry
  TimelineEntriesListResponse:
    docs: The response to listing timeline entries for an object.
    properties:
      next_cursor:
        docs: |
          The cursor used to iterate subsequent results in accordance to the
          sort order. If not set, then no later elements exist.
        type: optional<string>
      prev_cursor:
        docs: |
          The cursor used to iterate preceding results in accordance to the
          sort order. If not set, then no prior elements exist.
        type: optional<string>
      timeline_entries:
        docs: The timeline entries for the object.
        type: list<TimelineEntry>
  TimelineEntriesUpdateRequest:
    discriminant: type
    base-properties:
      id:
        type: string
        docs: The ID of the timeline entry to update.
    docs: The request to update a timeline entry.
    union:
      timeline_comment: TimelineEntriesUpdateRequestTimelineComment
  TimelineEntriesUpdateRequestTimelineComment:
    properties:
      artifacts: optional<TimelineEntriesUpdateRequestTimelineCommentArtifacts>
      body:
        docs: The updated comment's body.
        type: optional<string>
      body_type: optional<TimelineCommentBodyType>
      link_previews: optional<TimelineEntriesUpdateRequestTimelineCommentLinkPreviews>
      snap_kit_body: optional<TimelineSnapKitBody>
  TimelineEntriesUpdateRequestTimelineCommentArtifacts:
    properties:
      add:
        docs: |
          Adds the provided artifacts to the comment. An artifact cannot be
          added more than once, i.e. nothing is done if the artifact is
          already attached. Mutually exclusive with `set`.
        type: optional<list<string>>
      remove:
        docs: |
          Removes the provided artifacts from the comment. If an artifact is
          not present, then it's ignored. Mututally exclusive with `set`.
        type: optional<list<string>>
      set:
        docs: Sets the field to the provided artifacts.
        type: optional<list<string>>
  TimelineEntriesUpdateRequestTimelineCommentLinkPreviews:
    properties:
      add:
        docs: |
          Adds the provided link previews to the comment. A link preview
          cannot be added more than once, i.e. nothing is done if the link
          preview is already present. Mutually exclusive with `set`.
        type: optional<list<string>>
      remove:
        docs: |
          Removes the provided link previews from the comment. If a link
          preview is not present, then it's ignored. Mutually exclusive with
          `set`.
        type: optional<list<string>>
      set:
        docs: Set the link previews to the provided IDs.
        type: optional<list<string>>
  TimelineEntriesUpdateRequestType: literal<"timeline_comment">
  TimelineEntriesUpdateResponse:
    docs: The response to updating a timeline entry.
    properties:
      timeline_entry: TimelineEntry
  TimelineEntry:
    discriminant: type
    base-properties: {}
    union:
      timeline_comment: TimelineComment
  TimelineEntryBaseSummary: AtomBaseSummary
  TimelineEntryObjectType:
    enum:
      - account
      - capability
      - conversation
      - engagement
      - enhancement
      - feature
      - issue
      - meeting
      - opportunity
      - product
      - rev_org
      - rev_user
      - task
      - ticket
      - timeline_comment
    docs: The type of object that the Timeline entry belongs to.
  TimelineEntryType: literal<"timeline_comment">
  TimelineEntryVisibility:
    enum:
      - external
      - internal
      - private
      - public
    docs: |
      The visibility of the entry. If 'private', then the entry is only
      visible to the creator, 'internal' is visible with the Dev
      organization, 'external' is visible to the Dev organzation and Rev
      users, and 'public' is visible to all. If not set, then the default
      visibility is 'external'.
  TimelineReaction:
    docs: Reaction.
    properties:
      emoji:
        docs: The reaction emoji's unicode codepoint, e.g. "1f44d".
        type: optional<string>
      reacted:
        docs: Whether the requesting user reacted.
        type: optional<boolean>
      total_users:
        docs: The total number of users with this reaction.
        type: optional<integer>
  TimelineSnapKitBody:
    docs: Snap Kit Body of the comment.
    properties:
      body:
        docs: The JSON body of the SnapKit.
        type: optional<map<string, unknown>>
      snap_in_action_name:
        docs: |
          The name of an action defined in the SnapIn. The combination of
          snap_in_id and snap_in_action_name uniquely identifies the
          interaction object which is to be called when actions on a snapkit
          element is taken.
        type: optional<string>
      snap_in_id:
        docs: ID of the snap-in which created the SnapKit.
        type: optional<string>
  TimelineThread:
    docs: Thread.
    properties:
      total_replies:
        docs: The total number of replies in the thread.
        type: optional<integer>
  TrackEvent:
    properties:
      client_context: optional<ClientContext>
      event_id:
        docs: Unique ID for the event.
        type: optional<string>
      event_time:
        docs: The timestamp at which the event occurred.
        type: optional<datetime>
      name:
        type: string
        docs: Name of the event.
      payload:
        docs: Payload of the event
        type: map<string, unknown>
  TrackEventsPublishResponse: map<string, unknown>
  unit:
    docs: |
      Unit encapsulates the name of the unit and the type of the unit. For
      example, '#Number of API calls' where name is 'number_of_api_calls' and
      type is 'number'.
    properties:
      name:
        type: string
        docs: |
          This represents human readable unit name of the UOM For example,
          number of API calls.
      type: UnitType
  UnitType:
    enum:
      - boolean
      - number
    docs: |
      This defines the UOM unit type. For example, for 'number of video
      calls', unit type will be a number.
  UnlinkRevUserFromRevOrgResponse:
    docs: The response to unlink a rev user from a rev org.
    properties:
      rev_user: RevUser
  uom:
    properties:
      aggregation_details: AggregationDetail
      description:
        docs: Description of the UOM.
        type: optional<string>
      dimensions:
        docs: |
          The list of dimensions that can be emitted along with the metering
          data.
        type: optional<list<string>>
      is_enabled:
        type: boolean
        docs: |
          If set to true, then the UOM can be configured as part of
          entitlements in skus and metering data only for the enabled uoms
          will be passed through the metering pipeline.
      metric_name:
        type: string
        docs: Human readable metric name of the UOM.
      metric_scope: UomMetricScope
      name:
        type: string
        docs: Human readable name of the UOM.
      part: optional<PartSummary>
      product: PartSummary
      unit: unit
    extends:
      - AtomBase
  UomMetricScope:
    enum:
      - org
      - user
    docs: |
      The granularity at which the metrics ingestion data is to be emitted
      for the UOM.
  UomsCreateResponse:
    properties:
      uom: uom
  UomsGetResponse:
    properties:
      uom: uom
  UomsListResponse:
    properties:
      next_cursor:
        docs: |
          The cursor used to iterate subsequent results in accordance to the
          sort order. If not set, then no later elements exist.
        type: optional<string>
      prev_cursor:
        docs: |
          The cursor used to iterate preceding results in accordance to the
          sort order. If not set, then no prior elements exist.
        type: optional<string>
      uoms:
        docs: The list of Unit of Measurement (UOM) objects.
        type: list<uom>
  UomsUpdateRequestDimensions:
    properties:
      add:
        docs: Adds the provided dimensions to the UOM.
        type: optional<list<string>>
      remove:
        docs: Removes the provided dimensions from the UOM.
        type: optional<list<string>>
  UomsUpdateResponse:
    properties:
      uom: uom
  UserBase:
    properties:
      display_name:
        docs: |
          The user's display name. The name is non-unique and mutable.
        type: optional<string>
      display_picture: optional<ArtifactSummary>
      email:
        docs: Email address of the user.
        type: optional<string>
      full_name:
        docs: Full name of the user.
        type: optional<string>
      phone_numbers:
        docs: Phone numbers of the user.
        type: optional<list<string>>
      state: optional<UserState>
    extends:
      - AtomBase
  UserSearchSummary:
    properties:
      user: UserSummary
    extends:
      - SearchSummaryBase
  UserState:
    enum:
      - active
      - deactivated
      - deleted
      - locked
      - shadow
      - unassigned
    docs: State of the user.
  UserSummary:
    discriminant: type
    base-properties: {}
    union:
      dev_user: DevUserSummary
      rev_user: RevUserSummary
      service_account: ServiceAccountSummary
      sys_user: SysUserSummary
  UserType:
    enum:
      - dev_user
      - rev_user
      - service_account
      - sys_user
  VistaSearchSummary:
    properties:
      vista: VistaSummary
    extends:
      - SearchSummaryBase
  VistaSummary:
    discriminant: type
    base-properties: {}
    docs: Represents a collection of DevRev objects.
    union:
      curated: CuratedVistaSummary
      dynamic: DynamicVistaSummary
      grouped: GroupedVistaSummary
  VistaType:
    enum:
      - curated
      - dynamic
      - grouped
    docs: Type of vista object.
  webhook:
    properties:
      event_types:
        docs: The event types that the webhook will receive.
        type: optional<list<WebhookEventType>>
      secret:
        type: string
        docs: The secret to use for verifying webhook events.
      status: WebhookStatus
      url:
        type: string
        docs: The URL of the webhook endpoint.
    extends:
      - AtomBase
  WebhookEventRequest:
    properties:
      account_created: optional<EventAccountCreated>
      account_deleted: optional<EventAccountDeleted>
      account_updated: optional<EventAccountUpdated>
      conversation_created: optional<EventConversationCreated>
      conversation_deleted: optional<EventConversationDeleted>
      conversation_updated: optional<EventConversationUpdated>
      dev_user_created: optional<EventDevUserCreated>
      dev_user_deleted: optional<EventDevUserDeleted>
      dev_user_updated: optional<EventDevUserUpdated>
      id:
        type: string
        docs: The event's ID.
      part_created: optional<EventPartCreated>
      part_deleted: optional<EventPartDeleted>
      part_updated: optional<EventPartUpdated>
      rev_org_created: optional<EventRevOrgCreated>
      rev_org_deleted: optional<EventRevOrgDeleted>
      rev_org_updated: optional<EventRevOrgUpdated>
      rev_user_created: optional<EventRevUserCreated>
      rev_user_deleted: optional<EventRevUserDeleted>
      rev_user_updated: optional<EventRevUserUpdated>
      sla_tracker_created: optional<EventSlaTrackerCreated>
      sla_tracker_deleted: optional<EventSlaTrackerDeleted>
      sla_tracker_updated: optional<EventSlaTrackerUpdated>
      tag_created: optional<EventTagCreated>
      tag_deleted: optional<EventTagDeleted>
      tag_updated: optional<EventTagUpdated>
      timeline_entry_created: optional<EventTimelineEntryCreated>
      timeline_entry_deleted: optional<EventTimelineEntryDeleted>
      timeline_entry_updated: optional<EventTimelineEntryUpdated>
      timestamp:
        docs: |
          Timestamp of the webhook's invocation for the event. Note this
          should be used to protect against replay attacks, where the event
          should only be processed if the timestamp isn't stale by several
          seconds.
        type: optional<datetime>
      type: optional<WebhookEventType>
      verify: optional<WebhookEventVerify>
      webhook_created: optional<EventWebhookCreated>
      webhook_deleted: optional<EventWebhookDeleted>
      webhook_id:
        type: string
        docs: ID of the webhook for the event.
      webhook_updated: optional<EventWebhookUpdated>
      work_created: optional<EventWorkCreated>
      work_deleted: optional<EventWorkDeleted>
      work_updated: optional<EventWorkUpdated>
  WebhookEventResponse:
    properties:
      challenge:
        docs: |
          The challenge from the "verify" request, otherwise this should not
          be set for other request types.
        type: optional<string>
  WebhookEventType:
    enum:
      - account_created
      - account_deleted
      - account_updated
      - conversation_created
      - conversation_deleted
      - conversation_updated
      - dev_user_created
      - dev_user_deleted
      - dev_user_updated
      - part_created
      - part_deleted
      - part_updated
      - rev_org_created
      - rev_org_deleted
      - rev_org_updated
      - rev_user_created
      - rev_user_deleted
      - rev_user_updated
      - tag_created
      - tag_deleted
      - tag_updated
      - timeline_entry_created
      - timeline_entry_deleted
      - timeline_entry_updated
      - verify
      - webhook_created
      - webhook_deleted
      - webhook_updated
      - work_created
      - work_deleted
      - work_updated
    docs: The event types that the webhook will receive.
  WebhookEventVerify:
    properties:
      challenge:
        type: string
        docs: The challenge that must be echoed in the response.
  WebhookStatus:
    enum:
      - active
      - inactive
      - unverified
    docs: The status of the webhook.
  WebhookSummary: AtomBaseSummary
  WebhooksCreateResponse:
    docs: The response to creating a new webhook.
    properties:
      webhook: webhook
  WebhooksDeleteResponse:
    docs: The response to deleting the webhook.
    type: map<string, unknown>
  WebhooksGetResponse:
    docs: The response to getting the information for the webhook.
    properties:
      webhook: webhook
  WebhooksListRequest:
    docs: The request to list the webhooks.
    type: map<string, unknown>
  WebhooksListResponse:
    docs: The response to listing the webhooks.
    properties:
      webhooks:
        docs: The list of webhooks.
        type: list<webhook>
  WebhooksUpdateAction:
    enum:
      - activate
      - deactivate
    docs: The action to update the webhook's status.
  WebhooksUpdateRequestEventTypes:
    properties:
      add:
        docs: |
          The event types to add. If a provided event type is already set for
          the webhook, then nothing is done. Note this is mutually exclusive
          with 'set'.
        type: optional<list<WebhookEventType>>
      remove:
        docs: |
          The event types to remove. If a provided event type isn't set for
          the webhook, then nothing is done. Note this is mutually exclusive
          with 'set'.
        type: optional<list<WebhookEventType>>
      set:
        docs: |
          The updated event types, which will replace the webhook's current
          event types. Note this is mutually exclusive with 'add' and
          'remove'.
        type: optional<list<WebhookEventType>>
  WebhooksUpdateResponse:
    docs: The response to updating the webhook.
    properties:
      webhook: webhook
  WeeklyOrgSchedule:
    docs: The schedule for each week.
    type: map<string, unknown>
  work:
    discriminant: type
    base-properties: {}
    union:
      issue: issue
      opportunity: Opportunity
      task: Task
      ticket: ticket
  WorkSearchSummary:
    properties:
      work: WorkSummary
    extends:
      - SearchSummaryBase
  WorkSummary:
    discriminant: type
    base-properties: {}
    union:
      issue: IssueSummary
      opportunity: OpportunitySummary
      task: TaskSummary
      ticket: TicketSummary
  WorkType:
    enum:
      - issue
      - opportunity
      - task
      - ticket
  WorksCreateRequest:
    discriminant: type
    base-properties:
      applies_to_part:
        type: string
        docs: |
          The [part](https://devrev.ai/docs/product/parts) that the work
          applies to. Specifying a part is required when creating tickets and
          issues.
      artifacts:
        docs: |
          The IDs of the artifacts to associate with the work item.
        type: optional<list<string>>
      body:
        docs: Body of the work object.
        type: optional<string>
      custom_fields:
        docs: Custom fields.
        type: optional<map<string, unknown>>
      custom_schema_fragments:
        docs: The custom schema fragments to use.
        type: optional<list<string>>
      custom_schema_spec: optional<CustomSchemaSpec>
      owned_by:
        docs: The users that own the work.
        type: list<string>
      reported_by:
        docs: The users that reported the work.
        type: optional<list<string>>
      stage: optional<StageInit>
      tags:
        docs: Tags associated with the work item.
        type: optional<list<SetTagWithValue>>
      target_close_date:
        docs: Timestamp for when the work is expected to be complete.
        type: optional<datetime>
      title:
        type: string
        docs: Title of the work object.
    union:
      issue: WorksCreateRequestIssue
      opportunity: WorksCreateRequestOpportunity
      task: WorksCreateRequestTask
      ticket: WorksCreateRequestTicket
  WorksCreateRequestIssue:
    properties:
      developed_with:
        docs: The IDs of the parts associated with issue.
        type: optional<list<string>>
      priority: optional<IssuePriority>
      priority_v2:
        docs: |
          Priority enum id of the work based upon impact and criticality.
        type: optional<integer>
      sprint:
        docs: The sprint that the issue belongs to.
        type: optional<string>
  WorksCreateRequestOpportunity:
    properties:
      account:
        type: string
        docs: |
          The ID of the account that the opportunity is associated with.
      amount:
        docs: Total opportunity amount.
        type: optional<double>
      contacts:
        docs: Contacts involved in the opportunity.
        type: optional<list<string>>
      customer_budget:
        docs: Budget of the customer.
        type: optional<double>
      forecast_category: optional<OpportunityForecastCategory>
      priority: optional<OpportunityPriority>
      probability:
        docs: |
          The probability of winning the deal, lies between 0.0 and 1.0.
        type: optional<double>
  WorksCreateRequestTask:
    properties:
      embedded:
        docs: Whether the task is embedded in the work.
        type: optional<boolean>
      priority: optional<TaskPriority>
      start_date:
        docs: Timestamp when the task was started.
        type: optional<datetime>
  WorksCreateRequestTicket:
    properties:
      channels:
        docs: Channels of the ticket.
        type: optional<list<TicketChannels>>
      group:
        docs: The group that the ticket is associated with.
        type: optional<string>
      is_spam:
        docs: Whether the ticket is spam.
        type: optional<boolean>
      rev_org:
        docs: The Rev organization that the ticket is associated with.
        type: optional<string>
      severity: optional<TicketSeverity>
      source_channel:
        docs: The source channel of the ticket.
        type: optional<string>
  WorksCreateResponse:
    properties:
      work: work
  WorksDeleteResponse: map<string, unknown>
  WorksExportResponse:
    properties:
      works:
        docs: The resulting collection of work items.
        type: list<work>
  WorksFilterIssue:
    properties:
      accounts:
        docs: Filters for issues with any of the provided Accounts.
        type: optional<list<string>>
      priority:
        docs: Filters for issues with any of the provided priorities.
        type: optional<list<IssuePriority>>
      priority_v2:
        docs: |
          Filters for issues with any of the provided priority enum ids.
        type: optional<list<integer>>
      rev_orgs:
        docs: |
          Filters for issues with any of the provided Rev organizations.
        type: optional<list<string>>
      subtype:
        docs: Filters for issues with any of the provided subtypes.
        type: optional<list<string>>
  WorksFilterOpportunity:
    properties:
      account:
        docs: |
          Filters for opportunities belonging to any of the provided
          accounts.
        type: optional<list<string>>
      contacts:
        docs: |
          Filters for opportunities with any of the provided contacts.
        type: optional<list<string>>
      subtype:
        docs: |
          Filters for opportunity with any of the provided subtypes.
        type: optional<list<string>>
  WorksFilterTicket:
    properties:
      channels:
        docs: Filters for tickets with any of the provided channels.
        type: optional<list<TicketChannels>>
      group:
        docs: Filters for tickets belonging to specific groups.
        type: optional<list<string>>
      is_spam:
        docs: Filters for tickets that are spam.
        type: optional<boolean>
      needs_response:
        docs: Filters for tickets that need response.
        type: optional<boolean>
      rev_org:
        docs: |
          Filters for tickets that are associated with any of the provided
          Rev organizations.
        type: optional<list<string>>
      severity:
        docs: Filters for tickets with any of the provided severities.
        type: optional<list<TicketSeverity>>
      sla_summary: optional<SlaSummaryFilter>
      source_channel:
        docs: |
          Filters for tickets with any of the provided source channels.
        type: optional<list<string>>
      subtype:
        docs: Filters for tickets with any of the provided subtypes.
        type: optional<list<string>>
      surveys: optional<SurveyAggregationFilter>
  WorksGetResponse:
    properties:
      work: work
  WorksListResponse:
    properties:
      next_cursor:
        docs: |
          The cursor used to iterate subsequent results in accordance to the
          sort order. If not set, then no later elements exist.
        type: optional<string>
      prev_cursor:
        docs: |
          The cursor used to iterate preceding results in accordance to the
          sort order. If not set, then no prior elements exist.
        type: optional<string>
      works:
        docs: The list of works.
        type: list<work>
  WorksUpdateRequest:
    discriminant: type
    base-properties:
      applies_to_part:
        docs: Updates the part that the work item applies to.
        type: optional<string>
      artifacts: optional<WorksUpdateRequestArtifactIds>
      body:
        docs: |
          Updated body of the work object, or unchanged if not provided.
        type: optional<string>
      custom_fields:
        docs: Custom fields.
        type: optional<map<string, unknown>>
      custom_schema_fragments:
        docs: The custom schema fragments to use.
        type: optional<list<string>>
      custom_schema_spec: optional<CustomSchemaSpec>
      id:
        type: string
        docs: The work's ID.
      owned_by: optional<WorksUpdateRequestOwnedBy>
      reported_by: optional<WorksUpdateRequestReportedBy>
      stage: optional<StageUpdate>
      staged_info: optional<WorksUpdateRequestStagedInfoStagedInfoUpdate>
      tags: optional<WorksUpdateRequestTags>
      target_close_date:
        docs: |
          Updates the timestamp for when the work is expected to be complete.
        type: optional<datetime>
      title:
        docs: |
          Updated title of the work object, or unchanged if not provided.
        type: optional<string>
    union:
      issue: WorksUpdateRequestIssue
      none: empty
      opportunity: WorksUpdateRequestOpportunity
      task: WorksUpdateRequestTask
      ticket: WorksUpdateRequestTicket
  WorksUpdateRequestArtifactIds:
    properties:
      set:
        docs: Sets the IDs to the provided artifact IDs.
        type: optional<list<string>>
  WorksUpdateRequestIssue:
    properties:
      developed_with: optional<WorksUpdateRequestIssueDevelopedWith>
      priority: optional<IssuePriority>
      priority_v2:
        docs: |
          Priority enum id of the work based upon impact and criticality.
        type: optional<integer>
      sprint:
        docs: Updates the sprint that the issue belongs to.
        type: optional<string>
  WorksUpdateRequestIssueDevelopedWith:
    properties:
      set:
        docs: Sets the IDs of the parts associated with issue.
        type: optional<list<string>>
  WorksUpdateRequestOpportunity:
    properties:
      account:
        docs: |
          Updates the account that the opportunity is associated with.
        type: optional<string>
      amount:
        docs: Updates the total opportunity amount.
        type: optional<double>
      contacts: optional<WorksUpdateRequestOpportunityContacts>
      customer_budget:
        docs: Updates the customer budget.
        type: optional<double>
      probability:
        docs: |
          Updates the probability of winning the deal, lies between 0.0 and
          1.0.
        type: optional<double>
  WorksUpdateRequestOpportunityContacts:
    properties:
      set:
        docs: Sets the contact IDs to the provided contact IDs.
        type: list<string>
  WorksUpdateRequestOwnedBy:
    properties:
      set:
        docs: |
          Sets the owner IDs to the provided user IDs. This must not be
          empty.
        type: optional<list<string>>
  WorksUpdateRequestReportedBy:
    properties:
      set:
        docs: |
          Sets the users that reported the work to the provided user IDs.
        type: optional<list<string>>
  WorksUpdateRequestStagedInfoStagedInfoUpdate:
    properties:
      unresolved_fields:
        docs: Updates the unresolved fields of the staged work.
        type: list<string>
  WorksUpdateRequestTags:
    properties:
      set:
        docs: Sets the provided tags on the work item.
        type: optional<list<SetTagWithValue>>
  WorksUpdateRequestTask:
    properties:
      embedded:
        docs: Whether the task is embedded in the work.
        type: optional<boolean>
      priority: optional<TaskPriority>
      start_date:
        docs: Timestamp when the task was started.
        type: optional<datetime>
  WorksUpdateRequestTicket:
    properties:
      channels: optional<WorksUpdateRequestTicketChannels>
      group:
        docs: Updates the group that the ticket is associated with.
        type: optional<string>
      is_spam:
        docs: Updates whether the ticket is spam.
        type: optional<boolean>
      rev_org:
        docs: |
          Updates the Rev organization that the ticket is associated with.
        type: optional<string>
      severity: optional<TicketSeverity>
  WorksUpdateRequestTicketChannels:
    properties:
      set:
        docs: Sets the channels to the provided channels.
        type: optional<list<TicketChannels>>
  WorksUpdateResponse:
    properties:
      work: work
errors:
  BadRequestError:
    status-code: 400
    type: ErrorBadRequest
  UnauthorizedError:
    status-code: 401
    type: ErrorUnauthorized
  ForbiddenError:
    status-code: 403
    type: ErrorForbidden
  NotFoundError:
    status-code: 404
    type: ErrorNotFound
  ConflictError:
    status-code: 409
    type: ErrorConflict
  TooManyRequestsError:
    status-code: 429
    type: ErrorTooManyRequests
  InternalServerError:
    status-code: 500
    type: ErrorInternalServerError
  ServiceUnavailableError:
    status-code: 503
    type: ErrorServiceUnavailable
