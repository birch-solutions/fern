imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    aggregated-schema-get:
      path: /schemas.aggregated.get
      method: GET
      auth: true
      docs: Gets the aggregated schema.
      request:
        name: AggregatedSchemaGetQuery
        query-parameters:
          custom_schema_fragment_ids:
            type: optional<string>
            allow-multiple: true
            docs: >
              The list of custom schema fragment DONs which are to be
              aggregated.
          stock_schema_fragment_id:
            type: optional<string>
            docs: The stock schema fragment which is to be aggregated.
      response:
        docs: Success.
        type: root.AggregatedSchemaGetResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
    aggregated-schema-get-post:
      path: /schemas.aggregated.get
      method: POST
      auth: true
      docs: Gets the aggregated schema.
      request:
        name: AggregatedSchemaGetRequest
        body:
          properties:
            custom_schema_fragment_ids:
              docs: >
                The list of custom schema fragment DONs which are to be
                aggregated.
              type: list<string>
            per_object_schema:
              docs: Per object schema, if associated with the leaf type.
              type: optional<list<root.FieldDescriptor>>
            stock_schema_fragment_id:
              docs: The stock schema fragment which is to be aggregated.
              type: optional<string>
      response:
        docs: Success.
        type: root.AggregatedSchemaGetResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request:
            custom_schema_fragment_ids:
              - custom_schema_fragment_ids
          response:
            body:
              schema:
                schema:
                  key: value
    custom-schema-fragments-get:
      path: /schemas.custom.get
      method: GET
      auth: true
      docs: Gets a custom schema fragment.
      request:
        name: CustomSchemaFragmentsGetQuery
        query-parameters:
          id:
            type: string
            docs: The ID of the custom schema fragment.
      response:
        docs: Success.
        type: root.CustomSchemaFragmentsGetResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
    custom-schema-fragments-get-post:
      path: /schemas.custom.get
      method: POST
      auth: true
      docs: Gets a custom schema fragment.
      request:
        name: CustomSchemaFragmentsGetRequest
        body:
          properties:
            id:
              type: string
              docs: The ID of the custom schema fragment.
      response:
        docs: Success.
        type: root.CustomSchemaFragmentsGetResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
    custom-schema-fragments-list:
      path: /schemas.custom.list
      method: GET
      auth: true
      docs: Lists custom schema fragments.
      request:
        name: CustomSchemaFragmentsListQuery
        query-parameters:
          app:
            type: optional<string>
            allow-multiple: true
            docs: The list of app names.
          cursor:
            type: optional<string>
            docs: >
              The cursor to resume iteration from, otherwise if not provided,
              then

              iteration starts from the beginning.
          deprecated:
            type: optional<boolean>
            docs: Whether only deprecated fragments should be filtered.
          leaf_type:
            type: optional<string>
            allow-multiple: true
            docs: The list of leaf types.
          limit:
            type: optional<integer>
            docs: The maximum number of items.
          prune:
            type: optional<root.CustomSchemaFragmentsListRequestPrune>
            allow-multiple: true
            docs: |
              List of fields which are not required in the payload and can be
              pruned away.
          sort_by:
            type: optional<string>
            allow-multiple: true
            docs: |
              The list of fields to sort the items by and how to sort them.
          subtype:
            type: optional<string>
            allow-multiple: true
            docs: The list of subtypes.
          types:
            type: optional<root.CustomSchemaFragmentType>
            allow-multiple: true
            docs: Filters for custom schema fragment of the provided types.
      response:
        docs: Success.
        type: root.CustomSchemaFragmentsListResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - response:
            body:
              cursor: cursor
              result: []
    custom-schema-fragments-list-post:
      path: /schemas.custom.list
      method: POST
      auth: true
      docs: Lists custom schema fragments.
      request:
        name: CustomSchemaFragmentsListRequest
        body:
          properties:
            app:
              docs: The list of app names.
              type: optional<list<string>>
            cursor:
              docs: |
                The cursor to resume iteration from, otherwise if not provided,
                then iteration starts from the beginning.
              type: optional<string>
            deprecated:
              docs: Whether only deprecated fragments should be filtered.
              type: optional<boolean>
            leaf_type:
              docs: The list of leaf types.
              type: optional<list<string>>
            limit:
              docs: The maximum number of items.
              type: optional<integer>
            prune:
              docs: |
                List of fields which are not required in the payload and can be
                pruned away.
              type: optional<list<root.CustomSchemaFragmentsListRequestPrune>>
            sort_by:
              docs: |
                The list of fields to sort the items by and how to sort them.
              type: optional<list<string>>
            subtype:
              docs: The list of subtypes.
              type: optional<list<string>>
            types:
              docs: |
                Filters for custom schema fragment of the provided types.
              type: optional<list<root.CustomSchemaFragmentType>>
      response:
        docs: Success.
        type: root.CustomSchemaFragmentsListResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request: {}
          response:
            body:
              cursor: cursor
              result: []
    custom-schema-fragments-set:
      path: /schemas.custom.set
      method: POST
      auth: true
      docs: Creates or updates a custom schema fragment.
      request:
        body: root.CustomSchemaFragmentsSetRequest
      response:
        docs: Success.
        type: root.CustomSchemaFragmentsSetResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
    stock-schema-fragments-get:
      path: /schemas.stock.get
      method: GET
      auth: true
      docs: Gets a stock schema fragment.
      request:
        name: StockSchemaFragmentsGetQuery
        query-parameters:
          id:
            type: optional<string>
            docs: The ID of the stock schema fragment.
          leaf_type:
            type: optional<string>
            docs: The leaf type this fragment applies to.
      response:
        docs: Success.
        type: root.StockSchemaFragmentsGetResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - response:
            body:
              fragment:
                created_date: '2023-01-01T12:00:00Z'
                display_id: display_id
                id: id
                modified_date: '2023-01-01T12:00:00Z'
                description: description
                fields: []
                leaf_type: leaf_type
                title: title
    stock-schema-fragments-get-post:
      path: /schemas.stock.get
      method: POST
      auth: true
      docs: Gets a stock schema fragment.
      request:
        name: StockSchemaFragmentsGetRequest
        body:
          properties:
            id:
              docs: The ID of the stock schema fragment.
              type: optional<string>
            leaf_type:
              docs: The leaf type this fragment applies to.
              type: optional<string>
      response:
        docs: Success.
        type: root.StockSchemaFragmentsGetResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request: {}
          response:
            body:
              fragment:
                created_date: '2023-01-01T12:00:00Z'
                display_id: display_id
                id: id
                modified_date: '2023-01-01T12:00:00Z'
                description: description
                fields: []
                leaf_type: leaf_type
                title: title
    stock-schema-fragments-list:
      path: /schemas.stock.list
      method: GET
      auth: true
      docs: Lists stock schema fragments.
      request:
        name: StockSchemaFragmentsListQuery
        query-parameters:
          cursor:
            type: optional<string>
            docs: >
              The cursor to resume iteration from, otherwise if not provided,
              then

              iteration starts from the beginning.
          filter_preset:
            type: optional<root.StockSchemaFragmentsListRequestFilterPreset>
            docs: >
              Filter preset to specify whether to filter only customization
              enabled

              leaf types.
          leaf_type:
            type: optional<string>
            allow-multiple: true
            docs: The list of leaf types.
          limit:
            type: optional<integer>
            docs: The maximum number of items.
          prune:
            type: optional<root.StockSchemaFragmentsListRequestPrune>
            allow-multiple: true
            docs: |
              List of fields which are not required in the payload and can be
              pruned away.
          sort_by:
            type: optional<string>
            allow-multiple: true
            docs: |
              The list of fields to sort the items by and how to sort them.
      response:
        docs: Success.
        type: root.StockSchemaFragmentsListResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - response:
            body:
              cursor: cursor
              result:
                - created_date: '2023-01-01T12:00:00Z'
                  display_id: display_id
                  id: id
                  modified_date: '2023-01-01T12:00:00Z'
                  description: description
                  fields: []
                  leaf_type: leaf_type
                  title: title
    stock-schema-fragments-list-post:
      path: /schemas.stock.list
      method: POST
      auth: true
      docs: Lists stock schema fragments.
      request:
        name: StockSchemaFragmentsListRequest
        body:
          properties:
            cursor:
              docs: |
                The cursor to resume iteration from, otherwise if not provided,
                then iteration starts from the beginning.
              type: optional<string>
            filter_preset: optional<root.StockSchemaFragmentsListRequestFilterPreset>
            leaf_type:
              docs: The list of leaf types.
              type: optional<list<string>>
            limit:
              docs: The maximum number of items.
              type: optional<integer>
            prune:
              docs: |
                List of fields which are not required in the payload and can be
                pruned away.
              type: optional<list<root.StockSchemaFragmentsListRequestPrune>>
            sort_by:
              docs: |
                The list of fields to sort the items by and how to sort them.
              type: optional<list<string>>
      response:
        docs: Success.
        type: root.StockSchemaFragmentsListResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request: {}
          response:
            body:
              cursor: cursor
              result:
                - created_date: '2023-01-01T12:00:00Z'
                  display_id: display_id
                  id: id
                  modified_date: '2023-01-01T12:00:00Z'
                  description: description
                  fields: []
                  leaf_type: leaf_type
                  title: title
    subtypes-list:
      path: /schemas.subtypes.list
      method: GET
      auth: true
      docs: Lists subtypes.
      request:
        name: SubtypesListQuery
        query-parameters:
          leaf_type:
            type: optional<string>
            docs: Leaf type for which subtypes are required.
          leaf_types:
            type: optional<string>
            allow-multiple: true
            docs: List of leaf types for which subtypes are required.
      response:
        docs: Success.
        type: root.SubtypesListResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - response:
            body:
              subtypes:
                - display_name: display_name
                  fragment_id: fragment_id
                  leaf_type: leaf_type
                  value: value
    subtypes-list-post:
      path: /schemas.subtypes.list
      method: POST
      auth: true
      docs: Lists subtypes.
      request:
        name: SubtypesListRequest
        body:
          properties:
            leaf_type:
              docs: Leaf type for which subtypes are required.
              type: optional<string>
            leaf_types:
              docs: List of leaf types for which subtypes are required.
              type: optional<list<string>>
      response:
        docs: Success.
        type: root.SubtypesListResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request: {}
          response:
            body:
              subtypes:
                - display_name: display_name
                  fragment_id: fragment_id
                  leaf_type: leaf_type
                  value: value
  display-name: customization
docs: DevRev customization.
