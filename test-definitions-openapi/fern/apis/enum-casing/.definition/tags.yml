imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    create:
      path: /tags.create
      method: POST
      auth: true
      docs: |
        Creates a new tag, which is used to create associations between objects
        and a logical concept denoted by the tag's name.
      request:
        name: TagsCreateRequest
        body:
          properties:
            allowed_values:
              docs: |
                The allowed values for the tag, or empty if no values are
                permitted.
              type: optional<list<string>>
            description:
              docs: The description for the tag.
              type: optional<string>
            name:
              type: string
              docs: |
                The name for the tag, which must be unique across all tags.
      response:
        docs: Success.
        type: root.TagsCreateResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request:
            name: name
          response:
            body:
              tag:
                created_date: '2023-01-01T12:00:00Z'
                display_id: display_id
                id: id
                modified_date: '2023-01-01T12:00:00Z'
                allowed_values:
                  - allowed_values
                description: description
                name: name
    delete:
      path: /tags.delete
      method: POST
      auth: true
      docs: Deletes a tag.
      request:
        name: TagsDeleteRequest
        body:
          properties:
            id:
              type: string
              docs: The ID of the tag to delete.
      response:
        docs: Success.
        type: root.TagsDeleteResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request:
            id: TAG-12345
          response:
            body:
              string:
                key: value
    get:
      path: /tags.get
      method: GET
      auth: true
      docs: Gets a tag's information.
      request:
        name: TagsGetQuery
        query-parameters:
          id:
            type: string
            docs: The requested tag's ID.
      response:
        docs: Success.
        type: root.TagsGetResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - query-parameters:
            id: TAG-12345
          response:
            body:
              tag:
                created_date: '2023-01-01T12:00:00Z'
                display_id: display_id
                id: id
                modified_date: '2023-01-01T12:00:00Z'
                allowed_values:
                  - allowed_values
                description: description
                name: name
    getPost:
      path: /tags.get
      method: POST
      auth: true
      docs: Gets a tag's information.
      request:
        name: TagsGetRequest
        body:
          properties:
            id:
              type: string
              docs: The requested tag's ID.
      response:
        docs: Success.
        type: root.TagsGetResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request:
            id: TAG-12345
          response:
            body:
              tag:
                created_date: '2023-01-01T12:00:00Z'
                display_id: display_id
                id: id
                modified_date: '2023-01-01T12:00:00Z'
                allowed_values:
                  - allowed_values
                description: description
                name: name
    list:
      path: /tags.list
      method: GET
      auth: true
      docs: Lists the available tags.
      request:
        name: TagsListQuery
        query-parameters:
          cursor:
            type: optional<string>
            docs: >
              The cursor to resume iteration from. If not provided, then
              iteration

              starts from the beginning.
          limit:
            type: optional<integer>
            docs: The maximum number of tags to return. The default is '50'.
          mode:
            type: optional<root.ListMode>
            docs: |
              The iteration mode to use, otherwise if not set, then "after" is
              used.
          name:
            type: optional<string>
            allow-multiple: true
            docs: Filters for tags with the provided names.
          sort_by:
            type: optional<string>
            allow-multiple: true
            docs: Fields to sort tags by and the direction to sort them.
      response:
        docs: Success.
        type: root.TagsListResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - response:
            body:
              next_cursor: next_cursor
              prev_cursor: prev_cursor
              tags:
                - created_date: '2023-01-01T12:00:00Z'
                  display_id: display_id
                  id: id
                  modified_date: '2023-01-01T12:00:00Z'
                  allowed_values:
                    - allowed_values
                  description: description
                  name: name
    listPost:
      path: /tags.list
      method: POST
      auth: true
      docs: Lists the available tags.
      request:
        name: TagsListRequest
        body:
          properties:
            cursor:
              docs: |
                The cursor to resume iteration from. If not provided, then
                iteration starts from the beginning.
              type: optional<string>
            limit:
              docs: |
                The maximum number of tags to return. The default is '50'.
              type: optional<integer>
            mode: optional<root.ListMode>
            name:
              docs: Filters for tags with the provided names.
              type: optional<list<string>>
            sort_by:
              docs: Fields to sort tags by and the direction to sort them.
              type: optional<list<string>>
      response:
        docs: Success.
        type: root.TagsListResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request: {}
          response:
            body:
              next_cursor: next_cursor
              prev_cursor: prev_cursor
              tags:
                - created_date: '2023-01-01T12:00:00Z'
                  display_id: display_id
                  id: id
                  modified_date: '2023-01-01T12:00:00Z'
                  allowed_values:
                    - allowed_values
                  description: description
                  name: name
    update:
      path: /tags.update
      method: POST
      auth: true
      docs: Updates a tag's information.
      request:
        name: TagsUpdateRequest
        body:
          properties:
            allowed_values: optional<root.TagsUpdateAllowedValues>
            description:
              docs: The updated description of the tag.
              type: optional<string>
            id:
              type: string
              docs: The ID of the tag to update.
            name:
              docs: |
                The updated name of the tag. The name must be unique across all
                tags.
              type: optional<string>
      response:
        docs: Success.
        type: root.TagsUpdateResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request:
            id: TAG-12345
          response:
            body:
              tag:
                created_date: '2023-01-01T12:00:00Z'
                display_id: display_id
                id: id
                modified_date: '2023-01-01T12:00:00Z'
                allowed_values:
                  - allowed_values
                description: description
                name: name
  display-name: tags
docs: DevRev tag interactions.
