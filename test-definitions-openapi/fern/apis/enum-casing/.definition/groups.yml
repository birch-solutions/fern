imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    create:
      path: /groups.create
      method: POST
      auth: true
      docs: Creates a new group. A group is a collection of users.
      request:
        name: GroupsCreateRequest
        body:
          properties:
            description:
              type: string
              docs: Description of the group.
            dynamic_group_info: optional<root.DynamicGroupInfo>
            member_type: optional<root.GroupMemberType>
            name:
              type: string
              docs: Unique name of the group.
            owner:
              docs: Owner of the group.
              type: optional<string>
            type: optional<root.GroupType>
      response:
        docs: Success.
        type: root.GroupsCreateResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request:
            description: description
            name: name
          response:
            body:
              group:
                created_date: '2023-01-01T12:00:00Z'
                display_id: display_id
                id: id
                modified_date: '2023-01-01T12:00:00Z'
                description: description
                is_default: true
                member_type: dev_user
                name: name
    get:
      path: /groups.get
      method: GET
      auth: true
      docs: Gets the requested group.
      request:
        name: GroupsGetQuery
        query-parameters:
          id:
            type: string
            docs: The ID of the group to get.
      response:
        docs: Success.
        type: root.GroupsGetResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - query-parameters:
            id: id
          response:
            body:
              group:
                created_date: '2023-01-01T12:00:00Z'
                display_id: display_id
                id: id
                modified_date: '2023-01-01T12:00:00Z'
                description: description
                is_default: true
                member_type: dev_user
                name: name
    getPost:
      path: /groups.get
      method: POST
      auth: true
      docs: Gets the requested group.
      request:
        name: GroupsGetRequest
        body:
          properties:
            id:
              type: string
              docs: The ID of the group to get.
      response:
        docs: Success.
        type: root.GroupsGetResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request:
            id: id
          response:
            body:
              group:
                created_date: '2023-01-01T12:00:00Z'
                display_id: display_id
                id: id
                modified_date: '2023-01-01T12:00:00Z'
                description: description
                is_default: true
                member_type: dev_user
                name: name
    list:
      path: /groups.list
      method: GET
      auth: true
      docs: Lists the available groups.
      request:
        name: GroupsListQuery
        query-parameters:
          cursor:
            type: optional<string>
            docs: >
              The cursor to resume iteration from. If not provided, then
              iteration

              starts from the beginning.
          group_type:
            type: optional<root.GroupType>
            allow-multiple: true
            docs: Filters the groups based on the group type.
          limit:
            type: optional<integer>
            docs: |
              The maximum number of groups to return. The default is '50'.
          member_type:
            type: optional<root.GroupMemberType>
            allow-multiple: true
            docs: Filters the groups on basis of member type.
          mode:
            type: optional<root.ListMode>
            docs: |
              The iteration mode to use, otherwise if not set, then "after" is
              used.
          sort_by:
            type: optional<string>
            allow-multiple: true
            docs: Comma-separated fields to sort the groups by.
      response:
        docs: Success.
        type: root.GroupsListResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - response:
            body:
              groups:
                - created_date: '2023-01-01T12:00:00Z'
                  display_id: display_id
                  id: id
                  modified_date: '2023-01-01T12:00:00Z'
                  description: description
                  is_default: true
                  member_type: dev_user
                  name: name
              next_cursor: next_cursor
              prev_cursor: prev_cursor
    listPost:
      path: /groups.list
      method: POST
      auth: true
      docs: Lists the available groups.
      request:
        name: GroupsListRequest
        body:
          properties:
            cursor:
              docs: |
                The cursor to resume iteration from. If not provided, then
                iteration starts from the beginning.
              type: optional<string>
            group_type:
              docs: Filters the groups based on the group type.
              type: optional<list<root.GroupType>>
            limit:
              docs: |
                The maximum number of groups to return. The default is '50'.
              type: optional<integer>
            member_type:
              docs: Filters the groups on basis of member type.
              type: optional<list<root.GroupMemberType>>
            mode: optional<root.ListMode>
            sort_by:
              docs: Comma-separated fields to sort the groups by.
              type: optional<list<string>>
      response:
        docs: Success.
        type: root.GroupsListResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request: {}
          response:
            body:
              groups:
                - created_date: '2023-01-01T12:00:00Z'
                  display_id: display_id
                  id: id
                  modified_date: '2023-01-01T12:00:00Z'
                  description: description
                  is_default: true
                  member_type: dev_user
                  name: name
              next_cursor: next_cursor
              prev_cursor: prev_cursor
    group-members-add:
      path: /groups.members.add
      method: POST
      auth: true
      docs: Adds a member to a group.
      request:
        name: GroupMembersAddRequest
        body:
          properties:
            group:
              type: string
              docs: ID of the group where the member is being added.
            member:
              type: string
              docs: ID of the member to be added.
      response:
        docs: Success.
        type: root.GroupMembersAddResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request:
            group: group
            member: DEVU-12345
          response:
            body:
              string:
                key: value
    group-members-list:
      path: /groups.members.list
      method: GET
      auth: true
      docs: Lists the members in a group.
      request:
        name: GroupMembersListQuery
        query-parameters:
          group:
            type: string
            docs: ID of the group for which to list members.
          cursor:
            type: optional<string>
            docs: >
              The cursor to resume iteration from. If not provided, then
              iteration

              starts from the beginning.
          limit:
            type: optional<integer>
            docs: >
              The maximum number of members to return. If not set, then the
              default

              is '50'.
          mode:
            type: optional<root.ListMode>
            docs: |
              The iteration mode to use, otherwise if not set, then "after" is
              used.
      response:
        docs: Success.
        type: root.GroupMembersListResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - query-parameters:
            group: group
          response:
            body:
              members: []
              next_cursor: next_cursor
              prev_cursor: prev_cursor
    group-members-list-post:
      path: /groups.members.list
      method: POST
      auth: true
      docs: Lists the members in a group.
      request:
        name: GroupMembersListRequest
        body:
          properties:
            cursor:
              docs: |
                The cursor to resume iteration from. If not provided, then
                iteration starts from the beginning.
              type: optional<string>
            group:
              type: string
              docs: ID of the group for which to list members.
            limit:
              docs: |
                The maximum number of members to return. If not set, then the
                default is '50'.
              type: optional<integer>
            mode: optional<root.ListMode>
      response:
        docs: Success.
        type: root.GroupMembersListResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request:
            group: group
          response:
            body:
              members: []
              next_cursor: next_cursor
              prev_cursor: prev_cursor
    group-members-remove:
      path: /groups.members.remove
      method: POST
      auth: true
      docs: Removes a member from a group.
      request:
        name: GroupMembersRemoveRequest
        body:
          properties:
            group:
              type: string
              docs: ID of the group where the member is being removed.
            member:
              type: string
              docs: ID of the member to be removed.
      response:
        docs: Success.
        type: root.GroupMembersRemoveResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request:
            group: group
            member: DEVU-12345
          response:
            body:
              string:
                key: value
    update:
      path: /groups.update
      method: POST
      auth: true
      docs: Updates the requested group.
      request:
        name: GroupsUpdateRequest
        body:
          properties:
            description:
              docs: The updated group's description.
              type: optional<string>
            id:
              type: string
              docs: The ID of the group to update.
            name:
              docs: The updated group's name.
              type: optional<string>
            owner:
              docs: The updated group's owner.
              type: optional<string>
      response:
        docs: Success.
        type: root.GroupsUpdateResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request:
            id: id
          response:
            body:
              group:
                created_date: '2023-01-01T12:00:00Z'
                display_id: display_id
                id: id
                modified_date: '2023-01-01T12:00:00Z'
                description: description
                is_default: true
                member_type: dev_user
                name: name
  display-name: groups
docs: Manages groups in a Dev organization.
