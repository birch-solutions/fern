imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    create:
      path: /accounts.create
      method: POST
      auth: true
      docs: |
        Creates an account, which is a record representing a customer or an
        organization.
      request:
        name: AccountsCreateRequest
        body:
          properties:
            artifacts:
              docs: The IDs of the artifacts to associate with the account.
              type: optional<list<string>>
            custom_fields:
              docs: Application-defined custom fields.
              type: optional<map<string, unknown>>
            description:
              docs: Description of the account.
              type: optional<string>
            display_name:
              type: string
              docs: Name of the account.
            domains:
              docs: List of company's domain names. Example - ['devrev.ai'].
              type: optional<list<string>>
            external_refs:
              docs: >
                External refs are unique identifiers from your customer system
                of

                records, stored as a list. Currently the length of this field is

                limited to 1.
              type: optional<list<string>>
            owned_by:
              docs: List of Dev users owning this account.
              type: optional<list<string>>
            schema_fragment_ids:
              docs: Schema fragment IDs associated with this account SOR.
              type: optional<list<string>>
            tags:
              docs: Tags associated with the account.
              type: optional<list<root.SetTagWithValue>>
            tier:
              docs: The tier of the account.
              type: optional<string>
            websites:
              docs: |
                List of company websites. Example - ['www.devrev.ai',
                'www.marketplace.devrev.ai'].
              type: optional<list<string>>
      response:
        docs: Success.
        type: root.AccountsCreateResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.ConflictError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request:
            display_name: display_name
            tags:
              - id: TAG-12345
          response:
            body:
              account:
                created_date: '2023-01-01T12:00:00Z'
                display_id: display_id
                id: id
                modified_date: '2023-01-01T12:00:00Z'
                display_name: display_name
                artifacts:
                  - id: id
                custom_fields:
                  custom_fields:
                    key: value
                custom_schema_fragments:
                  - custom_schema_fragments
                description: description
                domains:
                  - domains
                external_refs:
                  - external_refs
                owned_by: []
                stock_schema_fragment: >-
                  don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>
                subtype: subtype
                tags:
                  - tag:
                      id: id
                      name: name
                tier: tier
              default_rev_org:
                created_date: '2023-01-01T12:00:00Z'
                display_id: display_id
                id: id
                modified_date: '2023-01-01T12:00:00Z'
                display_name: display_name
                account:
                  display_id: display_id
                  id: id
                  display_name: display_name
                artifacts:
                  - id: id
                custom_fields:
                  custom_fields:
                    key: value
                custom_schema_fragments:
                  - custom_schema_fragments
                description: description
                domain: domain
                external_ref: external_ref
                stock_schema_fragment: >-
                  don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>
                subtype: subtype
                tags:
                  - tag:
                      id: id
                      name: name
    delete:
      path: /accounts.delete
      method: POST
      auth: true
      docs: Deletes an account.
      request:
        name: AccountsDeleteRequest
        body:
          properties:
            id:
              type: string
              docs: The ID of account to delete.
      response:
        docs: Success.
        type: root.AccountsDeleteResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request:
            id: ACC-12345
          response:
            body:
              string:
                key: value
    export:
      path: /accounts.export
      method: GET
      auth: true
      docs: Exports a collection of accounts.
      request:
        name: AccountsExportQuery
        query-parameters:
          created_by:
            type: optional<string>
            allow-multiple: true
            docs: Filters for accounts created by the specified user(s).
          created_date.after:
            type: optional<datetime>
            docs: >
              Filters for objects created after the provided timestamp
              (inclusive).
          created_date.before:
            type: optional<datetime>
            docs: |
              Filters for objects created before the provided timestamp
              (inclusive).
          custom_fields:
            type: optional<map<string, unknown>>
            docs: Filters for custom fields.
          display_name:
            type: optional<string>
            allow-multiple: true
            docs: Array of display names of accounts to be filtered.
          domains:
            type: optional<string>
            allow-multiple: true
            docs: Domains for accounts to be filtered.
          external_refs:
            type: optional<string>
            allow-multiple: true
            docs: Array of references of accounts to be filtered.
          first:
            type: optional<integer>
            docs: The number of accounts to return. The default is '50'.
          modified_date.after:
            type: optional<datetime>
            docs: >
              Filters for objects created after the provided timestamp
              (inclusive).
          modified_date.before:
            type: optional<datetime>
            docs: |
              Filters for objects created before the provided timestamp
              (inclusive).
          owned_by:
            type: optional<string>
            allow-multiple: true
            docs: Filters for accounts owned by the specified user(s).
          sort_by:
            type: optional<string>
            allow-multiple: true
            docs: |
              Fields to sort the accounts by and the direction to sort them in.
          stage:
            type: optional<string>
            allow-multiple: true
            docs: Filters for accounts on specified stages.
          tags:
            type: optional<string>
            allow-multiple: true
            docs: List of tags to be filtered.
      response:
        docs: Success.
        type: root.AccountsExportResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - query-parameters:
            created_date.after: '2023-01-01T12:00:00Z'
            created_date.before: '2023-01-01T12:00:00Z'
            modified_date.after: '2023-01-01T12:00:00Z'
            modified_date.before: '2023-01-01T12:00:00Z'
          response:
            body:
              accounts:
                - created_date: '2023-01-01T12:00:00Z'
                  display_id: display_id
                  id: id
                  modified_date: '2023-01-01T12:00:00Z'
                  display_name: display_name
                  artifacts:
                    - id: id
                  custom_schema_fragments:
                    - custom_schema_fragments
                  description: description
                  domains:
                    - domains
                  external_refs:
                    - external_refs
                  owned_by: []
                  stock_schema_fragment: >-
                    don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>
                  subtype: subtype
                  tags:
                    - tag:
                        id: id
                        name: name
                  tier: tier
    exportPost:
      path: /accounts.export
      method: POST
      auth: true
      docs: Exports a collection of accounts.
      request:
        name: AccountsExportRequest
        body:
          properties:
            created_by:
              docs: Filters for accounts created by the specified user(s).
              type: optional<list<string>>
            created_date: optional<root.DateTimeFilter>
            custom_fields:
              docs: Filters for custom fields.
              type: optional<map<string, unknown>>
            display_name:
              docs: Array of display names of accounts to be filtered.
              type: optional<list<string>>
            domains:
              docs: Domains for accounts to be filtered.
              type: optional<list<string>>
            external_refs:
              docs: Array of references of accounts to be filtered.
              type: optional<list<string>>
            first:
              docs: The number of accounts to return. The default is '50'.
              type: optional<integer>
            modified_date: optional<root.DateTimeFilter>
            owned_by:
              docs: Filters for accounts owned by the specified user(s).
              type: optional<list<string>>
            sort_by:
              docs: >
                Fields to sort the accounts by and the direction to sort them
                in.
              type: optional<list<string>>
            stage:
              docs: Filters for accounts on specified stages.
              type: optional<list<string>>
            tags:
              docs: List of tags to be filtered.
              type: optional<list<string>>
      response:
        docs: Success.
        type: root.AccountsExportResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request: {}
          response:
            body:
              accounts:
                - created_date: '2023-01-01T12:00:00Z'
                  display_id: display_id
                  id: id
                  modified_date: '2023-01-01T12:00:00Z'
                  display_name: display_name
                  artifacts:
                    - id: id
                  custom_schema_fragments:
                    - custom_schema_fragments
                  description: description
                  domains:
                    - domains
                  external_refs:
                    - external_refs
                  owned_by: []
                  stock_schema_fragment: >-
                    don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>
                  subtype: subtype
                  tags:
                    - tag:
                        id: id
                        name: name
                  tier: tier
    get:
      path: /accounts.get
      method: GET
      auth: true
      docs: Retrieves an account's information.
      request:
        name: AccountsGetQuery
        query-parameters:
          id:
            type: string
            docs: The ID of the account to be retrieved.
      response:
        docs: Success.
        type: root.AccountsGetResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - query-parameters:
            id: ACC-12345
          response:
            body:
              account:
                created_date: '2023-01-01T12:00:00Z'
                display_id: display_id
                id: id
                modified_date: '2023-01-01T12:00:00Z'
                display_name: display_name
                artifacts:
                  - id: id
                custom_fields:
                  custom_fields:
                    key: value
                custom_schema_fragments:
                  - custom_schema_fragments
                description: description
                domains:
                  - domains
                external_refs:
                  - external_refs
                owned_by: []
                stock_schema_fragment: >-
                  don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>
                subtype: subtype
                tags:
                  - tag:
                      id: id
                      name: name
                tier: tier
    getPost:
      path: /accounts.get
      method: POST
      auth: true
      docs: Retrieves an account's information.
      request:
        name: AccountsGetRequest
        body:
          properties:
            id:
              type: string
              docs: The ID of the account to be retrieved.
      response:
        docs: Success.
        type: root.AccountsGetResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request:
            id: ACC-12345
          response:
            body:
              account:
                created_date: '2023-01-01T12:00:00Z'
                display_id: display_id
                id: id
                modified_date: '2023-01-01T12:00:00Z'
                display_name: display_name
                artifacts:
                  - id: id
                custom_fields:
                  custom_fields:
                    key: value
                custom_schema_fragments:
                  - custom_schema_fragments
                description: description
                domains:
                  - domains
                external_refs:
                  - external_refs
                owned_by: []
                stock_schema_fragment: >-
                  don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>
                subtype: subtype
                tags:
                  - tag:
                      id: id
                      name: name
                tier: tier
    list:
      path: /accounts.list
      method: GET
      auth: true
      docs: Gets a list of accounts.
      request:
        name: AccountsListQuery
        query-parameters:
          created_by:
            type: optional<string>
            allow-multiple: true
            docs: Filters for accounts created by the specified user(s).
          created_date.after:
            type: optional<datetime>
            docs: >
              Filters for objects created after the provided timestamp
              (inclusive).
          created_date.before:
            type: optional<datetime>
            docs: |
              Filters for objects created before the provided timestamp
              (inclusive).
          cursor:
            type: optional<string>
            docs: >
              The cursor to resume iteration from. If not provided, then
              iteration

              starts from the beginning.
          custom_fields:
            type: optional<map<string, unknown>>
            docs: Filters for custom fields.
          display_name:
            type: optional<string>
            allow-multiple: true
            docs: Array of display names of accounts to be filtered.
          domains:
            type: optional<string>
            allow-multiple: true
            docs: Domains for accounts to be filtered.
          external_refs:
            type: optional<string>
            allow-multiple: true
            docs: Array of references of accounts to be filtered.
          limit:
            type: optional<integer>
            docs: |
              The maximum number of accounts to return per page. The default is
              '50'.
          mode:
            type: optional<root.ListMode>
            docs: |
              The iteration mode to use, otherwise if not set, then "after" is
              used.
          modified_date.after:
            type: optional<datetime>
            docs: >
              Filters for objects created after the provided timestamp
              (inclusive).
          modified_date.before:
            type: optional<datetime>
            docs: |
              Filters for objects created before the provided timestamp
              (inclusive).
          owned_by:
            type: optional<string>
            allow-multiple: true
            docs: Filters for accounts owned by the specified user(s).
          sort_by:
            type: optional<string>
            allow-multiple: true
            docs: |
              Fields to sort the accounts by and the direction to sort them in.
          stage:
            type: optional<string>
            allow-multiple: true
            docs: Filters for accounts on specified stages.
          tags:
            type: optional<string>
            allow-multiple: true
            docs: List of tags to be filtered.
      response:
        docs: Success.
        type: root.AccountsListResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - query-parameters:
            created_date.after: '2023-01-01T12:00:00Z'
            created_date.before: '2023-01-01T12:00:00Z'
            modified_date.after: '2023-01-01T12:00:00Z'
            modified_date.before: '2023-01-01T12:00:00Z'
          response:
            body:
              accounts:
                - created_date: '2023-01-01T12:00:00Z'
                  display_id: display_id
                  id: id
                  modified_date: '2023-01-01T12:00:00Z'
                  display_name: display_name
                  artifacts:
                    - id: id
                  custom_schema_fragments:
                    - custom_schema_fragments
                  description: description
                  domains:
                    - domains
                  external_refs:
                    - external_refs
                  owned_by: []
                  stock_schema_fragment: >-
                    don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>
                  subtype: subtype
                  tags:
                    - tag:
                        id: id
                        name: name
                  tier: tier
              next_cursor: next_cursor
              prev_cursor: prev_cursor
    listPost:
      path: /accounts.list
      method: POST
      auth: true
      docs: Gets a list of accounts.
      request:
        name: AccountsListRequest
        body:
          properties:
            created_by:
              docs: Filters for accounts created by the specified user(s).
              type: optional<list<string>>
            created_date: optional<root.DateTimeFilter>
            cursor:
              docs: |
                The cursor to resume iteration from. If not provided, then
                iteration starts from the beginning.
              type: optional<string>
            custom_fields:
              docs: Filters for custom fields.
              type: optional<map<string, unknown>>
            display_name:
              docs: Array of display names of accounts to be filtered.
              type: optional<list<string>>
            domains:
              docs: Domains for accounts to be filtered.
              type: optional<list<string>>
            external_refs:
              docs: Array of references of accounts to be filtered.
              type: optional<list<string>>
            limit:
              docs: >
                The maximum number of accounts to return per page. The default
                is

                '50'.
              type: optional<integer>
            mode: optional<root.ListMode>
            modified_date: optional<root.DateTimeFilter>
            owned_by:
              docs: Filters for accounts owned by the specified user(s).
              type: optional<list<string>>
            sort_by:
              docs: >
                Fields to sort the accounts by and the direction to sort them
                in.
              type: optional<list<string>>
            stage:
              docs: Filters for accounts on specified stages.
              type: optional<list<string>>
            tags:
              docs: List of tags to be filtered.
              type: optional<list<string>>
      response:
        docs: Success.
        type: root.AccountsListResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request: {}
          response:
            body:
              accounts:
                - created_date: '2023-01-01T12:00:00Z'
                  display_id: display_id
                  id: id
                  modified_date: '2023-01-01T12:00:00Z'
                  display_name: display_name
                  artifacts:
                    - id: id
                  custom_schema_fragments:
                    - custom_schema_fragments
                  description: description
                  domains:
                    - domains
                  external_refs:
                    - external_refs
                  owned_by: []
                  stock_schema_fragment: >-
                    don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>
                  subtype: subtype
                  tags:
                    - tag:
                        id: id
                        name: name
                  tier: tier
              next_cursor: next_cursor
              prev_cursor: prev_cursor
    update:
      path: /accounts.update
      method: POST
      auth: true
      docs: Updates an account's information.
      request:
        name: AccountsUpdateRequest
        body:
          properties:
            artifacts: optional<root.AccountsUpdateRequestArtifacts>
            custom_fields:
              docs: Application-defined custom fields.
              type: optional<map<string, unknown>>
            description:
              docs: Updated description of the account.
              type: optional<string>
            display_name:
              docs: Updated display name for the account.
              type: optional<string>
            domains:
              docs: |
                Updated list of company's domain names. Example - ['devrev.ai'].
              type: optional<list<string>>
            external_refs:
              docs: |
                Updated External Refs of account. Currently the length of this
                field is limited to 1.
              type: optional<list<string>>
            id:
              type: string
              docs: The ID of account to update.
            owned_by:
              docs: Updated list of the users owning this account.
              type: optional<list<string>>
            schema_fragment_ids:
              docs: Schema fragment IDs associated with this account SOR.
              type: optional<list<string>>
            tags:
              docs: Updated tags list associated with the account.
              type: optional<list<root.SetTagWithValue>>
            tier:
              docs: Updated tier of the account.
              type: optional<string>
      response:
        docs: Success.
        type: root.AccountsUpdateResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.ConflictError
        - root.TooManyRequestsError
        - root.InternalServerError
        - root.ServiceUnavailableError
      examples:
        - request:
            id: ACC-12345
            tags:
              - id: TAG-12345
          response:
            body:
              account:
                created_date: '2023-01-01T12:00:00Z'
                display_id: display_id
                id: id
                modified_date: '2023-01-01T12:00:00Z'
                display_name: display_name
                artifacts:
                  - id: id
                custom_fields:
                  custom_fields:
                    key: value
                custom_schema_fragments:
                  - custom_schema_fragments
                description: description
                domains:
                  - domains
                external_refs:
                  - external_refs
                owned_by: []
                stock_schema_fragment: >-
                  don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>
                subtype: subtype
                tags:
                  - tag:
                      id: id
                      name: name
                tier: tier
  display-name: accounts
docs: Accounts management APIs
